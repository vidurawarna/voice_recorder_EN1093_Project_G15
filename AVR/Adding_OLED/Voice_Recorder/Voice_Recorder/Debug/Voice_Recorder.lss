
Voice_Recorder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017a  00800100  000062b0  00006344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000062b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000358  0080027a  0080027a  000064be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000064be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000064f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000960  00000000  00000000  00006530  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00045299  00000000  00000000  00006e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000043bc  00000000  00000000  0004c129  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007c29  00000000  00000000  000504e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002390  00000000  00000000  00058110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006800  00000000  00000000  0005a4a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000f40f  00000000  00000000  00060ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b08  00000000  00000000  000700af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <__ctors_end>
       4:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__bad_interrupt>
       8:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__bad_interrupt>
       c:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__bad_interrupt>
      10:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__bad_interrupt>
      14:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__bad_interrupt>
      18:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__bad_interrupt>
      1c:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__bad_interrupt>
      20:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__bad_interrupt>
      24:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__bad_interrupt>
      28:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__bad_interrupt>
      2c:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__bad_interrupt>
      30:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__bad_interrupt>
      34:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__bad_interrupt>
      38:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__bad_interrupt>
      3c:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__bad_interrupt>
      40:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__vector_16>
      44:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__bad_interrupt>
      48:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__bad_interrupt>
      4c:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__bad_interrupt>
      50:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__bad_interrupt>
      54:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__bad_interrupt>
      58:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__bad_interrupt>
      5c:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__bad_interrupt>
      60:	0c 94 e9 2b 	jmp	0x57d2	; 0x57d2 <__vector_24>
      64:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__bad_interrupt>
      68:	f5 2c       	mov	r15, r5
      6a:	f9 2c       	mov	r15, r9
      6c:	f9 2c       	mov	r15, r9
      6e:	f9 2c       	mov	r15, r9
      70:	f9 2c       	mov	r15, r9
      72:	f9 2c       	mov	r15, r9
      74:	f9 2c       	mov	r15, r9
      76:	f9 2c       	mov	r15, r9
      78:	09 2c       	mov	r0, r9
      7a:	f9 2c       	mov	r15, r9
      7c:	f9 2c       	mov	r15, r9
      7e:	f9 2c       	mov	r15, r9
      80:	f9 2c       	mov	r15, r9
      82:	f9 2c       	mov	r15, r9
      84:	f9 2c       	mov	r15, r9
      86:	f9 2c       	mov	r15, r9
      88:	09 2c       	mov	r0, r9
      8a:	f9 2c       	mov	r15, r9
      8c:	f9 2c       	mov	r15, r9
      8e:	f9 2c       	mov	r15, r9
      90:	f9 2c       	mov	r15, r9
      92:	f9 2c       	mov	r15, r9
      94:	f9 2c       	mov	r15, r9
      96:	f9 2c       	mov	r15, r9
      98:	11 2c       	mov	r1, r1
      9a:	f9 2c       	mov	r15, r9
      9c:	f9 2c       	mov	r15, r9
      9e:	f9 2c       	mov	r15, r9
      a0:	f9 2c       	mov	r15, r9
      a2:	f9 2c       	mov	r15, r9
      a4:	f9 2c       	mov	r15, r9
      a6:	f9 2c       	mov	r15, r9
      a8:	37 2c       	mov	r3, r7
      aa:	f9 2c       	mov	r15, r9
      ac:	f9 2c       	mov	r15, r9
      ae:	f9 2c       	mov	r15, r9
      b0:	f9 2c       	mov	r15, r9
      b2:	f9 2c       	mov	r15, r9
      b4:	f9 2c       	mov	r15, r9
      b6:	f9 2c       	mov	r15, r9
      b8:	11 2c       	mov	r1, r1
      ba:	f9 2c       	mov	r15, r9
      bc:	f9 2c       	mov	r15, r9
      be:	f9 2c       	mov	r15, r9
      c0:	f9 2c       	mov	r15, r9
      c2:	f9 2c       	mov	r15, r9
      c4:	f9 2c       	mov	r15, r9
      c6:	f9 2c       	mov	r15, r9
      c8:	3d 2c       	mov	r3, r13
      ca:	f9 2c       	mov	r15, r9
      cc:	f9 2c       	mov	r15, r9
      ce:	f9 2c       	mov	r15, r9
      d0:	f9 2c       	mov	r15, r9
      d2:	f9 2c       	mov	r15, r9
      d4:	f9 2c       	mov	r15, r9
      d6:	f9 2c       	mov	r15, r9
      d8:	43 2c       	mov	r4, r3
      da:	f9 2c       	mov	r15, r9
      dc:	f9 2c       	mov	r15, r9
      de:	f9 2c       	mov	r15, r9
      e0:	f9 2c       	mov	r15, r9
      e2:	f9 2c       	mov	r15, r9
      e4:	f9 2c       	mov	r15, r9
      e6:	f9 2c       	mov	r15, r9
      e8:	55 2c       	mov	r5, r5
      ea:	f9 2c       	mov	r15, r9
      ec:	f9 2c       	mov	r15, r9
      ee:	f9 2c       	mov	r15, r9
      f0:	f9 2c       	mov	r15, r9
      f2:	f9 2c       	mov	r15, r9
      f4:	f9 2c       	mov	r15, r9
      f6:	f9 2c       	mov	r15, r9
      f8:	7f 2c       	mov	r7, r15
      fa:	f9 2c       	mov	r15, r9
      fc:	f9 2c       	mov	r15, r9
      fe:	f9 2c       	mov	r15, r9
     100:	f9 2c       	mov	r15, r9
     102:	f9 2c       	mov	r15, r9
     104:	f9 2c       	mov	r15, r9
     106:	f9 2c       	mov	r15, r9
     108:	49 2c       	mov	r4, r9
     10a:	f9 2c       	mov	r15, r9
     10c:	f9 2c       	mov	r15, r9
     10e:	f9 2c       	mov	r15, r9
     110:	f9 2c       	mov	r15, r9
     112:	f9 2c       	mov	r15, r9
     114:	f9 2c       	mov	r15, r9
     116:	f9 2c       	mov	r15, r9
     118:	63 2c       	mov	r6, r3
     11a:	f9 2c       	mov	r15, r9
     11c:	f9 2c       	mov	r15, r9
     11e:	f9 2c       	mov	r15, r9
     120:	f9 2c       	mov	r15, r9
     122:	f9 2c       	mov	r15, r9
     124:	f9 2c       	mov	r15, r9
     126:	f9 2c       	mov	r15, r9
     128:	82 2c       	mov	r8, r2
     12a:	f9 2c       	mov	r15, r9
     12c:	f9 2c       	mov	r15, r9
     12e:	f9 2c       	mov	r15, r9
     130:	f9 2c       	mov	r15, r9
     132:	f9 2c       	mov	r15, r9
     134:	f9 2c       	mov	r15, r9
     136:	f9 2c       	mov	r15, r9
     138:	82 2c       	mov	r8, r2
     13a:	f9 2c       	mov	r15, r9
     13c:	f9 2c       	mov	r15, r9
     13e:	f9 2c       	mov	r15, r9
     140:	f9 2c       	mov	r15, r9
     142:	f9 2c       	mov	r15, r9
     144:	f9 2c       	mov	r15, r9
     146:	f9 2c       	mov	r15, r9
     148:	82 2c       	mov	r8, r2
     14a:	f9 2c       	mov	r15, r9
     14c:	f9 2c       	mov	r15, r9
     14e:	f9 2c       	mov	r15, r9
     150:	f9 2c       	mov	r15, r9
     152:	f9 2c       	mov	r15, r9
     154:	f9 2c       	mov	r15, r9
     156:	f9 2c       	mov	r15, r9
     158:	82 2c       	mov	r8, r2
     15a:	f9 2c       	mov	r15, r9
     15c:	f9 2c       	mov	r15, r9
     15e:	f9 2c       	mov	r15, r9
     160:	f9 2c       	mov	r15, r9
     162:	f9 2c       	mov	r15, r9
     164:	f9 2c       	mov	r15, r9
     166:	f9 2c       	mov	r15, r9
     168:	8b 2c       	mov	r8, r11
     16a:	f9 2c       	mov	r15, r9
     16c:	f9 2c       	mov	r15, r9
     16e:	f9 2c       	mov	r15, r9
     170:	f9 2c       	mov	r15, r9
     172:	f9 2c       	mov	r15, r9
     174:	f9 2c       	mov	r15, r9
     176:	f9 2c       	mov	r15, r9
     178:	bc 2c       	mov	r11, r12
     17a:	f9 2c       	mov	r15, r9
     17c:	f9 2c       	mov	r15, r9
     17e:	f9 2c       	mov	r15, r9
     180:	f9 2c       	mov	r15, r9
     182:	f9 2c       	mov	r15, r9
     184:	f9 2c       	mov	r15, r9
     186:	f9 2c       	mov	r15, r9
     188:	8b 2c       	mov	r8, r11
     18a:	f9 2c       	mov	r15, r9
     18c:	f9 2c       	mov	r15, r9
     18e:	f9 2c       	mov	r15, r9
     190:	f9 2c       	mov	r15, r9
     192:	f9 2c       	mov	r15, r9
     194:	f9 2c       	mov	r15, r9
     196:	f9 2c       	mov	r15, r9
     198:	bc 2c       	mov	r11, r12
     19a:	f9 2c       	mov	r15, r9
     19c:	f9 2c       	mov	r15, r9
     19e:	f9 2c       	mov	r15, r9
     1a0:	f9 2c       	mov	r15, r9
     1a2:	f9 2c       	mov	r15, r9
     1a4:	f9 2c       	mov	r15, r9
     1a6:	f9 2c       	mov	r15, r9
     1a8:	a3 2c       	mov	r10, r3
     1aa:	f9 2c       	mov	r15, r9
     1ac:	f9 2c       	mov	r15, r9
     1ae:	f9 2c       	mov	r15, r9
     1b0:	f9 2c       	mov	r15, r9
     1b2:	f9 2c       	mov	r15, r9
     1b4:	f9 2c       	mov	r15, r9
     1b6:	f9 2c       	mov	r15, r9
     1b8:	c0 2c       	mov	r12, r0
     1ba:	f9 2c       	mov	r15, r9
     1bc:	f9 2c       	mov	r15, r9
     1be:	f9 2c       	mov	r15, r9
     1c0:	f9 2c       	mov	r15, r9
     1c2:	f9 2c       	mov	r15, r9
     1c4:	f9 2c       	mov	r15, r9
     1c6:	f9 2c       	mov	r15, r9
     1c8:	c0 2c       	mov	r12, r0
     1ca:	f9 2c       	mov	r15, r9
     1cc:	f9 2c       	mov	r15, r9
     1ce:	f9 2c       	mov	r15, r9
     1d0:	f9 2c       	mov	r15, r9
     1d2:	f9 2c       	mov	r15, r9
     1d4:	f9 2c       	mov	r15, r9
     1d6:	f9 2c       	mov	r15, r9
     1d8:	d5 2c       	mov	r13, r5
     1da:	f9 2c       	mov	r15, r9
     1dc:	f9 2c       	mov	r15, r9
     1de:	f9 2c       	mov	r15, r9
     1e0:	f9 2c       	mov	r15, r9
     1e2:	f9 2c       	mov	r15, r9
     1e4:	f9 2c       	mov	r15, r9
     1e6:	f9 2c       	mov	r15, r9
     1e8:	ef 2c       	mov	r14, r15
     1ea:	f9 2c       	mov	r15, r9
     1ec:	f9 2c       	mov	r15, r9
     1ee:	f9 2c       	mov	r15, r9
     1f0:	f9 2c       	mov	r15, r9
     1f2:	f9 2c       	mov	r15, r9
     1f4:	f9 2c       	mov	r15, r9
     1f6:	f9 2c       	mov	r15, r9
     1f8:	ef 2c       	mov	r14, r15

000001fa <__trampolines_end>:
     1fa:	00 00       	nop
     1fc:	00 08       	sbc	r0, r0
     1fe:	00 02       	muls	r16, r16
     200:	01 00       	.word	0x0001	; ????
     202:	00 03       	mulsu	r16, r16
     204:	04 07       	cpc	r16, r20
	...

0000020e <digital_pin_to_bit_mask_PGM>:
     20e:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     21e:	04 08 10 20                                         ... 

00000222 <digital_pin_to_port_PGM>:
     222:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     232:	03 03 03 03                                         ....

00000236 <port_to_output_PGM>:
     236:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000240 <port_to_mode_PGM>:
     240:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000024a <_ZL13Arial_bold_14>:
     24a:	22 08 0d 0e 20 60 04 02 05 06 07 08 09 02 03 03     "... `..........
     25a:	05 08 02 04 02 04 07 04 07 07 07 07 07 07 07 07     ................
     26a:	02 02 07 07 07 08 0e 09 08 08 08 07 07 09 08 02     ................
     27a:	07 08 07 0b 08 09 07 09 09 07 08 08 09 0d 07 08     ................
     28a:	08 04 04 04 06 08 03 07 07 06 07 07 05 07 07 02     ................
     29a:	03 06 02 0a 07 07 07 07 05 06 05 07 07 0b 06 07     ................
     2aa:	05 05 01 05 07 08 00 00 00 00 00 00 00 00 fe fe     ................
     2ba:	18 18 1e 1e 00 1e 1e 00 00 00 00 00 90 f8 9e 90     ................
     2ca:	f8 9e 1c 00 00 1c 00 00 18 3c 26 ff 66 cc 88 04     .........<&.f...
     2da:	0c 18 3c 18 0c 04 1c 22 1c c0 30 8e 40 80 00 00     ..<...."..0.@...
     2ea:	18 04 00 0c 10 0c 80 cc 7e 72 f2 de 0c 80 00 0c     ........~r......
     2fa:	1c 10 10 10 1c 0c 1c 10 1e 1e 00 00 f0 fc 06 1c     ................
     30a:	7c c0 06 fc f0 c0 7c 1c 14 14 0e 14 14 00 00 00     |.....|.........
     31a:	00 00 60 60 60 fc fc 60 60 60 00 00 00 0c 0c 00     ..```..```......
     32a:	00 00 00 00 58 38 c0 c0 c0 c0 00 00 00 00 00 00     ....X8..........
     33a:	18 18 00 c0 38 06 18 04 00 00 f8 fc 0e 06 0e fc     ....8...........
     34a:	f8 04 0c 1c 18 1c 0c 04 18 0c fe fe 00 00 1c 1c     ................
     35a:	18 1c 86 c6 66 3e 1c 18 1c 1c 18 18 18 18 88 8c     ....f>..........
     36a:	06 26 26 fe dc 04 0c 1c 18 18 0c 04 c0 e0 b8 8c     .&&.............
     37a:	fe fe 80 04 04 04 04 1c 1c 04 70 7e 3e 36 36 f6     ..........p~>66.
     38a:	c6 0c 1c 18 18 18 0c 04 f8 fc 6e 66 66 ee cc 04     ..........nff...
     39a:	0c 18 18 18 1c 0c 06 06 06 e6 76 1e 06 00 00 1c     ..........v.....
     3aa:	1c 00 00 00 9c fe 66 66 66 fe 9c 0c 1c 18 18 18     ......fff.......
     3ba:	1c 0c 3c 7e 66 66 66 fc f8 0c 1c 18 18 1c 0c 04     ..<~fff.........
     3ca:	18 18 18 18 18 18 58 38 60 60 f0 f0 98 98 0c 00     ......X8``......
     3da:	00 00 00 04 04 0c d8 d8 d8 d8 d8 d8 d8 00 00 00     ................
     3ea:	00 00 00 00 0c 98 98 f0 f0 60 60 0c 04 04 00 00     .........``.....
     3fa:	00 00 08 0c 06 c6 e6 76 3c 18 00 00 00 18 18 00     .......v<.......
     40a:	00 00 e0 30 08 c4 f6 3a 1a 1a f2 fa 7e 04 08 f0     ...0...:....~...
     41a:	0c 30 60 4c 9c 98 98 8c 9c 9c 90 48 4c 20 00 c0     .0`L.......HL ..
     42a:	f8 be 86 be f8 c0 00 18 1c 04 04 04 04 04 1c 18     ................
     43a:	fe fe 66 66 66 66 fe dc 1c 1c 18 18 18 18 1c 0c     ..ffff..........
     44a:	f8 fc 0e 06 06 0e 9c 08 04 0c 1c 18 18 1c 0c 04     ................
     45a:	fe fe 06 06 06 0e fc f8 1c 1c 18 18 18 1c 0c 04     ................
     46a:	fe fe 66 66 66 66 66 1c 1c 18 18 18 18 18 fe fe     ..fffff.........
     47a:	66 66 66 66 06 1c 1c 00 00 00 00 00 f8 fc 0e 06     ffff............
     48a:	06 c6 ce dc c8 04 0c 1c 18 18 18 18 0c 04 fe fe     ................
     49a:	60 60 60 60 fe fe 1c 1c 00 00 00 00 1c 1c fe fe     ````............
     4aa:	1c 1c 80 80 00 00 00 fe fe 0c 1c 18 18 18 1c 0c     ................
     4ba:	fe fe 60 30 78 ec 86 02 1c 1c 00 00 00 04 1c 18     ..`0x...........
     4ca:	fe fe 00 00 00 00 00 1c 1c 18 18 18 18 18 fe fe     ................
     4da:	0e 7c e0 00 e0 7c 0e fe fe 1c 1c 00 00 0c 1c 0c     .|...|..........
     4ea:	00 00 1c 1c fe fe 1c 78 e0 80 fe fe 1c 1c 00 00     .......x........
     4fa:	04 0c 1c 1c f8 fc 0e 06 06 06 0e fc f8 04 0c 1c     ................
     50a:	18 18 18 1c 0c 04 fe fe 66 66 66 7e 3c 1c 1c 00     ........fff~<...
     51a:	00 00 00 00 f8 fc 0e 06 86 06 0e fc f8 04 0c 1c     ................
     52a:	18 18 1c 0c 1c 24 fe fe 66 66 e6 e6 be 1c 00 1c     .....$..ff......
     53a:	1c 00 00 00 0c 1c 18 10 3c 7e 66 66 66 ee cc 0c     ........<~fff...
     54a:	1c 18 18 18 1c 0c 06 06 06 fe fe 06 06 06 00 00     ................
     55a:	00 1c 1c 00 00 00 fe fe 00 00 00 00 fe fe 04 0c     ................
     56a:	1c 18 18 1c 0c 04 02 1e fc e0 00 e0 fc 1e 02 00     ................
     57a:	00 00 1c 1c 1c 00 00 00 06 fe f8 00 f0 fe 0e fe     ................
     58a:	f0 00 f8 fe 06 00 00 1c 1c 1c 00 00 00 1c 1c 1c     ................
     59a:	00 00 06 0e f8 f0 f8 0e 06 18 1c 04 00 04 1c 18     ................
     5aa:	06 0e 38 f0 f0 38 0e 06 00 00 00 1c 1c 00 00 00     ..8..8..........
     5ba:	06 06 86 e6 76 1e 0e 06 18 1c 1c 18 18 18 18 18     ....v...........
     5ca:	fe fe 06 06 fc fc c0 c0 06 38 c0 00 00 00 04 18     .........8......
     5da:	06 06 fe fe c0 c0 fc fc 20 38 0e 0e 38 20 00 00     ........ 8..8 ..
	...
     5f6:	80 80 80 80 80 80 80 80 02 06 04 00 00 00 10 98     ................
     606:	d8 58 f8 f0 00 0c 1c 18 18 0c 1c 10 fe fe 30 18     .X............0.
     616:	38 f0 e0 1c 1c 0c 18 1c 0c 04 e0 f0 18 18 38 30     8.............80
     626:	04 0c 18 18 1c 0c e0 f0 38 18 30 fe fe 04 0c 1c     ........8.0.....
     636:	18 0c 1c 1c e0 f0 d8 d8 d8 f0 e0 04 0c 18 18 18     ................
     646:	18 08 18 fc fe 1a 1a 00 1c 1c 00 00 e0 f0 38 18     ..............8.
     656:	30 f8 f8 64 ec dc d8 cc fc 7c fe fe 30 18 18 f8     0..d.....|..0...
     666:	f0 1c 1c 00 00 00 1c 1c fa fa 1c 1c 00 fa fa c0     ................
     676:	fc 7c fe fe e0 f0 98 08 1c 1c 00 04 1c 18 fe fe     .|..............
     686:	1c 1c f8 f8 10 18 f8 f0 18 18 f8 f0 1c 1c 00 00     ................
     696:	1c 1c 00 00 1c 1c f8 f8 30 18 18 f8 f0 1c 1c 00     ........0.......
     6a6:	00 00 1c 1c e0 f0 38 18 38 f0 e0 04 0c 1c 18 1c     ......8.8.......
     6b6:	0c 04 f8 f8 30 18 38 f0 e0 fc fc 0c 18 1c 0c 04     ....0.8.........
     6c6:	e0 f0 38 18 30 f8 f8 04 0c 1c 18 0c fc fc f8 f8     ..8.0...........
     6d6:	30 18 18 1c 1c 00 00 00 70 f8 d8 d8 d8 90 08 18     0.......p.......
     6e6:	18 18 1c 0c 18 fc fe 18 18 00 0c 1c 18 18 f8 f8     ................
     6f6:	00 00 00 f8 f8 0c 1c 18 18 0c 1c 1c 38 f8 c0 00     ............8...
     706:	c0 f8 38 00 00 1c 1c 1c 00 00 18 f8 e0 00 f0 38     ..8............8
     716:	f0 00 e0 f8 18 00 00 1c 1c 0c 00 0c 1c 1c 00 00     ................
     726:	18 38 e0 e0 38 18 18 1c 04 04 1c 18 18 f8 e0 00     .8..8...........
     736:	e0 f8 18 00 84 fc f8 3c 04 00 18 98 d8 78 38 1c     .......<.....x8.
     746:	1c 18 18 18 80 fc 7e 06 06 00 7c fc c0 c0 fe fc     ......~...|.....
     756:	06 06 7e fc 80 c0 c0 fc 7c 00 60 30 30 70 60 60     ..~.....|.`00p``
     766:	30 00 00 00 00 00 00 00 fe 02 02 02 02 02 02 fe     0...............
     776:	1c 10 10 10 10 10 10 1c                             ........

0000077e <_ZL12ZevvPeep8x16>:
     77e:	00 00 07 0e 20 60 00 00 00 00 00 00 00 00 00 00     .... `..........
     78e:	00 00 00 00 00 00 fc 00 00 00 00 00 00 0d 00 00     ................
     79e:	00 00 00 3c 00 3c 00 00 00 00 00 00 00 00 00 00     ...<.<..........
     7ae:	20 f8 20 20 f8 20 00 01 07 01 01 07 01 00 60 90      .  . ........`.
     7be:	f8 90 10 00 00 04 04 0f 04 03 00 00 18 24 98 60     .............$.`
     7ce:	10 0c 00 0c 02 01 06 09 06 00 30 c8 c8 30 00 00     ..........0..0..
     7de:	00 07 08 08 09 06 09 00 00 00 3c 00 00 00 00 00     ..........<.....
	...
     7f6:	e0 18 04 02 00 00 00 03 0c 10 20 00 02 04 18 e0     .......... .....
     806:	00 00 00 20 10 0c 03 00 00 00 80 a0 c0 c0 a0 80     ... ............
     816:	00 00 02 01 01 02 00 00 80 80 80 f0 80 80 80 00     ................
     826:	00 00 07 00 00 00 00 00 00 00 00 00 00 20 18 0c     ............. ..
     836:	04 00 00 00 80 80 80 80 80 80 00 00 00 00 00 00     ................
	...
     84e:	00 00 08 1c 08 00 00 00 00 00 80 60 18 06 00 18     ...........`....
     85e:	06 01 00 00 00 00 f0 08 84 44 08 f0 00 03 04 08     .........D......
     86e:	08 04 03 00 20 10 08 fc 00 00 00 00 00 00 0f 00     .... ...........
     87e:	00 00 18 04 04 84 44 38 00 0c 0a 09 08 08 08 00     ......D8........
     88e:	08 04 44 44 44 b8 00 06 08 08 08 08 07 00 80 60     ..DDD..........`
     89e:	18 04 fc 00 00 01 01 01 01 0f 01 00 7c 24 24 24     ............|$$$
     8ae:	24 c4 00 06 08 08 08 08 07 00 f8 84 44 44 44 88     $...........DDD.
     8be:	00 07 08 08 08 08 07 00 04 04 04 c4 34 0c 00 00     ............4...
     8ce:	0c 03 00 00 00 00 b8 44 44 44 44 b8 00 07 08 08     .......DDDD.....
     8de:	08 08 07 00 78 84 84 84 44 f8 00 04 08 08 08 08     ....x...D.......
     8ee:	07 00 00 20 70 20 00 00 00 00 08 1c 08 00 00 00     ... p ..........
     8fe:	00 20 70 20 00 00 00 20 18 0c 04 00 00 00 80 40     . p ... .......@
     90e:	20 10 08 00 00 00 01 02 04 08 00 00 40 40 40 40      ...........@@@@
     91e:	40 40 00 02 02 02 02 02 02 00 00 08 10 20 40 80     @@........... @.
     92e:	00 00 08 04 02 01 00 00 04 84 44 24 18 00 00 00     ..........D$....
     93e:	0d 00 00 00 00 00 f0 08 c4 24 24 f8 00 03 04 09     .........$$.....
     94e:	0a 0a 03 00 f8 84 84 84 84 f8 00 0f 00 00 00 00     ................
     95e:	0f 00 fc 44 44 44 78 80 00 0f 08 08 08 08 07 00     ...DDDx.........
     96e:	f8 04 04 04 04 18 00 07 08 08 08 08 06 00 fc 04     ................
     97e:	04 04 08 f0 00 0f 08 08 08 04 03 00 fc 44 44 44     .............DDD
     98e:	44 04 00 0f 08 08 08 08 08 00 fc 44 44 44 44 04     D..........DDDD.
     99e:	00 0f 00 00 00 00 00 00 f8 04 04 84 84 98 00 07     ................
     9ae:	08 08 08 08 07 00 fc 40 40 40 40 fc 00 0f 00 00     .......@@@@.....
     9be:	00 00 0f 00 04 04 fc 04 04 00 00 08 08 0f 08 08     ................
     9ce:	00 00 00 00 04 04 04 fc 00 06 08 08 08 08 07 00     ................
     9de:	fc 40 20 d0 08 04 00 0f 00 00 00 03 0c 00 fc 00     .@ .............
     9ee:	00 00 00 00 00 0f 08 08 08 08 08 00 fc 18 60 80     ..............`.
     9fe:	60 18 fc 0f 00 00 01 00 00 0f fc 18 60 80 00 fc     `...........`...
     a0e:	00 0f 00 00 01 06 0f 00 f8 04 04 04 04 f8 00 07     ................
     a1e:	08 08 08 08 07 00 fc 84 84 84 84 78 00 0f 00 00     ...........x....
     a2e:	00 00 00 00 f8 04 04 04 04 f8 00 07 08 08 0e 18     ................
     a3e:	17 00 fc 84 84 84 84 78 00 0f 00 01 02 04 08 00     .......x........
     a4e:	38 44 44 84 84 08 00 04 08 08 08 08 07 00 04 04     8DD.............
     a5e:	04 fc 04 04 04 00 00 00 0f 00 00 00 fc 00 00 00     ................
     a6e:	00 fc 00 07 08 08 08 08 07 00 fc 00 00 00 00 fc     ................
     a7e:	00 00 03 0c 0c 03 00 00 fc 00 00 c0 00 00 fc 03     ................
     a8e:	0c 03 00 03 0c 03 0c 30 c0 c0 30 0c 00 0c 03 00     .......0..0.....
     a9e:	00 03 0c 00 3c 40 80 80 40 3c 00 00 00 00 0f 00     ....<@..@<......
     aae:	00 00 04 04 84 44 34 0c 00 0c 0a 09 08 08 08 00     .....D4.........
     abe:	00 00 fe 02 02 02 00 00 00 3f 20 20 20 00 06 18     .........?   ...
     ace:	60 80 00 00 00 00 00 00 01 06 18 00 02 02 02 fe     `...............
     ade:	00 00 00 20 20 20 3f 00 00 00 10 08 04 04 08 10     ...   ?.........
	...
     afa:	00 00 00 20 20 20 20 20 20 00 00 04 0c 18 20 00     ...      ..... .
	...
     b12:	00 a0 a0 a0 a0 c0 00 07 08 08 08 04 0f 00 fc 40     ...............@
     b22:	20 20 20 c0 00 0f 04 08 08 08 07 00 c0 20 20 20        ..........   
     b32:	20 40 00 07 08 08 08 08 04 00 c0 20 20 20 40 fc      @.........   @.
     b42:	00 07 08 08 08 04 0f 00 c0 20 20 20 20 c0 00 07     .........    ...
     b52:	09 09 09 09 09 00 80 f8 84 84 84 08 00 00 0f 00     ................
     b62:	00 00 00 00 c0 20 20 20 40 e0 00 23 44 44 44 42     .....   @..#DDDB
     b72:	3f 00 fc 40 20 20 20 c0 00 0f 00 00 00 00 0f 00     ?..@   .........
     b82:	00 20 20 ec 00 00 00 00 00 00 0f 00 00 00 00 00     .  .............
     b92:	20 20 ec 00 00 10 20 20 20 1f 00 00 fc 00 80 40       ....   ......@
     ba2:	20 00 00 0f 01 01 02 04 08 00 00 fc 00 00 00 00      ...............
     bb2:	00 00 07 08 08 08 00 00 e0 20 20 c0 20 20 c0 0f     .........  .  ..
     bc2:	00 00 03 00 00 0f e0 40 20 20 20 c0 00 0f 00 00     .......@   .....
     bd2:	00 00 0f 00 c0 20 20 20 20 c0 00 07 08 08 08 08     .....    .......
     be2:	07 00 e0 40 20 20 20 c0 00 7f 02 04 04 04 03 00     ...@   .........
     bf2:	c0 20 20 20 40 e0 00 03 04 04 04 02 7f 00 e0 40     .   @..........@
     c02:	20 20 20 40 00 0f 00 00 00 00 00 00 c0 20 20 20        @.........   
     c12:	20 40 00 04 09 09 09 09 06 00 20 f8 20 20 20 00      @........ .   .
     c22:	00 00 07 08 08 08 04 00 e0 00 00 00 00 e0 00 07     ................
     c32:	08 08 08 04 0f 00 e0 00 00 00 00 e0 00 00 03 0c     ................
     c42:	0c 03 00 00 e0 00 00 80 00 00 e0 07 08 04 03 04     ................
     c52:	08 07 20 40 80 80 40 20 00 08 04 02 02 04 08 00     .. @..@ ........
     c62:	e0 00 00 00 00 e0 00 23 44 44 44 42 3f 00 20 20     .......#DDDB?.  
     c72:	20 20 a0 60 00 08 0c 0a 09 08 08 00 00 80 80 7c       .`...........|
     c82:	02 02 00 00 00 00 1f 20 20 00 00 00 fe 00 00 00     .......  .......
     c92:	00 00 00 1f 00 00 00 00 02 02 7c 80 80 00 00 20     ..........|.... 
     ca2:	20 1f 00 00 00 00 30 08 08 10 20 20 18 00 00 00      .....0...  ....
     cb2:	00 00 00 00 fe fe fe fe fe fe fe 7f 7f 7f 7f 7f     ................
     cc2:	7f 7f                                               ..

00000cc4 <_ZL14Adafruit128x32>:
     cc4:	ca 0c 19 80 20 00                                   .... .

00000cca <_ZL18Adafruit128x32init>:
     cca:	ae d5 80 a8 1f d3 00 40 8d 14 20 02 a1 c8 da 02     .......@.. .....
     cda:	81 7f d9 f1 db 40 a4 a6 af                          .....@...

00000ce3 <_ZZN6SdFile10make83NameEPKcPhE3__c>:
     ce3:	7c 3c 3e 5e 2b 3d 3f 2f 5b 5d 3b 2c 2a 22 5c 00     |<>^+=?/[];,*"\.

00000cf3 <_ZL12scaledNibble>:
     cf3:	00 03 0c 0f 30 33 3c 3f c0 c3 cc cf f0 f3 fc ff     ....03<?........
	...

00000d04 <__ctors_start>:
     d04:	de 11       	cpse	r29, r14
     d06:	df 16       	cp	r13, r31
     d08:	64 1a       	sub	r6, r20
     d0a:	b1 2d       	mov	r27, r1

00000d0c <__ctors_end>:
     d0c:	11 24       	eor	r1, r1
     d0e:	1f be       	out	0x3f, r1	; 63
     d10:	cf ef       	ldi	r28, 0xFF	; 255
     d12:	d8 e0       	ldi	r29, 0x08	; 8
     d14:	de bf       	out	0x3e, r29	; 62
     d16:	cd bf       	out	0x3d, r28	; 61

00000d18 <__do_copy_data>:
     d18:	12 e0       	ldi	r17, 0x02	; 2
     d1a:	a0 e0       	ldi	r26, 0x00	; 0
     d1c:	b1 e0       	ldi	r27, 0x01	; 1
     d1e:	e0 eb       	ldi	r30, 0xB0	; 176
     d20:	f2 e6       	ldi	r31, 0x62	; 98
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <__do_copy_data+0x10>
     d24:	05 90       	lpm	r0, Z+
     d26:	0d 92       	st	X+, r0
     d28:	aa 37       	cpi	r26, 0x7A	; 122
     d2a:	b1 07       	cpc	r27, r17
     d2c:	d9 f7       	brne	.-10     	; 0xd24 <__do_copy_data+0xc>

00000d2e <__do_clear_bss>:
     d2e:	25 e0       	ldi	r18, 0x05	; 5
     d30:	aa e7       	ldi	r26, 0x7A	; 122
     d32:	b2 e0       	ldi	r27, 0x02	; 2
     d34:	01 c0       	rjmp	.+2      	; 0xd38 <.do_clear_bss_start>

00000d36 <.do_clear_bss_loop>:
     d36:	1d 92       	st	X+, r1

00000d38 <.do_clear_bss_start>:
     d38:	a2 3d       	cpi	r26, 0xD2	; 210
     d3a:	b2 07       	cpc	r27, r18
     d3c:	e1 f7       	brne	.-8      	; 0xd36 <.do_clear_bss_loop>

00000d3e <__do_global_ctors>:
     d3e:	16 e0       	ldi	r17, 0x06	; 6
     d40:	c6 e8       	ldi	r28, 0x86	; 134
     d42:	d6 e0       	ldi	r29, 0x06	; 6
     d44:	04 c0       	rjmp	.+8      	; 0xd4e <__do_global_ctors+0x10>
     d46:	21 97       	sbiw	r28, 0x01	; 1
     d48:	fe 01       	movw	r30, r28
     d4a:	0e 94 d5 2f 	call	0x5faa	; 0x5faa <__tablejump2__>
     d4e:	c2 38       	cpi	r28, 0x82	; 130
     d50:	d1 07       	cpc	r29, r17
     d52:	c9 f7       	brne	.-14     	; 0xd46 <__do_global_ctors+0x8>
     d54:	0e 94 b4 10 	call	0x2168	; 0x2168 <main>
     d58:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <_exit>

00000d5c <__bad_interrupt>:
     d5c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000d60 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
     d60:	0e 94 2a 31 	call	0x6254	; 0x6254 <abort>

00000d64 <_ZN5Print17availableForWriteEv>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	08 95       	ret

00000d6a <_ZN5Print5flushEv>:
     d6a:	08 95       	ret

00000d6c <_ZN5Print5writeEPKhj>:
     d6c:	cf 92       	push	r12
     d6e:	df 92       	push	r13
     d70:	ef 92       	push	r14
     d72:	ff 92       	push	r15
     d74:	0f 93       	push	r16
     d76:	1f 93       	push	r17
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	8c 01       	movw	r16, r24
     d7e:	db 01       	movw	r26, r22
     d80:	c0 e0       	ldi	r28, 0x00	; 0
     d82:	d0 e0       	ldi	r29, 0x00	; 0
     d84:	7a 01       	movw	r14, r20
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	e8 1a       	sub	r14, r24
     d8a:	f1 08       	sbc	r15, r1
     d8c:	45 2b       	or	r20, r21
     d8e:	a1 f0       	breq	.+40     	; 0xdb8 <_ZN5Print5writeEPKhj+0x4c>
     d90:	f8 01       	movw	r30, r16
     d92:	80 81       	ld	r24, Z
     d94:	91 81       	ldd	r25, Z+1	; 0x01
     d96:	fc 01       	movw	r30, r24
     d98:	20 81       	ld	r18, Z
     d9a:	31 81       	ldd	r19, Z+1	; 0x01
     d9c:	6d 01       	movw	r12, r26
     d9e:	ff ef       	ldi	r31, 0xFF	; 255
     da0:	cf 1a       	sub	r12, r31
     da2:	df 0a       	sbc	r13, r31
     da4:	6c 91       	ld	r22, X
     da6:	c8 01       	movw	r24, r16
     da8:	f9 01       	movw	r30, r18
     daa:	09 95       	icall
     dac:	89 2b       	or	r24, r25
     dae:	21 f0       	breq	.+8      	; 0xdb8 <_ZN5Print5writeEPKhj+0x4c>
     db0:	21 96       	adiw	r28, 0x01	; 1
     db2:	a7 01       	movw	r20, r14
     db4:	d6 01       	movw	r26, r12
     db6:	e6 cf       	rjmp	.-52     	; 0xd84 <_ZN5Print5writeEPKhj+0x18>
     db8:	ce 01       	movw	r24, r28
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	1f 91       	pop	r17
     dc0:	0f 91       	pop	r16
     dc2:	ff 90       	pop	r15
     dc4:	ef 90       	pop	r14
     dc6:	df 90       	pop	r13
     dc8:	cf 90       	pop	r12
     dca:	08 95       	ret

00000dcc <_ZN5Print5printEPKc>:
     dcc:	61 15       	cp	r22, r1
     dce:	71 05       	cpc	r23, r1
     dd0:	81 f0       	breq	.+32     	; 0xdf2 <_ZN5Print5printEPKc+0x26>
     dd2:	fb 01       	movw	r30, r22
     dd4:	01 90       	ld	r0, Z+
     dd6:	00 20       	and	r0, r0
     dd8:	e9 f7       	brne	.-6      	; 0xdd4 <_ZN5Print5printEPKc+0x8>
     dda:	31 97       	sbiw	r30, 0x01	; 1
     ddc:	af 01       	movw	r20, r30
     dde:	46 1b       	sub	r20, r22
     de0:	57 0b       	sbc	r21, r23
     de2:	dc 01       	movw	r26, r24
     de4:	ed 91       	ld	r30, X+
     de6:	fc 91       	ld	r31, X
     de8:	02 80       	ldd	r0, Z+2	; 0x02
     dea:	f3 81       	ldd	r31, Z+3	; 0x03
     dec:	e0 2d       	mov	r30, r0
     dee:	09 95       	icall
     df0:	08 95       	ret
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	08 95       	ret

00000df8 <_ZN5Print7printlnEv>:
     df8:	dc 01       	movw	r26, r24
     dfa:	ed 91       	ld	r30, X+
     dfc:	fc 91       	ld	r31, X
     dfe:	02 80       	ldd	r0, Z+2	; 0x02
     e00:	f3 81       	ldd	r31, Z+3	; 0x03
     e02:	e0 2d       	mov	r30, r0
     e04:	42 e0       	ldi	r20, 0x02	; 2
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	65 e7       	ldi	r22, 0x75	; 117
     e0a:	71 e0       	ldi	r23, 0x01	; 1
     e0c:	09 95       	icall
     e0e:	08 95       	ret

00000e10 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	ec 01       	movw	r28, r24
  size_t n = print(c);
     e1a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN5Print5printEPKc>
     e1e:	8c 01       	movw	r16, r24
  n += println();
     e20:	ce 01       	movw	r24, r28
     e22:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <_ZN5Print7printlnEv>
  return n;
}
     e26:	80 0f       	add	r24, r16
     e28:	91 1f       	adc	r25, r17
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	1f 91       	pop	r17
     e30:	0f 91       	pop	r16
     e32:	08 95       	ret

00000e34 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     e34:	1f 92       	push	r1
     e36:	0f 92       	push	r0
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	0f 92       	push	r0
     e3c:	11 24       	eor	r1, r1
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	2f 93       	push	r18
     e44:	3f 93       	push	r19
     e46:	4f 93       	push	r20
     e48:	5f 93       	push	r21
     e4a:	6f 93       	push	r22
     e4c:	7f 93       	push	r23
     e4e:	8f 93       	push	r24
     e50:	9f 93       	push	r25
     e52:	af 93       	push	r26
     e54:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     e56:	00 91 7b 02 	lds	r16, 0x027B	; 0x80027b <timer0_millis>
     e5a:	10 91 7c 02 	lds	r17, 0x027C	; 0x80027c <timer0_millis+0x1>
     e5e:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <timer0_millis+0x2>
     e62:	30 91 7e 02 	lds	r19, 0x027E	; 0x80027e <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     e66:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <__data_end>

	m += MILLIS_INC;
     e6a:	b9 01       	movw	r22, r18
     e6c:	a8 01       	movw	r20, r16
     e6e:	4f 5f       	subi	r20, 0xFF	; 255
     e70:	5f 4f       	sbci	r21, 0xFF	; 255
     e72:	6f 4f       	sbci	r22, 0xFF	; 255
     e74:	7f 4f       	sbci	r23, 0xFF	; 255
	f += FRACT_INC;
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	89 0f       	add	r24, r25
	if (f >= FRACT_MAX) {
     e7a:	8d 37       	cpi	r24, 0x7D	; 125
     e7c:	40 f0       	brcs	.+16     	; 0xe8e <__vector_16+0x5a>
		f -= FRACT_MAX;
     e7e:	86 e8       	ldi	r24, 0x86	; 134
     e80:	89 0f       	add	r24, r25
		m += 1;
     e82:	b9 01       	movw	r22, r18
     e84:	a8 01       	movw	r20, r16
     e86:	4e 5f       	subi	r20, 0xFE	; 254
     e88:	5f 4f       	sbci	r21, 0xFF	; 255
     e8a:	6f 4f       	sbci	r22, 0xFF	; 255
     e8c:	7f 4f       	sbci	r23, 0xFF	; 255
	}

	timer0_fract = f;
     e8e:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <__data_end>
	timer0_millis = m;
     e92:	40 93 7b 02 	sts	0x027B, r20	; 0x80027b <timer0_millis>
     e96:	50 93 7c 02 	sts	0x027C, r21	; 0x80027c <timer0_millis+0x1>
     e9a:	60 93 7d 02 	sts	0x027D, r22	; 0x80027d <timer0_millis+0x2>
     e9e:	70 93 7e 02 	sts	0x027E, r23	; 0x80027e <timer0_millis+0x3>
	timer0_overflow_count++;
     ea2:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <timer0_overflow_count>
     ea6:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <timer0_overflow_count+0x1>
     eaa:	a0 91 81 02 	lds	r26, 0x0281	; 0x800281 <timer0_overflow_count+0x2>
     eae:	b0 91 82 02 	lds	r27, 0x0282	; 0x800282 <timer0_overflow_count+0x3>
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	a1 1d       	adc	r26, r1
     eb6:	b1 1d       	adc	r27, r1
     eb8:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <timer0_overflow_count>
     ebc:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <timer0_overflow_count+0x1>
     ec0:	a0 93 81 02 	sts	0x0281, r26	; 0x800281 <timer0_overflow_count+0x2>
     ec4:	b0 93 82 02 	sts	0x0282, r27	; 0x800282 <timer0_overflow_count+0x3>
}
     ec8:	bf 91       	pop	r27
     eca:	af 91       	pop	r26
     ecc:	9f 91       	pop	r25
     ece:	8f 91       	pop	r24
     ed0:	7f 91       	pop	r23
     ed2:	6f 91       	pop	r22
     ed4:	5f 91       	pop	r21
     ed6:	4f 91       	pop	r20
     ed8:	3f 91       	pop	r19
     eda:	2f 91       	pop	r18
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	0f 90       	pop	r0
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	0f 90       	pop	r0
     ee6:	1f 90       	pop	r1
     ee8:	18 95       	reti

00000eea <millis>:
unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     eea:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     eec:	f8 94       	cli
	m = timer0_millis;
     eee:	60 91 7b 02 	lds	r22, 0x027B	; 0x80027b <timer0_millis>
     ef2:	70 91 7c 02 	lds	r23, 0x027C	; 0x80027c <timer0_millis+0x1>
     ef6:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <timer0_millis+0x2>
     efa:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <timer0_millis+0x3>
	SREG = oldSREG;
     efe:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     f00:	08 95       	ret

00000f02 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     f02:	83 30       	cpi	r24, 0x03	; 3
     f04:	69 f0       	breq	.+26     	; 0xf20 <turnOffPWM+0x1e>
     f06:	28 f4       	brcc	.+10     	; 0xf12 <turnOffPWM+0x10>
     f08:	81 30       	cpi	r24, 0x01	; 1
     f0a:	b1 f0       	breq	.+44     	; 0xf38 <turnOffPWM+0x36>
     f0c:	82 30       	cpi	r24, 0x02	; 2
     f0e:	c1 f0       	breq	.+48     	; 0xf40 <turnOffPWM+0x3e>
     f10:	08 95       	ret
     f12:	87 30       	cpi	r24, 0x07	; 7
     f14:	c9 f0       	breq	.+50     	; 0xf48 <turnOffPWM+0x46>
     f16:	88 30       	cpi	r24, 0x08	; 8
     f18:	e9 f0       	breq	.+58     	; 0xf54 <turnOffPWM+0x52>
     f1a:	84 30       	cpi	r24, 0x04	; 4
     f1c:	01 f5       	brne	.+64     	; 0xf5e <turnOffPWM+0x5c>
     f1e:	06 c0       	rjmp	.+12     	; 0xf2c <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     f20:	e0 e8       	ldi	r30, 0x80	; 128
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	8f 77       	andi	r24, 0x7F	; 127
     f28:	80 83       	st	Z, r24
     f2a:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f2c:	e0 e8       	ldi	r30, 0x80	; 128
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	8f 7d       	andi	r24, 0xDF	; 223
     f34:	80 83       	st	Z, r24
     f36:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     f38:	84 b5       	in	r24, 0x24	; 36
     f3a:	8f 77       	andi	r24, 0x7F	; 127
     f3c:	84 bd       	out	0x24, r24	; 36
     f3e:	08 95       	ret
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     f40:	84 b5       	in	r24, 0x24	; 36
     f42:	8f 7d       	andi	r24, 0xDF	; 223
     f44:	84 bd       	out	0x24, r24	; 36
     f46:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     f48:	e0 eb       	ldi	r30, 0xB0	; 176
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	8f 77       	andi	r24, 0x7F	; 127
     f50:	80 83       	st	Z, r24
     f52:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     f54:	e0 eb       	ldi	r30, 0xB0	; 176
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8f 7d       	andi	r24, 0xDF	; 223
     f5c:	80 83       	st	Z, r24
     f5e:	08 95       	ret

00000f60 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	fc 01       	movw	r30, r24
     f68:	e2 5f       	subi	r30, 0xF2	; 242
     f6a:	fd 4f       	sbci	r31, 0xFD	; 253
     f6c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     f6e:	fc 01       	movw	r30, r24
     f70:	ee 5d       	subi	r30, 0xDE	; 222
     f72:	fd 4f       	sbci	r31, 0xFD	; 253
     f74:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     f76:	88 23       	and	r24, r24
     f78:	79 f1       	breq	.+94     	; 0xfd8 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	fc 01       	movw	r30, r24
     f82:	e0 5c       	subi	r30, 0xC0	; 192
     f84:	fd 4f       	sbci	r31, 0xFD	; 253
     f86:	a5 91       	lpm	r26, Z+
     f88:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     f8a:	fc 01       	movw	r30, r24
     f8c:	ea 5c       	subi	r30, 0xCA	; 202
     f8e:	fd 4f       	sbci	r31, 0xFD	; 253
     f90:	c5 91       	lpm	r28, Z+
     f92:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     f94:	61 11       	cpse	r22, r1
     f96:	0c c0       	rjmp	.+24     	; 0xfb0 <pinMode+0x50>
		uint8_t oldSREG = SREG;
     f98:	9f b7       	in	r25, 0x3f	; 63
                cli();
     f9a:	f8 94       	cli
		*reg &= ~bit;
     f9c:	8c 91       	ld	r24, X
     f9e:	e2 2f       	mov	r30, r18
     fa0:	e0 95       	com	r30
     fa2:	8e 23       	and	r24, r30
     fa4:	8c 93       	st	X, r24
		*out &= ~bit;
     fa6:	28 81       	ld	r18, Y
     fa8:	e2 23       	and	r30, r18
     faa:	e8 83       	st	Y, r30
		SREG = oldSREG;
     fac:	9f bf       	out	0x3f, r25	; 63
     fae:	14 c0       	rjmp	.+40     	; 0xfd8 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
     fb0:	62 30       	cpi	r22, 0x02	; 2
     fb2:	61 f4       	brne	.+24     	; 0xfcc <pinMode+0x6c>
		uint8_t oldSREG = SREG;
     fb4:	9f b7       	in	r25, 0x3f	; 63
                cli();
     fb6:	f8 94       	cli
		*reg &= ~bit;
     fb8:	8c 91       	ld	r24, X
     fba:	32 2f       	mov	r19, r18
     fbc:	30 95       	com	r19
     fbe:	83 23       	and	r24, r19
     fc0:	8c 93       	st	X, r24
		*out |= bit;
     fc2:	e8 81       	ld	r30, Y
     fc4:	e2 2b       	or	r30, r18
     fc6:	e8 83       	st	Y, r30
		SREG = oldSREG;
     fc8:	9f bf       	out	0x3f, r25	; 63
     fca:	06 c0       	rjmp	.+12     	; 0xfd8 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
     fcc:	8f b7       	in	r24, 0x3f	; 63
                cli();
     fce:	f8 94       	cli
		*reg |= bit;
     fd0:	ec 91       	ld	r30, X
     fd2:	e2 2b       	or	r30, r18
     fd4:	ec 93       	st	X, r30
		SREG = oldSREG;
     fd6:	8f bf       	out	0x3f, r24	; 63
	}
}
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	08 95       	ret

00000fde <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	f9 01       	movw	r30, r18
     fea:	e6 50       	subi	r30, 0x06	; 6
     fec:	fe 4f       	sbci	r31, 0xFE	; 254
     fee:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     ff0:	f9 01       	movw	r30, r18
     ff2:	e2 5f       	subi	r30, 0xF2	; 242
     ff4:	fd 4f       	sbci	r31, 0xFD	; 253
     ff6:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     ff8:	f9 01       	movw	r30, r18
     ffa:	ee 5d       	subi	r30, 0xDE	; 222
     ffc:	fd 4f       	sbci	r31, 0xFD	; 253
     ffe:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1000:	cc 23       	and	r28, r28
    1002:	d1 f0       	breq	.+52     	; 0x1038 <digitalWrite+0x5a>
    1004:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1006:	81 11       	cpse	r24, r1
    1008:	0e 94 81 07 	call	0xf02	; 0xf02 <turnOffPWM>

	out = portOutputRegister(port);
    100c:	ec 2f       	mov	r30, r28
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	ee 0f       	add	r30, r30
    1012:	ff 1f       	adc	r31, r31
    1014:	ea 5c       	subi	r30, 0xCA	; 202
    1016:	fd 4f       	sbci	r31, 0xFD	; 253
    1018:	a5 91       	lpm	r26, Z+
    101a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    101c:	8f b7       	in	r24, 0x3f	; 63
	cli();
    101e:	f8 94       	cli

	if (val == LOW) {
    1020:	d1 11       	cpse	r29, r1
    1022:	06 c0       	rjmp	.+12     	; 0x1030 <digitalWrite+0x52>
		*out &= ~bit;
    1024:	9c 91       	ld	r25, X
    1026:	e1 2f       	mov	r30, r17
    1028:	e0 95       	com	r30
    102a:	e9 23       	and	r30, r25
    102c:	ec 93       	st	X, r30
    102e:	03 c0       	rjmp	.+6      	; 0x1036 <digitalWrite+0x58>
	} else {
		*out |= bit;
    1030:	ec 91       	ld	r30, X
    1032:	e1 2b       	or	r30, r17
    1034:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    1036:	8f bf       	out	0x3f, r24	; 63
}
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	1f 91       	pop	r17
    103e:	08 95       	ret

00001040 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh>:
  //lcd.setCursor(0, 0);
  //lcd.print(msg);
  oled.setFont(Arial_bold_14);
  oled.println(msg);
  
}
    1040:	fc 01       	movw	r30, r24
    1042:	84 89       	ldd	r24, Z+20	; 0x14
    1044:	88 23       	and	r24, r24
    1046:	79 f0       	breq	.+30     	; 0x1066 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0x26>
    1048:	41 11       	cpse	r20, r1
    104a:	0d c0       	rjmp	.+26     	; 0x1066 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0x26>
    104c:	84 e9       	ldi	r24, 0x94	; 148
    104e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1052:	94 e6       	ldi	r25, 0x64	; 100
    1054:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1058:	24 ff       	sbrs	r18, 4
    105a:	04 c0       	rjmp	.+8      	; 0x1064 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0x24>
    105c:	99 23       	and	r25, r25
    105e:	11 f0       	breq	.+4      	; 0x1064 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0x24>
    1060:	91 50       	subi	r25, 0x01	; 1
    1062:	f8 cf       	rjmp	.-16     	; 0x1054 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0x14>
    1064:	14 8a       	std	Z+20, r1	; 0x14
    1066:	54 89       	ldd	r21, Z+20	; 0x14
    1068:	51 11       	cpse	r21, r1
    106a:	56 c0       	rjmp	.+172    	; 0x1118 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0xd8>
    106c:	83 89       	ldd	r24, Z+19	; 0x13
    106e:	78 2f       	mov	r23, r24
    1070:	77 0f       	add	r23, r23
    1072:	84 ea       	ldi	r24, 0xA4	; 164
    1074:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	2f 3f       	cpi	r18, 0xFF	; 255
    107e:	8f ef       	ldi	r24, 0xFF	; 255
    1080:	38 07       	cpc	r19, r24
    1082:	69 f0       	breq	.+26     	; 0x109e <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0x5e>
    1084:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1088:	99 23       	and	r25, r25
    108a:	34 f4       	brge	.+12     	; 0x1098 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0x58>
    108c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1090:	88 7f       	andi	r24, 0xF8	; 248
    1092:	82 8b       	std	Z+18, r24	; 0x12
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	04 c0       	rjmp	.+8      	; 0x10a0 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0x60>
    1098:	2f 5f       	subi	r18, 0xFF	; 255
    109a:	3f 4f       	sbci	r19, 0xFF	; 255
    109c:	ef cf       	rjmp	.-34     	; 0x107c <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0x3c>
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	88 23       	and	r24, r24
    10a2:	09 f1       	breq	.+66     	; 0x10e6 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0xa6>
    10a4:	92 89       	ldd	r25, Z+18	; 0x12
    10a6:	98 30       	cpi	r25, 0x08	; 8
    10a8:	19 f0       	breq	.+6      	; 0x10b0 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0x70>
    10aa:	90 31       	cpi	r25, 0x10	; 16
    10ac:	19 f0       	breq	.+6      	; 0x10b4 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0x74>
    10ae:	03 c0       	rjmp	.+6      	; 0x10b6 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0x76>
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	01 c0       	rjmp	.+2      	; 0x10b6 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0x76>
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	81 11       	cpse	r24, r1
    10b8:	16 c0       	rjmp	.+44     	; 0x10e6 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0xa6>
    10ba:	70 93 bb 00 	sts	0x00BB, r23	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    10be:	84 e8       	ldi	r24, 0x84	; 132
    10c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	8f 3f       	cpi	r24, 0xFF	; 255
    10ca:	2f ef       	ldi	r18, 0xFF	; 255
    10cc:	92 07       	cpc	r25, r18
    10ce:	59 f0       	breq	.+22     	; 0x10e6 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0xa6>
    10d0:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    10d4:	22 23       	and	r18, r18
    10d6:	2c f4       	brge	.+10     	; 0x10e2 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0xa2>
    10d8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    10dc:	88 7f       	andi	r24, 0xF8	; 248
    10de:	82 8b       	std	Z+18, r24	; 0x12
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0xa6>
    10e2:	01 96       	adiw	r24, 0x01	; 1
    10e4:	f1 cf       	rjmp	.-30     	; 0x10c8 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0x88>
    10e6:	41 11       	cpse	r20, r1
    10e8:	50 e4       	ldi	r21, 0x40	; 64
    10ea:	50 93 bb 00 	sts	0x00BB, r21	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    10ee:	84 e8       	ldi	r24, 0x84	; 132
    10f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	2f 3f       	cpi	r18, 0xFF	; 255
    10fa:	8f ef       	ldi	r24, 0xFF	; 255
    10fc:	38 07       	cpc	r19, r24
    10fe:	61 f0       	breq	.+24     	; 0x1118 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0xd8>
    1100:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1104:	99 23       	and	r25, r25
    1106:	2c f4       	brge	.+10     	; 0x1112 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0xd2>
    1108:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    110c:	88 7f       	andi	r24, 0xF8	; 248
    110e:	82 8b       	std	Z+18, r24	; 0x12
    1110:	03 c0       	rjmp	.+6      	; 0x1118 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0xd8>
    1112:	2f 5f       	subi	r18, 0xFF	; 255
    1114:	3f 4f       	sbci	r19, 0xFF	; 255
    1116:	f0 cf       	rjmp	.-32     	; 0x10f8 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0xb8>
    1118:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    111c:	84 e8       	ldi	r24, 0x84	; 132
    111e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	2f 3f       	cpi	r18, 0xFF	; 255
    1128:	8f ef       	ldi	r24, 0xFF	; 255
    112a:	38 07       	cpc	r19, r24
    112c:	61 f0       	breq	.+24     	; 0x1146 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0x106>
    112e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1132:	99 23       	and	r25, r25
    1134:	2c f4       	brge	.+10     	; 0x1140 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0x100>
    1136:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    113a:	88 7f       	andi	r24, 0xF8	; 248
    113c:	82 8b       	std	Z+18, r24	; 0x12
    113e:	03 c0       	rjmp	.+6      	; 0x1146 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0x106>
    1140:	2f 5f       	subi	r18, 0xFF	; 255
    1142:	3f 4f       	sbci	r19, 0xFF	; 255
    1144:	f0 cf       	rjmp	.-32     	; 0x1126 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0xe6>
    1146:	42 30       	cpi	r20, 0x02	; 2
    1148:	21 f4       	brne	.+8      	; 0x1152 <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0x112>
    114a:	84 89       	ldd	r24, Z+20	; 0x14
    114c:	8f 5f       	subi	r24, 0xFF	; 255
    114e:	84 8b       	std	Z+20, r24	; 0x14
    1150:	08 95       	ret
    1152:	84 e9       	ldi	r24, 0x94	; 148
    1154:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1158:	94 e6       	ldi	r25, 0x64	; 100
    115a:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    115e:	24 ff       	sbrs	r18, 4
    1160:	04 c0       	rjmp	.+8      	; 0x116a <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0x12a>
    1162:	99 23       	and	r25, r25
    1164:	11 f0       	breq	.+4      	; 0x116a <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0x12a>
    1166:	91 50       	subi	r25, 0x01	; 1
    1168:	f8 cf       	rjmp	.-16     	; 0x115a <_ZN18SSD1306AsciiAvrI2c12writeDisplayEhh+0x11a>
    116a:	14 8a       	std	Z+20, r1	; 0x14
    116c:	08 95       	ret

0000116e <_Z41__static_initialization_and_destruction_0ii>:
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	91 f4       	brne	.+36     	; 0x1196 <_Z41__static_initialization_and_destruction_0ii+0x28>
    1172:	6f 3f       	cpi	r22, 0xFF	; 255
    1174:	7f 4f       	sbci	r23, 0xFF	; 255
    1176:	79 f4       	brne	.+30     	; 0x1196 <_Z41__static_initialization_and_destruction_0ii+0x28>
    1178:	e3 e8       	ldi	r30, 0x83	; 131
    117a:	f2 e0       	ldi	r31, 0x02	; 2
    117c:	13 82       	std	Z+3, r1	; 0x03
    117e:	12 82       	std	Z+2, r1	; 0x02
    1180:	14 86       	std	Z+12, r1	; 0x0c
    1182:	15 86       	std	Z+13, r1	; 0x0d
    1184:	17 86       	std	Z+15, r1	; 0x0f
    1186:	16 86       	std	Z+14, r1	; 0x0e
    1188:	10 8a       	std	Z+16, r1	; 0x10
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	81 8b       	std	Z+17, r24	; 0x11
    118e:	8d e3       	ldi	r24, 0x3D	; 61
    1190:	92 e0       	ldi	r25, 0x02	; 2
    1192:	91 83       	std	Z+1, r25	; 0x01
    1194:	80 83       	st	Z, r24
    1196:	08 95       	ret

00001198 <_Z8keyInputv>:
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	99 b1       	in	r25, 0x09	; 9
    119c:	90 95       	com	r25
    119e:	61 f1       	breq	.+88     	; 0x11f8 <_Z8keyInputv+0x60>
    11a0:	98 30       	cpi	r25, 0x08	; 8
    11a2:	99 f0       	breq	.+38     	; 0x11ca <_Z8keyInputv+0x32>
    11a4:	38 f4       	brcc	.+14     	; 0x11b4 <_Z8keyInputv+0x1c>
    11a6:	92 30       	cpi	r25, 0x02	; 2
    11a8:	d1 f0       	breq	.+52     	; 0x11de <_Z8keyInputv+0x46>
    11aa:	94 30       	cpi	r25, 0x04	; 4
    11ac:	61 f0       	breq	.+24     	; 0x11c6 <_Z8keyInputv+0x2e>
    11ae:	91 30       	cpi	r25, 0x01	; 1
    11b0:	a1 f4       	brne	.+40     	; 0x11da <_Z8keyInputv+0x42>
    11b2:	07 c0       	rjmp	.+14     	; 0x11c2 <_Z8keyInputv+0x2a>
    11b4:	90 34       	cpi	r25, 0x40	; 64
    11b6:	69 f0       	breq	.+26     	; 0x11d2 <_Z8keyInputv+0x3a>
    11b8:	90 38       	cpi	r25, 0x80	; 128
    11ba:	69 f0       	breq	.+26     	; 0x11d6 <_Z8keyInputv+0x3e>
    11bc:	90 32       	cpi	r25, 0x20	; 32
    11be:	69 f4       	brne	.+26     	; 0x11da <_Z8keyInputv+0x42>
    11c0:	06 c0       	rjmp	.+12     	; 0x11ce <_Z8keyInputv+0x36>
    11c2:	8f e5       	ldi	r24, 0x5F	; 95
    11c4:	0d c0       	rjmp	.+26     	; 0x11e0 <_Z8keyInputv+0x48>
    11c6:	83 e7       	ldi	r24, 0x73	; 115
    11c8:	0b c0       	rjmp	.+22     	; 0x11e0 <_Z8keyInputv+0x48>
    11ca:	8c e3       	ldi	r24, 0x3C	; 60
    11cc:	09 c0       	rjmp	.+18     	; 0x11e0 <_Z8keyInputv+0x48>
    11ce:	80 e7       	ldi	r24, 0x70	; 112
    11d0:	07 c0       	rjmp	.+14     	; 0x11e0 <_Z8keyInputv+0x48>
    11d2:	8e e3       	ldi	r24, 0x3E	; 62
    11d4:	05 c0       	rjmp	.+10     	; 0x11e0 <_Z8keyInputv+0x48>
    11d6:	84 e6       	ldi	r24, 0x64	; 100
    11d8:	03 c0       	rjmp	.+6      	; 0x11e0 <_Z8keyInputv+0x48>
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	01 c0       	rjmp	.+2      	; 0x11e0 <_Z8keyInputv+0x48>
    11de:	8a e2       	ldi	r24, 0x2A	; 42
    11e0:	2f ef       	ldi	r18, 0xFF	; 255
    11e2:	35 ea       	ldi	r19, 0xA5	; 165
    11e4:	9e e0       	ldi	r25, 0x0E	; 14
    11e6:	21 50       	subi	r18, 0x01	; 1
    11e8:	30 40       	sbci	r19, 0x00	; 0
    11ea:	90 40       	sbci	r25, 0x00	; 0
    11ec:	e1 f7       	brne	.-8      	; 0x11e6 <_Z8keyInputv+0x4e>
    11ee:	00 c0       	rjmp	.+0      	; 0x11f0 <_Z8keyInputv+0x58>
    11f0:	00 00       	nop
    11f2:	9f ef       	ldi	r25, 0xFF	; 255
    11f4:	9b b9       	out	0x0b, r25	; 11
    11f6:	d1 cf       	rjmp	.-94     	; 0x119a <_Z8keyInputv+0x2>
    11f8:	08 95       	ret

000011fa <_Z10clrDisplayPKc>:

void clrDisplay(const char *msg) {
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	ec 01       	movw	r28, r24
  //Clears the LCD and displays the msg in first line
  //lcd.clear();
  //lcd.setCursor(0, 0);
  //lcd.print(msg);
  oled.clear();
    1200:	83 e8       	ldi	r24, 0x83	; 131
    1202:	92 e0       	ldi	r25, 0x02	; 2
    1204:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <_ZN12SSD1306Ascii5clearEv>
  oled.setFont(Arial_bold_14);
    1208:	6a e4       	ldi	r22, 0x4A	; 74
    120a:	72 e0       	ldi	r23, 0x02	; 2
    120c:	83 e8       	ldi	r24, 0x83	; 131
    120e:	92 e0       	ldi	r25, 0x02	; 2
    1210:	0e 94 ca 28 	call	0x5194	; 0x5194 <_ZN12SSD1306Ascii7setFontEPKh>
  oled.println(msg);
    1214:	be 01       	movw	r22, r28
    1216:	83 e8       	ldi	r24, 0x83	; 131
    1218:	92 e0       	ldi	r25, 0x02	; 2
    121a:	0e 94 08 07 	call	0xe10	; 0xe10 <_ZN5Print7printlnEPKc>
}
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <_Z10secondLinePKc>:

void secondLine(const char *msg) {
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	ec 01       	movw	r28, r24
  //Prints the string passed in the second line of the LCD display
  //lcd.setCursor(0, 1);
  //lcd.print(msg);
  oled.setFont(ZevvPeep8x16);
    122a:	6e e7       	ldi	r22, 0x7E	; 126
    122c:	77 e0       	ldi	r23, 0x07	; 7
    122e:	83 e8       	ldi	r24, 0x83	; 131
    1230:	92 e0       	ldi	r25, 0x02	; 2
    1232:	0e 94 ca 28 	call	0x5194	; 0x5194 <_ZN12SSD1306Ascii7setFontEPKh>
  oled.println(msg);
    1236:	be 01       	movw	r22, r28
    1238:	83 e8       	ldi	r24, 0x83	; 131
    123a:	92 e0       	ldi	r25, 0x02	; 2
    123c:	0e 94 08 07 	call	0xe10	; 0xe10 <_ZN5Print7printlnEPKc>
}
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	08 95       	ret

00001246 <_Z12getTrackListv>:
}
//END OF RECORD AND PLAY FUNCTIONS

//>--------------------------------------< FILE HANDLING FUNCTIONS >--------------------------------------<

void getTrackList() {
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
     This function checks for files and make a list of available files
     Program only accept 15 tracks
     counts the number of files
  */
  char ASCIIcount = 65;
  files = 0;
    124a:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <files>
  
  fname_temp[0] = ASCIIcount;
    124e:	81 e4       	ldi	r24, 0x41	; 65
    1250:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <fname_temp>
  
  uint8_t arrIndex = 0;
    1254:	c0 e0       	ldi	r28, 0x00	; 0
  /*
     This function checks for files and make a list of available files
     Program only accept 15 tracks
     counts the number of files
  */
  char ASCIIcount = 65;
    1256:	d1 e4       	ldi	r29, 0x41	; 65
  
  fname_temp[0] = ASCIIcount;
  
  uint8_t arrIndex = 0;
  while (true) {
    if (arrIndex == maxFiles || ASCIIcount == 91) {
    1258:	cf 30       	cpi	r28, 0x0F	; 15
    125a:	d9 f0       	breq	.+54     	; 0x1292 <_Z12getTrackListv+0x4c>
    125c:	db 35       	cpi	r29, 0x5B	; 91
    125e:	c9 f0       	breq	.+50     	; 0x1292 <_Z12getTrackListv+0x4c>
      break;
    }
    if (SD.exists(fname_temp)) {
    1260:	68 e9       	ldi	r22, 0x98	; 152
    1262:	72 e0       	ldi	r23, 0x02	; 2
    1264:	80 eb       	ldi	r24, 0xB0	; 176
    1266:	92 e0       	ldi	r25, 0x02	; 2
    1268:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <_ZN5SDLib7SDClass6existsEPKc>
    126c:	88 23       	and	r24, r24
    126e:	69 f0       	breq	.+26     	; 0x128a <_Z12getTrackListv+0x44>
      tracks[arrIndex++] = fname_temp[0];
    1270:	ec 2f       	mov	r30, r28
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <fname_temp>
    1278:	ef 55       	subi	r30, 0x5F	; 95
    127a:	fd 4f       	sbci	r31, 0xFD	; 253
    127c:	80 83       	st	Z, r24
      files++;
    127e:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <files>
    1282:	8f 5f       	subi	r24, 0xFF	; 255
    1284:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <files>
  while (true) {
    if (arrIndex == maxFiles || ASCIIcount == 91) {
      break;
    }
    if (SD.exists(fname_temp)) {
      tracks[arrIndex++] = fname_temp[0];
    1288:	cf 5f       	subi	r28, 0xFF	; 255
      files++;
    }
	fname_temp[0] = ++ASCIIcount;
    128a:	df 5f       	subi	r29, 0xFF	; 255
    128c:	d0 93 98 02 	sts	0x0298, r29	; 0x800298 <fname_temp>
  files = 0;
  
  fname_temp[0] = ASCIIcount;
  
  uint8_t arrIndex = 0;
  while (true) {
    1290:	e3 cf       	rjmp	.-58     	; 0x1258 <_Z12getTrackListv+0x12>
      tracks[arrIndex++] = fname_temp[0];
      files++;
    }
	fname_temp[0] = ++ASCIIcount;
  }
  for (uint8_t i = arrIndex; i < maxFiles; i++) {
    1292:	cf 30       	cpi	r28, 0x0F	; 15
    1294:	40 f4       	brcc	.+16     	; 0x12a6 <_Z12getTrackListv+0x60>
    tracks[i] = '_';
    1296:	ec 2f       	mov	r30, r28
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	ef 55       	subi	r30, 0x5F	; 95
    129c:	fd 4f       	sbci	r31, 0xFD	; 253
    129e:	8f e5       	ldi	r24, 0x5F	; 95
    12a0:	80 83       	st	Z, r24
      tracks[arrIndex++] = fname_temp[0];
      files++;
    }
	fname_temp[0] = ++ASCIIcount;
  }
  for (uint8_t i = arrIndex; i < maxFiles; i++) {
    12a2:	cf 5f       	subi	r28, 0xFF	; 255
    12a4:	f6 cf       	rjmp	.-20     	; 0x1292 <_Z12getTrackListv+0x4c>
    tracks[i] = '_';
  }
}
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	08 95       	ret

000012ac <_Z9nextTrackv>:

void nextTrack() {
  /*
     Checks tracks in order and returns the next track
  */
  fcount++;
    12ac:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <fcount>
    12b0:	ef 5f       	subi	r30, 0xFF	; 255
    12b2:	e0 93 9f 02 	sts	0x029F, r30	; 0x80029f <fcount>
  if (tracks[fcount] == '_') {
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	ef 55       	subi	r30, 0x5F	; 95
    12ba:	fd 4f       	sbci	r31, 0xFD	; 253
    12bc:	80 81       	ld	r24, Z
    12be:	8f 35       	cpi	r24, 0x5F	; 95
    12c0:	11 f4       	brne	.+4      	; 0x12c6 <_Z9nextTrackv+0x1a>
    fcount = 0;
    12c2:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <fcount>
  }
  fname_temp[0] = tracks[fcount];
    12c6:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <fcount>
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	ef 55       	subi	r30, 0x5F	; 95
    12ce:	fd 4f       	sbci	r31, 0xFD	; 253
    12d0:	80 81       	ld	r24, Z
    12d2:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <fname_temp>
    12d6:	08 95       	ret

000012d8 <_Z13previousTrackv>:

void previousTrack() {
  /*
     Checks tracks in order and returns the previous track
  */
  if (fcount == 0) {
    12d8:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <fcount>
    12dc:	81 11       	cpse	r24, r1
    12de:	06 c0       	rjmp	.+12     	; 0x12ec <_Z13previousTrackv+0x14>
    fcount = files - 1;
    12e0:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <files>
    12e4:	81 50       	subi	r24, 0x01	; 1
    12e6:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <fcount>
    12ea:	03 c0       	rjmp	.+6      	; 0x12f2 <_Z13previousTrackv+0x1a>
  }
  else
  {
    fcount--;
    12ec:	81 50       	subi	r24, 0x01	; 1
    12ee:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <fcount>
  }
  fname_temp[0] = tracks[fcount];
    12f2:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <fcount>
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	ef 55       	subi	r30, 0x5F	; 95
    12fa:	fd 4f       	sbci	r31, 0xFD	; 253
    12fc:	80 81       	ld	r24, Z
    12fe:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <fname_temp>
    1302:	08 95       	ret

00001304 <_Z15checkDuplicatesv>:
}

void checkDuplicates() {
    1304:	cf 93       	push	r28

  /*This function checks if the new file to be made is existing,
    if does it generates a new name for the file*/
  char count = 65;

  fname_temp[0] = count;
    1306:	81 e4       	ldi	r24, 0x41	; 65
    1308:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <fname_temp>

void checkDuplicates() {

  /*This function checks if the new file to be made is existing,
    if does it generates a new name for the file*/
  char count = 65;
    130c:	c1 e4       	ldi	r28, 0x41	; 65

  fname_temp[0] = count;
  while (true) {
    if (SD.exists(fname_temp)) {
    130e:	68 e9       	ldi	r22, 0x98	; 152
    1310:	72 e0       	ldi	r23, 0x02	; 2
    1312:	80 eb       	ldi	r24, 0xB0	; 176
    1314:	92 e0       	ldi	r25, 0x02	; 2
    1316:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <_ZN5SDLib7SDClass6existsEPKc>
    131a:	88 23       	and	r24, r24
    131c:	21 f0       	breq	.+8      	; 0x1326 <_Z15checkDuplicatesv+0x22>
	  fname_temp[0] = ++count;
    131e:	cf 5f       	subi	r28, 0xFF	; 255
    1320:	c0 93 98 02 	sts	0x0298, r28	; 0x800298 <fname_temp>
  /*This function checks if the new file to be made is existing,
    if does it generates a new name for the file*/
  char count = 65;

  fname_temp[0] = count;
  while (true) {
    1324:	f4 cf       	rjmp	.-24     	; 0x130e <_Z15checkDuplicatesv+0xa>
	  fname_temp[0] = ++count;
    } else {
      break;
    }
  }
}
    1326:	cf 91       	pop	r28
    1328:	08 95       	ret

0000132a <_Z11deleteTrackv>:

void deleteTrack(){
	/*
		Checks for depending files of the current file and delete them.
	*/
	SD.remove(fname_temp);
    132a:	68 e9       	ldi	r22, 0x98	; 152
    132c:	72 e0       	ldi	r23, 0x02	; 2
    132e:	80 eb       	ldi	r24, 0xB0	; 176
    1330:	92 e0       	ldi	r25, 0x02	; 2
    1332:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_ZN5SDLib7SDClass6removeEPKc>

	fname_temp[0] = 'S';fname_temp[1] = tracks[fcount];fname_temp[2] = '.';fname_temp[3] = 'W';fname_temp[4] = 'A';fname_temp[5] = 'V';
    1336:	e8 e9       	ldi	r30, 0x98	; 152
    1338:	f2 e0       	ldi	r31, 0x02	; 2
    133a:	83 e5       	ldi	r24, 0x53	; 83
    133c:	80 83       	st	Z, r24
    133e:	a0 91 9f 02 	lds	r26, 0x029F	; 0x80029f <fcount>
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	af 55       	subi	r26, 0x5F	; 95
    1346:	bd 4f       	sbci	r27, 0xFD	; 253
    1348:	8c 91       	ld	r24, X
    134a:	81 83       	std	Z+1, r24	; 0x01
    134c:	8e e2       	ldi	r24, 0x2E	; 46
    134e:	82 83       	std	Z+2, r24	; 0x02
    1350:	87 e5       	ldi	r24, 0x57	; 87
    1352:	83 83       	std	Z+3, r24	; 0x03
    1354:	81 e4       	ldi	r24, 0x41	; 65
    1356:	84 83       	std	Z+4, r24	; 0x04
    1358:	86 e5       	ldi	r24, 0x56	; 86
    135a:	85 83       	std	Z+5, r24	; 0x05
	if(SD.exists(fname_temp)){SD.remove(fname_temp);}
    135c:	bf 01       	movw	r22, r30
    135e:	80 eb       	ldi	r24, 0xB0	; 176
    1360:	92 e0       	ldi	r25, 0x02	; 2
    1362:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <_ZN5SDLib7SDClass6existsEPKc>
    1366:	88 23       	and	r24, r24
    1368:	31 f0       	breq	.+12     	; 0x1376 <_Z11deleteTrackv+0x4c>
    136a:	68 e9       	ldi	r22, 0x98	; 152
    136c:	72 e0       	ldi	r23, 0x02	; 2
    136e:	80 eb       	ldi	r24, 0xB0	; 176
    1370:	92 e0       	ldi	r25, 0x02	; 2
    1372:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_ZN5SDLib7SDClass6removeEPKc>
	fname_temp[0] = 'H';
    1376:	88 e4       	ldi	r24, 0x48	; 72
    1378:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <fname_temp>
	if(SD.exists(fname_temp)){SD.remove(fname_temp);}
    137c:	68 e9       	ldi	r22, 0x98	; 152
    137e:	72 e0       	ldi	r23, 0x02	; 2
    1380:	80 eb       	ldi	r24, 0xB0	; 176
    1382:	92 e0       	ldi	r25, 0x02	; 2
    1384:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <_ZN5SDLib7SDClass6existsEPKc>
    1388:	88 23       	and	r24, r24
    138a:	31 f0       	breq	.+12     	; 0x1398 <_Z11deleteTrackv+0x6e>
    138c:	68 e9       	ldi	r22, 0x98	; 152
    138e:	72 e0       	ldi	r23, 0x02	; 2
    1390:	80 eb       	ldi	r24, 0xB0	; 176
    1392:	92 e0       	ldi	r25, 0x02	; 2
    1394:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_ZN5SDLib7SDClass6removeEPKc>
	fname_temp[0] = 'L';
    1398:	8c e4       	ldi	r24, 0x4C	; 76
    139a:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <fname_temp>
	if(SD.exists(fname_temp)){SD.remove(fname_temp);}
    139e:	68 e9       	ldi	r22, 0x98	; 152
    13a0:	72 e0       	ldi	r23, 0x02	; 2
    13a2:	80 eb       	ldi	r24, 0xB0	; 176
    13a4:	92 e0       	ldi	r25, 0x02	; 2
    13a6:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <_ZN5SDLib7SDClass6existsEPKc>
    13aa:	88 23       	and	r24, r24
    13ac:	31 f0       	breq	.+12     	; 0x13ba <_Z11deleteTrackv+0x90>
    13ae:	68 e9       	ldi	r22, 0x98	; 152
    13b0:	72 e0       	ldi	r23, 0x02	; 2
    13b2:	80 eb       	ldi	r24, 0xB0	; 176
    13b4:	92 e0       	ldi	r25, 0x02	; 2
    13b6:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_ZN5SDLib7SDClass6removeEPKc>
	fname_temp[0] = 'B';
    13ba:	82 e4       	ldi	r24, 0x42	; 66
    13bc:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <fname_temp>
	if(SD.exists(fname_temp)){SD.remove(fname_temp);}
    13c0:	68 e9       	ldi	r22, 0x98	; 152
    13c2:	72 e0       	ldi	r23, 0x02	; 2
    13c4:	80 eb       	ldi	r24, 0xB0	; 176
    13c6:	92 e0       	ldi	r25, 0x02	; 2
    13c8:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <_ZN5SDLib7SDClass6existsEPKc>
    13cc:	88 23       	and	r24, r24
    13ce:	31 f0       	breq	.+12     	; 0x13dc <_Z11deleteTrackv+0xb2>
    13d0:	68 e9       	ldi	r22, 0x98	; 152
    13d2:	72 e0       	ldi	r23, 0x02	; 2
    13d4:	80 eb       	ldi	r24, 0xB0	; 176
    13d6:	92 e0       	ldi	r25, 0x02	; 2
    13d8:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_ZN5SDLib7SDClass6removeEPKc>
		
	fname_temp[0] = tracks[fcount];fname_temp[1] = '.';fname_temp[2] = 'W';fname_temp[3] = 'A';fname_temp[4] = 'V';fname_temp[5] = NULL;
    13dc:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <fcount>
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	ef 55       	subi	r30, 0x5F	; 95
    13e4:	fd 4f       	sbci	r31, 0xFD	; 253
    13e6:	80 81       	ld	r24, Z
    13e8:	e8 e9       	ldi	r30, 0x98	; 152
    13ea:	f2 e0       	ldi	r31, 0x02	; 2
    13ec:	80 83       	st	Z, r24
    13ee:	8e e2       	ldi	r24, 0x2E	; 46
    13f0:	81 83       	std	Z+1, r24	; 0x01
    13f2:	87 e5       	ldi	r24, 0x57	; 87
    13f4:	82 83       	std	Z+2, r24	; 0x02
    13f6:	81 e4       	ldi	r24, 0x41	; 65
    13f8:	83 83       	std	Z+3, r24	; 0x03
    13fa:	86 e5       	ldi	r24, 0x56	; 86
    13fc:	84 83       	std	Z+4, r24	; 0x04
    13fe:	15 82       	std	Z+5, r1	; 0x05
    1400:	08 95       	ret

00001402 <_Z12makeWaveFileN5SDLib4FileE>:

//END OF FILE HANDLING FUNCTIONS

//>------------------------------< FUNCTIONS FOR WAVE FILE CREATION >---------------------------------<

void makeWaveFile(File sFile) {
    1402:	0f 93       	push	r16
    1404:	1f 93       	push	r17
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	2a 97       	sbiw	r28, 0x0a	; 10
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	8c 01       	movw	r16, r24
  /*
     This function creates the wave header file required
     All bytes should be in little endian format, except String values
  */

  sFile.write((uint8_t*)"RIFF    WAVEfmt ", 16);//Starting bytes of the wave header file
    141c:	40 e1       	ldi	r20, 0x10	; 16
    141e:	50 e0       	ldi	r21, 0x00	; 0
    1420:	60 e9       	ldi	r22, 0x90	; 144
    1422:	71 e0       	ldi	r23, 0x01	; 1
    1424:	0e 94 0d 12 	call	0x241a	; 0x241a <_ZN5SDLib4File5writeEPKhj>
  uint8_t chunk[] = {16, 0, 0, 0, 1, 0, 1, 0, lower_Byte(sampleRate), higher_Byte(sampleRate)};
    1428:	8a e0       	ldi	r24, 0x0A	; 10
    142a:	ed e0       	ldi	r30, 0x0D	; 13
    142c:	f1 e0       	ldi	r31, 0x01	; 1
    142e:	de 01       	movw	r26, r28
    1430:	11 96       	adiw	r26, 0x01	; 1
    1432:	01 90       	ld	r0, Z+
    1434:	0d 92       	st	X+, r0
    1436:	8a 95       	dec	r24
    1438:	e1 f7       	brne	.-8      	; 0x1432 <_Z12makeWaveFileN5SDLib4FileE+0x30>
     first 4 bytes: size of  previous data chunck
     next 2 bytes: Audio format (1 - PCM)
     next 2 byte: No of channels (Mono = 1, Stereo = 2) (in our case 1)
     last two are the first two bytes of sample rate
  */
  sFile.write((uint8_t*)chunk, 10);
    143a:	4a e0       	ldi	r20, 0x0A	; 10
    143c:	50 e0       	ldi	r21, 0x00	; 0
    143e:	be 01       	movw	r22, r28
    1440:	6f 5f       	subi	r22, 0xFF	; 255
    1442:	7f 4f       	sbci	r23, 0xFF	; 255
    1444:	c8 01       	movw	r24, r16
    1446:	0e 94 0d 12 	call	0x241a	; 0x241a <_ZN5SDLib4File5writeEPKhj>

  chunk[0] = 0; chunk[1] = 0; //end of sample rate bytes
    144a:	19 82       	std	Y+1, r1	; 0x01
    144c:	1a 82       	std	Y+2, r1	; 0x02

  //byteRate = (sampleRate/8)*monoStereo*8;
  chunk[2] = lower_Byte(byteRate); chunk[3] = higher_Byte(byteRate); chunk[4] = 0; chunk[5] = 0; // byteRate
    144e:	80 ed       	ldi	r24, 0xD0	; 208
    1450:	8b 83       	std	Y+3, r24	; 0x03
    1452:	80 e3       	ldi	r24, 0x30	; 48
    1454:	8c 83       	std	Y+4, r24	; 0x04
    1456:	1d 82       	std	Y+5, r1	; 0x05
    1458:	1e 82       	std	Y+6, r1	; 0x06

  //byte blockAlign = monoStereo * (bps/8);
  //this is always equal to 1 in 8bit PCM mono channel
  chunk[6] = 1; chunk[7] = 0; //BlockAlign
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	8f 83       	std	Y+7, r24	; 0x07
    145e:	18 86       	std	Y+8, r1	; 0x08

  chunk[8] = 8; chunk[9] = 0; //bits per sample
    1460:	88 e0       	ldi	r24, 0x08	; 8
    1462:	89 87       	std	Y+9, r24	; 0x09
    1464:	1a 86       	std	Y+10, r1	; 0x0a

  sFile.write((uint8_t*)chunk, 10);
    1466:	4a e0       	ldi	r20, 0x0A	; 10
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	be 01       	movw	r22, r28
    146c:	6f 5f       	subi	r22, 0xFF	; 255
    146e:	7f 4f       	sbci	r23, 0xFF	; 255
    1470:	c8 01       	movw	r24, r16
    1472:	0e 94 0d 12 	call	0x241a	; 0x241a <_ZN5SDLib4File5writeEPKhj>
  sFile.write((uint8_t*)"data    ", 8);
    1476:	48 e0       	ldi	r20, 0x08	; 8
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	61 ea       	ldi	r22, 0xA1	; 161
    147c:	71 e0       	ldi	r23, 0x01	; 1
    147e:	c8 01       	movw	r24, r16
    1480:	0e 94 0d 12 	call	0x241a	; 0x241a <_ZN5SDLib4File5writeEPKhj>

}
    1484:	2a 96       	adiw	r28, 0x0a	; 10
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	de bf       	out	0x3e, r29	; 62
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	cd bf       	out	0x3d, r28	; 61
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	1f 91       	pop	r17
    1496:	0f 91       	pop	r16
    1498:	08 95       	ret

0000149a <_Z12finalizeWaveN5SDLib4FileE>:

void finalizeWave(File sFile) {
    149a:	8f 92       	push	r8
    149c:	9f 92       	push	r9
    149e:	af 92       	push	r10
    14a0:	bf 92       	push	r11
    14a2:	cf 92       	push	r12
    14a4:	df 92       	push	r13
    14a6:	ef 92       	push	r14
    14a8:	ff 92       	push	r15
    14aa:	0f 93       	push	r16
    14ac:	1f 93       	push	r17
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <_Z12finalizeWaveN5SDLib4FileE+0x1a>
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <_Z12finalizeWaveN5SDLib4FileE+0x1c>
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	8c 01       	movw	r16, r24
  /*
     This function finalizes the wave file
  */
  unsigned long fSize = sFile.size();
    14bc:	0e 94 0b 13 	call	0x2616	; 0x2616 <_ZN5SDLib4File4sizeEv>
    14c0:	6b 01       	movw	r12, r22
    14c2:	7c 01       	movw	r14, r24

  fSize -= 8;
    14c4:	4b 01       	movw	r8, r22
    14c6:	5c 01       	movw	r10, r24
    14c8:	88 e0       	ldi	r24, 0x08	; 8
    14ca:	88 1a       	sub	r8, r24
    14cc:	91 08       	sbc	r9, r1
    14ce:	a1 08       	sbc	r10, r1
    14d0:	b1 08       	sbc	r11, r1
  sFile.seek(4);
    14d2:	44 e0       	ldi	r20, 0x04	; 4
    14d4:	50 e0       	ldi	r21, 0x00	; 0
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	c8 01       	movw	r24, r16
    14dc:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <_ZN5SDLib4File4seekEm>
  uint8_t chunk2[4] = {lower_Byte(fSize), higher_Byte(fSize), fSize >> 16, fSize >> 24};
    14e0:	89 82       	std	Y+1, r8	; 0x01
    14e2:	9a 82       	std	Y+2, r9	; 0x02
    14e4:	ab 82       	std	Y+3, r10	; 0x03
    14e6:	bc 82       	std	Y+4, r11	; 0x04
  sFile.write(chunk2, 4);//Writing chunksize to 5 - 8 bytes in wave file
    14e8:	44 e0       	ldi	r20, 0x04	; 4
    14ea:	50 e0       	ldi	r21, 0x00	; 0
    14ec:	be 01       	movw	r22, r28
    14ee:	6f 5f       	subi	r22, 0xFF	; 255
    14f0:	7f 4f       	sbci	r23, 0xFF	; 255
    14f2:	c8 01       	movw	r24, r16
    14f4:	0e 94 0d 12 	call	0x241a	; 0x241a <_ZN5SDLib4File5writeEPKhj>

  sFile.seek(40);
    14f8:	48 e2       	ldi	r20, 0x28	; 40
    14fa:	50 e0       	ldi	r21, 0x00	; 0
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	c8 01       	movw	r24, r16
    1502:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <_ZN5SDLib4File4seekEm>
  fSize -= 36 ;
    1506:	d7 01       	movw	r26, r14
    1508:	c6 01       	movw	r24, r12
    150a:	8c 97       	sbiw	r24, 0x2c	; 44
    150c:	a1 09       	sbc	r26, r1
    150e:	b1 09       	sbc	r27, r1
  chunk2[0] = lower_Byte(fSize); chunk2[1] = higher_Byte(fSize); chunk2[2] = fSize >> 16; chunk2[3] = fSize >> 24;
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	9a 83       	std	Y+2, r25	; 0x02
    1514:	ab 83       	std	Y+3, r26	; 0x03
    1516:	bc 83       	std	Y+4, r27	; 0x04
  sFile.write((uint8_t*)chunk2, 4);//Writting num of samples to 41-44 bytes in wave file
    1518:	44 e0       	ldi	r20, 0x04	; 4
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	be 01       	movw	r22, r28
    151e:	6f 5f       	subi	r22, 0xFF	; 255
    1520:	7f 4f       	sbci	r23, 0xFF	; 255
    1522:	c8 01       	movw	r24, r16
    1524:	0e 94 0d 12 	call	0x241a	; 0x241a <_ZN5SDLib4File5writeEPKhj>
}
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	1f 91       	pop	r17
    1536:	0f 91       	pop	r16
    1538:	ff 90       	pop	r15
    153a:	ef 90       	pop	r14
    153c:	df 90       	pop	r13
    153e:	cf 90       	pop	r12
    1540:	bf 90       	pop	r11
    1542:	af 90       	pop	r10
    1544:	9f 90       	pop	r9
    1546:	8f 90       	pop	r8
    1548:	08 95       	ret

0000154a <_Z13sig_freqShiftPc>:
//END OF WAVE FILE CREATE FUNCTIONS


//>--------------------------------------< FREQUENCY CHANGES >--------------------------------------<
void sig_freqShift(char tempName[]) {
    154a:	ef 92       	push	r14
    154c:	ff 92       	push	r15
    154e:	0f 93       	push	r16
    1550:	1f 93       	push	r17
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	ca 56       	subi	r28, 0x6A	; 106
    155c:	d1 09       	sbc	r29, r1
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	f8 94       	cli
    1562:	de bf       	out	0x3e, r29	; 62
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	cd bf       	out	0x3d, r28	; 61
    1568:	8c 01       	movw	r16, r24
		
		File out = SD.open("temp.bin", FILE_WRITE);
    156a:	27 e1       	ldi	r18, 0x17	; 23
    156c:	4a ea       	ldi	r20, 0xAA	; 170
    156e:	51 e0       	ldi	r21, 0x01	; 1
    1570:	60 eb       	ldi	r22, 0xB0	; 176
    1572:	72 e0       	ldi	r23, 0x02	; 2
    1574:	ce 01       	movw	r24, r28
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <_ZN5SDLib7SDClass4openEPKch>
		File target = SD.open(tempName, FILE_READ);
    157c:	21 e0       	ldi	r18, 0x01	; 1
    157e:	a8 01       	movw	r20, r16
    1580:	60 eb       	ldi	r22, 0xB0	; 176
    1582:	72 e0       	ldi	r23, 0x02	; 2
    1584:	ce 01       	movw	r24, r28
    1586:	4c 96       	adiw	r24, 0x1c	; 28
    1588:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <_ZN5SDLib7SDClass4openEPKch>
		target.seek(44);
    158c:	4c e2       	ldi	r20, 0x2C	; 44
    158e:	50 e0       	ldi	r21, 0x00	; 0
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	ce 01       	movw	r24, r28
    1596:	4c 96       	adiw	r24, 0x1c	; 28
    1598:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <_ZN5SDLib4File4seekEm>

		uint8_t buff[bufflen];
		//int16_t cosWave12_5[coslen] = {10, 10, 9, 7, 5, 3, 1, -2, -4, -6, -8, -9, -10, -10, -9, -8, -6, -4, -2, 1, 3, 5, 7, 9, 10};
		int16_t cosWave12_5[coslen] =	{10,8,5,0,-4,-8,-9,-9,-6,-1,3,7,9};
    159c:	8a e1       	ldi	r24, 0x1A	; 26
    159e:	e7 e1       	ldi	r30, 0x17	; 23
    15a0:	f1 e0       	ldi	r31, 0x01	; 1
    15a2:	de 01       	movw	r26, r28
    15a4:	af 5a       	subi	r26, 0xAF	; 175
    15a6:	bf 4f       	sbci	r27, 0xFF	; 255
    15a8:	01 90       	ld	r0, Z+
    15aa:	0d 92       	st	X+, r0
    15ac:	8a 95       	dec	r24
    15ae:	e1 f7       	brne	.-8      	; 0x15a8 <_Z13sig_freqShiftPc+0x5e>
		uint8_t count = 0;
		uint8_t buffCount = 0;
    15b0:	e1 2c       	mov	r14, r1
		target.seek(44);

		uint8_t buff[bufflen];
		//int16_t cosWave12_5[coslen] = {10, 10, 9, 7, 5, 3, 1, -2, -4, -6, -8, -9, -10, -10, -9, -8, -6, -4, -2, 1, 3, 5, 7, 9, 10};
		int16_t cosWave12_5[coslen] =	{10,8,5,0,-4,-8,-9,-9,-6,-1,3,7,9};
		uint8_t count = 0;
    15b2:	10 e0       	ldi	r17, 0x00	; 0
    15b4:	01 c0       	rjmp	.+2      	; 0x15b8 <_Z13sig_freqShiftPc+0x6e>
			if (count == coslen )
			{
				count = 0;
			}
			if (buffCount == bufflen) {
				buffCount = 0;
    15b6:	e0 2e       	mov	r14, r16
		//int16_t cosWave12_5[coslen] = {10, 10, 9, 7, 5, 3, 1, -2, -4, -6, -8, -9, -10, -10, -9, -8, -6, -4, -2, 1, 3, 5, 7, 9, 10};
		int16_t cosWave12_5[coslen] =	{10,8,5,0,-4,-8,-9,-9,-6,-1,3,7,9};
		uint8_t count = 0;
		uint8_t buffCount = 0;

		while (target.available()) {
    15b8:	ce 01       	movw	r24, r28
    15ba:	4c 96       	adiw	r24, 0x1c	; 28
    15bc:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN5SDLib4File9availableEv>
    15c0:	89 2b       	or	r24, r25
    15c2:	e9 f1       	breq	.+122    	; 0x163e <_Z13sig_freqShiftPc+0xf4>

			buff[buffCount++] = (uint8_t)((int)(target.read() - dcOffset) * cosWave12_5[count++] / 10 + dcOffset);
    15c4:	01 e0       	ldi	r16, 0x01	; 1
    15c6:	0e 0d       	add	r16, r14
    15c8:	f1 2c       	mov	r15, r1
    15ca:	ce 01       	movw	r24, r28
    15cc:	4c 96       	adiw	r24, 0x1c	; 28
    15ce:	0e 94 35 12 	call	0x246a	; 0x246a <_ZN5SDLib4File4readEv>
    15d2:	bc 01       	movw	r22, r24
    15d4:	6f 57       	subi	r22, 0x7F	; 127
    15d6:	71 09       	sbc	r23, r1
    15d8:	21 e0       	ldi	r18, 0x01	; 1
    15da:	21 0f       	add	r18, r17
    15dc:	e1 2f       	mov	r30, r17
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	ee 0f       	add	r30, r30
    15e2:	ff 1f       	adc	r31, r31
    15e4:	81 e5       	ldi	r24, 0x51	; 81
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	8c 0f       	add	r24, r28
    15ea:	9d 1f       	adc	r25, r29
    15ec:	e8 0f       	add	r30, r24
    15ee:	f9 1f       	adc	r31, r25
    15f0:	40 81       	ld	r20, Z
    15f2:	51 81       	ldd	r21, Z+1	; 0x01
    15f4:	64 9f       	mul	r22, r20
    15f6:	c0 01       	movw	r24, r0
    15f8:	65 9f       	mul	r22, r21
    15fa:	90 0d       	add	r25, r0
    15fc:	74 9f       	mul	r23, r20
    15fe:	90 0d       	add	r25, r0
    1600:	11 24       	eor	r1, r1
    1602:	6a e0       	ldi	r22, 0x0A	; 10
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <__divmodhi4>
    160a:	e7 e3       	ldi	r30, 0x37	; 55
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	ec 0f       	add	r30, r28
    1610:	fd 1f       	adc	r31, r29
    1612:	ee 0d       	add	r30, r14
    1614:	ff 1d       	adc	r31, r15
    1616:	61 58       	subi	r22, 0x81	; 129
    1618:	60 83       	st	Z, r22
			if (count == coslen )
    161a:	2d 30       	cpi	r18, 0x0D	; 13
    161c:	11 f0       	breq	.+4      	; 0x1622 <_Z13sig_freqShiftPc+0xd8>
		uint8_t count = 0;
		uint8_t buffCount = 0;

		while (target.available()) {

			buff[buffCount++] = (uint8_t)((int)(target.read() - dcOffset) * cosWave12_5[count++] / 10 + dcOffset);
    161e:	12 2f       	mov	r17, r18
    1620:	01 c0       	rjmp	.+2      	; 0x1624 <_Z13sig_freqShiftPc+0xda>
			if (count == coslen )
			{
				count = 0;
    1622:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (buffCount == bufflen) {
    1624:	0a 31       	cpi	r16, 0x1A	; 26
    1626:	39 f6       	brne	.-114    	; 0x15b6 <_Z13sig_freqShiftPc+0x6c>
				buffCount = 0;
				out.write((uint8_t*)buff, bufflen);
    1628:	4a e1       	ldi	r20, 0x1A	; 26
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	be 01       	movw	r22, r28
    162e:	69 5c       	subi	r22, 0xC9	; 201
    1630:	7f 4f       	sbci	r23, 0xFF	; 255
    1632:	ce 01       	movw	r24, r28
    1634:	01 96       	adiw	r24, 0x01	; 1
    1636:	0e 94 0d 12 	call	0x241a	; 0x241a <_ZN5SDLib4File5writeEPKhj>
			if (count == coslen )
			{
				count = 0;
			}
			if (buffCount == bufflen) {
				buffCount = 0;
    163a:	00 e0       	ldi	r16, 0x00	; 0
    163c:	bc cf       	rjmp	.-136    	; 0x15b6 <_Z13sig_freqShiftPc+0x6c>
				out.write((uint8_t*)buff, bufflen);
			}
		}

		out.close();
    163e:	ce 01       	movw	r24, r28
    1640:	01 96       	adiw	r24, 0x01	; 1
    1642:	0e 94 4a 13 	call	0x2694	; 0x2694 <_ZN5SDLib4File5closeEv>
		target.close();
    1646:	ce 01       	movw	r24, r28
    1648:	4c 96       	adiw	r24, 0x1c	; 28
    164a:	0e 94 4a 13 	call	0x2694	; 0x2694 <_ZN5SDLib4File5closeEv>

}
    164e:	c6 59       	subi	r28, 0x96	; 150
    1650:	df 4f       	sbci	r29, 0xFF	; 255
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	f8 94       	cli
    1656:	de bf       	out	0x3e, r29	; 62
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	cd bf       	out	0x3d, r28	; 61
    165c:	df 91       	pop	r29
    165e:	cf 91       	pop	r28
    1660:	1f 91       	pop	r17
    1662:	0f 91       	pop	r16
    1664:	ff 90       	pop	r15
    1666:	ef 90       	pop	r14
    1668:	08 95       	ret

0000166a <_Z8convolvePiPchi>:
			convolve(filter,tempName,12,500);
		}
	}
}

void convolve(int filter[],char tempName[],uint8_t filterlen,int divider) {
    166a:	2f 92       	push	r2
    166c:	3f 92       	push	r3
    166e:	5f 92       	push	r5
    1670:	6f 92       	push	r6
    1672:	7f 92       	push	r7
    1674:	8f 92       	push	r8
    1676:	9f 92       	push	r9
    1678:	af 92       	push	r10
    167a:	bf 92       	push	r11
    167c:	cf 92       	push	r12
    167e:	df 92       	push	r13
    1680:	ef 92       	push	r14
    1682:	ff 92       	push	r15
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	cd 5f       	subi	r28, 0xFD	; 253
    1692:	d1 09       	sbc	r29, r1
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	cd bf       	out	0x3d, r28	; 61
    169e:	5c 01       	movw	r10, r24
    16a0:	6b 01       	movw	r12, r22
    16a2:	f4 2e       	mov	r15, r20
    16a4:	19 01       	movw	r2, r18
	finalizeWave(out);
	out.close();
	target.close();
			
	if(SD.exists("temp.bin")){SD.remove("temp.bin");}	
}
    16a6:	2d b7       	in	r18, 0x3d	; 61
    16a8:	3e b7       	in	r19, 0x3e	; 62
    16aa:	c4 50       	subi	r28, 0x04	; 4
    16ac:	df 4f       	sbci	r29, 0xFF	; 255
    16ae:	39 83       	std	Y+1, r19	; 0x01
    16b0:	28 83       	st	Y, r18
    16b2:	cc 5f       	subi	r28, 0xFC	; 252
    16b4:	d0 40       	sbci	r29, 0x00	; 0
			Frequency shifting: 2min 45sec
			High pass: 1min 55sec
			Low pass: 1min 53sec
	*/
			
	uint8_t signal_in[filterlen];
    16b6:	84 2f       	mov	r24, r20
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	3c 01       	movw	r6, r24
    16bc:	31 e0       	ldi	r19, 0x01	; 1
    16be:	63 1a       	sub	r6, r19
    16c0:	71 08       	sbc	r7, r1
    16c2:	ad b7       	in	r26, 0x3d	; 61
    16c4:	be b7       	in	r27, 0x3e	; 62
    16c6:	a8 1b       	sub	r26, r24
    16c8:	b9 0b       	sbc	r27, r25
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	be bf       	out	0x3e, r27	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	ad bf       	out	0x3d, r26	; 61
    16d4:	0d b7       	in	r16, 0x3d	; 61
    16d6:	1e b7       	in	r17, 0x3e	; 62
    16d8:	0f 5f       	subi	r16, 0xFF	; 255
    16da:	1f 4f       	sbci	r17, 0xFF	; 255
    16dc:	48 01       	movw	r8, r16
	uint8_t temp_buff[temp_buff_size];
	float temp = 0;
	uint8_t temp_count = 0;
	File target;
    16de:	ce 01       	movw	r24, r28
    16e0:	88 54       	subi	r24, 0x48	; 72
    16e2:	9f 4f       	sbci	r25, 0xFF	; 255
    16e4:	0e 94 ce 12 	call	0x259c	; 0x259c <_ZN5SDLib4FileC1Ev>
			
	if(fname_temp[0]=='S'){target = SD.open("temp.bin", FILE_READ);}
    16e8:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <fname_temp>
    16ec:	83 35       	cpi	r24, 0x53	; 83
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <_Z8convolvePiPchi+0x88>
    16f0:	4f c0       	rjmp	.+158    	; 0x1790 <_Z8convolvePiPchi+0x126>
    16f2:	21 e0       	ldi	r18, 0x01	; 1
    16f4:	4a ea       	ldi	r20, 0xAA	; 170
    16f6:	51 e0       	ldi	r21, 0x01	; 1
    16f8:	60 eb       	ldi	r22, 0xB0	; 176
    16fa:	72 e0       	ldi	r23, 0x02	; 2
    16fc:	ce 01       	movw	r24, r28
    16fe:	8e 5a       	subi	r24, 0xAE	; 174
    1700:	9f 4f       	sbci	r25, 0xFF	; 255
    1702:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <_ZN5SDLib7SDClass4openEPKch>
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
    1706:	66 96       	adiw	r28, 0x16	; 22
    1708:	8e ad       	ldd	r24, Y+62	; 0x3e
    170a:	9f ad       	ldd	r25, Y+63	; 0x3f
    170c:	66 97       	sbiw	r28, 0x16	; 22
    170e:	c6 54       	subi	r28, 0x46	; 70
    1710:	df 4f       	sbci	r29, 0xFF	; 255
    1712:	99 83       	std	Y+1, r25	; 0x01
    1714:	88 83       	st	Y, r24
    1716:	ca 5b       	subi	r28, 0xBA	; 186
    1718:	d0 40       	sbci	r29, 0x00	; 0
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    171a:	6a 96       	adiw	r28, 0x1a	; 26
    171c:	8c ad       	ldd	r24, Y+60	; 0x3c
    171e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1720:	ae ad       	ldd	r26, Y+62	; 0x3e
    1722:	bf ad       	ldd	r27, Y+63	; 0x3f
    1724:	6a 97       	sbiw	r28, 0x1a	; 26
    1726:	c4 54       	subi	r28, 0x44	; 68
    1728:	df 4f       	sbci	r29, 0xFF	; 255
    172a:	88 83       	st	Y, r24
    172c:	99 83       	std	Y+1, r25	; 0x01
    172e:	aa 83       	std	Y+2, r26	; 0x02
    1730:	bb 83       	std	Y+3, r27	; 0x03
    1732:	cc 5b       	subi	r28, 0xBC	; 188
    1734:	d0 40       	sbci	r29, 0x00	; 0
    1736:	6e 96       	adiw	r28, 0x1e	; 30
    1738:	8c ad       	ldd	r24, Y+60	; 0x3c
    173a:	9d ad       	ldd	r25, Y+61	; 0x3d
    173c:	ae ad       	ldd	r26, Y+62	; 0x3e
    173e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1740:	6e 97       	sbiw	r28, 0x1e	; 30
    1742:	c0 54       	subi	r28, 0x40	; 64
    1744:	df 4f       	sbci	r29, 0xFF	; 255
    1746:	88 83       	st	Y, r24
    1748:	99 83       	std	Y+1, r25	; 0x01
    174a:	aa 83       	std	Y+2, r26	; 0x02
    174c:	bb 83       	std	Y+3, r27	; 0x03
    174e:	c0 5c       	subi	r28, 0xC0	; 192
    1750:	d0 40       	sbci	r29, 0x00	; 0
#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT | O_APPEND)

namespace SDLib {

  class File : public Stream {
    1752:	e2 e5       	ldi	r30, 0x52	; 82
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	ec 0f       	add	r30, r28
    1758:	fd 1f       	adc	r31, r29
    175a:	3c 96       	adiw	r30, 0x0c	; 12
    175c:	8c e0       	ldi	r24, 0x0C	; 12
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	a8 eb       	ldi	r26, 0xB8	; 184
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	ac 0f       	add	r26, r28
    1766:	bd 1f       	adc	r27, r29
    1768:	1c 96       	adiw	r26, 0x0c	; 12
    176a:	8f 3f       	cpi	r24, 0xFF	; 255
    176c:	2f ef       	ldi	r18, 0xFF	; 255
    176e:	92 07       	cpc	r25, r18
    1770:	21 f0       	breq	.+8      	; 0x177a <_Z8convolvePiPchi+0x110>
    1772:	21 91       	ld	r18, Z+
    1774:	2d 93       	st	X+, r18
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	f8 cf       	rjmp	.-16     	; 0x176a <_Z8convolvePiPchi+0x100>
    177a:	ad 96       	adiw	r28, 0x2d	; 45
    177c:	8e ad       	ldd	r24, Y+62	; 0x3e
    177e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1780:	ad 97       	sbiw	r28, 0x2d	; 45
    1782:	cf 52       	subi	r28, 0x2F	; 47
    1784:	df 4f       	sbci	r29, 0xFF	; 255
    1786:	99 83       	std	Y+1, r25	; 0x01
    1788:	88 83       	st	Y, r24
    178a:	c1 5d       	subi	r28, 0xD1	; 209
    178c:	d0 40       	sbci	r29, 0x00	; 0
    178e:	48 c0       	rjmp	.+144    	; 0x1820 <_Z8convolvePiPchi+0x1b6>
	else{target = SD.open(tempName, FILE_READ);}
    1790:	21 e0       	ldi	r18, 0x01	; 1
    1792:	a6 01       	movw	r20, r12
    1794:	60 eb       	ldi	r22, 0xB0	; 176
    1796:	72 e0       	ldi	r23, 0x02	; 2
    1798:	ce 01       	movw	r24, r28
    179a:	c7 96       	adiw	r24, 0x37	; 55
    179c:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <_ZN5SDLib7SDClass4openEPKch>
    17a0:	89 ad       	ldd	r24, Y+57	; 0x39
    17a2:	9a ad       	ldd	r25, Y+58	; 0x3a
    17a4:	c6 54       	subi	r28, 0x46	; 70
    17a6:	df 4f       	sbci	r29, 0xFF	; 255
    17a8:	99 83       	std	Y+1, r25	; 0x01
    17aa:	88 83       	st	Y, r24
    17ac:	ca 5b       	subi	r28, 0xBA	; 186
    17ae:	d0 40       	sbci	r29, 0x00	; 0
    17b0:	8b ad       	ldd	r24, Y+59	; 0x3b
    17b2:	9c ad       	ldd	r25, Y+60	; 0x3c
    17b4:	ad ad       	ldd	r26, Y+61	; 0x3d
    17b6:	be ad       	ldd	r27, Y+62	; 0x3e
    17b8:	c4 54       	subi	r28, 0x44	; 68
    17ba:	df 4f       	sbci	r29, 0xFF	; 255
    17bc:	88 83       	st	Y, r24
    17be:	99 83       	std	Y+1, r25	; 0x01
    17c0:	aa 83       	std	Y+2, r26	; 0x02
    17c2:	bb 83       	std	Y+3, r27	; 0x03
    17c4:	cc 5b       	subi	r28, 0xBC	; 188
    17c6:	d0 40       	sbci	r29, 0x00	; 0
    17c8:	23 96       	adiw	r28, 0x03	; 3
    17ca:	8c ad       	ldd	r24, Y+60	; 0x3c
    17cc:	9d ad       	ldd	r25, Y+61	; 0x3d
    17ce:	ae ad       	ldd	r26, Y+62	; 0x3e
    17d0:	bf ad       	ldd	r27, Y+63	; 0x3f
    17d2:	23 97       	sbiw	r28, 0x03	; 3
    17d4:	c0 54       	subi	r28, 0x40	; 64
    17d6:	df 4f       	sbci	r29, 0xFF	; 255
    17d8:	88 83       	st	Y, r24
    17da:	99 83       	std	Y+1, r25	; 0x01
    17dc:	aa 83       	std	Y+2, r26	; 0x02
    17de:	bb 83       	std	Y+3, r27	; 0x03
    17e0:	c0 5c       	subi	r28, 0xC0	; 192
    17e2:	d0 40       	sbci	r29, 0x00	; 0
    17e4:	a7 e3       	ldi	r26, 0x37	; 55
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	ac 0f       	add	r26, r28
    17ea:	bd 1f       	adc	r27, r29
    17ec:	1c 96       	adiw	r26, 0x0c	; 12
    17ee:	8c e0       	ldi	r24, 0x0C	; 12
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	e8 eb       	ldi	r30, 0xB8	; 184
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	ec 0f       	add	r30, r28
    17f8:	fd 1f       	adc	r31, r29
    17fa:	3c 96       	adiw	r30, 0x0c	; 12
    17fc:	8f 3f       	cpi	r24, 0xFF	; 255
    17fe:	3f ef       	ldi	r19, 0xFF	; 255
    1800:	93 07       	cpc	r25, r19
    1802:	21 f0       	breq	.+8      	; 0x180c <_Z8convolvePiPchi+0x1a2>
    1804:	2d 91       	ld	r18, X+
    1806:	21 93       	st	Z+, r18
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f8 cf       	rjmp	.-16     	; 0x17fc <_Z8convolvePiPchi+0x192>
    180c:	62 96       	adiw	r28, 0x12	; 18
    180e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1810:	9f ad       	ldd	r25, Y+63	; 0x3f
    1812:	62 97       	sbiw	r28, 0x12	; 18
    1814:	cf 52       	subi	r28, 0x2F	; 47
    1816:	df 4f       	sbci	r29, 0xFF	; 255
    1818:	99 83       	std	Y+1, r25	; 0x01
    181a:	88 83       	st	Y, r24
    181c:	c1 5d       	subi	r28, 0xD1	; 209
    181e:	d0 40       	sbci	r29, 0x00	; 0
	File out = SD.open(fname_temp, FILE_WRITE);	
    1820:	27 e1       	ldi	r18, 0x17	; 23
    1822:	48 e9       	ldi	r20, 0x98	; 152
    1824:	52 e0       	ldi	r21, 0x02	; 2
    1826:	60 eb       	ldi	r22, 0xB0	; 176
    1828:	72 e0       	ldi	r23, 0x02	; 2
    182a:	ce 01       	movw	r24, r28
    182c:	8d 52       	subi	r24, 0x2D	; 45
    182e:	9f 4f       	sbci	r25, 0xFF	; 255
    1830:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <_ZN5SDLib7SDClass4openEPKch>
    1834:	cb 52       	subi	r28, 0x2B	; 43
    1836:	df 4f       	sbci	r29, 0xFF	; 255
    1838:	88 81       	ld	r24, Y
    183a:	99 81       	ldd	r25, Y+1	; 0x01
    183c:	c5 5d       	subi	r28, 0xD5	; 213
    183e:	d0 40       	sbci	r29, 0x00	; 0
    1840:	9f 8f       	std	Y+31, r25	; 0x1f
    1842:	8e 8f       	std	Y+30, r24	; 0x1e
    1844:	c9 52       	subi	r28, 0x29	; 41
    1846:	df 4f       	sbci	r29, 0xFF	; 255
    1848:	88 81       	ld	r24, Y
    184a:	99 81       	ldd	r25, Y+1	; 0x01
    184c:	aa 81       	ldd	r26, Y+2	; 0x02
    184e:	bb 81       	ldd	r27, Y+3	; 0x03
    1850:	c7 5d       	subi	r28, 0xD7	; 215
    1852:	d0 40       	sbci	r29, 0x00	; 0
    1854:	88 a3       	std	Y+32, r24	; 0x20
    1856:	99 a3       	std	Y+33, r25	; 0x21
    1858:	aa a3       	std	Y+34, r26	; 0x22
    185a:	bb a3       	std	Y+35, r27	; 0x23
    185c:	c5 52       	subi	r28, 0x25	; 37
    185e:	df 4f       	sbci	r29, 0xFF	; 255
    1860:	88 81       	ld	r24, Y
    1862:	99 81       	ldd	r25, Y+1	; 0x01
    1864:	aa 81       	ldd	r26, Y+2	; 0x02
    1866:	bb 81       	ldd	r27, Y+3	; 0x03
    1868:	cb 5d       	subi	r28, 0xDB	; 219
    186a:	d0 40       	sbci	r29, 0x00	; 0
    186c:	8c a3       	std	Y+36, r24	; 0x24
    186e:	9d a3       	std	Y+37, r25	; 0x25
    1870:	ae a3       	std	Y+38, r26	; 0x26
    1872:	bf a3       	std	Y+39, r27	; 0x27
    1874:	8b e4       	ldi	r24, 0x4B	; 75
    1876:	92 e0       	ldi	r25, 0x02	; 2
    1878:	9d 8f       	std	Y+29, r25	; 0x1d
    187a:	8c 8f       	std	Y+28, r24	; 0x1c
    187c:	8d e0       	ldi	r24, 0x0D	; 13
    187e:	e3 ed       	ldi	r30, 0xD3	; 211
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	ec 0f       	add	r30, r28
    1884:	fd 1f       	adc	r31, r29
    1886:	3c 96       	adiw	r30, 0x0c	; 12
    1888:	de 01       	movw	r26, r28
    188a:	98 96       	adiw	r26, 0x28	; 40
    188c:	01 90       	ld	r0, Z+
    188e:	0d 92       	st	X+, r0
    1890:	8a 95       	dec	r24
    1892:	e1 f7       	brne	.-8      	; 0x188c <_Z8convolvePiPchi+0x222>
    1894:	c4 51       	subi	r28, 0x14	; 20
    1896:	df 4f       	sbci	r29, 0xFF	; 255
    1898:	88 81       	ld	r24, Y
    189a:	99 81       	ldd	r25, Y+1	; 0x01
    189c:	cc 5e       	subi	r28, 0xEC	; 236
    189e:	d0 40       	sbci	r29, 0x00	; 0
    18a0:	9e ab       	std	Y+54, r25	; 0x36
    18a2:	8d ab       	std	Y+53, r24	; 0x35
	makeWaveFile(out);
    18a4:	ce 01       	movw	r24, r28
    18a6:	4c 96       	adiw	r24, 0x1c	; 28
    18a8:	0e 94 01 0a 	call	0x1402	; 0x1402 <_Z12makeWaveFileN5SDLib4FileE>
			
	unsigned long fSize = target.size();
    18ac:	ce 01       	movw	r24, r28
    18ae:	88 54       	subi	r24, 0x48	; 72
    18b0:	9f 4f       	sbci	r25, 0xFF	; 255
    18b2:	0e 94 0b 13 	call	0x2616	; 0x2616 <_ZN5SDLib4File4sizeEv>
    18b6:	ca 50       	subi	r28, 0x0A	; 10
    18b8:	df 4f       	sbci	r29, 0xFF	; 255
    18ba:	68 83       	st	Y, r22
    18bc:	79 83       	std	Y+1, r23	; 0x01
    18be:	8a 83       	std	Y+2, r24	; 0x02
    18c0:	9b 83       	std	Y+3, r25	; 0x03
    18c2:	c6 5f       	subi	r28, 0xF6	; 246
    18c4:	d0 40       	sbci	r29, 0x00	; 0

	target.read(signal_in, filterlen);
    18c6:	8f 2d       	mov	r24, r15
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	c6 50       	subi	r28, 0x06	; 6
    18cc:	df 4f       	sbci	r29, 0xFF	; 255
    18ce:	99 83       	std	Y+1, r25	; 0x01
    18d0:	88 83       	st	Y, r24
    18d2:	ca 5f       	subi	r28, 0xFA	; 250
    18d4:	d0 40       	sbci	r29, 0x00	; 0
    18d6:	ac 01       	movw	r20, r24
    18d8:	b8 01       	movw	r22, r16
    18da:	ce 01       	movw	r24, r28
    18dc:	88 54       	subi	r24, 0x48	; 72
    18de:	9f 4f       	sbci	r25, 0xFF	; 255
    18e0:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_ZN5SDLib4File4readEPvj>
	target.read(temp_buff, temp_buff_size);
    18e4:	4b e4       	ldi	r20, 0x4B	; 75
    18e6:	50 e0       	ldi	r21, 0x00	; 0
    18e8:	be 01       	movw	r22, r28
    18ea:	63 59       	subi	r22, 0x93	; 147
    18ec:	7f 4f       	sbci	r23, 0xFF	; 255
    18ee:	ce 01       	movw	r24, r28
    18f0:	88 54       	subi	r24, 0x48	; 72
    18f2:	9f 4f       	sbci	r25, 0xFF	; 255
    18f4:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_ZN5SDLib4File4readEPvj>
	*/
			
	uint8_t signal_in[filterlen];
	uint8_t temp_buff[temp_buff_size];
	float temp = 0;
	uint8_t temp_count = 0;
    18f8:	e1 2c       	mov	r14, r1
    18fa:	ce 2c       	mov	r12, r14
	unsigned long fSize = target.size();

	target.read(signal_in, filterlen);
	target.read(temp_buff, temp_buff_size);

	while (fSize) {
    18fc:	ca 50       	subi	r28, 0x0A	; 10
    18fe:	df 4f       	sbci	r29, 0xFF	; 255
    1900:	88 81       	ld	r24, Y
    1902:	99 81       	ldd	r25, Y+1	; 0x01
    1904:	aa 81       	ldd	r26, Y+2	; 0x02
    1906:	bb 81       	ldd	r27, Y+3	; 0x03
    1908:	c6 5f       	subi	r28, 0xF6	; 246
    190a:	d0 40       	sbci	r29, 0x00	; 0
    190c:	89 2b       	or	r24, r25
    190e:	8a 2b       	or	r24, r26
    1910:	8b 2b       	or	r24, r27
    1912:	09 f4       	brne	.+2      	; 0x1916 <_Z8convolvePiPchi+0x2ac>
    1914:	10 c1       	rjmp	.+544    	; 0x1b36 <_Z8convolvePiPchi+0x4cc>

		if (temp_count == temp_buff_size) {
    1916:	9b e4       	ldi	r25, 0x4B	; 75
    1918:	c9 12       	cpse	r12, r25
    191a:	0b c0       	rjmp	.+22     	; 0x1932 <_Z8convolvePiPchi+0x2c8>
			target.read(temp_buff, temp_buff_size);
    191c:	4b e4       	ldi	r20, 0x4B	; 75
    191e:	50 e0       	ldi	r21, 0x00	; 0
    1920:	be 01       	movw	r22, r28
    1922:	63 59       	subi	r22, 0x93	; 147
    1924:	7f 4f       	sbci	r23, 0xFF	; 255
    1926:	ce 01       	movw	r24, r28
    1928:	88 54       	subi	r24, 0x48	; 72
    192a:	9f 4f       	sbci	r25, 0xFF	; 255
    192c:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_ZN5SDLib4File4readEPvj>
			temp_count = 0;
    1930:	c1 2c       	mov	r12, r1
		}
		temp = dcOffset;

		for (uint8_t i = 0; i < filterlen - 1; i++) {
    1932:	d1 2c       	mov	r13, r1

		if (temp_count == temp_buff_size) {
			target.read(temp_buff, temp_buff_size);
			temp_count = 0;
		}
		temp = dcOffset;
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	ae ef       	ldi	r26, 0xFE	; 254
    193a:	b2 e4       	ldi	r27, 0x42	; 66
    193c:	ce 50       	subi	r28, 0x0E	; 14
    193e:	df 4f       	sbci	r29, 0xFF	; 255
    1940:	88 83       	st	Y, r24
    1942:	99 83       	std	Y+1, r25	; 0x01
    1944:	aa 83       	std	Y+2, r26	; 0x02
    1946:	bb 83       	std	Y+3, r27	; 0x03
    1948:	c2 5f       	subi	r28, 0xF2	; 242
    194a:	d0 40       	sbci	r29, 0x00	; 0
    194c:	5d 2c       	mov	r5, r13
    194e:	dc 2c       	mov	r13, r12

		for (uint8_t i = 0; i < filterlen - 1; i++) {
    1950:	05 2d       	mov	r16, r5
    1952:	10 e0       	ldi	r17, 0x00	; 0
    1954:	06 15       	cp	r16, r6
    1956:	17 05       	cpc	r17, r7
    1958:	0c f0       	brlt	.+2      	; 0x195c <_Z8convolvePiPchi+0x2f2>
    195a:	68 c0       	rjmp	.+208    	; 0x1a2c <_Z8convolvePiPchi+0x3c2>
			temp += ((float(signal_in[i]) - dcOffset) * filter[i] / divider);
    195c:	74 01       	movw	r14, r8
    195e:	e0 0e       	add	r14, r16
    1960:	f1 1e       	adc	r15, r17
    1962:	d7 01       	movw	r26, r14
    1964:	6c 91       	ld	r22, X
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <__floatunsisf>
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	4e ef       	ldi	r20, 0xFE	; 254
    1976:	52 e4       	ldi	r21, 0x42	; 66
    1978:	0e 94 b8 2d 	call	0x5b70	; 0x5b70 <__subsf3>
    197c:	c2 51       	subi	r28, 0x12	; 18
    197e:	df 4f       	sbci	r29, 0xFF	; 255
    1980:	68 83       	st	Y, r22
    1982:	79 83       	std	Y+1, r23	; 0x01
    1984:	8a 83       	std	Y+2, r24	; 0x02
    1986:	9b 83       	std	Y+3, r25	; 0x03
    1988:	ce 5e       	subi	r28, 0xEE	; 238
    198a:	d0 40       	sbci	r29, 0x00	; 0
    198c:	f8 01       	movw	r30, r16
    198e:	ee 0f       	add	r30, r30
    1990:	ff 1f       	adc	r31, r31
    1992:	ea 0d       	add	r30, r10
    1994:	fb 1d       	adc	r31, r11
    1996:	60 81       	ld	r22, Z
    1998:	71 81       	ldd	r23, Z+1	; 0x01
    199a:	07 2e       	mov	r0, r23
    199c:	00 0c       	add	r0, r0
    199e:	88 0b       	sbc	r24, r24
    19a0:	99 0b       	sbc	r25, r25
    19a2:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <__floatsisf>
    19a6:	c2 51       	subi	r28, 0x12	; 18
    19a8:	df 4f       	sbci	r29, 0xFF	; 255
    19aa:	28 81       	ld	r18, Y
    19ac:	39 81       	ldd	r19, Y+1	; 0x01
    19ae:	4a 81       	ldd	r20, Y+2	; 0x02
    19b0:	5b 81       	ldd	r21, Y+3	; 0x03
    19b2:	ce 5e       	subi	r28, 0xEE	; 238
    19b4:	d0 40       	sbci	r29, 0x00	; 0
    19b6:	0e 94 54 2f 	call	0x5ea8	; 0x5ea8 <__mulsf3>
    19ba:	c2 51       	subi	r28, 0x12	; 18
    19bc:	df 4f       	sbci	r29, 0xFF	; 255
    19be:	68 83       	st	Y, r22
    19c0:	79 83       	std	Y+1, r23	; 0x01
    19c2:	8a 83       	std	Y+2, r24	; 0x02
    19c4:	9b 83       	std	Y+3, r25	; 0x03
    19c6:	ce 5e       	subi	r28, 0xEE	; 238
    19c8:	d0 40       	sbci	r29, 0x00	; 0
    19ca:	b1 01       	movw	r22, r2
    19cc:	03 2c       	mov	r0, r3
    19ce:	00 0c       	add	r0, r0
    19d0:	88 0b       	sbc	r24, r24
    19d2:	99 0b       	sbc	r25, r25
    19d4:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <__floatsisf>
    19d8:	9b 01       	movw	r18, r22
    19da:	ac 01       	movw	r20, r24
    19dc:	c2 51       	subi	r28, 0x12	; 18
    19de:	df 4f       	sbci	r29, 0xFF	; 255
    19e0:	68 81       	ld	r22, Y
    19e2:	79 81       	ldd	r23, Y+1	; 0x01
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	9b 81       	ldd	r25, Y+3	; 0x03
    19e8:	ce 5e       	subi	r28, 0xEE	; 238
    19ea:	d0 40       	sbci	r29, 0x00	; 0
    19ec:	0e 94 25 2e 	call	0x5c4a	; 0x5c4a <__divsf3>
    19f0:	9b 01       	movw	r18, r22
    19f2:	ac 01       	movw	r20, r24
    19f4:	ce 50       	subi	r28, 0x0E	; 14
    19f6:	df 4f       	sbci	r29, 0xFF	; 255
    19f8:	68 81       	ld	r22, Y
    19fa:	79 81       	ldd	r23, Y+1	; 0x01
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1a00:	c2 5f       	subi	r28, 0xF2	; 242
    1a02:	d0 40       	sbci	r29, 0x00	; 0
    1a04:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <__addsf3>
    1a08:	ce 50       	subi	r28, 0x0E	; 14
    1a0a:	df 4f       	sbci	r29, 0xFF	; 255
    1a0c:	68 83       	st	Y, r22
    1a0e:	79 83       	std	Y+1, r23	; 0x01
    1a10:	8a 83       	std	Y+2, r24	; 0x02
    1a12:	9b 83       	std	Y+3, r25	; 0x03
    1a14:	c2 5f       	subi	r28, 0xF2	; 242
    1a16:	d0 40       	sbci	r29, 0x00	; 0
			signal_in[i] = signal_in[i + 1];
    1a18:	0f 5f       	subi	r16, 0xFF	; 255
    1a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1c:	f4 01       	movw	r30, r8
    1a1e:	e0 0f       	add	r30, r16
    1a20:	f1 1f       	adc	r31, r17
    1a22:	80 81       	ld	r24, Z
    1a24:	f7 01       	movw	r30, r14
    1a26:	80 83       	st	Z, r24
			target.read(temp_buff, temp_buff_size);
			temp_count = 0;
		}
		temp = dcOffset;

		for (uint8_t i = 0; i < filterlen - 1; i++) {
    1a28:	53 94       	inc	r5
    1a2a:	92 cf       	rjmp	.-220    	; 0x1950 <_Z8convolvePiPchi+0x2e6>
			temp += ((float(signal_in[i]) - dcOffset) * filter[i] / divider);
			signal_in[i] = signal_in[i + 1];
		}
		temp += ((float(signal_in[filterlen - 1]) - dcOffset) * filter[filterlen - 1] / divider);
    1a2c:	84 01       	movw	r16, r8
    1a2e:	06 0d       	add	r16, r6
    1a30:	17 1d       	adc	r17, r7
    1a32:	d8 01       	movw	r26, r16
    1a34:	6c 91       	ld	r22, X
    1a36:	70 e0       	ldi	r23, 0x00	; 0
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <__floatunsisf>
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	4e ef       	ldi	r20, 0xFE	; 254
    1a46:	52 e4       	ldi	r21, 0x42	; 66
    1a48:	0e 94 b8 2d 	call	0x5b70	; 0x5b70 <__subsf3>
    1a4c:	c2 51       	subi	r28, 0x12	; 18
    1a4e:	df 4f       	sbci	r29, 0xFF	; 255
    1a50:	68 83       	st	Y, r22
    1a52:	79 83       	std	Y+1, r23	; 0x01
    1a54:	8a 83       	std	Y+2, r24	; 0x02
    1a56:	9b 83       	std	Y+3, r25	; 0x03
    1a58:	ce 5e       	subi	r28, 0xEE	; 238
    1a5a:	d0 40       	sbci	r29, 0x00	; 0
    1a5c:	c6 50       	subi	r28, 0x06	; 6
    1a5e:	df 4f       	sbci	r29, 0xFF	; 255
    1a60:	e8 81       	ld	r30, Y
    1a62:	f9 81       	ldd	r31, Y+1	; 0x01
    1a64:	ca 5f       	subi	r28, 0xFA	; 250
    1a66:	d0 40       	sbci	r29, 0x00	; 0
    1a68:	e1 50       	subi	r30, 0x01	; 1
    1a6a:	f0 48       	sbci	r31, 0x80	; 128
    1a6c:	ee 0f       	add	r30, r30
    1a6e:	ff 1f       	adc	r31, r31
    1a70:	ea 0d       	add	r30, r10
    1a72:	fb 1d       	adc	r31, r11
    1a74:	60 81       	ld	r22, Z
    1a76:	71 81       	ldd	r23, Z+1	; 0x01
    1a78:	07 2e       	mov	r0, r23
    1a7a:	00 0c       	add	r0, r0
    1a7c:	88 0b       	sbc	r24, r24
    1a7e:	99 0b       	sbc	r25, r25
    1a80:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <__floatsisf>
    1a84:	c2 51       	subi	r28, 0x12	; 18
    1a86:	df 4f       	sbci	r29, 0xFF	; 255
    1a88:	28 81       	ld	r18, Y
    1a8a:	39 81       	ldd	r19, Y+1	; 0x01
    1a8c:	4a 81       	ldd	r20, Y+2	; 0x02
    1a8e:	5b 81       	ldd	r21, Y+3	; 0x03
    1a90:	ce 5e       	subi	r28, 0xEE	; 238
    1a92:	d0 40       	sbci	r29, 0x00	; 0
    1a94:	0e 94 54 2f 	call	0x5ea8	; 0x5ea8 <__mulsf3>
    1a98:	c2 51       	subi	r28, 0x12	; 18
    1a9a:	df 4f       	sbci	r29, 0xFF	; 255
    1a9c:	68 83       	st	Y, r22
    1a9e:	79 83       	std	Y+1, r23	; 0x01
    1aa0:	8a 83       	std	Y+2, r24	; 0x02
    1aa2:	9b 83       	std	Y+3, r25	; 0x03
    1aa4:	ce 5e       	subi	r28, 0xEE	; 238
    1aa6:	d0 40       	sbci	r29, 0x00	; 0
    1aa8:	b1 01       	movw	r22, r2
    1aaa:	03 2c       	mov	r0, r3
    1aac:	00 0c       	add	r0, r0
    1aae:	88 0b       	sbc	r24, r24
    1ab0:	99 0b       	sbc	r25, r25
    1ab2:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <__floatsisf>
    1ab6:	9b 01       	movw	r18, r22
    1ab8:	ac 01       	movw	r20, r24
    1aba:	c2 51       	subi	r28, 0x12	; 18
    1abc:	df 4f       	sbci	r29, 0xFF	; 255
    1abe:	68 81       	ld	r22, Y
    1ac0:	79 81       	ldd	r23, Y+1	; 0x01
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac6:	ce 5e       	subi	r28, 0xEE	; 238
    1ac8:	d0 40       	sbci	r29, 0x00	; 0
    1aca:	0e 94 25 2e 	call	0x5c4a	; 0x5c4a <__divsf3>
    1ace:	9b 01       	movw	r18, r22
    1ad0:	ac 01       	movw	r20, r24
    1ad2:	ce 50       	subi	r28, 0x0E	; 14
    1ad4:	df 4f       	sbci	r29, 0xFF	; 255
    1ad6:	68 81       	ld	r22, Y
    1ad8:	79 81       	ldd	r23, Y+1	; 0x01
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ade:	c2 5f       	subi	r28, 0xF2	; 242
    1ae0:	d0 40       	sbci	r29, 0x00	; 0
    1ae2:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <__addsf3>
		signal_in[filterlen - 1] = temp_buff[temp_count++];
    1ae6:	ff 24       	eor	r15, r15
    1ae8:	f3 94       	inc	r15
    1aea:	fd 0c       	add	r15, r13
    1aec:	ed e6       	ldi	r30, 0x6D	; 109
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	ec 0f       	add	r30, r28
    1af2:	fd 1f       	adc	r31, r29
    1af4:	ed 0d       	add	r30, r13
    1af6:	f1 1d       	adc	r31, r1
    1af8:	20 81       	ld	r18, Z
    1afa:	f8 01       	movw	r30, r16
    1afc:	20 83       	st	Z, r18

		out.write(uint8_t(temp));
    1afe:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <__fixunssfsi>
    1b02:	ce 01       	movw	r24, r28
    1b04:	8d 52       	subi	r24, 0x2D	; 45
    1b06:	9f 4f       	sbci	r25, 0xFF	; 255
    1b08:	0e 94 e5 11 	call	0x23ca	; 0x23ca <_ZN5SDLib4File5writeEh>

		fSize --;
    1b0c:	ca 50       	subi	r28, 0x0A	; 10
    1b0e:	df 4f       	sbci	r29, 0xFF	; 255
    1b10:	88 81       	ld	r24, Y
    1b12:	99 81       	ldd	r25, Y+1	; 0x01
    1b14:	aa 81       	ldd	r26, Y+2	; 0x02
    1b16:	bb 81       	ldd	r27, Y+3	; 0x03
    1b18:	c6 5f       	subi	r28, 0xF6	; 246
    1b1a:	d0 40       	sbci	r29, 0x00	; 0
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	a1 09       	sbc	r26, r1
    1b20:	b1 09       	sbc	r27, r1
    1b22:	ca 50       	subi	r28, 0x0A	; 10
    1b24:	df 4f       	sbci	r29, 0xFF	; 255
    1b26:	88 83       	st	Y, r24
    1b28:	99 83       	std	Y+1, r25	; 0x01
    1b2a:	aa 83       	std	Y+2, r26	; 0x02
    1b2c:	bb 83       	std	Y+3, r27	; 0x03
    1b2e:	c6 5f       	subi	r28, 0xF6	; 246
    1b30:	d0 40       	sbci	r29, 0x00	; 0
		for (uint8_t i = 0; i < filterlen - 1; i++) {
			temp += ((float(signal_in[i]) - dcOffset) * filter[i] / divider);
			signal_in[i] = signal_in[i + 1];
		}
		temp += ((float(signal_in[filterlen - 1]) - dcOffset) * filter[filterlen - 1] / divider);
		signal_in[filterlen - 1] = temp_buff[temp_count++];
    1b32:	cf 2c       	mov	r12, r15
	unsigned long fSize = target.size();

	target.read(signal_in, filterlen);
	target.read(temp_buff, temp_buff_size);

	while (fSize) {
    1b34:	e3 ce       	rjmp	.-570    	; 0x18fc <_Z8convolvePiPchi+0x292>
    1b36:	cb 52       	subi	r28, 0x2B	; 43
    1b38:	df 4f       	sbci	r29, 0xFF	; 255
    1b3a:	88 81       	ld	r24, Y
    1b3c:	99 81       	ldd	r25, Y+1	; 0x01
    1b3e:	c5 5d       	subi	r28, 0xD5	; 213
    1b40:	d0 40       	sbci	r29, 0x00	; 0
    1b42:	9c 83       	std	Y+4, r25	; 0x04
    1b44:	8b 83       	std	Y+3, r24	; 0x03
    1b46:	c9 52       	subi	r28, 0x29	; 41
    1b48:	df 4f       	sbci	r29, 0xFF	; 255
    1b4a:	88 81       	ld	r24, Y
    1b4c:	99 81       	ldd	r25, Y+1	; 0x01
    1b4e:	aa 81       	ldd	r26, Y+2	; 0x02
    1b50:	bb 81       	ldd	r27, Y+3	; 0x03
    1b52:	c7 5d       	subi	r28, 0xD7	; 215
    1b54:	d0 40       	sbci	r29, 0x00	; 0
    1b56:	8d 83       	std	Y+5, r24	; 0x05
    1b58:	9e 83       	std	Y+6, r25	; 0x06
    1b5a:	af 83       	std	Y+7, r26	; 0x07
    1b5c:	b8 87       	std	Y+8, r27	; 0x08
    1b5e:	c5 52       	subi	r28, 0x25	; 37
    1b60:	df 4f       	sbci	r29, 0xFF	; 255
    1b62:	88 81       	ld	r24, Y
    1b64:	99 81       	ldd	r25, Y+1	; 0x01
    1b66:	aa 81       	ldd	r26, Y+2	; 0x02
    1b68:	bb 81       	ldd	r27, Y+3	; 0x03
    1b6a:	cb 5d       	subi	r28, 0xDB	; 219
    1b6c:	d0 40       	sbci	r29, 0x00	; 0
    1b6e:	89 87       	std	Y+9, r24	; 0x09
    1b70:	9a 87       	std	Y+10, r25	; 0x0a
    1b72:	ab 87       	std	Y+11, r26	; 0x0b
    1b74:	bc 87       	std	Y+12, r27	; 0x0c
    1b76:	8b e4       	ldi	r24, 0x4B	; 75
    1b78:	92 e0       	ldi	r25, 0x02	; 2
    1b7a:	9a 83       	std	Y+2, r25	; 0x02
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    1b7e:	8d e0       	ldi	r24, 0x0D	; 13
    1b80:	e3 ed       	ldi	r30, 0xD3	; 211
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	ec 0f       	add	r30, r28
    1b86:	fd 1f       	adc	r31, r29
    1b88:	3c 96       	adiw	r30, 0x0c	; 12
    1b8a:	de 01       	movw	r26, r28
    1b8c:	1d 96       	adiw	r26, 0x0d	; 13
    1b8e:	01 90       	ld	r0, Z+
    1b90:	0d 92       	st	X+, r0
    1b92:	8a 95       	dec	r24
    1b94:	e1 f7       	brne	.-8      	; 0x1b8e <_Z8convolvePiPchi+0x524>
    1b96:	c4 51       	subi	r28, 0x14	; 20
    1b98:	df 4f       	sbci	r29, 0xFF	; 255
    1b9a:	88 81       	ld	r24, Y
    1b9c:	99 81       	ldd	r25, Y+1	; 0x01
    1b9e:	cc 5e       	subi	r28, 0xEC	; 236
    1ba0:	d0 40       	sbci	r29, 0x00	; 0
    1ba2:	9b 8f       	std	Y+27, r25	; 0x1b
    1ba4:	8a 8f       	std	Y+26, r24	; 0x1a

		out.write(uint8_t(temp));

		fSize --;
	}
	finalizeWave(out);
    1ba6:	ce 01       	movw	r24, r28
    1ba8:	01 96       	adiw	r24, 0x01	; 1
    1baa:	0e 94 4d 0a 	call	0x149a	; 0x149a <_Z12finalizeWaveN5SDLib4FileE>
	out.close();
    1bae:	ce 01       	movw	r24, r28
    1bb0:	8d 52       	subi	r24, 0x2D	; 45
    1bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb4:	0e 94 4a 13 	call	0x2694	; 0x2694 <_ZN5SDLib4File5closeEv>
	target.close();
    1bb8:	ce 01       	movw	r24, r28
    1bba:	88 54       	subi	r24, 0x48	; 72
    1bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbe:	0e 94 4a 13 	call	0x2694	; 0x2694 <_ZN5SDLib4File5closeEv>
			
	if(SD.exists("temp.bin")){SD.remove("temp.bin");}	
    1bc2:	6a ea       	ldi	r22, 0xAA	; 170
    1bc4:	71 e0       	ldi	r23, 0x01	; 1
    1bc6:	80 eb       	ldi	r24, 0xB0	; 176
    1bc8:	92 e0       	ldi	r25, 0x02	; 2
    1bca:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <_ZN5SDLib7SDClass6existsEPKc>
    1bce:	88 23       	and	r24, r24
    1bd0:	31 f0       	breq	.+12     	; 0x1bde <_Z8convolvePiPchi+0x574>
    1bd2:	6a ea       	ldi	r22, 0xAA	; 170
    1bd4:	71 e0       	ldi	r23, 0x01	; 1
    1bd6:	80 eb       	ldi	r24, 0xB0	; 176
    1bd8:	92 e0       	ldi	r25, 0x02	; 2
    1bda:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <_ZN5SDLib7SDClass6removeEPKc>
}
    1bde:	c4 50       	subi	r28, 0x04	; 4
    1be0:	df 4f       	sbci	r29, 0xFF	; 255
    1be2:	a8 81       	ld	r26, Y
    1be4:	b9 81       	ldd	r27, Y+1	; 0x01
    1be6:	cc 5f       	subi	r28, 0xFC	; 252
    1be8:	d0 40       	sbci	r29, 0x00	; 0
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	f8 94       	cli
    1bee:	be bf       	out	0x3e, r27	; 62
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	ad bf       	out	0x3d, r26	; 61
    1bf4:	c3 50       	subi	r28, 0x03	; 3
    1bf6:	df 4f       	sbci	r29, 0xFF	; 255
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	f8 94       	cli
    1bfc:	de bf       	out	0x3e, r29	; 62
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	cd bf       	out	0x3d, r28	; 61
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	1f 91       	pop	r17
    1c08:	0f 91       	pop	r16
    1c0a:	ff 90       	pop	r15
    1c0c:	ef 90       	pop	r14
    1c0e:	df 90       	pop	r13
    1c10:	cf 90       	pop	r12
    1c12:	bf 90       	pop	r11
    1c14:	af 90       	pop	r10
    1c16:	9f 90       	pop	r9
    1c18:	8f 90       	pop	r8
    1c1a:	7f 90       	pop	r7
    1c1c:	6f 90       	pop	r6
    1c1e:	5f 90       	pop	r5
    1c20:	3f 90       	pop	r3
    1c22:	2f 90       	pop	r2
    1c24:	08 95       	ret

00001c26 <_Z10pickFilterc>:
		out.close();
		target.close();

}

void pickFilter(char M){
    1c26:	1f 93       	push	r17
    1c28:	cf 93       	push	r28
    1c2a:	df 93       	push	r29
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	6e 97       	sbiw	r28, 0x1e	; 30
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
    1c3c:	18 2f       	mov	r17, r24
	
	char tempName[6] = {tracks[fcount],'.','W','A','V'};
    1c3e:	fe 01       	movw	r30, r28
    1c40:	31 96       	adiw	r30, 0x01	; 1
    1c42:	86 e0       	ldi	r24, 0x06	; 6
    1c44:	df 01       	movw	r26, r30
    1c46:	1d 92       	st	X+, r1
    1c48:	8a 95       	dec	r24
    1c4a:	e9 f7       	brne	.-6      	; 0x1c46 <_Z10pickFilterc+0x20>
    1c4c:	3e e2       	ldi	r19, 0x2E	; 46
    1c4e:	3a 83       	std	Y+2, r19	; 0x02
    1c50:	27 e5       	ldi	r18, 0x57	; 87
    1c52:	2b 83       	std	Y+3, r18	; 0x03
    1c54:	91 e4       	ldi	r25, 0x41	; 65
    1c56:	9c 83       	std	Y+4, r25	; 0x04
    1c58:	86 e5       	ldi	r24, 0x56	; 86
    1c5a:	8d 83       	std	Y+5, r24	; 0x05
    1c5c:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <fcount>
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	ef 55       	subi	r30, 0x5F	; 95
    1c64:	fd 4f       	sbci	r31, 0xFD	; 253
    1c66:	40 81       	ld	r20, Z
    1c68:	49 83       	std	Y+1, r20	; 0x01
	fname_temp[0] = M;fname_temp[1] = tracks[fcount];fname_temp[2] = '.';fname_temp[3] = 'W';fname_temp[4] = 'A';fname_temp[5] = 'V';
    1c6a:	e8 e9       	ldi	r30, 0x98	; 152
    1c6c:	f2 e0       	ldi	r31, 0x02	; 2
    1c6e:	10 83       	st	Z, r17
    1c70:	41 83       	std	Z+1, r20	; 0x01
    1c72:	32 83       	std	Z+2, r19	; 0x02
    1c74:	23 83       	std	Z+3, r18	; 0x03
    1c76:	94 83       	std	Z+4, r25	; 0x04
    1c78:	85 83       	std	Z+5, r24	; 0x05
	
	if(!SD.exists(fname_temp)){
    1c7a:	bf 01       	movw	r22, r30
    1c7c:	80 eb       	ldi	r24, 0xB0	; 176
    1c7e:	92 e0       	ldi	r25, 0x02	; 2
    1c80:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <_ZN5SDLib7SDClass6existsEPKc>
    1c84:	81 11       	cpse	r24, r1
    1c86:	54 c0       	rjmp	.+168    	; 0x1d30 <_Z10pickFilterc+0x10a>
		if(M=='S' || M=='H'){
    1c88:	13 35       	cpi	r17, 0x53	; 83
    1c8a:	11 f0       	breq	.+4      	; 0x1c90 <_Z10pickFilterc+0x6a>
    1c8c:	18 34       	cpi	r17, 0x48	; 72
    1c8e:	29 f5       	brne	.+74     	; 0x1cda <_Z10pickFilterc+0xb4>

			//int filter[11] ={-18,-47,-83,-121,-148,833,-148,-121,-83,-47,-18};//kaiser 100fc beta1.8
			int filter[11] =	{-18,-46,-83,-120,-148,834,-148,-120,-83,-46,-18};//kaiser 1000fc beta1.84
    1c90:	86 e1       	ldi	r24, 0x16	; 22
    1c92:	e1 e3       	ldi	r30, 0x31	; 49
    1c94:	f1 e0       	ldi	r31, 0x01	; 1
    1c96:	de 01       	movw	r26, r28
    1c98:	17 96       	adiw	r26, 0x07	; 7
    1c9a:	01 90       	ld	r0, Z+
    1c9c:	0d 92       	st	X+, r0
    1c9e:	8a 95       	dec	r24
    1ca0:	e1 f7       	brne	.-8      	; 0x1c9a <_Z10pickFilterc+0x74>
			if(M=='S'){
    1ca2:	13 35       	cpi	r17, 0x53	; 83
    1ca4:	79 f4       	brne	.+30     	; 0x1cc4 <_Z10pickFilterc+0x9e>
				sig_freqShift(tempName);
    1ca6:	ce 01       	movw	r24, r28
    1ca8:	01 96       	adiw	r24, 0x01	; 1
    1caa:	0e 94 a5 0a 	call	0x154a	; 0x154a <_Z13sig_freqShiftPc>
				convolve(filter,tempName,11,500);
    1cae:	24 ef       	ldi	r18, 0xF4	; 244
    1cb0:	31 e0       	ldi	r19, 0x01	; 1
    1cb2:	4b e0       	ldi	r20, 0x0B	; 11
    1cb4:	be 01       	movw	r22, r28
    1cb6:	6f 5f       	subi	r22, 0xFF	; 255
    1cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cba:	ce 01       	movw	r24, r28
    1cbc:	07 96       	adiw	r24, 0x07	; 7
    1cbe:	0e 94 35 0b 	call	0x166a	; 0x166a <_Z8convolvePiPchi>
    1cc2:	36 c0       	rjmp	.+108    	; 0x1d30 <_Z10pickFilterc+0x10a>
			}
			else{
				convolve(filter,tempName,11,500);
    1cc4:	24 ef       	ldi	r18, 0xF4	; 244
    1cc6:	31 e0       	ldi	r19, 0x01	; 1
    1cc8:	4b e0       	ldi	r20, 0x0B	; 11
    1cca:	be 01       	movw	r22, r28
    1ccc:	6f 5f       	subi	r22, 0xFF	; 255
    1cce:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	07 96       	adiw	r24, 0x07	; 7
    1cd4:	0e 94 35 0b 	call	0x166a	; 0x166a <_Z8convolvePiPchi>
			}			
    1cd8:	2b c0       	rjmp	.+86     	; 0x1d30 <_Z10pickFilterc+0x10a>
		}
		
		else if(M=='B'){
    1cda:	12 34       	cpi	r17, 0x42	; 66
    1cdc:	a1 f4       	brne	.+40     	; 0x1d06 <_Z10pickFilterc+0xe0>
			//int filter[26] ={0,0,0,5,19,29,10,-44,-106,-121,-50,77,181,181,77,-50,-121,-106,-44,10,29,19,5,0,0,0};//bandpass Bar-hann 
			//int filter[15] ={14,-10,-71,-127,-107,12,164,233,164,12,-107,-127,-71,-10,14};//kaiser beta3 good
			int filter[11] =	{-69,-128,-109,13,170,242,170,13,-109,-128,-69};//kaiser beta1.9
    1cde:	86 e1       	ldi	r24, 0x16	; 22
    1ce0:	e7 e4       	ldi	r30, 0x47	; 71
    1ce2:	f1 e0       	ldi	r31, 0x01	; 1
    1ce4:	de 01       	movw	r26, r28
    1ce6:	17 96       	adiw	r26, 0x07	; 7
    1ce8:	01 90       	ld	r0, Z+
    1cea:	0d 92       	st	X+, r0
    1cec:	8a 95       	dec	r24
    1cee:	e1 f7       	brne	.-8      	; 0x1ce8 <_Z10pickFilterc+0xc2>
			convolve(filter,tempName,11,500);		
    1cf0:	24 ef       	ldi	r18, 0xF4	; 244
    1cf2:	31 e0       	ldi	r19, 0x01	; 1
    1cf4:	4b e0       	ldi	r20, 0x0B	; 11
    1cf6:	be 01       	movw	r22, r28
    1cf8:	6f 5f       	subi	r22, 0xFF	; 255
    1cfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	07 96       	adiw	r24, 0x07	; 7
    1d00:	0e 94 35 0b 	call	0x166a	; 0x166a <_Z8convolvePiPchi>
    1d04:	15 c0       	rjmp	.+42     	; 0x1d30 <_Z10pickFilterc+0x10a>
		}
		else if(M=='L'){
    1d06:	1c 34       	cpi	r17, 0x4C	; 76
    1d08:	99 f4       	brne	.+38     	; 0x1d30 <_Z10pickFilterc+0x10a>
			//int filter[14] ={66,68,70,72,73,74,74,74,74,73,72,70,68,66};
			int filter[12] =	{37,57,77,96,111,119,119,111,96,77,57,37};//KAISER BETA=-2
    1d0a:	88 e1       	ldi	r24, 0x18	; 24
    1d0c:	ed e5       	ldi	r30, 0x5D	; 93
    1d0e:	f1 e0       	ldi	r31, 0x01	; 1
    1d10:	de 01       	movw	r26, r28
    1d12:	17 96       	adiw	r26, 0x07	; 7
    1d14:	01 90       	ld	r0, Z+
    1d16:	0d 92       	st	X+, r0
    1d18:	8a 95       	dec	r24
    1d1a:	e1 f7       	brne	.-8      	; 0x1d14 <_Z10pickFilterc+0xee>
			convolve(filter,tempName,12,500);
    1d1c:	24 ef       	ldi	r18, 0xF4	; 244
    1d1e:	31 e0       	ldi	r19, 0x01	; 1
    1d20:	4c e0       	ldi	r20, 0x0C	; 12
    1d22:	be 01       	movw	r22, r28
    1d24:	6f 5f       	subi	r22, 0xFF	; 255
    1d26:	7f 4f       	sbci	r23, 0xFF	; 255
    1d28:	ce 01       	movw	r24, r28
    1d2a:	07 96       	adiw	r24, 0x07	; 7
    1d2c:	0e 94 35 0b 	call	0x166a	; 0x166a <_Z8convolvePiPchi>
		}
	}
}
    1d30:	6e 96       	adiw	r28, 0x1e	; 30
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	1f 91       	pop	r17
    1d42:	08 95       	ret

00001d44 <_Z12checkChangesv>:
  }
  _delay_ms(1000);
   fname_temp[0] = tracks[fcount];fname_temp[1] = '.';fname_temp[2] = 'W';fname_temp[3] = 'A';fname_temp[4] = 'V';fname_temp[5] = NULL;
}

void checkChanges() {
    1d44:	0f 93       	push	r16
    1d46:	1f 93       	push	r17
    1d48:	cf 93       	push	r28
    1d4a:	df 93       	push	r29
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <_Z12checkChangesv+0xa>
    1d4e:	00 d0       	rcall	.+0      	; 0x1d50 <_Z12checkChangesv+0xc>
    1d50:	00 d0       	rcall	.+0      	; 0x1d52 <_Z12checkChangesv+0xe>
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
  /*
     This function checks for frequency change requirements
  */
	clrDisplay("SCL M");
    1d56:	83 eb       	ldi	r24, 0xB3	; 179
    1d58:	91 e0       	ldi	r25, 0x01	; 1
    1d5a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_Z10clrDisplayPKc>
	
	char fsc =49;
	char fshift='X';
	char row[6] = {' ',fsc,' ',' ',fshift};
    1d5e:	fe 01       	movw	r30, r28
    1d60:	31 96       	adiw	r30, 0x01	; 1
    1d62:	86 e0       	ldi	r24, 0x06	; 6
    1d64:	df 01       	movw	r26, r30
    1d66:	1d 92       	st	X+, r1
    1d68:	8a 95       	dec	r24
    1d6a:	e9 f7       	brne	.-6      	; 0x1d66 <_Z12checkChangesv+0x22>
    1d6c:	80 e2       	ldi	r24, 0x20	; 32
    1d6e:	89 83       	std	Y+1, r24	; 0x01
    1d70:	8b 83       	std	Y+3, r24	; 0x03
    1d72:	8c 83       	std	Y+4, r24	; 0x04
    1d74:	81 e3       	ldi	r24, 0x31	; 49
    1d76:	8a 83       	std	Y+2, r24	; 0x02
    1d78:	88 e5       	ldi	r24, 0x58	; 88
    1d7a:	8d 83       	std	Y+5, r24	; 0x05
     This function checks for frequency change requirements
  */
	clrDisplay("SCL M");
	
	char fsc =49;
	char fshift='X';
    1d7c:	18 e5       	ldi	r17, 0x58	; 88
  /*
     This function checks for frequency change requirements
  */
	clrDisplay("SCL M");
	
	char fsc =49;
    1d7e:	01 e3       	ldi	r16, 0x31	; 49
	char fshift='X';
	char row[6] = {' ',fsc,' ',' ',fshift};
		
	while(true){
		char key_input = keyInput();
    1d80:	0e 94 cc 08 	call	0x1198	; 0x1198 <_Z8keyInputv>
		if (key_input=='p')
    1d84:	80 37       	cpi	r24, 0x70	; 112
    1d86:	31 f4       	brne	.+12     	; 0x1d94 <_Z12checkChangesv+0x50>
		{
			freqScal = uint8_t(fsc) - 48;
    1d88:	00 53       	subi	r16, 0x30	; 48
    1d8a:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <freqScal>
		}
		row[1]=fsc;row[4]=fshift;
		secondLine(row);
	}
	
	if(fshift!='X'){
    1d8e:	18 35       	cpi	r17, 0x58	; 88
    1d90:	29 f5       	brne	.+74     	; 0x1ddc <_Z12checkChangesv+0x98>
    1d92:	2b c0       	rjmp	.+86     	; 0x1dea <_Z12checkChangesv+0xa6>
		if (key_input=='p')
		{
			freqScal = uint8_t(fsc) - 48;
			break;
		}
		else if(key_input=='>'){
    1d94:	8e 33       	cpi	r24, 0x3E	; 62
    1d96:	59 f4       	brne	.+22     	; 0x1dae <_Z12checkChangesv+0x6a>
			if(fshift=='X'){
    1d98:	18 35       	cpi	r17, 0x58	; 88
    1d9a:	81 f0       	breq	.+32     	; 0x1dbc <_Z12checkChangesv+0x78>
				fshift='H';
			}
			else if(fshift=='H'){
    1d9c:	18 34       	cpi	r17, 0x48	; 72
    1d9e:	81 f0       	breq	.+32     	; 0x1dc0 <_Z12checkChangesv+0x7c>
				fshift='L';
			}
			else if(fshift=='L'){
    1da0:	1c 34       	cpi	r17, 0x4C	; 76
    1da2:	81 f0       	breq	.+32     	; 0x1dc4 <_Z12checkChangesv+0x80>
				fshift='B';
			}
			else if(fshift=='B'){
    1da4:	12 34       	cpi	r17, 0x42	; 66
    1da6:	81 f0       	breq	.+32     	; 0x1dc8 <_Z12checkChangesv+0x84>
				fshift='S';
			}
			else if(fshift=='S'){
    1da8:	13 35       	cpi	r17, 0x53	; 83
    1daa:	89 f4       	brne	.+34     	; 0x1dce <_Z12checkChangesv+0x8a>
    1dac:	0f c0       	rjmp	.+30     	; 0x1dcc <_Z12checkChangesv+0x88>
				fshift='X';
			}
		}
		else if(key_input=='<'){
    1dae:	8c 33       	cpi	r24, 0x3C	; 60
    1db0:	71 f4       	brne	.+28     	; 0x1dce <_Z12checkChangesv+0x8a>
			if(fsc==51){
    1db2:	03 33       	cpi	r16, 0x33	; 51
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <_Z12checkChangesv+0x74>
				fsc=48;
    1db6:	00 e3       	ldi	r16, 0x30	; 48
			}
			fsc++;
    1db8:	0f 5f       	subi	r16, 0xFF	; 255
    1dba:	09 c0       	rjmp	.+18     	; 0x1dce <_Z12checkChangesv+0x8a>
			freqScal = uint8_t(fsc) - 48;
			break;
		}
		else if(key_input=='>'){
			if(fshift=='X'){
				fshift='H';
    1dbc:	18 e4       	ldi	r17, 0x48	; 72
    1dbe:	07 c0       	rjmp	.+14     	; 0x1dce <_Z12checkChangesv+0x8a>
			}
			else if(fshift=='H'){
				fshift='L';
    1dc0:	1c e4       	ldi	r17, 0x4C	; 76
    1dc2:	05 c0       	rjmp	.+10     	; 0x1dce <_Z12checkChangesv+0x8a>
			}
			else if(fshift=='L'){
				fshift='B';
    1dc4:	12 e4       	ldi	r17, 0x42	; 66
    1dc6:	03 c0       	rjmp	.+6      	; 0x1dce <_Z12checkChangesv+0x8a>
			}
			else if(fshift=='B'){
				fshift='S';
    1dc8:	13 e5       	ldi	r17, 0x53	; 83
    1dca:	01 c0       	rjmp	.+2      	; 0x1dce <_Z12checkChangesv+0x8a>
			}
			else if(fshift=='S'){
				fshift='X';
    1dcc:	18 e5       	ldi	r17, 0x58	; 88
			if(fsc==51){
				fsc=48;
			}
			fsc++;
		}
		row[1]=fsc;row[4]=fshift;
    1dce:	0a 83       	std	Y+2, r16	; 0x02
    1dd0:	1d 83       	std	Y+5, r17	; 0x05
		secondLine(row);
    1dd2:	ce 01       	movw	r24, r28
    1dd4:	01 96       	adiw	r24, 0x01	; 1
    1dd6:	0e 94 12 09 	call	0x1224	; 0x1224 <_Z10secondLinePKc>
	
	char fsc =49;
	char fshift='X';
	char row[6] = {' ',fsc,' ',' ',fshift};
		
	while(true){
    1dda:	d2 cf       	rjmp	.-92     	; 0x1d80 <_Z12checkChangesv+0x3c>
		row[1]=fsc;row[4]=fshift;
		secondLine(row);
	}
	
	if(fshift!='X'){
		  clrDisplay("Processing");
    1ddc:	89 eb       	ldi	r24, 0xB9	; 185
    1dde:	91 e0       	ldi	r25, 0x01	; 1
    1de0:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_Z10clrDisplayPKc>
		  pickFilter(fshift);
    1de4:	81 2f       	mov	r24, r17
    1de6:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <_Z10pickFilterc>
	}
}
    1dea:	26 96       	adiw	r28, 0x06	; 6
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	de bf       	out	0x3e, r29	; 62
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	cd bf       	out	0x3d, r28	; 61
    1df6:	df 91       	pop	r29
    1df8:	cf 91       	pop	r28
    1dfa:	1f 91       	pop	r17
    1dfc:	0f 91       	pop	r16
    1dfe:	08 95       	ret

00001e00 <_Z9playTrackv>:
	  }
	  test_File.close();
}

void playTrack()
{
    1e00:	1f 93       	push	r17
    1e02:	cf 93       	push	r28
    1e04:	df 93       	push	r29
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	6b 97       	sbiw	r28, 0x1b	; 27
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	de bf       	out	0x3e, r29	; 62
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	cd bf       	out	0x3d, r28	; 61
  /*This function reads data from the specified file and play*/

  checkChanges();//check for frequency change requirements
    1e16:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <_Z12checkChangesv>
clrDisplay("Playing");
    1e1a:	84 ec       	ldi	r24, 0xC4	; 196
    1e1c:	91 e0       	ldi	r25, 0x01	; 1
    1e1e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_Z10clrDisplayPKc>

  File test_File = SD.open(fname_temp);
    1e22:	21 e0       	ldi	r18, 0x01	; 1
    1e24:	48 e9       	ldi	r20, 0x98	; 152
    1e26:	52 e0       	ldi	r21, 0x02	; 2
    1e28:	60 eb       	ldi	r22, 0xB0	; 176
    1e2a:	72 e0       	ldi	r23, 0x02	; 2
    1e2c:	ce 01       	movw	r24, r28
    1e2e:	01 96       	adiw	r24, 0x01	; 1
    1e30:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <_ZN5SDLib7SDClass4openEPKch>

  if (!test_File) {
    1e34:	ce 01       	movw	r24, r28
    1e36:	01 96       	adiw	r24, 0x01	; 1
    1e38:	0e 94 5d 13 	call	0x26ba	; 0x26ba <_ZN5SDLib4FilecvbEv>
    1e3c:	81 11       	cpse	r24, r1
    1e3e:	0e c0       	rjmp	.+28     	; 0x1e5c <_Z9playTrackv+0x5c>
    // if the file didn't open, print an error:
    secondLine("Error");
    1e40:	8c ec       	ldi	r24, 0xCC	; 204
    1e42:	91 e0       	ldi	r25, 0x01	; 1
    1e44:	0e 94 12 09 	call	0x1224	; 0x1224 <_Z10secondLinePKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e48:	2f ef       	ldi	r18, 0xFF	; 255
    1e4a:	83 ed       	ldi	r24, 0xD3	; 211
    1e4c:	90 e3       	ldi	r25, 0x30	; 48
    1e4e:	21 50       	subi	r18, 0x01	; 1
    1e50:	80 40       	sbci	r24, 0x00	; 0
    1e52:	90 40       	sbci	r25, 0x00	; 0
    1e54:	e1 f7       	brne	.-8      	; 0x1e4e <_Z9playTrackv+0x4e>
    1e56:	00 c0       	rjmp	.+0      	; 0x1e58 <_Z9playTrackv+0x58>
    1e58:	00 00       	nop
    1e5a:	5e c0       	rjmp	.+188    	; 0x1f18 <_Z9playTrackv+0x118>
    _delay_ms(1000);
  }
  else {
    test_File.seek(44);
    1e5c:	4c e2       	ldi	r20, 0x2C	; 44
    1e5e:	50 e0       	ldi	r21, 0x00	; 0
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	70 e0       	ldi	r23, 0x00	; 0
    1e64:	ce 01       	movw	r24, r28
    1e66:	01 96       	adiw	r24, 0x01	; 1
    1e68:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <_ZN5SDLib4File4seekEm>
    
    secondLine(fname_temp);
    1e6c:	88 e9       	ldi	r24, 0x98	; 152
    1e6e:	92 e0       	ldi	r25, 0x02	; 2
    1e70:	0e 94 12 09 	call	0x1224	; 0x1224 <_Z10secondLinePKc>

    //Check whether a frequency scale is set
    //>---------------------------< NORMAL OUTPUT >----------------------------------<

    if (freqScal == 0 || freqScal == 1) {
    1e74:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <freqScal>
    1e78:	82 30       	cpi	r24, 0x02	; 2
    1e7a:	c8 f4       	brcc	.+50     	; 0x1eae <_Z9playTrackv+0xae>
      while (test_File.available()) {
    1e7c:	ce 01       	movw	r24, r28
    1e7e:	01 96       	adiw	r24, 0x01	; 1
    1e80:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN5SDLib4File9availableEv>
    1e84:	89 2b       	or	r24, r25
    1e86:	e1 f1       	breq	.+120    	; 0x1f00 <_Z9playTrackv+0x100>

        OCR1A = test_File.read();
    1e88:	ce 01       	movw	r24, r28
    1e8a:	01 96       	adiw	r24, 0x01	; 1
    1e8c:	0e 94 35 12 	call	0x246a	; 0x246a <_ZN5SDLib4File4readEv>
    1e90:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1e94:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e98:	25 ed       	ldi	r18, 0xD5	; 213
    1e9a:	2a 95       	dec	r18
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <_Z9playTrackv+0x9a>
    1e9e:	00 00       	nop
        _delay_us(40);  //Use this delay for 12.5KHz play
        //_delay_us(16);    //Use this delay for 16kHz play
        
		//****Comment both of delays for 24kHz play*******
        
        char key = keyInput();
    1ea0:	0e 94 cc 08 	call	0x1198	; 0x1198 <_Z8keyInputv>
        if (key && key == 'p') {
    1ea4:	80 37       	cpi	r24, 0x70	; 112
    1ea6:	51 f7       	brne	.-44     	; 0x1e7c <_Z9playTrackv+0x7c>
    1ea8:	2b c0       	rjmp	.+86     	; 0x1f00 <_Z9playTrackv+0x100>
        }

        count++;

        if (count == freqScal + 1) {//resetting the count
          count = 1;
    1eaa:	11 e0       	ldi	r17, 0x01	; 1
    1eac:	01 c0       	rjmp	.+2      	; 0x1eb0 <_Z9playTrackv+0xb0>
    1eae:	11 e0       	ldi	r17, 0x01	; 1
    //Output for freaquency scaled track
    //Using down sampling

    else {
      uint8_t count = 1;
      while (test_File.available()) {
    1eb0:	ce 01       	movw	r24, r28
    1eb2:	01 96       	adiw	r24, 0x01	; 1
    1eb4:	0e 94 1b 13 	call	0x2636	; 0x2636 <_ZN5SDLib4File9availableEv>
    1eb8:	89 2b       	or	r24, r25
    1eba:	11 f1       	breq	.+68     	; 0x1f00 <_Z9playTrackv+0x100>

        char key = keyInput();
    1ebc:	0e 94 cc 08 	call	0x1198	; 0x1198 <_Z8keyInputv>
        if (key && key == 'p') {
    1ec0:	80 37       	cpi	r24, 0x70	; 112
    1ec2:	f1 f0       	breq	.+60     	; 0x1f00 <_Z9playTrackv+0x100>
          break;
        }

        if (count == 1) {
    1ec4:	11 30       	cpi	r17, 0x01	; 1
    1ec6:	69 f4       	brne	.+26     	; 0x1ee2 <_Z9playTrackv+0xe2>
          //Accept the first sample among (# of samples=freqScal)
		  OCR1A = test_File.read();
    1ec8:	ce 01       	movw	r24, r28
    1eca:	01 96       	adiw	r24, 0x01	; 1
    1ecc:	0e 94 35 12 	call	0x246a	; 0x246a <_ZN5SDLib4File4readEv>
    1ed0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1ed4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1ed8:	85 ed       	ldi	r24, 0xD5	; 213
    1eda:	8a 95       	dec	r24
    1edc:	f1 f7       	brne	.-4      	; 0x1eda <_Z9playTrackv+0xda>
    1ede:	00 00       	nop
    1ee0:	04 c0       	rjmp	.+8      	; 0x1eea <_Z9playTrackv+0xea>
          _delay_us(40);  //Use this delay for 12.5KHz play
          //_delay_us(16);    //Use this delay for 16kHz play
          //Comment both of delays for 24kHz play

        } else {
          test_File.read();//This is to neglet samples in between
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	01 96       	adiw	r24, 0x01	; 1
    1ee6:	0e 94 35 12 	call	0x246a	; 0x246a <_ZN5SDLib4File4readEv>
        }

        count++;
    1eea:	1f 5f       	subi	r17, 0xFF	; 255

        if (count == freqScal + 1) {//resetting the count
    1eec:	21 2f       	mov	r18, r17
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <freqScal>
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	01 96       	adiw	r24, 0x01	; 1
    1ef8:	28 17       	cp	r18, r24
    1efa:	39 07       	cpc	r19, r25
    1efc:	c9 f6       	brne	.-78     	; 0x1eb0 <_Z9playTrackv+0xb0>
    1efe:	d5 cf       	rjmp	.-86     	; 0x1eaa <_Z9playTrackv+0xaa>
        }
      }
    }
    // close the file:

	OCR1A = 0;
    1f00:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1f04:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    secondLine("End of play");
    1f08:	82 ed       	ldi	r24, 0xD2	; 210
    1f0a:	91 e0       	ldi	r25, 0x01	; 1
    1f0c:	0e 94 12 09 	call	0x1224	; 0x1224 <_Z10secondLinePKc>
    test_File.close();
    1f10:	ce 01       	movw	r24, r28
    1f12:	01 96       	adiw	r24, 0x01	; 1
    1f14:	0e 94 4a 13 	call	0x2694	; 0x2694 <_ZN5SDLib4File5closeEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f18:	9f ef       	ldi	r25, 0xFF	; 255
    1f1a:	23 ed       	ldi	r18, 0xD3	; 211
    1f1c:	80 e3       	ldi	r24, 0x30	; 48
    1f1e:	91 50       	subi	r25, 0x01	; 1
    1f20:	20 40       	sbci	r18, 0x00	; 0
    1f22:	80 40       	sbci	r24, 0x00	; 0
    1f24:	e1 f7       	brne	.-8      	; 0x1f1e <_Z9playTrackv+0x11e>
    1f26:	00 c0       	rjmp	.+0      	; 0x1f28 <_Z9playTrackv+0x128>
    1f28:	00 00       	nop
	    
  }
  _delay_ms(1000);
   fname_temp[0] = tracks[fcount];fname_temp[1] = '.';fname_temp[2] = 'W';fname_temp[3] = 'A';fname_temp[4] = 'V';fname_temp[5] = NULL;
    1f2a:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <fcount>
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	ef 55       	subi	r30, 0x5F	; 95
    1f32:	fd 4f       	sbci	r31, 0xFD	; 253
    1f34:	80 81       	ld	r24, Z
    1f36:	e8 e9       	ldi	r30, 0x98	; 152
    1f38:	f2 e0       	ldi	r31, 0x02	; 2
    1f3a:	80 83       	st	Z, r24
    1f3c:	8e e2       	ldi	r24, 0x2E	; 46
    1f3e:	81 83       	std	Z+1, r24	; 0x01
    1f40:	87 e5       	ldi	r24, 0x57	; 87
    1f42:	82 83       	std	Z+2, r24	; 0x02
    1f44:	81 e4       	ldi	r24, 0x41	; 65
    1f46:	83 83       	std	Z+3, r24	; 0x03
    1f48:	86 e5       	ldi	r24, 0x56	; 86
    1f4a:	84 83       	std	Z+4, r24	; 0x04
    1f4c:	15 82       	std	Z+5, r1	; 0x05
}
    1f4e:	6b 96       	adiw	r28, 0x1b	; 27
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	cd bf       	out	0x3d, r28	; 61
    1f5a:	df 91       	pop	r29
    1f5c:	cf 91       	pop	r28
    1f5e:	1f 91       	pop	r17
    1f60:	08 95       	ret

00001f62 <_Z9analog_ini>:


//>--------------------------------------< IO FUNCTIONS >--------------------------------------<
uint8_t analog_in(int inputPin = 0000){
		
	ADMUX |= inputPin;
    1f62:	ec e7       	ldi	r30, 0x7C	; 124
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	90 81       	ld	r25, Z
    1f68:	89 2b       	or	r24, r25
    1f6a:	80 83       	st	Z, r24
	
	ADCSRA = ADCSRA | (1 << ADSC);
    1f6c:	ea e7       	ldi	r30, 0x7A	; 122
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	80 64       	ori	r24, 0x40	; 64
    1f74:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC));
    1f76:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1f7a:	86 fd       	sbrc	r24, 6
    1f7c:	fc cf       	rjmp	.-8      	; 0x1f76 <_Z9analog_ini+0x14>
	
	ADMUX &= 0b11110000;
    1f7e:	ec e7       	ldi	r30, 0x7C	; 124
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	80 7f       	andi	r24, 0xF0	; 240
    1f86:	80 83       	st	Z, r24
	
	return ADCH;
    1f88:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
    1f8c:	08 95       	ret

00001f8e <_Z6recordv>:

//END OF LCD DISPLAY FUNCTIONS

//>-----------------------------< RECORD AND PLAY FUNCTIONS >----------------------------------<

void record() {
    1f8e:	1f 93       	push	r17
    1f90:	cf 93       	push	r28
    1f92:	df 93       	push	r29
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	c1 55       	subi	r28, 0x51	; 81
    1f9a:	d1 09       	sbc	r29, r1
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
	 /*Used to record the data got from input into a file*/
	  checkDuplicates();
    1fa6:	0e 94 82 09 	call	0x1304	; 0x1304 <_Z15checkDuplicatesv>
	  File test_File = SD.open(fname_temp, FILE_WRITE);
    1faa:	27 e1       	ldi	r18, 0x17	; 23
    1fac:	48 e9       	ldi	r20, 0x98	; 152
    1fae:	52 e0       	ldi	r21, 0x02	; 2
    1fb0:	60 eb       	ldi	r22, 0xB0	; 176
    1fb2:	72 e0       	ldi	r23, 0x02	; 2
    1fb4:	ce 01       	movw	r24, r28
    1fb6:	c7 96       	adiw	r24, 0x37	; 55
    1fb8:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <_ZN5SDLib7SDClass4openEPKch>

	  if (!test_File) {
    1fbc:	ce 01       	movw	r24, r28
    1fbe:	c7 96       	adiw	r24, 0x37	; 55
    1fc0:	0e 94 5d 13 	call	0x26ba	; 0x26ba <_ZN5SDLib4FilecvbEv>
    1fc4:	81 11       	cpse	r24, r1
    1fc6:	05 c0       	rjmp	.+10     	; 0x1fd2 <_Z6recordv+0x44>
		clrDisplay("Error");
    1fc8:	8c ec       	ldi	r24, 0xCC	; 204
    1fca:	91 e0       	ldi	r25, 0x01	; 1
    1fcc:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_Z10clrDisplayPKc>
    1fd0:	81 c0       	rjmp	.+258    	; 0x20d4 <_Z6recordv+0x146>
	  }
	  else {
		clrDisplay("Recording");
    1fd2:	8e ed       	ldi	r24, 0xDE	; 222
    1fd4:	91 e0       	ldi	r25, 0x01	; 1
    1fd6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_Z10clrDisplayPKc>
    1fda:	89 ad       	ldd	r24, Y+57	; 0x39
    1fdc:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fde:	9f 8f       	std	Y+31, r25	; 0x1f
    1fe0:	8e 8f       	std	Y+30, r24	; 0x1e
    1fe2:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fe4:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fe6:	ad ad       	ldd	r26, Y+61	; 0x3d
    1fe8:	be ad       	ldd	r27, Y+62	; 0x3e
    1fea:	88 a3       	std	Y+32, r24	; 0x20
    1fec:	99 a3       	std	Y+33, r25	; 0x21
    1fee:	aa a3       	std	Y+34, r26	; 0x22
    1ff0:	bb a3       	std	Y+35, r27	; 0x23
    1ff2:	23 96       	adiw	r28, 0x03	; 3
    1ff4:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ff6:	9d ad       	ldd	r25, Y+61	; 0x3d
    1ff8:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ffa:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ffc:	23 97       	sbiw	r28, 0x03	; 3
    1ffe:	8c a3       	std	Y+36, r24	; 0x24
    2000:	9d a3       	std	Y+37, r25	; 0x25
    2002:	ae a3       	std	Y+38, r26	; 0x26
    2004:	bf a3       	std	Y+39, r27	; 0x27
    2006:	8b e4       	ldi	r24, 0x4B	; 75
    2008:	92 e0       	ldi	r25, 0x02	; 2
    200a:	9d 8f       	std	Y+29, r25	; 0x1d
    200c:	8c 8f       	std	Y+28, r24	; 0x1c
    200e:	8d e0       	ldi	r24, 0x0D	; 13
    2010:	fe 01       	movw	r30, r28
    2012:	ed 5b       	subi	r30, 0xBD	; 189
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	de 01       	movw	r26, r28
    2018:	98 96       	adiw	r26, 0x28	; 40
    201a:	01 90       	ld	r0, Z+
    201c:	0d 92       	st	X+, r0
    201e:	8a 95       	dec	r24
    2020:	e1 f7       	brne	.-8      	; 0x201a <_Z6recordv+0x8c>
    2022:	62 96       	adiw	r28, 0x12	; 18
    2024:	8e ad       	ldd	r24, Y+62	; 0x3e
    2026:	9f ad       	ldd	r25, Y+63	; 0x3f
    2028:	62 97       	sbiw	r28, 0x12	; 18
    202a:	9e ab       	std	Y+54, r25	; 0x36
    202c:	8d ab       	std	Y+53, r24	; 0x35
		makeWaveFile(test_File);
    202e:	ce 01       	movw	r24, r28
    2030:	4c 96       	adiw	r24, 0x1c	; 28
    2032:	0e 94 01 0a 	call	0x1402	; 0x1402 <_Z12makeWaveFileN5SDLib4FileE>
		uint8_t pot_Read;

		while (true) {
		
		  pot_Read = analog_in(mic) + 64;
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <_Z9analog_ini>
    203e:	10 e4       	ldi	r17, 0x40	; 64
    2040:	18 0f       	add	r17, r24
		
		  char key = keyInput();
    2042:	0e 94 cc 08 	call	0x1198	; 0x1198 <_Z8keyInputv>

		  if (key && key == 's') {
    2046:	83 37       	cpi	r24, 0x73	; 115
    2048:	51 f0       	breq	.+20     	; 0x205e <_Z6recordv+0xd0>
			break;
		  }

		  test_File.write(pot_Read);
    204a:	61 2f       	mov	r22, r17
    204c:	ce 01       	movw	r24, r28
    204e:	c7 96       	adiw	r24, 0x37	; 55
    2050:	0e 94 e5 11 	call	0x23ca	; 0x23ca <_ZN5SDLib4File5writeEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2054:	25 e9       	ldi	r18, 0x95	; 149
    2056:	2a 95       	dec	r18
    2058:	f1 f7       	brne	.-4      	; 0x2056 <_Z6recordv+0xc8>
    205a:	00 00       	nop
    205c:	ec cf       	rjmp	.-40     	; 0x2036 <_Z6recordv+0xa8>
    205e:	89 ad       	ldd	r24, Y+57	; 0x39
    2060:	9a ad       	ldd	r25, Y+58	; 0x3a
    2062:	9c 83       	std	Y+4, r25	; 0x04
    2064:	8b 83       	std	Y+3, r24	; 0x03
    2066:	8b ad       	ldd	r24, Y+59	; 0x3b
    2068:	9c ad       	ldd	r25, Y+60	; 0x3c
    206a:	ad ad       	ldd	r26, Y+61	; 0x3d
    206c:	be ad       	ldd	r27, Y+62	; 0x3e
    206e:	8d 83       	std	Y+5, r24	; 0x05
    2070:	9e 83       	std	Y+6, r25	; 0x06
    2072:	af 83       	std	Y+7, r26	; 0x07
    2074:	b8 87       	std	Y+8, r27	; 0x08
    2076:	23 96       	adiw	r28, 0x03	; 3
    2078:	8c ad       	ldd	r24, Y+60	; 0x3c
    207a:	9d ad       	ldd	r25, Y+61	; 0x3d
    207c:	ae ad       	ldd	r26, Y+62	; 0x3e
    207e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2080:	23 97       	sbiw	r28, 0x03	; 3
    2082:	89 87       	std	Y+9, r24	; 0x09
    2084:	9a 87       	std	Y+10, r25	; 0x0a
    2086:	ab 87       	std	Y+11, r26	; 0x0b
    2088:	bc 87       	std	Y+12, r27	; 0x0c
    208a:	8b e4       	ldi	r24, 0x4B	; 75
    208c:	92 e0       	ldi	r25, 0x02	; 2
    208e:	9a 83       	std	Y+2, r25	; 0x02
    2090:	89 83       	std	Y+1, r24	; 0x01
    2092:	8d e0       	ldi	r24, 0x0D	; 13
    2094:	fe 01       	movw	r30, r28
    2096:	ed 5b       	subi	r30, 0xBD	; 189
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	de 01       	movw	r26, r28
    209c:	1d 96       	adiw	r26, 0x0d	; 13
    209e:	01 90       	ld	r0, Z+
    20a0:	0d 92       	st	X+, r0
    20a2:	8a 95       	dec	r24
    20a4:	e1 f7       	brne	.-8      	; 0x209e <_Z6recordv+0x110>
    20a6:	62 96       	adiw	r28, 0x12	; 18
    20a8:	8e ad       	ldd	r24, Y+62	; 0x3e
    20aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    20ac:	62 97       	sbiw	r28, 0x12	; 18
    20ae:	9b 8f       	std	Y+27, r25	; 0x1b
    20b0:	8a 8f       	std	Y+26, r24	; 0x1a
		  //_delay_us(8);//16kHz
		  _delay_us(28);// 12.5kHz

		}
		finalizeWave(test_File);
    20b2:	ce 01       	movw	r24, r28
    20b4:	01 96       	adiw	r24, 0x01	; 1
    20b6:	0e 94 4d 0a 	call	0x149a	; 0x149a <_Z12finalizeWaveN5SDLib4FileE>
		clrDisplay("Saved");
    20ba:	88 ee       	ldi	r24, 0xE8	; 232
    20bc:	91 e0       	ldi	r25, 0x01	; 1
    20be:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_Z10clrDisplayPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    20c2:	8f ef       	ldi	r24, 0xFF	; 255
    20c4:	93 ed       	ldi	r25, 0xD3	; 211
    20c6:	20 e3       	ldi	r18, 0x30	; 48
    20c8:	81 50       	subi	r24, 0x01	; 1
    20ca:	90 40       	sbci	r25, 0x00	; 0
    20cc:	20 40       	sbci	r18, 0x00	; 0
    20ce:	e1 f7       	brne	.-8      	; 0x20c8 <_Z6recordv+0x13a>
    20d0:	00 c0       	rjmp	.+0      	; 0x20d2 <_Z6recordv+0x144>
    20d2:	00 00       	nop
		_delay_ms(1000);
	  }
	  test_File.close();
    20d4:	ce 01       	movw	r24, r28
    20d6:	c7 96       	adiw	r24, 0x37	; 55
    20d8:	0e 94 4a 13 	call	0x2694	; 0x2694 <_ZN5SDLib4File5closeEv>
}
    20dc:	cf 5a       	subi	r28, 0xAF	; 175
    20de:	df 4f       	sbci	r29, 0xFF	; 255
    20e0:	0f b6       	in	r0, 0x3f	; 63
    20e2:	f8 94       	cli
    20e4:	de bf       	out	0x3e, r29	; 62
    20e6:	0f be       	out	0x3f, r0	; 63
    20e8:	cd bf       	out	0x3d, r28	; 61
    20ea:	df 91       	pop	r29
    20ec:	cf 91       	pop	r28
    20ee:	1f 91       	pop	r17
    20f0:	08 95       	ret

000020f2 <_Z17initialize_Thingsv>:

void initialize_Things()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    20f2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
	sbi(TCCR0A, WGM01);
    20f4:	84 b5       	in	r24, 0x24	; 36
    20f6:	82 60       	ori	r24, 0x02	; 2
    20f8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    20fa:	84 b5       	in	r24, 0x24	; 36
    20fc:	81 60       	ori	r24, 0x01	; 1
    20fe:	84 bd       	out	0x24, r24	; 36
	
	// set timer 0 prescale factor to 64
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2100:	85 b5       	in	r24, 0x25	; 37
    2102:	82 60       	ori	r24, 0x02	; 2
    2104:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2106:	85 b5       	in	r24, 0x25	; 37
    2108:	81 60       	ori	r24, 0x01	; 1
    210a:	85 bd       	out	0x25, r24	; 37
	
	// enable timer 0 overflow interrupt
	sbi(TIMSK0, TOIE0);
    210c:	ee e6       	ldi	r30, 0x6E	; 110
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	81 60       	ori	r24, 0x01	; 1
    2114:	80 83       	st	Z, r24
	
	// timers 1 and 2 are used for phase-correct hardware pwm
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle
	TCCR1B = 0;
    2116:	e1 e8       	ldi	r30, 0x81	; 129
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	10 82       	st	Z, r1
	
	//select no-prescaling
	//sbi(TCCR1B, CS11);
	sbi(TCCR1B, CS10);
    211c:	80 81       	ld	r24, Z
    211e:	81 60       	ori	r24, 0x01	; 1
    2120:	80 83       	st	Z, r24
	
	//select the Wave form generation mode as FAST PWM
	//select the non-inverting mode
	sbi(TCCR1A, WGM10);
    2122:	a0 e8       	ldi	r26, 0x80	; 128
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	8c 91       	ld	r24, X
    2128:	81 60       	ori	r24, 0x01	; 1
    212a:	8c 93       	st	X, r24
	sbi(TCCR1A, COM1A1);
    212c:	8c 91       	ld	r24, X
    212e:	80 68       	ori	r24, 0x80	; 128
    2130:	8c 93       	st	X, r24
	sbi(TCCR1B, WGM12);
    2132:	80 81       	ld	r24, Z
    2134:	88 60       	ori	r24, 0x08	; 8
    2136:	80 83       	st	Z, r24
	
	// set timer 2 prescale factor to 64
	sbi(TCCR2B, CS22);
    2138:	e1 eb       	ldi	r30, 0xB1	; 177
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	84 60       	ori	r24, 0x04	; 4
    2140:	80 83       	st	Z, r24
	
	// configure timer 2 for phase correct pwm (8-bit)
	sbi(TCCR2A, WGM20);
    2142:	e0 eb       	ldi	r30, 0xB0	; 176
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	81 60       	ori	r24, 0x01	; 1
    214a:	80 83       	st	Z, r24
	
	// set a2d prescaler(16) so we are inside the desired 50-200 KHz range.
	sbi(ADCSRA, ADPS2);
    214c:	ea e7       	ldi	r30, 0x7A	; 122
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	84 60       	ori	r24, 0x04	; 4
    2154:	80 83       	st	Z, r24
	//sbi(ADCSRA, ADPS1);
	//sbi(ADCSRA, ADPS0);
	
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2156:	80 81       	ld	r24, Z
    2158:	80 68       	ori	r24, 0x80	; 128
    215a:	80 83       	st	Z, r24
	
	//set the reference voltage as AVCC
	//set the Left adjust result
	//keeping last 3bits as 0, because for the default pin selection as ADC0
	ADMUX = 0b01100000;
    215c:	80 e6       	ldi	r24, 0x60	; 96
    215e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	
	// the bootloader connects pins 0 and 1 to the USART; disconnect them
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
	UCSR0B = 0;
    2162:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    2166:	08 95       	ret

00002168 <main>:


int main(void)
{	
	//This function is from arduino...need to edit
	initialize_Things();
    2168:	0e 94 79 10 	call	0x20f2	; 0x20f2 <_Z17initialize_Thingsv>
	//sei();

	fname_temp[1] = '.';fname_temp[2] = 'W';fname_temp[3] = 'A';fname_temp[4] = 'V';
    216c:	e8 e9       	ldi	r30, 0x98	; 152
    216e:	f2 e0       	ldi	r31, 0x02	; 2
    2170:	8e e2       	ldi	r24, 0x2E	; 46
    2172:	81 83       	std	Z+1, r24	; 0x01
    2174:	87 e5       	ldi	r24, 0x57	; 87
    2176:	82 83       	std	Z+2, r24	; 0x02
    2178:	81 e4       	ldi	r24, 0x41	; 65
    217a:	83 83       	std	Z+3, r24	; 0x03
    217c:	86 e5       	ldi	r24, 0x56	; 86
    217e:	84 83       	std	Z+4, r24	; 0x04

	//PORTD FOR KEYS
	DDRD = 0b00000000;
    2180:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0b11111111;
    2182:	8f ef       	ldi	r24, 0xFF	; 255
    2184:	8b b9       	out	0x0b, r24	; 11
	
	//CONFIGURING PINS FOR ANALOG INPUT
	DDRC &= 0b11111110;	
    2186:	87 b1       	in	r24, 0x07	; 7
    2188:	8e 7f       	andi	r24, 0xFE	; 254
    218a:	87 b9       	out	0x07, r24	; 7
	
	//CONFIGURING SPEAKER FOR OUTPUT
	DDRB |= (1<<DDB1);
    218c:	84 b1       	in	r24, 0x04	; 4
    218e:	82 60       	ori	r24, 0x02	; 2
    2190:	84 b9       	out	0x04, r24	; 4
	OCR1A = 0;
    2192:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    2196:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
   *
   * @param[in] dev A device initialization structure.
   * @param[in] i2cAddr The I2C address of the display controller.
   */
  void begin(const DevType* dev, uint8_t i2cAddr) {
    m_nData = 0;
    219a:	e3 e8       	ldi	r30, 0x83	; 131
    219c:	f2 e0       	ldi	r31, 0x02	; 2
    219e:	14 8a       	std	Z+20, r1	; 0x14
    m_i2cAddr = i2cAddr;
    21a0:	8c e3       	ldi	r24, 0x3C	; 60
    21a2:	83 8b       	std	Z+19, r24	; 0x13
   * @brief Initialize prescalar and SLC clock rate.
   * @param[in] fastMode Fast 400 kHz mode if true else standard 100 kHz mode.
   */
  bool begin(bool fastMode = true) {
    // Zero prescaler.
    TWSR = 0;
    21a4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    // Enable module and acks.
    TWCR = (1 << TWEN) | (1 << TWEA);
    21a8:	84 e4       	ldi	r24, 0x44	; 68
    21aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  bool setClock(uint32_t clock) {
    if (clock < MIN_SCL_CLOCK || clock > MAX_SCL_CLOCK) {
      AVR_I2C_FAIL_MACRO;
      return false;
    }
    TWBR = ((F_CPU / clock) - 16) / 2;
    21ae:	8c e0       	ldi	r24, 0x0C	; 12
    21b0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>

    m_i2c.begin(AVRI2C_FASTMODE);
    init(dev);
    21b4:	64 ec       	ldi	r22, 0xC4	; 196
    21b6:	7c e0       	ldi	r23, 0x0C	; 12
    21b8:	cf 01       	movw	r24, r30
    21ba:	0e 94 84 29 	call	0x5308	; 0x5308 <_ZN12SSD1306Ascii4initEPK7DevType>
  oled.begin(&Adafruit128x32, I2C_ADDRESS);
 // oled.displayRemap(true);
	
	
	//INITIALIZING THE SD CARD
	if (!SD.begin(sdcard))
    21be:	6a e0       	ldi	r22, 0x0A	; 10
    21c0:	80 eb       	ldi	r24, 0xB0	; 176
    21c2:	92 e0       	ldi	r25, 0x02	; 2
    21c4:	0e 94 8a 14 	call	0x2914	; 0x2914 <_ZN5SDLib7SDClass5beginEh>
    21c8:	81 11       	cpse	r24, r1
    21ca:	05 c0       	rjmp	.+10     	; 0x21d6 <main+0x6e>
	{
		clrDisplay("Error");
    21cc:	8c ec       	ldi	r24, 0xCC	; 204
    21ce:	91 e0       	ldi	r25, 0x01	; 1
    21d0:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_Z10clrDisplayPKc>
    21d4:	ff cf       	rjmp	.-2      	; 0x21d4 <main+0x6c>
		while (1);
	}
	
	getTrackList();
    21d6:	0e 94 23 09 	call	0x1246	; 0x1246 <_Z12getTrackListv>
    21da:	2f ef       	ldi	r18, 0xFF	; 255
    21dc:	83 ed       	ldi	r24, 0xD3	; 211
    21de:	90 e3       	ldi	r25, 0x30	; 48
    21e0:	21 50       	subi	r18, 0x01	; 1
    21e2:	80 40       	sbci	r24, 0x00	; 0
    21e4:	90 40       	sbci	r25, 0x00	; 0
    21e6:	e1 f7       	brne	.-8      	; 0x21e0 <main+0x78>
    21e8:	00 c0       	rjmp	.+0      	; 0x21ea <main+0x82>
    21ea:	00 00       	nop

    while (1) 
    {
		
		  //>-------------------------------< RECORD MODE (LEVEL 1)>--------------------------------<
		  if (mode == 's' && mode_ == 'j')
    21ec:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <mode>
    21f0:	83 37       	cpi	r24, 0x73	; 115
    21f2:	59 f4       	brne	.+22     	; 0x220a <main+0xa2>
    21f4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode_>
    21f8:	8a 36       	cpi	r24, 0x6A	; 106
    21fa:	39 f4       	brne	.+14     	; 0x220a <main+0xa2>
		  {
			record();
    21fc:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <_Z6recordv>
			getTrackList();
    2200:	0e 94 23 09 	call	0x1246	; 0x1246 <_Z12getTrackListv>
			mode = 'i';
    2204:	89 e6       	ldi	r24, 0x69	; 105
    2206:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <mode>
		  }

		  //>--------------------------< ENTERING PLAYER MODE (LEVEL 1)>----------------------------<

		  if (mode == 'p' && mode_ == 'j')
    220a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <mode>
    220e:	80 37       	cpi	r24, 0x70	; 112
    2210:	c1 f5       	brne	.+112    	; 0x2282 <main+0x11a>
    2212:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode_>
    2216:	8a 36       	cpi	r24, 0x6A	; 106
    2218:	a1 f5       	brne	.+104    	; 0x2282 <main+0x11a>
		  {
			mode_ = 'k';
    221a:	8b e6       	ldi	r24, 0x6B	; 107
    221c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mode_>
			mode = 'i';
    2220:	89 e6       	ldi	r24, 0x69	; 105
    2222:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <mode>
			  Press 'Play/Stop' when a track is loaded to the player
			  Press 'Play/Stop' to stop playing
			  Press 'next' or 'previous' to toggle between tracks
			  Press 'record/stop' in track loaded mode to exit player mode
			*/
			if (files == 0)
    2226:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <files>
    222a:	81 11       	cpse	r24, r1
    222c:	11 c0       	rjmp	.+34     	; 0x2250 <main+0xe8>
			{
			  mode_ = 'j';
    222e:	8a e6       	ldi	r24, 0x6A	; 106
    2230:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mode_>
			  clrDisplay("No Tracks");
    2234:	8e ee       	ldi	r24, 0xEE	; 238
    2236:	91 e0       	ldi	r25, 0x01	; 1
    2238:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_Z10clrDisplayPKc>
    223c:	2f ef       	ldi	r18, 0xFF	; 255
    223e:	83 ed       	ldi	r24, 0xD3	; 211
    2240:	90 e3       	ldi	r25, 0x30	; 48
    2242:	21 50       	subi	r18, 0x01	; 1
    2244:	80 40       	sbci	r24, 0x00	; 0
    2246:	90 40       	sbci	r25, 0x00	; 0
    2248:	e1 f7       	brne	.-8      	; 0x2242 <main+0xda>
    224a:	00 c0       	rjmp	.+0      	; 0x224c <main+0xe4>
    224c:	00 00       	nop
    224e:	19 c0       	rjmp	.+50     	; 0x2282 <main+0x11a>
			  _delay_ms(1000);
			}
			else
			{
				clrDisplay("Ready to Play");
    2250:	88 ef       	ldi	r24, 0xF8	; 248
    2252:	91 e0       	ldi	r25, 0x01	; 1
    2254:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_Z10clrDisplayPKc>
    2258:	2f ef       	ldi	r18, 0xFF	; 255
    225a:	83 ed       	ldi	r24, 0xD3	; 211
    225c:	90 e3       	ldi	r25, 0x30	; 48
    225e:	21 50       	subi	r18, 0x01	; 1
    2260:	80 40       	sbci	r24, 0x00	; 0
    2262:	90 40       	sbci	r25, 0x00	; 0
    2264:	e1 f7       	brne	.-8      	; 0x225e <main+0xf6>
    2266:	00 c0       	rjmp	.+0      	; 0x2268 <main+0x100>
    2268:	00 00       	nop
			  
			  _delay_ms(1000);
			  
			  fname_temp[0] = tracks[fcount];
    226a:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <fcount>
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	ef 55       	subi	r30, 0x5F	; 95
    2272:	fd 4f       	sbci	r31, 0xFD	; 253
    2274:	80 81       	ld	r24, Z
    2276:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <fname_temp>
			  secondLine(fname_temp);
    227a:	88 e9       	ldi	r24, 0x98	; 152
    227c:	92 e0       	ldi	r25, 0x02	; 2
    227e:	0e 94 12 09 	call	0x1224	; 0x1224 <_Z10secondLinePKc>
			}
		  }
		  //>--------------------------< PLAYER MODE (LEVEL 2)>------------------------------------<
		  if (mode_ == 'k')
    2282:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode_>
    2286:	8b 36       	cpi	r24, 0x6B	; 107
    2288:	09 f0       	breq	.+2      	; 0x228c <main+0x124>
    228a:	83 c0       	rjmp	.+262    	; 0x2392 <main+0x22a>
		  {
			  while (1)
			  {
				  char key_input = keyInput();
    228c:	0e 94 cc 08 	call	0x1198	; 0x1198 <_Z8keyInputv>
				  if (key_input)
    2290:	88 23       	and	r24, r24
    2292:	e1 f3       	breq	.-8      	; 0x228c <main+0x124>
				  {
					  mode = key_input;
    2294:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <mode>
					  break;
				  }
			  }
			if (mode == 'p')
    2298:	80 37       	cpi	r24, 0x70	; 112
    229a:	39 f4       	brne	.+14     	; 0x22aa <main+0x142>
			{
			  //Play the track
			  playTrack();
    229c:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <_Z9playTrackv>
			  
			  clrDisplay("Ready to Play");
    22a0:	88 ef       	ldi	r24, 0xF8	; 248
    22a2:	91 e0       	ldi	r25, 0x01	; 1
    22a4:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_Z10clrDisplayPKc>
    22a8:	6d c0       	rjmp	.+218    	; 0x2384 <main+0x21c>

			}
			else if (mode == '>')
    22aa:	8e 33       	cpi	r24, 0x3E	; 62
    22ac:	19 f4       	brne	.+6      	; 0x22b4 <main+0x14c>
			{
			  //Load the next track
			  nextTrack();
    22ae:	0e 94 56 09 	call	0x12ac	; 0x12ac <_Z9nextTrackv>
    22b2:	68 c0       	rjmp	.+208    	; 0x2384 <main+0x21c>
			}
			else if (mode == '<')
    22b4:	8c 33       	cpi	r24, 0x3C	; 60
    22b6:	19 f4       	brne	.+6      	; 0x22be <main+0x156>
			{
			  //load the previous track
			  previousTrack();
    22b8:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <_Z13previousTrackv>
    22bc:	63 c0       	rjmp	.+198    	; 0x2384 <main+0x21c>
			}
			else if (mode == 's')
    22be:	83 37       	cpi	r24, 0x73	; 115
    22c0:	39 f4       	brne	.+14     	; 0x22d0 <main+0x168>
			{
			  //Exit from player mode
			  mode_ = 'j';
    22c2:	8a e6       	ldi	r24, 0x6A	; 106
    22c4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mode_>
			  mode = 'i';
    22c8:	89 e6       	ldi	r24, 0x69	; 105
    22ca:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <mode>
    22ce:	5a c0       	rjmp	.+180    	; 0x2384 <main+0x21c>
			}
			else if (mode == 'd')
    22d0:	84 36       	cpi	r24, 0x64	; 100
    22d2:	09 f0       	breq	.+2      	; 0x22d6 <main+0x16e>
    22d4:	57 c0       	rjmp	.+174    	; 0x2384 <main+0x21c>
			{
						  //This mode deletes the track loaded in payer
						  clrDisplay("Delete?");
    22d6:	86 e0       	ldi	r24, 0x06	; 6
    22d8:	92 e0       	ldi	r25, 0x02	; 2
    22da:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_Z10clrDisplayPKc>
						  secondLine("DELETE NO(Play)");
    22de:	8e e0       	ldi	r24, 0x0E	; 14
    22e0:	92 e0       	ldi	r25, 0x02	; 2
    22e2:	0e 94 12 09 	call	0x1224	; 0x1224 <_Z10secondLinePKc>
						  while (true)
						  {
							  char key = keyInput();
    22e6:	0e 94 cc 08 	call	0x1198	; 0x1198 <_Z8keyInputv>
							  if (key && key == 'd')
    22ea:	84 36       	cpi	r24, 0x64	; 100
    22ec:	d9 f4       	brne	.+54     	; 0x2324 <main+0x1bc>
							  {
								  deleteTrack();
    22ee:	0e 94 95 09 	call	0x132a	; 0x132a <_Z11deleteTrackv>
								  clrDisplay("Deleted");
    22f2:	82 e2       	ldi	r24, 0x22	; 34
    22f4:	92 e0       	ldi	r25, 0x02	; 2
    22f6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_Z10clrDisplayPKc>
								  getTrackList();
    22fa:	0e 94 23 09 	call	0x1246	; 0x1246 <_Z12getTrackListv>
								  
								  if(fcount == files){
    22fe:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <fcount>
    2302:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <files>
    2306:	89 13       	cpse	r24, r25
    2308:	03 c0       	rjmp	.+6      	; 0x2310 <main+0x1a8>
									  fcount--;
    230a:	81 50       	subi	r24, 0x01	; 1
    230c:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <fcount>
    2310:	2f ef       	ldi	r18, 0xFF	; 255
    2312:	83 ed       	ldi	r24, 0xD3	; 211
    2314:	90 e3       	ldi	r25, 0x30	; 48
    2316:	21 50       	subi	r18, 0x01	; 1
    2318:	80 40       	sbci	r24, 0x00	; 0
    231a:	90 40       	sbci	r25, 0x00	; 0
    231c:	e1 f7       	brne	.-8      	; 0x2316 <main+0x1ae>
    231e:	00 c0       	rjmp	.+0      	; 0x2320 <main+0x1b8>
    2320:	00 00       	nop
    2322:	0f c0       	rjmp	.+30     	; 0x2342 <main+0x1da>
								  }
								  
								  _delay_ms(1000);
								  break;
							  }
							  else if (key=='p')
    2324:	80 37       	cpi	r24, 0x70	; 112
    2326:	f9 f6       	brne	.-66     	; 0x22e6 <main+0x17e>
							  {
								  clrDisplay("Not Deleted");
    2328:	8e e1       	ldi	r24, 0x1E	; 30
    232a:	92 e0       	ldi	r25, 0x02	; 2
    232c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_Z10clrDisplayPKc>
    2330:	2f ef       	ldi	r18, 0xFF	; 255
    2332:	83 ed       	ldi	r24, 0xD3	; 211
    2334:	90 e3       	ldi	r25, 0x30	; 48
    2336:	21 50       	subi	r18, 0x01	; 1
    2338:	80 40       	sbci	r24, 0x00	; 0
    233a:	90 40       	sbci	r25, 0x00	; 0
    233c:	e1 f7       	brne	.-8      	; 0x2336 <main+0x1ce>
    233e:	00 c0       	rjmp	.+0      	; 0x2340 <main+0x1d8>
    2340:	00 00       	nop
								  _delay_ms(1000);
								  break;
							  }
						  }

						  if (files == 0)
    2342:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <files>
    2346:	81 11       	cpse	r24, r1
    2348:	11 c0       	rjmp	.+34     	; 0x236c <main+0x204>
						  {
							  clrDisplay("No Tracks");
    234a:	8e ee       	ldi	r24, 0xEE	; 238
    234c:	91 e0       	ldi	r25, 0x01	; 1
    234e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_Z10clrDisplayPKc>
    2352:	2f ef       	ldi	r18, 0xFF	; 255
    2354:	83 ed       	ldi	r24, 0xD3	; 211
    2356:	90 e3       	ldi	r25, 0x30	; 48
    2358:	21 50       	subi	r18, 0x01	; 1
    235a:	80 40       	sbci	r24, 0x00	; 0
    235c:	90 40       	sbci	r25, 0x00	; 0
    235e:	e1 f7       	brne	.-8      	; 0x2358 <main+0x1f0>
    2360:	00 c0       	rjmp	.+0      	; 0x2362 <main+0x1fa>
    2362:	00 00       	nop
							  _delay_ms(1000);
							  mode_ = 'j';
    2364:	8a e6       	ldi	r24, 0x6A	; 106
    2366:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mode_>
    236a:	0c c0       	rjmp	.+24     	; 0x2384 <main+0x21c>
						  }
						  else{
							  clrDisplay("Ready to Play");
    236c:	88 ef       	ldi	r24, 0xF8	; 248
    236e:	91 e0       	ldi	r25, 0x01	; 1
    2370:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_Z10clrDisplayPKc>

							  fname_temp[0] = tracks[fcount];
    2374:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <fcount>
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	ef 55       	subi	r30, 0x5F	; 95
    237c:	fd 4f       	sbci	r31, 0xFD	; 253
    237e:	80 81       	ld	r24, Z
    2380:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <fname_temp>
						  }
			}
			secondLine(fname_temp);
    2384:	88 e9       	ldi	r24, 0x98	; 152
    2386:	92 e0       	ldi	r25, 0x02	; 2
    2388:	0e 94 12 09 	call	0x1224	; 0x1224 <_Z10secondLinePKc>
			mode = 'i';
    238c:	89 e6       	ldi	r24, 0x69	; 105
    238e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <mode>
		  }
		  //>-------------------------< PAUSE MODE (LEVEL 1)>--------------------------------------<
		  if (mode == 'i' && mode_ == 'j')
    2392:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <mode>
    2396:	89 36       	cpi	r24, 0x69	; 105
    2398:	09 f0       	breq	.+2      	; 0x239c <main+0x234>
    239a:	28 cf       	rjmp	.-432    	; 0x21ec <main+0x84>
    239c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode_>
    23a0:	8a 36       	cpi	r24, 0x6A	; 106
    23a2:	09 f0       	breq	.+2      	; 0x23a6 <main+0x23e>
    23a4:	23 cf       	rjmp	.-442    	; 0x21ec <main+0x84>
		  {
			clrDisplay("Voice Recorder");
    23a6:	8a e2       	ldi	r24, 0x2A	; 42
    23a8:	92 e0       	ldi	r25, 0x02	; 2
    23aa:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_Z10clrDisplayPKc>
			while (1)
			{
				char key_input = keyInput();
    23ae:	0e 94 cc 08 	call	0x1198	; 0x1198 <_Z8keyInputv>
				if (key_input)
    23b2:	88 23       	and	r24, r24
    23b4:	e1 f3       	breq	.-8      	; 0x23ae <main+0x246>
				{
					mode = key_input;
    23b6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <mode>
    23ba:	18 cf       	rjmp	.-464    	; 0x21ec <main+0x84>

000023bc <_GLOBAL__sub_I_mode>:
	
	// the bootloader connects pins 0 and 1 to the USART; disconnect them
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
	UCSR0B = 0;
}
    23bc:	6f ef       	ldi	r22, 0xFF	; 255
    23be:	7f ef       	ldi	r23, 0xFF	; 255
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	0e 94 b7 08 	call	0x116e	; 0x116e <_Z41__static_initialization_and_destruction_0ii>
    23c8:	08 95       	ret

000023ca <_ZN5SDLib4File5writeEh>:
}

// a directory is a special type of file
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}
    23ca:	cf 93       	push	r28
    23cc:	df 93       	push	r29
    23ce:	1f 92       	push	r1
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	69 83       	std	Y+1, r22	; 0x01
    23d6:	dc 01       	movw	r26, r24
    23d8:	ed 91       	ld	r30, X+
    23da:	fc 91       	ld	r31, X
    23dc:	02 80       	ldd	r0, Z+2	; 0x02
    23de:	f3 81       	ldd	r31, Z+3	; 0x03
    23e0:	e0 2d       	mov	r30, r0
    23e2:	41 e0       	ldi	r20, 0x01	; 1
    23e4:	50 e0       	ldi	r21, 0x00	; 0
    23e6:	be 01       	movw	r22, r28
    23e8:	6f 5f       	subi	r22, 0xFF	; 255
    23ea:	7f 4f       	sbci	r23, 0xFF	; 255
    23ec:	09 95       	icall
    23ee:	0f 90       	pop	r0
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	08 95       	ret

000023f6 <_ZN5SDLib4File17availableForWriteEv>:
    23f6:	dc 01       	movw	r26, r24
    23f8:	59 96       	adiw	r26, 0x19	; 25
    23fa:	8d 91       	ld	r24, X+
    23fc:	9c 91       	ld	r25, X
    23fe:	5a 97       	sbiw	r26, 0x1a	; 26
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	41 f0       	breq	.+16     	; 0x2414 <_ZN5SDLib4File17availableForWriteEv+0x1e>
    2404:	dc 01       	movw	r26, r24
    2406:	ed 91       	ld	r30, X+
    2408:	fc 91       	ld	r31, X
    240a:	04 80       	ldd	r0, Z+4	; 0x04
    240c:	f5 81       	ldd	r31, Z+5	; 0x05
    240e:	e0 2d       	mov	r30, r0
    2410:	09 95       	icall
    2412:	08 95       	ret
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	08 95       	ret

0000241a <_ZN5SDLib4File5writeEPKhj>:
    241a:	cf 93       	push	r28
    241c:	df 93       	push	r29
    241e:	dc 01       	movw	r26, r24
    2420:	59 96       	adiw	r26, 0x19	; 25
    2422:	ed 91       	ld	r30, X+
    2424:	fc 91       	ld	r31, X
    2426:	5a 97       	sbiw	r26, 0x1a	; 26
    2428:	30 97       	sbiw	r30, 0x00	; 0
    242a:	49 f4       	brne	.+18     	; 0x243e <_ZN5SDLib4File5writeEPKhj+0x24>
    242c:	21 e0       	ldi	r18, 0x01	; 1
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	13 96       	adiw	r26, 0x03	; 3
    2432:	3c 93       	st	X, r19
    2434:	2e 93       	st	-X, r18
    2436:	12 97       	sbiw	r26, 0x02	; 2
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	13 c0       	rjmp	.+38     	; 0x2464 <_ZN5SDLib4File5writeEPKhj+0x4a>
    243e:	ec 01       	movw	r28, r24
    2440:	13 82       	std	Z+3, r1	; 0x03
    2442:	12 82       	std	Z+2, r1	; 0x02
    2444:	89 8d       	ldd	r24, Y+25	; 0x19
    2446:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2448:	0e 94 3a 21 	call	0x4274	; 0x4274 <_ZN6SdFile5writeEPKvj>
    244c:	e9 8d       	ldd	r30, Y+25	; 0x19
    244e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2450:	22 81       	ldd	r18, Z+2	; 0x02
    2452:	33 81       	ldd	r19, Z+3	; 0x03
    2454:	23 2b       	or	r18, r19
    2456:	31 f0       	breq	.+12     	; 0x2464 <_ZN5SDLib4File5writeEPKhj+0x4a>
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	9b 83       	std	Y+3, r25	; 0x03
    245e:	8a 83       	std	Y+2, r24	; 0x02
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	df 91       	pop	r29
    2466:	cf 91       	pop	r28
    2468:	08 95       	ret

0000246a <_ZN5SDLib4File4readEv>:
    246a:	cf 93       	push	r28
    246c:	df 93       	push	r29
    246e:	1f 92       	push	r1
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	fc 01       	movw	r30, r24
    2476:	81 8d       	ldd	r24, Z+25	; 0x19
    2478:	92 8d       	ldd	r25, Z+26	; 0x1a
    247a:	00 97       	sbiw	r24, 0x00	; 0
    247c:	79 f0       	breq	.+30     	; 0x249c <_ZN5SDLib4File4readEv+0x32>
    247e:	41 e0       	ldi	r20, 0x01	; 1
    2480:	50 e0       	ldi	r21, 0x00	; 0
    2482:	be 01       	movw	r22, r28
    2484:	6f 5f       	subi	r22, 0xFF	; 255
    2486:	7f 4f       	sbci	r23, 0xFF	; 255
    2488:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_ZN6SdFile4readEPvj>
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	19 f4       	brne	.+6      	; 0x2496 <_ZN5SDLib4File4readEv+0x2c>
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	05 c0       	rjmp	.+10     	; 0x24a0 <_ZN5SDLib4File4readEv+0x36>
    2496:	8f ef       	ldi	r24, 0xFF	; 255
    2498:	9f ef       	ldi	r25, 0xFF	; 255
    249a:	02 c0       	rjmp	.+4      	; 0x24a0 <_ZN5SDLib4File4readEv+0x36>
    249c:	8f ef       	ldi	r24, 0xFF	; 255
    249e:	9f ef       	ldi	r25, 0xFF	; 255
    24a0:	0f 90       	pop	r0
    24a2:	df 91       	pop	r29
    24a4:	cf 91       	pop	r28
    24a6:	08 95       	ret

000024a8 <_ZN5SDLib4File4peekEv>:
    24a8:	ef 92       	push	r14
    24aa:	ff 92       	push	r15
    24ac:	0f 93       	push	r16
    24ae:	1f 93       	push	r17
    24b0:	cf 93       	push	r28
    24b2:	df 93       	push	r29
    24b4:	1f 92       	push	r1
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	fc 01       	movw	r30, r24
    24bc:	81 8d       	ldd	r24, Z+25	; 0x19
    24be:	92 8d       	ldd	r25, Z+26	; 0x1a
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	19 f1       	breq	.+70     	; 0x250a <_ZN5SDLib4File4peekEv+0x62>
    24c4:	8f 01       	movw	r16, r30
    24c6:	41 e0       	ldi	r20, 0x01	; 1
    24c8:	50 e0       	ldi	r21, 0x00	; 0
    24ca:	be 01       	movw	r22, r28
    24cc:	6f 5f       	subi	r22, 0xFF	; 255
    24ce:	7f 4f       	sbci	r23, 0xFF	; 255
    24d0:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_ZN6SdFile4readEPvj>
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	19 f4       	brne	.+6      	; 0x24de <_ZN5SDLib4File4peekEv+0x36>
    24d8:	e9 80       	ldd	r14, Y+1	; 0x01
    24da:	f1 2c       	mov	r15, r1
    24dc:	03 c0       	rjmp	.+6      	; 0x24e4 <_ZN5SDLib4File4peekEv+0x3c>
    24de:	ee 24       	eor	r14, r14
    24e0:	ea 94       	dec	r14
    24e2:	fe 2c       	mov	r15, r14
    24e4:	8f ef       	ldi	r24, 0xFF	; 255
    24e6:	e8 16       	cp	r14, r24
    24e8:	f8 06       	cpc	r15, r24
    24ea:	89 f0       	breq	.+34     	; 0x250e <_ZN5SDLib4File4peekEv+0x66>
    24ec:	f8 01       	movw	r30, r16
    24ee:	81 8d       	ldd	r24, Z+25	; 0x19
    24f0:	92 8d       	ldd	r25, Z+26	; 0x1a
    24f2:	fc 01       	movw	r30, r24
    24f4:	42 85       	ldd	r20, Z+10	; 0x0a
    24f6:	53 85       	ldd	r21, Z+11	; 0x0b
    24f8:	64 85       	ldd	r22, Z+12	; 0x0c
    24fa:	75 85       	ldd	r23, Z+13	; 0x0d
    24fc:	41 50       	subi	r20, 0x01	; 1
    24fe:	51 09       	sbc	r21, r1
    2500:	61 09       	sbc	r22, r1
    2502:	71 09       	sbc	r23, r1
    2504:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <_ZN6SdFile7seekSetEm>
    2508:	02 c0       	rjmp	.+4      	; 0x250e <_ZN5SDLib4File4peekEv+0x66>
    250a:	e1 2c       	mov	r14, r1
    250c:	f1 2c       	mov	r15, r1
    250e:	c7 01       	movw	r24, r14
    2510:	0f 90       	pop	r0
    2512:	df 91       	pop	r29
    2514:	cf 91       	pop	r28
    2516:	1f 91       	pop	r17
    2518:	0f 91       	pop	r16
    251a:	ff 90       	pop	r15
    251c:	ef 90       	pop	r14
    251e:	08 95       	ret

00002520 <_ZN5SDLib4File5flushEv>:
    2520:	fc 01       	movw	r30, r24
    2522:	81 8d       	ldd	r24, Z+25	; 0x19
    2524:	92 8d       	ldd	r25, Z+26	; 0x1a
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	19 f0       	breq	.+6      	; 0x2530 <_ZN5SDLib4File5flushEv+0x10>
    252a:	61 e0       	ldi	r22, 0x01	; 1
    252c:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <_ZN6SdFile4syncEh>
    2530:	08 95       	ret

00002532 <_ZN5SDLib4FileC1E6SdFilePKc>:
    2532:	ef 92       	push	r14
    2534:	ff 92       	push	r15
    2536:	0f 93       	push	r16
    2538:	1f 93       	push	r17
    253a:	cf 93       	push	r28
    253c:	df 93       	push	r29
    253e:	ec 01       	movw	r28, r24
    2540:	7b 01       	movw	r14, r22
    2542:	8a 01       	movw	r16, r20
    2544:	1b 82       	std	Y+3, r1	; 0x03
    2546:	1a 82       	std	Y+2, r1	; 0x02
    2548:	88 ee       	ldi	r24, 0xE8	; 232
    254a:	93 e0       	ldi	r25, 0x03	; 3
    254c:	a0 e0       	ldi	r26, 0x00	; 0
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	8c 83       	std	Y+4, r24	; 0x04
    2552:	9d 83       	std	Y+5, r25	; 0x05
    2554:	ae 83       	std	Y+6, r26	; 0x06
    2556:	bf 83       	std	Y+7, r27	; 0x07
    2558:	8b e4       	ldi	r24, 0x4B	; 75
    255a:	92 e0       	ldi	r25, 0x02	; 2
    255c:	99 83       	std	Y+1, r25	; 0x01
    255e:	88 83       	st	Y, r24
    2560:	8d e1       	ldi	r24, 0x1D	; 29
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	0e 94 09 30 	call	0x6012	; 0x6012 <malloc>
    2568:	9a 8f       	std	Y+26, r25	; 0x1a
    256a:	89 8f       	std	Y+25, r24	; 0x19
    256c:	00 97       	sbiw	r24, 0x00	; 0
    256e:	79 f0       	breq	.+30     	; 0x258e <_ZN5SDLib4FileC1E6SdFilePKc+0x5c>
    2570:	2d e1       	ldi	r18, 0x1D	; 29
    2572:	f7 01       	movw	r30, r14
    2574:	dc 01       	movw	r26, r24
    2576:	01 90       	ld	r0, Z+
    2578:	0d 92       	st	X+, r0
    257a:	2a 95       	dec	r18
    257c:	e1 f7       	brne	.-8      	; 0x2576 <_ZN5SDLib4FileC1E6SdFilePKc+0x44>
    257e:	4c e0       	ldi	r20, 0x0C	; 12
    2580:	50 e0       	ldi	r21, 0x00	; 0
    2582:	b8 01       	movw	r22, r16
    2584:	ce 01       	movw	r24, r28
    2586:	0c 96       	adiw	r24, 0x0c	; 12
    2588:	0e 94 47 31 	call	0x628e	; 0x628e <strncpy>
    258c:	18 8e       	std	Y+24, r1	; 0x18
    258e:	df 91       	pop	r29
    2590:	cf 91       	pop	r28
    2592:	1f 91       	pop	r17
    2594:	0f 91       	pop	r16
    2596:	ff 90       	pop	r15
    2598:	ef 90       	pop	r14
    259a:	08 95       	ret

0000259c <_ZN5SDLib4FileC1Ev>:
    259c:	fc 01       	movw	r30, r24
    259e:	13 82       	std	Z+3, r1	; 0x03
    25a0:	12 82       	std	Z+2, r1	; 0x02
    25a2:	88 ee       	ldi	r24, 0xE8	; 232
    25a4:	93 e0       	ldi	r25, 0x03	; 3
    25a6:	a0 e0       	ldi	r26, 0x00	; 0
    25a8:	b0 e0       	ldi	r27, 0x00	; 0
    25aa:	84 83       	std	Z+4, r24	; 0x04
    25ac:	95 83       	std	Z+5, r25	; 0x05
    25ae:	a6 83       	std	Z+6, r26	; 0x06
    25b0:	b7 83       	std	Z+7, r27	; 0x07
    25b2:	8b e4       	ldi	r24, 0x4B	; 75
    25b4:	92 e0       	ldi	r25, 0x02	; 2
    25b6:	91 83       	std	Z+1, r25	; 0x01
    25b8:	80 83       	st	Z, r24
    25ba:	12 8e       	std	Z+26, r1	; 0x1a
    25bc:	11 8e       	std	Z+25, r1	; 0x19
    25be:	14 86       	std	Z+12, r1	; 0x0c
    25c0:	08 95       	ret

000025c2 <_ZN5SDLib4File4readEPvj>:
  return -1;
}

// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
  if (_file) {
    25c2:	fc 01       	movw	r30, r24
    25c4:	81 8d       	ldd	r24, Z+25	; 0x19
    25c6:	92 8d       	ldd	r25, Z+26	; 0x1a
    25c8:	00 97       	sbiw	r24, 0x00	; 0
    25ca:	19 f0       	breq	.+6      	; 0x25d2 <_ZN5SDLib4File4readEPvj+0x10>
    return _file->read(buf, nbyte);
    25cc:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_ZN6SdFile4readEPvj>
    25d0:	08 95       	ret
  }
  return 0;
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	90 e0       	ldi	r25, 0x00	; 0
}
    25d6:	08 95       	ret

000025d8 <_ZN5SDLib4File4seekEm>:
    _file->sync();
  }
}

boolean File::seek(uint32_t pos) {
  if (! _file) {
    25d8:	fc 01       	movw	r30, r24
    25da:	81 8d       	ldd	r24, Z+25	; 0x19
    25dc:	92 8d       	ldd	r25, Z+26	; 0x1a
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	39 f0       	breq	.+14     	; 0x25f0 <_ZN5SDLib4File4seekEm+0x18>
    return false;
  }

  return _file->seekSet(pos);
    25e2:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <_ZN6SdFile7seekSetEm>
    25e6:	91 e0       	ldi	r25, 0x01	; 1
    25e8:	81 11       	cpse	r24, r1
    25ea:	03 c0       	rjmp	.+6      	; 0x25f2 <_ZN5SDLib4File4seekEm+0x1a>
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	01 c0       	rjmp	.+2      	; 0x25f2 <_ZN5SDLib4File4seekEm+0x1a>
  }
}

boolean File::seek(uint32_t pos) {
  if (! _file) {
    return false;
    25f0:	90 e0       	ldi	r25, 0x00	; 0
  }

  return _file->seekSet(pos);
}
    25f2:	89 2f       	mov	r24, r25
    25f4:	08 95       	ret

000025f6 <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) {
    25f6:	dc 01       	movw	r26, r24
    25f8:	59 96       	adiw	r26, 0x19	; 25
    25fa:	ed 91       	ld	r30, X+
    25fc:	fc 91       	ld	r31, X
    25fe:	5a 97       	sbiw	r26, 0x1a	; 26
    2600:	30 97       	sbiw	r30, 0x00	; 0
    2602:	29 f0       	breq	.+10     	; 0x260e <_ZN5SDLib4File8positionEv+0x18>
    uint32_t curCluster(void) const {
      return curCluster_;
    }
    /** \return The current position for a file or directory. */
    uint32_t curPosition(void) const {
      return curPosition_;
    2604:	62 85       	ldd	r22, Z+10	; 0x0a
    2606:	73 85       	ldd	r23, Z+11	; 0x0b
    2608:	84 85       	ldd	r24, Z+12	; 0x0c
    260a:	95 85       	ldd	r25, Z+13	; 0x0d
    return -1;
  }
  return _file->curPosition();
    260c:	08 95       	ret
  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) {
    return -1;
    260e:	6f ef       	ldi	r22, 0xFF	; 255
    2610:	7f ef       	ldi	r23, 0xFF	; 255
    2612:	cb 01       	movw	r24, r22
  }
  return _file->curPosition();
}
    2614:	08 95       	ret

00002616 <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) {
    2616:	dc 01       	movw	r26, r24
    2618:	59 96       	adiw	r26, 0x19	; 25
    261a:	ed 91       	ld	r30, X+
    261c:	fc 91       	ld	r31, X
    261e:	5a 97       	sbiw	r26, 0x1a	; 26
    2620:	30 97       	sbiw	r30, 0x00	; 0
    2622:	29 f0       	breq	.+10     	; 0x262e <_ZN5SDLib4File4sizeEv+0x18>
      return dirIndex_;
    }
    static void dirName(const dir_t& dir, char* name);
    /** \return The total number of bytes in a file or directory. */
    uint32_t fileSize(void) const {
      return fileSize_;
    2624:	63 89       	ldd	r22, Z+19	; 0x13
    2626:	74 89       	ldd	r23, Z+20	; 0x14
    2628:	85 89       	ldd	r24, Z+21	; 0x15
    262a:	96 89       	ldd	r25, Z+22	; 0x16
    return 0;
  }
  return _file->fileSize();
    262c:	08 95       	ret
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) {
    return 0;
    262e:	60 e0       	ldi	r22, 0x00	; 0
    2630:	70 e0       	ldi	r23, 0x00	; 0
    2632:	cb 01       	movw	r24, r22
  }
  return _file->fileSize();
}
    2634:	08 95       	ret

00002636 <_ZN5SDLib4File9availableEv>:
    return _file->read(buf, nbyte);
  }
  return 0;
}

int File::available() {
    2636:	cf 92       	push	r12
    2638:	df 92       	push	r13
    263a:	ef 92       	push	r14
    263c:	ff 92       	push	r15
    263e:	cf 93       	push	r28
    2640:	df 93       	push	r29
  if (! _file) {
    2642:	fc 01       	movw	r30, r24
    2644:	21 8d       	ldd	r18, Z+25	; 0x19
    2646:	32 8d       	ldd	r19, Z+26	; 0x1a
    2648:	23 2b       	or	r18, r19
    264a:	d9 f0       	breq	.+54     	; 0x2682 <_ZN5SDLib4File9availableEv+0x4c>
    264c:	ec 01       	movw	r28, r24
    return 0;
  }

  uint32_t n = size() - position();
    264e:	0e 94 0b 13 	call	0x2616	; 0x2616 <_ZN5SDLib4File4sizeEv>
    2652:	6b 01       	movw	r12, r22
    2654:	7c 01       	movw	r14, r24
    2656:	ce 01       	movw	r24, r28
    2658:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <_ZN5SDLib4File8positionEv>

  return n > 0X7FFF ? 0X7FFF : n;
    265c:	a7 01       	movw	r20, r14
    265e:	96 01       	movw	r18, r12
    2660:	26 1b       	sub	r18, r22
    2662:	37 0b       	sbc	r19, r23
    2664:	48 0b       	sbc	r20, r24
    2666:	59 0b       	sbc	r21, r25
    2668:	da 01       	movw	r26, r20
    266a:	c9 01       	movw	r24, r18
    266c:	81 15       	cp	r24, r1
    266e:	30 e8       	ldi	r19, 0x80	; 128
    2670:	93 07       	cpc	r25, r19
    2672:	a1 05       	cpc	r26, r1
    2674:	b1 05       	cpc	r27, r1
    2676:	38 f0       	brcs	.+14     	; 0x2686 <_ZN5SDLib4File9availableEv+0x50>
    2678:	8f ef       	ldi	r24, 0xFF	; 255
    267a:	9f e7       	ldi	r25, 0x7F	; 127
    267c:	a0 e0       	ldi	r26, 0x00	; 0
    267e:	b0 e0       	ldi	r27, 0x00	; 0
    2680:	02 c0       	rjmp	.+4      	; 0x2686 <_ZN5SDLib4File9availableEv+0x50>
  return 0;
}

int File::available() {
  if (! _file) {
    return 0;
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	90 e0       	ldi	r25, 0x00	; 0
  }

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
    2686:	df 91       	pop	r29
    2688:	cf 91       	pop	r28
    268a:	ff 90       	pop	r15
    268c:	ef 90       	pop	r14
    268e:	df 90       	pop	r13
    2690:	cf 90       	pop	r12
    2692:	08 95       	ret

00002694 <_ZN5SDLib4File5closeEv>:
    return 0;
  }
  return _file->fileSize();
}

void File::close() {
    2694:	cf 93       	push	r28
    2696:	df 93       	push	r29
    2698:	fc 01       	movw	r30, r24
  if (_file) {
    269a:	81 8d       	ldd	r24, Z+25	; 0x19
    269c:	92 8d       	ldd	r25, Z+26	; 0x1a
    269e:	00 97       	sbiw	r24, 0x00	; 0
    26a0:	49 f0       	breq	.+18     	; 0x26b4 <_ZN5SDLib4File5closeEv+0x20>
    26a2:	ef 01       	movw	r28, r30
    _file->close();
    26a4:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN6SdFile5closeEv>
    free(_file);
    26a8:	89 8d       	ldd	r24, Y+25	; 0x19
    26aa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    26ac:	0e 94 a1 30 	call	0x6142	; 0x6142 <free>
    _file = 0;
    26b0:	1a 8e       	std	Y+26, r1	; 0x1a
    26b2:	19 8e       	std	Y+25, r1	; 0x19
      nfilecount--;
      Serial.print("Deleted ");
      Serial.println(nfilecount, DEC);
    */
  }
}
    26b4:	df 91       	pop	r29
    26b6:	cf 91       	pop	r28
    26b8:	08 95       	ret

000026ba <_ZN5SDLib4FilecvbEv>:

File::operator bool() {
  if (_file) {
    26ba:	dc 01       	movw	r26, r24
    26bc:	59 96       	adiw	r26, 0x19	; 25
    26be:	ed 91       	ld	r30, X+
    26c0:	fc 91       	ld	r31, X
    26c2:	5a 97       	sbiw	r26, 0x1a	; 26
    26c4:	30 97       	sbiw	r30, 0x00	; 0
    26c6:	31 f0       	breq	.+12     	; 0x26d4 <_ZN5SDLib4FilecvbEv+0x1a>
    uint8_t isFile(void) const {
      return type_ == FAT_FILE_TYPE_NORMAL;
    }
    /** \return True if this is a SdFile for an open file/directory else false. */
    uint8_t isOpen(void) const {
      return type_ != FAT_FILE_TYPE_CLOSED;
    26c8:	95 81       	ldd	r25, Z+5	; 0x05
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	91 11       	cpse	r25, r1
    26ce:	03 c0       	rjmp	.+6      	; 0x26d6 <_ZN5SDLib4FilecvbEv+0x1c>
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    return  _file->isOpen();
    26d2:	08 95       	ret
  }
  return false;
    26d4:	80 e0       	ldi	r24, 0x00	; 0
}
    26d6:	08 95       	ret

000026d8 <_Z41__static_initialization_and_destruction_0ii>:

  void File::rewindDirectory(void) {
    if (isDirectory()) {
      _file->rewind();
    }
  }
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	c9 f4       	brne	.+50     	; 0x270e <_Z41__static_initialization_and_destruction_0ii+0x36>
    26dc:	6f 3f       	cpi	r22, 0xFF	; 255
    26de:	7f 4f       	sbci	r23, 0xFF	; 255
    26e0:	b1 f4       	brne	.+44     	; 0x270e <_Z41__static_initialization_and_destruction_0ii+0x36>
    26e2:	e0 eb       	ldi	r30, 0xB0	; 176
    26e4:	f2 e0       	ldi	r31, 0x02	; 2
    26e6:	15 82       	std	Z+5, r1	; 0x05
    26e8:	16 82       	std	Z+6, r1	; 0x06
    26ea:	11 86       	std	Z+9, r1	; 0x09
    26ec:	13 86       	std	Z+11, r1	; 0x0b
    26ee:	82 e0       	ldi	r24, 0x02	; 2
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	a0 e0       	ldi	r26, 0x00	; 0
    26f4:	b0 e0       	ldi	r27, 0x00	; 0
    26f6:	84 87       	std	Z+12, r24	; 0x0c
    26f8:	95 87       	std	Z+13, r25	; 0x0d
    26fa:	a6 87       	std	Z+14, r26	; 0x0e
    26fc:	b7 87       	std	Z+15, r27	; 0x0f
    26fe:	13 a2       	std	Z+35, r1	; 0x23
    2700:	15 a6       	std	Z+45, r1	; 0x2d
    2702:	14 a6       	std	Z+44, r1	; 0x2c
    2704:	8f e5       	ldi	r24, 0x5F	; 95
    2706:	92 e0       	ldi	r25, 0x02	; 2
    2708:	93 a7       	std	Z+43, r25	; 0x2b
    270a:	82 a7       	std	Z+42, r24	; 0x2a
    270c:	17 a6       	std	Z+47, r1	; 0x2f
    270e:	08 95       	ret

00002710 <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv>:
    2710:	1f 93       	push	r17
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
    271a:	6d 97       	sbiw	r28, 0x1d	; 29
    271c:	0f b6       	in	r0, 0x3f	; 63
    271e:	f8 94       	cli
    2720:	de bf       	out	0x3e, r29	; 62
    2722:	0f be       	out	0x3f, r0	; 63
    2724:	cd bf       	out	0x3d, r28	; 61
    2726:	ab 01       	movw	r20, r22
    2728:	1c 82       	std	Y+4, r1	; 0x04
    272a:	1b 82       	std	Y+3, r1	; 0x03
    272c:	2f e5       	ldi	r18, 0x5F	; 95
    272e:	32 e0       	ldi	r19, 0x02	; 2
    2730:	3a 83       	std	Y+2, r19	; 0x02
    2732:	29 83       	std	Y+1, r18	; 0x01
    2734:	1e 82       	std	Y+6, r1	; 0x06
    2736:	21 e0       	ldi	r18, 0x01	; 1
    2738:	bc 01       	movw	r22, r24
    273a:	ce 01       	movw	r24, r28
    273c:	01 96       	adiw	r24, 0x01	; 1
    273e:	0e 94 02 20 	call	0x4004	; 0x4004 <_ZN6SdFile4openEPS_PKch>
    2742:	11 e0       	ldi	r17, 0x01	; 1
    2744:	81 11       	cpse	r24, r1
    2746:	01 c0       	rjmp	.+2      	; 0x274a <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv+0x3a>
    2748:	10 e0       	ldi	r17, 0x00	; 0
    274a:	88 23       	and	r24, r24
    274c:	21 f0       	breq	.+8      	; 0x2756 <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv+0x46>
    274e:	ce 01       	movw	r24, r28
    2750:	01 96       	adiw	r24, 0x01	; 1
    2752:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN6SdFile5closeEv>
    2756:	81 2f       	mov	r24, r17
    2758:	6d 96       	adiw	r28, 0x1d	; 29
    275a:	0f b6       	in	r0, 0x3f	; 63
    275c:	f8 94       	cli
    275e:	de bf       	out	0x3e, r29	; 62
    2760:	0f be       	out	0x3f, r0	; 63
    2762:	cd bf       	out	0x3d, r28	; 61
    2764:	df 91       	pop	r29
    2766:	cf 91       	pop	r28
    2768:	1f 91       	pop	r17
    276a:	08 95       	ret

0000276c <_ZN5SDLib15callback_removeER6SdFilePKcbPv>:
    276c:	44 23       	and	r20, r20
    276e:	39 f0       	breq	.+14     	; 0x277e <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x12>
    2770:	0e 94 13 21 	call	0x4226	; 0x4226 <_ZN6SdFile6removeEPS_PKc>
    2774:	91 e0       	ldi	r25, 0x01	; 1
    2776:	81 11       	cpse	r24, r1
    2778:	03 c0       	rjmp	.+6      	; 0x2780 <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x14>
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	01 c0       	rjmp	.+2      	; 0x2780 <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x14>
    277e:	91 e0       	ldi	r25, 0x01	; 1
    2780:	89 2f       	mov	r24, r25
    2782:	08 95       	ret

00002784 <_ZN5SDLib20getNextPathComponentEPKcPjPc>:
    2784:	cf 93       	push	r28
    2786:	df 93       	push	r29
    2788:	ec 01       	movw	r28, r24
    278a:	db 01       	movw	r26, r22
    278c:	ed 91       	ld	r30, X+
    278e:	fc 91       	ld	r31, X
    2790:	dc 01       	movw	r26, r24
    2792:	ae 0f       	add	r26, r30
    2794:	bf 1f       	adc	r27, r31
    2796:	8c 91       	ld	r24, X
    2798:	8f 32       	cpi	r24, 0x2F	; 47
    279a:	09 f4       	brne	.+2      	; 0x279e <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x1a>
    279c:	31 96       	adiw	r30, 0x01	; 1
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	2c 30       	cpi	r18, 0x0C	; 12
    27a4:	31 05       	cpc	r19, r1
    27a6:	84 f4       	brge	.+32     	; 0x27c8 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x44>
    27a8:	de 01       	movw	r26, r28
    27aa:	ae 0f       	add	r26, r30
    27ac:	bf 1f       	adc	r27, r31
    27ae:	9c 91       	ld	r25, X
    27b0:	9f 32       	cpi	r25, 0x2F	; 47
    27b2:	51 f0       	breq	.+20     	; 0x27c8 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x44>
    27b4:	99 23       	and	r25, r25
    27b6:	41 f0       	breq	.+16     	; 0x27c8 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x44>
    27b8:	da 01       	movw	r26, r20
    27ba:	a2 0f       	add	r26, r18
    27bc:	b3 1f       	adc	r27, r19
    27be:	31 96       	adiw	r30, 0x01	; 1
    27c0:	9c 93       	st	X, r25
    27c2:	2f 5f       	subi	r18, 0xFF	; 255
    27c4:	3f 4f       	sbci	r19, 0xFF	; 255
    27c6:	ed cf       	rjmp	.-38     	; 0x27a2 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x1e>
    27c8:	da 01       	movw	r26, r20
    27ca:	a2 0f       	add	r26, r18
    27cc:	b3 1f       	adc	r27, r19
    27ce:	1c 92       	st	X, r1
    27d0:	de 01       	movw	r26, r28
    27d2:	ae 0f       	add	r26, r30
    27d4:	bf 1f       	adc	r27, r31
    27d6:	8c 91       	ld	r24, X
    27d8:	8f 32       	cpi	r24, 0x2F	; 47
    27da:	09 f4       	brne	.+2      	; 0x27de <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x5a>
    27dc:	31 96       	adiw	r30, 0x01	; 1
    27de:	db 01       	movw	r26, r22
    27e0:	ed 93       	st	X+, r30
    27e2:	fc 93       	st	X, r31
    27e4:	ec 0f       	add	r30, r28
    27e6:	fd 1f       	adc	r31, r29
    27e8:	90 81       	ld	r25, Z
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	91 11       	cpse	r25, r1
    27ee:	01 c0       	rjmp	.+2      	; 0x27f2 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x6e>
    27f0:	80 e0       	ldi	r24, 0x00	; 0
    27f2:	df 91       	pop	r29
    27f4:	cf 91       	pop	r28
    27f6:	08 95       	ret

000027f8 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>:
    27f8:	5f 92       	push	r5
    27fa:	6f 92       	push	r6
    27fc:	7f 92       	push	r7
    27fe:	8f 92       	push	r8
    2800:	9f 92       	push	r9
    2802:	af 92       	push	r10
    2804:	bf 92       	push	r11
    2806:	cf 92       	push	r12
    2808:	df 92       	push	r13
    280a:	ef 92       	push	r14
    280c:	ff 92       	push	r15
    280e:	0f 93       	push	r16
    2810:	1f 93       	push	r17
    2812:	cf 93       	push	r28
    2814:	df 93       	push	r29
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
    281a:	c9 54       	subi	r28, 0x49	; 73
    281c:	d1 09       	sbc	r29, r1
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	cd bf       	out	0x3d, r28	; 61
    2828:	4c 01       	movw	r8, r24
    282a:	6b 01       	movw	r12, r22
    282c:	3a 01       	movw	r6, r20
    282e:	59 01       	movw	r10, r18
    2830:	1c 82       	std	Y+4, r1	; 0x04
    2832:	1b 82       	std	Y+3, r1	; 0x03
    2834:	8f e5       	ldi	r24, 0x5F	; 95
    2836:	92 e0       	ldi	r25, 0x02	; 2
    2838:	9a 83       	std	Y+2, r25	; 0x02
    283a:	89 83       	std	Y+1, r24	; 0x01
    283c:	1e 82       	std	Y+6, r1	; 0x06
    283e:	19 a2       	std	Y+33, r1	; 0x21
    2840:	18 a2       	std	Y+32, r1	; 0x20
    2842:	9f 8f       	std	Y+31, r25	; 0x1f
    2844:	8e 8f       	std	Y+30, r24	; 0x1e
    2846:	1b a2       	std	Y+35, r1	; 0x23
    2848:	2a 96       	adiw	r28, 0x0a	; 10
    284a:	1f ae       	std	Y+63, r1	; 0x3f
    284c:	1e ae       	std	Y+62, r1	; 0x3e
    284e:	2a 97       	sbiw	r28, 0x0a	; 10
    2850:	8b 01       	movw	r16, r22
    2852:	ce 01       	movw	r24, r28
    2854:	01 96       	adiw	r24, 0x01	; 1
    2856:	7c 01       	movw	r14, r24
    2858:	ae 01       	movw	r20, r28
    285a:	45 5c       	subi	r20, 0xC5	; 197
    285c:	5f 4f       	sbci	r21, 0xFF	; 255
    285e:	be 01       	movw	r22, r28
    2860:	68 5b       	subi	r22, 0xB8	; 184
    2862:	7f 4f       	sbci	r23, 0xFF	; 255
    2864:	c4 01       	movw	r24, r8
    2866:	0e 94 c2 13 	call	0x2784	; 0x2784 <_ZN5SDLib20getNextPathComponentEPKcPjPc>
    286a:	58 2e       	mov	r5, r24
    286c:	41 e0       	ldi	r20, 0x01	; 1
    286e:	48 27       	eor	r20, r24
    2870:	95 01       	movw	r18, r10
    2872:	be 01       	movw	r22, r28
    2874:	65 5c       	subi	r22, 0xC5	; 197
    2876:	7f 4f       	sbci	r23, 0xFF	; 255
    2878:	c8 01       	movw	r24, r16
    287a:	f3 01       	movw	r30, r6
    287c:	09 95       	icall
    287e:	81 11       	cpse	r24, r1
    2880:	08 c0       	rjmp	.+16     	; 0x2892 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x9a>
    2882:	0c 15       	cp	r16, r12
    2884:	1d 05       	cpc	r17, r13
    2886:	51 f1       	breq	.+84     	; 0x28dc <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xe4>
    2888:	c8 01       	movw	r24, r16
    288a:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN6SdFile5closeEv>
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	2a c0       	rjmp	.+84     	; 0x28e6 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    2892:	55 20       	and	r5, r5
    2894:	d9 f0       	breq	.+54     	; 0x28cc <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xd4>
    2896:	21 e0       	ldi	r18, 0x01	; 1
    2898:	ae 01       	movw	r20, r28
    289a:	45 5c       	subi	r20, 0xC5	; 197
    289c:	5f 4f       	sbci	r21, 0xFF	; 255
    289e:	b8 01       	movw	r22, r16
    28a0:	c7 01       	movw	r24, r14
    28a2:	0e 94 02 20 	call	0x4004	; 0x4004 <_ZN6SdFile4openEPS_PKch>
    28a6:	58 2e       	mov	r5, r24
    28a8:	0c 15       	cp	r16, r12
    28aa:	1d 05       	cpc	r17, r13
    28ac:	19 f0       	breq	.+6      	; 0x28b4 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xbc>
    28ae:	c8 01       	movw	r24, r16
    28b0:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN6SdFile5closeEv>
    28b4:	55 20       	and	r5, r5
    28b6:	a1 f0       	breq	.+40     	; 0x28e0 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xe8>
    28b8:	0c 15       	cp	r16, r12
    28ba:	1d 05       	cpc	r17, r13
    28bc:	11 f0       	breq	.+4      	; 0x28c2 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xca>
    28be:	c8 01       	movw	r24, r16
    28c0:	02 c0       	rjmp	.+4      	; 0x28c6 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xce>
    28c2:	ce 01       	movw	r24, r28
    28c4:	4e 96       	adiw	r24, 0x1e	; 30
    28c6:	87 01       	movw	r16, r14
    28c8:	7c 01       	movw	r14, r24
    28ca:	c6 cf       	rjmp	.-116    	; 0x2858 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x60>
    28cc:	0c 15       	cp	r16, r12
    28ce:	1d 05       	cpc	r17, r13
    28d0:	49 f0       	breq	.+18     	; 0x28e4 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xec>
    28d2:	c8 01       	movw	r24, r16
    28d4:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN6SdFile5closeEv>
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	05 c0       	rjmp	.+10     	; 0x28e6 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	03 c0       	rjmp	.+6      	; 0x28e6 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	01 c0       	rjmp	.+2      	; 0x28e6 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	c7 5b       	subi	r28, 0xB7	; 183
    28e8:	df 4f       	sbci	r29, 0xFF	; 255
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	f8 94       	cli
    28ee:	de bf       	out	0x3e, r29	; 62
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	cd bf       	out	0x3d, r28	; 61
    28f4:	df 91       	pop	r29
    28f6:	cf 91       	pop	r28
    28f8:	1f 91       	pop	r17
    28fa:	0f 91       	pop	r16
    28fc:	ff 90       	pop	r15
    28fe:	ef 90       	pop	r14
    2900:	df 90       	pop	r13
    2902:	cf 90       	pop	r12
    2904:	bf 90       	pop	r11
    2906:	af 90       	pop	r10
    2908:	9f 90       	pop	r9
    290a:	8f 90       	pop	r8
    290c:	7f 90       	pop	r7
    290e:	6f 90       	pop	r6
    2910:	5f 90       	pop	r5
    2912:	08 95       	ret

00002914 <_ZN5SDLib7SDClass5beginEh>:
    2914:	0f 93       	push	r16
    2916:	1f 93       	push	r17
    2918:	cf 93       	push	r28
    291a:	df 93       	push	r29
    291c:	ec 01       	movw	r28, r24
    291e:	16 2f       	mov	r17, r22
    2920:	8f a5       	ldd	r24, Y+47	; 0x2f
    2922:	88 23       	and	r24, r24
    2924:	21 f0       	breq	.+8      	; 0x292e <_ZN5SDLib7SDClass5beginEh+0x1a>
    2926:	ce 01       	movw	r24, r28
    2928:	8a 96       	adiw	r24, 0x2a	; 42
    292a:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN6SdFile5closeEv>
    292e:	41 2f       	mov	r20, r17
    2930:	61 e0       	ldi	r22, 0x01	; 1
    2932:	ce 01       	movw	r24, r28
    2934:	0e 94 13 18 	call	0x3026	; 0x3026 <_ZN7Sd2Card4initEhh>
    2938:	88 23       	and	r24, r24
    293a:	e1 f0       	breq	.+56     	; 0x2974 <_ZN5SDLib7SDClass5beginEh+0x60>
    293c:	8e 01       	movw	r16, r28
    293e:	04 5f       	subi	r16, 0xF4	; 244
    2940:	1f 4f       	sbci	r17, 0xFF	; 255
    2942:	41 e0       	ldi	r20, 0x01	; 1
    2944:	be 01       	movw	r22, r28
    2946:	c8 01       	movw	r24, r16
    2948:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <_ZN8SdVolume4initEP7Sd2Cardh>
    294c:	81 11       	cpse	r24, r1
    294e:	06 c0       	rjmp	.+12     	; 0x295c <_ZN5SDLib7SDClass5beginEh+0x48>
    2950:	40 e0       	ldi	r20, 0x00	; 0
    2952:	be 01       	movw	r22, r28
    2954:	c8 01       	movw	r24, r16
    2956:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <_ZN8SdVolume4initEP7Sd2Cardh>
    295a:	01 c0       	rjmp	.+2      	; 0x295e <_ZN5SDLib7SDClass5beginEh+0x4a>
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	88 23       	and	r24, r24
    2960:	59 f0       	breq	.+22     	; 0x2978 <_ZN5SDLib7SDClass5beginEh+0x64>
    2962:	b8 01       	movw	r22, r16
    2964:	ce 01       	movw	r24, r28
    2966:	8a 96       	adiw	r24, 0x2a	; 42
    2968:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN6SdFile8openRootEP8SdVolume>
    296c:	88 23       	and	r24, r24
    296e:	31 f0       	breq	.+12     	; 0x297c <_ZN5SDLib7SDClass5beginEh+0x68>
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	05 c0       	rjmp	.+10     	; 0x297e <_ZN5SDLib7SDClass5beginEh+0x6a>
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	03 c0       	rjmp	.+6      	; 0x297e <_ZN5SDLib7SDClass5beginEh+0x6a>
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	01 c0       	rjmp	.+2      	; 0x297e <_ZN5SDLib7SDClass5beginEh+0x6a>
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	1f 91       	pop	r17
    2984:	0f 91       	pop	r16
    2986:	08 95       	ret

00002988 <_ZN5SDLib7SDClass12getParentDirEPKcPi>:
    2988:	4f 92       	push	r4
    298a:	5f 92       	push	r5
    298c:	6f 92       	push	r6
    298e:	7f 92       	push	r7
    2990:	8f 92       	push	r8
    2992:	9f 92       	push	r9
    2994:	af 92       	push	r10
    2996:	bf 92       	push	r11
    2998:	cf 92       	push	r12
    299a:	df 92       	push	r13
    299c:	ef 92       	push	r14
    299e:	ff 92       	push	r15
    29a0:	0f 93       	push	r16
    29a2:	1f 93       	push	r17
    29a4:	cf 93       	push	r28
    29a6:	df 93       	push	r29
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
    29ac:	c7 54       	subi	r28, 0x47	; 71
    29ae:	d1 09       	sbc	r29, r1
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	f8 94       	cli
    29b4:	de bf       	out	0x3e, r29	; 62
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	cd bf       	out	0x3d, r28	; 61
    29ba:	4c 01       	movw	r8, r24
    29bc:	3a 01       	movw	r6, r20
    29be:	29 01       	movw	r4, r18
    29c0:	1c 82       	std	Y+4, r1	; 0x04
    29c2:	1b 82       	std	Y+3, r1	; 0x03
    29c4:	8f e5       	ldi	r24, 0x5F	; 95
    29c6:	92 e0       	ldi	r25, 0x02	; 2
    29c8:	9a 83       	std	Y+2, r25	; 0x02
    29ca:	89 83       	std	Y+1, r24	; 0x01
    29cc:	1e 82       	std	Y+6, r1	; 0x06
    29ce:	19 a2       	std	Y+33, r1	; 0x21
    29d0:	18 a2       	std	Y+32, r1	; 0x20
    29d2:	9f 8f       	std	Y+31, r25	; 0x1f
    29d4:	8e 8f       	std	Y+30, r24	; 0x1e
    29d6:	1b a2       	std	Y+35, r1	; 0x23
    29d8:	64 5f       	subi	r22, 0xF4	; 244
    29da:	7f 4f       	sbci	r23, 0xFF	; 255
    29dc:	ce 01       	movw	r24, r28
    29de:	01 96       	adiw	r24, 0x01	; 1
    29e0:	0e 94 66 1b 	call	0x36cc	; 0x36cc <_ZN6SdFile8openRootEP8SdVolume>
    29e4:	73 01       	movw	r14, r6
    29e6:	6e 01       	movw	r12, r28
    29e8:	8e e1       	ldi	r24, 0x1E	; 30
    29ea:	c8 0e       	add	r12, r24
    29ec:	d1 1c       	adc	r13, r1
    29ee:	fe 01       	movw	r30, r28
    29f0:	31 96       	adiw	r30, 0x01	; 1
    29f2:	5f 01       	movw	r10, r30
    29f4:	6f e2       	ldi	r22, 0x2F	; 47
    29f6:	70 e0       	ldi	r23, 0x00	; 0
    29f8:	c7 01       	movw	r24, r14
    29fa:	0e 94 3c 31 	call	0x6278	; 0x6278 <strchr>
    29fe:	00 97       	sbiw	r24, 0x00	; 0
    2a00:	f1 f1       	breq	.+124    	; 0x2a7e <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xf6>
    2a02:	f7 01       	movw	r30, r14
    2a04:	20 81       	ld	r18, Z
    2a06:	2f 32       	cpi	r18, 0x2F	; 47
    2a08:	21 f4       	brne	.+8      	; 0x2a12 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x8a>
    2a0a:	ff ef       	ldi	r31, 0xFF	; 255
    2a0c:	ef 1a       	sub	r14, r31
    2a0e:	ff 0a       	sbc	r15, r31
    2a10:	f1 cf       	rjmp	.-30     	; 0x29f4 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x6c>
    2a12:	00 97       	sbiw	r24, 0x00	; 0
    2a14:	a1 f1       	breq	.+104    	; 0x2a7e <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xf6>
    2a16:	8e 19       	sub	r24, r14
    2a18:	8d 30       	cpi	r24, 0x0D	; 13
    2a1a:	08 f0       	brcs	.+2      	; 0x2a1e <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x96>
    2a1c:	8c e0       	ldi	r24, 0x0C	; 12
    2a1e:	08 2f       	mov	r16, r24
    2a20:	10 e0       	ldi	r17, 0x00	; 0
    2a22:	a8 01       	movw	r20, r16
    2a24:	b7 01       	movw	r22, r14
    2a26:	ce 01       	movw	r24, r28
    2a28:	cb 96       	adiw	r24, 0x3b	; 59
    2a2a:	0e 94 47 31 	call	0x628e	; 0x628e <strncpy>
    2a2e:	eb e3       	ldi	r30, 0x3B	; 59
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	ec 0f       	add	r30, r28
    2a34:	fd 1f       	adc	r31, r29
    2a36:	e0 0f       	add	r30, r16
    2a38:	f1 1f       	adc	r31, r17
    2a3a:	10 82       	st	Z, r1
    2a3c:	c6 01       	movw	r24, r12
    2a3e:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN6SdFile5closeEv>
    2a42:	21 e0       	ldi	r18, 0x01	; 1
    2a44:	ae 01       	movw	r20, r28
    2a46:	45 5c       	subi	r20, 0xC5	; 197
    2a48:	5f 4f       	sbci	r21, 0xFF	; 255
    2a4a:	b5 01       	movw	r22, r10
    2a4c:	c6 01       	movw	r24, r12
    2a4e:	0e 94 02 20 	call	0x4004	; 0x4004 <_ZN6SdFile4openEPS_PKch>
    2a52:	81 11       	cpse	r24, r1
    2a54:	09 c0       	rjmp	.+18     	; 0x2a68 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xe0>
    2a56:	f4 01       	movw	r30, r8
    2a58:	13 82       	std	Z+3, r1	; 0x03
    2a5a:	12 82       	std	Z+2, r1	; 0x02
    2a5c:	8f e5       	ldi	r24, 0x5F	; 95
    2a5e:	92 e0       	ldi	r25, 0x02	; 2
    2a60:	91 83       	std	Z+1, r25	; 0x01
    2a62:	80 83       	st	Z, r24
    2a64:	15 82       	std	Z+5, r1	; 0x05
    2a66:	63 c0       	rjmp	.+198    	; 0x2b2e <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x1a6>
    2a68:	e0 0e       	add	r14, r16
    2a6a:	f1 1e       	adc	r15, r17
    2a6c:	c5 01       	movw	r24, r10
    2a6e:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN6SdFile5closeEv>
    2a72:	9a 2d       	mov	r25, r10
    2a74:	8b 2d       	mov	r24, r11
    2a76:	56 01       	movw	r10, r12
    2a78:	c9 2e       	mov	r12, r25
    2a7a:	d8 2e       	mov	r13, r24
    2a7c:	bb cf       	rjmp	.-138    	; 0x29f4 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x6c>
    2a7e:	e6 18       	sub	r14, r6
    2a80:	f7 08       	sbc	r15, r7
    2a82:	f2 01       	movw	r30, r4
    2a84:	f1 82       	std	Z+1, r15	; 0x01
    2a86:	e0 82       	st	Z, r14
    2a88:	88 e8       	ldi	r24, 0x88	; 136
    2a8a:	91 e0       	ldi	r25, 0x01	; 1
    2a8c:	f4 01       	movw	r30, r8
    2a8e:	91 83       	std	Z+1, r25	; 0x01
    2a90:	80 83       	st	Z, r24
    2a92:	f5 01       	movw	r30, r10
    2a94:	82 81       	ldd	r24, Z+2	; 0x02
    2a96:	93 81       	ldd	r25, Z+3	; 0x03
    2a98:	f4 01       	movw	r30, r8
    2a9a:	93 83       	std	Z+3, r25	; 0x03
    2a9c:	82 83       	std	Z+2, r24	; 0x02
    2a9e:	8f e5       	ldi	r24, 0x5F	; 95
    2aa0:	92 e0       	ldi	r25, 0x02	; 2
    2aa2:	91 83       	std	Z+1, r25	; 0x01
    2aa4:	80 83       	st	Z, r24
    2aa6:	f5 01       	movw	r30, r10
    2aa8:	84 81       	ldd	r24, Z+4	; 0x04
    2aaa:	f4 01       	movw	r30, r8
    2aac:	84 83       	std	Z+4, r24	; 0x04
    2aae:	f5 01       	movw	r30, r10
    2ab0:	85 81       	ldd	r24, Z+5	; 0x05
    2ab2:	f4 01       	movw	r30, r8
    2ab4:	85 83       	std	Z+5, r24	; 0x05
    2ab6:	f5 01       	movw	r30, r10
    2ab8:	86 81       	ldd	r24, Z+6	; 0x06
    2aba:	97 81       	ldd	r25, Z+7	; 0x07
    2abc:	a0 85       	ldd	r26, Z+8	; 0x08
    2abe:	b1 85       	ldd	r27, Z+9	; 0x09
    2ac0:	f4 01       	movw	r30, r8
    2ac2:	86 83       	std	Z+6, r24	; 0x06
    2ac4:	97 83       	std	Z+7, r25	; 0x07
    2ac6:	a0 87       	std	Z+8, r26	; 0x08
    2ac8:	b1 87       	std	Z+9, r27	; 0x09
    2aca:	f5 01       	movw	r30, r10
    2acc:	82 85       	ldd	r24, Z+10	; 0x0a
    2ace:	93 85       	ldd	r25, Z+11	; 0x0b
    2ad0:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ad2:	b5 85       	ldd	r27, Z+13	; 0x0d
    2ad4:	f4 01       	movw	r30, r8
    2ad6:	82 87       	std	Z+10, r24	; 0x0a
    2ad8:	93 87       	std	Z+11, r25	; 0x0b
    2ada:	a4 87       	std	Z+12, r26	; 0x0c
    2adc:	b5 87       	std	Z+13, r27	; 0x0d
    2ade:	f5 01       	movw	r30, r10
    2ae0:	86 85       	ldd	r24, Z+14	; 0x0e
    2ae2:	97 85       	ldd	r25, Z+15	; 0x0f
    2ae4:	a0 89       	ldd	r26, Z+16	; 0x10
    2ae6:	b1 89       	ldd	r27, Z+17	; 0x11
    2ae8:	f4 01       	movw	r30, r8
    2aea:	86 87       	std	Z+14, r24	; 0x0e
    2aec:	97 87       	std	Z+15, r25	; 0x0f
    2aee:	a0 8b       	std	Z+16, r26	; 0x10
    2af0:	b1 8b       	std	Z+17, r27	; 0x11
    2af2:	f5 01       	movw	r30, r10
    2af4:	82 89       	ldd	r24, Z+18	; 0x12
    2af6:	f4 01       	movw	r30, r8
    2af8:	82 8b       	std	Z+18, r24	; 0x12
    2afa:	f5 01       	movw	r30, r10
    2afc:	83 89       	ldd	r24, Z+19	; 0x13
    2afe:	94 89       	ldd	r25, Z+20	; 0x14
    2b00:	a5 89       	ldd	r26, Z+21	; 0x15
    2b02:	b6 89       	ldd	r27, Z+22	; 0x16
    2b04:	f4 01       	movw	r30, r8
    2b06:	83 8b       	std	Z+19, r24	; 0x13
    2b08:	94 8b       	std	Z+20, r25	; 0x14
    2b0a:	a5 8b       	std	Z+21, r26	; 0x15
    2b0c:	b6 8b       	std	Z+22, r27	; 0x16
    2b0e:	f5 01       	movw	r30, r10
    2b10:	87 89       	ldd	r24, Z+23	; 0x17
    2b12:	90 8d       	ldd	r25, Z+24	; 0x18
    2b14:	a1 8d       	ldd	r26, Z+25	; 0x19
    2b16:	b2 8d       	ldd	r27, Z+26	; 0x1a
    2b18:	f4 01       	movw	r30, r8
    2b1a:	87 8b       	std	Z+23, r24	; 0x17
    2b1c:	90 8f       	std	Z+24, r25	; 0x18
    2b1e:	a1 8f       	std	Z+25, r26	; 0x19
    2b20:	b2 8f       	std	Z+26, r27	; 0x1a
    2b22:	f5 01       	movw	r30, r10
    2b24:	83 8d       	ldd	r24, Z+27	; 0x1b
    2b26:	94 8d       	ldd	r25, Z+28	; 0x1c
    2b28:	f4 01       	movw	r30, r8
    2b2a:	94 8f       	std	Z+28, r25	; 0x1c
    2b2c:	83 8f       	std	Z+27, r24	; 0x1b
    2b2e:	c4 01       	movw	r24, r8
    2b30:	c9 5b       	subi	r28, 0xB9	; 185
    2b32:	df 4f       	sbci	r29, 0xFF	; 255
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	f8 94       	cli
    2b38:	de bf       	out	0x3e, r29	; 62
    2b3a:	0f be       	out	0x3f, r0	; 63
    2b3c:	cd bf       	out	0x3d, r28	; 61
    2b3e:	df 91       	pop	r29
    2b40:	cf 91       	pop	r28
    2b42:	1f 91       	pop	r17
    2b44:	0f 91       	pop	r16
    2b46:	ff 90       	pop	r15
    2b48:	ef 90       	pop	r14
    2b4a:	df 90       	pop	r13
    2b4c:	cf 90       	pop	r12
    2b4e:	bf 90       	pop	r11
    2b50:	af 90       	pop	r10
    2b52:	9f 90       	pop	r9
    2b54:	8f 90       	pop	r8
    2b56:	7f 90       	pop	r7
    2b58:	6f 90       	pop	r6
    2b5a:	5f 90       	pop	r5
    2b5c:	4f 90       	pop	r4
    2b5e:	08 95       	ret

00002b60 <_ZN5SDLib7SDClass4openEPKch>:
    2b60:	df 92       	push	r13
    2b62:	ef 92       	push	r14
    2b64:	ff 92       	push	r15
    2b66:	0f 93       	push	r16
    2b68:	1f 93       	push	r17
    2b6a:	cf 93       	push	r28
    2b6c:	df 93       	push	r29
    2b6e:	cd b7       	in	r28, 0x3d	; 61
    2b70:	de b7       	in	r29, 0x3e	; 62
    2b72:	c6 57       	subi	r28, 0x76	; 118
    2b74:	d1 09       	sbc	r29, r1
    2b76:	0f b6       	in	r0, 0x3f	; 63
    2b78:	f8 94       	cli
    2b7a:	de bf       	out	0x3e, r29	; 62
    2b7c:	0f be       	out	0x3f, r0	; 63
    2b7e:	cd bf       	out	0x3d, r28	; 61
    2b80:	7c 01       	movw	r14, r24
    2b82:	8a 01       	movw	r16, r20
    2b84:	d2 2e       	mov	r13, r18
    2b86:	9e 01       	movw	r18, r28
    2b88:	25 5c       	subi	r18, 0xC5	; 197
    2b8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b8c:	ce 01       	movw	r24, r28
    2b8e:	cd 96       	adiw	r24, 0x3d	; 61
    2b90:	0e 94 c4 14 	call	0x2988	; 0x2988 <_ZN5SDLib7SDClass12getParentDirEPKcPi>
    2b94:	8b ad       	ldd	r24, Y+59	; 0x3b
    2b96:	9c ad       	ldd	r25, Y+60	; 0x3c
    2b98:	08 0f       	add	r16, r24
    2b9a:	19 1f       	adc	r17, r25
    2b9c:	f8 01       	movw	r30, r16
    2b9e:	80 81       	ld	r24, Z
    2ba0:	81 11       	cpse	r24, r1
    2ba2:	57 c0       	rjmp	.+174    	; 0x2c52 <_ZN5SDLib7SDClass4openEPKch+0xf2>
    2ba4:	21 96       	adiw	r28, 0x01	; 1
    2ba6:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ba8:	9f ad       	ldd	r25, Y+63	; 0x3f
    2baa:	21 97       	sbiw	r28, 0x01	; 1
    2bac:	99 a3       	std	Y+33, r25	; 0x21
    2bae:	88 a3       	std	Y+32, r24	; 0x20
    2bb0:	8f e5       	ldi	r24, 0x5F	; 95
    2bb2:	92 e0       	ldi	r25, 0x02	; 2
    2bb4:	9f 8f       	std	Y+31, r25	; 0x1f
    2bb6:	8e 8f       	std	Y+30, r24	; 0x1e
    2bb8:	22 96       	adiw	r28, 0x02	; 2
    2bba:	8f ad       	ldd	r24, Y+63	; 0x3f
    2bbc:	22 97       	sbiw	r28, 0x02	; 2
    2bbe:	8a a3       	std	Y+34, r24	; 0x22
    2bc0:	23 96       	adiw	r28, 0x03	; 3
    2bc2:	8f ad       	ldd	r24, Y+63	; 0x3f
    2bc4:	23 97       	sbiw	r28, 0x03	; 3
    2bc6:	8b a3       	std	Y+35, r24	; 0x23
    2bc8:	27 96       	adiw	r28, 0x07	; 7
    2bca:	8c ad       	ldd	r24, Y+60	; 0x3c
    2bcc:	9d ad       	ldd	r25, Y+61	; 0x3d
    2bce:	ae ad       	ldd	r26, Y+62	; 0x3e
    2bd0:	bf ad       	ldd	r27, Y+63	; 0x3f
    2bd2:	27 97       	sbiw	r28, 0x07	; 7
    2bd4:	8c a3       	std	Y+36, r24	; 0x24
    2bd6:	9d a3       	std	Y+37, r25	; 0x25
    2bd8:	ae a3       	std	Y+38, r26	; 0x26
    2bda:	bf a3       	std	Y+39, r27	; 0x27
    2bdc:	2b 96       	adiw	r28, 0x0b	; 11
    2bde:	8c ad       	ldd	r24, Y+60	; 0x3c
    2be0:	9d ad       	ldd	r25, Y+61	; 0x3d
    2be2:	ae ad       	ldd	r26, Y+62	; 0x3e
    2be4:	bf ad       	ldd	r27, Y+63	; 0x3f
    2be6:	2b 97       	sbiw	r28, 0x0b	; 11
    2be8:	88 a7       	std	Y+40, r24	; 0x28
    2bea:	99 a7       	std	Y+41, r25	; 0x29
    2bec:	aa a7       	std	Y+42, r26	; 0x2a
    2bee:	bb a7       	std	Y+43, r27	; 0x2b
    2bf0:	2f 96       	adiw	r28, 0x0f	; 15
    2bf2:	8c ad       	ldd	r24, Y+60	; 0x3c
    2bf4:	9d ad       	ldd	r25, Y+61	; 0x3d
    2bf6:	ae ad       	ldd	r26, Y+62	; 0x3e
    2bf8:	bf ad       	ldd	r27, Y+63	; 0x3f
    2bfa:	2f 97       	sbiw	r28, 0x0f	; 15
    2bfc:	8c a7       	std	Y+44, r24	; 0x2c
    2bfe:	9d a7       	std	Y+45, r25	; 0x2d
    2c00:	ae a7       	std	Y+46, r26	; 0x2e
    2c02:	bf a7       	std	Y+47, r27	; 0x2f
    2c04:	60 96       	adiw	r28, 0x10	; 16
    2c06:	8f ad       	ldd	r24, Y+63	; 0x3f
    2c08:	60 97       	sbiw	r28, 0x10	; 16
    2c0a:	88 ab       	std	Y+48, r24	; 0x30
    2c0c:	64 96       	adiw	r28, 0x14	; 20
    2c0e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2c10:	9d ad       	ldd	r25, Y+61	; 0x3d
    2c12:	ae ad       	ldd	r26, Y+62	; 0x3e
    2c14:	bf ad       	ldd	r27, Y+63	; 0x3f
    2c16:	64 97       	sbiw	r28, 0x14	; 20
    2c18:	89 ab       	std	Y+49, r24	; 0x31
    2c1a:	9a ab       	std	Y+50, r25	; 0x32
    2c1c:	ab ab       	std	Y+51, r26	; 0x33
    2c1e:	bc ab       	std	Y+52, r27	; 0x34
    2c20:	68 96       	adiw	r28, 0x18	; 24
    2c22:	8c ad       	ldd	r24, Y+60	; 0x3c
    2c24:	9d ad       	ldd	r25, Y+61	; 0x3d
    2c26:	ae ad       	ldd	r26, Y+62	; 0x3e
    2c28:	bf ad       	ldd	r27, Y+63	; 0x3f
    2c2a:	68 97       	sbiw	r28, 0x18	; 24
    2c2c:	8d ab       	std	Y+53, r24	; 0x35
    2c2e:	9e ab       	std	Y+54, r25	; 0x36
    2c30:	af ab       	std	Y+55, r26	; 0x37
    2c32:	b8 af       	std	Y+56, r27	; 0x38
    2c34:	6a 96       	adiw	r28, 0x1a	; 26
    2c36:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c38:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c3a:	6a 97       	sbiw	r28, 0x1a	; 26
    2c3c:	9a af       	std	Y+58, r25	; 0x3a
    2c3e:	89 af       	std	Y+57, r24	; 0x39
    2c40:	49 e5       	ldi	r20, 0x59	; 89
    2c42:	52 e0       	ldi	r21, 0x02	; 2
    2c44:	be 01       	movw	r22, r28
    2c46:	62 5e       	subi	r22, 0xE2	; 226
    2c48:	7f 4f       	sbci	r23, 0xFF	; 255
    2c4a:	c7 01       	movw	r24, r14
    2c4c:	0e 94 99 12 	call	0x2532	; 0x2532 <_ZN5SDLib4FileC1E6SdFilePKc>
    2c50:	8e c0       	rjmp	.+284    	; 0x2d6e <_ZN5SDLib7SDClass4openEPKch+0x20e>
    2c52:	6e 96       	adiw	r28, 0x1e	; 30
    2c54:	1f ae       	std	Y+63, r1	; 0x3f
    2c56:	1e ae       	std	Y+62, r1	; 0x3e
    2c58:	6e 97       	sbiw	r28, 0x1e	; 30
    2c5a:	8f e5       	ldi	r24, 0x5F	; 95
    2c5c:	92 e0       	ldi	r25, 0x02	; 2
    2c5e:	6c 96       	adiw	r28, 0x1c	; 28
    2c60:	9f af       	std	Y+63, r25	; 0x3f
    2c62:	8e af       	std	Y+62, r24	; 0x3e
    2c64:	6c 97       	sbiw	r28, 0x1c	; 28
    2c66:	a0 96       	adiw	r28, 0x20	; 32
    2c68:	1f ae       	std	Y+63, r1	; 0x3f
    2c6a:	a0 97       	sbiw	r28, 0x20	; 32
    2c6c:	23 96       	adiw	r28, 0x03	; 3
    2c6e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2c70:	23 97       	sbiw	r28, 0x03	; 3
    2c72:	81 11       	cpse	r24, r1
    2c74:	04 c0       	rjmp	.+8      	; 0x2c7e <_ZN5SDLib7SDClass4openEPKch+0x11e>
    2c76:	c7 01       	movw	r24, r14
    2c78:	0e 94 ce 12 	call	0x259c	; 0x259c <_ZN5SDLib4FileC1Ev>
    2c7c:	78 c0       	rjmp	.+240    	; 0x2d6e <_ZN5SDLib7SDClass4openEPKch+0x20e>
    2c7e:	2d 2d       	mov	r18, r13
    2c80:	a8 01       	movw	r20, r16
    2c82:	be 01       	movw	r22, r28
    2c84:	63 5c       	subi	r22, 0xC3	; 195
    2c86:	7f 4f       	sbci	r23, 0xFF	; 255
    2c88:	ce 01       	movw	r24, r28
    2c8a:	86 5a       	subi	r24, 0xA6	; 166
    2c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c8e:	0e 94 02 20 	call	0x4004	; 0x4004 <_ZN6SdFile4openEPS_PKch>
    2c92:	81 11       	cpse	r24, r1
    2c94:	04 c0       	rjmp	.+8      	; 0x2c9e <_ZN5SDLib7SDClass4openEPKch+0x13e>
    2c96:	c7 01       	movw	r24, r14
    2c98:	0e 94 ce 12 	call	0x259c	; 0x259c <_ZN5SDLib4FileC1Ev>
    2c9c:	68 c0       	rjmp	.+208    	; 0x2d6e <_ZN5SDLib7SDClass4openEPKch+0x20e>
    2c9e:	ce 01       	movw	r24, r28
    2ca0:	cd 96       	adiw	r24, 0x3d	; 61
    2ca2:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <_ZN6SdFile5closeEv>
    2ca6:	8d 2d       	mov	r24, r13
    2ca8:	86 70       	andi	r24, 0x06	; 6
    2caa:	86 30       	cpi	r24, 0x06	; 6
    2cac:	59 f4       	brne	.+22     	; 0x2cc4 <_ZN5SDLib7SDClass4openEPKch+0x164>
    2cae:	e1 96       	adiw	r28, 0x31	; 49
    2cb0:	4c ad       	ldd	r20, Y+60	; 0x3c
    2cb2:	5d ad       	ldd	r21, Y+61	; 0x3d
    2cb4:	6e ad       	ldd	r22, Y+62	; 0x3e
    2cb6:	7f ad       	ldd	r23, Y+63	; 0x3f
    2cb8:	e1 97       	sbiw	r28, 0x31	; 49
    2cba:	ce 01       	movw	r24, r28
    2cbc:	86 5a       	subi	r24, 0xA6	; 166
    2cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    2cc0:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <_ZN6SdFile7seekSetEm>
    2cc4:	6e 96       	adiw	r28, 0x1e	; 30
    2cc6:	8e ad       	ldd	r24, Y+62	; 0x3e
    2cc8:	9f ad       	ldd	r25, Y+63	; 0x3f
    2cca:	6e 97       	sbiw	r28, 0x1e	; 30
    2ccc:	9c 83       	std	Y+4, r25	; 0x04
    2cce:	8b 83       	std	Y+3, r24	; 0x03
    2cd0:	8f e5       	ldi	r24, 0x5F	; 95
    2cd2:	92 e0       	ldi	r25, 0x02	; 2
    2cd4:	9a 83       	std	Y+2, r25	; 0x02
    2cd6:	89 83       	std	Y+1, r24	; 0x01
    2cd8:	6f 96       	adiw	r28, 0x1f	; 31
    2cda:	8f ad       	ldd	r24, Y+63	; 0x3f
    2cdc:	6f 97       	sbiw	r28, 0x1f	; 31
    2cde:	8d 83       	std	Y+5, r24	; 0x05
    2ce0:	a0 96       	adiw	r28, 0x20	; 32
    2ce2:	8f ad       	ldd	r24, Y+63	; 0x3f
    2ce4:	a0 97       	sbiw	r28, 0x20	; 32
    2ce6:	8e 83       	std	Y+6, r24	; 0x06
    2ce8:	a4 96       	adiw	r28, 0x24	; 36
    2cea:	8c ad       	ldd	r24, Y+60	; 0x3c
    2cec:	9d ad       	ldd	r25, Y+61	; 0x3d
    2cee:	ae ad       	ldd	r26, Y+62	; 0x3e
    2cf0:	bf ad       	ldd	r27, Y+63	; 0x3f
    2cf2:	a4 97       	sbiw	r28, 0x24	; 36
    2cf4:	8f 83       	std	Y+7, r24	; 0x07
    2cf6:	98 87       	std	Y+8, r25	; 0x08
    2cf8:	a9 87       	std	Y+9, r26	; 0x09
    2cfa:	ba 87       	std	Y+10, r27	; 0x0a
    2cfc:	a8 96       	adiw	r28, 0x28	; 40
    2cfe:	8c ad       	ldd	r24, Y+60	; 0x3c
    2d00:	9d ad       	ldd	r25, Y+61	; 0x3d
    2d02:	ae ad       	ldd	r26, Y+62	; 0x3e
    2d04:	bf ad       	ldd	r27, Y+63	; 0x3f
    2d06:	a8 97       	sbiw	r28, 0x28	; 40
    2d08:	8b 87       	std	Y+11, r24	; 0x0b
    2d0a:	9c 87       	std	Y+12, r25	; 0x0c
    2d0c:	ad 87       	std	Y+13, r26	; 0x0d
    2d0e:	be 87       	std	Y+14, r27	; 0x0e
    2d10:	ac 96       	adiw	r28, 0x2c	; 44
    2d12:	8c ad       	ldd	r24, Y+60	; 0x3c
    2d14:	9d ad       	ldd	r25, Y+61	; 0x3d
    2d16:	ae ad       	ldd	r26, Y+62	; 0x3e
    2d18:	bf ad       	ldd	r27, Y+63	; 0x3f
    2d1a:	ac 97       	sbiw	r28, 0x2c	; 44
    2d1c:	8f 87       	std	Y+15, r24	; 0x0f
    2d1e:	98 8b       	std	Y+16, r25	; 0x10
    2d20:	a9 8b       	std	Y+17, r26	; 0x11
    2d22:	ba 8b       	std	Y+18, r27	; 0x12
    2d24:	ad 96       	adiw	r28, 0x2d	; 45
    2d26:	8f ad       	ldd	r24, Y+63	; 0x3f
    2d28:	ad 97       	sbiw	r28, 0x2d	; 45
    2d2a:	8b 8b       	std	Y+19, r24	; 0x13
    2d2c:	e1 96       	adiw	r28, 0x31	; 49
    2d2e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2d30:	9d ad       	ldd	r25, Y+61	; 0x3d
    2d32:	ae ad       	ldd	r26, Y+62	; 0x3e
    2d34:	bf ad       	ldd	r27, Y+63	; 0x3f
    2d36:	e1 97       	sbiw	r28, 0x31	; 49
    2d38:	8c 8b       	std	Y+20, r24	; 0x14
    2d3a:	9d 8b       	std	Y+21, r25	; 0x15
    2d3c:	ae 8b       	std	Y+22, r26	; 0x16
    2d3e:	bf 8b       	std	Y+23, r27	; 0x17
    2d40:	e5 96       	adiw	r28, 0x35	; 53
    2d42:	8c ad       	ldd	r24, Y+60	; 0x3c
    2d44:	9d ad       	ldd	r25, Y+61	; 0x3d
    2d46:	ae ad       	ldd	r26, Y+62	; 0x3e
    2d48:	bf ad       	ldd	r27, Y+63	; 0x3f
    2d4a:	e5 97       	sbiw	r28, 0x35	; 53
    2d4c:	88 8f       	std	Y+24, r24	; 0x18
    2d4e:	99 8f       	std	Y+25, r25	; 0x19
    2d50:	aa 8f       	std	Y+26, r26	; 0x1a
    2d52:	bb 8f       	std	Y+27, r27	; 0x1b
    2d54:	e7 96       	adiw	r28, 0x37	; 55
    2d56:	8e ad       	ldd	r24, Y+62	; 0x3e
    2d58:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d5a:	e7 97       	sbiw	r28, 0x37	; 55
    2d5c:	9d 8f       	std	Y+29, r25	; 0x1d
    2d5e:	8c 8f       	std	Y+28, r24	; 0x1c
    2d60:	a8 01       	movw	r20, r16
    2d62:	be 01       	movw	r22, r28
    2d64:	6f 5f       	subi	r22, 0xFF	; 255
    2d66:	7f 4f       	sbci	r23, 0xFF	; 255
    2d68:	c7 01       	movw	r24, r14
    2d6a:	0e 94 99 12 	call	0x2532	; 0x2532 <_ZN5SDLib4FileC1E6SdFilePKc>
    2d6e:	c7 01       	movw	r24, r14
    2d70:	ca 58       	subi	r28, 0x8A	; 138
    2d72:	df 4f       	sbci	r29, 0xFF	; 255
    2d74:	0f b6       	in	r0, 0x3f	; 63
    2d76:	f8 94       	cli
    2d78:	de bf       	out	0x3e, r29	; 62
    2d7a:	0f be       	out	0x3f, r0	; 63
    2d7c:	cd bf       	out	0x3d, r28	; 61
    2d7e:	df 91       	pop	r29
    2d80:	cf 91       	pop	r28
    2d82:	1f 91       	pop	r17
    2d84:	0f 91       	pop	r16
    2d86:	ff 90       	pop	r15
    2d88:	ef 90       	pop	r14
    2d8a:	df 90       	pop	r13
    2d8c:	08 95       	ret

00002d8e <_ZN5SDLib7SDClass6existsEPKc>:
    2d8e:	fb 01       	movw	r30, r22
    2d90:	bc 01       	movw	r22, r24
    2d92:	66 5d       	subi	r22, 0xD6	; 214
    2d94:	7f 4f       	sbci	r23, 0xFF	; 255
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	48 e8       	ldi	r20, 0x88	; 136
    2d9c:	53 e1       	ldi	r21, 0x13	; 19
    2d9e:	cf 01       	movw	r24, r30
    2da0:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>
    2da4:	08 95       	ret

00002da6 <_ZN5SDLib7SDClass6removeEPKc>:
    2da6:	fb 01       	movw	r30, r22
    2da8:	bc 01       	movw	r22, r24
    2daa:	66 5d       	subi	r22, 0xD6	; 214
    2dac:	7f 4f       	sbci	r23, 0xFF	; 255
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	46 eb       	ldi	r20, 0xB6	; 182
    2db4:	53 e1       	ldi	r21, 0x13	; 19
    2db6:	cf 01       	movw	r24, r30
    2db8:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>
    2dbc:	08 95       	ret

00002dbe <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:

  SDClass SD;

};
    2dbe:	6f ef       	ldi	r22, 0xFF	; 255
    2dc0:	7f ef       	ldi	r23, 0xFF	; 255
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <_Z41__static_initialization_and_destruction_0ii>
    2dca:	08 95       	ret

00002dcc <_ZL7spiSendh>:

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    2dcc:	8e bd       	out	0x2e, r24	; 46
    2dce:	00 00       	nop
    2dd0:	0d b4       	in	r0, 0x2d	; 45
    2dd2:	07 fe       	sbrs	r0, 7
    2dd4:	fd cf       	rjmp	.-6      	; 0x2dd0 <_ZL7spiSendh+0x4>
    2dd6:	8e b5       	in	r24, 0x2e	; 46
    2dd8:	08 95       	ret

00002dda <_ZL6spiRecv>:
    2dda:	8f ef       	ldi	r24, 0xFF	; 255
    2ddc:	8e bd       	out	0x2e, r24	; 46
    2dde:	00 00       	nop
    2de0:	0d b4       	in	r0, 0x2d	; 45
    2de2:	07 fe       	sbrs	r0, 7
    2de4:	fd cf       	rjmp	.-6      	; 0x2de0 <_ZL6spiRecv+0x6>
    2de6:	8e b5       	in	r24, 0x2e	; 46
    2de8:	08 95       	ret

00002dea <_Z41__static_initialization_and_destruction_0ii>:
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	41 f4       	brne	.+16     	; 0x2dfe <_Z41__static_initialization_and_destruction_0ii+0x14>
    2dee:	6f 3f       	cpi	r22, 0xFF	; 255
    2df0:	7f 4f       	sbci	r23, 0xFF	; 255
    2df2:	29 f4       	brne	.+10     	; 0x2dfe <_Z41__static_initialization_and_destruction_0ii+0x14>
    2df4:	ea ef       	ldi	r30, 0xFA	; 250
    2df6:	f2 e0       	ldi	r31, 0x02	; 2
    2df8:	80 e5       	ldi	r24, 0x50	; 80
    2dfa:	80 83       	st	Z, r24
    2dfc:	11 82       	std	Z+1, r1	; 0x01
    2dfe:	08 95       	ret

00002e00 <_ZN7Sd2Card14chipSelectHighEv>:
    2e00:	61 e0       	ldi	r22, 0x01	; 1
    2e02:	fc 01       	movw	r30, r24
    2e04:	84 81       	ldd	r24, Z+4	; 0x04
    2e06:	0e 94 ef 07 	call	0xfde	; 0xfde <digitalWrite>
    2e0a:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <_ZL20chip_select_asserted>
    2e0e:	88 23       	and	r24, r24
    2e10:	a1 f0       	breq	.+40     	; 0x2e3a <_ZN7Sd2Card14chipSelectHighEv+0x3a>
    2e12:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <_ZL20chip_select_asserted>
    2e16:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <_ZN8SPIClass13interruptModeE>
    2e1a:	88 23       	and	r24, r24
    2e1c:	71 f0       	breq	.+28     	; 0x2e3a <_ZN7Sd2Card14chipSelectHighEv+0x3a>
    2e1e:	9f b7       	in	r25, 0x3f	; 63
    2e20:	f8 94       	cli
    2e22:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <_ZN8SPIClass13interruptModeE>
    2e26:	81 30       	cpi	r24, 0x01	; 1
    2e28:	29 f4       	brne	.+10     	; 0x2e34 <_ZN7Sd2Card14chipSelectHighEv+0x34>
    2e2a:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <_ZN8SPIClass13interruptSaveE>
    2e2e:	8d bb       	out	0x1d, r24	; 29
    2e30:	9f bf       	out	0x3f, r25	; 63
    2e32:	08 95       	ret
    2e34:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <_ZN8SPIClass13interruptSaveE>
    2e38:	8f bf       	out	0x3f, r24	; 63
    2e3a:	08 95       	ret

00002e3c <_ZN7Sd2Card13chipSelectLowEv>:
    2e3c:	20 91 f9 02 	lds	r18, 0x02F9	; 0x8002f9 <_ZL20chip_select_asserted>
    2e40:	21 11       	cpse	r18, r1
    2e42:	20 c0       	rjmp	.+64     	; 0x2e84 <_ZN7Sd2Card13chipSelectLowEv+0x48>
    2e44:	21 e0       	ldi	r18, 0x01	; 1
    2e46:	20 93 f9 02 	sts	0x02F9, r18	; 0x8002f9 <_ZL20chip_select_asserted>
    2e4a:	30 91 fa 02 	lds	r19, 0x02FA	; 0x8002fa <_ZL8settings>
    2e4e:	20 91 fb 02 	lds	r18, 0x02FB	; 0x8002fb <_ZL8settings+0x1>
    2e52:	40 91 07 05 	lds	r20, 0x0507	; 0x800507 <_ZN8SPIClass13interruptModeE>
    2e56:	44 23       	and	r20, r20
    2e58:	99 f0       	breq	.+38     	; 0x2e80 <_ZN7Sd2Card13chipSelectLowEv+0x44>
    2e5a:	4f b7       	in	r20, 0x3f	; 63
    2e5c:	f8 94       	cli
    2e5e:	50 91 07 05 	lds	r21, 0x0507	; 0x800507 <_ZN8SPIClass13interruptModeE>
    2e62:	51 30       	cpi	r21, 0x01	; 1
    2e64:	59 f4       	brne	.+22     	; 0x2e7c <_ZN7Sd2Card13chipSelectLowEv+0x40>
    2e66:	5d b3       	in	r21, 0x1d	; 29
    2e68:	50 93 05 05 	sts	0x0505, r21	; 0x800505 <_ZN8SPIClass13interruptSaveE>
    2e6c:	6d b3       	in	r22, 0x1d	; 29
    2e6e:	50 91 06 05 	lds	r21, 0x0506	; 0x800506 <_ZN8SPIClass13interruptMaskE>
    2e72:	50 95       	com	r21
    2e74:	56 23       	and	r21, r22
    2e76:	5d bb       	out	0x1d, r21	; 29
    2e78:	4f bf       	out	0x3f, r20	; 63
    2e7a:	02 c0       	rjmp	.+4      	; 0x2e80 <_ZN7Sd2Card13chipSelectLowEv+0x44>
    2e7c:	40 93 05 05 	sts	0x0505, r20	; 0x800505 <_ZN8SPIClass13interruptSaveE>
    2e80:	3c bd       	out	0x2c, r19	; 44
    2e82:	2d bd       	out	0x2d, r18	; 45
    2e84:	60 e0       	ldi	r22, 0x00	; 0
    2e86:	fc 01       	movw	r30, r24
    2e88:	84 81       	ldd	r24, Z+4	; 0x04
    2e8a:	0e 94 ef 07 	call	0xfde	; 0xfde <digitalWrite>
    2e8e:	08 95       	ret

00002e90 <_ZN7Sd2Card7readEndEv>:
    2e90:	cf 93       	push	r28
    2e92:	df 93       	push	r29
    2e94:	ec 01       	movw	r28, r24
    2e96:	8e 81       	ldd	r24, Y+6	; 0x06
    2e98:	88 23       	and	r24, r24
    2e9a:	89 f0       	breq	.+34     	; 0x2ebe <_ZN7Sd2Card7readEndEv+0x2e>
    2e9c:	8f 81       	ldd	r24, Y+7	; 0x07
    2e9e:	98 85       	ldd	r25, Y+8	; 0x08
    2ea0:	9c 01       	movw	r18, r24
    2ea2:	2f 5f       	subi	r18, 0xFF	; 255
    2ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea6:	38 87       	std	Y+8, r19	; 0x08
    2ea8:	2f 83       	std	Y+7, r18	; 0x07
    2eaa:	82 30       	cpi	r24, 0x02	; 2
    2eac:	92 40       	sbci	r25, 0x02	; 2
    2eae:	18 f4       	brcc	.+6      	; 0x2eb6 <_ZN7Sd2Card7readEndEv+0x26>
    2eb0:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZL6spiRecv>
    2eb4:	f3 cf       	rjmp	.-26     	; 0x2e9c <_ZN7Sd2Card7readEndEv+0xc>
    2eb6:	ce 01       	movw	r24, r28
    2eb8:	0e 94 00 17 	call	0x2e00	; 0x2e00 <_ZN7Sd2Card14chipSelectHighEv>
    2ebc:	1e 82       	std	Y+6, r1	; 0x06
    2ebe:	df 91       	pop	r29
    2ec0:	cf 91       	pop	r28
    2ec2:	08 95       	ret

00002ec4 <_ZN7Sd2Card10setSckRateEh>:
    2ec4:	67 30       	cpi	r22, 0x07	; 7
    2ec6:	28 f0       	brcs	.+10     	; 0x2ed2 <_ZN7Sd2Card10setSckRateEh+0xe>
    2ec8:	26 e1       	ldi	r18, 0x16	; 22
    2eca:	fc 01       	movw	r30, r24
    2ecc:	25 83       	std	Z+5, r18	; 0x05
    2ece:	80 e0       	ldi	r24, 0x00	; 0
    2ed0:	08 95       	ret
    2ed2:	62 30       	cpi	r22, 0x02	; 2
    2ed4:	d1 f0       	breq	.+52     	; 0x2f0a <_ZN7Sd2Card10setSckRateEh+0x46>
    2ed6:	28 f4       	brcc	.+10     	; 0x2ee2 <_ZN7Sd2Card10setSckRateEh+0x1e>
    2ed8:	66 23       	and	r22, r22
    2eda:	49 f0       	breq	.+18     	; 0x2eee <_ZN7Sd2Card10setSckRateEh+0x2a>
    2edc:	61 30       	cpi	r22, 0x01	; 1
    2ede:	71 f0       	breq	.+28     	; 0x2efc <_ZN7Sd2Card10setSckRateEh+0x38>
    2ee0:	30 c0       	rjmp	.+96     	; 0x2f42 <_ZN7Sd2Card10setSckRateEh+0x7e>
    2ee2:	64 30       	cpi	r22, 0x04	; 4
    2ee4:	01 f1       	breq	.+64     	; 0x2f26 <_ZN7Sd2Card10setSckRateEh+0x62>
    2ee6:	c0 f0       	brcs	.+48     	; 0x2f18 <_ZN7Sd2Card10setSckRateEh+0x54>
    2ee8:	65 30       	cpi	r22, 0x05	; 5
    2eea:	21 f1       	breq	.+72     	; 0x2f34 <_ZN7Sd2Card10setSckRateEh+0x70>
    2eec:	2a c0       	rjmp	.+84     	; 0x2f42 <_ZN7Sd2Card10setSckRateEh+0x7e>
    2eee:	80 e5       	ldi	r24, 0x50	; 80
    2ef0:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <_ZL8settings>
    2ef4:	81 e0       	ldi	r24, 0x01	; 1
    2ef6:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <_ZL8settings+0x1>
    2efa:	08 95       	ret
    2efc:	80 e5       	ldi	r24, 0x50	; 80
    2efe:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <_ZL8settings>
    2f02:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <_ZL8settings+0x1>
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	08 95       	ret
    2f0a:	81 e5       	ldi	r24, 0x51	; 81
    2f0c:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <_ZL8settings>
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <_ZL8settings+0x1>
    2f16:	08 95       	ret
    2f18:	81 e5       	ldi	r24, 0x51	; 81
    2f1a:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <_ZL8settings>
    2f1e:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <_ZL8settings+0x1>
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	08 95       	ret
    2f26:	82 e5       	ldi	r24, 0x52	; 82
    2f28:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <_ZL8settings>
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <_ZL8settings+0x1>
    2f32:	08 95       	ret
    2f34:	82 e5       	ldi	r24, 0x52	; 82
    2f36:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <_ZL8settings>
    2f3a:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <_ZL8settings+0x1>
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	08 95       	ret
    2f42:	83 e5       	ldi	r24, 0x53	; 83
    2f44:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <_ZL8settings>
    2f48:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <_ZL8settings+0x1>
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	08 95       	ret

00002f50 <_ZN7Sd2Card11waitNotBusyEj>:
    2f50:	0f 93       	push	r16
    2f52:	1f 93       	push	r17
    2f54:	cf 93       	push	r28
    2f56:	df 93       	push	r29
    2f58:	eb 01       	movw	r28, r22
    2f5a:	0e 94 75 07 	call	0xeea	; 0xeea <millis>
    2f5e:	8b 01       	movw	r16, r22
    2f60:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZL6spiRecv>
    2f64:	8f 3f       	cpi	r24, 0xFF	; 255
    2f66:	49 f0       	breq	.+18     	; 0x2f7a <_ZN7Sd2Card11waitNotBusyEj+0x2a>
    2f68:	0e 94 75 07 	call	0xeea	; 0xeea <millis>
    2f6c:	60 1b       	sub	r22, r16
    2f6e:	71 0b       	sbc	r23, r17
    2f70:	6c 17       	cp	r22, r28
    2f72:	7d 07       	cpc	r23, r29
    2f74:	a8 f3       	brcs	.-22     	; 0x2f60 <_ZN7Sd2Card11waitNotBusyEj+0x10>
    2f76:	80 e0       	ldi	r24, 0x00	; 0
    2f78:	01 c0       	rjmp	.+2      	; 0x2f7c <_ZN7Sd2Card11waitNotBusyEj+0x2c>
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	df 91       	pop	r29
    2f7e:	cf 91       	pop	r28
    2f80:	1f 91       	pop	r17
    2f82:	0f 91       	pop	r16
    2f84:	08 95       	ret

00002f86 <_ZN7Sd2Card11cardCommandEhm>:
    2f86:	cf 92       	push	r12
    2f88:	df 92       	push	r13
    2f8a:	ef 92       	push	r14
    2f8c:	ff 92       	push	r15
    2f8e:	0f 93       	push	r16
    2f90:	1f 93       	push	r17
    2f92:	cf 93       	push	r28
    2f94:	df 93       	push	r29
    2f96:	8c 01       	movw	r16, r24
    2f98:	d6 2f       	mov	r29, r22
    2f9a:	69 01       	movw	r12, r18
    2f9c:	7a 01       	movw	r14, r20
    2f9e:	0e 94 48 17 	call	0x2e90	; 0x2e90 <_ZN7Sd2Card7readEndEv>
    2fa2:	c8 01       	movw	r24, r16
    2fa4:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN7Sd2Card13chipSelectLowEv>
    2fa8:	6c e2       	ldi	r22, 0x2C	; 44
    2faa:	71 e0       	ldi	r23, 0x01	; 1
    2fac:	c8 01       	movw	r24, r16
    2fae:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <_ZN7Sd2Card11waitNotBusyEj>
    2fb2:	8d 2f       	mov	r24, r29
    2fb4:	80 64       	ori	r24, 0x40	; 64
    2fb6:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <_ZL7spiSendh>
    2fba:	c8 e1       	ldi	r28, 0x18	; 24
    2fbc:	cc 23       	and	r28, r28
    2fbe:	74 f0       	brlt	.+28     	; 0x2fdc <_ZN7Sd2Card11cardCommandEhm+0x56>
    2fc0:	d7 01       	movw	r26, r14
    2fc2:	c6 01       	movw	r24, r12
    2fc4:	0c 2e       	mov	r0, r28
    2fc6:	04 c0       	rjmp	.+8      	; 0x2fd0 <_ZN7Sd2Card11cardCommandEhm+0x4a>
    2fc8:	b6 95       	lsr	r27
    2fca:	a7 95       	ror	r26
    2fcc:	97 95       	ror	r25
    2fce:	87 95       	ror	r24
    2fd0:	0a 94       	dec	r0
    2fd2:	d2 f7       	brpl	.-12     	; 0x2fc8 <_ZN7Sd2Card11cardCommandEhm+0x42>
    2fd4:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <_ZL7spiSendh>
    2fd8:	c8 50       	subi	r28, 0x08	; 8
    2fda:	f0 cf       	rjmp	.-32     	; 0x2fbc <_ZN7Sd2Card11cardCommandEhm+0x36>
    2fdc:	dd 23       	and	r29, r29
    2fde:	11 f0       	breq	.+4      	; 0x2fe4 <_ZN7Sd2Card11cardCommandEhm+0x5e>
    2fe0:	8f ef       	ldi	r24, 0xFF	; 255
    2fe2:	01 c0       	rjmp	.+2      	; 0x2fe6 <_ZN7Sd2Card11cardCommandEhm+0x60>
    2fe4:	85 e9       	ldi	r24, 0x95	; 149
    2fe6:	d8 30       	cpi	r29, 0x08	; 8
    2fe8:	09 f4       	brne	.+2      	; 0x2fec <_ZN7Sd2Card11cardCommandEhm+0x66>
    2fea:	87 e8       	ldi	r24, 0x87	; 135
    2fec:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <_ZL7spiSendh>
    2ff0:	c0 e0       	ldi	r28, 0x00	; 0
    2ff2:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZL6spiRecv>
    2ff6:	f8 01       	movw	r30, r16
    2ff8:	82 87       	std	Z+10, r24	; 0x0a
    2ffa:	88 23       	and	r24, r24
    2ffc:	24 f4       	brge	.+8      	; 0x3006 <_ZN7Sd2Card11cardCommandEhm+0x80>
    2ffe:	cf 3f       	cpi	r28, 0xFF	; 255
    3000:	21 f4       	brne	.+8      	; 0x300a <_ZN7Sd2Card11cardCommandEhm+0x84>
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	03 c0       	rjmp	.+6      	; 0x300c <_ZN7Sd2Card11cardCommandEhm+0x86>
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	01 c0       	rjmp	.+2      	; 0x300c <_ZN7Sd2Card11cardCommandEhm+0x86>
    300a:	91 e0       	ldi	r25, 0x01	; 1
    300c:	99 23       	and	r25, r25
    300e:	11 f0       	breq	.+4      	; 0x3014 <_ZN7Sd2Card11cardCommandEhm+0x8e>
    3010:	cf 5f       	subi	r28, 0xFF	; 255
    3012:	ef cf       	rjmp	.-34     	; 0x2ff2 <_ZN7Sd2Card11cardCommandEhm+0x6c>
    3014:	df 91       	pop	r29
    3016:	cf 91       	pop	r28
    3018:	1f 91       	pop	r17
    301a:	0f 91       	pop	r16
    301c:	ff 90       	pop	r15
    301e:	ef 90       	pop	r14
    3020:	df 90       	pop	r13
    3022:	cf 90       	pop	r12
    3024:	08 95       	ret

00003026 <_ZN7Sd2Card4initEhh>:
    3026:	8f 92       	push	r8
    3028:	9f 92       	push	r9
    302a:	af 92       	push	r10
    302c:	bf 92       	push	r11
    302e:	ef 92       	push	r14
    3030:	ff 92       	push	r15
    3032:	0f 93       	push	r16
    3034:	1f 93       	push	r17
    3036:	cf 93       	push	r28
    3038:	df 93       	push	r29
    303a:	ec 01       	movw	r28, r24
    303c:	e6 2e       	mov	r14, r22
    303e:	1b 86       	std	Y+11, r1	; 0x0b
    3040:	19 86       	std	Y+9, r1	; 0x09
    3042:	1e 82       	std	Y+6, r1	; 0x06
    3044:	1d 82       	std	Y+5, r1	; 0x05
    3046:	4c 83       	std	Y+4, r20	; 0x04
    3048:	0e 94 75 07 	call	0xeea	; 0xeea <millis>
    304c:	8b 01       	movw	r16, r22
    304e:	61 e0       	ldi	r22, 0x01	; 1
    3050:	8c 81       	ldd	r24, Y+4	; 0x04
    3052:	0e 94 b0 07 	call	0xf60	; 0xf60 <pinMode>
    3056:	61 e0       	ldi	r22, 0x01	; 1
    3058:	8c 81       	ldd	r24, Y+4	; 0x04
    305a:	0e 94 ef 07 	call	0xfde	; 0xfde <digitalWrite>
    305e:	0e 94 3d 28 	call	0x507a	; 0x507a <_ZN8SPIClass5beginEv>
    3062:	82 e5       	ldi	r24, 0x52	; 82
    3064:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <_ZL8settings>
    3068:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <_ZL8settings+0x1>
    306c:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <_ZN8SPIClass13interruptModeE>
    3070:	88 23       	and	r24, r24
    3072:	99 f0       	breq	.+38     	; 0x309a <_ZN7Sd2Card4initEhh+0x74>
    3074:	8f b7       	in	r24, 0x3f	; 63
    3076:	f8 94       	cli
    3078:	90 91 07 05 	lds	r25, 0x0507	; 0x800507 <_ZN8SPIClass13interruptModeE>
    307c:	91 30       	cpi	r25, 0x01	; 1
    307e:	59 f4       	brne	.+22     	; 0x3096 <_ZN7Sd2Card4initEhh+0x70>
    3080:	9d b3       	in	r25, 0x1d	; 29
    3082:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <_ZN8SPIClass13interruptSaveE>
    3086:	2d b3       	in	r18, 0x1d	; 29
    3088:	90 91 06 05 	lds	r25, 0x0506	; 0x800506 <_ZN8SPIClass13interruptMaskE>
    308c:	90 95       	com	r25
    308e:	92 23       	and	r25, r18
    3090:	9d bb       	out	0x1d, r25	; 29
    3092:	8f bf       	out	0x3f, r24	; 63
    3094:	02 c0       	rjmp	.+4      	; 0x309a <_ZN7Sd2Card4initEhh+0x74>
    3096:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <_ZN8SPIClass13interruptSaveE>
    309a:	82 e5       	ldi	r24, 0x52	; 82
    309c:	8c bd       	out	0x2c, r24	; 44
    309e:	1d bc       	out	0x2d, r1	; 45
    30a0:	f1 2c       	mov	r15, r1
    30a2:	89 e0       	ldi	r24, 0x09	; 9
    30a4:	8f 15       	cp	r24, r15
    30a6:	28 f0       	brcs	.+10     	; 0x30b2 <_ZN7Sd2Card4initEhh+0x8c>
    30a8:	8f ef       	ldi	r24, 0xFF	; 255
    30aa:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <_ZL7spiSendh>
    30ae:	f3 94       	inc	r15
    30b0:	f8 cf       	rjmp	.-16     	; 0x30a2 <_ZN7Sd2Card4initEhh+0x7c>
    30b2:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <_ZN8SPIClass13interruptModeE>
    30b6:	88 23       	and	r24, r24
    30b8:	71 f0       	breq	.+28     	; 0x30d6 <_ZN7Sd2Card4initEhh+0xb0>
    30ba:	9f b7       	in	r25, 0x3f	; 63
    30bc:	f8 94       	cli
    30be:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <_ZN8SPIClass13interruptModeE>
    30c2:	81 30       	cpi	r24, 0x01	; 1
    30c4:	29 f4       	brne	.+10     	; 0x30d0 <_ZN7Sd2Card4initEhh+0xaa>
    30c6:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <_ZN8SPIClass13interruptSaveE>
    30ca:	8d bb       	out	0x1d, r24	; 29
    30cc:	9f bf       	out	0x3f, r25	; 63
    30ce:	03 c0       	rjmp	.+6      	; 0x30d6 <_ZN7Sd2Card4initEhh+0xb0>
    30d0:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <_ZN8SPIClass13interruptSaveE>
    30d4:	8f bf       	out	0x3f, r24	; 63
    30d6:	ce 01       	movw	r24, r28
    30d8:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN7Sd2Card13chipSelectLowEv>
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	a9 01       	movw	r20, r18
    30e2:	60 e0       	ldi	r22, 0x00	; 0
    30e4:	ce 01       	movw	r24, r28
    30e6:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_ZN7Sd2Card11cardCommandEhm>
    30ea:	8a 87       	std	Y+10, r24	; 0x0a
    30ec:	81 30       	cpi	r24, 0x01	; 1
    30ee:	51 f0       	breq	.+20     	; 0x3104 <_ZN7Sd2Card4initEhh+0xde>
    30f0:	0e 94 75 07 	call	0xeea	; 0xeea <millis>
    30f4:	60 1b       	sub	r22, r16
    30f6:	71 0b       	sbc	r23, r17
    30f8:	61 3d       	cpi	r22, 0xD1	; 209
    30fa:	77 40       	sbci	r23, 0x07	; 7
    30fc:	78 f3       	brcs	.-34     	; 0x30dc <_ZN7Sd2Card4initEhh+0xb6>
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	8d 83       	std	Y+5, r24	; 0x05
    3102:	69 c0       	rjmp	.+210    	; 0x31d6 <_ZN7Sd2Card4initEhh+0x1b0>
    3104:	2a ea       	ldi	r18, 0xAA	; 170
    3106:	31 e0       	ldi	r19, 0x01	; 1
    3108:	40 e0       	ldi	r20, 0x00	; 0
    310a:	50 e0       	ldi	r21, 0x00	; 0
    310c:	68 e0       	ldi	r22, 0x08	; 8
    310e:	ce 01       	movw	r24, r28
    3110:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_ZN7Sd2Card11cardCommandEhm>
    3114:	82 ff       	sbrs	r24, 2
    3116:	03 c0       	rjmp	.+6      	; 0x311e <_ZN7Sd2Card4initEhh+0xf8>
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	8b 87       	std	Y+11, r24	; 0x0b
    311c:	11 c0       	rjmp	.+34     	; 0x3140 <_ZN7Sd2Card4initEhh+0x11a>
    311e:	f1 2c       	mov	r15, r1
    3120:	83 e0       	ldi	r24, 0x03	; 3
    3122:	8f 15       	cp	r24, r15
    3124:	28 f0       	brcs	.+10     	; 0x3130 <_ZN7Sd2Card4initEhh+0x10a>
    3126:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZL6spiRecv>
    312a:	8a 87       	std	Y+10, r24	; 0x0a
    312c:	f3 94       	inc	r15
    312e:	f8 cf       	rjmp	.-16     	; 0x3120 <_ZN7Sd2Card4initEhh+0xfa>
    3130:	8a 85       	ldd	r24, Y+10	; 0x0a
    3132:	8a 3a       	cpi	r24, 0xAA	; 170
    3134:	19 f0       	breq	.+6      	; 0x313c <_ZN7Sd2Card4initEhh+0x116>
    3136:	82 e0       	ldi	r24, 0x02	; 2
    3138:	8d 83       	std	Y+5, r24	; 0x05
    313a:	4d c0       	rjmp	.+154    	; 0x31d6 <_ZN7Sd2Card4initEhh+0x1b0>
    313c:	82 e0       	ldi	r24, 0x02	; 2
    313e:	8b 87       	std	Y+11, r24	; 0x0b
    3140:	8b 85       	ldd	r24, Y+11	; 0x0b
    3142:	82 30       	cpi	r24, 0x02	; 2
    3144:	31 f4       	brne	.+12     	; 0x3152 <_ZN7Sd2Card4initEhh+0x12c>
    3146:	81 2c       	mov	r8, r1
    3148:	91 2c       	mov	r9, r1
    314a:	54 01       	movw	r10, r8
    314c:	68 94       	set
    314e:	b6 f8       	bld	r11, 6
    3150:	03 c0       	rjmp	.+6      	; 0x3158 <_ZN7Sd2Card4initEhh+0x132>
    3152:	81 2c       	mov	r8, r1
    3154:	91 2c       	mov	r9, r1
    3156:	54 01       	movw	r10, r8
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	a9 01       	movw	r20, r18
    315e:	67 e3       	ldi	r22, 0x37	; 55
    3160:	ce 01       	movw	r24, r28
    3162:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_ZN7Sd2Card11cardCommandEhm>
    3166:	a5 01       	movw	r20, r10
    3168:	94 01       	movw	r18, r8
    316a:	69 e2       	ldi	r22, 0x29	; 41
    316c:	ce 01       	movw	r24, r28
    316e:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_ZN7Sd2Card11cardCommandEhm>
    3172:	8a 87       	std	Y+10, r24	; 0x0a
    3174:	88 23       	and	r24, r24
    3176:	51 f0       	breq	.+20     	; 0x318c <_ZN7Sd2Card4initEhh+0x166>
    3178:	0e 94 75 07 	call	0xeea	; 0xeea <millis>
    317c:	60 1b       	sub	r22, r16
    317e:	71 0b       	sbc	r23, r17
    3180:	61 3d       	cpi	r22, 0xD1	; 209
    3182:	77 40       	sbci	r23, 0x07	; 7
    3184:	48 f3       	brcs	.-46     	; 0x3158 <_ZN7Sd2Card4initEhh+0x132>
    3186:	88 e0       	ldi	r24, 0x08	; 8
    3188:	8d 83       	std	Y+5, r24	; 0x05
    318a:	25 c0       	rjmp	.+74     	; 0x31d6 <_ZN7Sd2Card4initEhh+0x1b0>
    318c:	8b 85       	ldd	r24, Y+11	; 0x0b
    318e:	82 30       	cpi	r24, 0x02	; 2
    3190:	d1 f4       	brne	.+52     	; 0x31c6 <_ZN7Sd2Card4initEhh+0x1a0>
    3192:	20 e0       	ldi	r18, 0x00	; 0
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	a9 01       	movw	r20, r18
    3198:	6a e3       	ldi	r22, 0x3A	; 58
    319a:	ce 01       	movw	r24, r28
    319c:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_ZN7Sd2Card11cardCommandEhm>
    31a0:	88 23       	and	r24, r24
    31a2:	19 f0       	breq	.+6      	; 0x31aa <_ZN7Sd2Card4initEhh+0x184>
    31a4:	86 e0       	ldi	r24, 0x06	; 6
    31a6:	8d 83       	std	Y+5, r24	; 0x05
    31a8:	16 c0       	rjmp	.+44     	; 0x31d6 <_ZN7Sd2Card4initEhh+0x1b0>
    31aa:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZL6spiRecv>
    31ae:	80 7c       	andi	r24, 0xC0	; 192
    31b0:	80 3c       	cpi	r24, 0xC0	; 192
    31b2:	11 f4       	brne	.+4      	; 0x31b8 <_ZN7Sd2Card4initEhh+0x192>
    31b4:	83 e0       	ldi	r24, 0x03	; 3
    31b6:	8b 87       	std	Y+11, r24	; 0x0b
    31b8:	10 e0       	ldi	r17, 0x00	; 0
    31ba:	13 30       	cpi	r17, 0x03	; 3
    31bc:	20 f4       	brcc	.+8      	; 0x31c6 <_ZN7Sd2Card4initEhh+0x1a0>
    31be:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZL6spiRecv>
    31c2:	1f 5f       	subi	r17, 0xFF	; 255
    31c4:	fa cf       	rjmp	.-12     	; 0x31ba <_ZN7Sd2Card4initEhh+0x194>
    31c6:	ce 01       	movw	r24, r28
    31c8:	0e 94 00 17 	call	0x2e00	; 0x2e00 <_ZN7Sd2Card14chipSelectHighEv>
    31cc:	6e 2d       	mov	r22, r14
    31ce:	ce 01       	movw	r24, r28
    31d0:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <_ZN7Sd2Card10setSckRateEh>
    31d4:	04 c0       	rjmp	.+8      	; 0x31de <_ZN7Sd2Card4initEhh+0x1b8>
    31d6:	ce 01       	movw	r24, r28
    31d8:	0e 94 00 17 	call	0x2e00	; 0x2e00 <_ZN7Sd2Card14chipSelectHighEv>
    31dc:	80 e0       	ldi	r24, 0x00	; 0
    31de:	df 91       	pop	r29
    31e0:	cf 91       	pop	r28
    31e2:	1f 91       	pop	r17
    31e4:	0f 91       	pop	r16
    31e6:	ff 90       	pop	r15
    31e8:	ef 90       	pop	r14
    31ea:	bf 90       	pop	r11
    31ec:	af 90       	pop	r10
    31ee:	9f 90       	pop	r9
    31f0:	8f 90       	pop	r8
    31f2:	08 95       	ret

000031f4 <_ZN7Sd2Card14waitStartBlockEv>:
    31f4:	0f 93       	push	r16
    31f6:	1f 93       	push	r17
    31f8:	cf 93       	push	r28
    31fa:	df 93       	push	r29
    31fc:	ec 01       	movw	r28, r24
    31fe:	0e 94 75 07 	call	0xeea	; 0xeea <millis>
    3202:	8b 01       	movw	r16, r22
    3204:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZL6spiRecv>
    3208:	8a 87       	std	Y+10, r24	; 0x0a
    320a:	8f 3f       	cpi	r24, 0xFF	; 255
    320c:	51 f4       	brne	.+20     	; 0x3222 <_ZN7Sd2Card14waitStartBlockEv+0x2e>
    320e:	0e 94 75 07 	call	0xeea	; 0xeea <millis>
    3212:	60 1b       	sub	r22, r16
    3214:	71 0b       	sbc	r23, r17
    3216:	6d 32       	cpi	r22, 0x2D	; 45
    3218:	71 40       	sbci	r23, 0x01	; 1
    321a:	a0 f3       	brcs	.-24     	; 0x3204 <_ZN7Sd2Card14waitStartBlockEv+0x10>
    321c:	8f e0       	ldi	r24, 0x0F	; 15
    321e:	8d 83       	std	Y+5, r24	; 0x05
    3220:	04 c0       	rjmp	.+8      	; 0x322a <_ZN7Sd2Card14waitStartBlockEv+0x36>
    3222:	8e 3f       	cpi	r24, 0xFE	; 254
    3224:	39 f0       	breq	.+14     	; 0x3234 <_ZN7Sd2Card14waitStartBlockEv+0x40>
    3226:	8d e0       	ldi	r24, 0x0D	; 13
    3228:	8d 83       	std	Y+5, r24	; 0x05
    322a:	ce 01       	movw	r24, r28
    322c:	0e 94 00 17 	call	0x2e00	; 0x2e00 <_ZN7Sd2Card14chipSelectHighEv>
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	01 c0       	rjmp	.+2      	; 0x3236 <_ZN7Sd2Card14waitStartBlockEv+0x42>
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	df 91       	pop	r29
    3238:	cf 91       	pop	r28
    323a:	1f 91       	pop	r17
    323c:	0f 91       	pop	r16
    323e:	08 95       	ret

00003240 <_ZN7Sd2Card8readDataEmjjPh>:
    3240:	af 92       	push	r10
    3242:	bf 92       	push	r11
    3244:	cf 92       	push	r12
    3246:	df 92       	push	r13
    3248:	ef 92       	push	r14
    324a:	ff 92       	push	r15
    324c:	0f 93       	push	r16
    324e:	1f 93       	push	r17
    3250:	cf 93       	push	r28
    3252:	df 93       	push	r29
    3254:	ec 01       	movw	r28, r24
    3256:	69 01       	movw	r12, r18
    3258:	01 15       	cp	r16, r1
    325a:	11 05       	cpc	r17, r1
    325c:	09 f4       	brne	.+2      	; 0x3260 <_ZN7Sd2Card8readDataEmjjPh+0x20>
    325e:	6f c0       	rjmp	.+222    	; 0x333e <_ZN7Sd2Card8readDataEmjjPh+0xfe>
    3260:	c8 01       	movw	r24, r16
    3262:	82 0f       	add	r24, r18
    3264:	93 1f       	adc	r25, r19
    3266:	81 30       	cpi	r24, 0x01	; 1
    3268:	92 40       	sbci	r25, 0x02	; 2
    326a:	08 f0       	brcs	.+2      	; 0x326e <_ZN7Sd2Card8readDataEmjjPh+0x2e>
    326c:	63 c0       	rjmp	.+198    	; 0x3334 <_ZN7Sd2Card8readDataEmjjPh+0xf4>
    326e:	8e 81       	ldd	r24, Y+6	; 0x06
    3270:	88 23       	and	r24, r24
    3272:	71 f0       	breq	.+28     	; 0x3290 <_ZN7Sd2Card8readDataEmjjPh+0x50>
    3274:	88 81       	ld	r24, Y
    3276:	99 81       	ldd	r25, Y+1	; 0x01
    3278:	aa 81       	ldd	r26, Y+2	; 0x02
    327a:	bb 81       	ldd	r27, Y+3	; 0x03
    327c:	84 17       	cp	r24, r20
    327e:	95 07       	cpc	r25, r21
    3280:	a6 07       	cpc	r26, r22
    3282:	b7 07       	cpc	r27, r23
    3284:	29 f4       	brne	.+10     	; 0x3290 <_ZN7Sd2Card8readDataEmjjPh+0x50>
    3286:	8f 81       	ldd	r24, Y+7	; 0x07
    3288:	98 85       	ldd	r25, Y+8	; 0x08
    328a:	c8 16       	cp	r12, r24
    328c:	d9 06       	cpc	r13, r25
    328e:	20 f5       	brcc	.+72     	; 0x32d8 <_ZN7Sd2Card8readDataEmjjPh+0x98>
    3290:	48 83       	st	Y, r20
    3292:	59 83       	std	Y+1, r21	; 0x01
    3294:	6a 83       	std	Y+2, r22	; 0x02
    3296:	7b 83       	std	Y+3, r23	; 0x03
    3298:	8b 85       	ldd	r24, Y+11	; 0x0b
    329a:	83 30       	cpi	r24, 0x03	; 3
    329c:	49 f0       	breq	.+18     	; 0x32b0 <_ZN7Sd2Card8readDataEmjjPh+0x70>
    329e:	03 2e       	mov	r0, r19
    32a0:	39 e0       	ldi	r19, 0x09	; 9
    32a2:	44 0f       	add	r20, r20
    32a4:	55 1f       	adc	r21, r21
    32a6:	66 1f       	adc	r22, r22
    32a8:	77 1f       	adc	r23, r23
    32aa:	3a 95       	dec	r19
    32ac:	d1 f7       	brne	.-12     	; 0x32a2 <_ZN7Sd2Card8readDataEmjjPh+0x62>
    32ae:	30 2d       	mov	r19, r0
    32b0:	9a 01       	movw	r18, r20
    32b2:	ab 01       	movw	r20, r22
    32b4:	61 e1       	ldi	r22, 0x11	; 17
    32b6:	ce 01       	movw	r24, r28
    32b8:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_ZN7Sd2Card11cardCommandEhm>
    32bc:	88 23       	and	r24, r24
    32be:	19 f0       	breq	.+6      	; 0x32c6 <_ZN7Sd2Card8readDataEmjjPh+0x86>
    32c0:	83 e0       	ldi	r24, 0x03	; 3
    32c2:	8d 83       	std	Y+5, r24	; 0x05
    32c4:	37 c0       	rjmp	.+110    	; 0x3334 <_ZN7Sd2Card8readDataEmjjPh+0xf4>
    32c6:	ce 01       	movw	r24, r28
    32c8:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <_ZN7Sd2Card14waitStartBlockEv>
    32cc:	88 23       	and	r24, r24
    32ce:	91 f1       	breq	.+100    	; 0x3334 <_ZN7Sd2Card8readDataEmjjPh+0xf4>
    32d0:	18 86       	std	Y+8, r1	; 0x08
    32d2:	1f 82       	std	Y+7, r1	; 0x07
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	8e 83       	std	Y+6, r24	; 0x06
    32d8:	8f 81       	ldd	r24, Y+7	; 0x07
    32da:	98 85       	ldd	r25, Y+8	; 0x08
    32dc:	8c 15       	cp	r24, r12
    32de:	9d 05       	cpc	r25, r13
    32e0:	40 f4       	brcc	.+16     	; 0x32f2 <_ZN7Sd2Card8readDataEmjjPh+0xb2>
    32e2:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZL6spiRecv>
    32e6:	8f 81       	ldd	r24, Y+7	; 0x07
    32e8:	98 85       	ldd	r25, Y+8	; 0x08
    32ea:	01 96       	adiw	r24, 0x01	; 1
    32ec:	98 87       	std	Y+8, r25	; 0x08
    32ee:	8f 83       	std	Y+7, r24	; 0x07
    32f0:	f3 cf       	rjmp	.-26     	; 0x32d8 <_ZN7Sd2Card8readDataEmjjPh+0x98>
    32f2:	c1 2c       	mov	r12, r1
    32f4:	d1 2c       	mov	r13, r1
    32f6:	c0 16       	cp	r12, r16
    32f8:	d1 06       	cpc	r13, r17
    32fa:	58 f4       	brcc	.+22     	; 0x3312 <_ZN7Sd2Card8readDataEmjjPh+0xd2>
    32fc:	57 01       	movw	r10, r14
    32fe:	ac 0c       	add	r10, r12
    3300:	bd 1c       	adc	r11, r13
    3302:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZL6spiRecv>
    3306:	f5 01       	movw	r30, r10
    3308:	80 83       	st	Z, r24
    330a:	ff ef       	ldi	r31, 0xFF	; 255
    330c:	cf 1a       	sub	r12, r31
    330e:	df 0a       	sbc	r13, r31
    3310:	f2 cf       	rjmp	.-28     	; 0x32f6 <_ZN7Sd2Card8readDataEmjjPh+0xb6>
    3312:	8f 81       	ldd	r24, Y+7	; 0x07
    3314:	98 85       	ldd	r25, Y+8	; 0x08
    3316:	08 0f       	add	r16, r24
    3318:	19 1f       	adc	r17, r25
    331a:	18 87       	std	Y+8, r17	; 0x08
    331c:	0f 83       	std	Y+7, r16	; 0x07
    331e:	89 85       	ldd	r24, Y+9	; 0x09
    3320:	88 23       	and	r24, r24
    3322:	19 f0       	breq	.+6      	; 0x332a <_ZN7Sd2Card8readDataEmjjPh+0xea>
    3324:	01 15       	cp	r16, r1
    3326:	12 40       	sbci	r17, 0x02	; 2
    3328:	60 f0       	brcs	.+24     	; 0x3342 <_ZN7Sd2Card8readDataEmjjPh+0x102>
    332a:	ce 01       	movw	r24, r28
    332c:	0e 94 48 17 	call	0x2e90	; 0x2e90 <_ZN7Sd2Card7readEndEv>
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	08 c0       	rjmp	.+16     	; 0x3344 <_ZN7Sd2Card8readDataEmjjPh+0x104>
    3334:	ce 01       	movw	r24, r28
    3336:	0e 94 00 17 	call	0x2e00	; 0x2e00 <_ZN7Sd2Card14chipSelectHighEv>
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	03 c0       	rjmp	.+6      	; 0x3344 <_ZN7Sd2Card8readDataEmjjPh+0x104>
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	01 c0       	rjmp	.+2      	; 0x3344 <_ZN7Sd2Card8readDataEmjjPh+0x104>
    3342:	81 e0       	ldi	r24, 0x01	; 1
    3344:	df 91       	pop	r29
    3346:	cf 91       	pop	r28
    3348:	1f 91       	pop	r17
    334a:	0f 91       	pop	r16
    334c:	ff 90       	pop	r15
    334e:	ef 90       	pop	r14
    3350:	df 90       	pop	r13
    3352:	cf 90       	pop	r12
    3354:	bf 90       	pop	r11
    3356:	af 90       	pop	r10
    3358:	08 95       	ret

0000335a <_ZN7Sd2Card9readBlockEmPh>:
    335a:	ef 92       	push	r14
    335c:	ff 92       	push	r15
    335e:	0f 93       	push	r16
    3360:	1f 93       	push	r17
    3362:	79 01       	movw	r14, r18
    3364:	00 e0       	ldi	r16, 0x00	; 0
    3366:	12 e0       	ldi	r17, 0x02	; 2
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	0e 94 20 19 	call	0x3240	; 0x3240 <_ZN7Sd2Card8readDataEmjjPh>
    3370:	1f 91       	pop	r17
    3372:	0f 91       	pop	r16
    3374:	ff 90       	pop	r15
    3376:	ef 90       	pop	r14
    3378:	08 95       	ret

0000337a <_ZN7Sd2Card9writeDataEhPKh>:
    337a:	ef 92       	push	r14
    337c:	ff 92       	push	r15
    337e:	0f 93       	push	r16
    3380:	1f 93       	push	r17
    3382:	cf 93       	push	r28
    3384:	df 93       	push	r29
    3386:	7c 01       	movw	r14, r24
    3388:	86 2f       	mov	r24, r22
    338a:	8a 01       	movw	r16, r20
    338c:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <_ZL7spiSendh>
    3390:	c0 e0       	ldi	r28, 0x00	; 0
    3392:	d0 e0       	ldi	r29, 0x00	; 0
    3394:	c1 15       	cp	r28, r1
    3396:	82 e0       	ldi	r24, 0x02	; 2
    3398:	d8 07       	cpc	r29, r24
    339a:	40 f4       	brcc	.+16     	; 0x33ac <_ZN7Sd2Card9writeDataEhPKh+0x32>
    339c:	f8 01       	movw	r30, r16
    339e:	ec 0f       	add	r30, r28
    33a0:	fd 1f       	adc	r31, r29
    33a2:	80 81       	ld	r24, Z
    33a4:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <_ZL7spiSendh>
    33a8:	21 96       	adiw	r28, 0x01	; 1
    33aa:	f4 cf       	rjmp	.-24     	; 0x3394 <_ZN7Sd2Card9writeDataEhPKh+0x1a>
    33ac:	8f ef       	ldi	r24, 0xFF	; 255
    33ae:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <_ZL7spiSendh>
    33b2:	8f ef       	ldi	r24, 0xFF	; 255
    33b4:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <_ZL7spiSendh>
    33b8:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZL6spiRecv>
    33bc:	f7 01       	movw	r30, r14
    33be:	82 87       	std	Z+10, r24	; 0x0a
    33c0:	8f 71       	andi	r24, 0x1F	; 31
    33c2:	85 30       	cpi	r24, 0x05	; 5
    33c4:	39 f0       	breq	.+14     	; 0x33d4 <_ZN7Sd2Card9writeDataEhPKh+0x5a>
    33c6:	81 e1       	ldi	r24, 0x11	; 17
    33c8:	85 83       	std	Z+5, r24	; 0x05
    33ca:	c7 01       	movw	r24, r14
    33cc:	0e 94 00 17 	call	0x2e00	; 0x2e00 <_ZN7Sd2Card14chipSelectHighEv>
    33d0:	80 e0       	ldi	r24, 0x00	; 0
    33d2:	01 c0       	rjmp	.+2      	; 0x33d6 <_ZN7Sd2Card9writeDataEhPKh+0x5c>
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	df 91       	pop	r29
    33d8:	cf 91       	pop	r28
    33da:	1f 91       	pop	r17
    33dc:	0f 91       	pop	r16
    33de:	ff 90       	pop	r15
    33e0:	ef 90       	pop	r14
    33e2:	08 95       	ret

000033e4 <_ZN7Sd2Card10writeBlockEmPKhh>:
    33e4:	ef 92       	push	r14
    33e6:	ff 92       	push	r15
    33e8:	0f 93       	push	r16
    33ea:	cf 93       	push	r28
    33ec:	df 93       	push	r29
    33ee:	ec 01       	movw	r28, r24
    33f0:	79 01       	movw	r14, r18
    33f2:	41 15       	cp	r20, r1
    33f4:	51 05       	cpc	r21, r1
    33f6:	61 05       	cpc	r22, r1
    33f8:	71 05       	cpc	r23, r1
    33fa:	19 f4       	brne	.+6      	; 0x3402 <_ZN7Sd2Card10writeBlockEmPKhh+0x1e>
    33fc:	82 e1       	ldi	r24, 0x12	; 18
    33fe:	8d 83       	std	Y+5, r24	; 0x05
    3400:	45 c0       	rjmp	.+138    	; 0x348c <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    3402:	8b 85       	ldd	r24, Y+11	; 0x0b
    3404:	83 30       	cpi	r24, 0x03	; 3
    3406:	49 f0       	breq	.+18     	; 0x341a <_ZN7Sd2Card10writeBlockEmPKhh+0x36>
    3408:	03 2e       	mov	r0, r19
    340a:	39 e0       	ldi	r19, 0x09	; 9
    340c:	44 0f       	add	r20, r20
    340e:	55 1f       	adc	r21, r21
    3410:	66 1f       	adc	r22, r22
    3412:	77 1f       	adc	r23, r23
    3414:	3a 95       	dec	r19
    3416:	d1 f7       	brne	.-12     	; 0x340c <_ZN7Sd2Card10writeBlockEmPKhh+0x28>
    3418:	30 2d       	mov	r19, r0
    341a:	9a 01       	movw	r18, r20
    341c:	ab 01       	movw	r20, r22
    341e:	68 e1       	ldi	r22, 0x18	; 24
    3420:	ce 01       	movw	r24, r28
    3422:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_ZN7Sd2Card11cardCommandEhm>
    3426:	88 23       	and	r24, r24
    3428:	19 f0       	breq	.+6      	; 0x3430 <_ZN7Sd2Card10writeBlockEmPKhh+0x4c>
    342a:	84 e0       	ldi	r24, 0x04	; 4
    342c:	8d 83       	std	Y+5, r24	; 0x05
    342e:	2e c0       	rjmp	.+92     	; 0x348c <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    3430:	a7 01       	movw	r20, r14
    3432:	6e ef       	ldi	r22, 0xFE	; 254
    3434:	ce 01       	movw	r24, r28
    3436:	0e 94 bd 19 	call	0x337a	; 0x337a <_ZN7Sd2Card9writeDataEhPKh>
    343a:	88 23       	and	r24, r24
    343c:	39 f1       	breq	.+78     	; 0x348c <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    343e:	00 23       	and	r16, r16
    3440:	01 f1       	breq	.+64     	; 0x3482 <_ZN7Sd2Card10writeBlockEmPKhh+0x9e>
    3442:	68 e5       	ldi	r22, 0x58	; 88
    3444:	72 e0       	ldi	r23, 0x02	; 2
    3446:	ce 01       	movw	r24, r28
    3448:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <_ZN7Sd2Card11waitNotBusyEj>
    344c:	81 11       	cpse	r24, r1
    344e:	03 c0       	rjmp	.+6      	; 0x3456 <_ZN7Sd2Card10writeBlockEmPKhh+0x72>
    3450:	85 e1       	ldi	r24, 0x15	; 21
    3452:	8d 83       	std	Y+5, r24	; 0x05
    3454:	1b c0       	rjmp	.+54     	; 0x348c <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	a9 01       	movw	r20, r18
    345c:	6d e0       	ldi	r22, 0x0D	; 13
    345e:	ce 01       	movw	r24, r28
    3460:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <_ZN7Sd2Card11cardCommandEhm>
    3464:	81 11       	cpse	r24, r1
    3466:	05 c0       	rjmp	.+10     	; 0x3472 <_ZN7Sd2Card10writeBlockEmPKhh+0x8e>
    3468:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZL6spiRecv>
    346c:	81 11       	cpse	r24, r1
    346e:	03 c0       	rjmp	.+6      	; 0x3476 <_ZN7Sd2Card10writeBlockEmPKhh+0x92>
    3470:	03 c0       	rjmp	.+6      	; 0x3478 <_ZN7Sd2Card10writeBlockEmPKhh+0x94>
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	01 c0       	rjmp	.+2      	; 0x3478 <_ZN7Sd2Card10writeBlockEmPKhh+0x94>
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	88 23       	and	r24, r24
    347a:	19 f0       	breq	.+6      	; 0x3482 <_ZN7Sd2Card10writeBlockEmPKhh+0x9e>
    347c:	84 e1       	ldi	r24, 0x14	; 20
    347e:	8d 83       	std	Y+5, r24	; 0x05
    3480:	05 c0       	rjmp	.+10     	; 0x348c <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    3482:	ce 01       	movw	r24, r28
    3484:	0e 94 00 17 	call	0x2e00	; 0x2e00 <_ZN7Sd2Card14chipSelectHighEv>
    3488:	81 e0       	ldi	r24, 0x01	; 1
    348a:	04 c0       	rjmp	.+8      	; 0x3494 <_ZN7Sd2Card10writeBlockEmPKhh+0xb0>
    348c:	ce 01       	movw	r24, r28
    348e:	0e 94 00 17 	call	0x2e00	; 0x2e00 <_ZN7Sd2Card14chipSelectHighEv>
    3492:	80 e0       	ldi	r24, 0x00	; 0
    3494:	df 91       	pop	r29
    3496:	cf 91       	pop	r28
    3498:	0f 91       	pop	r16
    349a:	ff 90       	pop	r15
    349c:	ef 90       	pop	r14
    349e:	08 95       	ret

000034a0 <_ZN7Sd2Card6isBusyEv>:
/** Check if the SD card is busy

  \return The value one, true, is returned when is busy and
   the value zero, false, is returned for when is NOT busy.
*/
uint8_t Sd2Card::isBusy(void) {
    34a0:	1f 93       	push	r17
    34a2:	cf 93       	push	r28
    34a4:	df 93       	push	r29
    34a6:	ec 01       	movw	r28, r24
  chipSelectLow();
    34a8:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN7Sd2Card13chipSelectLowEv>
  byte b = spiRec();
    34ac:	0e 94 ed 16 	call	0x2dda	; 0x2dda <_ZL6spiRecv>
    34b0:	18 2f       	mov	r17, r24
  chipSelectHigh();
    34b2:	ce 01       	movw	r24, r28
    34b4:	0e 94 00 17 	call	0x2e00	; 0x2e00 <_ZN7Sd2Card14chipSelectHighEv>

  return (b != 0XFF);
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	1f 3f       	cpi	r17, 0xFF	; 255
    34bc:	09 f4       	brne	.+2      	; 0x34c0 <_ZN7Sd2Card6isBusyEv+0x20>
    34be:	80 e0       	ldi	r24, 0x00	; 0
}
    34c0:	df 91       	pop	r29
    34c2:	cf 91       	pop	r28
    34c4:	1f 91       	pop	r17
    34c6:	08 95       	ret

000034c8 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    34c8:	6f ef       	ldi	r22, 0xFF	; 255
    34ca:	7f ef       	ldi	r23, 0xFF	; 255
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	0e 94 f5 16 	call	0x2dea	; 0x2dea <_Z41__static_initialization_and_destruction_0ii>
    34d4:	08 95       	ret

000034d6 <_ZN6SdFile10addClusterEv>:
  // don't try to delete root
  if (isRoot()) {
    return true;
  }
  return rmDir();
}
    34d6:	cf 93       	push	r28
    34d8:	df 93       	push	r29
    34da:	ec 01       	movw	r28, r24
    34dc:	9c 01       	movw	r18, r24
    34de:	2a 5f       	subi	r18, 0xFA	; 250
    34e0:	3f 4f       	sbci	r19, 0xFF	; 255
    34e2:	41 e0       	ldi	r20, 0x01	; 1
    34e4:	50 e0       	ldi	r21, 0x00	; 0
    34e6:	60 e0       	ldi	r22, 0x00	; 0
    34e8:	70 e0       	ldi	r23, 0x00	; 0
    34ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34ee:	0e 94 72 25 	call	0x4ae4	; 0x4ae4 <_ZN8SdVolume15allocContiguousEmPm>
    34f2:	88 23       	and	r24, r24
    34f4:	b9 f0       	breq	.+46     	; 0x3524 <_ZN6SdFile10addClusterEv+0x4e>
    34f6:	8f 89       	ldd	r24, Y+23	; 0x17
    34f8:	98 8d       	ldd	r25, Y+24	; 0x18
    34fa:	a9 8d       	ldd	r26, Y+25	; 0x19
    34fc:	ba 8d       	ldd	r27, Y+26	; 0x1a
    34fe:	89 2b       	or	r24, r25
    3500:	8a 2b       	or	r24, r26
    3502:	8b 2b       	or	r24, r27
    3504:	59 f4       	brne	.+22     	; 0x351c <_ZN6SdFile10addClusterEv+0x46>
    3506:	8e 81       	ldd	r24, Y+6	; 0x06
    3508:	9f 81       	ldd	r25, Y+7	; 0x07
    350a:	a8 85       	ldd	r26, Y+8	; 0x08
    350c:	b9 85       	ldd	r27, Y+9	; 0x09
    350e:	8f 8b       	std	Y+23, r24	; 0x17
    3510:	98 8f       	std	Y+24, r25	; 0x18
    3512:	a9 8f       	std	Y+25, r26	; 0x19
    3514:	ba 8f       	std	Y+26, r27	; 0x1a
    3516:	8c 81       	ldd	r24, Y+4	; 0x04
    3518:	80 68       	ori	r24, 0x80	; 128
    351a:	8c 83       	std	Y+4, r24	; 0x04
    351c:	8c 81       	ldd	r24, Y+4	; 0x04
    351e:	80 62       	ori	r24, 0x20	; 32
    3520:	8c 83       	std	Y+4, r24	; 0x04
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	df 91       	pop	r29
    3526:	cf 91       	pop	r28
    3528:	08 95       	ret

0000352a <_ZN6SdFile13addDirClusterEv>:
    352a:	cf 92       	push	r12
    352c:	df 92       	push	r13
    352e:	ef 92       	push	r14
    3530:	ff 92       	push	r15
    3532:	0f 93       	push	r16
    3534:	1f 93       	push	r17
    3536:	cf 93       	push	r28
    3538:	8c 01       	movw	r16, r24
    353a:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <_ZN6SdFile10addClusterEv>
    353e:	88 23       	and	r24, r24
    3540:	09 f4       	brne	.+2      	; 0x3544 <_ZN6SdFile13addDirClusterEv+0x1a>
    3542:	54 c0       	rjmp	.+168    	; 0x35ec <_ZN6SdFile13addDirClusterEv+0xc2>
    3544:	d8 01       	movw	r26, r16
    3546:	16 96       	adiw	r26, 0x06	; 6
    3548:	cd 90       	ld	r12, X+
    354a:	dd 90       	ld	r13, X+
    354c:	ed 90       	ld	r14, X+
    354e:	fc 90       	ld	r15, X
    3550:	19 97       	sbiw	r26, 0x09	; 9
    3552:	5b 96       	adiw	r26, 0x1b	; 27
    3554:	ed 91       	ld	r30, X+
    3556:	fc 91       	ld	r31, X
    3558:	5c 97       	sbiw	r26, 0x1c	; 28
    355a:	86 85       	ldd	r24, Z+14	; 0x0e
    355c:	97 85       	ldd	r25, Z+15	; 0x0f
    355e:	a0 89       	ldd	r26, Z+16	; 0x10
    3560:	b1 89       	ldd	r27, Z+17	; 0x11
    3562:	22 e0       	ldi	r18, 0x02	; 2
    3564:	c2 1a       	sub	r12, r18
    3566:	d1 08       	sbc	r13, r1
    3568:	e1 08       	sbc	r14, r1
    356a:	f1 08       	sbc	r15, r1
    356c:	05 84       	ldd	r0, Z+13	; 0x0d
    356e:	04 c0       	rjmp	.+8      	; 0x3578 <_ZN6SdFile13addDirClusterEv+0x4e>
    3570:	cc 0c       	add	r12, r12
    3572:	dd 1c       	adc	r13, r13
    3574:	ee 1c       	adc	r14, r14
    3576:	ff 1c       	adc	r15, r15
    3578:	0a 94       	dec	r0
    357a:	d2 f7       	brpl	.-12     	; 0x3570 <_ZN6SdFile13addDirClusterEv+0x46>
    357c:	c8 0e       	add	r12, r24
    357e:	d9 1e       	adc	r13, r25
    3580:	ea 1e       	adc	r14, r26
    3582:	fb 1e       	adc	r15, r27
    3584:	c4 81       	ldd	r28, Z+4	; 0x04
    3586:	cc 23       	and	r28, r28
    3588:	91 f0       	breq	.+36     	; 0x35ae <_ZN6SdFile13addDirClusterEv+0x84>
    358a:	d7 01       	movw	r26, r14
    358c:	c6 01       	movw	r24, r12
    358e:	8c 0f       	add	r24, r28
    3590:	91 1d       	adc	r25, r1
    3592:	a1 1d       	adc	r26, r1
    3594:	b1 1d       	adc	r27, r1
    3596:	bc 01       	movw	r22, r24
    3598:	cd 01       	movw	r24, r26
    359a:	61 50       	subi	r22, 0x01	; 1
    359c:	71 09       	sbc	r23, r1
    359e:	81 09       	sbc	r24, r1
    35a0:	91 09       	sbc	r25, r1
    35a2:	0e 94 94 23 	call	0x4728	; 0x4728 <_ZN8SdVolume14cacheZeroBlockEm>
    35a6:	88 23       	and	r24, r24
    35a8:	09 f1       	breq	.+66     	; 0x35ec <_ZN6SdFile13addDirClusterEv+0xc2>
    35aa:	c1 50       	subi	r28, 0x01	; 1
    35ac:	ec cf       	rjmp	.-40     	; 0x3586 <_ZN6SdFile13addDirClusterEv+0x5c>
    35ae:	d8 01       	movw	r26, r16
    35b0:	5b 96       	adiw	r26, 0x1b	; 27
    35b2:	ed 91       	ld	r30, X+
    35b4:	fc 91       	ld	r31, X
    35b6:	5c 97       	sbiw	r26, 0x1c	; 28
    35b8:	80 e0       	ldi	r24, 0x00	; 0
    35ba:	92 e0       	ldi	r25, 0x02	; 2
    35bc:	a0 e0       	ldi	r26, 0x00	; 0
    35be:	b0 e0       	ldi	r27, 0x00	; 0
    35c0:	05 84       	ldd	r0, Z+13	; 0x0d
    35c2:	04 c0       	rjmp	.+8      	; 0x35cc <_ZN6SdFile13addDirClusterEv+0xa2>
    35c4:	88 0f       	add	r24, r24
    35c6:	99 1f       	adc	r25, r25
    35c8:	aa 1f       	adc	r26, r26
    35ca:	bb 1f       	adc	r27, r27
    35cc:	0a 94       	dec	r0
    35ce:	d2 f7       	brpl	.-12     	; 0x35c4 <_ZN6SdFile13addDirClusterEv+0x9a>
    35d0:	f8 01       	movw	r30, r16
    35d2:	43 89       	ldd	r20, Z+19	; 0x13
    35d4:	54 89       	ldd	r21, Z+20	; 0x14
    35d6:	65 89       	ldd	r22, Z+21	; 0x15
    35d8:	76 89       	ldd	r23, Z+22	; 0x16
    35da:	84 0f       	add	r24, r20
    35dc:	95 1f       	adc	r25, r21
    35de:	a6 1f       	adc	r26, r22
    35e0:	b7 1f       	adc	r27, r23
    35e2:	83 8b       	std	Z+19, r24	; 0x13
    35e4:	94 8b       	std	Z+20, r25	; 0x14
    35e6:	a5 8b       	std	Z+21, r26	; 0x15
    35e8:	b6 8b       	std	Z+22, r27	; 0x16
    35ea:	81 e0       	ldi	r24, 0x01	; 1
    35ec:	cf 91       	pop	r28
    35ee:	1f 91       	pop	r17
    35f0:	0f 91       	pop	r16
    35f2:	ff 90       	pop	r15
    35f4:	ef 90       	pop	r14
    35f6:	df 90       	pop	r13
    35f8:	cf 90       	pop	r12
    35fa:	08 95       	ret

000035fc <_ZN6SdFile13cacheDirEntryEh>:
    35fc:	cf 93       	push	r28
    35fe:	df 93       	push	r29
    3600:	ec 01       	movw	r28, r24
    3602:	46 2f       	mov	r20, r22
    3604:	6e 85       	ldd	r22, Y+14	; 0x0e
    3606:	7f 85       	ldd	r23, Y+15	; 0x0f
    3608:	88 89       	ldd	r24, Y+16	; 0x10
    360a:	99 89       	ldd	r25, Y+17	; 0x11
    360c:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN8SdVolume13cacheRawBlockEmh>
    3610:	88 23       	and	r24, r24
    3612:	41 f0       	breq	.+16     	; 0x3624 <_ZN6SdFile13cacheDirEntryEh+0x28>
    3614:	8a 89       	ldd	r24, Y+18	; 0x12
    3616:	20 e2       	ldi	r18, 0x20	; 32
    3618:	82 9f       	mul	r24, r18
    361a:	c0 01       	movw	r24, r0
    361c:	11 24       	eor	r1, r1
    361e:	8b 5f       	subi	r24, 0xFB	; 251
    3620:	9c 4f       	sbci	r25, 0xFC	; 252
    3622:	02 c0       	rjmp	.+4      	; 0x3628 <_ZN6SdFile13cacheDirEntryEh+0x2c>
    3624:	80 e0       	ldi	r24, 0x00	; 0
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	df 91       	pop	r29
    362a:	cf 91       	pop	r28
    362c:	08 95       	ret

0000362e <_ZN6SdFile10make83NameEPKcPh>:
    362e:	cf 93       	push	r28
    3630:	df 93       	push	r29
    3632:	dc 01       	movw	r26, r24
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	9b 30       	cpi	r25, 0x0B	; 11
    3638:	48 f4       	brcc	.+18     	; 0x364c <_ZN6SdFile10make83NameEPKcPh+0x1e>
    363a:	fb 01       	movw	r30, r22
    363c:	e9 0f       	add	r30, r25
    363e:	f1 1d       	adc	r31, r1
    3640:	20 e2       	ldi	r18, 0x20	; 32
    3642:	20 83       	st	Z, r18
    3644:	9f 5f       	subi	r25, 0xFF	; 255
    3646:	f7 cf       	rjmp	.-18     	; 0x3636 <_ZN6SdFile10make83NameEPKcPh+0x8>
    3648:	de 01       	movw	r26, r28
    364a:	02 c0       	rjmp	.+4      	; 0x3650 <_ZN6SdFile10make83NameEPKcPh+0x22>
    364c:	40 e0       	ldi	r20, 0x00	; 0
    364e:	57 e0       	ldi	r21, 0x07	; 7
    3650:	ed 01       	movw	r28, r26
    3652:	21 96       	adiw	r28, 0x01	; 1
    3654:	9c 91       	ld	r25, X
    3656:	99 23       	and	r25, r25
    3658:	31 f1       	breq	.+76     	; 0x36a6 <_ZN6SdFile10make83NameEPKcPh+0x78>
    365a:	9e 32       	cpi	r25, 0x2E	; 46
    365c:	29 f4       	brne	.+10     	; 0x3668 <_ZN6SdFile10make83NameEPKcPh+0x3a>
    365e:	5a 30       	cpi	r21, 0x0A	; 10
    3660:	49 f1       	breq	.+82     	; 0x36b4 <_ZN6SdFile10make83NameEPKcPh+0x86>
    3662:	48 e0       	ldi	r20, 0x08	; 8
    3664:	5a e0       	ldi	r21, 0x0A	; 10
    3666:	f0 cf       	rjmp	.-32     	; 0x3648 <_ZN6SdFile10make83NameEPKcPh+0x1a>
    3668:	e3 ee       	ldi	r30, 0xE3	; 227
    366a:	fc e0       	ldi	r31, 0x0C	; 12
    366c:	9f 01       	movw	r18, r30
    366e:	2f 5f       	subi	r18, 0xFF	; 255
    3670:	3f 4f       	sbci	r19, 0xFF	; 255
    3672:	84 91       	lpm	r24, Z
    3674:	88 23       	and	r24, r24
    3676:	21 f0       	breq	.+8      	; 0x3680 <_ZN6SdFile10make83NameEPKcPh+0x52>
    3678:	f9 01       	movw	r30, r18
    367a:	98 13       	cpse	r25, r24
    367c:	f7 cf       	rjmp	.-18     	; 0x366c <_ZN6SdFile10make83NameEPKcPh+0x3e>
    367e:	1c c0       	rjmp	.+56     	; 0x36b8 <_ZN6SdFile10make83NameEPKcPh+0x8a>
    3680:	54 17       	cp	r21, r20
    3682:	e0 f0       	brcs	.+56     	; 0x36bc <_ZN6SdFile10make83NameEPKcPh+0x8e>
    3684:	91 32       	cpi	r25, 0x21	; 33
    3686:	e0 f0       	brcs	.+56     	; 0x36c0 <_ZN6SdFile10make83NameEPKcPh+0x92>
    3688:	9f 37       	cpi	r25, 0x7F	; 127
    368a:	e0 f4       	brcc	.+56     	; 0x36c4 <_ZN6SdFile10make83NameEPKcPh+0x96>
    368c:	81 e0       	ldi	r24, 0x01	; 1
    368e:	84 0f       	add	r24, r20
    3690:	fb 01       	movw	r30, r22
    3692:	e4 0f       	add	r30, r20
    3694:	f1 1d       	adc	r31, r1
    3696:	2f e9       	ldi	r18, 0x9F	; 159
    3698:	29 0f       	add	r18, r25
    369a:	2a 31       	cpi	r18, 0x1A	; 26
    369c:	08 f4       	brcc	.+2      	; 0x36a0 <_ZN6SdFile10make83NameEPKcPh+0x72>
    369e:	90 52       	subi	r25, 0x20	; 32
    36a0:	90 83       	st	Z, r25
    36a2:	48 2f       	mov	r20, r24
    36a4:	d1 cf       	rjmp	.-94     	; 0x3648 <_ZN6SdFile10make83NameEPKcPh+0x1a>
    36a6:	fb 01       	movw	r30, r22
    36a8:	90 81       	ld	r25, Z
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	90 32       	cpi	r25, 0x20	; 32
    36ae:	59 f4       	brne	.+22     	; 0x36c6 <_ZN6SdFile10make83NameEPKcPh+0x98>
    36b0:	80 e0       	ldi	r24, 0x00	; 0
    36b2:	09 c0       	rjmp	.+18     	; 0x36c6 <_ZN6SdFile10make83NameEPKcPh+0x98>
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	07 c0       	rjmp	.+14     	; 0x36c6 <_ZN6SdFile10make83NameEPKcPh+0x98>
    36b8:	80 e0       	ldi	r24, 0x00	; 0
    36ba:	05 c0       	rjmp	.+10     	; 0x36c6 <_ZN6SdFile10make83NameEPKcPh+0x98>
    36bc:	80 e0       	ldi	r24, 0x00	; 0
    36be:	03 c0       	rjmp	.+6      	; 0x36c6 <_ZN6SdFile10make83NameEPKcPh+0x98>
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	01 c0       	rjmp	.+2      	; 0x36c6 <_ZN6SdFile10make83NameEPKcPh+0x98>
    36c4:	80 e0       	ldi	r24, 0x00	; 0
    36c6:	df 91       	pop	r29
    36c8:	cf 91       	pop	r28
    36ca:	08 95       	ret

000036cc <_ZN6SdFile8openRootEP8SdVolume>:
    36cc:	0f 93       	push	r16
    36ce:	1f 93       	push	r17
    36d0:	cf 93       	push	r28
    36d2:	df 93       	push	r29
    36d4:	ec 01       	movw	r28, r24
    36d6:	8d 81       	ldd	r24, Y+5	; 0x05
    36d8:	81 11       	cpse	r24, r1
    36da:	4f c0       	rjmp	.+158    	; 0x377a <_ZN6SdFile8openRootEP8SdVolume+0xae>
    36dc:	8b 01       	movw	r16, r22
    36de:	fb 01       	movw	r30, r22
    36e0:	97 89       	ldd	r25, Z+23	; 0x17
    36e2:	90 31       	cpi	r25, 0x10	; 16
    36e4:	19 f5       	brne	.+70     	; 0x372c <_ZN6SdFile8openRootEP8SdVolume+0x60>
    36e6:	82 e0       	ldi	r24, 0x02	; 2
    36e8:	8d 83       	std	Y+5, r24	; 0x05
    36ea:	1f 8a       	std	Y+23, r1	; 0x17
    36ec:	18 8e       	std	Y+24, r1	; 0x18
    36ee:	19 8e       	std	Y+25, r1	; 0x19
    36f0:	1a 8e       	std	Y+26, r1	; 0x1a
    36f2:	80 8d       	ldd	r24, Z+24	; 0x18
    36f4:	91 8d       	ldd	r25, Z+25	; 0x19
    36f6:	a0 e0       	ldi	r26, 0x00	; 0
    36f8:	b0 e0       	ldi	r27, 0x00	; 0
    36fa:	88 0f       	add	r24, r24
    36fc:	99 1f       	adc	r25, r25
    36fe:	aa 1f       	adc	r26, r26
    3700:	bb 1f       	adc	r27, r27
    3702:	88 0f       	add	r24, r24
    3704:	99 1f       	adc	r25, r25
    3706:	aa 1f       	adc	r26, r26
    3708:	bb 1f       	adc	r27, r27
    370a:	88 0f       	add	r24, r24
    370c:	99 1f       	adc	r25, r25
    370e:	aa 1f       	adc	r26, r26
    3710:	bb 1f       	adc	r27, r27
    3712:	88 0f       	add	r24, r24
    3714:	99 1f       	adc	r25, r25
    3716:	aa 1f       	adc	r26, r26
    3718:	bb 1f       	adc	r27, r27
    371a:	88 0f       	add	r24, r24
    371c:	99 1f       	adc	r25, r25
    371e:	aa 1f       	adc	r26, r26
    3720:	bb 1f       	adc	r27, r27
    3722:	8b 8b       	std	Y+19, r24	; 0x13
    3724:	9c 8b       	std	Y+20, r25	; 0x14
    3726:	ad 8b       	std	Y+21, r26	; 0x15
    3728:	be 8b       	std	Y+22, r27	; 0x16
    372a:	15 c0       	rjmp	.+42     	; 0x3756 <_ZN6SdFile8openRootEP8SdVolume+0x8a>
    372c:	90 32       	cpi	r25, 0x20	; 32
    372e:	31 f5       	brne	.+76     	; 0x377c <_ZN6SdFile8openRootEP8SdVolume+0xb0>
    3730:	83 e0       	ldi	r24, 0x03	; 3
    3732:	8d 83       	std	Y+5, r24	; 0x05
    3734:	fb 01       	movw	r30, r22
    3736:	42 8d       	ldd	r20, Z+26	; 0x1a
    3738:	53 8d       	ldd	r21, Z+27	; 0x1b
    373a:	64 8d       	ldd	r22, Z+28	; 0x1c
    373c:	75 8d       	ldd	r23, Z+29	; 0x1d
    373e:	4f 8b       	std	Y+23, r20	; 0x17
    3740:	58 8f       	std	Y+24, r21	; 0x18
    3742:	69 8f       	std	Y+25, r22	; 0x19
    3744:	7a 8f       	std	Y+26, r23	; 0x1a
    3746:	9e 01       	movw	r18, r28
    3748:	2d 5e       	subi	r18, 0xED	; 237
    374a:	3f 4f       	sbci	r19, 0xFF	; 255
    374c:	c8 01       	movw	r24, r16
    374e:	0e 94 49 24 	call	0x4892	; 0x4892 <_ZNK8SdVolume9chainSizeEmPm>
    3752:	88 23       	and	r24, r24
    3754:	99 f0       	breq	.+38     	; 0x377c <_ZN6SdFile8openRootEP8SdVolume+0xb0>
    3756:	1c 8f       	std	Y+28, r17	; 0x1c
    3758:	0b 8f       	std	Y+27, r16	; 0x1b
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	8c 83       	std	Y+4, r24	; 0x04
    375e:	1e 82       	std	Y+6, r1	; 0x06
    3760:	1f 82       	std	Y+7, r1	; 0x07
    3762:	18 86       	std	Y+8, r1	; 0x08
    3764:	19 86       	std	Y+9, r1	; 0x09
    3766:	1a 86       	std	Y+10, r1	; 0x0a
    3768:	1b 86       	std	Y+11, r1	; 0x0b
    376a:	1c 86       	std	Y+12, r1	; 0x0c
    376c:	1d 86       	std	Y+13, r1	; 0x0d
    376e:	1e 86       	std	Y+14, r1	; 0x0e
    3770:	1f 86       	std	Y+15, r1	; 0x0f
    3772:	18 8a       	std	Y+16, r1	; 0x10
    3774:	19 8a       	std	Y+17, r1	; 0x11
    3776:	1a 8a       	std	Y+18, r1	; 0x12
    3778:	01 c0       	rjmp	.+2      	; 0x377c <_ZN6SdFile8openRootEP8SdVolume+0xb0>
    377a:	80 e0       	ldi	r24, 0x00	; 0
    377c:	df 91       	pop	r29
    377e:	cf 91       	pop	r28
    3780:	1f 91       	pop	r17
    3782:	0f 91       	pop	r16
    3784:	08 95       	ret

00003786 <_ZN6SdFile4readEPvj>:
    3786:	3f 92       	push	r3
    3788:	4f 92       	push	r4
    378a:	5f 92       	push	r5
    378c:	6f 92       	push	r6
    378e:	7f 92       	push	r7
    3790:	8f 92       	push	r8
    3792:	9f 92       	push	r9
    3794:	af 92       	push	r10
    3796:	bf 92       	push	r11
    3798:	cf 92       	push	r12
    379a:	df 92       	push	r13
    379c:	ef 92       	push	r14
    379e:	ff 92       	push	r15
    37a0:	0f 93       	push	r16
    37a2:	1f 93       	push	r17
    37a4:	cf 93       	push	r28
    37a6:	df 93       	push	r29
    37a8:	00 d0       	rcall	.+0      	; 0x37aa <_ZN6SdFile4readEPvj+0x24>
    37aa:	00 d0       	rcall	.+0      	; 0x37ac <_ZN6SdFile4readEPvj+0x26>
    37ac:	cd b7       	in	r28, 0x3d	; 61
    37ae:	de b7       	in	r29, 0x3e	; 62
    37b0:	4c 01       	movw	r8, r24
    37b2:	6b 01       	movw	r12, r22
    37b4:	5a 83       	std	Y+2, r21	; 0x02
    37b6:	49 83       	std	Y+1, r20	; 0x01
    37b8:	fc 01       	movw	r30, r24
    37ba:	85 81       	ldd	r24, Z+5	; 0x05
    37bc:	88 23       	and	r24, r24
    37be:	31 f0       	breq	.+12     	; 0x37cc <_ZN6SdFile4readEPvj+0x46>
    37c0:	84 81       	ldd	r24, Z+4	; 0x04
    37c2:	80 fd       	sbrc	r24, 0
    37c4:	06 c0       	rjmp	.+12     	; 0x37d2 <_ZN6SdFile4readEPvj+0x4c>
    37c6:	33 24       	eor	r3, r3
    37c8:	33 94       	inc	r3
    37ca:	04 c0       	rjmp	.+8      	; 0x37d4 <_ZN6SdFile4readEPvj+0x4e>
    37cc:	33 24       	eor	r3, r3
    37ce:	33 94       	inc	r3
    37d0:	01 c0       	rjmp	.+2      	; 0x37d4 <_ZN6SdFile4readEPvj+0x4e>
    37d2:	31 2c       	mov	r3, r1
    37d4:	31 10       	cpse	r3, r1
    37d6:	05 c1       	rjmp	.+522    	; 0x39e2 <_ZN6SdFile4readEPvj+0x25c>
    37d8:	09 81       	ldd	r16, Y+1	; 0x01
    37da:	1a 81       	ldd	r17, Y+2	; 0x02
    37dc:	c8 01       	movw	r24, r16
    37de:	a0 e0       	ldi	r26, 0x00	; 0
    37e0:	b0 e0       	ldi	r27, 0x00	; 0
    37e2:	f4 01       	movw	r30, r8
    37e4:	03 89       	ldd	r16, Z+19	; 0x13
    37e6:	14 89       	ldd	r17, Z+20	; 0x14
    37e8:	25 89       	ldd	r18, Z+21	; 0x15
    37ea:	36 89       	ldd	r19, Z+22	; 0x16
    37ec:	42 85       	ldd	r20, Z+10	; 0x0a
    37ee:	53 85       	ldd	r21, Z+11	; 0x0b
    37f0:	64 85       	ldd	r22, Z+12	; 0x0c
    37f2:	75 85       	ldd	r23, Z+13	; 0x0d
    37f4:	28 01       	movw	r4, r16
    37f6:	39 01       	movw	r6, r18
    37f8:	44 1a       	sub	r4, r20
    37fa:	55 0a       	sbc	r5, r21
    37fc:	66 0a       	sbc	r6, r22
    37fe:	77 0a       	sbc	r7, r23
    3800:	48 16       	cp	r4, r24
    3802:	59 06       	cpc	r5, r25
    3804:	6a 06       	cpc	r6, r26
    3806:	7b 06       	cpc	r7, r27
    3808:	28 f4       	brcc	.+10     	; 0x3814 <_ZN6SdFile4readEPvj+0x8e>
    380a:	c8 01       	movw	r24, r16
    380c:	84 1b       	sub	r24, r20
    380e:	95 0b       	sbc	r25, r21
    3810:	9a 83       	std	Y+2, r25	; 0x02
    3812:	89 83       	std	Y+1, r24	; 0x01
    3814:	69 80       	ldd	r6, Y+1	; 0x01
    3816:	7a 80       	ldd	r7, Y+2	; 0x02
    3818:	61 14       	cp	r6, r1
    381a:	71 04       	cpc	r7, r1
    381c:	09 f4       	brne	.+2      	; 0x3820 <_ZN6SdFile4readEPvj+0x9a>
    381e:	de c0       	rjmp	.+444    	; 0x39dc <_ZN6SdFile4readEPvj+0x256>
    3820:	f4 01       	movw	r30, r8
    3822:	82 85       	ldd	r24, Z+10	; 0x0a
    3824:	93 85       	ldd	r25, Z+11	; 0x0b
    3826:	a4 85       	ldd	r26, Z+12	; 0x0c
    3828:	b5 85       	ldd	r27, Z+13	; 0x0d
    382a:	2c 01       	movw	r4, r24
    382c:	f1 e0       	ldi	r31, 0x01	; 1
    382e:	5f 22       	and	r5, r31
    3830:	f4 01       	movw	r30, r8
    3832:	25 81       	ldd	r18, Z+5	; 0x05
    3834:	22 30       	cpi	r18, 0x02	; 2
    3836:	c9 f4       	brne	.+50     	; 0x386a <_ZN6SdFile4readEPvj+0xe4>
    3838:	23 8d       	ldd	r18, Z+27	; 0x1b
    383a:	34 8d       	ldd	r19, Z+28	; 0x1c
    383c:	f9 01       	movw	r30, r18
    383e:	42 8d       	ldd	r20, Z+26	; 0x1a
    3840:	53 8d       	ldd	r21, Z+27	; 0x1b
    3842:	64 8d       	ldd	r22, Z+28	; 0x1c
    3844:	75 8d       	ldd	r23, Z+29	; 0x1d
    3846:	07 2e       	mov	r0, r23
    3848:	79 e0       	ldi	r23, 0x09	; 9
    384a:	b6 95       	lsr	r27
    384c:	a7 95       	ror	r26
    384e:	97 95       	ror	r25
    3850:	87 95       	ror	r24
    3852:	7a 95       	dec	r23
    3854:	d1 f7       	brne	.-12     	; 0x384a <_ZN6SdFile4readEPvj+0xc4>
    3856:	70 2d       	mov	r23, r0
    3858:	8a 01       	movw	r16, r20
    385a:	9b 01       	movw	r18, r22
    385c:	08 0f       	add	r16, r24
    385e:	19 1f       	adc	r17, r25
    3860:	2a 1f       	adc	r18, r26
    3862:	3b 1f       	adc	r19, r27
    3864:	c9 01       	movw	r24, r18
    3866:	b8 01       	movw	r22, r16
    3868:	54 c0       	rjmp	.+168    	; 0x3912 <_ZN6SdFile4readEPvj+0x18c>
    386a:	f4 01       	movw	r30, r8
    386c:	03 8d       	ldd	r16, Z+27	; 0x1b
    386e:	14 8d       	ldd	r17, Z+28	; 0x1c
    3870:	f8 01       	movw	r30, r16
    3872:	b4 80       	ldd	r11, Z+4	; 0x04
    3874:	ba 94       	dec	r11
    3876:	ac 01       	movw	r20, r24
    3878:	bd 01       	movw	r22, r26
    387a:	03 2e       	mov	r0, r19
    387c:	39 e0       	ldi	r19, 0x09	; 9
    387e:	76 95       	lsr	r23
    3880:	67 95       	ror	r22
    3882:	57 95       	ror	r21
    3884:	47 95       	ror	r20
    3886:	3a 95       	dec	r19
    3888:	d1 f7       	brne	.-12     	; 0x387e <_ZN6SdFile4readEPvj+0xf8>
    388a:	30 2d       	mov	r19, r0
    388c:	b4 22       	and	r11, r20
    388e:	41 14       	cp	r4, r1
    3890:	51 04       	cpc	r5, r1
    3892:	f1 f4       	brne	.+60     	; 0x38d0 <_ZN6SdFile4readEPvj+0x14a>
    3894:	b1 10       	cpse	r11, r1
    3896:	1c c0       	rjmp	.+56     	; 0x38d0 <_ZN6SdFile4readEPvj+0x14a>
    3898:	89 2b       	or	r24, r25
    389a:	8a 2b       	or	r24, r26
    389c:	8b 2b       	or	r24, r27
    389e:	51 f4       	brne	.+20     	; 0x38b4 <_ZN6SdFile4readEPvj+0x12e>
    38a0:	f4 01       	movw	r30, r8
    38a2:	87 89       	ldd	r24, Z+23	; 0x17
    38a4:	90 8d       	ldd	r25, Z+24	; 0x18
    38a6:	a1 8d       	ldd	r26, Z+25	; 0x19
    38a8:	b2 8d       	ldd	r27, Z+26	; 0x1a
    38aa:	86 83       	std	Z+6, r24	; 0x06
    38ac:	97 83       	std	Z+7, r25	; 0x07
    38ae:	a0 87       	std	Z+8, r26	; 0x08
    38b0:	b1 87       	std	Z+9, r27	; 0x09
    38b2:	0e c0       	rjmp	.+28     	; 0x38d0 <_ZN6SdFile4readEPvj+0x14a>
    38b4:	f4 01       	movw	r30, r8
    38b6:	46 81       	ldd	r20, Z+6	; 0x06
    38b8:	57 81       	ldd	r21, Z+7	; 0x07
    38ba:	60 85       	ldd	r22, Z+8	; 0x08
    38bc:	71 85       	ldd	r23, Z+9	; 0x09
    38be:	94 01       	movw	r18, r8
    38c0:	2a 5f       	subi	r18, 0xFA	; 250
    38c2:	3f 4f       	sbci	r19, 0xFF	; 255
    38c4:	c8 01       	movw	r24, r16
    38c6:	0e 94 be 23 	call	0x477c	; 0x477c <_ZNK8SdVolume6fatGetEmPm>
    38ca:	88 23       	and	r24, r24
    38cc:	09 f4       	brne	.+2      	; 0x38d0 <_ZN6SdFile4readEPvj+0x14a>
    38ce:	8c c0       	rjmp	.+280    	; 0x39e8 <_ZN6SdFile4readEPvj+0x262>
    38d0:	f4 01       	movw	r30, r8
    38d2:	86 81       	ldd	r24, Z+6	; 0x06
    38d4:	97 81       	ldd	r25, Z+7	; 0x07
    38d6:	a0 85       	ldd	r26, Z+8	; 0x08
    38d8:	b1 85       	ldd	r27, Z+9	; 0x09
    38da:	23 8d       	ldd	r18, Z+27	; 0x1b
    38dc:	34 8d       	ldd	r19, Z+28	; 0x1c
    38de:	f9 01       	movw	r30, r18
    38e0:	46 85       	ldd	r20, Z+14	; 0x0e
    38e2:	57 85       	ldd	r21, Z+15	; 0x0f
    38e4:	60 89       	ldd	r22, Z+16	; 0x10
    38e6:	71 89       	ldd	r23, Z+17	; 0x11
    38e8:	02 97       	sbiw	r24, 0x02	; 2
    38ea:	a1 09       	sbc	r26, r1
    38ec:	b1 09       	sbc	r27, r1
    38ee:	05 84       	ldd	r0, Z+13	; 0x0d
    38f0:	04 c0       	rjmp	.+8      	; 0x38fa <_ZN6SdFile4readEPvj+0x174>
    38f2:	88 0f       	add	r24, r24
    38f4:	99 1f       	adc	r25, r25
    38f6:	aa 1f       	adc	r26, r26
    38f8:	bb 1f       	adc	r27, r27
    38fa:	0a 94       	dec	r0
    38fc:	d2 f7       	brpl	.-12     	; 0x38f2 <_ZN6SdFile4readEPvj+0x16c>
    38fe:	84 0f       	add	r24, r20
    3900:	95 1f       	adc	r25, r21
    3902:	a6 1f       	adc	r26, r22
    3904:	b7 1f       	adc	r27, r23
    3906:	bc 01       	movw	r22, r24
    3908:	cd 01       	movw	r24, r26
    390a:	6b 0d       	add	r22, r11
    390c:	71 1d       	adc	r23, r1
    390e:	81 1d       	adc	r24, r1
    3910:	91 1d       	adc	r25, r1
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	32 e0       	ldi	r19, 0x02	; 2
    3916:	59 01       	movw	r10, r18
    3918:	a4 18       	sub	r10, r4
    391a:	b5 08       	sbc	r11, r5
    391c:	a6 14       	cp	r10, r6
    391e:	b7 04       	cpc	r11, r7
    3920:	08 f0       	brcs	.+2      	; 0x3924 <_ZN6SdFile4readEPvj+0x19e>
    3922:	53 01       	movw	r10, r6
    3924:	f4 01       	movw	r30, r8
    3926:	24 81       	ldd	r18, Z+4	; 0x04
    3928:	26 fd       	sbrc	r18, 6
    392a:	04 c0       	rjmp	.+8      	; 0x3934 <_ZN6SdFile4readEPvj+0x1ae>
    392c:	a1 14       	cp	r10, r1
    392e:	f2 e0       	ldi	r31, 0x02	; 2
    3930:	bf 06       	cpc	r11, r31
    3932:	79 f4       	brne	.+30     	; 0x3952 <_ZN6SdFile4readEPvj+0x1cc>
    3934:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    3938:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    393c:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3940:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3944:	60 17       	cp	r22, r16
    3946:	71 07       	cpc	r23, r17
    3948:	82 07       	cpc	r24, r18
    394a:	93 07       	cpc	r25, r19
    394c:	21 f4       	brne	.+8      	; 0x3956 <_ZN6SdFile4readEPvj+0x1d0>
    394e:	23 2d       	mov	r18, r3
    3950:	03 c0       	rjmp	.+6      	; 0x3958 <_ZN6SdFile4readEPvj+0x1d2>
    3952:	23 2d       	mov	r18, r3
    3954:	01 c0       	rjmp	.+2      	; 0x3958 <_ZN6SdFile4readEPvj+0x1d2>
    3956:	21 e0       	ldi	r18, 0x01	; 1
    3958:	22 23       	and	r18, r18
    395a:	81 f0       	breq	.+32     	; 0x397c <_ZN6SdFile4readEPvj+0x1f6>
    395c:	76 01       	movw	r14, r12
    395e:	85 01       	movw	r16, r10
    3960:	92 01       	movw	r18, r4
    3962:	ab 01       	movw	r20, r22
    3964:	bc 01       	movw	r22, r24
    3966:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <_ZN8SdVolume7sdCard_E>
    396a:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <_ZN8SdVolume7sdCard_E+0x1>
    396e:	0e 94 20 19 	call	0x3240	; 0x3240 <_ZN7Sd2Card8readDataEmjjPh>
    3972:	88 23       	and	r24, r24
    3974:	e1 f1       	breq	.+120    	; 0x39ee <_ZN6SdFile4readEPvj+0x268>
    3976:	ca 0c       	add	r12, r10
    3978:	db 1c       	adc	r13, r11
    397a:	20 c0       	rjmp	.+64     	; 0x39bc <_ZN6SdFile4readEPvj+0x236>
    397c:	40 e0       	ldi	r20, 0x00	; 0
    397e:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN8SdVolume13cacheRawBlockEmh>
    3982:	88 23       	and	r24, r24
    3984:	b9 f1       	breq	.+110    	; 0x39f4 <_ZN6SdFile4readEPvj+0x26e>
    3986:	82 01       	movw	r16, r4
    3988:	0b 5f       	subi	r16, 0xFB	; 251
    398a:	1c 4f       	sbci	r17, 0xFC	; 252
    398c:	1c 83       	std	Y+4, r17	; 0x04
    398e:	0b 83       	std	Y+3, r16	; 0x03
    3990:	98 01       	movw	r18, r16
    3992:	2a 0d       	add	r18, r10
    3994:	3b 1d       	adc	r19, r11
    3996:	4b 81       	ldd	r20, Y+3	; 0x03
    3998:	5c 81       	ldd	r21, Y+4	; 0x04
    399a:	42 17       	cp	r20, r18
    399c:	53 07       	cpc	r21, r19
    399e:	71 f0       	breq	.+28     	; 0x39bc <_ZN6SdFile4readEPvj+0x236>
    39a0:	fa 01       	movw	r30, r20
    39a2:	80 81       	ld	r24, Z
    39a4:	f6 01       	movw	r30, r12
    39a6:	80 83       	st	Z, r24
    39a8:	8a 01       	movw	r16, r20
    39aa:	0f 5f       	subi	r16, 0xFF	; 255
    39ac:	1f 4f       	sbci	r17, 0xFF	; 255
    39ae:	1c 83       	std	Y+4, r17	; 0x04
    39b0:	0b 83       	std	Y+3, r16	; 0x03
    39b2:	a6 01       	movw	r20, r12
    39b4:	4f 5f       	subi	r20, 0xFF	; 255
    39b6:	5f 4f       	sbci	r21, 0xFF	; 255
    39b8:	6a 01       	movw	r12, r20
    39ba:	ed cf       	rjmp	.-38     	; 0x3996 <_ZN6SdFile4readEPvj+0x210>
    39bc:	f4 01       	movw	r30, r8
    39be:	82 85       	ldd	r24, Z+10	; 0x0a
    39c0:	93 85       	ldd	r25, Z+11	; 0x0b
    39c2:	a4 85       	ldd	r26, Z+12	; 0x0c
    39c4:	b5 85       	ldd	r27, Z+13	; 0x0d
    39c6:	8a 0d       	add	r24, r10
    39c8:	9b 1d       	adc	r25, r11
    39ca:	a1 1d       	adc	r26, r1
    39cc:	b1 1d       	adc	r27, r1
    39ce:	82 87       	std	Z+10, r24	; 0x0a
    39d0:	93 87       	std	Z+11, r25	; 0x0b
    39d2:	a4 87       	std	Z+12, r26	; 0x0c
    39d4:	b5 87       	std	Z+13, r27	; 0x0d
    39d6:	6a 18       	sub	r6, r10
    39d8:	7b 08       	sbc	r7, r11
    39da:	1e cf       	rjmp	.-452    	; 0x3818 <_ZN6SdFile4readEPvj+0x92>
    39dc:	89 81       	ldd	r24, Y+1	; 0x01
    39de:	9a 81       	ldd	r25, Y+2	; 0x02
    39e0:	0b c0       	rjmp	.+22     	; 0x39f8 <_ZN6SdFile4readEPvj+0x272>
    39e2:	8f ef       	ldi	r24, 0xFF	; 255
    39e4:	9f ef       	ldi	r25, 0xFF	; 255
    39e6:	08 c0       	rjmp	.+16     	; 0x39f8 <_ZN6SdFile4readEPvj+0x272>
    39e8:	8f ef       	ldi	r24, 0xFF	; 255
    39ea:	9f ef       	ldi	r25, 0xFF	; 255
    39ec:	05 c0       	rjmp	.+10     	; 0x39f8 <_ZN6SdFile4readEPvj+0x272>
    39ee:	8f ef       	ldi	r24, 0xFF	; 255
    39f0:	9f ef       	ldi	r25, 0xFF	; 255
    39f2:	02 c0       	rjmp	.+4      	; 0x39f8 <_ZN6SdFile4readEPvj+0x272>
    39f4:	8f ef       	ldi	r24, 0xFF	; 255
    39f6:	9f ef       	ldi	r25, 0xFF	; 255
    39f8:	0f 90       	pop	r0
    39fa:	0f 90       	pop	r0
    39fc:	0f 90       	pop	r0
    39fe:	0f 90       	pop	r0
    3a00:	df 91       	pop	r29
    3a02:	cf 91       	pop	r28
    3a04:	1f 91       	pop	r17
    3a06:	0f 91       	pop	r16
    3a08:	ff 90       	pop	r15
    3a0a:	ef 90       	pop	r14
    3a0c:	df 90       	pop	r13
    3a0e:	cf 90       	pop	r12
    3a10:	bf 90       	pop	r11
    3a12:	af 90       	pop	r10
    3a14:	9f 90       	pop	r9
    3a16:	8f 90       	pop	r8
    3a18:	7f 90       	pop	r7
    3a1a:	6f 90       	pop	r6
    3a1c:	5f 90       	pop	r5
    3a1e:	4f 90       	pop	r4
    3a20:	3f 90       	pop	r3
    3a22:	08 95       	ret

00003a24 <_ZN6SdFile12readDirCacheEv>:
    3a24:	ff 92       	push	r15
    3a26:	0f 93       	push	r16
    3a28:	1f 93       	push	r17
    3a2a:	cf 93       	push	r28
    3a2c:	df 93       	push	r29
    3a2e:	1f 92       	push	r1
    3a30:	cd b7       	in	r28, 0x3d	; 61
    3a32:	de b7       	in	r29, 0x3e	; 62
    3a34:	fc 01       	movw	r30, r24
    3a36:	25 81       	ldd	r18, Z+5	; 0x05
    3a38:	22 30       	cpi	r18, 0x02	; 2
    3a3a:	98 f1       	brcs	.+102    	; 0x3aa2 <_ZN6SdFile12readDirCacheEv+0x7e>
    3a3c:	8c 01       	movw	r16, r24
    3a3e:	42 85       	ldd	r20, Z+10	; 0x0a
    3a40:	53 85       	ldd	r21, Z+11	; 0x0b
    3a42:	64 85       	ldd	r22, Z+12	; 0x0c
    3a44:	75 85       	ldd	r23, Z+13	; 0x0d
    3a46:	68 94       	set
    3a48:	14 f8       	bld	r1, 4
    3a4a:	76 95       	lsr	r23
    3a4c:	67 95       	ror	r22
    3a4e:	57 95       	ror	r21
    3a50:	47 95       	ror	r20
    3a52:	16 94       	lsr	r1
    3a54:	d1 f7       	brne	.-12     	; 0x3a4a <_ZN6SdFile12readDirCacheEv+0x26>
    3a56:	f4 2f       	mov	r31, r20
    3a58:	ff 70       	andi	r31, 0x0F	; 15
    3a5a:	ff 2e       	mov	r15, r31
    3a5c:	41 e0       	ldi	r20, 0x01	; 1
    3a5e:	50 e0       	ldi	r21, 0x00	; 0
    3a60:	be 01       	movw	r22, r28
    3a62:	6f 5f       	subi	r22, 0xFF	; 255
    3a64:	7f 4f       	sbci	r23, 0xFF	; 255
    3a66:	0e 94 c3 1b 	call	0x3786	; 0x3786 <_ZN6SdFile4readEPvj>
    3a6a:	01 97       	sbiw	r24, 0x01	; 1
    3a6c:	19 f4       	brne	.+6      	; 0x3a74 <_ZN6SdFile12readDirCacheEv+0x50>
    3a6e:	89 81       	ldd	r24, Y+1	; 0x01
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	02 c0       	rjmp	.+4      	; 0x3a78 <_ZN6SdFile12readDirCacheEv+0x54>
    3a74:	8f ef       	ldi	r24, 0xFF	; 255
    3a76:	9f ef       	ldi	r25, 0xFF	; 255
    3a78:	99 23       	and	r25, r25
    3a7a:	b4 f0       	brlt	.+44     	; 0x3aa8 <_ZN6SdFile12readDirCacheEv+0x84>
    3a7c:	f8 01       	movw	r30, r16
    3a7e:	82 85       	ldd	r24, Z+10	; 0x0a
    3a80:	93 85       	ldd	r25, Z+11	; 0x0b
    3a82:	a4 85       	ldd	r26, Z+12	; 0x0c
    3a84:	b5 85       	ldd	r27, Z+13	; 0x0d
    3a86:	4f 96       	adiw	r24, 0x1f	; 31
    3a88:	a1 1d       	adc	r26, r1
    3a8a:	b1 1d       	adc	r27, r1
    3a8c:	82 87       	std	Z+10, r24	; 0x0a
    3a8e:	93 87       	std	Z+11, r25	; 0x0b
    3a90:	a4 87       	std	Z+12, r26	; 0x0c
    3a92:	b5 87       	std	Z+13, r27	; 0x0d
    3a94:	f0 e2       	ldi	r31, 0x20	; 32
    3a96:	ff 9e       	mul	r15, r31
    3a98:	c0 01       	movw	r24, r0
    3a9a:	11 24       	eor	r1, r1
    3a9c:	8b 5f       	subi	r24, 0xFB	; 251
    3a9e:	9c 4f       	sbci	r25, 0xFC	; 252
    3aa0:	05 c0       	rjmp	.+10     	; 0x3aac <_ZN6SdFile12readDirCacheEv+0x88>
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	02 c0       	rjmp	.+4      	; 0x3aac <_ZN6SdFile12readDirCacheEv+0x88>
    3aa8:	80 e0       	ldi	r24, 0x00	; 0
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	0f 90       	pop	r0
    3aae:	df 91       	pop	r29
    3ab0:	cf 91       	pop	r28
    3ab2:	1f 91       	pop	r17
    3ab4:	0f 91       	pop	r16
    3ab6:	ff 90       	pop	r15
    3ab8:	08 95       	ret

00003aba <_ZN6SdFile7seekSetEm>:
    3aba:	8f 92       	push	r8
    3abc:	9f 92       	push	r9
    3abe:	af 92       	push	r10
    3ac0:	bf 92       	push	r11
    3ac2:	cf 92       	push	r12
    3ac4:	df 92       	push	r13
    3ac6:	ef 92       	push	r14
    3ac8:	ff 92       	push	r15
    3aca:	0f 93       	push	r16
    3acc:	1f 93       	push	r17
    3ace:	cf 93       	push	r28
    3ad0:	df 93       	push	r29
    3ad2:	ec 01       	movw	r28, r24
    3ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad6:	88 23       	and	r24, r24
    3ad8:	59 f0       	breq	.+22     	; 0x3af0 <_ZN6SdFile7seekSetEm+0x36>
    3ada:	0b 89       	ldd	r16, Y+19	; 0x13
    3adc:	1c 89       	ldd	r17, Y+20	; 0x14
    3ade:	2d 89       	ldd	r18, Y+21	; 0x15
    3ae0:	3e 89       	ldd	r19, Y+22	; 0x16
    3ae2:	04 17       	cp	r16, r20
    3ae4:	15 07       	cpc	r17, r21
    3ae6:	26 07       	cpc	r18, r22
    3ae8:	37 07       	cpc	r19, r23
    3aea:	20 f4       	brcc	.+8      	; 0x3af4 <_ZN6SdFile7seekSetEm+0x3a>
    3aec:	91 e0       	ldi	r25, 0x01	; 1
    3aee:	03 c0       	rjmp	.+6      	; 0x3af6 <_ZN6SdFile7seekSetEm+0x3c>
    3af0:	91 e0       	ldi	r25, 0x01	; 1
    3af2:	01 c0       	rjmp	.+2      	; 0x3af6 <_ZN6SdFile7seekSetEm+0x3c>
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	91 11       	cpse	r25, r1
    3af8:	73 c0       	rjmp	.+230    	; 0x3be0 <_ZN6SdFile7seekSetEm+0x126>
    3afa:	82 30       	cpi	r24, 0x02	; 2
    3afc:	31 f4       	brne	.+12     	; 0x3b0a <_ZN6SdFile7seekSetEm+0x50>
    3afe:	4a 87       	std	Y+10, r20	; 0x0a
    3b00:	5b 87       	std	Y+11, r21	; 0x0b
    3b02:	6c 87       	std	Y+12, r22	; 0x0c
    3b04:	7d 87       	std	Y+13, r23	; 0x0d
    3b06:	81 e0       	ldi	r24, 0x01	; 1
    3b08:	6c c0       	rjmp	.+216    	; 0x3be2 <_ZN6SdFile7seekSetEm+0x128>
    3b0a:	41 15       	cp	r20, r1
    3b0c:	51 05       	cpc	r21, r1
    3b0e:	61 05       	cpc	r22, r1
    3b10:	71 05       	cpc	r23, r1
    3b12:	51 f4       	brne	.+20     	; 0x3b28 <_ZN6SdFile7seekSetEm+0x6e>
    3b14:	1e 82       	std	Y+6, r1	; 0x06
    3b16:	1f 82       	std	Y+7, r1	; 0x07
    3b18:	18 86       	std	Y+8, r1	; 0x08
    3b1a:	19 86       	std	Y+9, r1	; 0x09
    3b1c:	1a 86       	std	Y+10, r1	; 0x0a
    3b1e:	1b 86       	std	Y+11, r1	; 0x0b
    3b20:	1c 86       	std	Y+12, r1	; 0x0c
    3b22:	1d 86       	std	Y+13, r1	; 0x0d
    3b24:	81 e0       	ldi	r24, 0x01	; 1
    3b26:	5d c0       	rjmp	.+186    	; 0x3be2 <_ZN6SdFile7seekSetEm+0x128>
    3b28:	4a 01       	movw	r8, r20
    3b2a:	5b 01       	movw	r10, r22
    3b2c:	0a 85       	ldd	r16, Y+10	; 0x0a
    3b2e:	1b 85       	ldd	r17, Y+11	; 0x0b
    3b30:	2c 85       	ldd	r18, Y+12	; 0x0c
    3b32:	3d 85       	ldd	r19, Y+13	; 0x0d
    3b34:	68 01       	movw	r12, r16
    3b36:	79 01       	movw	r14, r18
    3b38:	81 e0       	ldi	r24, 0x01	; 1
    3b3a:	c8 1a       	sub	r12, r24
    3b3c:	d1 08       	sbc	r13, r1
    3b3e:	e1 08       	sbc	r14, r1
    3b40:	f1 08       	sbc	r15, r1
    3b42:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3b44:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3b46:	85 85       	ldd	r24, Z+13	; 0x0d
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	09 96       	adiw	r24, 0x09	; 9
    3b4c:	08 2e       	mov	r0, r24
    3b4e:	04 c0       	rjmp	.+8      	; 0x3b58 <_ZN6SdFile7seekSetEm+0x9e>
    3b50:	f6 94       	lsr	r15
    3b52:	e7 94       	ror	r14
    3b54:	d7 94       	ror	r13
    3b56:	c7 94       	ror	r12
    3b58:	0a 94       	dec	r0
    3b5a:	d2 f7       	brpl	.-12     	; 0x3b50 <_ZN6SdFile7seekSetEm+0x96>
    3b5c:	41 50       	subi	r20, 0x01	; 1
    3b5e:	51 09       	sbc	r21, r1
    3b60:	61 09       	sbc	r22, r1
    3b62:	71 09       	sbc	r23, r1
    3b64:	04 c0       	rjmp	.+8      	; 0x3b6e <_ZN6SdFile7seekSetEm+0xb4>
    3b66:	76 95       	lsr	r23
    3b68:	67 95       	ror	r22
    3b6a:	57 95       	ror	r21
    3b6c:	47 95       	ror	r20
    3b6e:	8a 95       	dec	r24
    3b70:	d2 f7       	brpl	.-12     	; 0x3b66 <_ZN6SdFile7seekSetEm+0xac>
    3b72:	4c 15       	cp	r20, r12
    3b74:	5d 05       	cpc	r21, r13
    3b76:	6e 05       	cpc	r22, r14
    3b78:	7f 05       	cpc	r23, r15
    3b7a:	20 f0       	brcs	.+8      	; 0x3b84 <_ZN6SdFile7seekSetEm+0xca>
    3b7c:	01 2b       	or	r16, r17
    3b7e:	02 2b       	or	r16, r18
    3b80:	03 2b       	or	r16, r19
    3b82:	49 f4       	brne	.+18     	; 0x3b96 <_ZN6SdFile7seekSetEm+0xdc>
    3b84:	8f 89       	ldd	r24, Y+23	; 0x17
    3b86:	98 8d       	ldd	r25, Y+24	; 0x18
    3b88:	a9 8d       	ldd	r26, Y+25	; 0x19
    3b8a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3b8c:	8e 83       	std	Y+6, r24	; 0x06
    3b8e:	9f 83       	std	Y+7, r25	; 0x07
    3b90:	a8 87       	std	Y+8, r26	; 0x08
    3b92:	b9 87       	std	Y+9, r27	; 0x09
    3b94:	04 c0       	rjmp	.+8      	; 0x3b9e <_ZN6SdFile7seekSetEm+0xe4>
    3b96:	4c 19       	sub	r20, r12
    3b98:	5d 09       	sbc	r21, r13
    3b9a:	6e 09       	sbc	r22, r14
    3b9c:	7f 09       	sbc	r23, r15
    3b9e:	6a 01       	movw	r12, r20
    3ba0:	7b 01       	movw	r14, r22
    3ba2:	81 e0       	ldi	r24, 0x01	; 1
    3ba4:	c8 1a       	sub	r12, r24
    3ba6:	d1 08       	sbc	r13, r1
    3ba8:	e1 08       	sbc	r14, r1
    3baa:	f1 08       	sbc	r15, r1
    3bac:	45 2b       	or	r20, r21
    3bae:	46 2b       	or	r20, r22
    3bb0:	47 2b       	or	r20, r23
    3bb2:	81 f0       	breq	.+32     	; 0x3bd4 <_ZN6SdFile7seekSetEm+0x11a>
    3bb4:	4e 81       	ldd	r20, Y+6	; 0x06
    3bb6:	5f 81       	ldd	r21, Y+7	; 0x07
    3bb8:	68 85       	ldd	r22, Y+8	; 0x08
    3bba:	79 85       	ldd	r23, Y+9	; 0x09
    3bbc:	9e 01       	movw	r18, r28
    3bbe:	2a 5f       	subi	r18, 0xFA	; 250
    3bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    3bc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bc6:	0e 94 be 23 	call	0x477c	; 0x477c <_ZNK8SdVolume6fatGetEmPm>
    3bca:	b7 01       	movw	r22, r14
    3bcc:	a6 01       	movw	r20, r12
    3bce:	81 11       	cpse	r24, r1
    3bd0:	e6 cf       	rjmp	.-52     	; 0x3b9e <_ZN6SdFile7seekSetEm+0xe4>
    3bd2:	07 c0       	rjmp	.+14     	; 0x3be2 <_ZN6SdFile7seekSetEm+0x128>
    3bd4:	8a 86       	std	Y+10, r8	; 0x0a
    3bd6:	9b 86       	std	Y+11, r9	; 0x0b
    3bd8:	ac 86       	std	Y+12, r10	; 0x0c
    3bda:	bd 86       	std	Y+13, r11	; 0x0d
    3bdc:	81 e0       	ldi	r24, 0x01	; 1
    3bde:	01 c0       	rjmp	.+2      	; 0x3be2 <_ZN6SdFile7seekSetEm+0x128>
    3be0:	80 e0       	ldi	r24, 0x00	; 0
    3be2:	df 91       	pop	r29
    3be4:	cf 91       	pop	r28
    3be6:	1f 91       	pop	r17
    3be8:	0f 91       	pop	r16
    3bea:	ff 90       	pop	r15
    3bec:	ef 90       	pop	r14
    3bee:	df 90       	pop	r13
    3bf0:	cf 90       	pop	r12
    3bf2:	bf 90       	pop	r11
    3bf4:	af 90       	pop	r10
    3bf6:	9f 90       	pop	r9
    3bf8:	8f 90       	pop	r8
    3bfa:	08 95       	ret

00003bfc <_ZN6SdFile4syncEh>:
    3bfc:	ff 92       	push	r15
    3bfe:	0f 93       	push	r16
    3c00:	1f 93       	push	r17
    3c02:	cf 93       	push	r28
    3c04:	df 93       	push	r29
    3c06:	fc 01       	movw	r30, r24
    3c08:	85 81       	ldd	r24, Z+5	; 0x05
    3c0a:	88 23       	and	r24, r24
    3c0c:	09 f4       	brne	.+2      	; 0x3c10 <_ZN6SdFile4syncEh+0x14>
    3c0e:	43 c0       	rjmp	.+134    	; 0x3c96 <_ZN6SdFile4syncEh+0x9a>
    3c10:	f6 2e       	mov	r15, r22
    3c12:	ef 01       	movw	r28, r30
    3c14:	84 81       	ldd	r24, Z+4	; 0x04
    3c16:	88 23       	and	r24, r24
    3c18:	a4 f5       	brge	.+104    	; 0x3c82 <_ZN6SdFile4syncEh+0x86>
    3c1a:	61 e0       	ldi	r22, 0x01	; 1
    3c1c:	cf 01       	movw	r24, r30
    3c1e:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <_ZN6SdFile13cacheDirEntryEh>
    3c22:	8c 01       	movw	r16, r24
    3c24:	89 2b       	or	r24, r25
    3c26:	b1 f1       	breq	.+108    	; 0x3c94 <_ZN6SdFile4syncEh+0x98>
    3c28:	8d 81       	ldd	r24, Y+5	; 0x05
    3c2a:	82 30       	cpi	r24, 0x02	; 2
    3c2c:	48 f4       	brcc	.+18     	; 0x3c40 <_ZN6SdFile4syncEh+0x44>
    3c2e:	8b 89       	ldd	r24, Y+19	; 0x13
    3c30:	9c 89       	ldd	r25, Y+20	; 0x14
    3c32:	ad 89       	ldd	r26, Y+21	; 0x15
    3c34:	be 89       	ldd	r27, Y+22	; 0x16
    3c36:	f8 01       	movw	r30, r16
    3c38:	84 8f       	std	Z+28, r24	; 0x1c
    3c3a:	95 8f       	std	Z+29, r25	; 0x1d
    3c3c:	a6 8f       	std	Z+30, r26	; 0x1e
    3c3e:	b7 8f       	std	Z+31, r27	; 0x1f
    3c40:	8f 89       	ldd	r24, Y+23	; 0x17
    3c42:	98 8d       	ldd	r25, Y+24	; 0x18
    3c44:	a9 8d       	ldd	r26, Y+25	; 0x19
    3c46:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3c48:	f8 01       	movw	r30, r16
    3c4a:	93 8f       	std	Z+27, r25	; 0x1b
    3c4c:	82 8f       	std	Z+26, r24	; 0x1a
    3c4e:	8f 89       	ldd	r24, Y+23	; 0x17
    3c50:	98 8d       	ldd	r25, Y+24	; 0x18
    3c52:	a9 8d       	ldd	r26, Y+25	; 0x19
    3c54:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3c56:	b5 8b       	std	Z+21, r27	; 0x15
    3c58:	a4 8b       	std	Z+20, r26	; 0x14
    3c5a:	e0 91 fc 02 	lds	r30, 0x02FC	; 0x8002fc <_ZN6SdFile9dateTime_E>
    3c5e:	f0 91 fd 02 	lds	r31, 0x02FD	; 0x8002fd <_ZN6SdFile9dateTime_E+0x1>
    3c62:	30 97       	sbiw	r30, 0x00	; 0
    3c64:	59 f0       	breq	.+22     	; 0x3c7c <_ZN6SdFile4syncEh+0x80>
    3c66:	b8 01       	movw	r22, r16
    3c68:	6a 5e       	subi	r22, 0xEA	; 234
    3c6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c6c:	c8 01       	movw	r24, r16
    3c6e:	48 96       	adiw	r24, 0x18	; 24
    3c70:	09 95       	icall
    3c72:	f8 01       	movw	r30, r16
    3c74:	80 8d       	ldd	r24, Z+24	; 0x18
    3c76:	91 8d       	ldd	r25, Z+25	; 0x19
    3c78:	93 8b       	std	Z+19, r25	; 0x13
    3c7a:	82 8b       	std	Z+18, r24	; 0x12
    3c7c:	8c 81       	ldd	r24, Y+4	; 0x04
    3c7e:	8f 77       	andi	r24, 0x7F	; 127
    3c80:	8c 83       	std	Y+4, r24	; 0x04
    3c82:	f1 10       	cpse	r15, r1
    3c84:	03 c0       	rjmp	.+6      	; 0x3c8c <_ZN6SdFile4syncEh+0x90>
    3c86:	8c 81       	ldd	r24, Y+4	; 0x04
    3c88:	8f 7e       	andi	r24, 0xEF	; 239
    3c8a:	8c 83       	std	Y+4, r24	; 0x04
    3c8c:	8f 2d       	mov	r24, r15
    3c8e:	0e 94 2f 23 	call	0x465e	; 0x465e <_ZN8SdVolume10cacheFlushEh>
    3c92:	01 c0       	rjmp	.+2      	; 0x3c96 <_ZN6SdFile4syncEh+0x9a>
    3c94:	80 e0       	ldi	r24, 0x00	; 0
    3c96:	df 91       	pop	r29
    3c98:	cf 91       	pop	r28
    3c9a:	1f 91       	pop	r17
    3c9c:	0f 91       	pop	r16
    3c9e:	ff 90       	pop	r15
    3ca0:	08 95       	ret

00003ca2 <_ZN6SdFile5closeEv>:
    3ca2:	cf 93       	push	r28
    3ca4:	df 93       	push	r29
    3ca6:	ec 01       	movw	r28, r24
    3ca8:	61 e0       	ldi	r22, 0x01	; 1
    3caa:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <_ZN6SdFile4syncEh>
    3cae:	88 23       	and	r24, r24
    3cb0:	11 f0       	breq	.+4      	; 0x3cb6 <_ZN6SdFile5closeEv+0x14>
    3cb2:	1d 82       	std	Y+5, r1	; 0x05
    3cb4:	81 e0       	ldi	r24, 0x01	; 1
    3cb6:	df 91       	pop	r29
    3cb8:	cf 91       	pop	r28
    3cba:	08 95       	ret

00003cbc <_ZN6SdFile17availableForWriteEv>:
    3cbc:	cf 93       	push	r28
    3cbe:	df 93       	push	r29
    3cc0:	fc 01       	movw	r30, r24
    3cc2:	25 81       	ldd	r18, Z+5	; 0x05
    3cc4:	21 30       	cpi	r18, 0x01	; 1
    3cc6:	29 f4       	brne	.+10     	; 0x3cd2 <_ZN6SdFile17availableForWriteEv+0x16>
    3cc8:	24 81       	ldd	r18, Z+4	; 0x04
    3cca:	21 fd       	sbrc	r18, 1
    3ccc:	04 c0       	rjmp	.+8      	; 0x3cd6 <_ZN6SdFile17availableForWriteEv+0x1a>
    3cce:	21 e0       	ldi	r18, 0x01	; 1
    3cd0:	03 c0       	rjmp	.+6      	; 0x3cd8 <_ZN6SdFile17availableForWriteEv+0x1c>
    3cd2:	21 e0       	ldi	r18, 0x01	; 1
    3cd4:	01 c0       	rjmp	.+2      	; 0x3cd8 <_ZN6SdFile17availableForWriteEv+0x1c>
    3cd6:	20 e0       	ldi	r18, 0x00	; 0
    3cd8:	21 11       	cpse	r18, r1
    3cda:	4a c0       	rjmp	.+148    	; 0x3d70 <_ZN6SdFile17availableForWriteEv+0xb4>
    3cdc:	ec 01       	movw	r28, r24
    3cde:	8c 81       	ldd	r24, Y+4	; 0x04
    3ce0:	82 ff       	sbrs	r24, 2
    3ce2:	12 c0       	rjmp	.+36     	; 0x3d08 <_ZN6SdFile17availableForWriteEv+0x4c>
    3ce4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ce6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ce8:	ac 85       	ldd	r26, Y+12	; 0x0c
    3cea:	bd 85       	ldd	r27, Y+13	; 0x0d
    3cec:	4b 89       	ldd	r20, Y+19	; 0x13
    3cee:	5c 89       	ldd	r21, Y+20	; 0x14
    3cf0:	6d 89       	ldd	r22, Y+21	; 0x15
    3cf2:	7e 89       	ldd	r23, Y+22	; 0x16
    3cf4:	84 17       	cp	r24, r20
    3cf6:	95 07       	cpc	r25, r21
    3cf8:	a6 07       	cpc	r26, r22
    3cfa:	b7 07       	cpc	r27, r23
    3cfc:	29 f0       	breq	.+10     	; 0x3d08 <_ZN6SdFile17availableForWriteEv+0x4c>
    3cfe:	ce 01       	movw	r24, r28
    3d00:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <_ZN6SdFile7seekSetEm>
    3d04:	88 23       	and	r24, r24
    3d06:	b9 f1       	breq	.+110    	; 0x3d76 <_ZN6SdFile17availableForWriteEv+0xba>
    3d08:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <_ZN8SdVolume7sdCard_E>
    3d0c:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <_ZN8SdVolume7sdCard_E+0x1>
    3d10:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <_ZN7Sd2Card6isBusyEv>
    3d14:	81 11       	cpse	r24, r1
    3d16:	32 c0       	rjmp	.+100    	; 0x3d7c <_ZN6SdFile17availableForWriteEv+0xc0>
    3d18:	8c 81       	ldd	r24, Y+4	; 0x04
    3d1a:	85 ff       	sbrs	r24, 5
    3d1c:	0a c0       	rjmp	.+20     	; 0x3d32 <_ZN6SdFile17availableForWriteEv+0x76>
    3d1e:	60 e0       	ldi	r22, 0x00	; 0
    3d20:	ce 01       	movw	r24, r28
    3d22:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <_ZN6SdFile4syncEh>
    3d26:	8c 81       	ldd	r24, Y+4	; 0x04
    3d28:	8f 7d       	andi	r24, 0xDF	; 223
    3d2a:	8c 83       	std	Y+4, r24	; 0x04
    3d2c:	80 e0       	ldi	r24, 0x00	; 0
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	27 c0       	rjmp	.+78     	; 0x3d80 <_ZN6SdFile17availableForWriteEv+0xc4>
    3d32:	40 91 fe 02 	lds	r20, 0x02FE	; 0x8002fe <_ZN8SdVolume17cacheMirrorBlock_E>
    3d36:	50 91 ff 02 	lds	r21, 0x02FF	; 0x8002ff <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    3d3a:	60 91 00 03 	lds	r22, 0x0300	; 0x800300 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    3d3e:	70 91 01 03 	lds	r23, 0x0301	; 0x800301 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    3d42:	45 2b       	or	r20, r21
    3d44:	46 2b       	or	r20, r22
    3d46:	47 2b       	or	r20, r23
    3d48:	31 f0       	breq	.+12     	; 0x3d56 <_ZN6SdFile17availableForWriteEv+0x9a>
    3d4a:	80 e0       	ldi	r24, 0x00	; 0
    3d4c:	0e 94 09 23 	call	0x4612	; 0x4612 <_ZN8SdVolume21cacheMirrorBlockFlushEh>
    3d50:	80 e0       	ldi	r24, 0x00	; 0
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	15 c0       	rjmp	.+42     	; 0x3d80 <_ZN6SdFile17availableForWriteEv+0xc4>
    3d56:	80 61       	ori	r24, 0x10	; 16
    3d58:	8c 83       	std	Y+4, r24	; 0x04
    3d5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d5c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d5e:	ac 85       	ldd	r26, Y+12	; 0x0c
    3d60:	bd 85       	ldd	r27, Y+13	; 0x0d
    3d62:	9c 01       	movw	r18, r24
    3d64:	31 70       	andi	r19, 0x01	; 1
    3d66:	80 e0       	ldi	r24, 0x00	; 0
    3d68:	92 e0       	ldi	r25, 0x02	; 2
    3d6a:	82 1b       	sub	r24, r18
    3d6c:	93 0b       	sbc	r25, r19
    3d6e:	08 c0       	rjmp	.+16     	; 0x3d80 <_ZN6SdFile17availableForWriteEv+0xc4>
    3d70:	80 e0       	ldi	r24, 0x00	; 0
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	05 c0       	rjmp	.+10     	; 0x3d80 <_ZN6SdFile17availableForWriteEv+0xc4>
    3d76:	80 e0       	ldi	r24, 0x00	; 0
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	02 c0       	rjmp	.+4      	; 0x3d80 <_ZN6SdFile17availableForWriteEv+0xc4>
    3d7c:	80 e0       	ldi	r24, 0x00	; 0
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	df 91       	pop	r29
    3d82:	cf 91       	pop	r28
    3d84:	08 95       	ret

00003d86 <_ZN6SdFile8truncateEm>:
    3d86:	4f 92       	push	r4
    3d88:	5f 92       	push	r5
    3d8a:	6f 92       	push	r6
    3d8c:	7f 92       	push	r7
    3d8e:	8f 92       	push	r8
    3d90:	9f 92       	push	r9
    3d92:	af 92       	push	r10
    3d94:	bf 92       	push	r11
    3d96:	ef 92       	push	r14
    3d98:	ff 92       	push	r15
    3d9a:	0f 93       	push	r16
    3d9c:	1f 93       	push	r17
    3d9e:	cf 93       	push	r28
    3da0:	df 93       	push	r29
    3da2:	00 d0       	rcall	.+0      	; 0x3da4 <_ZN6SdFile8truncateEm+0x1e>
    3da4:	00 d0       	rcall	.+0      	; 0x3da6 <_ZN6SdFile8truncateEm+0x20>
    3da6:	cd b7       	in	r28, 0x3d	; 61
    3da8:	de b7       	in	r29, 0x3e	; 62
    3daa:	fc 01       	movw	r30, r24
    3dac:	85 81       	ldd	r24, Z+5	; 0x05
    3dae:	81 30       	cpi	r24, 0x01	; 1
    3db0:	29 f4       	brne	.+10     	; 0x3dbc <_ZN6SdFile8truncateEm+0x36>
    3db2:	84 81       	ldd	r24, Z+4	; 0x04
    3db4:	81 fd       	sbrc	r24, 1
    3db6:	04 c0       	rjmp	.+8      	; 0x3dc0 <_ZN6SdFile8truncateEm+0x3a>
    3db8:	81 e0       	ldi	r24, 0x01	; 1
    3dba:	03 c0       	rjmp	.+6      	; 0x3dc2 <_ZN6SdFile8truncateEm+0x3c>
    3dbc:	81 e0       	ldi	r24, 0x01	; 1
    3dbe:	01 c0       	rjmp	.+2      	; 0x3dc2 <_ZN6SdFile8truncateEm+0x3c>
    3dc0:	80 e0       	ldi	r24, 0x00	; 0
    3dc2:	81 11       	cpse	r24, r1
    3dc4:	99 c0       	rjmp	.+306    	; 0x3ef8 <_ZN6SdFile8truncateEm+0x172>
    3dc6:	83 89       	ldd	r24, Z+19	; 0x13
    3dc8:	94 89       	ldd	r25, Z+20	; 0x14
    3dca:	a5 89       	ldd	r26, Z+21	; 0x15
    3dcc:	b6 89       	ldd	r27, Z+22	; 0x16
    3dce:	84 17       	cp	r24, r20
    3dd0:	95 07       	cpc	r25, r21
    3dd2:	a6 07       	cpc	r26, r22
    3dd4:	b7 07       	cpc	r27, r23
    3dd6:	08 f4       	brcc	.+2      	; 0x3dda <_ZN6SdFile8truncateEm+0x54>
    3dd8:	91 c0       	rjmp	.+290    	; 0x3efc <_ZN6SdFile8truncateEm+0x176>
    3dda:	89 2b       	or	r24, r25
    3ddc:	8a 2b       	or	r24, r26
    3dde:	8b 2b       	or	r24, r27
    3de0:	09 f4       	brne	.+2      	; 0x3de4 <_ZN6SdFile8truncateEm+0x5e>
    3de2:	8e c0       	rjmp	.+284    	; 0x3f00 <_ZN6SdFile8truncateEm+0x17a>
    3de4:	82 84       	ldd	r8, Z+10	; 0x0a
    3de6:	93 84       	ldd	r9, Z+11	; 0x0b
    3de8:	a4 84       	ldd	r10, Z+12	; 0x0c
    3dea:	b5 84       	ldd	r11, Z+13	; 0x0d
    3dec:	48 15       	cp	r20, r8
    3dee:	59 05       	cpc	r21, r9
    3df0:	6a 05       	cpc	r22, r10
    3df2:	7b 05       	cpc	r23, r11
    3df4:	10 f4       	brcc	.+4      	; 0x3dfa <_ZN6SdFile8truncateEm+0x74>
    3df6:	4a 01       	movw	r8, r20
    3df8:	5b 01       	movw	r10, r22
    3dfa:	2a 01       	movw	r4, r20
    3dfc:	3b 01       	movw	r6, r22
    3dfe:	7f 01       	movw	r14, r30
    3e00:	cf 01       	movw	r24, r30
    3e02:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <_ZN6SdFile7seekSetEm>
    3e06:	88 23       	and	r24, r24
    3e08:	09 f4       	brne	.+2      	; 0x3e0c <_ZN6SdFile8truncateEm+0x86>
    3e0a:	7b c0       	rjmp	.+246    	; 0x3f02 <_ZN6SdFile8truncateEm+0x17c>
    3e0c:	41 14       	cp	r4, r1
    3e0e:	51 04       	cpc	r5, r1
    3e10:	61 04       	cpc	r6, r1
    3e12:	71 04       	cpc	r7, r1
    3e14:	b1 f4       	brne	.+44     	; 0x3e42 <_ZN6SdFile8truncateEm+0xbc>
    3e16:	d7 01       	movw	r26, r14
    3e18:	57 96       	adiw	r26, 0x17	; 23
    3e1a:	4d 91       	ld	r20, X+
    3e1c:	5d 91       	ld	r21, X+
    3e1e:	6d 91       	ld	r22, X+
    3e20:	7c 91       	ld	r23, X
    3e22:	5a 97       	sbiw	r26, 0x1a	; 26
    3e24:	5b 96       	adiw	r26, 0x1b	; 27
    3e26:	8d 91       	ld	r24, X+
    3e28:	9c 91       	ld	r25, X
    3e2a:	5c 97       	sbiw	r26, 0x1c	; 28
    3e2c:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <_ZN8SdVolume9freeChainEm>
    3e30:	88 23       	and	r24, r24
    3e32:	09 f4       	brne	.+2      	; 0x3e36 <_ZN6SdFile8truncateEm+0xb0>
    3e34:	66 c0       	rjmp	.+204    	; 0x3f02 <_ZN6SdFile8truncateEm+0x17c>
    3e36:	f7 01       	movw	r30, r14
    3e38:	17 8a       	std	Z+23, r1	; 0x17
    3e3a:	10 8e       	std	Z+24, r1	; 0x18
    3e3c:	11 8e       	std	Z+25, r1	; 0x19
    3e3e:	12 8e       	std	Z+26, r1	; 0x1a
    3e40:	42 c0       	rjmp	.+132    	; 0x3ec6 <_ZN6SdFile8truncateEm+0x140>
    3e42:	d7 01       	movw	r26, r14
    3e44:	16 96       	adiw	r26, 0x06	; 6
    3e46:	4d 91       	ld	r20, X+
    3e48:	5d 91       	ld	r21, X+
    3e4a:	6d 91       	ld	r22, X+
    3e4c:	7c 91       	ld	r23, X
    3e4e:	19 97       	sbiw	r26, 0x09	; 9
    3e50:	9e 01       	movw	r18, r28
    3e52:	2f 5f       	subi	r18, 0xFF	; 255
    3e54:	3f 4f       	sbci	r19, 0xFF	; 255
    3e56:	5b 96       	adiw	r26, 0x1b	; 27
    3e58:	8d 91       	ld	r24, X+
    3e5a:	9c 91       	ld	r25, X
    3e5c:	5c 97       	sbiw	r26, 0x1c	; 28
    3e5e:	0e 94 be 23 	call	0x477c	; 0x477c <_ZNK8SdVolume6fatGetEmPm>
    3e62:	88 23       	and	r24, r24
    3e64:	71 f1       	breq	.+92     	; 0x3ec2 <_ZN6SdFile8truncateEm+0x13c>
    3e66:	49 81       	ldd	r20, Y+1	; 0x01
    3e68:	5a 81       	ldd	r21, Y+2	; 0x02
    3e6a:	6b 81       	ldd	r22, Y+3	; 0x03
    3e6c:	7c 81       	ldd	r23, Y+4	; 0x04
    3e6e:	d7 01       	movw	r26, r14
    3e70:	5b 96       	adiw	r26, 0x1b	; 27
    3e72:	ed 91       	ld	r30, X+
    3e74:	fc 91       	ld	r31, X
    3e76:	5c 97       	sbiw	r26, 0x1c	; 28
    3e78:	87 89       	ldd	r24, Z+23	; 0x17
    3e7a:	80 31       	cpi	r24, 0x10	; 16
    3e7c:	29 f4       	brne	.+10     	; 0x3e88 <_ZN6SdFile8truncateEm+0x102>
    3e7e:	88 ef       	ldi	r24, 0xF8	; 248
    3e80:	9f ef       	ldi	r25, 0xFF	; 255
    3e82:	a0 e0       	ldi	r26, 0x00	; 0
    3e84:	b0 e0       	ldi	r27, 0x00	; 0
    3e86:	04 c0       	rjmp	.+8      	; 0x3e90 <_ZN6SdFile8truncateEm+0x10a>
    3e88:	88 ef       	ldi	r24, 0xF8	; 248
    3e8a:	9f ef       	ldi	r25, 0xFF	; 255
    3e8c:	af ef       	ldi	r26, 0xFF	; 255
    3e8e:	bf e0       	ldi	r27, 0x0F	; 15
    3e90:	48 17       	cp	r20, r24
    3e92:	59 07       	cpc	r21, r25
    3e94:	6a 07       	cpc	r22, r26
    3e96:	7b 07       	cpc	r23, r27
    3e98:	b0 f4       	brcc	.+44     	; 0x3ec6 <_ZN6SdFile8truncateEm+0x140>
    3e9a:	cf 01       	movw	r24, r30
    3e9c:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <_ZN8SdVolume9freeChainEm>
    3ea0:	88 23       	and	r24, r24
    3ea2:	79 f0       	breq	.+30     	; 0x3ec2 <_ZN6SdFile8truncateEm+0x13c>
    3ea4:	f7 01       	movw	r30, r14
    3ea6:	46 81       	ldd	r20, Z+6	; 0x06
    3ea8:	57 81       	ldd	r21, Z+7	; 0x07
    3eaa:	60 85       	ldd	r22, Z+8	; 0x08
    3eac:	71 85       	ldd	r23, Z+9	; 0x09
    3eae:	0f ef       	ldi	r16, 0xFF	; 255
    3eb0:	1f ef       	ldi	r17, 0xFF	; 255
    3eb2:	2f ef       	ldi	r18, 0xFF	; 255
    3eb4:	3f e0       	ldi	r19, 0x0F	; 15
    3eb6:	83 8d       	ldd	r24, Z+27	; 0x1b
    3eb8:	94 8d       	ldd	r25, Z+28	; 0x1c
    3eba:	0e 94 a7 24 	call	0x494e	; 0x494e <_ZN8SdVolume6fatPutEmm>
    3ebe:	81 11       	cpse	r24, r1
    3ec0:	02 c0       	rjmp	.+4      	; 0x3ec6 <_ZN6SdFile8truncateEm+0x140>
    3ec2:	80 e0       	ldi	r24, 0x00	; 0
    3ec4:	1e c0       	rjmp	.+60     	; 0x3f02 <_ZN6SdFile8truncateEm+0x17c>
    3ec6:	d7 01       	movw	r26, r14
    3ec8:	53 96       	adiw	r26, 0x13	; 19
    3eca:	4d 92       	st	X+, r4
    3ecc:	5d 92       	st	X+, r5
    3ece:	6d 92       	st	X+, r6
    3ed0:	7c 92       	st	X, r7
    3ed2:	56 97       	sbiw	r26, 0x16	; 22
    3ed4:	14 96       	adiw	r26, 0x04	; 4
    3ed6:	8c 91       	ld	r24, X
    3ed8:	14 97       	sbiw	r26, 0x04	; 4
    3eda:	80 68       	ori	r24, 0x80	; 128
    3edc:	14 96       	adiw	r26, 0x04	; 4
    3ede:	8c 93       	st	X, r24
    3ee0:	61 e0       	ldi	r22, 0x01	; 1
    3ee2:	c7 01       	movw	r24, r14
    3ee4:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <_ZN6SdFile4syncEh>
    3ee8:	88 23       	and	r24, r24
    3eea:	59 f0       	breq	.+22     	; 0x3f02 <_ZN6SdFile8truncateEm+0x17c>
    3eec:	b5 01       	movw	r22, r10
    3eee:	a4 01       	movw	r20, r8
    3ef0:	c7 01       	movw	r24, r14
    3ef2:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <_ZN6SdFile7seekSetEm>
    3ef6:	05 c0       	rjmp	.+10     	; 0x3f02 <_ZN6SdFile8truncateEm+0x17c>
    3ef8:	80 e0       	ldi	r24, 0x00	; 0
    3efa:	03 c0       	rjmp	.+6      	; 0x3f02 <_ZN6SdFile8truncateEm+0x17c>
    3efc:	80 e0       	ldi	r24, 0x00	; 0
    3efe:	01 c0       	rjmp	.+2      	; 0x3f02 <_ZN6SdFile8truncateEm+0x17c>
    3f00:	81 e0       	ldi	r24, 0x01	; 1
    3f02:	0f 90       	pop	r0
    3f04:	0f 90       	pop	r0
    3f06:	0f 90       	pop	r0
    3f08:	0f 90       	pop	r0
    3f0a:	df 91       	pop	r29
    3f0c:	cf 91       	pop	r28
    3f0e:	1f 91       	pop	r17
    3f10:	0f 91       	pop	r16
    3f12:	ff 90       	pop	r15
    3f14:	ef 90       	pop	r14
    3f16:	bf 90       	pop	r11
    3f18:	af 90       	pop	r10
    3f1a:	9f 90       	pop	r9
    3f1c:	8f 90       	pop	r8
    3f1e:	7f 90       	pop	r7
    3f20:	6f 90       	pop	r6
    3f22:	5f 90       	pop	r5
    3f24:	4f 90       	pop	r4
    3f26:	08 95       	ret

00003f28 <_ZN6SdFile15openCachedEntryEhh>:
    3f28:	1f 93       	push	r17
    3f2a:	cf 93       	push	r28
    3f2c:	df 93       	push	r29
    3f2e:	ec 01       	movw	r28, r24
    3f30:	80 e2       	ldi	r24, 0x20	; 32
    3f32:	68 9f       	mul	r22, r24
    3f34:	f0 01       	movw	r30, r0
    3f36:	11 24       	eor	r1, r1
    3f38:	eb 5f       	subi	r30, 0xFB	; 251
    3f3a:	fc 4f       	sbci	r31, 0xFC	; 252
    3f3c:	93 85       	ldd	r25, Z+11	; 0x0b
    3f3e:	91 71       	andi	r25, 0x11	; 17
    3f40:	21 f0       	breq	.+8      	; 0x3f4a <_ZN6SdFile15openCachedEntryEhh+0x22>
    3f42:	84 2f       	mov	r24, r20
    3f44:	82 74       	andi	r24, 0x42	; 66
    3f46:	09 f0       	breq	.+2      	; 0x3f4a <_ZN6SdFile15openCachedEntryEhh+0x22>
    3f48:	54 c0       	rjmp	.+168    	; 0x3ff2 <_ZN6SdFile15openCachedEntryEhh+0xca>
    3f4a:	14 2f       	mov	r17, r20
    3f4c:	6a 8b       	std	Y+18, r22	; 0x12
    3f4e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    3f52:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3f56:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3f5a:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3f5e:	8e 87       	std	Y+14, r24	; 0x0e
    3f60:	9f 87       	std	Y+15, r25	; 0x0f
    3f62:	a8 8b       	std	Y+16, r26	; 0x10
    3f64:	b9 8b       	std	Y+17, r27	; 0x11
    3f66:	84 89       	ldd	r24, Z+20	; 0x14
    3f68:	95 89       	ldd	r25, Z+21	; 0x15
    3f6a:	a0 e0       	ldi	r26, 0x00	; 0
    3f6c:	b0 e0       	ldi	r27, 0x00	; 0
    3f6e:	dc 01       	movw	r26, r24
    3f70:	99 27       	eor	r25, r25
    3f72:	88 27       	eor	r24, r24
    3f74:	8f 8b       	std	Y+23, r24	; 0x17
    3f76:	98 8f       	std	Y+24, r25	; 0x18
    3f78:	a9 8f       	std	Y+25, r26	; 0x19
    3f7a:	ba 8f       	std	Y+26, r27	; 0x1a
    3f7c:	42 8d       	ldd	r20, Z+26	; 0x1a
    3f7e:	53 8d       	ldd	r21, Z+27	; 0x1b
    3f80:	60 e0       	ldi	r22, 0x00	; 0
    3f82:	70 e0       	ldi	r23, 0x00	; 0
    3f84:	48 2b       	or	r20, r24
    3f86:	59 2b       	or	r21, r25
    3f88:	6a 2b       	or	r22, r26
    3f8a:	7b 2b       	or	r23, r27
    3f8c:	4f 8b       	std	Y+23, r20	; 0x17
    3f8e:	58 8f       	std	Y+24, r21	; 0x18
    3f90:	69 8f       	std	Y+25, r22	; 0x19
    3f92:	7a 8f       	std	Y+26, r23	; 0x1a
    3f94:	23 85       	ldd	r18, Z+11	; 0x0b
    3f96:	28 71       	andi	r18, 0x18	; 24
    3f98:	59 f4       	brne	.+22     	; 0x3fb0 <_ZN6SdFile15openCachedEntryEhh+0x88>
    3f9a:	84 8d       	ldd	r24, Z+28	; 0x1c
    3f9c:	95 8d       	ldd	r25, Z+29	; 0x1d
    3f9e:	a6 8d       	ldd	r26, Z+30	; 0x1e
    3fa0:	b7 8d       	ldd	r27, Z+31	; 0x1f
    3fa2:	8b 8b       	std	Y+19, r24	; 0x13
    3fa4:	9c 8b       	std	Y+20, r25	; 0x14
    3fa6:	ad 8b       	std	Y+21, r26	; 0x15
    3fa8:	be 8b       	std	Y+22, r27	; 0x16
    3faa:	81 e0       	ldi	r24, 0x01	; 1
    3fac:	8d 83       	std	Y+5, r24	; 0x05
    3fae:	0d c0       	rjmp	.+26     	; 0x3fca <_ZN6SdFile15openCachedEntryEhh+0xa2>
    3fb0:	20 31       	cpi	r18, 0x10	; 16
    3fb2:	09 f5       	brne	.+66     	; 0x3ff6 <_ZN6SdFile15openCachedEntryEhh+0xce>
    3fb4:	9e 01       	movw	r18, r28
    3fb6:	2d 5e       	subi	r18, 0xED	; 237
    3fb8:	3f 4f       	sbci	r19, 0xFF	; 255
    3fba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fbe:	0e 94 49 24 	call	0x4892	; 0x4892 <_ZNK8SdVolume9chainSizeEmPm>
    3fc2:	88 23       	and	r24, r24
    3fc4:	d9 f0       	breq	.+54     	; 0x3ffc <_ZN6SdFile15openCachedEntryEhh+0xd4>
    3fc6:	84 e0       	ldi	r24, 0x04	; 4
    3fc8:	8d 83       	std	Y+5, r24	; 0x05
    3fca:	81 2f       	mov	r24, r17
    3fcc:	8f 70       	andi	r24, 0x0F	; 15
    3fce:	8c 83       	std	Y+4, r24	; 0x04
    3fd0:	1e 82       	std	Y+6, r1	; 0x06
    3fd2:	1f 82       	std	Y+7, r1	; 0x07
    3fd4:	18 86       	std	Y+8, r1	; 0x08
    3fd6:	19 86       	std	Y+9, r1	; 0x09
    3fd8:	1a 86       	std	Y+10, r1	; 0x0a
    3fda:	1b 86       	std	Y+11, r1	; 0x0b
    3fdc:	1c 86       	std	Y+12, r1	; 0x0c
    3fde:	1d 86       	std	Y+13, r1	; 0x0d
    3fe0:	16 ff       	sbrs	r17, 6
    3fe2:	0b c0       	rjmp	.+22     	; 0x3ffa <_ZN6SdFile15openCachedEntryEhh+0xd2>
    3fe4:	40 e0       	ldi	r20, 0x00	; 0
    3fe6:	50 e0       	ldi	r21, 0x00	; 0
    3fe8:	ba 01       	movw	r22, r20
    3fea:	ce 01       	movw	r24, r28
    3fec:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <_ZN6SdFile8truncateEm>
    3ff0:	05 c0       	rjmp	.+10     	; 0x3ffc <_ZN6SdFile15openCachedEntryEhh+0xd4>
    3ff2:	80 e0       	ldi	r24, 0x00	; 0
    3ff4:	03 c0       	rjmp	.+6      	; 0x3ffc <_ZN6SdFile15openCachedEntryEhh+0xd4>
    3ff6:	80 e0       	ldi	r24, 0x00	; 0
    3ff8:	01 c0       	rjmp	.+2      	; 0x3ffc <_ZN6SdFile15openCachedEntryEhh+0xd4>
    3ffa:	81 e0       	ldi	r24, 0x01	; 1
    3ffc:	df 91       	pop	r29
    3ffe:	cf 91       	pop	r28
    4000:	1f 91       	pop	r17
    4002:	08 95       	ret

00004004 <_ZN6SdFile4openEPS_PKch>:
    4004:	af 92       	push	r10
    4006:	bf 92       	push	r11
    4008:	cf 92       	push	r12
    400a:	df 92       	push	r13
    400c:	ef 92       	push	r14
    400e:	ff 92       	push	r15
    4010:	0f 93       	push	r16
    4012:	1f 93       	push	r17
    4014:	cf 93       	push	r28
    4016:	df 93       	push	r29
    4018:	cd b7       	in	r28, 0x3d	; 61
    401a:	de b7       	in	r29, 0x3e	; 62
    401c:	2b 97       	sbiw	r28, 0x0b	; 11
    401e:	0f b6       	in	r0, 0x3f	; 63
    4020:	f8 94       	cli
    4022:	de bf       	out	0x3e, r29	; 62
    4024:	0f be       	out	0x3f, r0	; 63
    4026:	cd bf       	out	0x3d, r28	; 61
    4028:	fc 01       	movw	r30, r24
    402a:	c5 80       	ldd	r12, Z+5	; 0x05
    402c:	c1 10       	cpse	r12, r1
    402e:	ca c0       	rjmp	.+404    	; 0x41c4 <_ZN6SdFile4openEPS_PKch+0x1c0>
    4030:	a2 2e       	mov	r10, r18
    4032:	8b 01       	movw	r16, r22
    4034:	7c 01       	movw	r14, r24
    4036:	be 01       	movw	r22, r28
    4038:	6f 5f       	subi	r22, 0xFF	; 255
    403a:	7f 4f       	sbci	r23, 0xFF	; 255
    403c:	ca 01       	movw	r24, r20
    403e:	0e 94 17 1b 	call	0x362e	; 0x362e <_ZN6SdFile10make83NameEPKcPh>
    4042:	88 23       	and	r24, r24
    4044:	09 f4       	brne	.+2      	; 0x4048 <_ZN6SdFile4openEPS_PKch+0x44>
    4046:	c0 c0       	rjmp	.+384    	; 0x41c8 <_ZN6SdFile4openEPS_PKch+0x1c4>
    4048:	f8 01       	movw	r30, r16
    404a:	83 8d       	ldd	r24, Z+27	; 0x1b
    404c:	94 8d       	ldd	r25, Z+28	; 0x1c
    404e:	f7 01       	movw	r30, r14
    4050:	94 8f       	std	Z+28, r25	; 0x1c
    4052:	83 8f       	std	Z+27, r24	; 0x1b
    4054:	f8 01       	movw	r30, r16
    4056:	16 82       	std	Z+6, r1	; 0x06
    4058:	17 82       	std	Z+7, r1	; 0x07
    405a:	10 86       	std	Z+8, r1	; 0x08
    405c:	11 86       	std	Z+9, r1	; 0x09
    405e:	12 86       	std	Z+10, r1	; 0x0a
    4060:	13 86       	std	Z+11, r1	; 0x0b
    4062:	14 86       	std	Z+12, r1	; 0x0c
    4064:	15 86       	std	Z+13, r1	; 0x0d
    4066:	b1 2c       	mov	r11, r1
    4068:	f8 01       	movw	r30, r16
    406a:	42 85       	ldd	r20, Z+10	; 0x0a
    406c:	53 85       	ldd	r21, Z+11	; 0x0b
    406e:	64 85       	ldd	r22, Z+12	; 0x0c
    4070:	75 85       	ldd	r23, Z+13	; 0x0d
    4072:	83 89       	ldd	r24, Z+19	; 0x13
    4074:	94 89       	ldd	r25, Z+20	; 0x14
    4076:	a5 89       	ldd	r26, Z+21	; 0x15
    4078:	b6 89       	ldd	r27, Z+22	; 0x16
    407a:	48 17       	cp	r20, r24
    407c:	59 07       	cpc	r21, r25
    407e:	6a 07       	cpc	r22, r26
    4080:	7b 07       	cpc	r23, r27
    4082:	08 f0       	brcs	.+2      	; 0x4086 <_ZN6SdFile4openEPS_PKch+0x82>
    4084:	44 c0       	rjmp	.+136    	; 0x410e <_ZN6SdFile4openEPS_PKch+0x10a>
    4086:	68 94       	set
    4088:	14 f8       	bld	r1, 4
    408a:	76 95       	lsr	r23
    408c:	67 95       	ror	r22
    408e:	57 95       	ror	r21
    4090:	47 95       	ror	r20
    4092:	16 94       	lsr	r1
    4094:	d1 f7       	brne	.-12     	; 0x408a <_ZN6SdFile4openEPS_PKch+0x86>
    4096:	f4 2f       	mov	r31, r20
    4098:	ff 70       	andi	r31, 0x0F	; 15
    409a:	df 2e       	mov	r13, r31
    409c:	c8 01       	movw	r24, r16
    409e:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <_ZN6SdFile12readDirCacheEv>
    40a2:	00 97       	sbiw	r24, 0x00	; 0
    40a4:	09 f4       	brne	.+2      	; 0x40a8 <_ZN6SdFile4openEPS_PKch+0xa4>
    40a6:	91 c0       	rjmp	.+290    	; 0x41ca <_ZN6SdFile4openEPS_PKch+0x1c6>
    40a8:	fc 01       	movw	r30, r24
    40aa:	20 81       	ld	r18, Z
    40ac:	22 23       	and	r18, r18
    40ae:	11 f0       	breq	.+4      	; 0x40b4 <_ZN6SdFile4openEPS_PKch+0xb0>
    40b0:	25 3e       	cpi	r18, 0xE5	; 229
    40b2:	b9 f4       	brne	.+46     	; 0x40e2 <_ZN6SdFile4openEPS_PKch+0xde>
    40b4:	b1 10       	cpse	r11, r1
    40b6:	10 c0       	rjmp	.+32     	; 0x40d8 <_ZN6SdFile4openEPS_PKch+0xd4>
    40b8:	f7 01       	movw	r30, r14
    40ba:	d2 8a       	std	Z+18, r13	; 0x12
    40bc:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    40c0:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    40c4:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    40c8:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    40cc:	46 87       	std	Z+14, r20	; 0x0e
    40ce:	57 87       	std	Z+15, r21	; 0x0f
    40d0:	60 8b       	std	Z+16, r22	; 0x10
    40d2:	71 8b       	std	Z+17, r23	; 0x11
    40d4:	bb 24       	eor	r11, r11
    40d6:	b3 94       	inc	r11
    40d8:	fc 01       	movw	r30, r24
    40da:	80 81       	ld	r24, Z
    40dc:	81 11       	cpse	r24, r1
    40de:	c4 cf       	rjmp	.-120    	; 0x4068 <_ZN6SdFile4openEPS_PKch+0x64>
    40e0:	16 c0       	rjmp	.+44     	; 0x410e <_ZN6SdFile4openEPS_PKch+0x10a>
    40e2:	4b e0       	ldi	r20, 0x0B	; 11
    40e4:	50 e0       	ldi	r21, 0x00	; 0
    40e6:	bc 01       	movw	r22, r24
    40e8:	ce 01       	movw	r24, r28
    40ea:	01 96       	adiw	r24, 0x01	; 1
    40ec:	0e 94 2f 31 	call	0x625e	; 0x625e <memcmp>
    40f0:	89 2b       	or	r24, r25
    40f2:	09 f0       	breq	.+2      	; 0x40f6 <_ZN6SdFile4openEPS_PKch+0xf2>
    40f4:	b9 cf       	rjmp	.-142    	; 0x4068 <_ZN6SdFile4openEPS_PKch+0x64>
    40f6:	8a 2d       	mov	r24, r10
    40f8:	80 73       	andi	r24, 0x30	; 48
    40fa:	80 33       	cpi	r24, 0x30	; 48
    40fc:	09 f4       	brne	.+2      	; 0x4100 <_ZN6SdFile4openEPS_PKch+0xfc>
    40fe:	65 c0       	rjmp	.+202    	; 0x41ca <_ZN6SdFile4openEPS_PKch+0x1c6>
    4100:	4a 2d       	mov	r20, r10
    4102:	6d 2d       	mov	r22, r13
    4104:	c7 01       	movw	r24, r14
    4106:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <_ZN6SdFile15openCachedEntryEhh>
    410a:	c8 2e       	mov	r12, r24
    410c:	5e c0       	rjmp	.+188    	; 0x41ca <_ZN6SdFile4openEPS_PKch+0x1c6>
    410e:	8a 2d       	mov	r24, r10
    4110:	82 71       	andi	r24, 0x12	; 18
    4112:	82 31       	cpi	r24, 0x12	; 18
    4114:	09 f0       	breq	.+2      	; 0x4118 <_ZN6SdFile4openEPS_PKch+0x114>
    4116:	59 c0       	rjmp	.+178    	; 0x41ca <_ZN6SdFile4openEPS_PKch+0x1c6>
    4118:	bb 20       	and	r11, r11
    411a:	41 f0       	breq	.+16     	; 0x412c <_ZN6SdFile4openEPS_PKch+0x128>
    411c:	61 e0       	ldi	r22, 0x01	; 1
    411e:	c7 01       	movw	r24, r14
    4120:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <_ZN6SdFile13cacheDirEntryEh>
    4124:	8c 01       	movw	r16, r24
    4126:	89 2b       	or	r24, r25
    4128:	89 f4       	brne	.+34     	; 0x414c <_ZN6SdFile4openEPS_PKch+0x148>
    412a:	4f c0       	rjmp	.+158    	; 0x41ca <_ZN6SdFile4openEPS_PKch+0x1c6>
    412c:	f8 01       	movw	r30, r16
    412e:	85 81       	ldd	r24, Z+5	; 0x05
    4130:	82 30       	cpi	r24, 0x02	; 2
    4132:	09 f4       	brne	.+2      	; 0x4136 <_ZN6SdFile4openEPS_PKch+0x132>
    4134:	4a c0       	rjmp	.+148    	; 0x41ca <_ZN6SdFile4openEPS_PKch+0x1c6>
    4136:	c8 01       	movw	r24, r16
    4138:	0e 94 95 1a 	call	0x352a	; 0x352a <_ZN6SdFile13addDirClusterEv>
    413c:	c8 2e       	mov	r12, r24
    413e:	88 23       	and	r24, r24
    4140:	09 f4       	brne	.+2      	; 0x4144 <_ZN6SdFile4openEPS_PKch+0x140>
    4142:	43 c0       	rjmp	.+134    	; 0x41ca <_ZN6SdFile4openEPS_PKch+0x1c6>
    4144:	f7 01       	movw	r30, r14
    4146:	12 8a       	std	Z+18, r1	; 0x12
    4148:	05 e0       	ldi	r16, 0x05	; 5
    414a:	13 e0       	ldi	r17, 0x03	; 3
    414c:	80 e2       	ldi	r24, 0x20	; 32
    414e:	f8 01       	movw	r30, r16
    4150:	11 92       	st	Z+, r1
    4152:	8a 95       	dec	r24
    4154:	e9 f7       	brne	.-6      	; 0x4150 <_ZN6SdFile4openEPS_PKch+0x14c>
    4156:	8b e0       	ldi	r24, 0x0B	; 11
    4158:	fe 01       	movw	r30, r28
    415a:	31 96       	adiw	r30, 0x01	; 1
    415c:	d8 01       	movw	r26, r16
    415e:	01 90       	ld	r0, Z+
    4160:	0d 92       	st	X+, r0
    4162:	8a 95       	dec	r24
    4164:	e1 f7       	brne	.-8      	; 0x415e <_ZN6SdFile4openEPS_PKch+0x15a>
    4166:	e0 91 fc 02 	lds	r30, 0x02FC	; 0x8002fc <_ZN6SdFile9dateTime_E>
    416a:	f0 91 fd 02 	lds	r31, 0x02FD	; 0x8002fd <_ZN6SdFile9dateTime_E+0x1>
    416e:	30 97       	sbiw	r30, 0x00	; 0
    4170:	39 f0       	breq	.+14     	; 0x4180 <_ZN6SdFile4openEPS_PKch+0x17c>
    4172:	b8 01       	movw	r22, r16
    4174:	62 5f       	subi	r22, 0xF2	; 242
    4176:	7f 4f       	sbci	r23, 0xFF	; 255
    4178:	c8 01       	movw	r24, r16
    417a:	40 96       	adiw	r24, 0x10	; 16
    417c:	09 95       	icall
    417e:	09 c0       	rjmp	.+18     	; 0x4192 <_ZN6SdFile4openEPS_PKch+0x18e>
    4180:	81 e2       	ldi	r24, 0x21	; 33
    4182:	98 e2       	ldi	r25, 0x28	; 40
    4184:	f8 01       	movw	r30, r16
    4186:	91 8b       	std	Z+17, r25	; 0x11
    4188:	80 8b       	std	Z+16, r24	; 0x10
    418a:	80 e0       	ldi	r24, 0x00	; 0
    418c:	98 e0       	ldi	r25, 0x08	; 8
    418e:	97 87       	std	Z+15, r25	; 0x0f
    4190:	86 87       	std	Z+14, r24	; 0x0e
    4192:	f8 01       	movw	r30, r16
    4194:	80 89       	ldd	r24, Z+16	; 0x10
    4196:	91 89       	ldd	r25, Z+17	; 0x11
    4198:	93 8b       	std	Z+19, r25	; 0x13
    419a:	82 8b       	std	Z+18, r24	; 0x12
    419c:	91 8f       	std	Z+25, r25	; 0x19
    419e:	80 8f       	std	Z+24, r24	; 0x18
    41a0:	86 85       	ldd	r24, Z+14	; 0x0e
    41a2:	97 85       	ldd	r25, Z+15	; 0x0f
    41a4:	97 8b       	std	Z+23, r25	; 0x17
    41a6:	86 8b       	std	Z+22, r24	; 0x16
    41a8:	81 e0       	ldi	r24, 0x01	; 1
    41aa:	0e 94 2f 23 	call	0x465e	; 0x465e <_ZN8SdVolume10cacheFlushEh>
    41ae:	c8 2e       	mov	r12, r24
    41b0:	88 23       	and	r24, r24
    41b2:	59 f0       	breq	.+22     	; 0x41ca <_ZN6SdFile4openEPS_PKch+0x1c6>
    41b4:	f7 01       	movw	r30, r14
    41b6:	62 89       	ldd	r22, Z+18	; 0x12
    41b8:	4a 2d       	mov	r20, r10
    41ba:	c7 01       	movw	r24, r14
    41bc:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <_ZN6SdFile15openCachedEntryEhh>
    41c0:	c8 2e       	mov	r12, r24
    41c2:	03 c0       	rjmp	.+6      	; 0x41ca <_ZN6SdFile4openEPS_PKch+0x1c6>
    41c4:	c1 2c       	mov	r12, r1
    41c6:	01 c0       	rjmp	.+2      	; 0x41ca <_ZN6SdFile4openEPS_PKch+0x1c6>
    41c8:	c8 2e       	mov	r12, r24
    41ca:	8c 2d       	mov	r24, r12
    41cc:	2b 96       	adiw	r28, 0x0b	; 11
    41ce:	0f b6       	in	r0, 0x3f	; 63
    41d0:	f8 94       	cli
    41d2:	de bf       	out	0x3e, r29	; 62
    41d4:	0f be       	out	0x3f, r0	; 63
    41d6:	cd bf       	out	0x3d, r28	; 61
    41d8:	df 91       	pop	r29
    41da:	cf 91       	pop	r28
    41dc:	1f 91       	pop	r17
    41de:	0f 91       	pop	r16
    41e0:	ff 90       	pop	r15
    41e2:	ef 90       	pop	r14
    41e4:	df 90       	pop	r13
    41e6:	cf 90       	pop	r12
    41e8:	bf 90       	pop	r11
    41ea:	af 90       	pop	r10
    41ec:	08 95       	ret

000041ee <_ZN6SdFile6removeEv>:
    41ee:	cf 93       	push	r28
    41f0:	df 93       	push	r29
    41f2:	ec 01       	movw	r28, r24
    41f4:	40 e0       	ldi	r20, 0x00	; 0
    41f6:	50 e0       	ldi	r21, 0x00	; 0
    41f8:	ba 01       	movw	r22, r20
    41fa:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <_ZN6SdFile8truncateEm>
    41fe:	88 23       	and	r24, r24
    4200:	79 f0       	breq	.+30     	; 0x4220 <_ZN6SdFile6removeEv+0x32>
    4202:	61 e0       	ldi	r22, 0x01	; 1
    4204:	ce 01       	movw	r24, r28
    4206:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <_ZN6SdFile13cacheDirEntryEh>
    420a:	00 97       	sbiw	r24, 0x00	; 0
    420c:	41 f0       	breq	.+16     	; 0x421e <_ZN6SdFile6removeEv+0x30>
    420e:	25 ee       	ldi	r18, 0xE5	; 229
    4210:	fc 01       	movw	r30, r24
    4212:	20 83       	st	Z, r18
    4214:	1d 82       	std	Y+5, r1	; 0x05
    4216:	81 e0       	ldi	r24, 0x01	; 1
    4218:	0e 94 2f 23 	call	0x465e	; 0x465e <_ZN8SdVolume10cacheFlushEh>
    421c:	01 c0       	rjmp	.+2      	; 0x4220 <_ZN6SdFile6removeEv+0x32>
    421e:	80 e0       	ldi	r24, 0x00	; 0
    4220:	df 91       	pop	r29
    4222:	cf 91       	pop	r28
    4224:	08 95       	ret

00004226 <_ZN6SdFile6removeEPS_PKc>:
    4226:	cf 93       	push	r28
    4228:	df 93       	push	r29
    422a:	cd b7       	in	r28, 0x3d	; 61
    422c:	de b7       	in	r29, 0x3e	; 62
    422e:	6d 97       	sbiw	r28, 0x1d	; 29
    4230:	0f b6       	in	r0, 0x3f	; 63
    4232:	f8 94       	cli
    4234:	de bf       	out	0x3e, r29	; 62
    4236:	0f be       	out	0x3f, r0	; 63
    4238:	cd bf       	out	0x3d, r28	; 61
    423a:	ab 01       	movw	r20, r22
    423c:	1c 82       	std	Y+4, r1	; 0x04
    423e:	1b 82       	std	Y+3, r1	; 0x03
    4240:	2f e5       	ldi	r18, 0x5F	; 95
    4242:	32 e0       	ldi	r19, 0x02	; 2
    4244:	3a 83       	std	Y+2, r19	; 0x02
    4246:	29 83       	std	Y+1, r18	; 0x01
    4248:	1e 82       	std	Y+6, r1	; 0x06
    424a:	22 e0       	ldi	r18, 0x02	; 2
    424c:	bc 01       	movw	r22, r24
    424e:	ce 01       	movw	r24, r28
    4250:	01 96       	adiw	r24, 0x01	; 1
    4252:	0e 94 02 20 	call	0x4004	; 0x4004 <_ZN6SdFile4openEPS_PKch>
    4256:	88 23       	and	r24, r24
    4258:	21 f0       	breq	.+8      	; 0x4262 <_ZN6SdFile6removeEPS_PKc+0x3c>
    425a:	ce 01       	movw	r24, r28
    425c:	01 96       	adiw	r24, 0x01	; 1
    425e:	0e 94 f7 20 	call	0x41ee	; 0x41ee <_ZN6SdFile6removeEv>
    4262:	6d 96       	adiw	r28, 0x1d	; 29
    4264:	0f b6       	in	r0, 0x3f	; 63
    4266:	f8 94       	cli
    4268:	de bf       	out	0x3e, r29	; 62
    426a:	0f be       	out	0x3f, r0	; 63
    426c:	cd bf       	out	0x3d, r28	; 61
    426e:	df 91       	pop	r29
    4270:	cf 91       	pop	r28
    4272:	08 95       	ret

00004274 <_ZN6SdFile5writeEPKvj>:
   \a nbyte.  If an error occurs, write() returns 0.  Possible errors
   include write() is called before a file has been opened, write is called
   for a read-only file, device is full, a corrupt file system or an I/O error.

*/
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    4274:	3f 92       	push	r3
    4276:	4f 92       	push	r4
    4278:	5f 92       	push	r5
    427a:	6f 92       	push	r6
    427c:	7f 92       	push	r7
    427e:	8f 92       	push	r8
    4280:	9f 92       	push	r9
    4282:	af 92       	push	r10
    4284:	bf 92       	push	r11
    4286:	cf 92       	push	r12
    4288:	df 92       	push	r13
    428a:	ef 92       	push	r14
    428c:	ff 92       	push	r15
    428e:	0f 93       	push	r16
    4290:	1f 93       	push	r17
    4292:	cf 93       	push	r28
    4294:	df 93       	push	r29
    4296:	00 d0       	rcall	.+0      	; 0x4298 <_ZN6SdFile5writeEPKvj+0x24>
    4298:	00 d0       	rcall	.+0      	; 0x429a <_ZN6SdFile5writeEPKvj+0x26>
    429a:	00 d0       	rcall	.+0      	; 0x429c <_ZN6SdFile5writeEPKvj+0x28>
    429c:	cd b7       	in	r28, 0x3d	; 61
    429e:	de b7       	in	r29, 0x3e	; 62
    42a0:	6c 01       	movw	r12, r24
    42a2:	7b 01       	movw	r14, r22
    42a4:	5e 83       	std	Y+6, r21	; 0x06
    42a6:	4d 83       	std	Y+5, r20	; 0x05
  const uint8_t* src = reinterpret_cast<const uint8_t*>(buf);

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;
  // if blocking writes should be used
  uint8_t blocking = (flags_ & F_FILE_NON_BLOCKING_WRITE) == 0x00;
    42a8:	dc 01       	movw	r26, r24
    42aa:	14 96       	adiw	r26, 0x04	; 4
    42ac:	9c 91       	ld	r25, X
    42ae:	14 97       	sbiw	r26, 0x04	; 4
    42b0:	29 2f       	mov	r18, r25
    42b2:	22 95       	swap	r18
    42b4:	2f 70       	andi	r18, 0x0F	; 15
    42b6:	81 e0       	ldi	r24, 0x01	; 1
    42b8:	82 27       	eor	r24, r18
    42ba:	81 70       	andi	r24, 0x01	; 1
    42bc:	38 2e       	mov	r3, r24
    uint8_t isDir(void) const {
      return type_ >= FAT_FILE_TYPE_MIN_DIR;
    }
    /** \return True if this is a SdFile for a file else false. */
    uint8_t isFile(void) const {
      return type_ == FAT_FILE_TYPE_NORMAL;
    42be:	15 96       	adiw	r26, 0x05	; 5
    42c0:	8c 91       	ld	r24, X

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) {
    42c2:	81 30       	cpi	r24, 0x01	; 1
    42c4:	19 f4       	brne	.+6      	; 0x42cc <_ZN6SdFile5writeEPKvj+0x58>
    42c6:	91 fd       	sbrc	r25, 1
    42c8:	03 c0       	rjmp	.+6      	; 0x42d0 <_ZN6SdFile5writeEPKvj+0x5c>
    42ca:	03 c0       	rjmp	.+6      	; 0x42d2 <_ZN6SdFile5writeEPKvj+0x5e>
    42cc:	81 e0       	ldi	r24, 0x01	; 1
    42ce:	01 c0       	rjmp	.+2      	; 0x42d2 <_ZN6SdFile5writeEPKvj+0x5e>
    42d0:	80 e0       	ldi	r24, 0x00	; 0
    42d2:	81 11       	cpse	r24, r1
    42d4:	66 c1       	rjmp	.+716    	; 0x45a2 <_ZN6SdFile5writeEPKvj+0x32e>
    goto writeErrorReturn;
  }

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    42d6:	92 fd       	sbrc	r25, 2
    42d8:	03 c0       	rjmp	.+6      	; 0x42e0 <_ZN6SdFile5writeEPKvj+0x6c>
  uint16_t nToWrite = nbyte;
  // if blocking writes should be used
  uint8_t blocking = (flags_ & F_FILE_NON_BLOCKING_WRITE) == 0x00;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) {
    42da:	8d 80       	ldd	r8, Y+5	; 0x05
    42dc:	9e 80       	ldd	r9, Y+6	; 0x06
    42de:	15 c0       	rjmp	.+42     	; 0x430a <_ZN6SdFile5writeEPKvj+0x96>
    goto writeErrorReturn;
  }

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    42e0:	f6 01       	movw	r30, r12
    42e2:	82 85       	ldd	r24, Z+10	; 0x0a
    42e4:	93 85       	ldd	r25, Z+11	; 0x0b
    42e6:	a4 85       	ldd	r26, Z+12	; 0x0c
    42e8:	b5 85       	ldd	r27, Z+13	; 0x0d
    42ea:	43 89       	ldd	r20, Z+19	; 0x13
    42ec:	54 89       	ldd	r21, Z+20	; 0x14
    42ee:	65 89       	ldd	r22, Z+21	; 0x15
    42f0:	76 89       	ldd	r23, Z+22	; 0x16
    42f2:	84 17       	cp	r24, r20
    42f4:	95 07       	cpc	r25, r21
    42f6:	a6 07       	cpc	r26, r22
    42f8:	b7 07       	cpc	r27, r23
    42fa:	79 f3       	breq	.-34     	; 0x42da <_ZN6SdFile5writeEPKvj+0x66>
    /**
        Set the files current position to end of file.  Useful to position
        a file for append. See seekSet().
    */
    uint8_t seekEnd(void) {
      return seekSet(fileSize_);
    42fc:	c6 01       	movw	r24, r12
    42fe:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) {
    4302:	88 23       	and	r24, r24
    4304:	09 f4       	brne	.+2      	; 0x4308 <_ZN6SdFile5writeEPKvj+0x94>
    4306:	4d c1       	rjmp	.+666    	; 0x45a2 <_ZN6SdFile5writeEPKvj+0x32e>
    4308:	e8 cf       	rjmp	.-48     	; 0x42da <_ZN6SdFile5writeEPKvj+0x66>
      goto writeErrorReturn;
    }
  }

  while (nToWrite > 0) {
    430a:	81 14       	cp	r8, r1
    430c:	91 04       	cpc	r9, r1
    430e:	09 f4       	brne	.+2      	; 0x4312 <_ZN6SdFile5writeEPKvj+0x9e>
    4310:	1b c1       	rjmp	.+566    	; 0x4548 <_ZN6SdFile5writeEPKvj+0x2d4>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    4312:	d6 01       	movw	r26, r12
    4314:	1a 96       	adiw	r26, 0x0a	; 10
    4316:	0d 91       	ld	r16, X+
    4318:	1d 91       	ld	r17, X+
    431a:	2d 91       	ld	r18, X+
    431c:	3c 91       	ld	r19, X
    431e:	1d 97       	sbiw	r26, 0x0d	; 13
    4320:	5b 96       	adiw	r26, 0x1b	; 27
    4322:	ed 91       	ld	r30, X+
    4324:	fc 91       	ld	r31, X
    4326:	5c 97       	sbiw	r26, 0x1c	; 28
    uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
    uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
    //----------------------------------------------------------------------------
    uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
    uint8_t blockOfCluster(uint32_t position) const {
      return (position >> 9) & (blocksPerCluster_ - 1);
    4328:	d9 01       	movw	r26, r18
    432a:	c8 01       	movw	r24, r16
    432c:	07 2e       	mov	r0, r23
    432e:	79 e0       	ldi	r23, 0x09	; 9
    4330:	b6 95       	lsr	r27
    4332:	a7 95       	ror	r26
    4334:	97 95       	ror	r25
    4336:	87 95       	ror	r24
    4338:	7a 95       	dec	r23
    433a:	d1 f7       	brne	.-12     	; 0x4330 <_ZN6SdFile5writeEPKvj+0xbc>
    433c:	70 2d       	mov	r23, r0
    433e:	74 80       	ldd	r7, Z+4	; 0x04
    4340:	7a 94       	dec	r7
    4342:	78 22       	and	r7, r24
    uint16_t blockOffset = curPosition_ & 0X1FF;
    4344:	11 70       	andi	r17, 0x01	; 1
    if (blockOfCluster == 0 && blockOffset == 0) {
    4346:	71 10       	cpse	r7, r1
    4348:	54 c0       	rjmp	.+168    	; 0x43f2 <_ZN6SdFile5writeEPKvj+0x17e>
    434a:	01 15       	cp	r16, r1
    434c:	11 05       	cpc	r17, r1
    434e:	09 f0       	breq	.+2      	; 0x4352 <_ZN6SdFile5writeEPKvj+0xde>
    4350:	50 c0       	rjmp	.+160    	; 0x43f2 <_ZN6SdFile5writeEPKvj+0x17e>
      // start of new cluster
      if (curCluster_ == 0) {
    4352:	d6 01       	movw	r26, r12
    4354:	16 96       	adiw	r26, 0x06	; 6
    4356:	4d 91       	ld	r20, X+
    4358:	5d 91       	ld	r21, X+
    435a:	6d 91       	ld	r22, X+
    435c:	7c 91       	ld	r23, X
    435e:	19 97       	sbiw	r26, 0x09	; 9
    4360:	41 15       	cp	r20, r1
    4362:	51 05       	cpc	r21, r1
    4364:	61 05       	cpc	r22, r1
    4366:	71 05       	cpc	r23, r1
    4368:	b1 f4       	brne	.+44     	; 0x4396 <_ZN6SdFile5writeEPKvj+0x122>
        if (firstCluster_ == 0) {
    436a:	57 96       	adiw	r26, 0x17	; 23
    436c:	8d 91       	ld	r24, X+
    436e:	9d 91       	ld	r25, X+
    4370:	0d 90       	ld	r0, X+
    4372:	bc 91       	ld	r27, X
    4374:	a0 2d       	mov	r26, r0
    4376:	00 97       	sbiw	r24, 0x00	; 0
    4378:	a1 05       	cpc	r26, r1
    437a:	b1 05       	cpc	r27, r1
    437c:	31 f4       	brne	.+12     	; 0x438a <_ZN6SdFile5writeEPKvj+0x116>
          // allocate first cluster of file
          if (!addCluster()) {
    437e:	c6 01       	movw	r24, r12
    4380:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <_ZN6SdFile10addClusterEv>
    4384:	81 11       	cpse	r24, r1
    4386:	35 c0       	rjmp	.+106    	; 0x43f2 <_ZN6SdFile5writeEPKvj+0x17e>
    4388:	0c c1       	rjmp	.+536    	; 0x45a2 <_ZN6SdFile5writeEPKvj+0x32e>
            goto writeErrorReturn;
          }
        } else {
          curCluster_ = firstCluster_;
    438a:	f6 01       	movw	r30, r12
    438c:	86 83       	std	Z+6, r24	; 0x06
    438e:	97 83       	std	Z+7, r25	; 0x07
    4390:	a0 87       	std	Z+8, r26	; 0x08
    4392:	b1 87       	std	Z+9, r27	; 0x09
    4394:	2e c0       	rjmp	.+92     	; 0x43f2 <_ZN6SdFile5writeEPKvj+0x17e>
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) {
    4396:	9e 01       	movw	r18, r28
    4398:	2f 5f       	subi	r18, 0xFF	; 255
    439a:	3f 4f       	sbci	r19, 0xFF	; 255
    439c:	cf 01       	movw	r24, r30
    439e:	0e 94 be 23 	call	0x477c	; 0x477c <_ZNK8SdVolume6fatGetEmPm>
    43a2:	81 11       	cpse	r24, r1
    43a4:	02 c0       	rjmp	.+4      	; 0x43aa <_ZN6SdFile5writeEPKvj+0x136>
          return false;
    43a6:	90 e0       	ldi	r25, 0x00	; 0
    43a8:	0b c1       	rjmp	.+534    	; 0x45c0 <_ZN6SdFile5writeEPKvj+0x34c>
        }
        if (vol_->isEOC(next)) {
    43aa:	89 81       	ldd	r24, Y+1	; 0x01
    43ac:	9a 81       	ldd	r25, Y+2	; 0x02
    43ae:	ab 81       	ldd	r26, Y+3	; 0x03
    43b0:	bc 81       	ldd	r27, Y+4	; 0x04
    43b2:	f6 01       	movw	r30, r12
    43b4:	23 8d       	ldd	r18, Z+27	; 0x1b
    43b6:	34 8d       	ldd	r19, Z+28	; 0x1c
    uint8_t fatPutEOC(uint32_t cluster) {
      return fatPut(cluster, 0x0FFFFFFF);
    }
    uint8_t freeChain(uint32_t cluster);
    uint8_t isEOC(uint32_t cluster) const {
      return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    43b8:	f9 01       	movw	r30, r18
    43ba:	27 89       	ldd	r18, Z+23	; 0x17
    43bc:	20 31       	cpi	r18, 0x10	; 16
    43be:	29 f4       	brne	.+10     	; 0x43ca <_ZN6SdFile5writeEPKvj+0x156>
    43c0:	48 ef       	ldi	r20, 0xF8	; 248
    43c2:	5f ef       	ldi	r21, 0xFF	; 255
    43c4:	60 e0       	ldi	r22, 0x00	; 0
    43c6:	70 e0       	ldi	r23, 0x00	; 0
    43c8:	04 c0       	rjmp	.+8      	; 0x43d2 <_ZN6SdFile5writeEPKvj+0x15e>
    43ca:	48 ef       	ldi	r20, 0xF8	; 248
    43cc:	5f ef       	ldi	r21, 0xFF	; 255
    43ce:	6f ef       	ldi	r22, 0xFF	; 255
    43d0:	7f e0       	ldi	r23, 0x0F	; 15
    43d2:	84 17       	cp	r24, r20
    43d4:	95 07       	cpc	r25, r21
    43d6:	a6 07       	cpc	r26, r22
    43d8:	b7 07       	cpc	r27, r23
    43da:	30 f0       	brcs	.+12     	; 0x43e8 <_ZN6SdFile5writeEPKvj+0x174>
          // add cluster if at end of chain
          if (!addCluster()) {
    43dc:	c6 01       	movw	r24, r12
    43de:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <_ZN6SdFile10addClusterEv>
    43e2:	81 11       	cpse	r24, r1
    43e4:	06 c0       	rjmp	.+12     	; 0x43f2 <_ZN6SdFile5writeEPKvj+0x17e>
    43e6:	dd c0       	rjmp	.+442    	; 0x45a2 <_ZN6SdFile5writeEPKvj+0x32e>
            goto writeErrorReturn;
          }
        } else {
          curCluster_ = next;
    43e8:	f6 01       	movw	r30, r12
    43ea:	86 83       	std	Z+6, r24	; 0x06
    43ec:	97 83       	std	Z+7, r25	; 0x07
    43ee:	a0 87       	std	Z+8, r26	; 0x08
    43f0:	b1 87       	std	Z+9, r27	; 0x09
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    43f2:	80 e0       	ldi	r24, 0x00	; 0
    43f4:	92 e0       	ldi	r25, 0x02	; 2
    43f6:	5c 01       	movw	r10, r24
    43f8:	a0 1a       	sub	r10, r16
    43fa:	b1 0a       	sbc	r11, r17

    // lesser of space and amount to write
    if (n > nToWrite) {
    43fc:	8a 14       	cp	r8, r10
    43fe:	9b 04       	cpc	r9, r11
    4400:	08 f4       	brcc	.+2      	; 0x4404 <_ZN6SdFile5writeEPKvj+0x190>
      n = nToWrite;
    4402:	54 01       	movw	r10, r8
    }

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    4404:	f6 01       	movw	r30, r12
    4406:	86 81       	ldd	r24, Z+6	; 0x06
    4408:	97 81       	ldd	r25, Z+7	; 0x07
    440a:	a0 85       	ldd	r26, Z+8	; 0x08
    440c:	b1 85       	ldd	r27, Z+9	; 0x09
    440e:	23 8d       	ldd	r18, Z+27	; 0x1b
    4410:	34 8d       	ldd	r19, Z+28	; 0x1c
    uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
    uint8_t blockOfCluster(uint32_t position) const {
      return (position >> 9) & (blocksPerCluster_ - 1);
    }
    uint32_t clusterStartBlock(uint32_t cluster) const {
      return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);
    4412:	f9 01       	movw	r30, r18
    4414:	46 85       	ldd	r20, Z+14	; 0x0e
    4416:	57 85       	ldd	r21, Z+15	; 0x0f
    4418:	60 89       	ldd	r22, Z+16	; 0x10
    441a:	71 89       	ldd	r23, Z+17	; 0x11
    441c:	02 97       	sbiw	r24, 0x02	; 2
    441e:	a1 09       	sbc	r26, r1
    4420:	b1 09       	sbc	r27, r1
    4422:	05 84       	ldd	r0, Z+13	; 0x0d
    4424:	04 c0       	rjmp	.+8      	; 0x442e <_ZN6SdFile5writeEPKvj+0x1ba>
    4426:	88 0f       	add	r24, r24
    4428:	99 1f       	adc	r25, r25
    442a:	aa 1f       	adc	r26, r26
    442c:	bb 1f       	adc	r27, r27
    442e:	0a 94       	dec	r0
    4430:	d2 f7       	brpl	.-12     	; 0x4426 <_ZN6SdFile5writeEPKvj+0x1b2>
    4432:	84 0f       	add	r24, r20
    4434:	95 1f       	adc	r25, r21
    4436:	a6 1f       	adc	r26, r22
    4438:	b7 1f       	adc	r27, r23
    443a:	9c 01       	movw	r18, r24
    443c:	ad 01       	movw	r20, r26
    443e:	27 0d       	add	r18, r7
    4440:	31 1d       	adc	r19, r1
    4442:	41 1d       	adc	r20, r1
    4444:	51 1d       	adc	r21, r1
    4446:	29 01       	movw	r4, r18
    4448:	3a 01       	movw	r6, r20
    if (n == 512) {
    444a:	a1 14       	cp	r10, r1
    444c:	32 e0       	ldi	r19, 0x02	; 2
    444e:	b3 06       	cpc	r11, r19
    4450:	41 f5       	brne	.+80     	; 0x44a2 <_ZN6SdFile5writeEPKvj+0x22e>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    4452:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    4456:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    445a:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    445e:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    4462:	48 16       	cp	r4, r24
    4464:	59 06       	cpc	r5, r25
    4466:	6a 06       	cpc	r6, r26
    4468:	7b 06       	cpc	r7, r27
    446a:	59 f4       	brne	.+22     	; 0x4482 <_ZN6SdFile5writeEPKvj+0x20e>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    446c:	8f ef       	ldi	r24, 0xFF	; 255
    446e:	9f ef       	ldi	r25, 0xFF	; 255
    4470:	dc 01       	movw	r26, r24
    4472:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    4476:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    447a:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    447e:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    uint8_t readData(uint32_t block, uint16_t offset,
                     uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
    }
    uint8_t writeBlock(uint32_t block, const uint8_t* dst, uint8_t blocking = 1) {
      return sdCard_->writeBlock(block, dst, blocking);
    4482:	03 2d       	mov	r16, r3
    4484:	97 01       	movw	r18, r14
    4486:	b3 01       	movw	r22, r6
    4488:	a2 01       	movw	r20, r4
    448a:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <_ZN8SdVolume7sdCard_E>
    448e:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <_ZN8SdVolume7sdCard_E+0x1>
    4492:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <_ZN7Sd2Card10writeBlockEmPKhh>
      }
      if (!vol_->writeBlock(block, src, blocking)) {
    4496:	88 23       	and	r24, r24
    4498:	09 f4       	brne	.+2      	; 0x449c <_ZN6SdFile5writeEPKvj+0x228>
    449a:	83 c0       	rjmp	.+262    	; 0x45a2 <_ZN6SdFile5writeEPKvj+0x32e>
        goto writeErrorReturn;
      }
      src += 512;
    449c:	4e ef       	ldi	r20, 0xFE	; 254
    449e:	f4 1a       	sub	r15, r20
    44a0:	43 c0       	rjmp	.+134    	; 0x4528 <_ZN6SdFile5writeEPKvj+0x2b4>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    44a2:	01 15       	cp	r16, r1
    44a4:	11 05       	cpc	r17, r1
    44a6:	31 f5       	brne	.+76     	; 0x44f4 <_ZN6SdFile5writeEPKvj+0x280>
    44a8:	d6 01       	movw	r26, r12
    44aa:	1a 96       	adiw	r26, 0x0a	; 10
    44ac:	4d 91       	ld	r20, X+
    44ae:	5d 91       	ld	r21, X+
    44b0:	6d 91       	ld	r22, X+
    44b2:	7c 91       	ld	r23, X
    44b4:	1d 97       	sbiw	r26, 0x0d	; 13
    44b6:	53 96       	adiw	r26, 0x13	; 19
    44b8:	8d 91       	ld	r24, X+
    44ba:	9d 91       	ld	r25, X+
    44bc:	0d 90       	ld	r0, X+
    44be:	bc 91       	ld	r27, X
    44c0:	a0 2d       	mov	r26, r0
    44c2:	48 17       	cp	r20, r24
    44c4:	59 07       	cpc	r21, r25
    44c6:	6a 07       	cpc	r22, r26
    44c8:	7b 07       	cpc	r23, r27
    44ca:	a0 f0       	brcs	.+40     	; 0x44f4 <_ZN6SdFile5writeEPKvj+0x280>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) {
    44cc:	81 e0       	ldi	r24, 0x01	; 1
    44ce:	0e 94 2f 23 	call	0x465e	; 0x465e <_ZN8SdVolume10cacheFlushEh>
    44d2:	88 23       	and	r24, r24
    44d4:	09 f4       	brne	.+2      	; 0x44d8 <_ZN6SdFile5writeEPKvj+0x264>
    44d6:	65 c0       	rjmp	.+202    	; 0x45a2 <_ZN6SdFile5writeEPKvj+0x32e>
          goto writeErrorReturn;
        }
        SdVolume::cacheBlockNumber_ = block;
    44d8:	40 92 09 01 	sts	0x0109, r4	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    44dc:	50 92 0a 01 	sts	0x010A, r5	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    44e0:	60 92 0b 01 	sts	0x010B, r6	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    44e4:	70 92 0c 01 	sts	0x010C, r7	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    }
    static uint8_t cacheFlush(uint8_t blocking = 1);
    static uint8_t cacheMirrorBlockFlush(uint8_t blocking);
    static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
    static void cacheSetDirty(void) {
      cacheDirty_ |= CACHE_FOR_WRITE;
    44e8:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <_ZN8SdVolume11cacheDirty_E>
    44ec:	81 60       	ori	r24, 0x01	; 1
    44ee:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <_ZN8SdVolume11cacheDirty_E>
    44f2:	08 c0       	rjmp	.+16     	; 0x4504 <_ZN6SdFile5writeEPKvj+0x290>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    44f4:	41 e0       	ldi	r20, 0x01	; 1
    44f6:	c3 01       	movw	r24, r6
    44f8:	b2 01       	movw	r22, r4
    44fa:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN8SdVolume13cacheRawBlockEmh>
    44fe:	88 23       	and	r24, r24
    4500:	09 f4       	brne	.+2      	; 0x4504 <_ZN6SdFile5writeEPKvj+0x290>
    4502:	4f c0       	rjmp	.+158    	; 0x45a2 <_ZN6SdFile5writeEPKvj+0x32e>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    4504:	f8 01       	movw	r30, r16
    4506:	eb 5f       	subi	r30, 0xFB	; 251
    4508:	fc 4f       	sbci	r31, 0xFC	; 252
      uint8_t* end = dst + n;
    450a:	9f 01       	movw	r18, r30
    450c:	2a 0d       	add	r18, r10
    450e:	3b 1d       	adc	r19, r11
      while (dst != end) {
    4510:	e2 17       	cp	r30, r18
    4512:	f3 07       	cpc	r31, r19
    4514:	49 f0       	breq	.+18     	; 0x4528 <_ZN6SdFile5writeEPKvj+0x2b4>
        *dst++ = *src++;
    4516:	d7 01       	movw	r26, r14
    4518:	8c 91       	ld	r24, X
    451a:	80 83       	st	Z, r24
    451c:	31 96       	adiw	r30, 0x01	; 1
    451e:	a7 01       	movw	r20, r14
    4520:	4f 5f       	subi	r20, 0xFF	; 255
    4522:	5f 4f       	sbci	r21, 0xFF	; 255
    4524:	7a 01       	movw	r14, r20
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) {
    4526:	f4 cf       	rjmp	.-24     	; 0x4510 <_ZN6SdFile5writeEPKvj+0x29c>
        *dst++ = *src++;
      }
    }
    nToWrite -= n;
    4528:	8a 18       	sub	r8, r10
    452a:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    452c:	f6 01       	movw	r30, r12
    452e:	82 85       	ldd	r24, Z+10	; 0x0a
    4530:	93 85       	ldd	r25, Z+11	; 0x0b
    4532:	a4 85       	ldd	r26, Z+12	; 0x0c
    4534:	b5 85       	ldd	r27, Z+13	; 0x0d
    4536:	8a 0d       	add	r24, r10
    4538:	9b 1d       	adc	r25, r11
    453a:	a1 1d       	adc	r26, r1
    453c:	b1 1d       	adc	r27, r1
    453e:	82 87       	std	Z+10, r24	; 0x0a
    4540:	93 87       	std	Z+11, r25	; 0x0b
    4542:	a4 87       	std	Z+12, r26	; 0x0c
    4544:	b5 87       	std	Z+13, r27	; 0x0d
    if (!seekEnd()) {
      goto writeErrorReturn;
    }
  }

  while (nToWrite > 0) {
    4546:	e1 ce       	rjmp	.-574    	; 0x430a <_ZN6SdFile5writeEPKvj+0x96>
      }
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    4548:	f6 01       	movw	r30, r12
    454a:	82 85       	ldd	r24, Z+10	; 0x0a
    454c:	93 85       	ldd	r25, Z+11	; 0x0b
    454e:	a4 85       	ldd	r26, Z+12	; 0x0c
    4550:	b5 85       	ldd	r27, Z+13	; 0x0d
    4552:	43 89       	ldd	r20, Z+19	; 0x13
    4554:	54 89       	ldd	r21, Z+20	; 0x14
    4556:	65 89       	ldd	r22, Z+21	; 0x15
    4558:	76 89       	ldd	r23, Z+22	; 0x16
    455a:	48 17       	cp	r20, r24
    455c:	59 07       	cpc	r21, r25
    455e:	6a 07       	cpc	r22, r26
    4560:	7b 07       	cpc	r23, r27
    4562:	40 f4       	brcc	.+16     	; 0x4574 <_ZN6SdFile5writeEPKvj+0x300>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    4564:	83 8b       	std	Z+19, r24	; 0x13
    4566:	94 8b       	std	Z+20, r25	; 0x14
    4568:	a5 8b       	std	Z+21, r26	; 0x15
    456a:	b6 8b       	std	Z+22, r27	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    456c:	84 81       	ldd	r24, Z+4	; 0x04
    456e:	80 68       	ori	r24, 0x80	; 128
    4570:	84 83       	std	Z+4, r24	; 0x04
    4572:	0d c0       	rjmp	.+26     	; 0x458e <_ZN6SdFile5writeEPKvj+0x31a>
  } else if (dateTime_ && nbyte) {
    4574:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <_ZN6SdFile9dateTime_E>
    4578:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <_ZN6SdFile9dateTime_E+0x1>
    457c:	89 2b       	or	r24, r25
    457e:	39 f0       	breq	.+14     	; 0x458e <_ZN6SdFile5writeEPKvj+0x31a>
    4580:	2d 81       	ldd	r18, Y+5	; 0x05
    4582:	3e 81       	ldd	r19, Y+6	; 0x06
    4584:	23 2b       	or	r18, r19
    4586:	19 f0       	breq	.+6      	; 0x458e <_ZN6SdFile5writeEPKvj+0x31a>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    4588:	84 81       	ldd	r24, Z+4	; 0x04
    458a:	80 68       	ori	r24, 0x80	; 128
    458c:	84 83       	std	Z+4, r24	; 0x04
  }

  if (flags_ & O_SYNC) {
    458e:	f6 01       	movw	r30, r12
    4590:	84 81       	ldd	r24, Z+4	; 0x04
    4592:	83 ff       	sbrs	r24, 3
    4594:	10 c0       	rjmp	.+32     	; 0x45b6 <_ZN6SdFile5writeEPKvj+0x342>
    if (!sync()) {
    4596:	61 e0       	ldi	r22, 0x01	; 1
    4598:	c6 01       	movw	r24, r12
    459a:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <_ZN6SdFile4syncEh>
    459e:	81 11       	cpse	r24, r1
    45a0:	0d c0       	rjmp	.+26     	; 0x45bc <_ZN6SdFile5writeEPKvj+0x348>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    45a2:	81 e0       	ldi	r24, 0x01	; 1
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	d6 01       	movw	r26, r12
    45a8:	13 96       	adiw	r26, 0x03	; 3
    45aa:	9c 93       	st	X, r25
    45ac:	8e 93       	st	-X, r24
    45ae:	12 97       	sbiw	r26, 0x02	; 2

writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    45b0:	80 e0       	ldi	r24, 0x00	; 0
    45b2:	90 e0       	ldi	r25, 0x00	; 0
    45b4:	05 c0       	rjmp	.+10     	; 0x45c0 <_ZN6SdFile5writeEPKvj+0x34c>
  if (flags_ & O_SYNC) {
    if (!sync()) {
      goto writeErrorReturn;
    }
  }
  return nbyte;
    45b6:	8d 81       	ldd	r24, Y+5	; 0x05
    45b8:	9e 81       	ldd	r25, Y+6	; 0x06
    45ba:	02 c0       	rjmp	.+4      	; 0x45c0 <_ZN6SdFile5writeEPKvj+0x34c>
    45bc:	8d 81       	ldd	r24, Y+5	; 0x05
    45be:	9e 81       	ldd	r25, Y+6	; 0x06
writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    45c0:	26 96       	adiw	r28, 0x06	; 6
    45c2:	0f b6       	in	r0, 0x3f	; 63
    45c4:	f8 94       	cli
    45c6:	de bf       	out	0x3e, r29	; 62
    45c8:	0f be       	out	0x3f, r0	; 63
    45ca:	cd bf       	out	0x3d, r28	; 61
    45cc:	df 91       	pop	r29
    45ce:	cf 91       	pop	r28
    45d0:	1f 91       	pop	r17
    45d2:	0f 91       	pop	r16
    45d4:	ff 90       	pop	r15
    45d6:	ef 90       	pop	r14
    45d8:	df 90       	pop	r13
    45da:	cf 90       	pop	r12
    45dc:	bf 90       	pop	r11
    45de:	af 90       	pop	r10
    45e0:	9f 90       	pop	r9
    45e2:	8f 90       	pop	r8
    45e4:	7f 90       	pop	r7
    45e6:	6f 90       	pop	r6
    45e8:	5f 90       	pop	r5
    45ea:	4f 90       	pop	r4
    45ec:	3f 90       	pop	r3
    45ee:	08 95       	ret

000045f0 <_ZN6SdFile5writeEh>:
/**
   Write a byte to a file. Required by the Arduino Print class.

   Use SdFile::writeError to check for errors.
*/
size_t SdFile::write(uint8_t b) {
    45f0:	cf 93       	push	r28
    45f2:	df 93       	push	r29
    45f4:	1f 92       	push	r1
    45f6:	cd b7       	in	r28, 0x3d	; 61
    45f8:	de b7       	in	r29, 0x3e	; 62
    45fa:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    45fc:	41 e0       	ldi	r20, 0x01	; 1
    45fe:	50 e0       	ldi	r21, 0x00	; 0
    4600:	be 01       	movw	r22, r28
    4602:	6f 5f       	subi	r22, 0xFF	; 255
    4604:	7f 4f       	sbci	r23, 0xFF	; 255
    4606:	0e 94 3a 21 	call	0x4274	; 0x4274 <_ZN6SdFile5writeEPKvj>
}
    460a:	0f 90       	pop	r0
    460c:	df 91       	pop	r29
    460e:	cf 91       	pop	r28
    4610:	08 95       	ret

00004612 <_ZN8SdVolume21cacheMirrorBlockFlushEh>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheMirrorBlockFlush(uint8_t blocking) {
    4612:	0f 93       	push	r16
  if (cacheMirrorBlock_) {
    4614:	40 91 fe 02 	lds	r20, 0x02FE	; 0x8002fe <_ZN8SdVolume17cacheMirrorBlock_E>
    4618:	50 91 ff 02 	lds	r21, 0x02FF	; 0x8002ff <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    461c:	60 91 00 03 	lds	r22, 0x0300	; 0x800300 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    4620:	70 91 01 03 	lds	r23, 0x0301	; 0x800301 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    4624:	41 15       	cp	r20, r1
    4626:	51 05       	cpc	r21, r1
    4628:	61 05       	cpc	r22, r1
    462a:	71 05       	cpc	r23, r1
    462c:	a9 f0       	breq	.+42     	; 0x4658 <_ZN8SdVolume21cacheMirrorBlockFlushEh+0x46>
    462e:	08 2f       	mov	r16, r24
    if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data, blocking)) {
    4630:	25 e0       	ldi	r18, 0x05	; 5
    4632:	33 e0       	ldi	r19, 0x03	; 3
    4634:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <_ZN8SdVolume7sdCard_E>
    4638:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <_ZN8SdVolume7sdCard_E+0x1>
    463c:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <_ZN7Sd2Card10writeBlockEmPKhh>
    4640:	88 23       	and	r24, r24
    4642:	59 f0       	breq	.+22     	; 0x465a <_ZN8SdVolume21cacheMirrorBlockFlushEh+0x48>
      return false;
    }
    cacheMirrorBlock_ = 0;
    4644:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <_ZN8SdVolume17cacheMirrorBlock_E>
    4648:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    464c:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    4650:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  }
  return true;
    4654:	81 e0       	ldi	r24, 0x01	; 1
    4656:	01 c0       	rjmp	.+2      	; 0x465a <_ZN8SdVolume21cacheMirrorBlockFlushEh+0x48>
    4658:	81 e0       	ldi	r24, 0x01	; 1
}
    465a:	0f 91       	pop	r16
    465c:	08 95       	ret

0000465e <_ZN8SdVolume10cacheFlushEh>:
  }

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(uint8_t blocking) {
    465e:	0f 93       	push	r16
    4660:	cf 93       	push	r28
  if (cacheDirty_) {
    4662:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <_ZN8SdVolume11cacheDirty_E>
    4666:	99 23       	and	r25, r25
    4668:	f9 f0       	breq	.+62     	; 0x46a8 <_ZN8SdVolume10cacheFlushEh+0x4a>
    466a:	c8 2f       	mov	r28, r24
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data, blocking)) {
    466c:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    4670:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    4674:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    4678:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    467c:	08 2f       	mov	r16, r24
    467e:	25 e0       	ldi	r18, 0x05	; 5
    4680:	33 e0       	ldi	r19, 0x03	; 3
    4682:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <_ZN8SdVolume7sdCard_E>
    4686:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <_ZN8SdVolume7sdCard_E+0x1>
    468a:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <_ZN7Sd2Card10writeBlockEmPKhh>
    468e:	88 23       	and	r24, r24
    4690:	71 f0       	breq	.+28     	; 0x46ae <_ZN8SdVolume10cacheFlushEh+0x50>
      return false;
    }

    if (!blocking) {
    4692:	cc 23       	and	r28, r28
    4694:	59 f0       	breq	.+22     	; 0x46ac <_ZN8SdVolume10cacheFlushEh+0x4e>
      return true;
    }

    // mirror FAT tables
    if (!cacheMirrorBlockFlush(blocking)) {
    4696:	8c 2f       	mov	r24, r28
    4698:	0e 94 09 23 	call	0x4612	; 0x4612 <_ZN8SdVolume21cacheMirrorBlockFlushEh>
    469c:	88 23       	and	r24, r24
    469e:	39 f0       	breq	.+14     	; 0x46ae <_ZN8SdVolume10cacheFlushEh+0x50>
      return false;
    }
    cacheDirty_ = 0;
    46a0:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <_ZN8SdVolume11cacheDirty_E>
  }
  return true;
    46a4:	81 e0       	ldi	r24, 0x01	; 1
    46a6:	03 c0       	rjmp	.+6      	; 0x46ae <_ZN8SdVolume10cacheFlushEh+0x50>
    46a8:	81 e0       	ldi	r24, 0x01	; 1
    46aa:	01 c0       	rjmp	.+2      	; 0x46ae <_ZN8SdVolume10cacheFlushEh+0x50>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data, blocking)) {
      return false;
    }

    if (!blocking) {
      return true;
    46ac:	81 e0       	ldi	r24, 0x01	; 1
      return false;
    }
    cacheDirty_ = 0;
  }
  return true;
}
    46ae:	cf 91       	pop	r28
    46b0:	0f 91       	pop	r16
    46b2:	08 95       	ret

000046b4 <_ZN8SdVolume13cacheRawBlockEmh>:
    cacheMirrorBlock_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    46b4:	cf 92       	push	r12
    46b6:	df 92       	push	r13
    46b8:	ef 92       	push	r14
    46ba:	ff 92       	push	r15
    46bc:	cf 93       	push	r28
    46be:	6b 01       	movw	r12, r22
    46c0:	7c 01       	movw	r14, r24
    46c2:	c4 2f       	mov	r28, r20
  if (cacheBlockNumber_ != blockNumber) {
    46c4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    46c8:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    46cc:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    46d0:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    46d4:	8c 15       	cp	r24, r12
    46d6:	9d 05       	cpc	r25, r13
    46d8:	ae 05       	cpc	r26, r14
    46da:	bf 05       	cpc	r27, r15
    46dc:	c9 f0       	breq	.+50     	; 0x4710 <_ZN8SdVolume13cacheRawBlockEmh+0x5c>
    if (!cacheFlush()) {
    46de:	81 e0       	ldi	r24, 0x01	; 1
    46e0:	0e 94 2f 23 	call	0x465e	; 0x465e <_ZN8SdVolume10cacheFlushEh>
    46e4:	88 23       	and	r24, r24
    46e6:	d1 f0       	breq	.+52     	; 0x471c <_ZN8SdVolume13cacheRawBlockEmh+0x68>
      return false;
    }
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) {
    46e8:	25 e0       	ldi	r18, 0x05	; 5
    46ea:	33 e0       	ldi	r19, 0x03	; 3
    46ec:	b7 01       	movw	r22, r14
    46ee:	a6 01       	movw	r20, r12
    46f0:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <_ZN8SdVolume7sdCard_E>
    46f4:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <_ZN8SdVolume7sdCard_E+0x1>
    46f8:	0e 94 ad 19 	call	0x335a	; 0x335a <_ZN7Sd2Card9readBlockEmPh>
    46fc:	88 23       	and	r24, r24
    46fe:	71 f0       	breq	.+28     	; 0x471c <_ZN8SdVolume13cacheRawBlockEmh+0x68>
      return false;
    }
    cacheBlockNumber_ = blockNumber;
    4700:	c0 92 09 01 	sts	0x0109, r12	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    4704:	d0 92 0a 01 	sts	0x010A, r13	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    4708:	e0 92 0b 01 	sts	0x010B, r14	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    470c:	f0 92 0c 01 	sts	0x010C, r15	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  }
  cacheDirty_ |= action;
    4710:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <_ZN8SdVolume11cacheDirty_E>
    4714:	c8 2b       	or	r28, r24
    4716:	c0 93 02 03 	sts	0x0302, r28	; 0x800302 <_ZN8SdVolume11cacheDirty_E>
  return true;
    471a:	81 e0       	ldi	r24, 0x01	; 1
}
    471c:	cf 91       	pop	r28
    471e:	ff 90       	pop	r15
    4720:	ef 90       	pop	r14
    4722:	df 90       	pop	r13
    4724:	cf 90       	pop	r12
    4726:	08 95       	ret

00004728 <_ZN8SdVolume14cacheZeroBlockEm>:
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    4728:	cf 92       	push	r12
    472a:	df 92       	push	r13
    472c:	ef 92       	push	r14
    472e:	ff 92       	push	r15
    4730:	6b 01       	movw	r12, r22
    4732:	7c 01       	movw	r14, r24
  if (!cacheFlush()) {
    4734:	81 e0       	ldi	r24, 0x01	; 1
    4736:	0e 94 2f 23 	call	0x465e	; 0x465e <_ZN8SdVolume10cacheFlushEh>
    473a:	88 23       	and	r24, r24
    473c:	d1 f0       	breq	.+52     	; 0x4772 <_ZN8SdVolume14cacheZeroBlockEm+0x4a>
    473e:	80 e0       	ldi	r24, 0x00	; 0
    4740:	90 e0       	ldi	r25, 0x00	; 0
    return false;
  }

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    4742:	81 15       	cp	r24, r1
    4744:	22 e0       	ldi	r18, 0x02	; 2
    4746:	92 07       	cpc	r25, r18
    4748:	30 f4       	brcc	.+12     	; 0x4756 <_ZN8SdVolume14cacheZeroBlockEm+0x2e>
    cacheBuffer_.data[i] = 0;
    474a:	fc 01       	movw	r30, r24
    474c:	eb 5f       	subi	r30, 0xFB	; 251
    474e:	fc 4f       	sbci	r31, 0xFC	; 252
    4750:	10 82       	st	Z, r1
  if (!cacheFlush()) {
    return false;
  }

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    4752:	01 96       	adiw	r24, 0x01	; 1
    4754:	f6 cf       	rjmp	.-20     	; 0x4742 <_ZN8SdVolume14cacheZeroBlockEm+0x1a>
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    4756:	c0 92 09 01 	sts	0x0109, r12	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    475a:	d0 92 0a 01 	sts	0x010A, r13	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    475e:	e0 92 0b 01 	sts	0x010B, r14	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    4762:	f0 92 0c 01 	sts	0x010C, r15	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    4766:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <_ZN8SdVolume11cacheDirty_E>
    476a:	81 60       	ori	r24, 0x01	; 1
    476c:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <_ZN8SdVolume11cacheDirty_E>
  cacheSetDirty();
  return true;
    4770:	81 e0       	ldi	r24, 0x01	; 1
}
    4772:	ff 90       	pop	r15
    4774:	ef 90       	pop	r14
    4776:	df 90       	pop	r13
    4778:	cf 90       	pop	r12
    477a:	08 95       	ret

0000477c <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    477c:	8f 92       	push	r8
    477e:	9f 92       	push	r9
    4780:	af 92       	push	r10
    4782:	bf 92       	push	r11
    4784:	cf 92       	push	r12
    4786:	df 92       	push	r13
    4788:	ef 92       	push	r14
    478a:	ff 92       	push	r15
    478c:	0f 93       	push	r16
    478e:	1f 93       	push	r17
    4790:	cf 93       	push	r28
    4792:	df 93       	push	r29
    4794:	fc 01       	movw	r30, r24
    4796:	e9 01       	movw	r28, r18
  if (cluster > (clusterCount_ + 1)) {
    4798:	01 85       	ldd	r16, Z+9	; 0x09
    479a:	12 85       	ldd	r17, Z+10	; 0x0a
    479c:	23 85       	ldd	r18, Z+11	; 0x0b
    479e:	34 85       	ldd	r19, Z+12	; 0x0c
    47a0:	0f 5f       	subi	r16, 0xFF	; 255
    47a2:	1f 4f       	sbci	r17, 0xFF	; 255
    47a4:	2f 4f       	sbci	r18, 0xFF	; 255
    47a6:	3f 4f       	sbci	r19, 0xFF	; 255
    47a8:	04 17       	cp	r16, r20
    47aa:	15 07       	cpc	r17, r21
    47ac:	26 07       	cpc	r18, r22
    47ae:	37 07       	cpc	r19, r23
    47b0:	08 f4       	brcc	.+2      	; 0x47b4 <_ZNK8SdVolume6fatGetEmPm+0x38>
    47b2:	61 c0       	rjmp	.+194    	; 0x4876 <_ZNK8SdVolume6fatGetEmPm+0xfa>
    return false;
  }
  uint32_t lba = fatStartBlock_;
    47b4:	83 89       	ldd	r24, Z+19	; 0x13
    47b6:	94 89       	ldd	r25, Z+20	; 0x14
    47b8:	a5 89       	ldd	r26, Z+21	; 0x15
    47ba:	b6 89       	ldd	r27, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    47bc:	27 89       	ldd	r18, Z+23	; 0x17
    47be:	20 31       	cpi	r18, 0x10	; 16
    47c0:	29 f4       	brne	.+10     	; 0x47cc <_ZNK8SdVolume6fatGetEmPm+0x50>
    47c2:	85 2e       	mov	r8, r21
    47c4:	96 2e       	mov	r9, r22
    47c6:	a7 2e       	mov	r10, r23
    47c8:	bb 24       	eor	r11, r11
    47ca:	0a c0       	rjmp	.+20     	; 0x47e0 <_ZNK8SdVolume6fatGetEmPm+0x64>
    47cc:	4a 01       	movw	r8, r20
    47ce:	5b 01       	movw	r10, r22
    47d0:	68 94       	set
    47d2:	16 f8       	bld	r1, 6
    47d4:	b6 94       	lsr	r11
    47d6:	a7 94       	ror	r10
    47d8:	97 94       	ror	r9
    47da:	87 94       	ror	r8
    47dc:	16 94       	lsr	r1
    47de:	d1 f7       	brne	.-12     	; 0x47d4 <_ZNK8SdVolume6fatGetEmPm+0x58>
    47e0:	6a 01       	movw	r12, r20
    47e2:	7b 01       	movw	r14, r22
    47e4:	8f 01       	movw	r16, r30
    47e6:	bc 01       	movw	r22, r24
    47e8:	cd 01       	movw	r24, r26
    47ea:	68 0d       	add	r22, r8
    47ec:	79 1d       	adc	r23, r9
    47ee:	8a 1d       	adc	r24, r10
    47f0:	9b 1d       	adc	r25, r11
  if (lba != cacheBlockNumber_) {
    47f2:	80 90 09 01 	lds	r8, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    47f6:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    47fa:	a0 90 0b 01 	lds	r10, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    47fe:	b0 90 0c 01 	lds	r11, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    4802:	68 15       	cp	r22, r8
    4804:	79 05       	cpc	r23, r9
    4806:	8a 05       	cpc	r24, r10
    4808:	9b 05       	cpc	r25, r11
    480a:	29 f0       	breq	.+10     	; 0x4816 <_ZNK8SdVolume6fatGetEmPm+0x9a>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) {
    480c:	40 e0       	ldi	r20, 0x00	; 0
    480e:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN8SdVolume13cacheRawBlockEmh>
    4812:	88 23       	and	r24, r24
    4814:	89 f1       	breq	.+98     	; 0x4878 <_ZNK8SdVolume6fatGetEmPm+0xfc>
      return false;
    }
  }
  if (fatType_ == 16) {
    4816:	f8 01       	movw	r30, r16
    4818:	87 89       	ldd	r24, Z+23	; 0x17
    481a:	80 31       	cpi	r24, 0x10	; 16
    481c:	a1 f4       	brne	.+40     	; 0x4846 <_ZNK8SdVolume6fatGetEmPm+0xca>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    481e:	b7 01       	movw	r22, r14
    4820:	a6 01       	movw	r20, r12
    4822:	55 27       	eor	r21, r21
    4824:	66 27       	eor	r22, r22
    4826:	77 27       	eor	r23, r23
    4828:	44 0f       	add	r20, r20
    482a:	55 1f       	adc	r21, r21
    482c:	fa 01       	movw	r30, r20
    482e:	eb 5f       	subi	r30, 0xFB	; 251
    4830:	fc 4f       	sbci	r31, 0xFC	; 252
    4832:	80 81       	ld	r24, Z
    4834:	91 81       	ldd	r25, Z+1	; 0x01
    4836:	a0 e0       	ldi	r26, 0x00	; 0
    4838:	b0 e0       	ldi	r27, 0x00	; 0
    483a:	88 83       	st	Y, r24
    483c:	99 83       	std	Y+1, r25	; 0x01
    483e:	aa 83       	std	Y+2, r26	; 0x02
    4840:	bb 83       	std	Y+3, r27	; 0x03
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
    4842:	81 e0       	ldi	r24, 0x01	; 1
    4844:	19 c0       	rjmp	.+50     	; 0x4878 <_ZNK8SdVolume6fatGetEmPm+0xfc>
    }
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    4846:	b7 01       	movw	r22, r14
    4848:	a6 01       	movw	r20, r12
    484a:	4f 77       	andi	r20, 0x7F	; 127
    484c:	55 27       	eor	r21, r21
    484e:	66 27       	eor	r22, r22
    4850:	77 27       	eor	r23, r23
    4852:	44 0f       	add	r20, r20
    4854:	55 1f       	adc	r21, r21
    4856:	44 0f       	add	r20, r20
    4858:	55 1f       	adc	r21, r21
    485a:	fa 01       	movw	r30, r20
    485c:	eb 5f       	subi	r30, 0xFB	; 251
    485e:	fc 4f       	sbci	r31, 0xFC	; 252
    4860:	80 81       	ld	r24, Z
    4862:	91 81       	ldd	r25, Z+1	; 0x01
    4864:	a2 81       	ldd	r26, Z+2	; 0x02
    4866:	b3 81       	ldd	r27, Z+3	; 0x03
    4868:	bf 70       	andi	r27, 0x0F	; 15
    486a:	88 83       	st	Y, r24
    486c:	99 83       	std	Y+1, r25	; 0x01
    486e:	aa 83       	std	Y+2, r26	; 0x02
    4870:	bb 83       	std	Y+3, r27	; 0x03
  }
  return true;
    4872:	81 e0       	ldi	r24, 0x01	; 1
    4874:	01 c0       	rjmp	.+2      	; 0x4878 <_ZNK8SdVolume6fatGetEmPm+0xfc>
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) {
    return false;
    4876:	80 e0       	ldi	r24, 0x00	; 0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    4878:	df 91       	pop	r29
    487a:	cf 91       	pop	r28
    487c:	1f 91       	pop	r17
    487e:	0f 91       	pop	r16
    4880:	ff 90       	pop	r15
    4882:	ef 90       	pop	r14
    4884:	df 90       	pop	r13
    4886:	cf 90       	pop	r12
    4888:	bf 90       	pop	r11
    488a:	af 90       	pop	r10
    488c:	9f 90       	pop	r9
    488e:	8f 90       	pop	r8
    4890:	08 95       	ret

00004892 <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    4892:	8f 92       	push	r8
    4894:	9f 92       	push	r9
    4896:	af 92       	push	r10
    4898:	bf 92       	push	r11
    489a:	ef 92       	push	r14
    489c:	ff 92       	push	r15
    489e:	0f 93       	push	r16
    48a0:	1f 93       	push	r17
    48a2:	cf 93       	push	r28
    48a4:	df 93       	push	r29
    48a6:	00 d0       	rcall	.+0      	; 0x48a8 <_ZNK8SdVolume9chainSizeEmPm+0x16>
    48a8:	00 d0       	rcall	.+0      	; 0x48aa <_ZNK8SdVolume9chainSizeEmPm+0x18>
    48aa:	cd b7       	in	r28, 0x3d	; 61
    48ac:	de b7       	in	r29, 0x3e	; 62
    48ae:	8c 01       	movw	r16, r24
    48b0:	49 83       	std	Y+1, r20	; 0x01
    48b2:	5a 83       	std	Y+2, r21	; 0x02
    48b4:	6b 83       	std	Y+3, r22	; 0x03
    48b6:	7c 83       	std	Y+4, r23	; 0x04
    48b8:	79 01       	movw	r14, r18
  uint32_t s = 0;
    48ba:	81 2c       	mov	r8, r1
    48bc:	91 2c       	mov	r9, r1
    48be:	54 01       	movw	r10, r8
  do {
    if (!fatGet(cluster, &cluster)) {
    48c0:	49 81       	ldd	r20, Y+1	; 0x01
    48c2:	5a 81       	ldd	r21, Y+2	; 0x02
    48c4:	6b 81       	ldd	r22, Y+3	; 0x03
    48c6:	7c 81       	ldd	r23, Y+4	; 0x04
    48c8:	9e 01       	movw	r18, r28
    48ca:	2f 5f       	subi	r18, 0xFF	; 255
    48cc:	3f 4f       	sbci	r19, 0xFF	; 255
    48ce:	c8 01       	movw	r24, r16
    48d0:	0e 94 be 23 	call	0x477c	; 0x477c <_ZNK8SdVolume6fatGetEmPm>
    48d4:	88 23       	and	r24, r24
    48d6:	61 f1       	breq	.+88     	; 0x4930 <_ZNK8SdVolume9chainSizeEmPm+0x9e>
      return false;
    }
    s += 512UL << clusterSizeShift_;
    48d8:	80 e0       	ldi	r24, 0x00	; 0
    48da:	92 e0       	ldi	r25, 0x02	; 2
    48dc:	a0 e0       	ldi	r26, 0x00	; 0
    48de:	b0 e0       	ldi	r27, 0x00	; 0
    48e0:	f8 01       	movw	r30, r16
    48e2:	05 84       	ldd	r0, Z+13	; 0x0d
    48e4:	04 c0       	rjmp	.+8      	; 0x48ee <_ZNK8SdVolume9chainSizeEmPm+0x5c>
    48e6:	88 0f       	add	r24, r24
    48e8:	99 1f       	adc	r25, r25
    48ea:	aa 1f       	adc	r26, r26
    48ec:	bb 1f       	adc	r27, r27
    48ee:	0a 94       	dec	r0
    48f0:	d2 f7       	brpl	.-12     	; 0x48e6 <_ZNK8SdVolume9chainSizeEmPm+0x54>
    48f2:	88 0e       	add	r8, r24
    48f4:	99 1e       	adc	r9, r25
    48f6:	aa 1e       	adc	r10, r26
    48f8:	bb 1e       	adc	r11, r27
  } while (!isEOC(cluster));
    48fa:	89 81       	ldd	r24, Y+1	; 0x01
    48fc:	9a 81       	ldd	r25, Y+2	; 0x02
    48fe:	ab 81       	ldd	r26, Y+3	; 0x03
    4900:	bc 81       	ldd	r27, Y+4	; 0x04
    uint8_t fatPutEOC(uint32_t cluster) {
      return fatPut(cluster, 0x0FFFFFFF);
    }
    uint8_t freeChain(uint32_t cluster);
    uint8_t isEOC(uint32_t cluster) const {
      return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    4902:	27 89       	ldd	r18, Z+23	; 0x17
    4904:	20 31       	cpi	r18, 0x10	; 16
    4906:	29 f4       	brne	.+10     	; 0x4912 <_ZNK8SdVolume9chainSizeEmPm+0x80>
    4908:	48 ef       	ldi	r20, 0xF8	; 248
    490a:	5f ef       	ldi	r21, 0xFF	; 255
    490c:	60 e0       	ldi	r22, 0x00	; 0
    490e:	70 e0       	ldi	r23, 0x00	; 0
    4910:	04 c0       	rjmp	.+8      	; 0x491a <_ZNK8SdVolume9chainSizeEmPm+0x88>
    4912:	48 ef       	ldi	r20, 0xF8	; 248
    4914:	5f ef       	ldi	r21, 0xFF	; 255
    4916:	6f ef       	ldi	r22, 0xFF	; 255
    4918:	7f e0       	ldi	r23, 0x0F	; 15
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    491a:	84 17       	cp	r24, r20
    491c:	95 07       	cpc	r25, r21
    491e:	a6 07       	cpc	r26, r22
    4920:	b7 07       	cpc	r27, r23
    4922:	70 f2       	brcs	.-100    	; 0x48c0 <_ZNK8SdVolume9chainSizeEmPm+0x2e>
    if (!fatGet(cluster, &cluster)) {
      return false;
    }
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    4924:	f7 01       	movw	r30, r14
    4926:	80 82       	st	Z, r8
    4928:	91 82       	std	Z+1, r9	; 0x01
    492a:	a2 82       	std	Z+2, r10	; 0x02
    492c:	b3 82       	std	Z+3, r11	; 0x03
  return true;
    492e:	81 e0       	ldi	r24, 0x01	; 1
}
    4930:	0f 90       	pop	r0
    4932:	0f 90       	pop	r0
    4934:	0f 90       	pop	r0
    4936:	0f 90       	pop	r0
    4938:	df 91       	pop	r29
    493a:	cf 91       	pop	r28
    493c:	1f 91       	pop	r17
    493e:	0f 91       	pop	r16
    4940:	ff 90       	pop	r15
    4942:	ef 90       	pop	r14
    4944:	bf 90       	pop	r11
    4946:	af 90       	pop	r10
    4948:	9f 90       	pop	r9
    494a:	8f 90       	pop	r8
    494c:	08 95       	ret

0000494e <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    494e:	4f 92       	push	r4
    4950:	5f 92       	push	r5
    4952:	6f 92       	push	r6
    4954:	7f 92       	push	r7
    4956:	8f 92       	push	r8
    4958:	9f 92       	push	r9
    495a:	af 92       	push	r10
    495c:	bf 92       	push	r11
    495e:	cf 92       	push	r12
    4960:	df 92       	push	r13
    4962:	ef 92       	push	r14
    4964:	ff 92       	push	r15
    4966:	0f 93       	push	r16
    4968:	1f 93       	push	r17
    496a:	cf 93       	push	r28
    496c:	df 93       	push	r29
    496e:	00 d0       	rcall	.+0      	; 0x4970 <_ZN8SdVolume6fatPutEmm+0x22>
    4970:	00 d0       	rcall	.+0      	; 0x4972 <_ZN8SdVolume6fatPutEmm+0x24>
    4972:	00 d0       	rcall	.+0      	; 0x4974 <_ZN8SdVolume6fatPutEmm+0x26>
    4974:	cd b7       	in	r28, 0x3d	; 61
    4976:	de b7       	in	r29, 0x3e	; 62
  // error if reserved cluster
  if (cluster < 2) {
    4978:	42 30       	cpi	r20, 0x02	; 2
    497a:	51 05       	cpc	r21, r1
    497c:	61 05       	cpc	r22, r1
    497e:	71 05       	cpc	r23, r1
    4980:	08 f4       	brcc	.+2      	; 0x4984 <_ZN8SdVolume6fatPutEmm+0x36>
    4982:	94 c0       	rjmp	.+296    	; 0x4aac <_ZN8SdVolume6fatPutEmm+0x15e>
    return false;
  }

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) {
    4984:	dc 01       	movw	r26, r24
    4986:	19 96       	adiw	r26, 0x09	; 9
    4988:	cd 90       	ld	r12, X+
    498a:	dd 90       	ld	r13, X+
    498c:	ed 90       	ld	r14, X+
    498e:	fc 90       	ld	r15, X
    4990:	1c 97       	sbiw	r26, 0x0c	; 12
    4992:	bf ef       	ldi	r27, 0xFF	; 255
    4994:	cb 1a       	sub	r12, r27
    4996:	db 0a       	sbc	r13, r27
    4998:	eb 0a       	sbc	r14, r27
    499a:	fb 0a       	sbc	r15, r27
    499c:	c4 16       	cp	r12, r20
    499e:	d5 06       	cpc	r13, r21
    49a0:	e6 06       	cpc	r14, r22
    49a2:	f7 06       	cpc	r15, r23
    49a4:	08 f4       	brcc	.+2      	; 0x49a8 <_ZN8SdVolume6fatPutEmm+0x5a>
    49a6:	84 c0       	rjmp	.+264    	; 0x4ab0 <_ZN8SdVolume6fatPutEmm+0x162>
    return false;
  }

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    49a8:	fc 01       	movw	r30, r24
    49aa:	43 88       	ldd	r4, Z+19	; 0x13
    49ac:	54 88       	ldd	r5, Z+20	; 0x14
    49ae:	65 88       	ldd	r6, Z+21	; 0x15
    49b0:	76 88       	ldd	r7, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    49b2:	e7 89       	ldd	r30, Z+23	; 0x17
    49b4:	e0 31       	cpi	r30, 0x10	; 16
    49b6:	29 f4       	brne	.+10     	; 0x49c2 <_ZN8SdVolume6fatPutEmm+0x74>
    49b8:	85 2e       	mov	r8, r21
    49ba:	96 2e       	mov	r9, r22
    49bc:	a7 2e       	mov	r10, r23
    49be:	bb 24       	eor	r11, r11
    49c0:	0a c0       	rjmp	.+20     	; 0x49d6 <_ZN8SdVolume6fatPutEmm+0x88>
    49c2:	4a 01       	movw	r8, r20
    49c4:	5b 01       	movw	r10, r22
    49c6:	68 94       	set
    49c8:	16 f8       	bld	r1, 6
    49ca:	b6 94       	lsr	r11
    49cc:	a7 94       	ror	r10
    49ce:	97 94       	ror	r9
    49d0:	87 94       	ror	r8
    49d2:	16 94       	lsr	r1
    49d4:	d1 f7       	brne	.-12     	; 0x49ca <_ZN8SdVolume6fatPutEmm+0x7c>
    49d6:	09 83       	std	Y+1, r16	; 0x01
    49d8:	1a 83       	std	Y+2, r17	; 0x02
    49da:	2b 83       	std	Y+3, r18	; 0x03
    49dc:	3c 83       	std	Y+4, r19	; 0x04
    49de:	6a 01       	movw	r12, r20
    49e0:	7b 01       	movw	r14, r22
    49e2:	9e 83       	std	Y+6, r25	; 0x06
    49e4:	8d 83       	std	Y+5, r24	; 0x05
    49e6:	48 0c       	add	r4, r8
    49e8:	59 1c       	adc	r5, r9
    49ea:	6a 1c       	adc	r6, r10
    49ec:	7b 1c       	adc	r7, r11

  if (lba != cacheBlockNumber_) {
    49ee:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    49f2:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    49f6:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    49fa:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    49fe:	48 16       	cp	r4, r24
    4a00:	59 06       	cpc	r5, r25
    4a02:	6a 06       	cpc	r6, r26
    4a04:	7b 06       	cpc	r7, r27
    4a06:	41 f0       	breq	.+16     	; 0x4a18 <_ZN8SdVolume6fatPutEmm+0xca>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) {
    4a08:	40 e0       	ldi	r20, 0x00	; 0
    4a0a:	c3 01       	movw	r24, r6
    4a0c:	b2 01       	movw	r22, r4
    4a0e:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN8SdVolume13cacheRawBlockEmh>
    4a12:	88 23       	and	r24, r24
    4a14:	09 f4       	brne	.+2      	; 0x4a18 <_ZN8SdVolume6fatPutEmm+0xca>
    4a16:	4f c0       	rjmp	.+158    	; 0x4ab6 <_ZN8SdVolume6fatPutEmm+0x168>
      return false;
    }
  }
  // store entry
  if (fatType_ == 16) {
    4a18:	ad 81       	ldd	r26, Y+5	; 0x05
    4a1a:	be 81       	ldd	r27, Y+6	; 0x06
    4a1c:	57 96       	adiw	r26, 0x17	; 23
    4a1e:	8c 91       	ld	r24, X
    4a20:	80 31       	cpi	r24, 0x10	; 16
    4a22:	79 f4       	brne	.+30     	; 0x4a42 <_ZN8SdVolume6fatPutEmm+0xf4>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    4a24:	b7 01       	movw	r22, r14
    4a26:	a6 01       	movw	r20, r12
    4a28:	55 27       	eor	r21, r21
    4a2a:	66 27       	eor	r22, r22
    4a2c:	77 27       	eor	r23, r23
    4a2e:	44 0f       	add	r20, r20
    4a30:	55 1f       	adc	r21, r21
    4a32:	fa 01       	movw	r30, r20
    4a34:	eb 5f       	subi	r30, 0xFB	; 251
    4a36:	fc 4f       	sbci	r31, 0xFC	; 252
    4a38:	89 81       	ldd	r24, Y+1	; 0x01
    4a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a3c:	91 83       	std	Z+1, r25	; 0x01
    4a3e:	80 83       	st	Z, r24
    4a40:	15 c0       	rjmp	.+42     	; 0x4a6c <_ZN8SdVolume6fatPutEmm+0x11e>
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    4a42:	b7 01       	movw	r22, r14
    4a44:	a6 01       	movw	r20, r12
    4a46:	4f 77       	andi	r20, 0x7F	; 127
    4a48:	55 27       	eor	r21, r21
    4a4a:	66 27       	eor	r22, r22
    4a4c:	77 27       	eor	r23, r23
    4a4e:	44 0f       	add	r20, r20
    4a50:	55 1f       	adc	r21, r21
    4a52:	44 0f       	add	r20, r20
    4a54:	55 1f       	adc	r21, r21
    4a56:	fa 01       	movw	r30, r20
    4a58:	eb 5f       	subi	r30, 0xFB	; 251
    4a5a:	fc 4f       	sbci	r31, 0xFC	; 252
    4a5c:	89 81       	ldd	r24, Y+1	; 0x01
    4a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    4a60:	ab 81       	ldd	r26, Y+3	; 0x03
    4a62:	bc 81       	ldd	r27, Y+4	; 0x04
    4a64:	80 83       	st	Z, r24
    4a66:	91 83       	std	Z+1, r25	; 0x01
    4a68:	a2 83       	std	Z+2, r26	; 0x02
    4a6a:	b3 83       	std	Z+3, r27	; 0x03
    }
    static uint8_t cacheFlush(uint8_t blocking = 1);
    static uint8_t cacheMirrorBlockFlush(uint8_t blocking);
    static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
    static void cacheSetDirty(void) {
      cacheDirty_ |= CACHE_FOR_WRITE;
    4a6c:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <_ZN8SdVolume11cacheDirty_E>
    4a70:	81 60       	ori	r24, 0x01	; 1
    4a72:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <_ZN8SdVolume11cacheDirty_E>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) {
    4a76:	ad 81       	ldd	r26, Y+5	; 0x05
    4a78:	be 81       	ldd	r27, Y+6	; 0x06
    4a7a:	52 96       	adiw	r26, 0x12	; 18
    4a7c:	8c 91       	ld	r24, X
    4a7e:	52 97       	sbiw	r26, 0x12	; 18
    4a80:	82 30       	cpi	r24, 0x02	; 2
    4a82:	c0 f0       	brcs	.+48     	; 0x4ab4 <_ZN8SdVolume6fatPutEmm+0x166>
    cacheMirrorBlock_ = lba + blocksPerFat_;
    4a84:	15 96       	adiw	r26, 0x05	; 5
    4a86:	8d 91       	ld	r24, X+
    4a88:	9d 91       	ld	r25, X+
    4a8a:	0d 90       	ld	r0, X+
    4a8c:	bc 91       	ld	r27, X
    4a8e:	a0 2d       	mov	r26, r0
    4a90:	48 0e       	add	r4, r24
    4a92:	59 1e       	adc	r5, r25
    4a94:	6a 1e       	adc	r6, r26
    4a96:	7b 1e       	adc	r7, r27
    4a98:	40 92 fe 02 	sts	0x02FE, r4	; 0x8002fe <_ZN8SdVolume17cacheMirrorBlock_E>
    4a9c:	50 92 ff 02 	sts	0x02FF, r5	; 0x8002ff <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    4aa0:	60 92 00 03 	sts	0x0300, r6	; 0x800300 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    4aa4:	70 92 01 03 	sts	0x0301, r7	; 0x800301 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  }
  return true;
    4aa8:	81 e0       	ldi	r24, 0x01	; 1
    4aaa:	05 c0       	rjmp	.+10     	; 0x4ab6 <_ZN8SdVolume6fatPutEmm+0x168>
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) {
    return false;
    4aac:	80 e0       	ldi	r24, 0x00	; 0
    4aae:	03 c0       	rjmp	.+6      	; 0x4ab6 <_ZN8SdVolume6fatPutEmm+0x168>
  }

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) {
    return false;
    4ab0:	80 e0       	ldi	r24, 0x00	; 0
    4ab2:	01 c0       	rjmp	.+2      	; 0x4ab6 <_ZN8SdVolume6fatPutEmm+0x168>

  // mirror second FAT
  if (fatCount_ > 1) {
    cacheMirrorBlock_ = lba + blocksPerFat_;
  }
  return true;
    4ab4:	81 e0       	ldi	r24, 0x01	; 1
}
    4ab6:	26 96       	adiw	r28, 0x06	; 6
    4ab8:	0f b6       	in	r0, 0x3f	; 63
    4aba:	f8 94       	cli
    4abc:	de bf       	out	0x3e, r29	; 62
    4abe:	0f be       	out	0x3f, r0	; 63
    4ac0:	cd bf       	out	0x3d, r28	; 61
    4ac2:	df 91       	pop	r29
    4ac4:	cf 91       	pop	r28
    4ac6:	1f 91       	pop	r17
    4ac8:	0f 91       	pop	r16
    4aca:	ff 90       	pop	r15
    4acc:	ef 90       	pop	r14
    4ace:	df 90       	pop	r13
    4ad0:	cf 90       	pop	r12
    4ad2:	bf 90       	pop	r11
    4ad4:	af 90       	pop	r10
    4ad6:	9f 90       	pop	r9
    4ad8:	8f 90       	pop	r8
    4ada:	7f 90       	pop	r7
    4adc:	6f 90       	pop	r6
    4ade:	5f 90       	pop	r5
    4ae0:	4f 90       	pop	r4
    4ae2:	08 95       	ret

00004ae4 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    4ae4:	2f 92       	push	r2
    4ae6:	3f 92       	push	r3
    4ae8:	4f 92       	push	r4
    4aea:	5f 92       	push	r5
    4aec:	6f 92       	push	r6
    4aee:	7f 92       	push	r7
    4af0:	8f 92       	push	r8
    4af2:	9f 92       	push	r9
    4af4:	af 92       	push	r10
    4af6:	bf 92       	push	r11
    4af8:	cf 92       	push	r12
    4afa:	df 92       	push	r13
    4afc:	ef 92       	push	r14
    4afe:	ff 92       	push	r15
    4b00:	0f 93       	push	r16
    4b02:	1f 93       	push	r17
    4b04:	cf 93       	push	r28
    4b06:	df 93       	push	r29
    4b08:	cd b7       	in	r28, 0x3d	; 61
    4b0a:	de b7       	in	r29, 0x3e	; 62
    4b0c:	2f 97       	sbiw	r28, 0x0f	; 15
    4b0e:	0f b6       	in	r0, 0x3f	; 63
    4b10:	f8 94       	cli
    4b12:	de bf       	out	0x3e, r29	; 62
    4b14:	0f be       	out	0x3f, r0	; 63
    4b16:	cd bf       	out	0x3d, r28	; 61
    4b18:	1c 01       	movw	r2, r24
    4b1a:	49 87       	std	Y+9, r20	; 0x09
    4b1c:	5a 87       	std	Y+10, r21	; 0x0a
    4b1e:	6b 87       	std	Y+11, r22	; 0x0b
    4b20:	7c 87       	std	Y+12, r23	; 0x0c
    4b22:	3e 87       	std	Y+14, r19	; 0x0e
    4b24:	2d 87       	std	Y+13, r18	; 0x0d

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    4b26:	d9 01       	movw	r26, r18
    4b28:	4d 90       	ld	r4, X+
    4b2a:	5d 90       	ld	r5, X+
    4b2c:	6d 90       	ld	r6, X+
    4b2e:	7c 90       	ld	r7, X
    4b30:	41 14       	cp	r4, r1
    4b32:	51 04       	cpc	r5, r1
    4b34:	61 04       	cpc	r6, r1
    4b36:	71 04       	cpc	r7, r1
    4b38:	39 f0       	breq	.+14     	; 0x4b48 <_ZN8SdVolume15allocContiguousEmPm+0x64>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    4b3a:	bf ef       	ldi	r27, 0xFF	; 255
    4b3c:	4b 1a       	sub	r4, r27
    4b3e:	5b 0a       	sbc	r5, r27
    4b40:	6b 0a       	sbc	r6, r27
    4b42:	7b 0a       	sbc	r7, r27

    // don't save new start location
    setStart = false;
    4b44:	1f 86       	std	Y+15, r1	; 0x0f
    4b46:	11 c0       	rjmp	.+34     	; 0x4b6a <_ZN8SdVolume15allocContiguousEmPm+0x86>
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    4b48:	fc 01       	movw	r30, r24
    4b4a:	40 80       	ld	r4, Z
    4b4c:	51 80       	ldd	r5, Z+1	; 0x01
    4b4e:	62 80       	ldd	r6, Z+2	; 0x02
    4b50:	73 80       	ldd	r7, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    4b52:	81 e0       	ldi	r24, 0x01	; 1
    4b54:	29 85       	ldd	r18, Y+9	; 0x09
    4b56:	3a 85       	ldd	r19, Y+10	; 0x0a
    4b58:	4b 85       	ldd	r20, Y+11	; 0x0b
    4b5a:	5c 85       	ldd	r21, Y+12	; 0x0c
    4b5c:	21 30       	cpi	r18, 0x01	; 1
    4b5e:	31 05       	cpc	r19, r1
    4b60:	41 05       	cpc	r20, r1
    4b62:	51 05       	cpc	r21, r1
    4b64:	09 f0       	breq	.+2      	; 0x4b68 <_ZN8SdVolume15allocContiguousEmPm+0x84>
    4b66:	80 e0       	ldi	r24, 0x00	; 0
    4b68:	8f 87       	std	Y+15, r24	; 0x0f
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    4b6a:	f1 01       	movw	r30, r2
    4b6c:	81 85       	ldd	r24, Z+9	; 0x09
    4b6e:	92 85       	ldd	r25, Z+10	; 0x0a
    4b70:	a3 85       	ldd	r26, Z+11	; 0x0b
    4b72:	b4 85       	ldd	r27, Z+12	; 0x0c
    4b74:	9c 01       	movw	r18, r24
    4b76:	ad 01       	movw	r20, r26
    4b78:	2f 5f       	subi	r18, 0xFF	; 255
    4b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b7c:	4f 4f       	sbci	r20, 0xFF	; 255
    4b7e:	5f 4f       	sbci	r21, 0xFF	; 255
    4b80:	2d 83       	std	Y+5, r18	; 0x05
    4b82:	3e 83       	std	Y+6, r19	; 0x06
    4b84:	4f 83       	std	Y+7, r20	; 0x07
    4b86:	58 87       	std	Y+8, r21	; 0x08

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    4b88:	73 01       	movw	r14, r6
    4b8a:	62 01       	movw	r12, r4

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    4b8c:	81 2c       	mov	r8, r1
    4b8e:	91 2c       	mov	r9, r1
    4b90:	54 01       	movw	r10, r8
    // can't find space checked all clusters
    if (n >= clusterCount_) {
    4b92:	f1 01       	movw	r30, r2
    4b94:	81 85       	ldd	r24, Z+9	; 0x09
    4b96:	92 85       	ldd	r25, Z+10	; 0x0a
    4b98:	a3 85       	ldd	r26, Z+11	; 0x0b
    4b9a:	b4 85       	ldd	r27, Z+12	; 0x0c
    4b9c:	88 16       	cp	r8, r24
    4b9e:	99 06       	cpc	r9, r25
    4ba0:	aa 06       	cpc	r10, r26
    4ba2:	bb 06       	cpc	r11, r27
    4ba4:	08 f0       	brcs	.+2      	; 0x4ba8 <_ZN8SdVolume15allocContiguousEmPm+0xc4>
    4ba6:	4a c0       	rjmp	.+148    	; 0x4c3c <_ZN8SdVolume15allocContiguousEmPm+0x158>
      return false;
    }

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    4ba8:	2d 81       	ldd	r18, Y+5	; 0x05
    4baa:	3e 81       	ldd	r19, Y+6	; 0x06
    4bac:	4f 81       	ldd	r20, Y+7	; 0x07
    4bae:	58 85       	ldd	r21, Y+8	; 0x08
    4bb0:	2c 15       	cp	r18, r12
    4bb2:	3d 05       	cpc	r19, r13
    4bb4:	4e 05       	cpc	r20, r14
    4bb6:	5f 05       	cpc	r21, r15
    4bb8:	50 f4       	brcc	.+20     	; 0x4bce <_ZN8SdVolume15allocContiguousEmPm+0xea>
      bgnCluster = endCluster = 2;
    4bba:	c1 2c       	mov	r12, r1
    4bbc:	d1 2c       	mov	r13, r1
    4bbe:	76 01       	movw	r14, r12
    4bc0:	68 94       	set
    4bc2:	c1 f8       	bld	r12, 1
    4bc4:	41 2c       	mov	r4, r1
    4bc6:	51 2c       	mov	r5, r1
    4bc8:	32 01       	movw	r6, r4
    4bca:	68 94       	set
    4bcc:	41 f8       	bld	r4, 1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) {
    4bce:	9e 01       	movw	r18, r28
    4bd0:	2f 5f       	subi	r18, 0xFF	; 255
    4bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    4bd4:	b7 01       	movw	r22, r14
    4bd6:	a6 01       	movw	r20, r12
    4bd8:	c1 01       	movw	r24, r2
    4bda:	0e 94 be 23 	call	0x477c	; 0x477c <_ZNK8SdVolume6fatGetEmPm>
    4bde:	88 23       	and	r24, r24
    4be0:	69 f1       	breq	.+90     	; 0x4c3c <_ZN8SdVolume15allocContiguousEmPm+0x158>
      return false;
    }

    if (f != 0) {
    4be2:	89 81       	ldd	r24, Y+1	; 0x01
    4be4:	9a 81       	ldd	r25, Y+2	; 0x02
    4be6:	ab 81       	ldd	r26, Y+3	; 0x03
    4be8:	bc 81       	ldd	r27, Y+4	; 0x04
    4bea:	89 2b       	or	r24, r25
    4bec:	8a 2b       	or	r24, r26
    4bee:	8b 2b       	or	r24, r27
    4bf0:	41 f0       	breq	.+16     	; 0x4c02 <_ZN8SdVolume15allocContiguousEmPm+0x11e>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    4bf2:	26 01       	movw	r4, r12
    4bf4:	37 01       	movw	r6, r14
    4bf6:	3f ef       	ldi	r19, 0xFF	; 255
    4bf8:	43 1a       	sub	r4, r19
    4bfa:	53 0a       	sbc	r5, r19
    4bfc:	63 0a       	sbc	r6, r19
    4bfe:	73 0a       	sbc	r7, r19
    4c00:	12 c0       	rjmp	.+36     	; 0x4c26 <_ZN8SdVolume15allocContiguousEmPm+0x142>
    } else if ((endCluster - bgnCluster + 1) == count) {
    4c02:	d7 01       	movw	r26, r14
    4c04:	c6 01       	movw	r24, r12
    4c06:	84 19       	sub	r24, r4
    4c08:	95 09       	sbc	r25, r5
    4c0a:	a6 09       	sbc	r26, r6
    4c0c:	b7 09       	sbc	r27, r7
    4c0e:	01 96       	adiw	r24, 0x01	; 1
    4c10:	a1 1d       	adc	r26, r1
    4c12:	b1 1d       	adc	r27, r1
    4c14:	29 85       	ldd	r18, Y+9	; 0x09
    4c16:	3a 85       	ldd	r19, Y+10	; 0x0a
    4c18:	4b 85       	ldd	r20, Y+11	; 0x0b
    4c1a:	5c 85       	ldd	r21, Y+12	; 0x0c
    4c1c:	28 17       	cp	r18, r24
    4c1e:	39 07       	cpc	r19, r25
    4c20:	4a 07       	cpc	r20, r26
    4c22:	5b 07       	cpc	r21, r27
    4c24:	69 f0       	breq	.+26     	; 0x4c40 <_ZN8SdVolume15allocContiguousEmPm+0x15c>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    4c26:	3f ef       	ldi	r19, 0xFF	; 255
    4c28:	83 1a       	sub	r8, r19
    4c2a:	93 0a       	sbc	r9, r19
    4c2c:	a3 0a       	sbc	r10, r19
    4c2e:	b3 0a       	sbc	r11, r19
    4c30:	4f ef       	ldi	r20, 0xFF	; 255
    4c32:	c4 1a       	sub	r12, r20
    4c34:	d4 0a       	sbc	r13, r20
    4c36:	e4 0a       	sbc	r14, r20
    4c38:	f4 0a       	sbc	r15, r20
    4c3a:	ab cf       	rjmp	.-170    	; 0x4b92 <_ZN8SdVolume15allocContiguousEmPm+0xae>
    // can't find space checked all clusters
    if (n >= clusterCount_) {
      return false;
    4c3c:	80 e0       	ldi	r24, 0x00	; 0
    4c3e:	4d c0       	rjmp	.+154    	; 0x4cda <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
    static uint8_t cacheZeroBlock(uint32_t blockNumber);
    uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
    uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
    uint8_t fatPut(uint32_t cluster, uint32_t value);
    uint8_t fatPutEOC(uint32_t cluster) {
      return fatPut(cluster, 0x0FFFFFFF);
    4c40:	0f ef       	ldi	r16, 0xFF	; 255
    4c42:	1f ef       	ldi	r17, 0xFF	; 255
    4c44:	2f ef       	ldi	r18, 0xFF	; 255
    4c46:	3f e0       	ldi	r19, 0x0F	; 15
    4c48:	b7 01       	movw	r22, r14
    4c4a:	a6 01       	movw	r20, r12
    4c4c:	c1 01       	movw	r24, r2
    4c4e:	0e 94 a7 24 	call	0x494e	; 0x494e <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) {
    4c52:	88 23       	and	r24, r24
    4c54:	09 f4       	brne	.+2      	; 0x4c58 <_ZN8SdVolume15allocContiguousEmPm+0x174>
    4c56:	41 c0       	rjmp	.+130    	; 0x4cda <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
    return false;
  }

  // link clusters
  while (endCluster > bgnCluster) {
    4c58:	4c 14       	cp	r4, r12
    4c5a:	5d 04       	cpc	r5, r13
    4c5c:	6e 04       	cpc	r6, r14
    4c5e:	7f 04       	cpc	r7, r15
    4c60:	98 f4       	brcc	.+38     	; 0x4c88 <_ZN8SdVolume15allocContiguousEmPm+0x1a4>
    if (!fatPut(endCluster - 1, endCluster)) {
    4c62:	46 01       	movw	r8, r12
    4c64:	57 01       	movw	r10, r14
    4c66:	51 e0       	ldi	r21, 0x01	; 1
    4c68:	85 1a       	sub	r8, r21
    4c6a:	91 08       	sbc	r9, r1
    4c6c:	a1 08       	sbc	r10, r1
    4c6e:	b1 08       	sbc	r11, r1
    4c70:	97 01       	movw	r18, r14
    4c72:	86 01       	movw	r16, r12
    4c74:	b5 01       	movw	r22, r10
    4c76:	a4 01       	movw	r20, r8
    4c78:	c1 01       	movw	r24, r2
    4c7a:	0e 94 a7 24 	call	0x494e	; 0x494e <_ZN8SdVolume6fatPutEmm>
    4c7e:	88 23       	and	r24, r24
    4c80:	61 f1       	breq	.+88     	; 0x4cda <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
      return false;
    }
    endCluster--;
    4c82:	75 01       	movw	r14, r10
    4c84:	64 01       	movw	r12, r8
    4c86:	e8 cf       	rjmp	.-48     	; 0x4c58 <_ZN8SdVolume15allocContiguousEmPm+0x174>
  }
  if (*curCluster != 0) {
    4c88:	ad 85       	ldd	r26, Y+13	; 0x0d
    4c8a:	be 85       	ldd	r27, Y+14	; 0x0e
    4c8c:	4d 91       	ld	r20, X+
    4c8e:	5d 91       	ld	r21, X+
    4c90:	6d 91       	ld	r22, X+
    4c92:	7c 91       	ld	r23, X
    4c94:	41 15       	cp	r20, r1
    4c96:	51 05       	cpc	r21, r1
    4c98:	61 05       	cpc	r22, r1
    4c9a:	71 05       	cpc	r23, r1
    4c9c:	39 f0       	breq	.+14     	; 0x4cac <_ZN8SdVolume15allocContiguousEmPm+0x1c8>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) {
    4c9e:	93 01       	movw	r18, r6
    4ca0:	82 01       	movw	r16, r4
    4ca2:	c1 01       	movw	r24, r2
    4ca4:	0e 94 a7 24 	call	0x494e	; 0x494e <_ZN8SdVolume6fatPutEmm>
    4ca8:	88 23       	and	r24, r24
    4caa:	b9 f0       	breq	.+46     	; 0x4cda <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
      return false;
    }
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    4cac:	ed 85       	ldd	r30, Y+13	; 0x0d
    4cae:	fe 85       	ldd	r31, Y+14	; 0x0e
    4cb0:	40 82       	st	Z, r4
    4cb2:	51 82       	std	Z+1, r5	; 0x01
    4cb4:	62 82       	std	Z+2, r6	; 0x02
    4cb6:	73 82       	std	Z+3, r7	; 0x03

  // remember possible next free cluster
  if (setStart) {
    4cb8:	ff 85       	ldd	r31, Y+15	; 0x0f
    4cba:	ff 23       	and	r31, r31
    4cbc:	69 f0       	breq	.+26     	; 0x4cd8 <_ZN8SdVolume15allocContiguousEmPm+0x1f4>
    allocSearchStart_ = bgnCluster + 1;
    4cbe:	2f ef       	ldi	r18, 0xFF	; 255
    4cc0:	42 1a       	sub	r4, r18
    4cc2:	52 0a       	sbc	r5, r18
    4cc4:	62 0a       	sbc	r6, r18
    4cc6:	72 0a       	sbc	r7, r18
    4cc8:	d1 01       	movw	r26, r2
    4cca:	4d 92       	st	X+, r4
    4ccc:	5d 92       	st	X+, r5
    4cce:	6d 92       	st	X+, r6
    4cd0:	7c 92       	st	X, r7
    4cd2:	13 97       	sbiw	r26, 0x03	; 3
  }

  return true;
    4cd4:	81 e0       	ldi	r24, 0x01	; 1
    4cd6:	01 c0       	rjmp	.+2      	; 0x4cda <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
    4cd8:	81 e0       	ldi	r24, 0x01	; 1
}
    4cda:	2f 96       	adiw	r28, 0x0f	; 15
    4cdc:	0f b6       	in	r0, 0x3f	; 63
    4cde:	f8 94       	cli
    4ce0:	de bf       	out	0x3e, r29	; 62
    4ce2:	0f be       	out	0x3f, r0	; 63
    4ce4:	cd bf       	out	0x3d, r28	; 61
    4ce6:	df 91       	pop	r29
    4ce8:	cf 91       	pop	r28
    4cea:	1f 91       	pop	r17
    4cec:	0f 91       	pop	r16
    4cee:	ff 90       	pop	r15
    4cf0:	ef 90       	pop	r14
    4cf2:	df 90       	pop	r13
    4cf4:	cf 90       	pop	r12
    4cf6:	bf 90       	pop	r11
    4cf8:	af 90       	pop	r10
    4cfa:	9f 90       	pop	r9
    4cfc:	8f 90       	pop	r8
    4cfe:	7f 90       	pop	r7
    4d00:	6f 90       	pop	r6
    4d02:	5f 90       	pop	r5
    4d04:	4f 90       	pop	r4
    4d06:	3f 90       	pop	r3
    4d08:	2f 90       	pop	r2
    4d0a:	08 95       	ret

00004d0c <_ZN8SdVolume9freeChainEm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    4d0c:	af 92       	push	r10
    4d0e:	bf 92       	push	r11
    4d10:	cf 92       	push	r12
    4d12:	df 92       	push	r13
    4d14:	ef 92       	push	r14
    4d16:	ff 92       	push	r15
    4d18:	0f 93       	push	r16
    4d1a:	1f 93       	push	r17
    4d1c:	cf 93       	push	r28
    4d1e:	df 93       	push	r29
    4d20:	00 d0       	rcall	.+0      	; 0x4d22 <_ZN8SdVolume9freeChainEm+0x16>
    4d22:	00 d0       	rcall	.+0      	; 0x4d24 <_ZN8SdVolume9freeChainEm+0x18>
    4d24:	cd b7       	in	r28, 0x3d	; 61
    4d26:	de b7       	in	r29, 0x3e	; 62
    4d28:	5c 01       	movw	r10, r24
    4d2a:	6a 01       	movw	r12, r20
    4d2c:	7b 01       	movw	r14, r22
  // clear free cluster location
  allocSearchStart_ = 2;
    4d2e:	82 e0       	ldi	r24, 0x02	; 2
    4d30:	90 e0       	ldi	r25, 0x00	; 0
    4d32:	a0 e0       	ldi	r26, 0x00	; 0
    4d34:	b0 e0       	ldi	r27, 0x00	; 0
    4d36:	f5 01       	movw	r30, r10
    4d38:	80 83       	st	Z, r24
    4d3a:	91 83       	std	Z+1, r25	; 0x01
    4d3c:	a2 83       	std	Z+2, r26	; 0x02
    4d3e:	b3 83       	std	Z+3, r27	; 0x03

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) {
    4d40:	9e 01       	movw	r18, r28
    4d42:	2f 5f       	subi	r18, 0xFF	; 255
    4d44:	3f 4f       	sbci	r19, 0xFF	; 255
    4d46:	b7 01       	movw	r22, r14
    4d48:	a6 01       	movw	r20, r12
    4d4a:	c5 01       	movw	r24, r10
    4d4c:	0e 94 be 23 	call	0x477c	; 0x477c <_ZNK8SdVolume6fatGetEmPm>
    4d50:	88 23       	and	r24, r24
    4d52:	11 f1       	breq	.+68     	; 0x4d98 <_ZN8SdVolume9freeChainEm+0x8c>
      return false;
    }

    // free cluster
    if (!fatPut(cluster, 0)) {
    4d54:	00 e0       	ldi	r16, 0x00	; 0
    4d56:	10 e0       	ldi	r17, 0x00	; 0
    4d58:	98 01       	movw	r18, r16
    4d5a:	b7 01       	movw	r22, r14
    4d5c:	a6 01       	movw	r20, r12
    4d5e:	c5 01       	movw	r24, r10
    4d60:	0e 94 a7 24 	call	0x494e	; 0x494e <_ZN8SdVolume6fatPutEmm>
    4d64:	88 23       	and	r24, r24
    4d66:	c1 f0       	breq	.+48     	; 0x4d98 <_ZN8SdVolume9freeChainEm+0x8c>
      return false;
    }

    cluster = next;
    4d68:	c9 80       	ldd	r12, Y+1	; 0x01
    4d6a:	da 80       	ldd	r13, Y+2	; 0x02
    4d6c:	eb 80       	ldd	r14, Y+3	; 0x03
    4d6e:	fc 80       	ldd	r15, Y+4	; 0x04
    }
    uint8_t freeChain(uint32_t cluster);
    uint8_t isEOC(uint32_t cluster) const {
      return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    4d70:	f5 01       	movw	r30, r10
    4d72:	87 89       	ldd	r24, Z+23	; 0x17
    4d74:	80 31       	cpi	r24, 0x10	; 16
    4d76:	29 f4       	brne	.+10     	; 0x4d82 <_ZN8SdVolume9freeChainEm+0x76>
    4d78:	88 ef       	ldi	r24, 0xF8	; 248
    4d7a:	9f ef       	ldi	r25, 0xFF	; 255
    4d7c:	a0 e0       	ldi	r26, 0x00	; 0
    4d7e:	b0 e0       	ldi	r27, 0x00	; 0
    4d80:	04 c0       	rjmp	.+8      	; 0x4d8a <_ZN8SdVolume9freeChainEm+0x7e>
    4d82:	88 ef       	ldi	r24, 0xF8	; 248
    4d84:	9f ef       	ldi	r25, 0xFF	; 255
    4d86:	af ef       	ldi	r26, 0xFF	; 255
    4d88:	bf e0       	ldi	r27, 0x0F	; 15
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    4d8a:	c8 16       	cp	r12, r24
    4d8c:	d9 06       	cpc	r13, r25
    4d8e:	ea 06       	cpc	r14, r26
    4d90:	fb 06       	cpc	r15, r27
    4d92:	b0 f2       	brcs	.-84     	; 0x4d40 <_ZN8SdVolume9freeChainEm+0x34>
    }

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    4d94:	81 e0       	ldi	r24, 0x01	; 1
    4d96:	01 c0       	rjmp	.+2      	; 0x4d9a <_ZN8SdVolume9freeChainEm+0x8e>
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) {
      return false;
    4d98:	80 e0       	ldi	r24, 0x00	; 0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    4d9a:	0f 90       	pop	r0
    4d9c:	0f 90       	pop	r0
    4d9e:	0f 90       	pop	r0
    4da0:	0f 90       	pop	r0
    4da2:	df 91       	pop	r29
    4da4:	cf 91       	pop	r28
    4da6:	1f 91       	pop	r17
    4da8:	0f 91       	pop	r16
    4daa:	ff 90       	pop	r15
    4dac:	ef 90       	pop	r14
    4dae:	df 90       	pop	r13
    4db0:	cf 90       	pop	r12
    4db2:	bf 90       	pop	r11
    4db4:	af 90       	pop	r10
    4db6:	08 95       	ret

00004db8 <_ZN8SdVolume4initEP7Sd2Cardh>:
   \return The value one, true, is returned for success and
   the value zero, false, is returned for failure.  Reasons for
   failure include not finding a valid partition, not finding a valid
   FAT file system in the specified partition or an I/O error.
*/
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    4db8:	4f 92       	push	r4
    4dba:	5f 92       	push	r5
    4dbc:	6f 92       	push	r6
    4dbe:	7f 92       	push	r7
    4dc0:	8f 92       	push	r8
    4dc2:	9f 92       	push	r9
    4dc4:	af 92       	push	r10
    4dc6:	bf 92       	push	r11
    4dc8:	cf 92       	push	r12
    4dca:	df 92       	push	r13
    4dcc:	ef 92       	push	r14
    4dce:	ff 92       	push	r15
    4dd0:	0f 93       	push	r16
    4dd2:	1f 93       	push	r17
    4dd4:	cf 93       	push	r28
    4dd6:	df 93       	push	r29
    4dd8:	8c 01       	movw	r16, r24
    4dda:	c4 2f       	mov	r28, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    4ddc:	70 93 04 03 	sts	0x0304, r23	; 0x800304 <_ZN8SdVolume7sdCard_E+0x1>
    4de0:	60 93 03 03 	sts	0x0303, r22	; 0x800303 <_ZN8SdVolume7sdCard_E>
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    4de4:	44 23       	and	r20, r20
    4de6:	09 f4       	brne	.+2      	; 0x4dea <_ZN8SdVolume4initEP7Sd2Cardh+0x32>
    4de8:	44 c0       	rjmp	.+136    	; 0x4e72 <_ZN8SdVolume4initEP7Sd2Cardh+0xba>
    if (part > 4) {
    4dea:	45 30       	cpi	r20, 0x05	; 5
    4dec:	08 f0       	brcs	.+2      	; 0x4df0 <_ZN8SdVolume4initEP7Sd2Cardh+0x38>
    4dee:	29 c1       	rjmp	.+594    	; 0x5042 <_ZN8SdVolume4initEP7Sd2Cardh+0x28a>
      return false;
    }
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    4df0:	40 e0       	ldi	r20, 0x00	; 0
    4df2:	60 e0       	ldi	r22, 0x00	; 0
    4df4:	70 e0       	ldi	r23, 0x00	; 0
    4df6:	cb 01       	movw	r24, r22
    4df8:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN8SdVolume13cacheRawBlockEmh>
    4dfc:	88 23       	and	r24, r24
    4dfe:	09 f4       	brne	.+2      	; 0x4e02 <_ZN8SdVolume4initEP7Sd2Cardh+0x4a>
    4e00:	2b c1       	rjmp	.+598    	; 0x5058 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
      return false;
    }
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    4e02:	4c 2f       	mov	r20, r28
    4e04:	50 e0       	ldi	r21, 0x00	; 0
    4e06:	41 50       	subi	r20, 0x01	; 1
    4e08:	51 09       	sbc	r21, r1
    if ((p->boot & 0X7F) != 0  ||
    4e0a:	fa 01       	movw	r30, r20
    4e0c:	e2 95       	swap	r30
    4e0e:	f2 95       	swap	r31
    4e10:	f0 7f       	andi	r31, 0xF0	; 240
    4e12:	fe 27       	eor	r31, r30
    4e14:	e0 7f       	andi	r30, 0xF0	; 240
    4e16:	fe 27       	eor	r31, r30
    4e18:	ed 53       	subi	r30, 0x3D	; 61
    4e1a:	fb 4f       	sbci	r31, 0xFB	; 251
    4e1c:	80 81       	ld	r24, Z
    4e1e:	8f 77       	andi	r24, 0x7F	; 127
    4e20:	09 f0       	breq	.+2      	; 0x4e24 <_ZN8SdVolume4initEP7Sd2Cardh+0x6c>
    4e22:	11 c1       	rjmp	.+546    	; 0x5046 <_ZN8SdVolume4initEP7Sd2Cardh+0x28e>
        p->totalSectors < 100 ||
    4e24:	fa 01       	movw	r30, r20
    4e26:	e2 95       	swap	r30
    4e28:	f2 95       	swap	r31
    4e2a:	f0 7f       	andi	r31, 0xF0	; 240
    4e2c:	fe 27       	eor	r31, r30
    4e2e:	e0 7f       	andi	r30, 0xF0	; 240
    4e30:	fe 27       	eor	r31, r30
    4e32:	e1 53       	subi	r30, 0x31	; 49
    4e34:	fb 4f       	sbci	r31, 0xFB	; 251
    4e36:	c0 80       	ld	r12, Z
    4e38:	d1 80       	ldd	r13, Z+1	; 0x01
    4e3a:	e2 80       	ldd	r14, Z+2	; 0x02
    4e3c:	f3 80       	ldd	r15, Z+3	; 0x03
    }
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
      return false;
    }
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0  ||
    4e3e:	24 e6       	ldi	r18, 0x64	; 100
    4e40:	c2 16       	cp	r12, r18
    4e42:	d1 04       	cpc	r13, r1
    4e44:	e1 04       	cpc	r14, r1
    4e46:	f1 04       	cpc	r15, r1
    4e48:	08 f4       	brcc	.+2      	; 0x4e4c <_ZN8SdVolume4initEP7Sd2Cardh+0x94>
    4e4a:	06 c1       	rjmp	.+524    	; 0x5058 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
        p->totalSectors < 100 ||
        p->firstSector == 0) {
    4e4c:	42 95       	swap	r20
    4e4e:	52 95       	swap	r21
    4e50:	50 7f       	andi	r21, 0xF0	; 240
    4e52:	54 27       	eor	r21, r20
    4e54:	40 7f       	andi	r20, 0xF0	; 240
    4e56:	54 27       	eor	r21, r20
    4e58:	fa 01       	movw	r30, r20
    4e5a:	e5 53       	subi	r30, 0x35	; 53
    4e5c:	fb 4f       	sbci	r31, 0xFB	; 251
    4e5e:	c0 80       	ld	r12, Z
    4e60:	d1 80       	ldd	r13, Z+1	; 0x01
    4e62:	e2 80       	ldd	r14, Z+2	; 0x02
    4e64:	f3 80       	ldd	r15, Z+3	; 0x03
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
      return false;
    }
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0  ||
        p->totalSectors < 100 ||
    4e66:	c1 14       	cp	r12, r1
    4e68:	d1 04       	cpc	r13, r1
    4e6a:	e1 04       	cpc	r14, r1
    4e6c:	f1 04       	cpc	r15, r1
    4e6e:	21 f4       	brne	.+8      	; 0x4e78 <_ZN8SdVolume4initEP7Sd2Cardh+0xc0>
    4e70:	f3 c0       	rjmp	.+486    	; 0x5058 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
   the value zero, false, is returned for failure.  Reasons for
   failure include not finding a valid partition, not finding a valid
   FAT file system in the specified partition or an I/O error.
*/
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    4e72:	c1 2c       	mov	r12, r1
    4e74:	d1 2c       	mov	r13, r1
    4e76:	76 01       	movw	r14, r12
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    4e78:	40 e0       	ldi	r20, 0x00	; 0
    4e7a:	c7 01       	movw	r24, r14
    4e7c:	b6 01       	movw	r22, r12
    4e7e:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_ZN8SdVolume13cacheRawBlockEmh>
    4e82:	88 23       	and	r24, r24
    4e84:	09 f4       	brne	.+2      	; 0x4e88 <_ZN8SdVolume4initEP7Sd2Cardh+0xd0>
    4e86:	e8 c0       	rjmp	.+464    	; 0x5058 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    4e88:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <_ZN8SdVolume12cacheBuffer_E+0xb>
    4e8c:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <_ZN8SdVolume12cacheBuffer_E+0xc>
    4e90:	81 15       	cp	r24, r1
    4e92:	92 40       	sbci	r25, 0x02	; 2
    4e94:	09 f0       	breq	.+2      	; 0x4e98 <_ZN8SdVolume4initEP7Sd2Cardh+0xe0>
    4e96:	d9 c0       	rjmp	.+434    	; 0x504a <_ZN8SdVolume4initEP7Sd2Cardh+0x292>
      bpb->fatCount == 0 ||
    4e98:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_ZN8SdVolume12cacheBuffer_E+0x10>
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    4e9c:	88 23       	and	r24, r24
    4e9e:	09 f4       	brne	.+2      	; 0x4ea2 <_ZN8SdVolume4initEP7Sd2Cardh+0xea>
    4ea0:	db c0       	rjmp	.+438    	; 0x5058 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
      bpb->fatCount == 0 ||
      bpb->reservedSectorCount == 0 ||
    4ea2:	20 91 13 03 	lds	r18, 0x0313	; 0x800313 <_ZN8SdVolume12cacheBuffer_E+0xe>
    4ea6:	30 91 14 03 	lds	r19, 0x0314	; 0x800314 <_ZN8SdVolume12cacheBuffer_E+0xf>
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
      bpb->fatCount == 0 ||
    4eaa:	23 2b       	or	r18, r19
    4eac:	09 f4       	brne	.+2      	; 0x4eb0 <_ZN8SdVolume4initEP7Sd2Cardh+0xf8>
    4eae:	cf c0       	rjmp	.+414    	; 0x504e <_ZN8SdVolume4initEP7Sd2Cardh+0x296>
      bpb->reservedSectorCount == 0 ||
      bpb->sectorsPerCluster == 0) {
    4eb0:	60 91 12 03 	lds	r22, 0x0312	; 0x800312 <_ZN8SdVolume12cacheBuffer_E+0xd>
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
      bpb->fatCount == 0 ||
      bpb->reservedSectorCount == 0 ||
    4eb4:	66 23       	and	r22, r22
    4eb6:	09 f4       	brne	.+2      	; 0x4eba <_ZN8SdVolume4initEP7Sd2Cardh+0x102>
    4eb8:	cc c0       	rjmp	.+408    	; 0x5052 <_ZN8SdVolume4initEP7Sd2Cardh+0x29a>
      bpb->sectorsPerCluster == 0) {
    // not valid FAT volume
    return false;
  }
  fatCount_ = bpb->fatCount;
    4eba:	e8 01       	movw	r28, r16
    4ebc:	8a 8b       	std	Y+18, r24	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    4ebe:	6c 83       	std	Y+4, r22	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    4ec0:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    4ec2:	f8 01       	movw	r30, r16
    4ec4:	85 85       	ldd	r24, Z+13	; 0x0d
    4ec6:	e8 2f       	mov	r30, r24
    4ec8:	21 e0       	ldi	r18, 0x01	; 1
    4eca:	30 e0       	ldi	r19, 0x00	; 0
    4ecc:	08 2e       	mov	r0, r24
    4ece:	02 c0       	rjmp	.+4      	; 0x4ed4 <_ZN8SdVolume4initEP7Sd2Cardh+0x11c>
    4ed0:	22 0f       	add	r18, r18
    4ed2:	33 1f       	adc	r19, r19
    4ed4:	0a 94       	dec	r0
    4ed6:	e2 f7       	brpl	.-8      	; 0x4ed0 <_ZN8SdVolume4initEP7Sd2Cardh+0x118>
    4ed8:	46 2f       	mov	r20, r22
    4eda:	50 e0       	ldi	r21, 0x00	; 0
    4edc:	42 17       	cp	r20, r18
    4ede:	53 07       	cpc	r21, r19
    4ee0:	41 f0       	breq	.+16     	; 0x4ef2 <_ZN8SdVolume4initEP7Sd2Cardh+0x13a>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) {
    4ee2:	91 e0       	ldi	r25, 0x01	; 1
    4ee4:	98 0f       	add	r25, r24
    4ee6:	d8 01       	movw	r26, r16
    4ee8:	1d 96       	adiw	r26, 0x0d	; 13
    4eea:	9c 93       	st	X, r25
    4eec:	88 30       	cpi	r24, 0x08	; 8
    4eee:	48 f3       	brcs	.-46     	; 0x4ec2 <_ZN8SdVolume4initEP7Sd2Cardh+0x10a>
    4ef0:	b2 c0       	rjmp	.+356    	; 0x5056 <_ZN8SdVolume4initEP7Sd2Cardh+0x29e>
      return false;
    }
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    4ef2:	20 91 1b 03 	lds	r18, 0x031B	; 0x80031b <_ZN8SdVolume12cacheBuffer_E+0x16>
    4ef6:	30 91 1c 03 	lds	r19, 0x031C	; 0x80031c <_ZN8SdVolume12cacheBuffer_E+0x17>
                  bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    4efa:	21 15       	cp	r18, r1
    4efc:	31 05       	cpc	r19, r1
    4efe:	19 f0       	breq	.+6      	; 0x4f06 <_ZN8SdVolume4initEP7Sd2Cardh+0x14e>
    4f00:	40 e0       	ldi	r20, 0x00	; 0
    4f02:	50 e0       	ldi	r21, 0x00	; 0
    4f04:	08 c0       	rjmp	.+16     	; 0x4f16 <_ZN8SdVolume4initEP7Sd2Cardh+0x15e>
    4f06:	20 91 29 03 	lds	r18, 0x0329	; 0x800329 <_ZN8SdVolume12cacheBuffer_E+0x24>
    4f0a:	30 91 2a 03 	lds	r19, 0x032A	; 0x80032a <_ZN8SdVolume12cacheBuffer_E+0x25>
    4f0e:	40 91 2b 03 	lds	r20, 0x032B	; 0x80032b <_ZN8SdVolume12cacheBuffer_E+0x26>
    4f12:	50 91 2c 03 	lds	r21, 0x032C	; 0x80032c <_ZN8SdVolume12cacheBuffer_E+0x27>
    4f16:	e8 01       	movw	r28, r16
    4f18:	2d 83       	std	Y+5, r18	; 0x05
    4f1a:	3e 83       	std	Y+6, r19	; 0x06
    4f1c:	4f 83       	std	Y+7, r20	; 0x07
    4f1e:	58 87       	std	Y+8, r21	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    4f20:	0f 2e       	mov	r0, r31
    4f22:	f5 e0       	ldi	r31, 0x05	; 5
    4f24:	af 2e       	mov	r10, r31
    4f26:	f3 e0       	ldi	r31, 0x03	; 3
    4f28:	bf 2e       	mov	r11, r31
    4f2a:	f0 2d       	mov	r31, r0
    4f2c:	d5 01       	movw	r26, r10
    4f2e:	1e 96       	adiw	r26, 0x0e	; 14
    4f30:	8d 91       	ld	r24, X+
    4f32:	9c 91       	ld	r25, X
    4f34:	1f 97       	sbiw	r26, 0x0f	; 15
    4f36:	26 01       	movw	r4, r12
    4f38:	37 01       	movw	r6, r14
    4f3a:	48 0e       	add	r4, r24
    4f3c:	59 1e       	adc	r5, r25
    4f3e:	61 1c       	adc	r6, r1
    4f40:	71 1c       	adc	r7, r1
    4f42:	4b 8a       	std	Y+19, r4	; 0x13
    4f44:	5c 8a       	std	Y+20, r5	; 0x14
    4f46:	6d 8a       	std	Y+21, r6	; 0x15
    4f48:	7e 8a       	std	Y+22, r7	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    4f4a:	51 96       	adiw	r26, 0x11	; 17
    4f4c:	8d 90       	ld	r8, X+
    4f4e:	9c 90       	ld	r9, X
    4f50:	52 97       	sbiw	r26, 0x12	; 18
    4f52:	99 8e       	std	Y+25, r9	; 0x19
    4f54:	88 8e       	std	Y+24, r8	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    4f56:	50 96       	adiw	r26, 0x10	; 16
    4f58:	8c 91       	ld	r24, X
    4f5a:	a8 2f       	mov	r26, r24
    4f5c:	b0 e0       	ldi	r27, 0x00	; 0
    4f5e:	0e 94 db 2f 	call	0x5fb6	; 0x5fb6 <__muluhisi3>
    4f62:	dc 01       	movw	r26, r24
    4f64:	cb 01       	movw	r24, r22
    4f66:	84 0d       	add	r24, r4
    4f68:	95 1d       	adc	r25, r5
    4f6a:	a6 1d       	adc	r26, r6
    4f6c:	b7 1d       	adc	r27, r7
    4f6e:	8a 8f       	std	Y+26, r24	; 0x1a
    4f70:	9b 8f       	std	Y+27, r25	; 0x1b
    4f72:	ac 8f       	std	Y+28, r26	; 0x1c
    4f74:	bd 8f       	std	Y+29, r27	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511) / 512);
    4f76:	e4 01       	movw	r28, r8
    4f78:	cc 0f       	add	r28, r28
    4f7a:	dd 1f       	adc	r29, r29
    4f7c:	c2 95       	swap	r28
    4f7e:	d2 95       	swap	r29
    4f80:	d0 7f       	andi	r29, 0xF0	; 240
    4f82:	dc 27       	eor	r29, r28
    4f84:	c0 7f       	andi	r28, 0xF0	; 240
    4f86:	dc 27       	eor	r29, r28
    4f88:	c1 50       	subi	r28, 0x01	; 1
    4f8a:	de 4f       	sbci	r29, 0xFE	; 254
    4f8c:	cd 2f       	mov	r28, r29
    4f8e:	dd 27       	eor	r29, r29
    4f90:	c6 95       	lsr	r28
    4f92:	8c 0f       	add	r24, r28
    4f94:	9d 1f       	adc	r25, r29
    4f96:	a1 1d       	adc	r26, r1
    4f98:	b1 1d       	adc	r27, r1
    4f9a:	e8 01       	movw	r28, r16
    4f9c:	8e 87       	std	Y+14, r24	; 0x0e
    4f9e:	9f 87       	std	Y+15, r25	; 0x0f
    4fa0:	a8 8b       	std	Y+16, r26	; 0x10
    4fa2:	b9 8b       	std	Y+17, r27	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    4fa4:	e5 01       	movw	r28, r10
    4fa6:	4b 88       	ldd	r4, Y+19	; 0x13
    4fa8:	5c 88       	ldd	r5, Y+20	; 0x14
                         bpb->totalSectors16 : bpb->totalSectors32;
    4faa:	41 14       	cp	r4, r1
    4fac:	51 04       	cpc	r5, r1
    4fae:	19 f0       	breq	.+6      	; 0x4fb6 <_ZN8SdVolume4initEP7Sd2Cardh+0x1fe>
    4fb0:	61 2c       	mov	r6, r1
    4fb2:	71 2c       	mov	r7, r1
    4fb4:	08 c0       	rjmp	.+16     	; 0x4fc6 <_ZN8SdVolume4initEP7Sd2Cardh+0x20e>
    4fb6:	40 90 25 03 	lds	r4, 0x0325	; 0x800325 <_ZN8SdVolume12cacheBuffer_E+0x20>
    4fba:	50 90 26 03 	lds	r5, 0x0326	; 0x800326 <_ZN8SdVolume12cacheBuffer_E+0x21>
    4fbe:	60 90 27 03 	lds	r6, 0x0327	; 0x800327 <_ZN8SdVolume12cacheBuffer_E+0x22>
    4fc2:	70 90 28 03 	lds	r7, 0x0328	; 0x800328 <_ZN8SdVolume12cacheBuffer_E+0x23>
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
    4fc6:	c8 1a       	sub	r12, r24
    4fc8:	d9 0a       	sbc	r13, r25
    4fca:	ea 0a       	sbc	r14, r26
    4fcc:	fb 0a       	sbc	r15, r27
    4fce:	c4 0c       	add	r12, r4
    4fd0:	d5 1c       	adc	r13, r5
    4fd2:	e6 1c       	adc	r14, r6
    4fd4:	f7 1c       	adc	r15, r7

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    4fd6:	04 c0       	rjmp	.+8      	; 0x4fe0 <_ZN8SdVolume4initEP7Sd2Cardh+0x228>
    4fd8:	f6 94       	lsr	r15
    4fda:	e7 94       	ror	r14
    4fdc:	d7 94       	ror	r13
    4fde:	c7 94       	ror	r12
    4fe0:	ea 95       	dec	r30
    4fe2:	d2 f7       	brpl	.-12     	; 0x4fd8 <_ZN8SdVolume4initEP7Sd2Cardh+0x220>
    4fe4:	f8 01       	movw	r30, r16
    4fe6:	c1 86       	std	Z+9, r12	; 0x09
    4fe8:	d2 86       	std	Z+10, r13	; 0x0a
    4fea:	e3 86       	std	Z+11, r14	; 0x0b
    4fec:	f4 86       	std	Z+12, r15	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    4fee:	f5 ef       	ldi	r31, 0xF5	; 245
    4ff0:	cf 16       	cp	r12, r31
    4ff2:	ff e0       	ldi	r31, 0x0F	; 15
    4ff4:	df 06       	cpc	r13, r31
    4ff6:	e1 04       	cpc	r14, r1
    4ff8:	f1 04       	cpc	r15, r1
    4ffa:	30 f4       	brcc	.+12     	; 0x5008 <_ZN8SdVolume4initEP7Sd2Cardh+0x250>
    fatType_ = 12;
    4ffc:	8c e0       	ldi	r24, 0x0C	; 12
    4ffe:	d8 01       	movw	r26, r16
    5000:	57 96       	adiw	r26, 0x17	; 23
    5002:	8c 93       	st	X, r24
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    5004:	81 e0       	ldi	r24, 0x01	; 1
    5006:	28 c0       	rjmp	.+80     	; 0x5058 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  clusterCount_ >>= clusterSizeShift_;

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    5008:	b5 ef       	ldi	r27, 0xF5	; 245
    500a:	cb 16       	cp	r12, r27
    500c:	bf ef       	ldi	r27, 0xFF	; 255
    500e:	db 06       	cpc	r13, r27
    5010:	e1 04       	cpc	r14, r1
    5012:	f1 04       	cpc	r15, r1
    5014:	28 f4       	brcc	.+10     	; 0x5020 <_ZN8SdVolume4initEP7Sd2Cardh+0x268>
    fatType_ = 16;
    5016:	80 e1       	ldi	r24, 0x10	; 16
    5018:	e8 01       	movw	r28, r16
    501a:	8f 8b       	std	Y+23, r24	; 0x17
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    501c:	81 e0       	ldi	r24, 0x01	; 1
    501e:	1c c0       	rjmp	.+56     	; 0x5058 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    5020:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <_ZN8SdVolume12cacheBuffer_E+0x2c>
    5024:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <_ZN8SdVolume12cacheBuffer_E+0x2d>
    5028:	a0 91 33 03 	lds	r26, 0x0333	; 0x800333 <_ZN8SdVolume12cacheBuffer_E+0x2e>
    502c:	b0 91 34 03 	lds	r27, 0x0334	; 0x800334 <_ZN8SdVolume12cacheBuffer_E+0x2f>
    5030:	f8 01       	movw	r30, r16
    5032:	82 8f       	std	Z+26, r24	; 0x1a
    5034:	93 8f       	std	Z+27, r25	; 0x1b
    5036:	a4 8f       	std	Z+28, r26	; 0x1c
    5038:	b5 8f       	std	Z+29, r27	; 0x1d
    fatType_ = 32;
    503a:	80 e2       	ldi	r24, 0x20	; 32
    503c:	87 8b       	std	Z+23, r24	; 0x17
  }
  return true;
    503e:	81 e0       	ldi	r24, 0x01	; 1
    5040:	0b c0       	rjmp	.+22     	; 0x5058 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  sdCard_ = dev;
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4) {
      return false;
    5042:	80 e0       	ldi	r24, 0x00	; 0
    5044:	09 c0       	rjmp	.+18     	; 0x5058 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0  ||
        p->totalSectors < 100 ||
        p->firstSector == 0) {
      // not a valid partition
      return false;
    5046:	80 e0       	ldi	r24, 0x00	; 0
    5048:	07 c0       	rjmp	.+14     	; 0x5058 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  if (bpb->bytesPerSector != 512 ||
      bpb->fatCount == 0 ||
      bpb->reservedSectorCount == 0 ||
      bpb->sectorsPerCluster == 0) {
    // not valid FAT volume
    return false;
    504a:	80 e0       	ldi	r24, 0x00	; 0
    504c:	05 c0       	rjmp	.+10     	; 0x5058 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    504e:	80 e0       	ldi	r24, 0x00	; 0
    5050:	03 c0       	rjmp	.+6      	; 0x5058 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    5052:	86 2f       	mov	r24, r22
    5054:	01 c0       	rjmp	.+2      	; 0x5058 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    // error if not power of 2
    if (clusterSizeShift_++ > 7) {
      return false;
    5056:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
}
    5058:	df 91       	pop	r29
    505a:	cf 91       	pop	r28
    505c:	1f 91       	pop	r17
    505e:	0f 91       	pop	r16
    5060:	ff 90       	pop	r15
    5062:	ef 90       	pop	r14
    5064:	df 90       	pop	r13
    5066:	cf 90       	pop	r12
    5068:	bf 90       	pop	r11
    506a:	af 90       	pop	r10
    506c:	9f 90       	pop	r9
    506e:	8f 90       	pop	r8
    5070:	7f 90       	pop	r7
    5072:	6f 90       	pop	r6
    5074:	5f 90       	pop	r5
    5076:	4f 90       	pop	r4
    5078:	08 95       	ret

0000507a <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    507a:	cf 93       	push	r28
  uint8_t sreg = SREG;
    507c:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    507e:	f8 94       	cli
  if (!initialized) {
    5080:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <_ZN8SPIClass11initializedE>
    5084:	81 11       	cpse	r24, r1
    5086:	27 c0       	rjmp	.+78     	; 0x50d6 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    5088:	ec e2       	ldi	r30, 0x2C	; 44
    508a:	f2 e0       	ldi	r31, 0x02	; 2
    508c:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    508e:	e8 e1       	ldi	r30, 0x18	; 24
    5090:	f2 e0       	ldi	r31, 0x02	; 2
    5092:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    5094:	e8 2f       	mov	r30, r24
    5096:	f0 e0       	ldi	r31, 0x00	; 0
    5098:	ee 0f       	add	r30, r30
    509a:	ff 1f       	adc	r31, r31
    509c:	e0 5c       	subi	r30, 0xC0	; 192
    509e:	fd 4f       	sbci	r31, 0xFD	; 253
    50a0:	a5 91       	lpm	r26, Z+
    50a2:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    50a4:	ec 91       	ld	r30, X
    50a6:	e9 23       	and	r30, r25
    50a8:	21 f4       	brne	.+8      	; 0x50b2 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    50aa:	61 e0       	ldi	r22, 0x01	; 1
    50ac:	8a e0       	ldi	r24, 0x0A	; 10
    50ae:	0e 94 ef 07 	call	0xfde	; 0xfde <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    50b2:	61 e0       	ldi	r22, 0x01	; 1
    50b4:	8a e0       	ldi	r24, 0x0A	; 10
    50b6:	0e 94 b0 07 	call	0xf60	; 0xf60 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    50ba:	8c b5       	in	r24, 0x2c	; 44
    50bc:	80 61       	ori	r24, 0x10	; 16
    50be:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    50c0:	8c b5       	in	r24, 0x2c	; 44
    50c2:	80 64       	ori	r24, 0x40	; 64
    50c4:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    50c6:	61 e0       	ldi	r22, 0x01	; 1
    50c8:	8d e0       	ldi	r24, 0x0D	; 13
    50ca:	0e 94 b0 07 	call	0xf60	; 0xf60 <pinMode>
    pinMode(MOSI, OUTPUT);
    50ce:	61 e0       	ldi	r22, 0x01	; 1
    50d0:	8b e0       	ldi	r24, 0x0B	; 11
    50d2:	0e 94 b0 07 	call	0xf60	; 0xf60 <pinMode>
  }
  initialized++; // reference count
    50d6:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <_ZN8SPIClass11initializedE>
    50da:	8f 5f       	subi	r24, 0xFF	; 255
    50dc:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    50e0:	cf bf       	out	0x3f, r28	; 63
}
    50e2:	cf 91       	pop	r28
    50e4:	08 95       	ret

000050e6 <_ZNK12SSD1306Ascii8fontRowsEv>:
  clear(m_col, displayWidth() -1, m_row, m_row + fontRows() - 1);
}
//------------------------------------------------------------------------------
void SSD1306Ascii::clearField(uint8_t col, uint8_t row, uint8_t n) {
  clear(col, col + fieldWidth(n) - 1, row, row + fontRows() - 1);
}
    50e6:	dc 01       	movw	r26, r24
    50e8:	1e 96       	adiw	r26, 0x0e	; 14
    50ea:	ed 91       	ld	r30, X+
    50ec:	fc 91       	ld	r31, X
    50ee:	1f 97       	sbiw	r26, 0x0f	; 15
    50f0:	30 97       	sbiw	r30, 0x00	; 0
    50f2:	99 f0       	breq	.+38     	; 0x511a <_ZNK12SSD1306Ascii8fontRowsEv+0x34>
    50f4:	51 96       	adiw	r26, 0x11	; 17
    50f6:	2c 91       	ld	r18, X
    50f8:	33 96       	adiw	r30, 0x03	; 3
    50fa:	e4 91       	lpm	r30, Z
    50fc:	f0 e0       	ldi	r31, 0x00	; 0
    50fe:	37 96       	adiw	r30, 0x07	; 7
    5100:	cf 01       	movw	r24, r30
    5102:	0a f4       	brpl	.+2      	; 0x5106 <_ZNK12SSD1306Ascii8fontRowsEv+0x20>
    5104:	07 96       	adiw	r24, 0x07	; 7
    5106:	95 95       	asr	r25
    5108:	87 95       	ror	r24
    510a:	95 95       	asr	r25
    510c:	87 95       	ror	r24
    510e:	95 95       	asr	r25
    5110:	87 95       	ror	r24
    5112:	28 9f       	mul	r18, r24
    5114:	80 2d       	mov	r24, r0
    5116:	11 24       	eor	r1, r1
    5118:	08 95       	ret
    511a:	80 e0       	ldi	r24, 0x00	; 0
    511c:	08 95       	ret

0000511e <_ZNK12SSD1306Ascii8fontSizeEv>:
    511e:	dc 01       	movw	r26, r24
    5120:	1e 96       	adiw	r26, 0x0e	; 14
    5122:	ed 91       	ld	r30, X+
    5124:	fc 91       	ld	r31, X
    5126:	1f 97       	sbiw	r26, 0x0f	; 15
    5128:	84 91       	lpm	r24, Z
    512a:	90 e0       	ldi	r25, 0x00	; 0
    512c:	98 2f       	mov	r25, r24
    512e:	88 27       	eor	r24, r24
    5130:	31 96       	adiw	r30, 0x01	; 1
    5132:	e4 91       	lpm	r30, Z
    5134:	8e 2b       	or	r24, r30
    5136:	08 95       	ret

00005138 <_ZN12SSD1306Ascii6setColEh>:
    5138:	1f 93       	push	r17
    513a:	cf 93       	push	r28
    513c:	df 93       	push	r29
    513e:	fc 01       	movw	r30, r24
    5140:	26 81       	ldd	r18, Z+6	; 0x06
    5142:	62 17       	cp	r22, r18
    5144:	18 f5       	brcc	.+70     	; 0x518c <_ZN12SSD1306Ascii6setColEh+0x54>
    5146:	ec 01       	movw	r28, r24
    5148:	64 83       	std	Z+4, r22	; 0x04
    514a:	80 85       	ldd	r24, Z+8	; 0x08
    514c:	16 2f       	mov	r17, r22
    514e:	18 0f       	add	r17, r24
    5150:	61 2f       	mov	r22, r17
    5152:	6f 70       	andi	r22, 0x0F	; 15
    5154:	01 90       	ld	r0, Z+
    5156:	f0 81       	ld	r31, Z
    5158:	e0 2d       	mov	r30, r0
    515a:	00 84       	ldd	r0, Z+8	; 0x08
    515c:	f1 85       	ldd	r31, Z+9	; 0x09
    515e:	e0 2d       	mov	r30, r0
    5160:	40 e0       	ldi	r20, 0x00	; 0
    5162:	ce 01       	movw	r24, r28
    5164:	09 95       	icall
    5166:	61 2f       	mov	r22, r17
    5168:	70 e0       	ldi	r23, 0x00	; 0
    516a:	75 95       	asr	r23
    516c:	67 95       	ror	r22
    516e:	75 95       	asr	r23
    5170:	67 95       	ror	r22
    5172:	75 95       	asr	r23
    5174:	67 95       	ror	r22
    5176:	75 95       	asr	r23
    5178:	67 95       	ror	r22
    517a:	60 61       	ori	r22, 0x10	; 16
    517c:	e8 81       	ld	r30, Y
    517e:	f9 81       	ldd	r31, Y+1	; 0x01
    5180:	00 84       	ldd	r0, Z+8	; 0x08
    5182:	f1 85       	ldd	r31, Z+9	; 0x09
    5184:	e0 2d       	mov	r30, r0
    5186:	40 e0       	ldi	r20, 0x00	; 0
    5188:	ce 01       	movw	r24, r28
    518a:	09 95       	icall
    518c:	df 91       	pop	r29
    518e:	cf 91       	pop	r28
    5190:	1f 91       	pop	r17
    5192:	08 95       	ret

00005194 <_ZN12SSD1306Ascii7setFontEPKh>:
    5194:	cf 93       	push	r28
    5196:	df 93       	push	r29
    5198:	ec 01       	movw	r28, r24
    519a:	7f 87       	std	Y+15, r23	; 0x0f
    519c:	6e 87       	std	Y+14, r22	; 0x0e
    519e:	67 2b       	or	r22, r23
    51a0:	31 f0       	breq	.+12     	; 0x51ae <_ZN12SSD1306Ascii7setFontEPKh+0x1a>
    51a2:	0e 94 8f 28 	call	0x511e	; 0x511e <_ZNK12SSD1306Ascii8fontSizeEv>
    51a6:	01 97       	sbiw	r24, 0x01	; 1
    51a8:	21 f4       	brne	.+8      	; 0x51b2 <_ZN12SSD1306Ascii7setFontEPKh+0x1e>
    51aa:	81 e0       	ldi	r24, 0x01	; 1
    51ac:	03 c0       	rjmp	.+6      	; 0x51b4 <_ZN12SSD1306Ascii7setFontEPKh+0x20>
    51ae:	80 e0       	ldi	r24, 0x00	; 0
    51b0:	01 c0       	rjmp	.+2      	; 0x51b4 <_ZN12SSD1306Ascii7setFontEPKh+0x20>
    51b2:	80 e0       	ldi	r24, 0x00	; 0
    51b4:	88 23       	and	r24, r24
    51b6:	11 f0       	breq	.+4      	; 0x51bc <_ZN12SSD1306Ascii7setFontEPKh+0x28>
    51b8:	19 86       	std	Y+9, r1	; 0x09
    51ba:	02 c0       	rjmp	.+4      	; 0x51c0 <_ZN12SSD1306Ascii7setFontEPKh+0x2c>
    51bc:	81 e0       	ldi	r24, 0x01	; 1
    51be:	89 87       	std	Y+9, r24	; 0x09
    51c0:	df 91       	pop	r29
    51c2:	cf 91       	pop	r28
    51c4:	08 95       	ret

000051c6 <_ZN12SSD1306Ascii6setRowEh>:
    51c6:	fc 01       	movw	r30, r24
    51c8:	27 81       	ldd	r18, Z+7	; 0x07
    51ca:	26 95       	lsr	r18
    51cc:	26 95       	lsr	r18
    51ce:	26 95       	lsr	r18
    51d0:	62 17       	cp	r22, r18
    51d2:	68 f4       	brcc	.+26     	; 0x51ee <_ZN12SSD1306Ascii6setRowEh+0x28>
    51d4:	65 83       	std	Z+5, r22	; 0x05
    51d6:	23 85       	ldd	r18, Z+11	; 0x0b
    51d8:	62 0f       	add	r22, r18
    51da:	67 70       	andi	r22, 0x07	; 7
    51dc:	60 6b       	ori	r22, 0xB0	; 176
    51de:	01 90       	ld	r0, Z+
    51e0:	f0 81       	ld	r31, Z
    51e2:	e0 2d       	mov	r30, r0
    51e4:	00 84       	ldd	r0, Z+8	; 0x08
    51e6:	f1 85       	ldd	r31, Z+9	; 0x09
    51e8:	e0 2d       	mov	r30, r0
    51ea:	40 e0       	ldi	r20, 0x00	; 0
    51ec:	09 95       	icall
    51ee:	08 95       	ret

000051f0 <_ZN12SSD1306Ascii9setCursorEhh>:
    51f0:	1f 93       	push	r17
    51f2:	cf 93       	push	r28
    51f4:	df 93       	push	r29
    51f6:	ec 01       	movw	r28, r24
    51f8:	14 2f       	mov	r17, r20
    51fa:	0e 94 9c 28 	call	0x5138	; 0x5138 <_ZN12SSD1306Ascii6setColEh>
    51fe:	61 2f       	mov	r22, r17
    5200:	ce 01       	movw	r24, r28
    5202:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <_ZN12SSD1306Ascii6setRowEh>
    5206:	df 91       	pop	r29
    5208:	cf 91       	pop	r28
    520a:	1f 91       	pop	r17
    520c:	08 95       	ret

0000520e <_ZN12SSD1306Ascii12setStartLineEh>:
    520e:	6f 73       	andi	r22, 0x3F	; 63
    5210:	dc 01       	movw	r26, r24
    5212:	1a 96       	adiw	r26, 0x0a	; 10
    5214:	6c 93       	st	X, r22
    5216:	1a 97       	sbiw	r26, 0x0a	; 10
    5218:	60 64       	ori	r22, 0x40	; 64
    521a:	ed 91       	ld	r30, X+
    521c:	fc 91       	ld	r31, X
    521e:	00 84       	ldd	r0, Z+8	; 0x08
    5220:	f1 85       	ldd	r31, Z+9	; 0x09
    5222:	e0 2d       	mov	r30, r0
    5224:	40 e0       	ldi	r20, 0x00	; 0
    5226:	09 95       	icall
    5228:	08 95       	ret

0000522a <_ZN12SSD1306Ascii18ssd1306WriteRamBufEh>:
    522a:	cf 93       	push	r28
    522c:	df 93       	push	r29
    522e:	fc 01       	movw	r30, r24
    5230:	85 85       	ldd	r24, Z+13	; 0x0d
    5232:	88 23       	and	r24, r24
    5234:	19 f0       	breq	.+6      	; 0x523c <_ZN12SSD1306Ascii18ssd1306WriteRamBufEh+0x12>
    5236:	81 50       	subi	r24, 0x01	; 1
    5238:	85 87       	std	Z+13, r24	; 0x0d
    523a:	13 c0       	rjmp	.+38     	; 0x5262 <_ZN12SSD1306Ascii18ssd1306WriteRamBufEh+0x38>
    523c:	94 81       	ldd	r25, Z+4	; 0x04
    523e:	86 81       	ldd	r24, Z+6	; 0x06
    5240:	98 17       	cp	r25, r24
    5242:	78 f4       	brcc	.+30     	; 0x5262 <_ZN12SSD1306Ascii18ssd1306WriteRamBufEh+0x38>
    5244:	ef 01       	movw	r28, r30
    5246:	01 90       	ld	r0, Z+
    5248:	f0 81       	ld	r31, Z
    524a:	e0 2d       	mov	r30, r0
    524c:	00 84       	ldd	r0, Z+8	; 0x08
    524e:	f1 85       	ldd	r31, Z+9	; 0x09
    5250:	e0 2d       	mov	r30, r0
    5252:	88 89       	ldd	r24, Y+16	; 0x10
    5254:	68 27       	eor	r22, r24
    5256:	42 e0       	ldi	r20, 0x02	; 2
    5258:	ce 01       	movw	r24, r28
    525a:	09 95       	icall
    525c:	8c 81       	ldd	r24, Y+4	; 0x04
    525e:	8f 5f       	subi	r24, 0xFF	; 255
    5260:	8c 83       	std	Y+4, r24	; 0x04
    5262:	df 91       	pop	r29
    5264:	cf 91       	pop	r28
    5266:	08 95       	ret

00005268 <_ZN12SSD1306Ascii5clearEhhhh>:
    5268:	cf 92       	push	r12
    526a:	df 92       	push	r13
    526c:	ef 92       	push	r14
    526e:	ff 92       	push	r15
    5270:	0f 93       	push	r16
    5272:	1f 93       	push	r17
    5274:	cf 93       	push	r28
    5276:	df 93       	push	r29
    5278:	7c 01       	movw	r14, r24
    527a:	d6 2e       	mov	r13, r22
    527c:	d4 2f       	mov	r29, r20
    527e:	c2 2e       	mov	r12, r18
    5280:	fc 01       	movw	r30, r24
    5282:	15 86       	std	Z+13, r1	; 0x0d
    5284:	87 81       	ldd	r24, Z+7	; 0x07
    5286:	86 95       	lsr	r24
    5288:	86 95       	lsr	r24
    528a:	86 95       	lsr	r24
    528c:	08 17       	cp	r16, r24
    528e:	10 f0       	brcs	.+4      	; 0x5294 <_ZN12SSD1306Ascii5clearEhhhh+0x2c>
    5290:	0f ef       	ldi	r16, 0xFF	; 255
    5292:	08 0f       	add	r16, r24
    5294:	1c 2d       	mov	r17, r12
    5296:	01 17       	cp	r16, r17
    5298:	88 f0       	brcs	.+34     	; 0x52bc <_ZN12SSD1306Ascii5clearEhhhh+0x54>
    529a:	41 2f       	mov	r20, r17
    529c:	6d 2d       	mov	r22, r13
    529e:	c7 01       	movw	r24, r14
    52a0:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <_ZN12SSD1306Ascii9setCursorEhh>
    52a4:	cd 2d       	mov	r28, r13
    52a6:	dc 17       	cp	r29, r28
    52a8:	38 f0       	brcs	.+14     	; 0x52b8 <_ZN12SSD1306Ascii5clearEhhhh+0x50>
    52aa:	f7 01       	movw	r30, r14
    52ac:	60 89       	ldd	r22, Z+16	; 0x10
    52ae:	c7 01       	movw	r24, r14
    52b0:	0e 94 15 29 	call	0x522a	; 0x522a <_ZN12SSD1306Ascii18ssd1306WriteRamBufEh>
    52b4:	cf 5f       	subi	r28, 0xFF	; 255
    52b6:	f7 cf       	rjmp	.-18     	; 0x52a6 <_ZN12SSD1306Ascii5clearEhhhh+0x3e>
    52b8:	1f 5f       	subi	r17, 0xFF	; 255
    52ba:	ed cf       	rjmp	.-38     	; 0x5296 <_ZN12SSD1306Ascii5clearEhhhh+0x2e>
    52bc:	4c 2d       	mov	r20, r12
    52be:	6d 2d       	mov	r22, r13
    52c0:	c7 01       	movw	r24, r14
    52c2:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <_ZN12SSD1306Ascii9setCursorEhh>
    52c6:	df 91       	pop	r29
    52c8:	cf 91       	pop	r28
    52ca:	1f 91       	pop	r17
    52cc:	0f 91       	pop	r16
    52ce:	ff 90       	pop	r15
    52d0:	ef 90       	pop	r14
    52d2:	df 90       	pop	r13
    52d4:	cf 90       	pop	r12
    52d6:	08 95       	ret

000052d8 <_ZN12SSD1306Ascii5clearEv>:
    52d8:	0f 93       	push	r16
    52da:	cf 93       	push	r28
    52dc:	df 93       	push	r29
    52de:	ec 01       	movw	r28, r24
    52e0:	1b 86       	std	Y+11, r1	; 0x0b
    52e2:	60 e0       	ldi	r22, 0x00	; 0
    52e4:	0e 94 07 29 	call	0x520e	; 0x520e <_ZN12SSD1306Ascii12setStartLineEh>
    52e8:	0f 81       	ldd	r16, Y+7	; 0x07
    52ea:	06 95       	lsr	r16
    52ec:	06 95       	lsr	r16
    52ee:	06 95       	lsr	r16
    52f0:	01 50       	subi	r16, 0x01	; 1
    52f2:	4e 81       	ldd	r20, Y+6	; 0x06
    52f4:	41 50       	subi	r20, 0x01	; 1
    52f6:	20 e0       	ldi	r18, 0x00	; 0
    52f8:	60 e0       	ldi	r22, 0x00	; 0
    52fa:	ce 01       	movw	r24, r28
    52fc:	0e 94 34 29 	call	0x5268	; 0x5268 <_ZN12SSD1306Ascii5clearEhhhh>
    5300:	df 91       	pop	r29
    5302:	cf 91       	pop	r28
    5304:	0f 91       	pop	r16
    5306:	08 95       	ret

00005308 <_ZN12SSD1306Ascii4initEPK7DevType>:
    5308:	ef 92       	push	r14
    530a:	ff 92       	push	r15
    530c:	0f 93       	push	r16
    530e:	1f 93       	push	r17
    5310:	cf 93       	push	r28
    5312:	df 93       	push	r29
    5314:	8c 01       	movw	r16, r24
    5316:	dc 01       	movw	r26, r24
    5318:	14 96       	adiw	r26, 0x04	; 4
    531a:	1c 92       	st	X, r1
    531c:	14 97       	sbiw	r26, 0x04	; 4
    531e:	15 96       	adiw	r26, 0x05	; 5
    5320:	1c 92       	st	X, r1
    5322:	15 97       	sbiw	r26, 0x05	; 5
    5324:	fb 01       	movw	r30, r22
    5326:	e5 90       	lpm	r14, Z+
    5328:	f4 90       	lpm	r15, Z
    532a:	fb 01       	movw	r30, r22
    532c:	32 96       	adiw	r30, 0x02	; 2
    532e:	d4 91       	lpm	r29, Z
    5330:	31 96       	adiw	r30, 0x01	; 1
    5332:	e4 91       	lpm	r30, Z
    5334:	16 96       	adiw	r26, 0x06	; 6
    5336:	ec 93       	st	X, r30
    5338:	16 97       	sbiw	r26, 0x06	; 6
    533a:	fb 01       	movw	r30, r22
    533c:	34 96       	adiw	r30, 0x04	; 4
    533e:	e4 91       	lpm	r30, Z
    5340:	17 96       	adiw	r26, 0x07	; 7
    5342:	ec 93       	st	X, r30
    5344:	fb 01       	movw	r30, r22
    5346:	35 96       	adiw	r30, 0x05	; 5
    5348:	64 91       	lpm	r22, Z
    534a:	fc 01       	movw	r30, r24
    534c:	60 87       	std	Z+8, r22	; 0x08
    534e:	c0 e0       	ldi	r28, 0x00	; 0
    5350:	cd 17       	cp	r28, r29
    5352:	80 f4       	brcc	.+32     	; 0x5374 <_ZN12SSD1306Ascii4initEPK7DevType+0x6c>
    5354:	f7 01       	movw	r30, r14
    5356:	ec 0f       	add	r30, r28
    5358:	f1 1d       	adc	r31, r1
    535a:	64 91       	lpm	r22, Z
    535c:	f8 01       	movw	r30, r16
    535e:	a0 81       	ld	r26, Z
    5360:	b1 81       	ldd	r27, Z+1	; 0x01
    5362:	18 96       	adiw	r26, 0x08	; 8
    5364:	ed 91       	ld	r30, X+
    5366:	fc 91       	ld	r31, X
    5368:	19 97       	sbiw	r26, 0x09	; 9
    536a:	40 e0       	ldi	r20, 0x00	; 0
    536c:	c8 01       	movw	r24, r16
    536e:	09 95       	icall
    5370:	cf 5f       	subi	r28, 0xFF	; 255
    5372:	ee cf       	rjmp	.-36     	; 0x5350 <_ZN12SSD1306Ascii4initEPK7DevType+0x48>
    5374:	c8 01       	movw	r24, r16
    5376:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <_ZN12SSD1306Ascii5clearEv>
    537a:	df 91       	pop	r29
    537c:	cf 91       	pop	r28
    537e:	1f 91       	pop	r17
    5380:	0f 91       	pop	r16
    5382:	ff 90       	pop	r15
    5384:	ef 90       	pop	r14
    5386:	08 95       	ret

00005388 <_ZN12SSD1306Ascii10clearToEOLEv>:
    5388:	0f 93       	push	r16
    538a:	cf 93       	push	r28
    538c:	df 93       	push	r29
    538e:	ec 01       	movw	r28, r24
    5390:	0d 81       	ldd	r16, Y+5	; 0x05
    5392:	0e 94 73 28 	call	0x50e6	; 0x50e6 <_ZNK12SSD1306Ascii8fontRowsEv>
    5396:	80 0f       	add	r24, r16
    5398:	0f ef       	ldi	r16, 0xFF	; 255
    539a:	08 0f       	add	r16, r24
    539c:	2d 81       	ldd	r18, Y+5	; 0x05
    539e:	4e 81       	ldd	r20, Y+6	; 0x06
    53a0:	41 50       	subi	r20, 0x01	; 1
    53a2:	6c 81       	ldd	r22, Y+4	; 0x04
    53a4:	ce 01       	movw	r24, r28
    53a6:	0e 94 34 29 	call	0x5268	; 0x5268 <_ZN12SSD1306Ascii5clearEhhhh>
    53aa:	df 91       	pop	r29
    53ac:	cf 91       	pop	r28
    53ae:	0f 91       	pop	r16
    53b0:	08 95       	ret

000053b2 <_ZN12SSD1306Ascii5writeEh>:
    }
  }
  return state->nQueue;
}
//------------------------------------------------------------------------------
size_t SSD1306Ascii::write(uint8_t ch) {
    53b2:	3f 92       	push	r3
    53b4:	4f 92       	push	r4
    53b6:	5f 92       	push	r5
    53b8:	6f 92       	push	r6
    53ba:	7f 92       	push	r7
    53bc:	8f 92       	push	r8
    53be:	9f 92       	push	r9
    53c0:	af 92       	push	r10
    53c2:	bf 92       	push	r11
    53c4:	cf 92       	push	r12
    53c6:	df 92       	push	r13
    53c8:	ef 92       	push	r14
    53ca:	ff 92       	push	r15
    53cc:	0f 93       	push	r16
    53ce:	1f 93       	push	r17
    53d0:	cf 93       	push	r28
    53d2:	df 93       	push	r29
  if (!m_font) {
    53d4:	fc 01       	movw	r30, r24
    53d6:	c6 84       	ldd	r12, Z+14	; 0x0e
    53d8:	d7 84       	ldd	r13, Z+15	; 0x0f
    53da:	c1 14       	cp	r12, r1
    53dc:	d1 04       	cpc	r13, r1
    53de:	09 f4       	brne	.+2      	; 0x53e2 <_ZN12SSD1306Ascii5writeEh+0x30>
    53e0:	18 c1       	rjmp	.+560    	; 0x5612 <_ZN12SSD1306Ascii5writeEh+0x260>
    return 0;
  }
  uint8_t w = readFontByte(m_font + FONT_WIDTH);
    53e2:	f6 01       	movw	r30, r12
    53e4:	32 96       	adiw	r30, 0x02	; 2
    53e6:	d4 91       	lpm	r29, Z
  uint8_t h = readFontByte(m_font + FONT_HEIGHT);
    53e8:	31 96       	adiw	r30, 0x01	; 1
    53ea:	f4 90       	lpm	r15, Z
  uint8_t nr = (h + 7)/8;
    53ec:	2f 2d       	mov	r18, r15
    53ee:	30 e0       	ldi	r19, 0x00	; 0
    53f0:	29 5f       	subi	r18, 0xF9	; 249
    53f2:	3f 4f       	sbci	r19, 0xFF	; 255
    53f4:	59 01       	movw	r10, r18
    53f6:	1a f4       	brpl	.+6      	; 0x53fe <_ZN12SSD1306Ascii5writeEh+0x4c>
    53f8:	f7 e0       	ldi	r31, 0x07	; 7
    53fa:	af 0e       	add	r10, r31
    53fc:	b1 1c       	adc	r11, r1
    53fe:	8c 01       	movw	r16, r24
    5400:	b5 94       	asr	r11
    5402:	a7 94       	ror	r10
    5404:	b5 94       	asr	r11
    5406:	a7 94       	ror	r10
    5408:	b5 94       	asr	r11
    540a:	a7 94       	ror	r10
    540c:	5a 2c       	mov	r5, r10
  uint8_t first = readFontByte(m_font + FONT_FIRST_CHAR);
    540e:	f6 01       	movw	r30, r12
    5410:	34 96       	adiw	r30, 0x04	; 4
    5412:	84 91       	lpm	r24, Z
  uint8_t count = readFontByte(m_font + FONT_CHAR_COUNT);
    5414:	31 96       	adiw	r30, 0x01	; 1
    5416:	e4 90       	lpm	r14, Z
  const uint8_t* base = m_font + FONT_WIDTH_TABLE;
    5418:	46 e0       	ldi	r20, 0x06	; 6
    541a:	c4 0e       	add	r12, r20
    541c:	d1 1c       	adc	r13, r1

  if (ch < first || ch >= (first + count)) {
    541e:	68 17       	cp	r22, r24
    5420:	50 f0       	brcs	.+20     	; 0x5436 <_ZN12SSD1306Ascii5writeEh+0x84>
    5422:	46 2f       	mov	r20, r22
    5424:	50 e0       	ldi	r21, 0x00	; 0
    5426:	2e 2d       	mov	r18, r14
    5428:	30 e0       	ldi	r19, 0x00	; 0
    542a:	28 0f       	add	r18, r24
    542c:	31 1d       	adc	r19, r1
    542e:	42 17       	cp	r20, r18
    5430:	53 07       	cpc	r21, r19
    5432:	0c f4       	brge	.+2      	; 0x5436 <_ZN12SSD1306Ascii5writeEh+0x84>
    5434:	43 c0       	rjmp	.+134    	; 0x54bc <_ZN12SSD1306Ascii5writeEh+0x10a>
    if (ch == '\r') {
    5436:	6d 30       	cpi	r22, 0x0D	; 13
    5438:	39 f4       	brne	.+14     	; 0x5448 <_ZN12SSD1306Ascii5writeEh+0x96>
      setCol(0);
    543a:	60 e0       	ldi	r22, 0x00	; 0
    543c:	c8 01       	movw	r24, r16
    543e:	0e 94 9c 28 	call	0x5138	; 0x5138 <_ZN12SSD1306Ascii6setColEh>
      return 1;
    5442:	81 e0       	ldi	r24, 0x01	; 1
    5444:	90 e0       	ldi	r25, 0x00	; 0
    5446:	ed c0       	rjmp	.+474    	; 0x5622 <_ZN12SSD1306Ascii5writeEh+0x270>
    }
    if (ch == '\n') {
    5448:	6a 30       	cpi	r22, 0x0A	; 10
    544a:	09 f0       	breq	.+2      	; 0x544e <_ZN12SSD1306Ascii5writeEh+0x9c>
    544c:	e5 c0       	rjmp	.+458    	; 0x5618 <_ZN12SSD1306Ascii5writeEh+0x266>
      setCol(0);
    544e:	60 e0       	ldi	r22, 0x00	; 0
    5450:	c8 01       	movw	r24, r16
    5452:	0e 94 9c 28 	call	0x5138	; 0x5138 <_ZN12SSD1306Ascii6setColEh>
      uint8_t fr = m_magFactor*nr;
    5456:	f8 01       	movw	r30, r16
    5458:	81 89       	ldd	r24, Z+17	; 0x11
    545a:	8a 9d       	mul	r24, r10
    545c:	a0 2c       	mov	r10, r0
    545e:	11 24       	eor	r1, r1
   */
  void displayRemap(bool mode);
  /**
   * @return The display height in rows with eight pixels to a row.
   */
  uint8_t displayRows() const {return m_displayHeight/8;}
    5460:	87 81       	ldd	r24, Z+7	; 0x07
    5462:	86 95       	lsr	r24
    5464:	86 95       	lsr	r24
    5466:	86 95       	lsr	r24
#if INCLUDE_SCROLLING
      uint8_t dr = displayRows();
      uint8_t tmpRow = m_row + fr;
    5468:	65 81       	ldd	r22, Z+5	; 0x05
    546a:	6a 0d       	add	r22, r10
      int8_t delta = tmpRow + fr - dr;
    546c:	9a 2d       	mov	r25, r10
    546e:	96 0f       	add	r25, r22
    5470:	29 2f       	mov	r18, r25
    5472:	28 1b       	sub	r18, r24
      if (m_scrollMode == SCROLL_MODE_OFF || delta <= 0) {
    5474:	34 85       	ldd	r19, Z+12	; 0x0c
    5476:	33 23       	and	r19, r19
    5478:	11 f0       	breq	.+4      	; 0x547e <_ZN12SSD1306Ascii5writeEh+0xcc>
    547a:	12 16       	cp	r1, r18
    547c:	34 f0       	brlt	.+12     	; 0x548a <_ZN12SSD1306Ascii5writeEh+0xd8>
        setRow(tmpRow);
    547e:	c8 01       	movw	r24, r16
    5480:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <_ZN12SSD1306Ascii6setRowEh>
        }
      }
#else  // INCLUDE_SCROLLING
      setRow(m_row + fr);
#endif  // INCLUDE_SCROLLING
      return 1;
    5484:	81 e0       	ldi	r24, 0x01	; 1
    5486:	90 e0       	ldi	r25, 0x00	; 0
#if INCLUDE_SCROLLING
      uint8_t dr = displayRows();
      uint8_t tmpRow = m_row + fr;
      int8_t delta = tmpRow + fr - dr;
      if (m_scrollMode == SCROLL_MODE_OFF || delta <= 0) {
        setRow(tmpRow);
    5488:	cc c0       	rjmp	.+408    	; 0x5622 <_ZN12SSD1306Ascii5writeEh+0x270>
      } else {
        m_pageOffset = (m_pageOffset + delta) & 7;
    548a:	f8 01       	movw	r30, r16
    548c:	93 85       	ldd	r25, Z+11	; 0x0b
    548e:	92 0f       	add	r25, r18
    5490:	97 70       	andi	r25, 0x07	; 7
    5492:	93 87       	std	Z+11, r25	; 0x0b
        m_row  = dr - fr;
    5494:	8a 19       	sub	r24, r10
    5496:	85 83       	std	Z+5, r24	; 0x05
        // Cursor will be positioned by clearToEOL.
        clearToEOL();
    5498:	c8 01       	movw	r24, r16
    549a:	0e 94 c4 29 	call	0x5388	; 0x5388 <_ZN12SSD1306Ascii10clearToEOLEv>
        if (m_scrollMode == SCROLL_MODE_AUTO) {
    549e:	f8 01       	movw	r30, r16
    54a0:	84 85       	ldd	r24, Z+12	; 0x0c
    54a2:	81 30       	cpi	r24, 0x01	; 1
    54a4:	09 f0       	breq	.+2      	; 0x54a8 <_ZN12SSD1306Ascii5writeEh+0xf6>
    54a6:	bb c0       	rjmp	.+374    	; 0x561e <_ZN12SSD1306Ascii5writeEh+0x26c>
          setStartLine(8*m_pageOffset);
    54a8:	63 85       	ldd	r22, Z+11	; 0x0b
    54aa:	66 0f       	add	r22, r22
    54ac:	66 0f       	add	r22, r22
    54ae:	66 0f       	add	r22, r22
    54b0:	c8 01       	movw	r24, r16
    54b2:	0e 94 07 29 	call	0x520e	; 0x520e <_ZN12SSD1306Ascii12setStartLineEh>
        }
      }
#else  // INCLUDE_SCROLLING
      setRow(m_row + fr);
#endif  // INCLUDE_SCROLLING
      return 1;
    54b6:	81 e0       	ldi	r24, 0x01	; 1
    54b8:	90 e0       	ldi	r25, 0x00	; 0
    54ba:	b3 c0       	rjmp	.+358    	; 0x5622 <_ZN12SSD1306Ascii5writeEh+0x270>
    }
    return 0;
  }
  ch -= first;
    54bc:	c6 2f       	mov	r28, r22
    54be:	c8 1b       	sub	r28, r24
   */
  void setInvertMode(bool mode) {m_invertMask = mode ? 0XFF : 0;}
  /**
   * @return letter-spacing in pixels with magnification factor.
   */
  uint8_t letterSpacing() const {return m_magFactor*m_letterSpacing;}
    54c0:	f8 01       	movw	r30, r16
    54c2:	91 88       	ldd	r9, Z+17	; 0x11
    54c4:	81 85       	ldd	r24, Z+9	; 0x09
    54c6:	98 9e       	mul	r9, r24
    54c8:	90 2c       	mov	r9, r0
    54ca:	11 24       	eor	r1, r1
  uint8_t s = letterSpacing();
  uint8_t thieleShift = 0;
  if (fontSize() < 2) {
    54cc:	c8 01       	movw	r24, r16
    54ce:	0e 94 8f 28 	call	0x511e	; 0x511e <_ZNK12SSD1306Ascii8fontSizeEv>
    54d2:	02 97       	sbiw	r24, 0x02	; 2
    54d4:	60 f4       	brcc	.+24     	; 0x54ee <_ZN12SSD1306Ascii5writeEh+0x13c>
    // Fixed width font.
    base += nr*w*ch;
    54d6:	ad 9e       	mul	r10, r29
    54d8:	90 01       	movw	r18, r0
    54da:	11 24       	eor	r1, r1
    54dc:	c2 9f       	mul	r28, r18
    54de:	c0 01       	movw	r24, r0
    54e0:	c3 9f       	mul	r28, r19
    54e2:	90 0d       	add	r25, r0
    54e4:	11 24       	eor	r1, r1
    54e6:	c8 0e       	add	r12, r24
    54e8:	d9 1e       	adc	r13, r25
    }
    return 0;
  }
  ch -= first;
  uint8_t s = letterSpacing();
  uint8_t thieleShift = 0;
    54ea:	f1 2c       	mov	r15, r1
    54ec:	22 c0       	rjmp	.+68     	; 0x5532 <_ZN12SSD1306Ascii5writeEh+0x180>
    54ee:	8f 2d       	mov	r24, r15
    54f0:	87 70       	andi	r24, 0x07	; 7
  if (fontSize() < 2) {
    // Fixed width font.
    base += nr*w*ch;
  } else {
    if (h & 7) {
    54f2:	21 f0       	breq	.+8      	; 0x54fc <_ZN12SSD1306Ascii5writeEh+0x14a>
      thieleShift = 8 - (h & 7);
    54f4:	98 e0       	ldi	r25, 0x08	; 8
    54f6:	f9 2e       	mov	r15, r25
    54f8:	f8 1a       	sub	r15, r24
    54fa:	01 c0       	rjmp	.+2      	; 0x54fe <_ZN12SSD1306Ascii5writeEh+0x14c>
    }
    return 0;
  }
  ch -= first;
  uint8_t s = letterSpacing();
  uint8_t thieleShift = 0;
    54fc:	f1 2c       	mov	r15, r1
  } else {
    if (h & 7) {
      thieleShift = 8 - (h & 7);
    }
    uint16_t index = 0;
    for (uint8_t i = 0; i < ch; i++) {
    54fe:	80 e0       	ldi	r24, 0x00	; 0
    base += nr*w*ch;
  } else {
    if (h & 7) {
      thieleShift = 8 - (h & 7);
    }
    uint16_t index = 0;
    5500:	20 e0       	ldi	r18, 0x00	; 0
    5502:	30 e0       	ldi	r19, 0x00	; 0
    for (uint8_t i = 0; i < ch; i++) {
    5504:	8c 17       	cp	r24, r28
    5506:	40 f4       	brcc	.+16     	; 0x5518 <_ZN12SSD1306Ascii5writeEh+0x166>
      index += readFontByte(base + i);
    5508:	f6 01       	movw	r30, r12
    550a:	e8 0f       	add	r30, r24
    550c:	f1 1d       	adc	r31, r1
    550e:	e4 91       	lpm	r30, Z
    5510:	2e 0f       	add	r18, r30
    5512:	31 1d       	adc	r19, r1
  } else {
    if (h & 7) {
      thieleShift = 8 - (h & 7);
    }
    uint16_t index = 0;
    for (uint8_t i = 0; i < ch; i++) {
    5514:	8f 5f       	subi	r24, 0xFF	; 255
    5516:	f6 cf       	rjmp	.-20     	; 0x5504 <_ZN12SSD1306Ascii5writeEh+0x152>
      index += readFontByte(base + i);
    }
    w = readFontByte(base + ch);
    5518:	f6 01       	movw	r30, r12
    551a:	ec 0f       	add	r30, r28
    551c:	f1 1d       	adc	r31, r1
    551e:	d4 91       	lpm	r29, Z
    base += nr*index + count;
    5520:	a2 9e       	mul	r10, r18
    5522:	c0 01       	movw	r24, r0
    5524:	a3 9e       	mul	r10, r19
    5526:	90 0d       	add	r25, r0
    5528:	11 24       	eor	r1, r1
    552a:	8e 0d       	add	r24, r14
    552c:	91 1d       	adc	r25, r1
    552e:	c8 0e       	add	r12, r24
    5530:	d9 1e       	adc	r13, r25
  }
  uint8_t scol = m_col;
    5532:	f8 01       	movw	r30, r16
    5534:	64 80       	ldd	r6, Z+4	; 0x04
  uint8_t srow = m_row;
    5536:	45 80       	ldd	r4, Z+5	; 0x05
  uint8_t skip = m_skip;
    5538:	75 84       	ldd	r7, Z+13	; 0x0d
  for (uint8_t r = 0; r < nr; r++) {
    553a:	e1 2c       	mov	r14, r1
    553c:	e5 14       	cp	r14, r5
    553e:	08 f0       	brcs	.+2      	; 0x5542 <_ZN12SSD1306Ascii5writeEh+0x190>
    5540:	61 c0       	rjmp	.+194    	; 0x5604 <_ZN12SSD1306Ascii5writeEh+0x252>
    5542:	81 2c       	mov	r8, r1
    for (uint8_t m = 0; m < m_magFactor; m++) {
    5544:	f8 01       	movw	r30, r16
    5546:	81 89       	ldd	r24, Z+17	; 0x11
    5548:	88 16       	cp	r8, r24
    554a:	08 f0       	brcs	.+2      	; 0x554e <_ZN12SSD1306Ascii5writeEh+0x19c>
    554c:	59 c0       	rjmp	.+178    	; 0x5600 <_ZN12SSD1306Ascii5writeEh+0x24e>
  /**
   * @brief Skip leading pixels writing characters to display display RAM.
   *
   * @param[in] n Number of pixels to skip.
   */
  void skipColumns(uint8_t n) {m_skip = n;}
    554e:	75 86       	std	Z+13, r7	; 0x0d
      skipColumns(skip);
      if (r || m) {
    5550:	e1 10       	cpse	r14, r1
    5552:	02 c0       	rjmp	.+4      	; 0x5558 <_ZN12SSD1306Ascii5writeEh+0x1a6>
    5554:	88 20       	and	r8, r8
    5556:	39 f0       	breq	.+14     	; 0x5566 <_ZN12SSD1306Ascii5writeEh+0x1b4>
        setCursor(scol, m_row + 1);
    5558:	f8 01       	movw	r30, r16
    555a:	45 81       	ldd	r20, Z+5	; 0x05
    555c:	4f 5f       	subi	r20, 0xFF	; 255
    555e:	66 2d       	mov	r22, r6
    5560:	c8 01       	movw	r24, r16
    5562:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <_ZN12SSD1306Ascii9setCursorEhh>
    5566:	c0 e0       	ldi	r28, 0x00	; 0
      }
      for (uint8_t c = 0; c < w; c++) {
    5568:	cd 17       	cp	r28, r29
    556a:	08 f0       	brcs	.+2      	; 0x556e <_ZN12SSD1306Ascii5writeEh+0x1bc>
    556c:	3e c0       	rjmp	.+124    	; 0x55ea <_ZN12SSD1306Ascii5writeEh+0x238>
        uint8_t b = readFontByte(base + c + r*w);
    556e:	8e 2d       	mov	r24, r14
    5570:	90 e0       	ldi	r25, 0x00	; 0
    5572:	d8 9f       	mul	r29, r24
    5574:	f0 01       	movw	r30, r0
    5576:	d9 9f       	mul	r29, r25
    5578:	f0 0d       	add	r31, r0
    557a:	11 24       	eor	r1, r1
    557c:	ec 0f       	add	r30, r28
    557e:	f1 1d       	adc	r31, r1
    5580:	ec 0d       	add	r30, r12
    5582:	fd 1d       	adc	r31, r13
    5584:	34 90       	lpm	r3, Z
        if (thieleShift && (r + 1) == nr) {
    5586:	ff 20       	and	r15, r15
    5588:	79 f0       	breq	.+30     	; 0x55a8 <_ZN12SSD1306Ascii5writeEh+0x1f6>
    558a:	01 96       	adiw	r24, 0x01	; 1
    558c:	95 01       	movw	r18, r10
    558e:	33 27       	eor	r19, r19
    5590:	28 17       	cp	r18, r24
    5592:	39 07       	cpc	r19, r25
    5594:	49 f4       	brne	.+18     	; 0x55a8 <_ZN12SSD1306Ascii5writeEh+0x1f6>
          b >>= thieleShift;
    5596:	e3 2d       	mov	r30, r3
    5598:	f0 e0       	ldi	r31, 0x00	; 0
    559a:	0f 2c       	mov	r0, r15
    559c:	02 c0       	rjmp	.+4      	; 0x55a2 <_ZN12SSD1306Ascii5writeEh+0x1f0>
    559e:	f5 95       	asr	r31
    55a0:	e7 95       	ror	r30
    55a2:	0a 94       	dec	r0
    55a4:	e2 f7       	brpl	.-8      	; 0x559e <_ZN12SSD1306Ascii5writeEh+0x1ec>
    55a6:	3e 2e       	mov	r3, r30
        }
        if (m_magFactor == 2) {
    55a8:	f8 01       	movw	r30, r16
    55aa:	81 89       	ldd	r24, Z+17	; 0x11
    55ac:	82 30       	cpi	r24, 0x02	; 2
    55ae:	b9 f4       	brne	.+46     	; 0x55de <_ZN12SSD1306Ascii5writeEh+0x22c>
           b = m ?  b >> 4 : b & 0XF;
    55b0:	88 20       	and	r8, r8
    55b2:	59 f0       	breq	.+22     	; 0x55ca <_ZN12SSD1306Ascii5writeEh+0x218>
    55b4:	e3 2d       	mov	r30, r3
    55b6:	f0 e0       	ldi	r31, 0x00	; 0
    55b8:	f5 95       	asr	r31
    55ba:	e7 95       	ror	r30
    55bc:	f5 95       	asr	r31
    55be:	e7 95       	ror	r30
    55c0:	f5 95       	asr	r31
    55c2:	e7 95       	ror	r30
    55c4:	f5 95       	asr	r31
    55c6:	e7 95       	ror	r30
    55c8:	02 c0       	rjmp	.+4      	; 0x55ce <_ZN12SSD1306Ascii5writeEh+0x21c>
    55ca:	e3 2d       	mov	r30, r3
    55cc:	ef 70       	andi	r30, 0x0F	; 15
           b = readFontByte(scaledNibble + b);
    55ce:	f0 e0       	ldi	r31, 0x00	; 0
    55d0:	ed 50       	subi	r30, 0x0D	; 13
    55d2:	f3 4f       	sbci	r31, 0xF3	; 243
    55d4:	34 90       	lpm	r3, Z
           ssd1306WriteRamBuf(b);
    55d6:	63 2d       	mov	r22, r3
    55d8:	c8 01       	movw	r24, r16
    55da:	0e 94 15 29 	call	0x522a	; 0x522a <_ZN12SSD1306Ascii18ssd1306WriteRamBufEh>
        }
        ssd1306WriteRamBuf(b);
    55de:	63 2d       	mov	r22, r3
    55e0:	c8 01       	movw	r24, r16
    55e2:	0e 94 15 29 	call	0x522a	; 0x522a <_ZN12SSD1306Ascii18ssd1306WriteRamBufEh>
    for (uint8_t m = 0; m < m_magFactor; m++) {
      skipColumns(skip);
      if (r || m) {
        setCursor(scol, m_row + 1);
      }
      for (uint8_t c = 0; c < w; c++) {
    55e6:	cf 5f       	subi	r28, 0xFF	; 255
    55e8:	bf cf       	rjmp	.-130    	; 0x5568 <_ZN12SSD1306Ascii5writeEh+0x1b6>
    55ea:	c0 e0       	ldi	r28, 0x00	; 0
           b = readFontByte(scaledNibble + b);
           ssd1306WriteRamBuf(b);
        }
        ssd1306WriteRamBuf(b);
      }
      for (uint8_t i = 0; i < s; i++) {
    55ec:	c9 15       	cp	r28, r9
    55ee:	30 f4       	brcc	.+12     	; 0x55fc <_ZN12SSD1306Ascii5writeEh+0x24a>
        ssd1306WriteRamBuf(0);
    55f0:	60 e0       	ldi	r22, 0x00	; 0
    55f2:	c8 01       	movw	r24, r16
    55f4:	0e 94 15 29 	call	0x522a	; 0x522a <_ZN12SSD1306Ascii18ssd1306WriteRamBufEh>
           b = readFontByte(scaledNibble + b);
           ssd1306WriteRamBuf(b);
        }
        ssd1306WriteRamBuf(b);
      }
      for (uint8_t i = 0; i < s; i++) {
    55f8:	cf 5f       	subi	r28, 0xFF	; 255
    55fa:	f8 cf       	rjmp	.-16     	; 0x55ec <_ZN12SSD1306Ascii5writeEh+0x23a>
  }
  uint8_t scol = m_col;
  uint8_t srow = m_row;
  uint8_t skip = m_skip;
  for (uint8_t r = 0; r < nr; r++) {
    for (uint8_t m = 0; m < m_magFactor; m++) {
    55fc:	83 94       	inc	r8
    55fe:	a2 cf       	rjmp	.-188    	; 0x5544 <_ZN12SSD1306Ascii5writeEh+0x192>
    base += nr*index + count;
  }
  uint8_t scol = m_col;
  uint8_t srow = m_row;
  uint8_t skip = m_skip;
  for (uint8_t r = 0; r < nr; r++) {
    5600:	e3 94       	inc	r14
    5602:	9c cf       	rjmp	.-200    	; 0x553c <_ZN12SSD1306Ascii5writeEh+0x18a>
      for (uint8_t i = 0; i < s; i++) {
        ssd1306WriteRamBuf(0);
      }
    }
  }
  setRow(srow);
    5604:	64 2d       	mov	r22, r4
    5606:	c8 01       	movw	r24, r16
    5608:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <_ZN12SSD1306Ascii6setRowEh>
  return 1;
    560c:	81 e0       	ldi	r24, 0x01	; 1
    560e:	90 e0       	ldi	r25, 0x00	; 0
    5610:	08 c0       	rjmp	.+16     	; 0x5622 <_ZN12SSD1306Ascii5writeEh+0x270>
  return state->nQueue;
}
//------------------------------------------------------------------------------
size_t SSD1306Ascii::write(uint8_t ch) {
  if (!m_font) {
    return 0;
    5612:	80 e0       	ldi	r24, 0x00	; 0
    5614:	90 e0       	ldi	r25, 0x00	; 0
    5616:	05 c0       	rjmp	.+10     	; 0x5622 <_ZN12SSD1306Ascii5writeEh+0x270>
#else  // INCLUDE_SCROLLING
      setRow(m_row + fr);
#endif  // INCLUDE_SCROLLING
      return 1;
    }
    return 0;
    5618:	80 e0       	ldi	r24, 0x00	; 0
    561a:	90 e0       	ldi	r25, 0x00	; 0
    561c:	02 c0       	rjmp	.+4      	; 0x5622 <_ZN12SSD1306Ascii5writeEh+0x270>
        }
      }
#else  // INCLUDE_SCROLLING
      setRow(m_row + fr);
#endif  // INCLUDE_SCROLLING
      return 1;
    561e:	81 e0       	ldi	r24, 0x01	; 1
    5620:	90 e0       	ldi	r25, 0x00	; 0
      }
    }
  }
  setRow(srow);
  return 1;
}
    5622:	df 91       	pop	r29
    5624:	cf 91       	pop	r28
    5626:	1f 91       	pop	r17
    5628:	0f 91       	pop	r16
    562a:	ff 90       	pop	r15
    562c:	ef 90       	pop	r14
    562e:	df 90       	pop	r13
    5630:	cf 90       	pop	r12
    5632:	bf 90       	pop	r11
    5634:	af 90       	pop	r10
    5636:	9f 90       	pop	r9
    5638:	8f 90       	pop	r8
    563a:	7f 90       	pop	r7
    563c:	6f 90       	pop	r6
    563e:	5f 90       	pop	r5
    5640:	4f 90       	pop	r4
    5642:	3f 90       	pop	r3
    5644:	08 95       	ret

00005646 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    5646:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <twi_state>
    564a:	81 e0       	ldi	r24, 0x01	; 1
    564c:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <twi_sendStop>
    5650:	10 92 79 05 	sts	0x0579, r1	; 0x800579 <twi_inRepStart>
    5654:	61 e0       	ldi	r22, 0x01	; 1
    5656:	82 e1       	ldi	r24, 0x12	; 18
    5658:	0e 94 ef 07 	call	0xfde	; 0xfde <digitalWrite>
    565c:	61 e0       	ldi	r22, 0x01	; 1
    565e:	83 e1       	ldi	r24, 0x13	; 19
    5660:	0e 94 ef 07 	call	0xfde	; 0xfde <digitalWrite>
    5664:	e9 eb       	ldi	r30, 0xB9	; 185
    5666:	f0 e0       	ldi	r31, 0x00	; 0
    5668:	80 81       	ld	r24, Z
    566a:	8e 7f       	andi	r24, 0xFE	; 254
    566c:	80 83       	st	Z, r24
    566e:	80 81       	ld	r24, Z
    5670:	8d 7f       	andi	r24, 0xFD	; 253
    5672:	80 83       	st	Z, r24
    5674:	88 e4       	ldi	r24, 0x48	; 72
    5676:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    567a:	85 e4       	ldi	r24, 0x45	; 69
    567c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5680:	08 95       	ret

00005682 <twi_disable>:
    5682:	ec eb       	ldi	r30, 0xBC	; 188
    5684:	f0 e0       	ldi	r31, 0x00	; 0
    5686:	80 81       	ld	r24, Z
    5688:	8a 7b       	andi	r24, 0xBA	; 186
    568a:	80 83       	st	Z, r24
    568c:	60 e0       	ldi	r22, 0x00	; 0
    568e:	82 e1       	ldi	r24, 0x12	; 18
    5690:	0e 94 ef 07 	call	0xfde	; 0xfde <digitalWrite>
    5694:	60 e0       	ldi	r22, 0x00	; 0
    5696:	83 e1       	ldi	r24, 0x13	; 19
    5698:	0e 94 ef 07 	call	0xfde	; 0xfde <digitalWrite>
    569c:	08 95       	ret

0000569e <twi_transmit>:
    569e:	ac 01       	movw	r20, r24
    56a0:	90 91 2b 05 	lds	r25, 0x052B	; 0x80052b <twi_txBufferLength>
    56a4:	26 2f       	mov	r18, r22
    56a6:	30 e0       	ldi	r19, 0x00	; 0
    56a8:	29 0f       	add	r18, r25
    56aa:	31 1d       	adc	r19, r1
    56ac:	21 32       	cpi	r18, 0x21	; 33
    56ae:	31 05       	cpc	r19, r1
    56b0:	f4 f4       	brge	.+60     	; 0x56ee <twi_transmit+0x50>
    56b2:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <twi_state>
    56b6:	84 30       	cpi	r24, 0x04	; 4
    56b8:	e1 f4       	brne	.+56     	; 0x56f2 <twi_transmit+0x54>
    56ba:	90 e0       	ldi	r25, 0x00	; 0
    56bc:	0f c0       	rjmp	.+30     	; 0x56dc <twi_transmit+0x3e>
    56be:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <twi_txBufferLength>
    56c2:	29 2f       	mov	r18, r25
    56c4:	30 e0       	ldi	r19, 0x00	; 0
    56c6:	f9 01       	movw	r30, r18
    56c8:	e8 0f       	add	r30, r24
    56ca:	f1 1d       	adc	r31, r1
    56cc:	da 01       	movw	r26, r20
    56ce:	a2 0f       	add	r26, r18
    56d0:	b3 1f       	adc	r27, r19
    56d2:	8c 91       	ld	r24, X
    56d4:	e3 5d       	subi	r30, 0xD3	; 211
    56d6:	fa 4f       	sbci	r31, 0xFA	; 250
    56d8:	80 83       	st	Z, r24
    56da:	9f 5f       	subi	r25, 0xFF	; 255
    56dc:	96 17       	cp	r25, r22
    56de:	78 f3       	brcs	.-34     	; 0x56be <twi_transmit+0x20>
    56e0:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <twi_txBufferLength>
    56e4:	68 0f       	add	r22, r24
    56e6:	60 93 2b 05 	sts	0x052B, r22	; 0x80052b <twi_txBufferLength>
    56ea:	80 e0       	ldi	r24, 0x00	; 0
    56ec:	08 95       	ret
    56ee:	81 e0       	ldi	r24, 0x01	; 1
    56f0:	08 95       	ret
    56f2:	82 e0       	ldi	r24, 0x02	; 2
    56f4:	08 95       	ret

000056f6 <twi_reply>:
    56f6:	88 23       	and	r24, r24
    56f8:	21 f0       	breq	.+8      	; 0x5702 <twi_reply+0xc>
    56fa:	85 ec       	ldi	r24, 0xC5	; 197
    56fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5700:	08 95       	ret
    5702:	85 e8       	ldi	r24, 0x85	; 133
    5704:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5708:	08 95       	ret

0000570a <twi_releaseBus>:
    570a:	85 ec       	ldi	r24, 0xC5	; 197
    570c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5710:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <twi_state>
    5714:	08 95       	ret

00005716 <twi_handleTimeout>:
    5716:	ef 92       	push	r14
    5718:	ff 92       	push	r15
    571a:	0f 93       	push	r16
    571c:	1f 93       	push	r17
    571e:	cf 93       	push	r28
    5720:	df 93       	push	r29
    5722:	91 e0       	ldi	r25, 0x01	; 1
    5724:	90 93 74 05 	sts	0x0574, r25	; 0x800574 <twi_timed_out_flag>
    5728:	88 23       	and	r24, r24
    572a:	71 f0       	breq	.+28     	; 0x5748 <twi_handleTimeout+0x32>
    572c:	c8 eb       	ldi	r28, 0xB8	; 184
    572e:	d0 e0       	ldi	r29, 0x00	; 0
    5730:	f8 80       	ld	r15, Y
    5732:	0a eb       	ldi	r16, 0xBA	; 186
    5734:	10 e0       	ldi	r17, 0x00	; 0
    5736:	f8 01       	movw	r30, r16
    5738:	e0 80       	ld	r14, Z
    573a:	0e 94 41 2b 	call	0x5682	; 0x5682 <twi_disable>
    573e:	0e 94 23 2b 	call	0x5646	; 0x5646 <twi_init>
    5742:	f8 01       	movw	r30, r16
    5744:	e0 82       	st	Z, r14
    5746:	f8 82       	st	Y, r15
    5748:	df 91       	pop	r29
    574a:	cf 91       	pop	r28
    574c:	1f 91       	pop	r17
    574e:	0f 91       	pop	r16
    5750:	ff 90       	pop	r15
    5752:	ef 90       	pop	r14
    5754:	08 95       	ret

00005756 <twi_stop>:
    5756:	85 ed       	ldi	r24, 0xD5	; 213
    5758:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    575c:	40 91 75 05 	lds	r20, 0x0575	; 0x800575 <twi_timeout_us>
    5760:	50 91 76 05 	lds	r21, 0x0576	; 0x800576 <twi_timeout_us+0x1>
    5764:	60 91 77 05 	lds	r22, 0x0577	; 0x800577 <twi_timeout_us+0x2>
    5768:	70 91 78 05 	lds	r23, 0x0578	; 0x800578 <twi_timeout_us+0x3>
    576c:	49 5f       	subi	r20, 0xF9	; 249
    576e:	5f 4f       	sbci	r21, 0xFF	; 255
    5770:	6f 4f       	sbci	r22, 0xFF	; 255
    5772:	7f 4f       	sbci	r23, 0xFF	; 255
    5774:	68 94       	set
    5776:	12 f8       	bld	r1, 2
    5778:	76 95       	lsr	r23
    577a:	67 95       	ror	r22
    577c:	57 95       	ror	r21
    577e:	47 95       	ror	r20
    5780:	16 94       	lsr	r1
    5782:	d1 f7       	brne	.-12     	; 0x5778 <twi_stop+0x22>
    5784:	1f c0       	rjmp	.+62     	; 0x57c4 <twi_stop+0x6e>
    5786:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <twi_timeout_us>
    578a:	90 91 76 05 	lds	r25, 0x0576	; 0x800576 <twi_timeout_us+0x1>
    578e:	a0 91 77 05 	lds	r26, 0x0577	; 0x800577 <twi_timeout_us+0x2>
    5792:	b0 91 78 05 	lds	r27, 0x0578	; 0x800578 <twi_timeout_us+0x3>
    5796:	89 2b       	or	r24, r25
    5798:	8a 2b       	or	r24, r26
    579a:	8b 2b       	or	r24, r27
    579c:	99 f0       	breq	.+38     	; 0x57c4 <twi_stop+0x6e>
    579e:	41 15       	cp	r20, r1
    57a0:	51 05       	cpc	r21, r1
    57a2:	61 05       	cpc	r22, r1
    57a4:	71 05       	cpc	r23, r1
    57a6:	49 f0       	breq	.+18     	; 0x57ba <twi_stop+0x64>
    57a8:	85 e3       	ldi	r24, 0x35	; 53
    57aa:	8a 95       	dec	r24
    57ac:	f1 f7       	brne	.-4      	; 0x57aa <twi_stop+0x54>
    57ae:	00 00       	nop
    57b0:	41 50       	subi	r20, 0x01	; 1
    57b2:	51 09       	sbc	r21, r1
    57b4:	61 09       	sbc	r22, r1
    57b6:	71 09       	sbc	r23, r1
    57b8:	05 c0       	rjmp	.+10     	; 0x57c4 <twi_stop+0x6e>
    57ba:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <twi_do_reset_on_timeout>
    57be:	0e 94 8b 2b 	call	0x5716	; 0x5716 <twi_handleTimeout>
    57c2:	08 95       	ret
    57c4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    57c8:	84 fd       	sbrc	r24, 4
    57ca:	dd cf       	rjmp	.-70     	; 0x5786 <twi_stop+0x30>
    57cc:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <twi_state>
    57d0:	08 95       	ret

000057d2 <__vector_24>:

ISR(TWI_vect)
{
    57d2:	1f 92       	push	r1
    57d4:	0f 92       	push	r0
    57d6:	0f b6       	in	r0, 0x3f	; 63
    57d8:	0f 92       	push	r0
    57da:	11 24       	eor	r1, r1
    57dc:	2f 93       	push	r18
    57de:	3f 93       	push	r19
    57e0:	4f 93       	push	r20
    57e2:	5f 93       	push	r21
    57e4:	6f 93       	push	r22
    57e6:	7f 93       	push	r23
    57e8:	8f 93       	push	r24
    57ea:	9f 93       	push	r25
    57ec:	af 93       	push	r26
    57ee:	bf 93       	push	r27
    57f0:	ef 93       	push	r30
    57f2:	ff 93       	push	r31
  switch(TW_STATUS){
    57f4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    57f8:	e8 2f       	mov	r30, r24
    57fa:	e8 7f       	andi	r30, 0xF8	; 248
    57fc:	8e 2f       	mov	r24, r30
    57fe:	90 e0       	ldi	r25, 0x00	; 0
    5800:	89 3c       	cpi	r24, 0xC9	; 201
    5802:	91 05       	cpc	r25, r1
    5804:	08 f0       	brcs	.+2      	; 0x5808 <__vector_24+0x36>
    5806:	f5 c0       	rjmp	.+490    	; 0x59f2 <__vector_24+0x220>
    5808:	fc 01       	movw	r30, r24
    580a:	ec 5c       	subi	r30, 0xCC	; 204
    580c:	ff 4f       	sbci	r31, 0xFF	; 255
    580e:	0c 94 d5 2f 	jmp	0x5faa	; 0x5faa <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    5812:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <twi_slarw>
    5816:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      twi_reply(1);
    581a:	81 e0       	ldi	r24, 0x01	; 1
    581c:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <twi_reply>
      break;
    5820:	e8 c0       	rjmp	.+464    	; 0x59f2 <__vector_24+0x220>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5822:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <twi_masterBufferIndex>
    5826:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <twi_masterBufferLength>
    582a:	98 17       	cp	r25, r24
    582c:	80 f4       	brcc	.+32     	; 0x584e <__vector_24+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    582e:	e0 91 4e 05 	lds	r30, 0x054E	; 0x80054e <twi_masterBufferIndex>
    5832:	81 e0       	ldi	r24, 0x01	; 1
    5834:	8e 0f       	add	r24, r30
    5836:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <twi_masterBufferIndex>
    583a:	f0 e0       	ldi	r31, 0x00	; 0
    583c:	e1 5b       	subi	r30, 0xB1	; 177
    583e:	fa 4f       	sbci	r31, 0xFA	; 250
    5840:	80 81       	ld	r24, Z
    5842:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
        twi_reply(1);
    5846:	81 e0       	ldi	r24, 0x01	; 1
    5848:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <twi_reply>
    584c:	d2 c0       	rjmp	.+420    	; 0x59f2 <__vector_24+0x220>
      }else{
        if (twi_sendStop){
    584e:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <twi_sendStop>
    5852:	88 23       	and	r24, r24
    5854:	19 f0       	breq	.+6      	; 0x585c <__vector_24+0x8a>
          twi_stop();
    5856:	0e 94 ab 2b 	call	0x5756	; 0x5756 <twi_stop>
    585a:	cb c0       	rjmp	.+406    	; 0x59f2 <__vector_24+0x220>
       } else {
         twi_inRepStart = true;	// we're gonna send the START
    585c:	81 e0       	ldi	r24, 0x01	; 1
    585e:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <twi_inRepStart>
         // don't enable the interrupt. We'll generate the start, but we
         // avoid handling the interrupt until we're in the next transaction,
         // at the point where we would normally issue the start.
         TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    5862:	84 ea       	ldi	r24, 0xA4	; 164
    5864:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
         twi_state = TWI_READY;
    5868:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <twi_state>
    586c:	c2 c0       	rjmp	.+388    	; 0x59f2 <__vector_24+0x220>
        }
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    586e:	80 e2       	ldi	r24, 0x20	; 32
    5870:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <twi_error>
      twi_stop();
    5874:	0e 94 ab 2b 	call	0x5756	; 0x5756 <twi_stop>
      break;
    5878:	bc c0       	rjmp	.+376    	; 0x59f2 <__vector_24+0x220>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    587a:	80 e3       	ldi	r24, 0x30	; 48
    587c:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <twi_error>
      twi_stop();
    5880:	0e 94 ab 2b 	call	0x5756	; 0x5756 <twi_stop>
      break;
    5884:	b6 c0       	rjmp	.+364    	; 0x59f2 <__vector_24+0x220>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    5886:	88 e3       	ldi	r24, 0x38	; 56
    5888:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <twi_error>
      twi_releaseBus();
    588c:	0e 94 85 2b 	call	0x570a	; 0x570a <twi_releaseBus>
      break;
    5890:	b0 c0       	rjmp	.+352    	; 0x59f2 <__vector_24+0x220>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5892:	e0 91 4e 05 	lds	r30, 0x054E	; 0x80054e <twi_masterBufferIndex>
    5896:	81 e0       	ldi	r24, 0x01	; 1
    5898:	8e 0f       	add	r24, r30
    589a:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <twi_masterBufferIndex>
    589e:	f0 e0       	ldi	r31, 0x00	; 0
    58a0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    58a4:	e1 5b       	subi	r30, 0xB1	; 177
    58a6:	fa 4f       	sbci	r31, 0xFA	; 250
    58a8:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    58aa:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <twi_masterBufferIndex>
    58ae:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <twi_masterBufferLength>
    58b2:	98 17       	cp	r25, r24
    58b4:	20 f4       	brcc	.+8      	; 0x58be <__vector_24+0xec>
        twi_reply(1);
    58b6:	81 e0       	ldi	r24, 0x01	; 1
    58b8:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <twi_reply>
    58bc:	9a c0       	rjmp	.+308    	; 0x59f2 <__vector_24+0x220>
      }else{
        twi_reply(0);
    58be:	80 e0       	ldi	r24, 0x00	; 0
    58c0:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <twi_reply>
    58c4:	96 c0       	rjmp	.+300    	; 0x59f2 <__vector_24+0x220>
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    58c6:	e0 91 4e 05 	lds	r30, 0x054E	; 0x80054e <twi_masterBufferIndex>
    58ca:	81 e0       	ldi	r24, 0x01	; 1
    58cc:	8e 0f       	add	r24, r30
    58ce:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <twi_masterBufferIndex>
    58d2:	f0 e0       	ldi	r31, 0x00	; 0
    58d4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    58d8:	e1 5b       	subi	r30, 0xB1	; 177
    58da:	fa 4f       	sbci	r31, 0xFA	; 250
    58dc:	80 83       	st	Z, r24
      if (twi_sendStop){
    58de:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <twi_sendStop>
    58e2:	88 23       	and	r24, r24
    58e4:	19 f0       	breq	.+6      	; 0x58ec <__vector_24+0x11a>
        twi_stop();
    58e6:	0e 94 ab 2b 	call	0x5756	; 0x5756 <twi_stop>
    58ea:	83 c0       	rjmp	.+262    	; 0x59f2 <__vector_24+0x220>
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    58ec:	81 e0       	ldi	r24, 0x01	; 1
    58ee:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    58f2:	84 ea       	ldi	r24, 0xA4	; 164
    58f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
        twi_state = TWI_READY;
    58f8:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <twi_state>
    58fc:	7a c0       	rjmp	.+244    	; 0x59f2 <__vector_24+0x220>
      }
      break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    58fe:	0e 94 ab 2b 	call	0x5756	; 0x5756 <twi_stop>
      break;
    5902:	77 c0       	rjmp	.+238    	; 0x59f2 <__vector_24+0x220>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    5904:	83 e0       	ldi	r24, 0x03	; 3
    5906:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    590a:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <twi_rxBufferIndex>
      twi_reply(1);
    590e:	81 e0       	ldi	r24, 0x01	; 1
    5910:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <twi_reply>
      break;
    5914:	6e c0       	rjmp	.+220    	; 0x59f2 <__vector_24+0x220>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    5916:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <twi_rxBufferIndex>
    591a:	80 32       	cpi	r24, 0x20	; 32
    591c:	80 f4       	brcc	.+32     	; 0x593e <__vector_24+0x16c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    591e:	e0 91 0a 05 	lds	r30, 0x050A	; 0x80050a <twi_rxBufferIndex>
    5922:	81 e0       	ldi	r24, 0x01	; 1
    5924:	8e 0f       	add	r24, r30
    5926:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <twi_rxBufferIndex>
    592a:	f0 e0       	ldi	r31, 0x00	; 0
    592c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    5930:	e5 5f       	subi	r30, 0xF5	; 245
    5932:	fa 4f       	sbci	r31, 0xFA	; 250
    5934:	80 83       	st	Z, r24
        twi_reply(1);
    5936:	81 e0       	ldi	r24, 0x01	; 1
    5938:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <twi_reply>
    593c:	5a c0       	rjmp	.+180    	; 0x59f2 <__vector_24+0x220>
      }else{
        // otherwise nack
        twi_reply(0);
    593e:	80 e0       	ldi	r24, 0x00	; 0
    5940:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <twi_reply>
    5944:	56 c0       	rjmp	.+172    	; 0x59f2 <__vector_24+0x220>
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    5946:	0e 94 85 2b 	call	0x570a	; 0x570a <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    594a:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <twi_rxBufferIndex>
    594e:	80 32       	cpi	r24, 0x20	; 32
    5950:	30 f4       	brcc	.+12     	; 0x595e <__vector_24+0x18c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    5952:	e0 91 0a 05 	lds	r30, 0x050A	; 0x80050a <twi_rxBufferIndex>
    5956:	f0 e0       	ldi	r31, 0x00	; 0
    5958:	e5 5f       	subi	r30, 0xF5	; 245
    595a:	fa 4f       	sbci	r31, 0xFA	; 250
    595c:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    595e:	60 91 0a 05 	lds	r22, 0x050A	; 0x80050a <twi_rxBufferIndex>
    5962:	70 e0       	ldi	r23, 0x00	; 0
    5964:	e0 91 6f 05 	lds	r30, 0x056F	; 0x80056f <twi_onSlaveReceive>
    5968:	f0 91 70 05 	lds	r31, 0x0570	; 0x800570 <twi_onSlaveReceive+0x1>
    596c:	8b e0       	ldi	r24, 0x0B	; 11
    596e:	95 e0       	ldi	r25, 0x05	; 5
    5970:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    5972:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <twi_rxBufferIndex>
      break;
    5976:	3d c0       	rjmp	.+122    	; 0x59f2 <__vector_24+0x220>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
    5978:	80 e0       	ldi	r24, 0x00	; 0
    597a:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <twi_reply>
      break;
    597e:	39 c0       	rjmp	.+114    	; 0x59f2 <__vector_24+0x220>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    5980:	84 e0       	ldi	r24, 0x04	; 4
    5982:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    5986:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    598a:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    598e:	e0 91 71 05 	lds	r30, 0x0571	; 0x800571 <twi_onSlaveTransmit>
    5992:	f0 91 72 05 	lds	r31, 0x0572	; 0x800572 <twi_onSlaveTransmit+0x1>
    5996:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    5998:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <twi_txBufferLength>
    599c:	81 11       	cpse	r24, r1
    599e:	05 c0       	rjmp	.+10     	; 0x59aa <__vector_24+0x1d8>
        twi_txBufferLength = 1;
    59a0:	81 e0       	ldi	r24, 0x01	; 1
    59a2:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    59a6:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    59aa:	e0 91 2c 05 	lds	r30, 0x052C	; 0x80052c <twi_txBufferIndex>
    59ae:	81 e0       	ldi	r24, 0x01	; 1
    59b0:	8e 0f       	add	r24, r30
    59b2:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <twi_txBufferIndex>
    59b6:	f0 e0       	ldi	r31, 0x00	; 0
    59b8:	e3 5d       	subi	r30, 0xD3	; 211
    59ba:	fa 4f       	sbci	r31, 0xFA	; 250
    59bc:	80 81       	ld	r24, Z
    59be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    59c2:	90 91 2c 05 	lds	r25, 0x052C	; 0x80052c <twi_txBufferIndex>
    59c6:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <twi_txBufferLength>
    59ca:	98 17       	cp	r25, r24
    59cc:	20 f4       	brcc	.+8      	; 0x59d6 <__vector_24+0x204>
        twi_reply(1);
    59ce:	81 e0       	ldi	r24, 0x01	; 1
    59d0:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <twi_reply>
    59d4:	0e c0       	rjmp	.+28     	; 0x59f2 <__vector_24+0x220>
      }else{
        twi_reply(0);
    59d6:	80 e0       	ldi	r24, 0x00	; 0
    59d8:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <twi_reply>
    59dc:	0a c0       	rjmp	.+20     	; 0x59f2 <__vector_24+0x220>
      }
      break;
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
    59de:	81 e0       	ldi	r24, 0x01	; 1
    59e0:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
    59e4:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <twi_state>
      break;
    59e8:	04 c0       	rjmp	.+8      	; 0x59f2 <__vector_24+0x220>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    59ea:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <twi_error>
      twi_stop();
    59ee:	0e 94 ab 2b 	call	0x5756	; 0x5756 <twi_stop>
      break;
  }
}
    59f2:	ff 91       	pop	r31
    59f4:	ef 91       	pop	r30
    59f6:	bf 91       	pop	r27
    59f8:	af 91       	pop	r26
    59fa:	9f 91       	pop	r25
    59fc:	8f 91       	pop	r24
    59fe:	7f 91       	pop	r23
    5a00:	6f 91       	pop	r22
    5a02:	5f 91       	pop	r21
    5a04:	4f 91       	pop	r20
    5a06:	3f 91       	pop	r19
    5a08:	2f 91       	pop	r18
    5a0a:	0f 90       	pop	r0
    5a0c:	0f be       	out	0x3f, r0	; 63
    5a0e:	0f 90       	pop	r0
    5a10:	1f 90       	pop	r1
    5a12:	18 95       	reti

00005a14 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    5a14:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <_ZN7TwoWire14rxBufferLengthE>
    5a18:	90 e0       	ldi	r25, 0x00	; 0
    5a1a:	20 91 ad 05 	lds	r18, 0x05AD	; 0x8005ad <_ZN7TwoWire13rxBufferIndexE>
    5a1e:	82 1b       	sub	r24, r18
    5a20:	91 09       	sbc	r25, r1
    5a22:	08 95       	ret

00005a24 <_ZN7TwoWire4readEv>:
    5a24:	90 91 ad 05 	lds	r25, 0x05AD	; 0x8005ad <_ZN7TwoWire13rxBufferIndexE>
    5a28:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <_ZN7TwoWire14rxBufferLengthE>
    5a2c:	98 17       	cp	r25, r24
    5a2e:	50 f4       	brcc	.+20     	; 0x5a44 <_ZN7TwoWire4readEv+0x20>
    5a30:	e9 2f       	mov	r30, r25
    5a32:	f0 e0       	ldi	r31, 0x00	; 0
    5a34:	e2 55       	subi	r30, 0x52	; 82
    5a36:	fa 4f       	sbci	r31, 0xFA	; 250
    5a38:	20 81       	ld	r18, Z
    5a3a:	30 e0       	ldi	r19, 0x00	; 0
    5a3c:	9f 5f       	subi	r25, 0xFF	; 255
    5a3e:	90 93 ad 05 	sts	0x05AD, r25	; 0x8005ad <_ZN7TwoWire13rxBufferIndexE>
    5a42:	02 c0       	rjmp	.+4      	; 0x5a48 <_ZN7TwoWire4readEv+0x24>
    5a44:	2f ef       	ldi	r18, 0xFF	; 255
    5a46:	3f ef       	ldi	r19, 0xFF	; 255
    5a48:	c9 01       	movw	r24, r18
    5a4a:	08 95       	ret

00005a4c <_ZN7TwoWire4peekEv>:
    5a4c:	e0 91 ad 05 	lds	r30, 0x05AD	; 0x8005ad <_ZN7TwoWire13rxBufferIndexE>
    5a50:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <_ZN7TwoWire14rxBufferLengthE>
    5a54:	e8 17       	cp	r30, r24
    5a56:	30 f4       	brcc	.+12     	; 0x5a64 <_ZN7TwoWire4peekEv+0x18>
    5a58:	f0 e0       	ldi	r31, 0x00	; 0
    5a5a:	e2 55       	subi	r30, 0x52	; 82
    5a5c:	fa 4f       	sbci	r31, 0xFA	; 250
    5a5e:	80 81       	ld	r24, Z
    5a60:	90 e0       	ldi	r25, 0x00	; 0
    5a62:	08 95       	ret
    5a64:	8f ef       	ldi	r24, 0xFF	; 255
    5a66:	9f ef       	ldi	r25, 0xFF	; 255
    5a68:	08 95       	ret

00005a6a <_ZN7TwoWire5flushEv>:
    5a6a:	08 95       	ret

00005a6c <_ZN7TwoWire5writeEPKhj>:
    5a6c:	cf 92       	push	r12
    5a6e:	df 92       	push	r13
    5a70:	ef 92       	push	r14
    5a72:	ff 92       	push	r15
    5a74:	0f 93       	push	r16
    5a76:	1f 93       	push	r17
    5a78:	cf 93       	push	r28
    5a7a:	df 93       	push	r29
    5a7c:	8c 01       	movw	r16, r24
    5a7e:	6b 01       	movw	r12, r22
    5a80:	7a 01       	movw	r14, r20
    5a82:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <_ZN7TwoWire12transmittingE>
    5a86:	88 23       	and	r24, r24
    5a88:	99 f0       	breq	.+38     	; 0x5ab0 <_ZN7TwoWire5writeEPKhj+0x44>
    5a8a:	c0 e0       	ldi	r28, 0x00	; 0
    5a8c:	d0 e0       	ldi	r29, 0x00	; 0
    5a8e:	ce 15       	cp	r28, r14
    5a90:	df 05       	cpc	r29, r15
    5a92:	90 f4       	brcc	.+36     	; 0x5ab8 <_ZN7TwoWire5writeEPKhj+0x4c>
    5a94:	d8 01       	movw	r26, r16
    5a96:	ed 91       	ld	r30, X+
    5a98:	fc 91       	ld	r31, X
    5a9a:	01 90       	ld	r0, Z+
    5a9c:	f0 81       	ld	r31, Z
    5a9e:	e0 2d       	mov	r30, r0
    5aa0:	d6 01       	movw	r26, r12
    5aa2:	ac 0f       	add	r26, r28
    5aa4:	bd 1f       	adc	r27, r29
    5aa6:	6c 91       	ld	r22, X
    5aa8:	c8 01       	movw	r24, r16
    5aaa:	09 95       	icall
    5aac:	21 96       	adiw	r28, 0x01	; 1
    5aae:	ef cf       	rjmp	.-34     	; 0x5a8e <_ZN7TwoWire5writeEPKhj+0x22>
    5ab0:	64 2f       	mov	r22, r20
    5ab2:	c6 01       	movw	r24, r12
    5ab4:	0e 94 4f 2b 	call	0x569e	; 0x569e <twi_transmit>
    5ab8:	c7 01       	movw	r24, r14
    5aba:	df 91       	pop	r29
    5abc:	cf 91       	pop	r28
    5abe:	1f 91       	pop	r17
    5ac0:	0f 91       	pop	r16
    5ac2:	ff 90       	pop	r15
    5ac4:	ef 90       	pop	r14
    5ac6:	df 90       	pop	r13
    5ac8:	cf 90       	pop	r12
    5aca:	08 95       	ret

00005acc <_ZN7TwoWire5writeEh>:
    5acc:	cf 93       	push	r28
    5ace:	df 93       	push	r29
    5ad0:	1f 92       	push	r1
    5ad2:	cd b7       	in	r28, 0x3d	; 61
    5ad4:	de b7       	in	r29, 0x3e	; 62
    5ad6:	fc 01       	movw	r30, r24
    5ad8:	69 83       	std	Y+1, r22	; 0x01
    5ada:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <_ZN7TwoWire12transmittingE>
    5ade:	99 23       	and	r25, r25
    5ae0:	d9 f0       	breq	.+54     	; 0x5b18 <_ZN7TwoWire5writeEh+0x4c>
    5ae2:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <_ZN7TwoWire14txBufferLengthE>
    5ae6:	90 32       	cpi	r25, 0x20	; 32
    5ae8:	38 f0       	brcs	.+14     	; 0x5af8 <_ZN7TwoWire5writeEh+0x2c>
    5aea:	81 e0       	ldi	r24, 0x01	; 1
    5aec:	90 e0       	ldi	r25, 0x00	; 0
    5aee:	93 83       	std	Z+3, r25	; 0x03
    5af0:	82 83       	std	Z+2, r24	; 0x02
    5af2:	80 e0       	ldi	r24, 0x00	; 0
    5af4:	90 e0       	ldi	r25, 0x00	; 0
    5af6:	17 c0       	rjmp	.+46     	; 0x5b26 <_ZN7TwoWire5writeEh+0x5a>
    5af8:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <_ZN7TwoWire13txBufferIndexE>
    5afc:	e8 2f       	mov	r30, r24
    5afe:	f0 e0       	ldi	r31, 0x00	; 0
    5b00:	e4 57       	subi	r30, 0x74	; 116
    5b02:	fa 4f       	sbci	r31, 0xFA	; 250
    5b04:	99 81       	ldd	r25, Y+1	; 0x01
    5b06:	90 83       	st	Z, r25
    5b08:	8f 5f       	subi	r24, 0xFF	; 255
    5b0a:	80 93 8b 05 	sts	0x058B, r24	; 0x80058b <_ZN7TwoWire13txBufferIndexE>
    5b0e:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <_ZN7TwoWire14txBufferLengthE>
    5b12:	81 e0       	ldi	r24, 0x01	; 1
    5b14:	90 e0       	ldi	r25, 0x00	; 0
    5b16:	07 c0       	rjmp	.+14     	; 0x5b26 <_ZN7TwoWire5writeEh+0x5a>
    5b18:	61 e0       	ldi	r22, 0x01	; 1
    5b1a:	ce 01       	movw	r24, r28
    5b1c:	01 96       	adiw	r24, 0x01	; 1
    5b1e:	0e 94 4f 2b 	call	0x569e	; 0x569e <twi_transmit>
    5b22:	81 e0       	ldi	r24, 0x01	; 1
    5b24:	90 e0       	ldi	r25, 0x00	; 0
    5b26:	0f 90       	pop	r0
    5b28:	df 91       	pop	r29
    5b2a:	cf 91       	pop	r28
    5b2c:	08 95       	ret

00005b2e <_ZN7TwoWireC1Ev>:
    5b2e:	fc 01       	movw	r30, r24
    5b30:	13 82       	std	Z+3, r1	; 0x03
    5b32:	12 82       	std	Z+2, r1	; 0x02
    5b34:	88 ee       	ldi	r24, 0xE8	; 232
    5b36:	93 e0       	ldi	r25, 0x03	; 3
    5b38:	a0 e0       	ldi	r26, 0x00	; 0
    5b3a:	b0 e0       	ldi	r27, 0x00	; 0
    5b3c:	84 83       	std	Z+4, r24	; 0x04
    5b3e:	95 83       	std	Z+5, r25	; 0x05
    5b40:	a6 83       	std	Z+6, r26	; 0x06
    5b42:	b7 83       	std	Z+7, r27	; 0x07
    5b44:	8b e6       	ldi	r24, 0x6B	; 107
    5b46:	92 e0       	ldi	r25, 0x02	; 2
    5b48:	91 83       	std	Z+1, r25	; 0x01
    5b4a:	80 83       	st	Z, r24
    5b4c:	08 95       	ret

00005b4e <_Z41__static_initialization_and_destruction_0ii>:
    5b4e:	01 97       	sbiw	r24, 0x01	; 1
    5b50:	39 f4       	brne	.+14     	; 0x5b60 <_Z41__static_initialization_and_destruction_0ii+0x12>
    5b52:	6f 3f       	cpi	r22, 0xFF	; 255
    5b54:	7f 4f       	sbci	r23, 0xFF	; 255
    5b56:	21 f4       	brne	.+8      	; 0x5b60 <_Z41__static_initialization_and_destruction_0ii+0x12>
    5b58:	8d e7       	ldi	r24, 0x7D	; 125
    5b5a:	95 e0       	ldi	r25, 0x05	; 5
    5b5c:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN7TwoWireC1Ev>
    5b60:	08 95       	ret

00005b62 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    5b62:	6f ef       	ldi	r22, 0xFF	; 255
    5b64:	7f ef       	ldi	r23, 0xFF	; 255
    5b66:	81 e0       	ldi	r24, 0x01	; 1
    5b68:	90 e0       	ldi	r25, 0x00	; 0
    5b6a:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <_Z41__static_initialization_and_destruction_0ii>
    5b6e:	08 95       	ret

00005b70 <__subsf3>:
    5b70:	50 58       	subi	r21, 0x80	; 128

00005b72 <__addsf3>:
    5b72:	bb 27       	eor	r27, r27
    5b74:	aa 27       	eor	r26, r26
    5b76:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <__addsf3x>
    5b7a:	0c 94 1a 2f 	jmp	0x5e34	; 0x5e34 <__fp_round>
    5b7e:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <__fp_pscA>
    5b82:	38 f0       	brcs	.+14     	; 0x5b92 <__addsf3+0x20>
    5b84:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__fp_pscB>
    5b88:	20 f0       	brcs	.+8      	; 0x5b92 <__addsf3+0x20>
    5b8a:	39 f4       	brne	.+14     	; 0x5b9a <__addsf3+0x28>
    5b8c:	9f 3f       	cpi	r25, 0xFF	; 255
    5b8e:	19 f4       	brne	.+6      	; 0x5b96 <__addsf3+0x24>
    5b90:	26 f4       	brtc	.+8      	; 0x5b9a <__addsf3+0x28>
    5b92:	0c 94 09 2f 	jmp	0x5e12	; 0x5e12 <__fp_nan>
    5b96:	0e f4       	brtc	.+2      	; 0x5b9a <__addsf3+0x28>
    5b98:	e0 95       	com	r30
    5b9a:	e7 fb       	bst	r30, 7
    5b9c:	0c 94 03 2f 	jmp	0x5e06	; 0x5e06 <__fp_inf>

00005ba0 <__addsf3x>:
    5ba0:	e9 2f       	mov	r30, r25
    5ba2:	0e 94 2b 2f 	call	0x5e56	; 0x5e56 <__fp_split3>
    5ba6:	58 f3       	brcs	.-42     	; 0x5b7e <__addsf3+0xc>
    5ba8:	ba 17       	cp	r27, r26
    5baa:	62 07       	cpc	r22, r18
    5bac:	73 07       	cpc	r23, r19
    5bae:	84 07       	cpc	r24, r20
    5bb0:	95 07       	cpc	r25, r21
    5bb2:	20 f0       	brcs	.+8      	; 0x5bbc <__addsf3x+0x1c>
    5bb4:	79 f4       	brne	.+30     	; 0x5bd4 <__addsf3x+0x34>
    5bb6:	a6 f5       	brtc	.+104    	; 0x5c20 <__addsf3x+0x80>
    5bb8:	0c 94 4d 2f 	jmp	0x5e9a	; 0x5e9a <__fp_zero>
    5bbc:	0e f4       	brtc	.+2      	; 0x5bc0 <__addsf3x+0x20>
    5bbe:	e0 95       	com	r30
    5bc0:	0b 2e       	mov	r0, r27
    5bc2:	ba 2f       	mov	r27, r26
    5bc4:	a0 2d       	mov	r26, r0
    5bc6:	0b 01       	movw	r0, r22
    5bc8:	b9 01       	movw	r22, r18
    5bca:	90 01       	movw	r18, r0
    5bcc:	0c 01       	movw	r0, r24
    5bce:	ca 01       	movw	r24, r20
    5bd0:	a0 01       	movw	r20, r0
    5bd2:	11 24       	eor	r1, r1
    5bd4:	ff 27       	eor	r31, r31
    5bd6:	59 1b       	sub	r21, r25
    5bd8:	99 f0       	breq	.+38     	; 0x5c00 <__addsf3x+0x60>
    5bda:	59 3f       	cpi	r21, 0xF9	; 249
    5bdc:	50 f4       	brcc	.+20     	; 0x5bf2 <__addsf3x+0x52>
    5bde:	50 3e       	cpi	r21, 0xE0	; 224
    5be0:	68 f1       	brcs	.+90     	; 0x5c3c <__addsf3x+0x9c>
    5be2:	1a 16       	cp	r1, r26
    5be4:	f0 40       	sbci	r31, 0x00	; 0
    5be6:	a2 2f       	mov	r26, r18
    5be8:	23 2f       	mov	r18, r19
    5bea:	34 2f       	mov	r19, r20
    5bec:	44 27       	eor	r20, r20
    5bee:	58 5f       	subi	r21, 0xF8	; 248
    5bf0:	f3 cf       	rjmp	.-26     	; 0x5bd8 <__addsf3x+0x38>
    5bf2:	46 95       	lsr	r20
    5bf4:	37 95       	ror	r19
    5bf6:	27 95       	ror	r18
    5bf8:	a7 95       	ror	r26
    5bfa:	f0 40       	sbci	r31, 0x00	; 0
    5bfc:	53 95       	inc	r21
    5bfe:	c9 f7       	brne	.-14     	; 0x5bf2 <__addsf3x+0x52>
    5c00:	7e f4       	brtc	.+30     	; 0x5c20 <__addsf3x+0x80>
    5c02:	1f 16       	cp	r1, r31
    5c04:	ba 0b       	sbc	r27, r26
    5c06:	62 0b       	sbc	r22, r18
    5c08:	73 0b       	sbc	r23, r19
    5c0a:	84 0b       	sbc	r24, r20
    5c0c:	ba f0       	brmi	.+46     	; 0x5c3c <__addsf3x+0x9c>
    5c0e:	91 50       	subi	r25, 0x01	; 1
    5c10:	a1 f0       	breq	.+40     	; 0x5c3a <__addsf3x+0x9a>
    5c12:	ff 0f       	add	r31, r31
    5c14:	bb 1f       	adc	r27, r27
    5c16:	66 1f       	adc	r22, r22
    5c18:	77 1f       	adc	r23, r23
    5c1a:	88 1f       	adc	r24, r24
    5c1c:	c2 f7       	brpl	.-16     	; 0x5c0e <__addsf3x+0x6e>
    5c1e:	0e c0       	rjmp	.+28     	; 0x5c3c <__addsf3x+0x9c>
    5c20:	ba 0f       	add	r27, r26
    5c22:	62 1f       	adc	r22, r18
    5c24:	73 1f       	adc	r23, r19
    5c26:	84 1f       	adc	r24, r20
    5c28:	48 f4       	brcc	.+18     	; 0x5c3c <__addsf3x+0x9c>
    5c2a:	87 95       	ror	r24
    5c2c:	77 95       	ror	r23
    5c2e:	67 95       	ror	r22
    5c30:	b7 95       	ror	r27
    5c32:	f7 95       	ror	r31
    5c34:	9e 3f       	cpi	r25, 0xFE	; 254
    5c36:	08 f0       	brcs	.+2      	; 0x5c3a <__addsf3x+0x9a>
    5c38:	b0 cf       	rjmp	.-160    	; 0x5b9a <__addsf3+0x28>
    5c3a:	93 95       	inc	r25
    5c3c:	88 0f       	add	r24, r24
    5c3e:	08 f0       	brcs	.+2      	; 0x5c42 <__addsf3x+0xa2>
    5c40:	99 27       	eor	r25, r25
    5c42:	ee 0f       	add	r30, r30
    5c44:	97 95       	ror	r25
    5c46:	87 95       	ror	r24
    5c48:	08 95       	ret

00005c4a <__divsf3>:
    5c4a:	0e 94 39 2e 	call	0x5c72	; 0x5c72 <__divsf3x>
    5c4e:	0c 94 1a 2f 	jmp	0x5e34	; 0x5e34 <__fp_round>
    5c52:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__fp_pscB>
    5c56:	58 f0       	brcs	.+22     	; 0x5c6e <__divsf3+0x24>
    5c58:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <__fp_pscA>
    5c5c:	40 f0       	brcs	.+16     	; 0x5c6e <__divsf3+0x24>
    5c5e:	29 f4       	brne	.+10     	; 0x5c6a <__divsf3+0x20>
    5c60:	5f 3f       	cpi	r21, 0xFF	; 255
    5c62:	29 f0       	breq	.+10     	; 0x5c6e <__divsf3+0x24>
    5c64:	0c 94 03 2f 	jmp	0x5e06	; 0x5e06 <__fp_inf>
    5c68:	51 11       	cpse	r21, r1
    5c6a:	0c 94 4e 2f 	jmp	0x5e9c	; 0x5e9c <__fp_szero>
    5c6e:	0c 94 09 2f 	jmp	0x5e12	; 0x5e12 <__fp_nan>

00005c72 <__divsf3x>:
    5c72:	0e 94 2b 2f 	call	0x5e56	; 0x5e56 <__fp_split3>
    5c76:	68 f3       	brcs	.-38     	; 0x5c52 <__divsf3+0x8>

00005c78 <__divsf3_pse>:
    5c78:	99 23       	and	r25, r25
    5c7a:	b1 f3       	breq	.-20     	; 0x5c68 <__divsf3+0x1e>
    5c7c:	55 23       	and	r21, r21
    5c7e:	91 f3       	breq	.-28     	; 0x5c64 <__divsf3+0x1a>
    5c80:	95 1b       	sub	r25, r21
    5c82:	55 0b       	sbc	r21, r21
    5c84:	bb 27       	eor	r27, r27
    5c86:	aa 27       	eor	r26, r26
    5c88:	62 17       	cp	r22, r18
    5c8a:	73 07       	cpc	r23, r19
    5c8c:	84 07       	cpc	r24, r20
    5c8e:	38 f0       	brcs	.+14     	; 0x5c9e <__divsf3_pse+0x26>
    5c90:	9f 5f       	subi	r25, 0xFF	; 255
    5c92:	5f 4f       	sbci	r21, 0xFF	; 255
    5c94:	22 0f       	add	r18, r18
    5c96:	33 1f       	adc	r19, r19
    5c98:	44 1f       	adc	r20, r20
    5c9a:	aa 1f       	adc	r26, r26
    5c9c:	a9 f3       	breq	.-22     	; 0x5c88 <__divsf3_pse+0x10>
    5c9e:	35 d0       	rcall	.+106    	; 0x5d0a <__divsf3_pse+0x92>
    5ca0:	0e 2e       	mov	r0, r30
    5ca2:	3a f0       	brmi	.+14     	; 0x5cb2 <__divsf3_pse+0x3a>
    5ca4:	e0 e8       	ldi	r30, 0x80	; 128
    5ca6:	32 d0       	rcall	.+100    	; 0x5d0c <__divsf3_pse+0x94>
    5ca8:	91 50       	subi	r25, 0x01	; 1
    5caa:	50 40       	sbci	r21, 0x00	; 0
    5cac:	e6 95       	lsr	r30
    5cae:	00 1c       	adc	r0, r0
    5cb0:	ca f7       	brpl	.-14     	; 0x5ca4 <__divsf3_pse+0x2c>
    5cb2:	2b d0       	rcall	.+86     	; 0x5d0a <__divsf3_pse+0x92>
    5cb4:	fe 2f       	mov	r31, r30
    5cb6:	29 d0       	rcall	.+82     	; 0x5d0a <__divsf3_pse+0x92>
    5cb8:	66 0f       	add	r22, r22
    5cba:	77 1f       	adc	r23, r23
    5cbc:	88 1f       	adc	r24, r24
    5cbe:	bb 1f       	adc	r27, r27
    5cc0:	26 17       	cp	r18, r22
    5cc2:	37 07       	cpc	r19, r23
    5cc4:	48 07       	cpc	r20, r24
    5cc6:	ab 07       	cpc	r26, r27
    5cc8:	b0 e8       	ldi	r27, 0x80	; 128
    5cca:	09 f0       	breq	.+2      	; 0x5cce <__divsf3_pse+0x56>
    5ccc:	bb 0b       	sbc	r27, r27
    5cce:	80 2d       	mov	r24, r0
    5cd0:	bf 01       	movw	r22, r30
    5cd2:	ff 27       	eor	r31, r31
    5cd4:	93 58       	subi	r25, 0x83	; 131
    5cd6:	5f 4f       	sbci	r21, 0xFF	; 255
    5cd8:	3a f0       	brmi	.+14     	; 0x5ce8 <__divsf3_pse+0x70>
    5cda:	9e 3f       	cpi	r25, 0xFE	; 254
    5cdc:	51 05       	cpc	r21, r1
    5cde:	78 f0       	brcs	.+30     	; 0x5cfe <__divsf3_pse+0x86>
    5ce0:	0c 94 03 2f 	jmp	0x5e06	; 0x5e06 <__fp_inf>
    5ce4:	0c 94 4e 2f 	jmp	0x5e9c	; 0x5e9c <__fp_szero>
    5ce8:	5f 3f       	cpi	r21, 0xFF	; 255
    5cea:	e4 f3       	brlt	.-8      	; 0x5ce4 <__divsf3_pse+0x6c>
    5cec:	98 3e       	cpi	r25, 0xE8	; 232
    5cee:	d4 f3       	brlt	.-12     	; 0x5ce4 <__divsf3_pse+0x6c>
    5cf0:	86 95       	lsr	r24
    5cf2:	77 95       	ror	r23
    5cf4:	67 95       	ror	r22
    5cf6:	b7 95       	ror	r27
    5cf8:	f7 95       	ror	r31
    5cfa:	9f 5f       	subi	r25, 0xFF	; 255
    5cfc:	c9 f7       	brne	.-14     	; 0x5cf0 <__divsf3_pse+0x78>
    5cfe:	88 0f       	add	r24, r24
    5d00:	91 1d       	adc	r25, r1
    5d02:	96 95       	lsr	r25
    5d04:	87 95       	ror	r24
    5d06:	97 f9       	bld	r25, 7
    5d08:	08 95       	ret
    5d0a:	e1 e0       	ldi	r30, 0x01	; 1
    5d0c:	66 0f       	add	r22, r22
    5d0e:	77 1f       	adc	r23, r23
    5d10:	88 1f       	adc	r24, r24
    5d12:	bb 1f       	adc	r27, r27
    5d14:	62 17       	cp	r22, r18
    5d16:	73 07       	cpc	r23, r19
    5d18:	84 07       	cpc	r24, r20
    5d1a:	ba 07       	cpc	r27, r26
    5d1c:	20 f0       	brcs	.+8      	; 0x5d26 <__divsf3_pse+0xae>
    5d1e:	62 1b       	sub	r22, r18
    5d20:	73 0b       	sbc	r23, r19
    5d22:	84 0b       	sbc	r24, r20
    5d24:	ba 0b       	sbc	r27, r26
    5d26:	ee 1f       	adc	r30, r30
    5d28:	88 f7       	brcc	.-30     	; 0x5d0c <__divsf3_pse+0x94>
    5d2a:	e0 95       	com	r30
    5d2c:	08 95       	ret

00005d2e <__fixunssfsi>:
    5d2e:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <__fp_splitA>
    5d32:	88 f0       	brcs	.+34     	; 0x5d56 <__fixunssfsi+0x28>
    5d34:	9f 57       	subi	r25, 0x7F	; 127
    5d36:	98 f0       	brcs	.+38     	; 0x5d5e <__fixunssfsi+0x30>
    5d38:	b9 2f       	mov	r27, r25
    5d3a:	99 27       	eor	r25, r25
    5d3c:	b7 51       	subi	r27, 0x17	; 23
    5d3e:	b0 f0       	brcs	.+44     	; 0x5d6c <__fixunssfsi+0x3e>
    5d40:	e1 f0       	breq	.+56     	; 0x5d7a <__fixunssfsi+0x4c>
    5d42:	66 0f       	add	r22, r22
    5d44:	77 1f       	adc	r23, r23
    5d46:	88 1f       	adc	r24, r24
    5d48:	99 1f       	adc	r25, r25
    5d4a:	1a f0       	brmi	.+6      	; 0x5d52 <__fixunssfsi+0x24>
    5d4c:	ba 95       	dec	r27
    5d4e:	c9 f7       	brne	.-14     	; 0x5d42 <__fixunssfsi+0x14>
    5d50:	14 c0       	rjmp	.+40     	; 0x5d7a <__fixunssfsi+0x4c>
    5d52:	b1 30       	cpi	r27, 0x01	; 1
    5d54:	91 f0       	breq	.+36     	; 0x5d7a <__fixunssfsi+0x4c>
    5d56:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <__fp_zero>
    5d5a:	b1 e0       	ldi	r27, 0x01	; 1
    5d5c:	08 95       	ret
    5d5e:	0c 94 4d 2f 	jmp	0x5e9a	; 0x5e9a <__fp_zero>
    5d62:	67 2f       	mov	r22, r23
    5d64:	78 2f       	mov	r23, r24
    5d66:	88 27       	eor	r24, r24
    5d68:	b8 5f       	subi	r27, 0xF8	; 248
    5d6a:	39 f0       	breq	.+14     	; 0x5d7a <__fixunssfsi+0x4c>
    5d6c:	b9 3f       	cpi	r27, 0xF9	; 249
    5d6e:	cc f3       	brlt	.-14     	; 0x5d62 <__fixunssfsi+0x34>
    5d70:	86 95       	lsr	r24
    5d72:	77 95       	ror	r23
    5d74:	67 95       	ror	r22
    5d76:	b3 95       	inc	r27
    5d78:	d9 f7       	brne	.-10     	; 0x5d70 <__fixunssfsi+0x42>
    5d7a:	3e f4       	brtc	.+14     	; 0x5d8a <__fixunssfsi+0x5c>
    5d7c:	90 95       	com	r25
    5d7e:	80 95       	com	r24
    5d80:	70 95       	com	r23
    5d82:	61 95       	neg	r22
    5d84:	7f 4f       	sbci	r23, 0xFF	; 255
    5d86:	8f 4f       	sbci	r24, 0xFF	; 255
    5d88:	9f 4f       	sbci	r25, 0xFF	; 255
    5d8a:	08 95       	ret

00005d8c <__floatunsisf>:
    5d8c:	e8 94       	clt
    5d8e:	09 c0       	rjmp	.+18     	; 0x5da2 <__floatsisf+0x12>

00005d90 <__floatsisf>:
    5d90:	97 fb       	bst	r25, 7
    5d92:	3e f4       	brtc	.+14     	; 0x5da2 <__floatsisf+0x12>
    5d94:	90 95       	com	r25
    5d96:	80 95       	com	r24
    5d98:	70 95       	com	r23
    5d9a:	61 95       	neg	r22
    5d9c:	7f 4f       	sbci	r23, 0xFF	; 255
    5d9e:	8f 4f       	sbci	r24, 0xFF	; 255
    5da0:	9f 4f       	sbci	r25, 0xFF	; 255
    5da2:	99 23       	and	r25, r25
    5da4:	a9 f0       	breq	.+42     	; 0x5dd0 <__floatsisf+0x40>
    5da6:	f9 2f       	mov	r31, r25
    5da8:	96 e9       	ldi	r25, 0x96	; 150
    5daa:	bb 27       	eor	r27, r27
    5dac:	93 95       	inc	r25
    5dae:	f6 95       	lsr	r31
    5db0:	87 95       	ror	r24
    5db2:	77 95       	ror	r23
    5db4:	67 95       	ror	r22
    5db6:	b7 95       	ror	r27
    5db8:	f1 11       	cpse	r31, r1
    5dba:	f8 cf       	rjmp	.-16     	; 0x5dac <__floatsisf+0x1c>
    5dbc:	fa f4       	brpl	.+62     	; 0x5dfc <__floatsisf+0x6c>
    5dbe:	bb 0f       	add	r27, r27
    5dc0:	11 f4       	brne	.+4      	; 0x5dc6 <__floatsisf+0x36>
    5dc2:	60 ff       	sbrs	r22, 0
    5dc4:	1b c0       	rjmp	.+54     	; 0x5dfc <__floatsisf+0x6c>
    5dc6:	6f 5f       	subi	r22, 0xFF	; 255
    5dc8:	7f 4f       	sbci	r23, 0xFF	; 255
    5dca:	8f 4f       	sbci	r24, 0xFF	; 255
    5dcc:	9f 4f       	sbci	r25, 0xFF	; 255
    5dce:	16 c0       	rjmp	.+44     	; 0x5dfc <__floatsisf+0x6c>
    5dd0:	88 23       	and	r24, r24
    5dd2:	11 f0       	breq	.+4      	; 0x5dd8 <__floatsisf+0x48>
    5dd4:	96 e9       	ldi	r25, 0x96	; 150
    5dd6:	11 c0       	rjmp	.+34     	; 0x5dfa <__floatsisf+0x6a>
    5dd8:	77 23       	and	r23, r23
    5dda:	21 f0       	breq	.+8      	; 0x5de4 <__floatsisf+0x54>
    5ddc:	9e e8       	ldi	r25, 0x8E	; 142
    5dde:	87 2f       	mov	r24, r23
    5de0:	76 2f       	mov	r23, r22
    5de2:	05 c0       	rjmp	.+10     	; 0x5dee <__floatsisf+0x5e>
    5de4:	66 23       	and	r22, r22
    5de6:	71 f0       	breq	.+28     	; 0x5e04 <__floatsisf+0x74>
    5de8:	96 e8       	ldi	r25, 0x86	; 134
    5dea:	86 2f       	mov	r24, r22
    5dec:	70 e0       	ldi	r23, 0x00	; 0
    5dee:	60 e0       	ldi	r22, 0x00	; 0
    5df0:	2a f0       	brmi	.+10     	; 0x5dfc <__floatsisf+0x6c>
    5df2:	9a 95       	dec	r25
    5df4:	66 0f       	add	r22, r22
    5df6:	77 1f       	adc	r23, r23
    5df8:	88 1f       	adc	r24, r24
    5dfa:	da f7       	brpl	.-10     	; 0x5df2 <__floatsisf+0x62>
    5dfc:	88 0f       	add	r24, r24
    5dfe:	96 95       	lsr	r25
    5e00:	87 95       	ror	r24
    5e02:	97 f9       	bld	r25, 7
    5e04:	08 95       	ret

00005e06 <__fp_inf>:
    5e06:	97 f9       	bld	r25, 7
    5e08:	9f 67       	ori	r25, 0x7F	; 127
    5e0a:	80 e8       	ldi	r24, 0x80	; 128
    5e0c:	70 e0       	ldi	r23, 0x00	; 0
    5e0e:	60 e0       	ldi	r22, 0x00	; 0
    5e10:	08 95       	ret

00005e12 <__fp_nan>:
    5e12:	9f ef       	ldi	r25, 0xFF	; 255
    5e14:	80 ec       	ldi	r24, 0xC0	; 192
    5e16:	08 95       	ret

00005e18 <__fp_pscA>:
    5e18:	00 24       	eor	r0, r0
    5e1a:	0a 94       	dec	r0
    5e1c:	16 16       	cp	r1, r22
    5e1e:	17 06       	cpc	r1, r23
    5e20:	18 06       	cpc	r1, r24
    5e22:	09 06       	cpc	r0, r25
    5e24:	08 95       	ret

00005e26 <__fp_pscB>:
    5e26:	00 24       	eor	r0, r0
    5e28:	0a 94       	dec	r0
    5e2a:	12 16       	cp	r1, r18
    5e2c:	13 06       	cpc	r1, r19
    5e2e:	14 06       	cpc	r1, r20
    5e30:	05 06       	cpc	r0, r21
    5e32:	08 95       	ret

00005e34 <__fp_round>:
    5e34:	09 2e       	mov	r0, r25
    5e36:	03 94       	inc	r0
    5e38:	00 0c       	add	r0, r0
    5e3a:	11 f4       	brne	.+4      	; 0x5e40 <__fp_round+0xc>
    5e3c:	88 23       	and	r24, r24
    5e3e:	52 f0       	brmi	.+20     	; 0x5e54 <__fp_round+0x20>
    5e40:	bb 0f       	add	r27, r27
    5e42:	40 f4       	brcc	.+16     	; 0x5e54 <__fp_round+0x20>
    5e44:	bf 2b       	or	r27, r31
    5e46:	11 f4       	brne	.+4      	; 0x5e4c <__fp_round+0x18>
    5e48:	60 ff       	sbrs	r22, 0
    5e4a:	04 c0       	rjmp	.+8      	; 0x5e54 <__fp_round+0x20>
    5e4c:	6f 5f       	subi	r22, 0xFF	; 255
    5e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    5e50:	8f 4f       	sbci	r24, 0xFF	; 255
    5e52:	9f 4f       	sbci	r25, 0xFF	; 255
    5e54:	08 95       	ret

00005e56 <__fp_split3>:
    5e56:	57 fd       	sbrc	r21, 7
    5e58:	90 58       	subi	r25, 0x80	; 128
    5e5a:	44 0f       	add	r20, r20
    5e5c:	55 1f       	adc	r21, r21
    5e5e:	59 f0       	breq	.+22     	; 0x5e76 <__fp_splitA+0x10>
    5e60:	5f 3f       	cpi	r21, 0xFF	; 255
    5e62:	71 f0       	breq	.+28     	; 0x5e80 <__fp_splitA+0x1a>
    5e64:	47 95       	ror	r20

00005e66 <__fp_splitA>:
    5e66:	88 0f       	add	r24, r24
    5e68:	97 fb       	bst	r25, 7
    5e6a:	99 1f       	adc	r25, r25
    5e6c:	61 f0       	breq	.+24     	; 0x5e86 <__fp_splitA+0x20>
    5e6e:	9f 3f       	cpi	r25, 0xFF	; 255
    5e70:	79 f0       	breq	.+30     	; 0x5e90 <__fp_splitA+0x2a>
    5e72:	87 95       	ror	r24
    5e74:	08 95       	ret
    5e76:	12 16       	cp	r1, r18
    5e78:	13 06       	cpc	r1, r19
    5e7a:	14 06       	cpc	r1, r20
    5e7c:	55 1f       	adc	r21, r21
    5e7e:	f2 cf       	rjmp	.-28     	; 0x5e64 <__fp_split3+0xe>
    5e80:	46 95       	lsr	r20
    5e82:	f1 df       	rcall	.-30     	; 0x5e66 <__fp_splitA>
    5e84:	08 c0       	rjmp	.+16     	; 0x5e96 <__fp_splitA+0x30>
    5e86:	16 16       	cp	r1, r22
    5e88:	17 06       	cpc	r1, r23
    5e8a:	18 06       	cpc	r1, r24
    5e8c:	99 1f       	adc	r25, r25
    5e8e:	f1 cf       	rjmp	.-30     	; 0x5e72 <__fp_splitA+0xc>
    5e90:	86 95       	lsr	r24
    5e92:	71 05       	cpc	r23, r1
    5e94:	61 05       	cpc	r22, r1
    5e96:	08 94       	sec
    5e98:	08 95       	ret

00005e9a <__fp_zero>:
    5e9a:	e8 94       	clt

00005e9c <__fp_szero>:
    5e9c:	bb 27       	eor	r27, r27
    5e9e:	66 27       	eor	r22, r22
    5ea0:	77 27       	eor	r23, r23
    5ea2:	cb 01       	movw	r24, r22
    5ea4:	97 f9       	bld	r25, 7
    5ea6:	08 95       	ret

00005ea8 <__mulsf3>:
    5ea8:	0e 94 67 2f 	call	0x5ece	; 0x5ece <__mulsf3x>
    5eac:	0c 94 1a 2f 	jmp	0x5e34	; 0x5e34 <__fp_round>
    5eb0:	0e 94 0c 2f 	call	0x5e18	; 0x5e18 <__fp_pscA>
    5eb4:	38 f0       	brcs	.+14     	; 0x5ec4 <__mulsf3+0x1c>
    5eb6:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__fp_pscB>
    5eba:	20 f0       	brcs	.+8      	; 0x5ec4 <__mulsf3+0x1c>
    5ebc:	95 23       	and	r25, r21
    5ebe:	11 f0       	breq	.+4      	; 0x5ec4 <__mulsf3+0x1c>
    5ec0:	0c 94 03 2f 	jmp	0x5e06	; 0x5e06 <__fp_inf>
    5ec4:	0c 94 09 2f 	jmp	0x5e12	; 0x5e12 <__fp_nan>
    5ec8:	11 24       	eor	r1, r1
    5eca:	0c 94 4e 2f 	jmp	0x5e9c	; 0x5e9c <__fp_szero>

00005ece <__mulsf3x>:
    5ece:	0e 94 2b 2f 	call	0x5e56	; 0x5e56 <__fp_split3>
    5ed2:	70 f3       	brcs	.-36     	; 0x5eb0 <__mulsf3+0x8>

00005ed4 <__mulsf3_pse>:
    5ed4:	95 9f       	mul	r25, r21
    5ed6:	c1 f3       	breq	.-16     	; 0x5ec8 <__mulsf3+0x20>
    5ed8:	95 0f       	add	r25, r21
    5eda:	50 e0       	ldi	r21, 0x00	; 0
    5edc:	55 1f       	adc	r21, r21
    5ede:	62 9f       	mul	r22, r18
    5ee0:	f0 01       	movw	r30, r0
    5ee2:	72 9f       	mul	r23, r18
    5ee4:	bb 27       	eor	r27, r27
    5ee6:	f0 0d       	add	r31, r0
    5ee8:	b1 1d       	adc	r27, r1
    5eea:	63 9f       	mul	r22, r19
    5eec:	aa 27       	eor	r26, r26
    5eee:	f0 0d       	add	r31, r0
    5ef0:	b1 1d       	adc	r27, r1
    5ef2:	aa 1f       	adc	r26, r26
    5ef4:	64 9f       	mul	r22, r20
    5ef6:	66 27       	eor	r22, r22
    5ef8:	b0 0d       	add	r27, r0
    5efa:	a1 1d       	adc	r26, r1
    5efc:	66 1f       	adc	r22, r22
    5efe:	82 9f       	mul	r24, r18
    5f00:	22 27       	eor	r18, r18
    5f02:	b0 0d       	add	r27, r0
    5f04:	a1 1d       	adc	r26, r1
    5f06:	62 1f       	adc	r22, r18
    5f08:	73 9f       	mul	r23, r19
    5f0a:	b0 0d       	add	r27, r0
    5f0c:	a1 1d       	adc	r26, r1
    5f0e:	62 1f       	adc	r22, r18
    5f10:	83 9f       	mul	r24, r19
    5f12:	a0 0d       	add	r26, r0
    5f14:	61 1d       	adc	r22, r1
    5f16:	22 1f       	adc	r18, r18
    5f18:	74 9f       	mul	r23, r20
    5f1a:	33 27       	eor	r19, r19
    5f1c:	a0 0d       	add	r26, r0
    5f1e:	61 1d       	adc	r22, r1
    5f20:	23 1f       	adc	r18, r19
    5f22:	84 9f       	mul	r24, r20
    5f24:	60 0d       	add	r22, r0
    5f26:	21 1d       	adc	r18, r1
    5f28:	82 2f       	mov	r24, r18
    5f2a:	76 2f       	mov	r23, r22
    5f2c:	6a 2f       	mov	r22, r26
    5f2e:	11 24       	eor	r1, r1
    5f30:	9f 57       	subi	r25, 0x7F	; 127
    5f32:	50 40       	sbci	r21, 0x00	; 0
    5f34:	9a f0       	brmi	.+38     	; 0x5f5c <__mulsf3_pse+0x88>
    5f36:	f1 f0       	breq	.+60     	; 0x5f74 <__mulsf3_pse+0xa0>
    5f38:	88 23       	and	r24, r24
    5f3a:	4a f0       	brmi	.+18     	; 0x5f4e <__mulsf3_pse+0x7a>
    5f3c:	ee 0f       	add	r30, r30
    5f3e:	ff 1f       	adc	r31, r31
    5f40:	bb 1f       	adc	r27, r27
    5f42:	66 1f       	adc	r22, r22
    5f44:	77 1f       	adc	r23, r23
    5f46:	88 1f       	adc	r24, r24
    5f48:	91 50       	subi	r25, 0x01	; 1
    5f4a:	50 40       	sbci	r21, 0x00	; 0
    5f4c:	a9 f7       	brne	.-22     	; 0x5f38 <__mulsf3_pse+0x64>
    5f4e:	9e 3f       	cpi	r25, 0xFE	; 254
    5f50:	51 05       	cpc	r21, r1
    5f52:	80 f0       	brcs	.+32     	; 0x5f74 <__mulsf3_pse+0xa0>
    5f54:	0c 94 03 2f 	jmp	0x5e06	; 0x5e06 <__fp_inf>
    5f58:	0c 94 4e 2f 	jmp	0x5e9c	; 0x5e9c <__fp_szero>
    5f5c:	5f 3f       	cpi	r21, 0xFF	; 255
    5f5e:	e4 f3       	brlt	.-8      	; 0x5f58 <__mulsf3_pse+0x84>
    5f60:	98 3e       	cpi	r25, 0xE8	; 232
    5f62:	d4 f3       	brlt	.-12     	; 0x5f58 <__mulsf3_pse+0x84>
    5f64:	86 95       	lsr	r24
    5f66:	77 95       	ror	r23
    5f68:	67 95       	ror	r22
    5f6a:	b7 95       	ror	r27
    5f6c:	f7 95       	ror	r31
    5f6e:	e7 95       	ror	r30
    5f70:	9f 5f       	subi	r25, 0xFF	; 255
    5f72:	c1 f7       	brne	.-16     	; 0x5f64 <__mulsf3_pse+0x90>
    5f74:	fe 2b       	or	r31, r30
    5f76:	88 0f       	add	r24, r24
    5f78:	91 1d       	adc	r25, r1
    5f7a:	96 95       	lsr	r25
    5f7c:	87 95       	ror	r24
    5f7e:	97 f9       	bld	r25, 7
    5f80:	08 95       	ret

00005f82 <__divmodhi4>:
    5f82:	97 fb       	bst	r25, 7
    5f84:	07 2e       	mov	r0, r23
    5f86:	16 f4       	brtc	.+4      	; 0x5f8c <__divmodhi4+0xa>
    5f88:	00 94       	com	r0
    5f8a:	07 d0       	rcall	.+14     	; 0x5f9a <__divmodhi4_neg1>
    5f8c:	77 fd       	sbrc	r23, 7
    5f8e:	09 d0       	rcall	.+18     	; 0x5fa2 <__divmodhi4_neg2>
    5f90:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <__udivmodhi4>
    5f94:	07 fc       	sbrc	r0, 7
    5f96:	05 d0       	rcall	.+10     	; 0x5fa2 <__divmodhi4_neg2>
    5f98:	3e f4       	brtc	.+14     	; 0x5fa8 <__divmodhi4_exit>

00005f9a <__divmodhi4_neg1>:
    5f9a:	90 95       	com	r25
    5f9c:	81 95       	neg	r24
    5f9e:	9f 4f       	sbci	r25, 0xFF	; 255
    5fa0:	08 95       	ret

00005fa2 <__divmodhi4_neg2>:
    5fa2:	70 95       	com	r23
    5fa4:	61 95       	neg	r22
    5fa6:	7f 4f       	sbci	r23, 0xFF	; 255

00005fa8 <__divmodhi4_exit>:
    5fa8:	08 95       	ret

00005faa <__tablejump2__>:
    5faa:	ee 0f       	add	r30, r30
    5fac:	ff 1f       	adc	r31, r31
    5fae:	05 90       	lpm	r0, Z+
    5fb0:	f4 91       	lpm	r31, Z
    5fb2:	e0 2d       	mov	r30, r0
    5fb4:	09 94       	ijmp

00005fb6 <__muluhisi3>:
    5fb6:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <__umulhisi3>
    5fba:	a5 9f       	mul	r26, r21
    5fbc:	90 0d       	add	r25, r0
    5fbe:	b4 9f       	mul	r27, r20
    5fc0:	90 0d       	add	r25, r0
    5fc2:	a4 9f       	mul	r26, r20
    5fc4:	80 0d       	add	r24, r0
    5fc6:	91 1d       	adc	r25, r1
    5fc8:	11 24       	eor	r1, r1
    5fca:	08 95       	ret

00005fcc <__udivmodhi4>:
    5fcc:	aa 1b       	sub	r26, r26
    5fce:	bb 1b       	sub	r27, r27
    5fd0:	51 e1       	ldi	r21, 0x11	; 17
    5fd2:	07 c0       	rjmp	.+14     	; 0x5fe2 <__udivmodhi4_ep>

00005fd4 <__udivmodhi4_loop>:
    5fd4:	aa 1f       	adc	r26, r26
    5fd6:	bb 1f       	adc	r27, r27
    5fd8:	a6 17       	cp	r26, r22
    5fda:	b7 07       	cpc	r27, r23
    5fdc:	10 f0       	brcs	.+4      	; 0x5fe2 <__udivmodhi4_ep>
    5fde:	a6 1b       	sub	r26, r22
    5fe0:	b7 0b       	sbc	r27, r23

00005fe2 <__udivmodhi4_ep>:
    5fe2:	88 1f       	adc	r24, r24
    5fe4:	99 1f       	adc	r25, r25
    5fe6:	5a 95       	dec	r21
    5fe8:	a9 f7       	brne	.-22     	; 0x5fd4 <__udivmodhi4_loop>
    5fea:	80 95       	com	r24
    5fec:	90 95       	com	r25
    5fee:	bc 01       	movw	r22, r24
    5ff0:	cd 01       	movw	r24, r26
    5ff2:	08 95       	ret

00005ff4 <__umulhisi3>:
    5ff4:	a2 9f       	mul	r26, r18
    5ff6:	b0 01       	movw	r22, r0
    5ff8:	b3 9f       	mul	r27, r19
    5ffa:	c0 01       	movw	r24, r0
    5ffc:	a3 9f       	mul	r26, r19
    5ffe:	70 0d       	add	r23, r0
    6000:	81 1d       	adc	r24, r1
    6002:	11 24       	eor	r1, r1
    6004:	91 1d       	adc	r25, r1
    6006:	b2 9f       	mul	r27, r18
    6008:	70 0d       	add	r23, r0
    600a:	81 1d       	adc	r24, r1
    600c:	11 24       	eor	r1, r1
    600e:	91 1d       	adc	r25, r1
    6010:	08 95       	ret

00006012 <malloc>:
    6012:	0f 93       	push	r16
    6014:	1f 93       	push	r17
    6016:	cf 93       	push	r28
    6018:	df 93       	push	r29
    601a:	82 30       	cpi	r24, 0x02	; 2
    601c:	91 05       	cpc	r25, r1
    601e:	10 f4       	brcc	.+4      	; 0x6024 <malloc+0x12>
    6020:	82 e0       	ldi	r24, 0x02	; 2
    6022:	90 e0       	ldi	r25, 0x00	; 0
    6024:	e0 91 d0 05 	lds	r30, 0x05D0	; 0x8005d0 <__flp>
    6028:	f0 91 d1 05 	lds	r31, 0x05D1	; 0x8005d1 <__flp+0x1>
    602c:	20 e0       	ldi	r18, 0x00	; 0
    602e:	30 e0       	ldi	r19, 0x00	; 0
    6030:	a0 e0       	ldi	r26, 0x00	; 0
    6032:	b0 e0       	ldi	r27, 0x00	; 0
    6034:	30 97       	sbiw	r30, 0x00	; 0
    6036:	19 f1       	breq	.+70     	; 0x607e <malloc+0x6c>
    6038:	40 81       	ld	r20, Z
    603a:	51 81       	ldd	r21, Z+1	; 0x01
    603c:	02 81       	ldd	r16, Z+2	; 0x02
    603e:	13 81       	ldd	r17, Z+3	; 0x03
    6040:	48 17       	cp	r20, r24
    6042:	59 07       	cpc	r21, r25
    6044:	c8 f0       	brcs	.+50     	; 0x6078 <malloc+0x66>
    6046:	84 17       	cp	r24, r20
    6048:	95 07       	cpc	r25, r21
    604a:	69 f4       	brne	.+26     	; 0x6066 <malloc+0x54>
    604c:	10 97       	sbiw	r26, 0x00	; 0
    604e:	31 f0       	breq	.+12     	; 0x605c <malloc+0x4a>
    6050:	12 96       	adiw	r26, 0x02	; 2
    6052:	0c 93       	st	X, r16
    6054:	12 97       	sbiw	r26, 0x02	; 2
    6056:	13 96       	adiw	r26, 0x03	; 3
    6058:	1c 93       	st	X, r17
    605a:	27 c0       	rjmp	.+78     	; 0x60aa <malloc+0x98>
    605c:	00 93 d0 05 	sts	0x05D0, r16	; 0x8005d0 <__flp>
    6060:	10 93 d1 05 	sts	0x05D1, r17	; 0x8005d1 <__flp+0x1>
    6064:	22 c0       	rjmp	.+68     	; 0x60aa <malloc+0x98>
    6066:	21 15       	cp	r18, r1
    6068:	31 05       	cpc	r19, r1
    606a:	19 f0       	breq	.+6      	; 0x6072 <malloc+0x60>
    606c:	42 17       	cp	r20, r18
    606e:	53 07       	cpc	r21, r19
    6070:	18 f4       	brcc	.+6      	; 0x6078 <malloc+0x66>
    6072:	9a 01       	movw	r18, r20
    6074:	bd 01       	movw	r22, r26
    6076:	ef 01       	movw	r28, r30
    6078:	df 01       	movw	r26, r30
    607a:	f8 01       	movw	r30, r16
    607c:	db cf       	rjmp	.-74     	; 0x6034 <malloc+0x22>
    607e:	21 15       	cp	r18, r1
    6080:	31 05       	cpc	r19, r1
    6082:	f9 f0       	breq	.+62     	; 0x60c2 <malloc+0xb0>
    6084:	28 1b       	sub	r18, r24
    6086:	39 0b       	sbc	r19, r25
    6088:	24 30       	cpi	r18, 0x04	; 4
    608a:	31 05       	cpc	r19, r1
    608c:	80 f4       	brcc	.+32     	; 0x60ae <malloc+0x9c>
    608e:	8a 81       	ldd	r24, Y+2	; 0x02
    6090:	9b 81       	ldd	r25, Y+3	; 0x03
    6092:	61 15       	cp	r22, r1
    6094:	71 05       	cpc	r23, r1
    6096:	21 f0       	breq	.+8      	; 0x60a0 <malloc+0x8e>
    6098:	fb 01       	movw	r30, r22
    609a:	93 83       	std	Z+3, r25	; 0x03
    609c:	82 83       	std	Z+2, r24	; 0x02
    609e:	04 c0       	rjmp	.+8      	; 0x60a8 <malloc+0x96>
    60a0:	90 93 d1 05 	sts	0x05D1, r25	; 0x8005d1 <__flp+0x1>
    60a4:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <__flp>
    60a8:	fe 01       	movw	r30, r28
    60aa:	32 96       	adiw	r30, 0x02	; 2
    60ac:	44 c0       	rjmp	.+136    	; 0x6136 <malloc+0x124>
    60ae:	fe 01       	movw	r30, r28
    60b0:	e2 0f       	add	r30, r18
    60b2:	f3 1f       	adc	r31, r19
    60b4:	81 93       	st	Z+, r24
    60b6:	91 93       	st	Z+, r25
    60b8:	22 50       	subi	r18, 0x02	; 2
    60ba:	31 09       	sbc	r19, r1
    60bc:	39 83       	std	Y+1, r19	; 0x01
    60be:	28 83       	st	Y, r18
    60c0:	3a c0       	rjmp	.+116    	; 0x6136 <malloc+0x124>
    60c2:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <__brkval>
    60c6:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <__brkval+0x1>
    60ca:	23 2b       	or	r18, r19
    60cc:	41 f4       	brne	.+16     	; 0x60de <malloc+0xcc>
    60ce:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    60d2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    60d6:	30 93 cf 05 	sts	0x05CF, r19	; 0x8005cf <__brkval+0x1>
    60da:	20 93 ce 05 	sts	0x05CE, r18	; 0x8005ce <__brkval>
    60de:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    60e2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    60e6:	21 15       	cp	r18, r1
    60e8:	31 05       	cpc	r19, r1
    60ea:	41 f4       	brne	.+16     	; 0x60fc <malloc+0xea>
    60ec:	2d b7       	in	r18, 0x3d	; 61
    60ee:	3e b7       	in	r19, 0x3e	; 62
    60f0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    60f4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    60f8:	24 1b       	sub	r18, r20
    60fa:	35 0b       	sbc	r19, r21
    60fc:	e0 91 ce 05 	lds	r30, 0x05CE	; 0x8005ce <__brkval>
    6100:	f0 91 cf 05 	lds	r31, 0x05CF	; 0x8005cf <__brkval+0x1>
    6104:	e2 17       	cp	r30, r18
    6106:	f3 07       	cpc	r31, r19
    6108:	a0 f4       	brcc	.+40     	; 0x6132 <malloc+0x120>
    610a:	2e 1b       	sub	r18, r30
    610c:	3f 0b       	sbc	r19, r31
    610e:	28 17       	cp	r18, r24
    6110:	39 07       	cpc	r19, r25
    6112:	78 f0       	brcs	.+30     	; 0x6132 <malloc+0x120>
    6114:	ac 01       	movw	r20, r24
    6116:	4e 5f       	subi	r20, 0xFE	; 254
    6118:	5f 4f       	sbci	r21, 0xFF	; 255
    611a:	24 17       	cp	r18, r20
    611c:	35 07       	cpc	r19, r21
    611e:	48 f0       	brcs	.+18     	; 0x6132 <malloc+0x120>
    6120:	4e 0f       	add	r20, r30
    6122:	5f 1f       	adc	r21, r31
    6124:	50 93 cf 05 	sts	0x05CF, r21	; 0x8005cf <__brkval+0x1>
    6128:	40 93 ce 05 	sts	0x05CE, r20	; 0x8005ce <__brkval>
    612c:	81 93       	st	Z+, r24
    612e:	91 93       	st	Z+, r25
    6130:	02 c0       	rjmp	.+4      	; 0x6136 <malloc+0x124>
    6132:	e0 e0       	ldi	r30, 0x00	; 0
    6134:	f0 e0       	ldi	r31, 0x00	; 0
    6136:	cf 01       	movw	r24, r30
    6138:	df 91       	pop	r29
    613a:	cf 91       	pop	r28
    613c:	1f 91       	pop	r17
    613e:	0f 91       	pop	r16
    6140:	08 95       	ret

00006142 <free>:
    6142:	cf 93       	push	r28
    6144:	df 93       	push	r29
    6146:	00 97       	sbiw	r24, 0x00	; 0
    6148:	09 f4       	brne	.+2      	; 0x614c <free+0xa>
    614a:	81 c0       	rjmp	.+258    	; 0x624e <free+0x10c>
    614c:	fc 01       	movw	r30, r24
    614e:	32 97       	sbiw	r30, 0x02	; 2
    6150:	13 82       	std	Z+3, r1	; 0x03
    6152:	12 82       	std	Z+2, r1	; 0x02
    6154:	a0 91 d0 05 	lds	r26, 0x05D0	; 0x8005d0 <__flp>
    6158:	b0 91 d1 05 	lds	r27, 0x05D1	; 0x8005d1 <__flp+0x1>
    615c:	10 97       	sbiw	r26, 0x00	; 0
    615e:	81 f4       	brne	.+32     	; 0x6180 <free+0x3e>
    6160:	20 81       	ld	r18, Z
    6162:	31 81       	ldd	r19, Z+1	; 0x01
    6164:	82 0f       	add	r24, r18
    6166:	93 1f       	adc	r25, r19
    6168:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <__brkval>
    616c:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <__brkval+0x1>
    6170:	28 17       	cp	r18, r24
    6172:	39 07       	cpc	r19, r25
    6174:	51 f5       	brne	.+84     	; 0x61ca <free+0x88>
    6176:	f0 93 cf 05 	sts	0x05CF, r31	; 0x8005cf <__brkval+0x1>
    617a:	e0 93 ce 05 	sts	0x05CE, r30	; 0x8005ce <__brkval>
    617e:	67 c0       	rjmp	.+206    	; 0x624e <free+0x10c>
    6180:	ed 01       	movw	r28, r26
    6182:	20 e0       	ldi	r18, 0x00	; 0
    6184:	30 e0       	ldi	r19, 0x00	; 0
    6186:	ce 17       	cp	r28, r30
    6188:	df 07       	cpc	r29, r31
    618a:	40 f4       	brcc	.+16     	; 0x619c <free+0x5a>
    618c:	4a 81       	ldd	r20, Y+2	; 0x02
    618e:	5b 81       	ldd	r21, Y+3	; 0x03
    6190:	9e 01       	movw	r18, r28
    6192:	41 15       	cp	r20, r1
    6194:	51 05       	cpc	r21, r1
    6196:	f1 f0       	breq	.+60     	; 0x61d4 <free+0x92>
    6198:	ea 01       	movw	r28, r20
    619a:	f5 cf       	rjmp	.-22     	; 0x6186 <free+0x44>
    619c:	d3 83       	std	Z+3, r29	; 0x03
    619e:	c2 83       	std	Z+2, r28	; 0x02
    61a0:	40 81       	ld	r20, Z
    61a2:	51 81       	ldd	r21, Z+1	; 0x01
    61a4:	84 0f       	add	r24, r20
    61a6:	95 1f       	adc	r25, r21
    61a8:	c8 17       	cp	r28, r24
    61aa:	d9 07       	cpc	r29, r25
    61ac:	59 f4       	brne	.+22     	; 0x61c4 <free+0x82>
    61ae:	88 81       	ld	r24, Y
    61b0:	99 81       	ldd	r25, Y+1	; 0x01
    61b2:	84 0f       	add	r24, r20
    61b4:	95 1f       	adc	r25, r21
    61b6:	02 96       	adiw	r24, 0x02	; 2
    61b8:	91 83       	std	Z+1, r25	; 0x01
    61ba:	80 83       	st	Z, r24
    61bc:	8a 81       	ldd	r24, Y+2	; 0x02
    61be:	9b 81       	ldd	r25, Y+3	; 0x03
    61c0:	93 83       	std	Z+3, r25	; 0x03
    61c2:	82 83       	std	Z+2, r24	; 0x02
    61c4:	21 15       	cp	r18, r1
    61c6:	31 05       	cpc	r19, r1
    61c8:	29 f4       	brne	.+10     	; 0x61d4 <free+0x92>
    61ca:	f0 93 d1 05 	sts	0x05D1, r31	; 0x8005d1 <__flp+0x1>
    61ce:	e0 93 d0 05 	sts	0x05D0, r30	; 0x8005d0 <__flp>
    61d2:	3d c0       	rjmp	.+122    	; 0x624e <free+0x10c>
    61d4:	e9 01       	movw	r28, r18
    61d6:	fb 83       	std	Y+3, r31	; 0x03
    61d8:	ea 83       	std	Y+2, r30	; 0x02
    61da:	49 91       	ld	r20, Y+
    61dc:	59 91       	ld	r21, Y+
    61de:	c4 0f       	add	r28, r20
    61e0:	d5 1f       	adc	r29, r21
    61e2:	ec 17       	cp	r30, r28
    61e4:	fd 07       	cpc	r31, r29
    61e6:	61 f4       	brne	.+24     	; 0x6200 <free+0xbe>
    61e8:	80 81       	ld	r24, Z
    61ea:	91 81       	ldd	r25, Z+1	; 0x01
    61ec:	84 0f       	add	r24, r20
    61ee:	95 1f       	adc	r25, r21
    61f0:	02 96       	adiw	r24, 0x02	; 2
    61f2:	e9 01       	movw	r28, r18
    61f4:	99 83       	std	Y+1, r25	; 0x01
    61f6:	88 83       	st	Y, r24
    61f8:	82 81       	ldd	r24, Z+2	; 0x02
    61fa:	93 81       	ldd	r25, Z+3	; 0x03
    61fc:	9b 83       	std	Y+3, r25	; 0x03
    61fe:	8a 83       	std	Y+2, r24	; 0x02
    6200:	e0 e0       	ldi	r30, 0x00	; 0
    6202:	f0 e0       	ldi	r31, 0x00	; 0
    6204:	12 96       	adiw	r26, 0x02	; 2
    6206:	8d 91       	ld	r24, X+
    6208:	9c 91       	ld	r25, X
    620a:	13 97       	sbiw	r26, 0x03	; 3
    620c:	00 97       	sbiw	r24, 0x00	; 0
    620e:	19 f0       	breq	.+6      	; 0x6216 <free+0xd4>
    6210:	fd 01       	movw	r30, r26
    6212:	dc 01       	movw	r26, r24
    6214:	f7 cf       	rjmp	.-18     	; 0x6204 <free+0xc2>
    6216:	8d 91       	ld	r24, X+
    6218:	9c 91       	ld	r25, X
    621a:	11 97       	sbiw	r26, 0x01	; 1
    621c:	9d 01       	movw	r18, r26
    621e:	2e 5f       	subi	r18, 0xFE	; 254
    6220:	3f 4f       	sbci	r19, 0xFF	; 255
    6222:	82 0f       	add	r24, r18
    6224:	93 1f       	adc	r25, r19
    6226:	20 91 ce 05 	lds	r18, 0x05CE	; 0x8005ce <__brkval>
    622a:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <__brkval+0x1>
    622e:	28 17       	cp	r18, r24
    6230:	39 07       	cpc	r19, r25
    6232:	69 f4       	brne	.+26     	; 0x624e <free+0x10c>
    6234:	30 97       	sbiw	r30, 0x00	; 0
    6236:	29 f4       	brne	.+10     	; 0x6242 <free+0x100>
    6238:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <__flp+0x1>
    623c:	10 92 d0 05 	sts	0x05D0, r1	; 0x8005d0 <__flp>
    6240:	02 c0       	rjmp	.+4      	; 0x6246 <free+0x104>
    6242:	13 82       	std	Z+3, r1	; 0x03
    6244:	12 82       	std	Z+2, r1	; 0x02
    6246:	b0 93 cf 05 	sts	0x05CF, r27	; 0x8005cf <__brkval+0x1>
    624a:	a0 93 ce 05 	sts	0x05CE, r26	; 0x8005ce <__brkval>
    624e:	df 91       	pop	r29
    6250:	cf 91       	pop	r28
    6252:	08 95       	ret

00006254 <abort>:
    6254:	81 e0       	ldi	r24, 0x01	; 1
    6256:	90 e0       	ldi	r25, 0x00	; 0
    6258:	f8 94       	cli
    625a:	0c 94 56 31 	jmp	0x62ac	; 0x62ac <_exit>

0000625e <memcmp>:
    625e:	fb 01       	movw	r30, r22
    6260:	dc 01       	movw	r26, r24
    6262:	04 c0       	rjmp	.+8      	; 0x626c <memcmp+0xe>
    6264:	8d 91       	ld	r24, X+
    6266:	01 90       	ld	r0, Z+
    6268:	80 19       	sub	r24, r0
    626a:	21 f4       	brne	.+8      	; 0x6274 <memcmp+0x16>
    626c:	41 50       	subi	r20, 0x01	; 1
    626e:	50 40       	sbci	r21, 0x00	; 0
    6270:	c8 f7       	brcc	.-14     	; 0x6264 <memcmp+0x6>
    6272:	88 1b       	sub	r24, r24
    6274:	99 0b       	sbc	r25, r25
    6276:	08 95       	ret

00006278 <strchr>:
    6278:	fc 01       	movw	r30, r24
    627a:	81 91       	ld	r24, Z+
    627c:	86 17       	cp	r24, r22
    627e:	21 f0       	breq	.+8      	; 0x6288 <strchr+0x10>
    6280:	88 23       	and	r24, r24
    6282:	d9 f7       	brne	.-10     	; 0x627a <strchr+0x2>
    6284:	99 27       	eor	r25, r25
    6286:	08 95       	ret
    6288:	31 97       	sbiw	r30, 0x01	; 1
    628a:	cf 01       	movw	r24, r30
    628c:	08 95       	ret

0000628e <strncpy>:
    628e:	fb 01       	movw	r30, r22
    6290:	dc 01       	movw	r26, r24
    6292:	41 50       	subi	r20, 0x01	; 1
    6294:	50 40       	sbci	r21, 0x00	; 0
    6296:	48 f0       	brcs	.+18     	; 0x62aa <strncpy+0x1c>
    6298:	01 90       	ld	r0, Z+
    629a:	0d 92       	st	X+, r0
    629c:	00 20       	and	r0, r0
    629e:	c9 f7       	brne	.-14     	; 0x6292 <strncpy+0x4>
    62a0:	01 c0       	rjmp	.+2      	; 0x62a4 <strncpy+0x16>
    62a2:	1d 92       	st	X+, r1
    62a4:	41 50       	subi	r20, 0x01	; 1
    62a6:	50 40       	sbci	r21, 0x00	; 0
    62a8:	e0 f7       	brcc	.-8      	; 0x62a2 <strncpy+0x14>
    62aa:	08 95       	ret

000062ac <_exit>:
    62ac:	f8 94       	cli

000062ae <__stop_program>:
    62ae:	ff cf       	rjmp	.-2      	; 0x62ae <__stop_program>
