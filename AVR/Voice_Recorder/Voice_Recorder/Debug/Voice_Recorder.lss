
Voice_Recorder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017a  00800100  000061d0  00006264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000061d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fc  0080027a  0080027a  000063de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000063de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006410  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000d70  00000000  00000000  00006450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002aebd  00000000  00000000  000071c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000569b  00000000  00000000  0003207d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a1a2  00000000  00000000  00037718  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000310c  00000000  00000000  000418bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006be8  00000000  00000000  000449c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00013948  00000000  00000000  0004b5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e50  00000000  00000000  0005eef8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 01 	jmp	0x26a	; 0x26a <__dtors_end>
       4:	0c 94 bb 04 	jmp	0x976	; 0x976 <__vector_1>
       8:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__vector_2>
       c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      10:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      14:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      18:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      1c:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <__vector_7>
      20:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      24:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      28:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      2c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      30:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      34:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      38:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      3c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      40:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__vector_16>
      44:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      48:	0c 94 97 02 	jmp	0x52e	; 0x52e <__vector_18>
      4c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__vector_19>
      50:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      54:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      58:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      5c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      60:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <__vector_24>
      64:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      68:	67 0b       	sbc	r22, r23
      6a:	6b 0b       	sbc	r22, r27
      6c:	6b 0b       	sbc	r22, r27
      6e:	6b 0b       	sbc	r22, r27
      70:	6b 0b       	sbc	r22, r27
      72:	6b 0b       	sbc	r22, r27
      74:	6b 0b       	sbc	r22, r27
      76:	6b 0b       	sbc	r22, r27
      78:	7b 0a       	sbc	r7, r27
      7a:	6b 0b       	sbc	r22, r27
      7c:	6b 0b       	sbc	r22, r27
      7e:	6b 0b       	sbc	r22, r27
      80:	6b 0b       	sbc	r22, r27
      82:	6b 0b       	sbc	r22, r27
      84:	6b 0b       	sbc	r22, r27
      86:	6b 0b       	sbc	r22, r27
      88:	7b 0a       	sbc	r7, r27
      8a:	6b 0b       	sbc	r22, r27
      8c:	6b 0b       	sbc	r22, r27
      8e:	6b 0b       	sbc	r22, r27
      90:	6b 0b       	sbc	r22, r27
      92:	6b 0b       	sbc	r22, r27
      94:	6b 0b       	sbc	r22, r27
      96:	6b 0b       	sbc	r22, r27
      98:	83 0a       	sbc	r8, r19
      9a:	6b 0b       	sbc	r22, r27
      9c:	6b 0b       	sbc	r22, r27
      9e:	6b 0b       	sbc	r22, r27
      a0:	6b 0b       	sbc	r22, r27
      a2:	6b 0b       	sbc	r22, r27
      a4:	6b 0b       	sbc	r22, r27
      a6:	6b 0b       	sbc	r22, r27
      a8:	a9 0a       	sbc	r10, r25
      aa:	6b 0b       	sbc	r22, r27
      ac:	6b 0b       	sbc	r22, r27
      ae:	6b 0b       	sbc	r22, r27
      b0:	6b 0b       	sbc	r22, r27
      b2:	6b 0b       	sbc	r22, r27
      b4:	6b 0b       	sbc	r22, r27
      b6:	6b 0b       	sbc	r22, r27
      b8:	83 0a       	sbc	r8, r19
      ba:	6b 0b       	sbc	r22, r27
      bc:	6b 0b       	sbc	r22, r27
      be:	6b 0b       	sbc	r22, r27
      c0:	6b 0b       	sbc	r22, r27
      c2:	6b 0b       	sbc	r22, r27
      c4:	6b 0b       	sbc	r22, r27
      c6:	6b 0b       	sbc	r22, r27
      c8:	af 0a       	sbc	r10, r31
      ca:	6b 0b       	sbc	r22, r27
      cc:	6b 0b       	sbc	r22, r27
      ce:	6b 0b       	sbc	r22, r27
      d0:	6b 0b       	sbc	r22, r27
      d2:	6b 0b       	sbc	r22, r27
      d4:	6b 0b       	sbc	r22, r27
      d6:	6b 0b       	sbc	r22, r27
      d8:	b5 0a       	sbc	r11, r21
      da:	6b 0b       	sbc	r22, r27
      dc:	6b 0b       	sbc	r22, r27
      de:	6b 0b       	sbc	r22, r27
      e0:	6b 0b       	sbc	r22, r27
      e2:	6b 0b       	sbc	r22, r27
      e4:	6b 0b       	sbc	r22, r27
      e6:	6b 0b       	sbc	r22, r27
      e8:	c7 0a       	sbc	r12, r23
      ea:	6b 0b       	sbc	r22, r27
      ec:	6b 0b       	sbc	r22, r27
      ee:	6b 0b       	sbc	r22, r27
      f0:	6b 0b       	sbc	r22, r27
      f2:	6b 0b       	sbc	r22, r27
      f4:	6b 0b       	sbc	r22, r27
      f6:	6b 0b       	sbc	r22, r27
      f8:	f1 0a       	sbc	r15, r17
      fa:	6b 0b       	sbc	r22, r27
      fc:	6b 0b       	sbc	r22, r27
      fe:	6b 0b       	sbc	r22, r27
     100:	6b 0b       	sbc	r22, r27
     102:	6b 0b       	sbc	r22, r27
     104:	6b 0b       	sbc	r22, r27
     106:	6b 0b       	sbc	r22, r27
     108:	bb 0a       	sbc	r11, r27
     10a:	6b 0b       	sbc	r22, r27
     10c:	6b 0b       	sbc	r22, r27
     10e:	6b 0b       	sbc	r22, r27
     110:	6b 0b       	sbc	r22, r27
     112:	6b 0b       	sbc	r22, r27
     114:	6b 0b       	sbc	r22, r27
     116:	6b 0b       	sbc	r22, r27
     118:	d5 0a       	sbc	r13, r21
     11a:	6b 0b       	sbc	r22, r27
     11c:	6b 0b       	sbc	r22, r27
     11e:	6b 0b       	sbc	r22, r27
     120:	6b 0b       	sbc	r22, r27
     122:	6b 0b       	sbc	r22, r27
     124:	6b 0b       	sbc	r22, r27
     126:	6b 0b       	sbc	r22, r27
     128:	f4 0a       	sbc	r15, r20
     12a:	6b 0b       	sbc	r22, r27
     12c:	6b 0b       	sbc	r22, r27
     12e:	6b 0b       	sbc	r22, r27
     130:	6b 0b       	sbc	r22, r27
     132:	6b 0b       	sbc	r22, r27
     134:	6b 0b       	sbc	r22, r27
     136:	6b 0b       	sbc	r22, r27
     138:	f4 0a       	sbc	r15, r20
     13a:	6b 0b       	sbc	r22, r27
     13c:	6b 0b       	sbc	r22, r27
     13e:	6b 0b       	sbc	r22, r27
     140:	6b 0b       	sbc	r22, r27
     142:	6b 0b       	sbc	r22, r27
     144:	6b 0b       	sbc	r22, r27
     146:	6b 0b       	sbc	r22, r27
     148:	f4 0a       	sbc	r15, r20
     14a:	6b 0b       	sbc	r22, r27
     14c:	6b 0b       	sbc	r22, r27
     14e:	6b 0b       	sbc	r22, r27
     150:	6b 0b       	sbc	r22, r27
     152:	6b 0b       	sbc	r22, r27
     154:	6b 0b       	sbc	r22, r27
     156:	6b 0b       	sbc	r22, r27
     158:	f4 0a       	sbc	r15, r20
     15a:	6b 0b       	sbc	r22, r27
     15c:	6b 0b       	sbc	r22, r27
     15e:	6b 0b       	sbc	r22, r27
     160:	6b 0b       	sbc	r22, r27
     162:	6b 0b       	sbc	r22, r27
     164:	6b 0b       	sbc	r22, r27
     166:	6b 0b       	sbc	r22, r27
     168:	fd 0a       	sbc	r15, r29
     16a:	6b 0b       	sbc	r22, r27
     16c:	6b 0b       	sbc	r22, r27
     16e:	6b 0b       	sbc	r22, r27
     170:	6b 0b       	sbc	r22, r27
     172:	6b 0b       	sbc	r22, r27
     174:	6b 0b       	sbc	r22, r27
     176:	6b 0b       	sbc	r22, r27
     178:	2e 0b       	sbc	r18, r30
     17a:	6b 0b       	sbc	r22, r27
     17c:	6b 0b       	sbc	r22, r27
     17e:	6b 0b       	sbc	r22, r27
     180:	6b 0b       	sbc	r22, r27
     182:	6b 0b       	sbc	r22, r27
     184:	6b 0b       	sbc	r22, r27
     186:	6b 0b       	sbc	r22, r27
     188:	fd 0a       	sbc	r15, r29
     18a:	6b 0b       	sbc	r22, r27
     18c:	6b 0b       	sbc	r22, r27
     18e:	6b 0b       	sbc	r22, r27
     190:	6b 0b       	sbc	r22, r27
     192:	6b 0b       	sbc	r22, r27
     194:	6b 0b       	sbc	r22, r27
     196:	6b 0b       	sbc	r22, r27
     198:	2e 0b       	sbc	r18, r30
     19a:	6b 0b       	sbc	r22, r27
     19c:	6b 0b       	sbc	r22, r27
     19e:	6b 0b       	sbc	r22, r27
     1a0:	6b 0b       	sbc	r22, r27
     1a2:	6b 0b       	sbc	r22, r27
     1a4:	6b 0b       	sbc	r22, r27
     1a6:	6b 0b       	sbc	r22, r27
     1a8:	15 0b       	sbc	r17, r21
     1aa:	6b 0b       	sbc	r22, r27
     1ac:	6b 0b       	sbc	r22, r27
     1ae:	6b 0b       	sbc	r22, r27
     1b0:	6b 0b       	sbc	r22, r27
     1b2:	6b 0b       	sbc	r22, r27
     1b4:	6b 0b       	sbc	r22, r27
     1b6:	6b 0b       	sbc	r22, r27
     1b8:	32 0b       	sbc	r19, r18
     1ba:	6b 0b       	sbc	r22, r27
     1bc:	6b 0b       	sbc	r22, r27
     1be:	6b 0b       	sbc	r22, r27
     1c0:	6b 0b       	sbc	r22, r27
     1c2:	6b 0b       	sbc	r22, r27
     1c4:	6b 0b       	sbc	r22, r27
     1c6:	6b 0b       	sbc	r22, r27
     1c8:	32 0b       	sbc	r19, r18
     1ca:	6b 0b       	sbc	r22, r27
     1cc:	6b 0b       	sbc	r22, r27
     1ce:	6b 0b       	sbc	r22, r27
     1d0:	6b 0b       	sbc	r22, r27
     1d2:	6b 0b       	sbc	r22, r27
     1d4:	6b 0b       	sbc	r22, r27
     1d6:	6b 0b       	sbc	r22, r27
     1d8:	47 0b       	sbc	r20, r23
     1da:	6b 0b       	sbc	r22, r27
     1dc:	6b 0b       	sbc	r22, r27
     1de:	6b 0b       	sbc	r22, r27
     1e0:	6b 0b       	sbc	r22, r27
     1e2:	6b 0b       	sbc	r22, r27
     1e4:	6b 0b       	sbc	r22, r27
     1e6:	6b 0b       	sbc	r22, r27
     1e8:	61 0b       	sbc	r22, r17
     1ea:	6b 0b       	sbc	r22, r27
     1ec:	6b 0b       	sbc	r22, r27
     1ee:	6b 0b       	sbc	r22, r27
     1f0:	6b 0b       	sbc	r22, r27
     1f2:	6b 0b       	sbc	r22, r27
     1f4:	6b 0b       	sbc	r22, r27
     1f6:	6b 0b       	sbc	r22, r27
     1f8:	61 0b       	sbc	r22, r17

000001fa <__trampolines_end>:
     1fa:	02 00       	Address 0x000001fa is out of bounds.
.word	0xffff	; ????

000001fb <digital_pin_to_timer_PGM>:
     1fb:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     20b:	00 00 00 00                                         ....

0000020f <digital_pin_to_bit_mask_PGM>:
     20f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     21f:	04 08 10 20                                         ... 

00000223 <digital_pin_to_port_PGM>:
     223:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     233:	03 03 03 03                                         ....

00000237 <port_to_output_PGM>:
     237:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000241 <port_to_mode_PGM>:
     241:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000024b <_ZZN6SdFile10make83NameEPKcPhE3__c>:
     24b:	7c 3c 3e 5e 2b 3d 3f 2f 5b 5d 3b 2c 2a 22 5c 00     |<>^+=?/[];,*"\.
	...

0000025c <__ctors_start>:
     25c:	f5 02       	muls	r31, r21
     25e:	50 03       	mulsu	r21, r16
     260:	8b 0c       	add	r8, r11
     262:	81 11       	cpse	r24, r1
     264:	06 15       	cp	r16, r6
     266:	df 2c       	mov	r13, r15

00000268 <__ctors_end>:
     268:	e6 2c       	mov	r14, r6

0000026a <__dtors_end>:
     26a:	11 24       	eor	r1, r1
     26c:	1f be       	out	0x3f, r1	; 63
     26e:	cf ef       	ldi	r28, 0xFF	; 255
     270:	d8 e0       	ldi	r29, 0x08	; 8
     272:	de bf       	out	0x3e, r29	; 62
     274:	cd bf       	out	0x3d, r28	; 61

00000276 <__do_copy_data>:
     276:	12 e0       	ldi	r17, 0x02	; 2
     278:	a0 e0       	ldi	r26, 0x00	; 0
     27a:	b1 e0       	ldi	r27, 0x01	; 1
     27c:	e0 ed       	ldi	r30, 0xD0	; 208
     27e:	f1 e6       	ldi	r31, 0x61	; 97
     280:	02 c0       	rjmp	.+4      	; 0x286 <__do_copy_data+0x10>
     282:	05 90       	lpm	r0, Z+
     284:	0d 92       	st	X+, r0
     286:	aa 37       	cpi	r26, 0x7A	; 122
     288:	b1 07       	cpc	r27, r17
     28a:	d9 f7       	brne	.-10     	; 0x282 <__do_copy_data+0xc>

0000028c <__do_clear_bss>:
     28c:	26 e0       	ldi	r18, 0x06	; 6
     28e:	aa e7       	ldi	r26, 0x7A	; 122
     290:	b2 e0       	ldi	r27, 0x02	; 2
     292:	01 c0       	rjmp	.+2      	; 0x296 <.do_clear_bss_start>

00000294 <.do_clear_bss_loop>:
     294:	1d 92       	st	X+, r1

00000296 <.do_clear_bss_start>:
     296:	a6 37       	cpi	r26, 0x76	; 118
     298:	b2 07       	cpc	r27, r18
     29a:	e1 f7       	brne	.-8      	; 0x294 <.do_clear_bss_loop>

0000029c <__do_global_ctors>:
     29c:	11 e0       	ldi	r17, 0x01	; 1
     29e:	c4 e3       	ldi	r28, 0x34	; 52
     2a0:	d1 e0       	ldi	r29, 0x01	; 1
     2a2:	04 c0       	rjmp	.+8      	; 0x2ac <__do_global_ctors+0x10>
     2a4:	21 97       	sbiw	r28, 0x01	; 1
     2a6:	fe 01       	movw	r30, r28
     2a8:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <__tablejump2__>
     2ac:	ce 32       	cpi	r28, 0x2E	; 46
     2ae:	d1 07       	cpc	r29, r17
     2b0:	c9 f7       	brne	.-14     	; 0x2a4 <__do_global_ctors+0x8>
     2b2:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <main>
     2b6:	0c 94 db 30 	jmp	0x61b6	; 0x61b6 <__do_global_dtors>

000002ba <__bad_interrupt>:
     2ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002be <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
     2be:	0e 94 68 30 	call	0x60d0	; 0x60d0 <abort>

000002c2 <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     2c2:	fc 01       	movw	r30, r24
     2c4:	21 8d       	ldd	r18, Z+25	; 0x19
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	20 5c       	subi	r18, 0xC0	; 192
     2ca:	3f 4f       	sbci	r19, 0xFF	; 255
     2cc:	82 8d       	ldd	r24, Z+26	; 0x1a
     2ce:	a9 01       	movw	r20, r18
     2d0:	48 1b       	sub	r20, r24
     2d2:	51 09       	sbc	r21, r1
     2d4:	ca 01       	movw	r24, r20
     2d6:	8f 73       	andi	r24, 0x3F	; 63
     2d8:	99 27       	eor	r25, r25
     2da:	08 95       	ret

000002dc <_ZN14HardwareSerial4peekEv>:
     2dc:	fc 01       	movw	r30, r24
     2de:	91 8d       	ldd	r25, Z+25	; 0x19
     2e0:	82 8d       	ldd	r24, Z+26	; 0x1a
     2e2:	98 17       	cp	r25, r24
     2e4:	31 f0       	breq	.+12     	; 0x2f2 <_ZN14HardwareSerial4peekEv+0x16>
     2e6:	82 8d       	ldd	r24, Z+26	; 0x1a
     2e8:	e8 0f       	add	r30, r24
     2ea:	f1 1d       	adc	r31, r1
     2ec:	85 8d       	ldd	r24, Z+29	; 0x1d
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	08 95       	ret
     2f2:	8f ef       	ldi	r24, 0xFF	; 255
     2f4:	9f ef       	ldi	r25, 0xFF	; 255
     2f6:	08 95       	ret

000002f8 <_ZN14HardwareSerial4readEv>:
     2f8:	fc 01       	movw	r30, r24
     2fa:	91 8d       	ldd	r25, Z+25	; 0x19
     2fc:	82 8d       	ldd	r24, Z+26	; 0x1a
     2fe:	98 17       	cp	r25, r24
     300:	61 f0       	breq	.+24     	; 0x31a <_ZN14HardwareSerial4readEv+0x22>
     302:	82 8d       	ldd	r24, Z+26	; 0x1a
     304:	df 01       	movw	r26, r30
     306:	a8 0f       	add	r26, r24
     308:	b1 1d       	adc	r27, r1
     30a:	5d 96       	adiw	r26, 0x1d	; 29
     30c:	8c 91       	ld	r24, X
     30e:	92 8d       	ldd	r25, Z+26	; 0x1a
     310:	9f 5f       	subi	r25, 0xFF	; 255
     312:	9f 73       	andi	r25, 0x3F	; 63
     314:	92 8f       	std	Z+26, r25	; 0x1a
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	08 95       	ret
     31a:	8f ef       	ldi	r24, 0xFF	; 255
     31c:	9f ef       	ldi	r25, 0xFF	; 255
     31e:	08 95       	ret

00000320 <_ZN14HardwareSerial17availableForWriteEv>:
     320:	fc 01       	movw	r30, r24
     322:	23 8d       	ldd	r18, Z+27	; 0x1b
     324:	34 8d       	ldd	r19, Z+28	; 0x1c
     326:	23 17       	cp	r18, r19
     328:	38 f0       	brcs	.+14     	; 0x338 <_ZN14HardwareSerial17availableForWriteEv+0x18>
     32a:	8f e3       	ldi	r24, 0x3F	; 63
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	82 1b       	sub	r24, r18
     330:	91 09       	sbc	r25, r1
     332:	83 0f       	add	r24, r19
     334:	91 1d       	adc	r25, r1
     336:	08 95       	ret
     338:	83 2f       	mov	r24, r19
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	82 1b       	sub	r24, r18
     33e:	91 09       	sbc	r25, r1
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	08 95       	ret

00000344 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     344:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     346:	84 8d       	ldd	r24, Z+28	; 0x1c
     348:	df 01       	movw	r26, r30
     34a:	a8 0f       	add	r26, r24
     34c:	b1 1d       	adc	r27, r1
     34e:	a3 5a       	subi	r26, 0xA3	; 163
     350:	bf 4f       	sbci	r27, 0xFF	; 255
     352:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     354:	24 8d       	ldd	r18, Z+28	; 0x1c
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	2f 5f       	subi	r18, 0xFF	; 255
     35a:	3f 4f       	sbci	r19, 0xFF	; 255
     35c:	2f 73       	andi	r18, 0x3F	; 63
     35e:	30 78       	andi	r19, 0x80	; 128
     360:	33 23       	and	r19, r19
     362:	34 f4       	brge	.+12     	; 0x370 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
     364:	21 50       	subi	r18, 0x01	; 1
     366:	31 09       	sbc	r19, r1
     368:	20 6c       	ori	r18, 0xC0	; 192
     36a:	3f 6f       	ori	r19, 0xFF	; 255
     36c:	2f 5f       	subi	r18, 0xFF	; 255
     36e:	3f 4f       	sbci	r19, 0xFF	; 255
     370:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     372:	a6 89       	ldd	r26, Z+22	; 0x16
     374:	b7 89       	ldd	r27, Z+23	; 0x17
     376:	8c 93       	st	X, r24
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     378:	a0 89       	ldd	r26, Z+16	; 0x10
     37a:	b1 89       	ldd	r27, Z+17	; 0x11
     37c:	8c 91       	ld	r24, X
     37e:	83 70       	andi	r24, 0x03	; 3
     380:	80 64       	ori	r24, 0x40	; 64
     382:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     384:	93 8d       	ldd	r25, Z+27	; 0x1b
     386:	84 8d       	ldd	r24, Z+28	; 0x1c
     388:	98 13       	cpse	r25, r24
     38a:	06 c0       	rjmp	.+12     	; 0x398 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     38c:	02 88       	ldd	r0, Z+18	; 0x12
     38e:	f3 89       	ldd	r31, Z+19	; 0x13
     390:	e0 2d       	mov	r30, r0
     392:	80 81       	ld	r24, Z
     394:	8f 7d       	andi	r24, 0xDF	; 223
     396:	80 83       	st	Z, r24
     398:	08 95       	ret

0000039a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     3a2:	18 8d       	ldd	r17, Y+24	; 0x18
     3a4:	11 23       	and	r17, r17
     3a6:	29 f1       	breq	.+74     	; 0x3f2 <_ZN14HardwareSerial5flushEv+0x58>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     3a8:	ea 89       	ldd	r30, Y+18	; 0x12
     3aa:	fb 89       	ldd	r31, Y+19	; 0x13
     3ac:	80 81       	ld	r24, Z
     3ae:	85 fd       	sbrc	r24, 5
     3b0:	07 c0       	rjmp	.+14     	; 0x3c0 <_ZN14HardwareSerial5flushEv+0x26>
     3b2:	a8 89       	ldd	r26, Y+16	; 0x10
     3b4:	b9 89       	ldd	r27, Y+17	; 0x11
     3b6:	8c 91       	ld	r24, X
     3b8:	86 fd       	sbrc	r24, 6
     3ba:	04 c0       	rjmp	.+8      	; 0x3c4 <_ZN14HardwareSerial5flushEv+0x2a>
     3bc:	81 2f       	mov	r24, r17
     3be:	03 c0       	rjmp	.+6      	; 0x3c6 <_ZN14HardwareSerial5flushEv+0x2c>
     3c0:	81 2f       	mov	r24, r17
     3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <_ZN14HardwareSerial5flushEv+0x2c>
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	88 23       	and	r24, r24
     3c8:	a1 f0       	breq	.+40     	; 0x3f2 <_ZN14HardwareSerial5flushEv+0x58>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	07 fc       	sbrc	r0, 7
     3ce:	05 c0       	rjmp	.+10     	; 0x3da <_ZN14HardwareSerial5flushEv+0x40>
     3d0:	90 81       	ld	r25, Z
     3d2:	95 fd       	sbrc	r25, 5
     3d4:	03 c0       	rjmp	.+6      	; 0x3dc <_ZN14HardwareSerial5flushEv+0x42>
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	01 c0       	rjmp	.+2      	; 0x3dc <_ZN14HardwareSerial5flushEv+0x42>
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	88 23       	and	r24, r24
     3de:	21 f3       	breq	.-56     	; 0x3a8 <_ZN14HardwareSerial5flushEv+0xe>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     3e0:	e8 89       	ldd	r30, Y+16	; 0x10
     3e2:	f9 89       	ldd	r31, Y+17	; 0x11
     3e4:	80 81       	ld	r24, Z
     3e6:	85 ff       	sbrs	r24, 5
     3e8:	df cf       	rjmp	.-66     	; 0x3a8 <_ZN14HardwareSerial5flushEv+0xe>
	  _tx_udr_empty_irq();
     3ea:	ce 01       	movw	r24, r28
     3ec:	0e 94 a2 01 	call	0x344	; 0x344 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     3f0:	db cf       	rjmp	.-74     	; 0x3a8 <_ZN14HardwareSerial5flushEv+0xe>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	1f 91       	pop	r17
     3f8:	08 95       	ret

000003fa <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     3fa:	0f 93       	push	r16
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	ec 01       	movw	r28, r24
  _written = true;
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     408:	9b 8d       	ldd	r25, Y+27	; 0x1b
     40a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     40c:	98 13       	cpse	r25, r24
     40e:	07 c0       	rjmp	.+14     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     410:	e8 89       	ldd	r30, Y+16	; 0x10
     412:	f9 89       	ldd	r31, Y+17	; 0x11
     414:	80 81       	ld	r24, Z
     416:	85 fd       	sbrc	r24, 5
     418:	04 c0       	rjmp	.+8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	03 c0       	rjmp	.+6      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	01 c0       	rjmp	.+2      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	88 23       	and	r24, r24
     426:	91 f0       	breq	.+36     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     428:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     42a:	f8 94       	cli
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	99 23       	and	r25, r25
     430:	59 f0       	breq	.+22     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
      *_udr = c;
     432:	ee 89       	ldd	r30, Y+22	; 0x16
     434:	ff 89       	ldd	r31, Y+23	; 0x17
     436:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     438:	e8 89       	ldd	r30, Y+16	; 0x10
     43a:	f9 89       	ldd	r31, Y+17	; 0x11
     43c:	90 81       	ld	r25, Z
     43e:	93 70       	andi	r25, 0x03	; 3
     440:	90 64       	ori	r25, 0x40	; 64
     442:	90 83       	st	Z, r25
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	f3 cf       	rjmp	.-26     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     448:	8f bf       	out	0x3f, r24	; 63
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
#else
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
     44a:	34 c0       	rjmp	.+104    	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     44c:	2b 8d       	ldd	r18, Y+27	; 0x1b
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	2f 5f       	subi	r18, 0xFF	; 255
     452:	3f 4f       	sbci	r19, 0xFF	; 255
     454:	2f 73       	andi	r18, 0x3F	; 63
     456:	30 78       	andi	r19, 0x80	; 128
     458:	33 23       	and	r19, r19
     45a:	34 f4       	brge	.+12     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     45c:	21 50       	subi	r18, 0x01	; 1
     45e:	31 09       	sbc	r19, r1
     460:	20 6c       	ori	r18, 0xC0	; 192
     462:	3f 6f       	ori	r19, 0xFF	; 255
     464:	2f 5f       	subi	r18, 0xFF	; 255
     466:	3f 4f       	sbci	r19, 0xFF	; 255
     468:	16 2f       	mov	r17, r22
     46a:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     46c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     46e:	08 13       	cpse	r16, r24
     470:	0c c0       	rjmp	.+24     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
    if (bit_is_clear(SREG, SREG_I)) {
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	07 fc       	sbrc	r0, 7
     476:	fa cf       	rjmp	.-12     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     478:	e8 89       	ldd	r30, Y+16	; 0x10
     47a:	f9 89       	ldd	r31, Y+17	; 0x11
     47c:	80 81       	ld	r24, Z
     47e:	85 ff       	sbrs	r24, 5
     480:	f5 cf       	rjmp	.-22     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
	_tx_udr_empty_irq();
     482:	ce 01       	movw	r24, r28
     484:	0e 94 a2 01 	call	0x344	; 0x344 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     488:	f1 cf       	rjmp	.-30     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     48a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     48c:	fe 01       	movw	r30, r28
     48e:	e8 0f       	add	r30, r24
     490:	f1 1d       	adc	r31, r1
     492:	e3 5a       	subi	r30, 0xA3	; 163
     494:	ff 4f       	sbci	r31, 0xFF	; 255
     496:	10 83       	st	Z, r17

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     498:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     49a:	f8 94       	cli
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	88 23       	and	r24, r24
     4a0:	41 f0       	breq	.+16     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
    _tx_buffer_head = i;
     4a2:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     4a4:	ea 89       	ldd	r30, Y+18	; 0x12
     4a6:	fb 89       	ldd	r31, Y+19	; 0x13
     4a8:	80 81       	ld	r24, Z
     4aa:	80 62       	ori	r24, 0x20	; 32
     4ac:	80 83       	st	Z, r24
  _tx_buffer[_tx_buffer_head] = c;

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	f6 cf       	rjmp	.-20     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4b2:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	08 95       	ret

000004c2 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	08 95       	ret

000004c8 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     4c8:	08 95       	ret

000004ca <_Z41__static_initialization_and_destruction_0ii>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
     4ca:	01 97       	sbiw	r24, 0x01	; 1
     4cc:	79 f5       	brne	.+94     	; 0x52c <_Z41__static_initialization_and_destruction_0ii+0x62>
     4ce:	6f 3f       	cpi	r22, 0xFF	; 255
     4d0:	7f 4f       	sbci	r23, 0xFF	; 255
     4d2:	61 f5       	brne	.+88     	; 0x52c <_Z41__static_initialization_and_destruction_0ii+0x62>
     4d4:	ea e7       	ldi	r30, 0x7A	; 122
     4d6:	f2 e0       	ldi	r31, 0x02	; 2
     4d8:	13 82       	std	Z+3, r1	; 0x03
     4da:	12 82       	std	Z+2, r1	; 0x02
     4dc:	88 ee       	ldi	r24, 0xE8	; 232
     4de:	93 e0       	ldi	r25, 0x03	; 3
     4e0:	a0 e0       	ldi	r26, 0x00	; 0
     4e2:	b0 e0       	ldi	r27, 0x00	; 0
     4e4:	84 83       	std	Z+4, r24	; 0x04
     4e6:	95 83       	std	Z+5, r25	; 0x05
     4e8:	a6 83       	std	Z+6, r26	; 0x06
     4ea:	b7 83       	std	Z+7, r27	; 0x07
     4ec:	81 e7       	ldi	r24, 0x71	; 113
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	91 83       	std	Z+1, r25	; 0x01
     4f2:	80 83       	st	Z, r24
     4f4:	85 ec       	ldi	r24, 0xC5	; 197
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	95 87       	std	Z+13, r25	; 0x0d
     4fa:	84 87       	std	Z+12, r24	; 0x0c
     4fc:	84 ec       	ldi	r24, 0xC4	; 196
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	97 87       	std	Z+15, r25	; 0x0f
     502:	86 87       	std	Z+14, r24	; 0x0e
     504:	80 ec       	ldi	r24, 0xC0	; 192
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	91 8b       	std	Z+17, r25	; 0x11
     50a:	80 8b       	std	Z+16, r24	; 0x10
     50c:	81 ec       	ldi	r24, 0xC1	; 193
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	93 8b       	std	Z+19, r25	; 0x13
     512:	82 8b       	std	Z+18, r24	; 0x12
     514:	82 ec       	ldi	r24, 0xC2	; 194
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	95 8b       	std	Z+21, r25	; 0x15
     51a:	84 8b       	std	Z+20, r24	; 0x14
     51c:	86 ec       	ldi	r24, 0xC6	; 198
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	97 8b       	std	Z+23, r25	; 0x17
     522:	86 8b       	std	Z+22, r24	; 0x16
     524:	11 8e       	std	Z+25, r1	; 0x19
     526:	12 8e       	std	Z+26, r1	; 0x1a
     528:	13 8e       	std	Z+27, r1	; 0x1b
     52a:	14 8e       	std	Z+28, r1	; 0x1c
     52c:	08 95       	ret

0000052e <__vector_18>:
     52e:	1f 92       	push	r1
     530:	0f 92       	push	r0
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	0f 92       	push	r0
     536:	11 24       	eor	r1, r1
     538:	2f 93       	push	r18
     53a:	8f 93       	push	r24
     53c:	9f 93       	push	r25
     53e:	af 93       	push	r26
     540:	bf 93       	push	r27
     542:	ef 93       	push	r30
     544:	ff 93       	push	r31
     546:	e0 91 8a 02 	lds	r30, 0x028A	; 0x80028a <__data_end+0x10>
     54a:	f0 91 8b 02 	lds	r31, 0x028B	; 0x80028b <__data_end+0x11>
     54e:	80 81       	ld	r24, Z
     550:	82 fd       	sbrc	r24, 2
     552:	14 c0       	rjmp	.+40     	; 0x57c <__vector_18+0x4e>
     554:	ea e7       	ldi	r30, 0x7A	; 122
     556:	f2 e0       	ldi	r31, 0x02	; 2
     558:	a6 89       	ldd	r26, Z+22	; 0x16
     55a:	b7 89       	ldd	r27, Z+23	; 0x17
     55c:	2c 91       	ld	r18, X
     55e:	81 8d       	ldd	r24, Z+25	; 0x19
     560:	8f 5f       	subi	r24, 0xFF	; 255
     562:	8f 73       	andi	r24, 0x3F	; 63
     564:	92 8d       	ldd	r25, Z+26	; 0x1a
     566:	89 17       	cp	r24, r25
     568:	71 f0       	breq	.+28     	; 0x586 <__vector_18+0x58>
     56a:	df 01       	movw	r26, r30
     56c:	e1 8d       	ldd	r30, Z+25	; 0x19
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	e6 58       	subi	r30, 0x86	; 134
     572:	fd 4f       	sbci	r31, 0xFD	; 253
     574:	25 8f       	std	Z+29, r18	; 0x1d
     576:	59 96       	adiw	r26, 0x19	; 25
     578:	8c 93       	st	X, r24
     57a:	05 c0       	rjmp	.+10     	; 0x586 <__vector_18+0x58>
     57c:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <__data_end+0x16>
     580:	f0 91 91 02 	lds	r31, 0x0291	; 0x800291 <__data_end+0x17>
     584:	80 81       	ld	r24, Z
     586:	ff 91       	pop	r31
     588:	ef 91       	pop	r30
     58a:	bf 91       	pop	r27
     58c:	af 91       	pop	r26
     58e:	9f 91       	pop	r25
     590:	8f 91       	pop	r24
     592:	2f 91       	pop	r18
     594:	0f 90       	pop	r0
     596:	0f be       	out	0x3f, r0	; 63
     598:	0f 90       	pop	r0
     59a:	1f 90       	pop	r1
     59c:	18 95       	reti

0000059e <__vector_19>:
     59e:	1f 92       	push	r1
     5a0:	0f 92       	push	r0
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	0f 92       	push	r0
     5a6:	11 24       	eor	r1, r1
     5a8:	2f 93       	push	r18
     5aa:	3f 93       	push	r19
     5ac:	4f 93       	push	r20
     5ae:	5f 93       	push	r21
     5b0:	6f 93       	push	r22
     5b2:	7f 93       	push	r23
     5b4:	8f 93       	push	r24
     5b6:	9f 93       	push	r25
     5b8:	af 93       	push	r26
     5ba:	bf 93       	push	r27
     5bc:	ef 93       	push	r30
     5be:	ff 93       	push	r31
     5c0:	8a e7       	ldi	r24, 0x7A	; 122
     5c2:	92 e0       	ldi	r25, 0x02	; 2
     5c4:	0e 94 a2 01 	call	0x344	; 0x344 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     5c8:	ff 91       	pop	r31
     5ca:	ef 91       	pop	r30
     5cc:	bf 91       	pop	r27
     5ce:	af 91       	pop	r26
     5d0:	9f 91       	pop	r25
     5d2:	8f 91       	pop	r24
     5d4:	7f 91       	pop	r23
     5d6:	6f 91       	pop	r22
     5d8:	5f 91       	pop	r21
     5da:	4f 91       	pop	r20
     5dc:	3f 91       	pop	r19
     5de:	2f 91       	pop	r18
     5e0:	0f 90       	pop	r0
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	0f 90       	pop	r0
     5e6:	1f 90       	pop	r1
     5e8:	18 95       	reti

000005ea <_GLOBAL__sub_I___vector_18>:
     5ea:	6f ef       	ldi	r22, 0xFF	; 255
     5ec:	7f ef       	ldi	r23, 0xFF	; 255
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 65 02 	call	0x4ca	; 0x4ca <_Z41__static_initialization_and_destruction_0ii>
     5f6:	08 95       	ret

000005f8 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
     5f8:	08 95       	ret

000005fa <_ZNK9IPAddress7printToER5Print>:
}

bool IPAddress::operator==(const uint8_t* addr) const
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}
     5fa:	cf 92       	push	r12
     5fc:	df 92       	push	r13
     5fe:	ef 92       	push	r14
     600:	ff 92       	push	r15
     602:	0f 93       	push	r16
     604:	1f 93       	push	r17
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	6c 01       	movw	r12, r24
     60c:	7b 01       	movw	r14, r22
     60e:	00 e0       	ldi	r16, 0x00	; 0
     610:	10 e0       	ldi	r17, 0x00	; 0
     612:	c0 e0       	ldi	r28, 0x00	; 0
     614:	d0 e0       	ldi	r29, 0x00	; 0
     616:	03 30       	cpi	r16, 0x03	; 3
     618:	11 05       	cpc	r17, r1
     61a:	a4 f4       	brge	.+40     	; 0x644 <_ZNK9IPAddress7printToER5Print+0x4a>
     61c:	f6 01       	movw	r30, r12
     61e:	e0 0f       	add	r30, r16
     620:	f1 1f       	adc	r31, r17
     622:	62 81       	ldd	r22, Z+2	; 0x02
     624:	4a e0       	ldi	r20, 0x0A	; 10
     626:	50 e0       	ldi	r21, 0x00	; 0
     628:	c7 01       	movw	r24, r14
     62a:	0e 94 13 04 	call	0x826	; 0x826 <_ZN5Print5printEhi>
     62e:	c8 0f       	add	r28, r24
     630:	d9 1f       	adc	r29, r25
     632:	6e e2       	ldi	r22, 0x2E	; 46
     634:	c7 01       	movw	r24, r14
     636:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Print5printEc>
     63a:	c8 0f       	add	r28, r24
     63c:	d9 1f       	adc	r29, r25
     63e:	0f 5f       	subi	r16, 0xFF	; 255
     640:	1f 4f       	sbci	r17, 0xFF	; 255
     642:	e9 cf       	rjmp	.-46     	; 0x616 <_ZNK9IPAddress7printToER5Print+0x1c>
     644:	f6 01       	movw	r30, r12
     646:	65 81       	ldd	r22, Z+5	; 0x05
     648:	4a e0       	ldi	r20, 0x0A	; 10
     64a:	50 e0       	ldi	r21, 0x00	; 0
     64c:	c7 01       	movw	r24, r14
     64e:	0e 94 13 04 	call	0x826	; 0x826 <_ZN5Print5printEhi>
     652:	8c 0f       	add	r24, r28
     654:	9d 1f       	adc	r25, r29
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	1f 91       	pop	r17
     65c:	0f 91       	pop	r16
     65e:	ff 90       	pop	r15
     660:	ef 90       	pop	r14
     662:	df 90       	pop	r13
     664:	cf 90       	pop	r12
     666:	08 95       	ret

00000668 <_ZN9IPAddressC1Ehhhh>:
     668:	0f 93       	push	r16
     66a:	fc 01       	movw	r30, r24
     66c:	83 e8       	ldi	r24, 0x83	; 131
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	91 83       	std	Z+1, r25	; 0x01
     672:	80 83       	st	Z, r24
     674:	62 83       	std	Z+2, r22	; 0x02
     676:	43 83       	std	Z+3, r20	; 0x03
     678:	24 83       	std	Z+4, r18	; 0x04
     67a:	05 83       	std	Z+5, r16	; 0x05
     67c:	0f 91       	pop	r16
     67e:	08 95       	ret

00000680 <_Z41__static_initialization_and_destruction_0ii>:
     680:	0f 93       	push	r16
     682:	01 97       	sbiw	r24, 0x01	; 1
     684:	59 f4       	brne	.+22     	; 0x69c <_Z41__static_initialization_and_destruction_0ii+0x1c>
     686:	6f 3f       	cpi	r22, 0xFF	; 255
     688:	7f 4f       	sbci	r23, 0xFF	; 255
     68a:	41 f4       	brne	.+16     	; 0x69c <_Z41__static_initialization_and_destruction_0ii+0x1c>
     68c:	00 e0       	ldi	r16, 0x00	; 0
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	87 e1       	ldi	r24, 0x17	; 23
     696:	93 e0       	ldi	r25, 0x03	; 3
     698:	0e 94 34 03 	call	0x668	; 0x668 <_ZN9IPAddressC1Ehhhh>
     69c:	0f 91       	pop	r16
     69e:	08 95       	ret

000006a0 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    return n;
}
     6a0:	6f ef       	ldi	r22, 0xFF	; 255
     6a2:	7f ef       	ldi	r23, 0xFF	; 255
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 40 03 	call	0x680	; 0x680 <_Z41__static_initialization_and_destruction_0ii>
     6ac:	08 95       	ret

000006ae <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     6ae:	cf 92       	push	r12
     6b0:	df 92       	push	r13
     6b2:	ef 92       	push	r14
     6b4:	ff 92       	push	r15
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	8c 01       	movw	r16, r24
     6c0:	db 01       	movw	r26, r22
     6c2:	c0 e0       	ldi	r28, 0x00	; 0
     6c4:	d0 e0       	ldi	r29, 0x00	; 0
     6c6:	7a 01       	movw	r14, r20
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	e8 1a       	sub	r14, r24
     6cc:	f1 08       	sbc	r15, r1
     6ce:	45 2b       	or	r20, r21
     6d0:	a1 f0       	breq	.+40     	; 0x6fa <_ZN5Print5writeEPKhj+0x4c>
     6d2:	f8 01       	movw	r30, r16
     6d4:	80 81       	ld	r24, Z
     6d6:	91 81       	ldd	r25, Z+1	; 0x01
     6d8:	fc 01       	movw	r30, r24
     6da:	20 81       	ld	r18, Z
     6dc:	31 81       	ldd	r19, Z+1	; 0x01
     6de:	6d 01       	movw	r12, r26
     6e0:	ff ef       	ldi	r31, 0xFF	; 255
     6e2:	cf 1a       	sub	r12, r31
     6e4:	df 0a       	sbc	r13, r31
     6e6:	6c 91       	ld	r22, X
     6e8:	c8 01       	movw	r24, r16
     6ea:	f9 01       	movw	r30, r18
     6ec:	09 95       	icall
     6ee:	89 2b       	or	r24, r25
     6f0:	21 f0       	breq	.+8      	; 0x6fa <_ZN5Print5writeEPKhj+0x4c>
     6f2:	21 96       	adiw	r28, 0x01	; 1
     6f4:	a7 01       	movw	r20, r14
     6f6:	d6 01       	movw	r26, r12
     6f8:	e6 cf       	rjmp	.-52     	; 0x6c6 <_ZN5Print5writeEPKhj+0x18>
     6fa:	ce 01       	movw	r24, r28
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	ff 90       	pop	r15
     706:	ef 90       	pop	r14
     708:	df 90       	pop	r13
     70a:	cf 90       	pop	r12
     70c:	08 95       	ret

0000070e <_ZN5Print5printERK6String>:
     70e:	db 01       	movw	r26, r22
     710:	14 96       	adiw	r26, 0x04	; 4
     712:	4d 91       	ld	r20, X+
     714:	5c 91       	ld	r21, X
     716:	15 97       	sbiw	r26, 0x05	; 5
     718:	6d 91       	ld	r22, X+
     71a:	7c 91       	ld	r23, X
     71c:	dc 01       	movw	r26, r24
     71e:	ed 91       	ld	r30, X+
     720:	fc 91       	ld	r31, X
     722:	02 80       	ldd	r0, Z+2	; 0x02
     724:	f3 81       	ldd	r31, Z+3	; 0x03
     726:	e0 2d       	mov	r30, r0
     728:	09 95       	icall
     72a:	08 95       	ret

0000072c <_ZN5Print5printEc>:
     72c:	dc 01       	movw	r26, r24
     72e:	ed 91       	ld	r30, X+
     730:	fc 91       	ld	r31, X
     732:	01 90       	ld	r0, Z+
     734:	f0 81       	ld	r31, Z
     736:	e0 2d       	mov	r30, r0
     738:	09 95       	icall
     73a:	08 95       	ret

0000073c <_ZN5Print11printNumberEmh>:
     73c:	8f 92       	push	r8
     73e:	9f 92       	push	r9
     740:	af 92       	push	r10
     742:	bf 92       	push	r11
     744:	df 92       	push	r13
     746:	ef 92       	push	r14
     748:	ff 92       	push	r15
     74a:	0f 93       	push	r16
     74c:	1f 93       	push	r17
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
     756:	a1 97       	sbiw	r28, 0x21	; 33
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	cd bf       	out	0x3d, r28	; 61
     762:	7c 01       	movw	r14, r24
     764:	cb 01       	movw	r24, r22
     766:	ba 01       	movw	r22, r20
     768:	d2 2e       	mov	r13, r18
     76a:	19 a2       	std	Y+33, r1	; 0x21
     76c:	21 e0       	ldi	r18, 0x01	; 1
     76e:	2d 15       	cp	r18, r13
     770:	20 f0       	brcs	.+8      	; 0x77a <_ZN5Print11printNumberEmh+0x3e>
     772:	0f 2e       	mov	r0, r31
     774:	fa e0       	ldi	r31, 0x0A	; 10
     776:	df 2e       	mov	r13, r31
     778:	f0 2d       	mov	r31, r0
     77a:	8e 01       	movw	r16, r28
     77c:	0f 5d       	subi	r16, 0xDF	; 223
     77e:	1f 4f       	sbci	r17, 0xFF	; 255
     780:	8d 2c       	mov	r8, r13
     782:	91 2c       	mov	r9, r1
     784:	a1 2c       	mov	r10, r1
     786:	b1 2c       	mov	r11, r1
     788:	a5 01       	movw	r20, r10
     78a:	94 01       	movw	r18, r8
     78c:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__udivmodsi4>
     790:	e6 2f       	mov	r30, r22
     792:	62 2f       	mov	r22, r18
     794:	73 2f       	mov	r23, r19
     796:	84 2f       	mov	r24, r20
     798:	95 2f       	mov	r25, r21
     79a:	01 50       	subi	r16, 0x01	; 1
     79c:	11 09       	sbc	r17, r1
     79e:	ea 30       	cpi	r30, 0x0A	; 10
     7a0:	10 f4       	brcc	.+4      	; 0x7a6 <_ZN5Print11printNumberEmh+0x6a>
     7a2:	e0 5d       	subi	r30, 0xD0	; 208
     7a4:	01 c0       	rjmp	.+2      	; 0x7a8 <_ZN5Print11printNumberEmh+0x6c>
     7a6:	e9 5c       	subi	r30, 0xC9	; 201
     7a8:	d8 01       	movw	r26, r16
     7aa:	ec 93       	st	X, r30
     7ac:	61 15       	cp	r22, r1
     7ae:	71 05       	cpc	r23, r1
     7b0:	81 05       	cpc	r24, r1
     7b2:	91 05       	cpc	r25, r1
     7b4:	29 f7       	brne	.-54     	; 0x780 <_ZN5Print11printNumberEmh+0x44>
     7b6:	01 15       	cp	r16, r1
     7b8:	11 05       	cpc	r17, r1
     7ba:	91 f0       	breq	.+36     	; 0x7e0 <_ZN5Print11printNumberEmh+0xa4>
     7bc:	f8 01       	movw	r30, r16
     7be:	01 90       	ld	r0, Z+
     7c0:	00 20       	and	r0, r0
     7c2:	e9 f7       	brne	.-6      	; 0x7be <_ZN5Print11printNumberEmh+0x82>
     7c4:	31 97       	sbiw	r30, 0x01	; 1
     7c6:	af 01       	movw	r20, r30
     7c8:	40 1b       	sub	r20, r16
     7ca:	51 0b       	sbc	r21, r17
     7cc:	d7 01       	movw	r26, r14
     7ce:	ed 91       	ld	r30, X+
     7d0:	fc 91       	ld	r31, X
     7d2:	02 80       	ldd	r0, Z+2	; 0x02
     7d4:	f3 81       	ldd	r31, Z+3	; 0x03
     7d6:	e0 2d       	mov	r30, r0
     7d8:	b8 01       	movw	r22, r16
     7da:	c7 01       	movw	r24, r14
     7dc:	09 95       	icall
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <_ZN5Print11printNumberEmh+0xa8>
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	a1 96       	adiw	r28, 0x21	; 33
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	de bf       	out	0x3e, r29	; 62
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	cd bf       	out	0x3d, r28	; 61
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	df 90       	pop	r13
     7fe:	bf 90       	pop	r11
     800:	af 90       	pop	r10
     802:	9f 90       	pop	r9
     804:	8f 90       	pop	r8
     806:	08 95       	ret

00000808 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     808:	21 15       	cp	r18, r1
     80a:	31 05       	cpc	r19, r1
     80c:	49 f4       	brne	.+18     	; 0x820 <_ZN5Print5printEmi+0x18>
     80e:	dc 01       	movw	r26, r24
     810:	ed 91       	ld	r30, X+
     812:	fc 91       	ld	r31, X
     814:	01 90       	ld	r0, Z+
     816:	f0 81       	ld	r31, Z
     818:	e0 2d       	mov	r30, r0
     81a:	64 2f       	mov	r22, r20
     81c:	09 95       	icall
     81e:	08 95       	ret
  else return printNumber(n, base);
     820:	0e 94 9e 03 	call	0x73c	; 0x73c <_ZN5Print11printNumberEmh>
}
     824:	08 95       	ret

00000826 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     826:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     828:	46 2f       	mov	r20, r22
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	0e 94 04 04 	call	0x808	; 0x808 <_ZN5Print5printEmi>
}
     834:	08 95       	ret

00000836 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
     836:	81 30       	cpi	r24, 0x01	; 1
     838:	39 f0       	breq	.+14     	; 0x848 <_Z12disableTimerh+0x12>
     83a:	18 f0       	brcs	.+6      	; 0x842 <_Z12disableTimerh+0xc>
     83c:	82 30       	cpi	r24, 0x02	; 2
     83e:	51 f0       	breq	.+20     	; 0x854 <_Z12disableTimerh+0x1e>
     840:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
     842:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
     846:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     848:	ef e6       	ldi	r30, 0x6F	; 111
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	80 81       	ld	r24, Z
     84e:	8d 7f       	andi	r24, 0xFD	; 253
     850:	80 83       	st	Z, r24
      break;
     852:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     854:	e0 e7       	ldi	r30, 0x70	; 112
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	80 81       	ld	r24, Z
     85a:	8d 7f       	andi	r24, 0xFD	; 253
     85c:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     864:	e1 eb       	ldi	r30, 0xB1	; 177
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	80 81       	ld	r24, Z
     86a:	88 7f       	andi	r24, 0xF8	; 248
     86c:	84 60       	ori	r24, 0x04	; 4
     86e:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     870:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     874:	08 95       	ret

00000876 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
     876:	cf 93       	push	r28
     878:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	12 16       	cp	r1, r18
     880:	13 06       	cpc	r1, r19
     882:	9c f0       	brlt	.+38     	; 0x8aa <_Z6noToneh+0x34>
    if (tone_pins[i] == _pin) {
     884:	f9 01       	movw	r30, r18
     886:	ea 5f       	subi	r30, 0xFA	; 250
     888:	fe 4f       	sbci	r31, 0xFE	; 254
     88a:	80 81       	ld	r24, Z
     88c:	8c 13       	cpse	r24, r28
     88e:	0a c0       	rjmp	.+20     	; 0x8a4 <_Z6noToneh+0x2e>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     890:	f9 01       	movw	r30, r18
     892:	e6 50       	subi	r30, 0x06	; 6
     894:	fe 4f       	sbci	r31, 0xFE	; 254
     896:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
     898:	f9 01       	movw	r30, r18
     89a:	ea 5f       	subi	r30, 0xFA	; 250
     89c:	fe 4f       	sbci	r31, 0xFE	; 254
     89e:	9f ef       	ldi	r25, 0xFF	; 255
     8a0:	90 83       	st	Z, r25
      break;
     8a2:	04 c0       	rjmp	.+8      	; 0x8ac <_Z6noToneh+0x36>

void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
     8a4:	2f 5f       	subi	r18, 0xFF	; 255
     8a6:	3f 4f       	sbci	r19, 0xFF	; 255
     8a8:	ea cf       	rjmp	.-44     	; 0x87e <_Z6noToneh+0x8>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
     8aa:	8f ef       	ldi	r24, 0xFF	; 255
      tone_pins[i] = 255;
      break;
    }
  }
  
  disableTimer(_timer);
     8ac:	0e 94 1b 04 	call	0x836	; 0x836 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	8c 2f       	mov	r24, r28
     8b4:	0e 94 d4 06 	call	0xda8	; 0xda8 <digitalWrite>
}
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
     8bc:	1f 92       	push	r1
     8be:	0f 92       	push	r0
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	0f 92       	push	r0
     8c4:	11 24       	eor	r1, r1
     8c6:	2f 93       	push	r18
     8c8:	3f 93       	push	r19
     8ca:	4f 93       	push	r20
     8cc:	5f 93       	push	r21
     8ce:	6f 93       	push	r22
     8d0:	7f 93       	push	r23
     8d2:	8f 93       	push	r24
     8d4:	9f 93       	push	r25
     8d6:	af 93       	push	r26
     8d8:	bf 93       	push	r27
     8da:	ef 93       	push	r30
     8dc:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
     8de:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <timer2_toggle_count>
     8e2:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <timer2_toggle_count+0x1>
     8e6:	a0 91 22 03 	lds	r26, 0x0322	; 0x800322 <timer2_toggle_count+0x2>
     8ea:	b0 91 23 03 	lds	r27, 0x0323	; 0x800323 <timer2_toggle_count+0x3>
     8ee:	89 2b       	or	r24, r25
     8f0:	8a 2b       	or	r24, r26
     8f2:	8b 2b       	or	r24, r27
     8f4:	51 f1       	breq	.+84     	; 0x94a <__stack+0x4b>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     8f6:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <timer2_pin_mask>
     8fa:	e0 91 1e 03 	lds	r30, 0x031E	; 0x80031e <timer2_pin_port>
     8fe:	f0 91 1f 03 	lds	r31, 0x031F	; 0x80031f <timer2_pin_port+0x1>
     902:	80 81       	ld	r24, Z
     904:	89 27       	eor	r24, r25
     906:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
     908:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <timer2_toggle_count>
     90c:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <timer2_toggle_count+0x1>
     910:	a0 91 22 03 	lds	r26, 0x0322	; 0x800322 <timer2_toggle_count+0x2>
     914:	b0 91 23 03 	lds	r27, 0x0323	; 0x800323 <timer2_toggle_count+0x3>
     918:	18 16       	cp	r1, r24
     91a:	19 06       	cpc	r1, r25
     91c:	1a 06       	cpc	r1, r26
     91e:	1b 06       	cpc	r1, r27
     920:	c4 f4       	brge	.+48     	; 0x952 <__stack+0x53>
      timer2_toggle_count--;
     922:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <timer2_toggle_count>
     926:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <timer2_toggle_count+0x1>
     92a:	a0 91 22 03 	lds	r26, 0x0322	; 0x800322 <timer2_toggle_count+0x2>
     92e:	b0 91 23 03 	lds	r27, 0x0323	; 0x800323 <timer2_toggle_count+0x3>
     932:	01 97       	sbiw	r24, 0x01	; 1
     934:	a1 09       	sbc	r26, r1
     936:	b1 09       	sbc	r27, r1
     938:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <timer2_toggle_count>
     93c:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <timer2_toggle_count+0x1>
     940:	a0 93 22 03 	sts	0x0322, r26	; 0x800322 <timer2_toggle_count+0x2>
     944:	b0 93 23 03 	sts	0x0323, r27	; 0x800323 <timer2_toggle_count+0x3>
     948:	04 c0       	rjmp	.+8      	; 0x952 <__stack+0x53>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
     94a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL9tone_pins>
     94e:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
     952:	ff 91       	pop	r31
     954:	ef 91       	pop	r30
     956:	bf 91       	pop	r27
     958:	af 91       	pop	r26
     95a:	9f 91       	pop	r25
     95c:	8f 91       	pop	r24
     95e:	7f 91       	pop	r23
     960:	6f 91       	pop	r22
     962:	5f 91       	pop	r21
     964:	4f 91       	pop	r20
     966:	3f 91       	pop	r19
     968:	2f 91       	pop	r18
     96a:	0f 90       	pop	r0
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	0f 90       	pop	r0
     970:	1f 90       	pop	r1
     972:	18 95       	reti

00000974 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     974:	08 95       	ret

00000976 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     976:	1f 92       	push	r1
     978:	0f 92       	push	r0
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	0f 92       	push	r0
     97e:	11 24       	eor	r1, r1
     980:	2f 93       	push	r18
     982:	3f 93       	push	r19
     984:	4f 93       	push	r20
     986:	5f 93       	push	r21
     988:	6f 93       	push	r22
     98a:	7f 93       	push	r23
     98c:	8f 93       	push	r24
     98e:	9f 93       	push	r25
     990:	af 93       	push	r26
     992:	bf 93       	push	r27
     994:	ef 93       	push	r30
     996:	ff 93       	push	r31
     998:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <intFunc>
     99c:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <intFunc+0x1>
     9a0:	09 95       	icall
     9a2:	ff 91       	pop	r31
     9a4:	ef 91       	pop	r30
     9a6:	bf 91       	pop	r27
     9a8:	af 91       	pop	r26
     9aa:	9f 91       	pop	r25
     9ac:	8f 91       	pop	r24
     9ae:	7f 91       	pop	r23
     9b0:	6f 91       	pop	r22
     9b2:	5f 91       	pop	r21
     9b4:	4f 91       	pop	r20
     9b6:	3f 91       	pop	r19
     9b8:	2f 91       	pop	r18
     9ba:	0f 90       	pop	r0
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	0f 90       	pop	r0
     9c0:	1f 90       	pop	r1
     9c2:	18 95       	reti

000009c4 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     9c4:	1f 92       	push	r1
     9c6:	0f 92       	push	r0
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	0f 92       	push	r0
     9cc:	11 24       	eor	r1, r1
     9ce:	2f 93       	push	r18
     9d0:	3f 93       	push	r19
     9d2:	4f 93       	push	r20
     9d4:	5f 93       	push	r21
     9d6:	6f 93       	push	r22
     9d8:	7f 93       	push	r23
     9da:	8f 93       	push	r24
     9dc:	9f 93       	push	r25
     9de:	af 93       	push	r26
     9e0:	bf 93       	push	r27
     9e2:	ef 93       	push	r30
     9e4:	ff 93       	push	r31
     9e6:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <intFunc+0x2>
     9ea:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <intFunc+0x3>
     9ee:	09 95       	icall
     9f0:	ff 91       	pop	r31
     9f2:	ef 91       	pop	r30
     9f4:	bf 91       	pop	r27
     9f6:	af 91       	pop	r26
     9f8:	9f 91       	pop	r25
     9fa:	8f 91       	pop	r24
     9fc:	7f 91       	pop	r23
     9fe:	6f 91       	pop	r22
     a00:	5f 91       	pop	r21
     a02:	4f 91       	pop	r20
     a04:	3f 91       	pop	r19
     a06:	2f 91       	pop	r18
     a08:	0f 90       	pop	r0
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	0f 90       	pop	r0
     a0e:	1f 90       	pop	r1
     a10:	18 95       	reti

00000a12 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     a12:	1f 92       	push	r1
     a14:	0f 92       	push	r0
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	0f 92       	push	r0
     a1a:	11 24       	eor	r1, r1
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	2f 93       	push	r18
     a22:	3f 93       	push	r19
     a24:	4f 93       	push	r20
     a26:	5f 93       	push	r21
     a28:	6f 93       	push	r22
     a2a:	7f 93       	push	r23
     a2c:	8f 93       	push	r24
     a2e:	9f 93       	push	r25
     a30:	af 93       	push	r26
     a32:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     a34:	00 91 25 03 	lds	r16, 0x0325	; 0x800325 <timer0_millis>
     a38:	10 91 26 03 	lds	r17, 0x0326	; 0x800326 <timer0_millis+0x1>
     a3c:	20 91 27 03 	lds	r18, 0x0327	; 0x800327 <timer0_millis+0x2>
     a40:	30 91 28 03 	lds	r19, 0x0328	; 0x800328 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     a44:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <timer0_fract>

	m += MILLIS_INC;
     a48:	b9 01       	movw	r22, r18
     a4a:	a8 01       	movw	r20, r16
     a4c:	4f 5f       	subi	r20, 0xFF	; 255
     a4e:	5f 4f       	sbci	r21, 0xFF	; 255
     a50:	6f 4f       	sbci	r22, 0xFF	; 255
     a52:	7f 4f       	sbci	r23, 0xFF	; 255
	f += FRACT_INC;
     a54:	83 e0       	ldi	r24, 0x03	; 3
     a56:	89 0f       	add	r24, r25
	if (f >= FRACT_MAX) {
     a58:	8d 37       	cpi	r24, 0x7D	; 125
     a5a:	40 f0       	brcs	.+16     	; 0xa6c <__vector_16+0x5a>
		f -= FRACT_MAX;
     a5c:	86 e8       	ldi	r24, 0x86	; 134
     a5e:	89 0f       	add	r24, r25
		m += 1;
     a60:	b9 01       	movw	r22, r18
     a62:	a8 01       	movw	r20, r16
     a64:	4e 5f       	subi	r20, 0xFE	; 254
     a66:	5f 4f       	sbci	r21, 0xFF	; 255
     a68:	6f 4f       	sbci	r22, 0xFF	; 255
     a6a:	7f 4f       	sbci	r23, 0xFF	; 255
	}

	timer0_fract = f;
     a6c:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <timer0_fract>
	timer0_millis = m;
     a70:	40 93 25 03 	sts	0x0325, r20	; 0x800325 <timer0_millis>
     a74:	50 93 26 03 	sts	0x0326, r21	; 0x800326 <timer0_millis+0x1>
     a78:	60 93 27 03 	sts	0x0327, r22	; 0x800327 <timer0_millis+0x2>
     a7c:	70 93 28 03 	sts	0x0328, r23	; 0x800328 <timer0_millis+0x3>
	timer0_overflow_count++;
     a80:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <timer0_overflow_count>
     a84:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <timer0_overflow_count+0x1>
     a88:	a0 91 2b 03 	lds	r26, 0x032B	; 0x80032b <timer0_overflow_count+0x2>
     a8c:	b0 91 2c 03 	lds	r27, 0x032C	; 0x80032c <timer0_overflow_count+0x3>
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	a1 1d       	adc	r26, r1
     a94:	b1 1d       	adc	r27, r1
     a96:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <timer0_overflow_count>
     a9a:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <timer0_overflow_count+0x1>
     a9e:	a0 93 2b 03 	sts	0x032B, r26	; 0x80032b <timer0_overflow_count+0x2>
     aa2:	b0 93 2c 03 	sts	0x032C, r27	; 0x80032c <timer0_overflow_count+0x3>
}
     aa6:	bf 91       	pop	r27
     aa8:	af 91       	pop	r26
     aaa:	9f 91       	pop	r25
     aac:	8f 91       	pop	r24
     aae:	7f 91       	pop	r23
     ab0:	6f 91       	pop	r22
     ab2:	5f 91       	pop	r21
     ab4:	4f 91       	pop	r20
     ab6:	3f 91       	pop	r19
     ab8:	2f 91       	pop	r18
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	0f 90       	pop	r0
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	0f 90       	pop	r0
     ac4:	1f 90       	pop	r1
     ac6:	18 95       	reti

00000ac8 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     ac8:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     aca:	f8 94       	cli
	m = timer0_millis;
     acc:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <timer0_millis>
     ad0:	70 91 26 03 	lds	r23, 0x0326	; 0x800326 <timer0_millis+0x1>
     ad4:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <timer0_millis+0x2>
     ad8:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <timer0_millis+0x3>
	SREG = oldSREG;
     adc:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     ade:	08 95       	ret

00000ae0 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     ae0:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     ae2:	f8 94       	cli
	m = timer0_overflow_count;
     ae4:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <timer0_overflow_count>
     ae8:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <timer0_overflow_count+0x1>
     aec:	a0 91 2b 03 	lds	r26, 0x032B	; 0x80032b <timer0_overflow_count+0x2>
     af0:	b0 91 2c 03 	lds	r27, 0x032C	; 0x80032c <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     af4:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     af6:	a8 9b       	sbis	0x15, 0	; 21
     af8:	05 c0       	rjmp	.+10     	; 0xb04 <micros+0x24>
     afa:	2f 3f       	cpi	r18, 0xFF	; 255
     afc:	19 f0       	breq	.+6      	; 0xb04 <micros+0x24>
		m++;
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	a1 1d       	adc	r26, r1
     b02:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     b04:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     b06:	ba 2f       	mov	r27, r26
     b08:	a9 2f       	mov	r26, r25
     b0a:	98 2f       	mov	r25, r24
     b0c:	88 27       	eor	r24, r24
     b0e:	82 0f       	add	r24, r18
     b10:	91 1d       	adc	r25, r1
     b12:	a1 1d       	adc	r26, r1
     b14:	b1 1d       	adc	r27, r1
     b16:	bc 01       	movw	r22, r24
     b18:	cd 01       	movw	r24, r26
     b1a:	66 0f       	add	r22, r22
     b1c:	77 1f       	adc	r23, r23
     b1e:	88 1f       	adc	r24, r24
     b20:	99 1f       	adc	r25, r25
     b22:	66 0f       	add	r22, r22
     b24:	77 1f       	adc	r23, r23
     b26:	88 1f       	adc	r24, r24
     b28:	99 1f       	adc	r25, r25
}
     b2a:	08 95       	ret

00000b2c <delay>:

void delay(unsigned long ms)
{
     b2c:	8f 92       	push	r8
     b2e:	9f 92       	push	r9
     b30:	af 92       	push	r10
     b32:	bf 92       	push	r11
     b34:	cf 92       	push	r12
     b36:	df 92       	push	r13
     b38:	ef 92       	push	r14
     b3a:	ff 92       	push	r15
     b3c:	6b 01       	movw	r12, r22
     b3e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     b40:	0e 94 70 05 	call	0xae0	; 0xae0 <micros>
     b44:	4b 01       	movw	r8, r22
     b46:	5c 01       	movw	r10, r24

	while (ms > 0) {
     b48:	20 c0       	rjmp	.+64     	; 0xb8a <delay+0x5e>
		yield();
     b4a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     b4e:	0b c0       	rjmp	.+22     	; 0xb66 <delay+0x3a>
			ms--;
     b50:	21 e0       	ldi	r18, 0x01	; 1
     b52:	c2 1a       	sub	r12, r18
     b54:	d1 08       	sbc	r13, r1
     b56:	e1 08       	sbc	r14, r1
     b58:	f1 08       	sbc	r15, r1
			start += 1000;
     b5a:	88 ee       	ldi	r24, 0xE8	; 232
     b5c:	88 0e       	add	r8, r24
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	98 1e       	adc	r9, r24
     b62:	a1 1c       	adc	r10, r1
     b64:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     b66:	c1 14       	cp	r12, r1
     b68:	d1 04       	cpc	r13, r1
     b6a:	e1 04       	cpc	r14, r1
     b6c:	f1 04       	cpc	r15, r1
     b6e:	69 f0       	breq	.+26     	; 0xb8a <delay+0x5e>
     b70:	0e 94 70 05 	call	0xae0	; 0xae0 <micros>
     b74:	dc 01       	movw	r26, r24
     b76:	cb 01       	movw	r24, r22
     b78:	88 19       	sub	r24, r8
     b7a:	99 09       	sbc	r25, r9
     b7c:	aa 09       	sbc	r26, r10
     b7e:	bb 09       	sbc	r27, r11
     b80:	88 3e       	cpi	r24, 0xE8	; 232
     b82:	93 40       	sbci	r25, 0x03	; 3
     b84:	a1 05       	cpc	r26, r1
     b86:	b1 05       	cpc	r27, r1
     b88:	18 f7       	brcc	.-58     	; 0xb50 <delay+0x24>

void delay(unsigned long ms)
{
	uint32_t start = micros();

	while (ms > 0) {
     b8a:	c1 14       	cp	r12, r1
     b8c:	d1 04       	cpc	r13, r1
     b8e:	e1 04       	cpc	r14, r1
     b90:	f1 04       	cpc	r15, r1
     b92:	d9 f6       	brne	.-74     	; 0xb4a <delay+0x1e>
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     b94:	ff 90       	pop	r15
     b96:	ef 90       	pop	r14
     b98:	df 90       	pop	r13
     b9a:	cf 90       	pop	r12
     b9c:	bf 90       	pop	r11
     b9e:	af 90       	pop	r10
     ba0:	9f 90       	pop	r9
     ba2:	8f 90       	pop	r8
     ba4:	08 95       	ret

00000ba6 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	91 05       	cpc	r25, r1
     baa:	38 f0       	brcs	.+14     	; 0xbba <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     bb4:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	f1 f7       	brne	.-4      	; 0xbb6 <delayMicroseconds+0x10>
     bba:	08 95       	ret

00000bbc <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     bbc:	8e 30       	cpi	r24, 0x0E	; 14
     bbe:	08 f0       	brcs	.+2      	; 0xbc2 <analogRead+0x6>
     bc0:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     bc2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <analog_reference>
     bc6:	40 e4       	ldi	r20, 0x40	; 64
     bc8:	94 9f       	mul	r25, r20
     bca:	90 01       	movw	r18, r0
     bcc:	11 24       	eor	r1, r1
     bce:	87 70       	andi	r24, 0x07	; 7
     bd0:	28 2b       	or	r18, r24
     bd2:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     bd6:	ea e7       	ldi	r30, 0x7A	; 122
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	80 64       	ori	r24, 0x40	; 64
     bde:	80 83       	st	Z, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     be0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     be4:	86 fd       	sbrc	r24, 6
     be6:	fc cf       	rjmp	.-8      	; 0xbe0 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     be8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	high = ADCH;
     bec:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	98 2f       	mov	r25, r24
     bf4:	88 27       	eor	r24, r24
}
     bf6:	82 2b       	or	r24, r18
     bf8:	08 95       	ret

00000bfa <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	18 2f       	mov	r17, r24
     c02:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
     c04:	61 e0       	ldi	r22, 0x01	; 1
     c06:	0e 94 95 06 	call	0xd2a	; 0xd2a <pinMode>
	if (val == 0)
     c0a:	20 97       	sbiw	r28, 0x00	; 0
     c0c:	29 f4       	brne	.+10     	; 0xc18 <analogWrite+0x1e>
	{
		digitalWrite(pin, LOW);
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	81 2f       	mov	r24, r17
     c12:	0e 94 d4 06 	call	0xda8	; 0xda8 <digitalWrite>
     c16:	56 c0       	rjmp	.+172    	; 0xcc4 <analogWrite+0xca>
	}
	else if (val == 255)
     c18:	cf 3f       	cpi	r28, 0xFF	; 255
     c1a:	d1 05       	cpc	r29, r1
     c1c:	29 f4       	brne	.+10     	; 0xc28 <analogWrite+0x2e>
	{
		digitalWrite(pin, HIGH);
     c1e:	61 e0       	ldi	r22, 0x01	; 1
     c20:	81 2f       	mov	r24, r17
     c22:	0e 94 d4 06 	call	0xda8	; 0xda8 <digitalWrite>
     c26:	4e c0       	rjmp	.+156    	; 0xcc4 <analogWrite+0xca>
	}
	else
	{
		switch(digitalPinToTimer(pin))
     c28:	e1 2f       	mov	r30, r17
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	e5 50       	subi	r30, 0x05	; 5
     c2e:	fe 4f       	sbci	r31, 0xFE	; 254
     c30:	e4 91       	lpm	r30, Z
     c32:	e3 30       	cpi	r30, 0x03	; 3
     c34:	b9 f0       	breq	.+46     	; 0xc64 <analogWrite+0x6a>
     c36:	28 f4       	brcc	.+10     	; 0xc42 <analogWrite+0x48>
     c38:	e1 30       	cpi	r30, 0x01	; 1
     c3a:	51 f0       	breq	.+20     	; 0xc50 <analogWrite+0x56>
     c3c:	e2 30       	cpi	r30, 0x02	; 2
     c3e:	69 f0       	breq	.+26     	; 0xc5a <analogWrite+0x60>
     c40:	35 c0       	rjmp	.+106    	; 0xcac <analogWrite+0xb2>
     c42:	e7 30       	cpi	r30, 0x07	; 7
     c44:	19 f1       	breq	.+70     	; 0xc8c <analogWrite+0x92>
     c46:	e8 30       	cpi	r30, 0x08	; 8
     c48:	49 f1       	breq	.+82     	; 0xc9c <analogWrite+0xa2>
     c4a:	e4 30       	cpi	r30, 0x04	; 4
     c4c:	79 f5       	brne	.+94     	; 0xcac <analogWrite+0xb2>
     c4e:	14 c0       	rjmp	.+40     	; 0xc78 <analogWrite+0x7e>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
     c50:	84 b5       	in	r24, 0x24	; 36
     c52:	80 68       	ori	r24, 0x80	; 128
     c54:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
     c56:	c7 bd       	out	0x27, r28	; 39
				break;
     c58:	35 c0       	rjmp	.+106    	; 0xcc4 <analogWrite+0xca>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
     c5a:	84 b5       	in	r24, 0x24	; 36
     c5c:	80 62       	ori	r24, 0x20	; 32
     c5e:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
     c60:	c8 bd       	out	0x28, r28	; 40
				break;
     c62:	30 c0       	rjmp	.+96     	; 0xcc4 <analogWrite+0xca>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
     c64:	e0 e8       	ldi	r30, 0x80	; 128
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	80 68       	ori	r24, 0x80	; 128
     c6c:	80 83       	st	Z, r24
				OCR1A = val; // set pwm duty
     c6e:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     c72:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				break;
     c76:	26 c0       	rjmp	.+76     	; 0xcc4 <analogWrite+0xca>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
     c78:	e0 e8       	ldi	r30, 0x80	; 128
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	80 62       	ori	r24, 0x20	; 32
     c80:	80 83       	st	Z, r24
				OCR1B = val; // set pwm duty
     c82:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     c86:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				break;
     c8a:	1c c0       	rjmp	.+56     	; 0xcc4 <analogWrite+0xca>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
     c8c:	e0 eb       	ldi	r30, 0xB0	; 176
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	80 68       	ori	r24, 0x80	; 128
     c94:	80 83       	st	Z, r24
				OCR2A = val; // set pwm duty
     c96:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
				break;
     c9a:	14 c0       	rjmp	.+40     	; 0xcc4 <analogWrite+0xca>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
     c9c:	e0 eb       	ldi	r30, 0xB0	; 176
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	80 62       	ori	r24, 0x20	; 32
     ca4:	80 83       	st	Z, r24
				OCR2B = val; // set pwm duty
     ca6:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
				break;
     caa:	0c c0       	rjmp	.+24     	; 0xcc4 <analogWrite+0xca>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
     cac:	c0 38       	cpi	r28, 0x80	; 128
     cae:	d1 05       	cpc	r29, r1
     cb0:	2c f4       	brge	.+10     	; 0xcbc <analogWrite+0xc2>
					digitalWrite(pin, LOW);
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	81 2f       	mov	r24, r17
     cb6:	0e 94 d4 06 	call	0xda8	; 0xda8 <digitalWrite>
     cba:	04 c0       	rjmp	.+8      	; 0xcc4 <analogWrite+0xca>
				} else {
					digitalWrite(pin, HIGH);
     cbc:	61 e0       	ldi	r22, 0x01	; 1
     cbe:	81 2f       	mov	r24, r17
     cc0:	0e 94 d4 06 	call	0xda8	; 0xda8 <digitalWrite>
				}
		}
	}
}
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	1f 91       	pop	r17
     cca:	08 95       	ret

00000ccc <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     ccc:	83 30       	cpi	r24, 0x03	; 3
     cce:	69 f0       	breq	.+26     	; 0xcea <turnOffPWM+0x1e>
     cd0:	28 f4       	brcc	.+10     	; 0xcdc <turnOffPWM+0x10>
     cd2:	81 30       	cpi	r24, 0x01	; 1
     cd4:	b1 f0       	breq	.+44     	; 0xd02 <turnOffPWM+0x36>
     cd6:	82 30       	cpi	r24, 0x02	; 2
     cd8:	c1 f0       	breq	.+48     	; 0xd0a <turnOffPWM+0x3e>
     cda:	08 95       	ret
     cdc:	87 30       	cpi	r24, 0x07	; 7
     cde:	c9 f0       	breq	.+50     	; 0xd12 <turnOffPWM+0x46>
     ce0:	88 30       	cpi	r24, 0x08	; 8
     ce2:	e9 f0       	breq	.+58     	; 0xd1e <turnOffPWM+0x52>
     ce4:	84 30       	cpi	r24, 0x04	; 4
     ce6:	01 f5       	brne	.+64     	; 0xd28 <turnOffPWM+0x5c>
     ce8:	06 c0       	rjmp	.+12     	; 0xcf6 <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     cea:	e0 e8       	ldi	r30, 0x80	; 128
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	8f 77       	andi	r24, 0x7F	; 127
     cf2:	80 83       	st	Z, r24
     cf4:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     cf6:	e0 e8       	ldi	r30, 0x80	; 128
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	8f 7d       	andi	r24, 0xDF	; 223
     cfe:	80 83       	st	Z, r24
     d00:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     d02:	84 b5       	in	r24, 0x24	; 36
     d04:	8f 77       	andi	r24, 0x7F	; 127
     d06:	84 bd       	out	0x24, r24	; 36
     d08:	08 95       	ret
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     d0a:	84 b5       	in	r24, 0x24	; 36
     d0c:	8f 7d       	andi	r24, 0xDF	; 223
     d0e:	84 bd       	out	0x24, r24	; 36
     d10:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     d12:	e0 eb       	ldi	r30, 0xB0	; 176
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	8f 77       	andi	r24, 0x7F	; 127
     d1a:	80 83       	st	Z, r24
     d1c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     d1e:	e0 eb       	ldi	r30, 0xB0	; 176
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	8f 7d       	andi	r24, 0xDF	; 223
     d26:	80 83       	st	Z, r24
     d28:	08 95       	ret

00000d2a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	fc 01       	movw	r30, r24
     d32:	e1 5f       	subi	r30, 0xF1	; 241
     d34:	fd 4f       	sbci	r31, 0xFD	; 253
     d36:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     d38:	fc 01       	movw	r30, r24
     d3a:	ed 5d       	subi	r30, 0xDD	; 221
     d3c:	fd 4f       	sbci	r31, 0xFD	; 253
     d3e:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     d40:	88 23       	and	r24, r24
     d42:	79 f1       	breq	.+94     	; 0xda2 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	fc 01       	movw	r30, r24
     d4c:	ef 5b       	subi	r30, 0xBF	; 191
     d4e:	fd 4f       	sbci	r31, 0xFD	; 253
     d50:	a5 91       	lpm	r26, Z+
     d52:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     d54:	fc 01       	movw	r30, r24
     d56:	e9 5c       	subi	r30, 0xC9	; 201
     d58:	fd 4f       	sbci	r31, 0xFD	; 253
     d5a:	c5 91       	lpm	r28, Z+
     d5c:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     d5e:	61 11       	cpse	r22, r1
     d60:	0c c0       	rjmp	.+24     	; 0xd7a <pinMode+0x50>
		uint8_t oldSREG = SREG;
     d62:	9f b7       	in	r25, 0x3f	; 63
                cli();
     d64:	f8 94       	cli
		*reg &= ~bit;
     d66:	8c 91       	ld	r24, X
     d68:	e2 2f       	mov	r30, r18
     d6a:	e0 95       	com	r30
     d6c:	8e 23       	and	r24, r30
     d6e:	8c 93       	st	X, r24
		*out &= ~bit;
     d70:	28 81       	ld	r18, Y
     d72:	e2 23       	and	r30, r18
     d74:	e8 83       	st	Y, r30
		SREG = oldSREG;
     d76:	9f bf       	out	0x3f, r25	; 63
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
     d7a:	62 30       	cpi	r22, 0x02	; 2
     d7c:	61 f4       	brne	.+24     	; 0xd96 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
     d7e:	9f b7       	in	r25, 0x3f	; 63
                cli();
     d80:	f8 94       	cli
		*reg &= ~bit;
     d82:	8c 91       	ld	r24, X
     d84:	32 2f       	mov	r19, r18
     d86:	30 95       	com	r19
     d88:	83 23       	and	r24, r19
     d8a:	8c 93       	st	X, r24
		*out |= bit;
     d8c:	e8 81       	ld	r30, Y
     d8e:	e2 2b       	or	r30, r18
     d90:	e8 83       	st	Y, r30
		SREG = oldSREG;
     d92:	9f bf       	out	0x3f, r25	; 63
     d94:	06 c0       	rjmp	.+12     	; 0xda2 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
     d96:	8f b7       	in	r24, 0x3f	; 63
                cli();
     d98:	f8 94       	cli
		*reg |= bit;
     d9a:	ec 91       	ld	r30, X
     d9c:	e2 2b       	or	r30, r18
     d9e:	ec 93       	st	X, r30
		SREG = oldSREG;
     da0:	8f bf       	out	0x3f, r24	; 63
	}
}
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	08 95       	ret

00000da8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	f9 01       	movw	r30, r18
     db4:	e5 50       	subi	r30, 0x05	; 5
     db6:	fe 4f       	sbci	r31, 0xFE	; 254
     db8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     dba:	f9 01       	movw	r30, r18
     dbc:	e1 5f       	subi	r30, 0xF1	; 241
     dbe:	fd 4f       	sbci	r31, 0xFD	; 253
     dc0:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     dc2:	f9 01       	movw	r30, r18
     dc4:	ed 5d       	subi	r30, 0xDD	; 221
     dc6:	fd 4f       	sbci	r31, 0xFD	; 253
     dc8:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     dca:	cc 23       	and	r28, r28
     dcc:	d1 f0       	breq	.+52     	; 0xe02 <digitalWrite+0x5a>
     dce:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     dd0:	81 11       	cpse	r24, r1
     dd2:	0e 94 66 06 	call	0xccc	; 0xccc <turnOffPWM>

	out = portOutputRegister(port);
     dd6:	ec 2f       	mov	r30, r28
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	ee 0f       	add	r30, r30
     ddc:	ff 1f       	adc	r31, r31
     dde:	e9 5c       	subi	r30, 0xC9	; 201
     de0:	fd 4f       	sbci	r31, 0xFD	; 253
     de2:	a5 91       	lpm	r26, Z+
     de4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     de6:	8f b7       	in	r24, 0x3f	; 63
	cli();
     de8:	f8 94       	cli

	if (val == LOW) {
     dea:	d1 11       	cpse	r29, r1
     dec:	06 c0       	rjmp	.+12     	; 0xdfa <digitalWrite+0x52>
		*out &= ~bit;
     dee:	9c 91       	ld	r25, X
     df0:	e1 2f       	mov	r30, r17
     df2:	e0 95       	com	r30
     df4:	e9 23       	and	r30, r25
     df6:	ec 93       	st	X, r30
     df8:	03 c0       	rjmp	.+6      	; 0xe00 <digitalWrite+0x58>
	} else {
		*out |= bit;
     dfa:	ec 91       	ld	r30, X
     dfc:	e1 2b       	or	r30, r17
     dfe:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
     e00:	8f bf       	out	0x3f, r24	; 63
}
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	08 95       	ret

00000e0a <_ZN6StringD1Ev>:
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
{
	if (loc < len) buffer[loc] = c;
     e0a:	fc 01       	movw	r30, r24
     e0c:	80 81       	ld	r24, Z
     e0e:	91 81       	ldd	r25, Z+1	; 0x01
     e10:	00 97       	sbiw	r24, 0x00	; 0
     e12:	11 f0       	breq	.+4      	; 0xe18 <_ZN6StringD1Ev+0xe>
     e14:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <free>
     e18:	08 95       	ret

00000e1a <_ZN6String10invalidateEv>:
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	ec 01       	movw	r28, r24
     e20:	88 81       	ld	r24, Y
     e22:	99 81       	ldd	r25, Y+1	; 0x01
     e24:	00 97       	sbiw	r24, 0x00	; 0
     e26:	11 f0       	breq	.+4      	; 0xe2c <_ZN6String10invalidateEv+0x12>
     e28:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <free>
     e2c:	19 82       	std	Y+1, r1	; 0x01
     e2e:	18 82       	st	Y, r1
     e30:	1d 82       	std	Y+5, r1	; 0x05
     e32:	1c 82       	std	Y+4, r1	; 0x04
     e34:	1b 82       	std	Y+3, r1	; 0x03
     e36:	1a 82       	std	Y+2, r1	; 0x02
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	08 95       	ret

00000e3e <_ZN6String12changeBufferEj>:
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	ec 01       	movw	r28, r24
     e48:	8b 01       	movw	r16, r22
     e4a:	6f 5f       	subi	r22, 0xFF	; 255
     e4c:	7f 4f       	sbci	r23, 0xFF	; 255
     e4e:	88 81       	ld	r24, Y
     e50:	99 81       	ldd	r25, Y+1	; 0x01
     e52:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <realloc>
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	31 f0       	breq	.+12     	; 0xe66 <_ZN6String12changeBufferEj+0x28>
     e5a:	99 83       	std	Y+1, r25	; 0x01
     e5c:	88 83       	st	Y, r24
     e5e:	1b 83       	std	Y+3, r17	; 0x03
     e60:	0a 83       	std	Y+2, r16	; 0x02
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	01 c0       	rjmp	.+2      	; 0xe68 <_ZN6String12changeBufferEj+0x2a>
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	08 95       	ret

00000e72 <_ZN6String7reserveEj>:
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	fc 01       	movw	r30, r24
     e78:	20 81       	ld	r18, Z
     e7a:	31 81       	ldd	r19, Z+1	; 0x01
     e7c:	23 2b       	or	r18, r19
     e7e:	29 f0       	breq	.+10     	; 0xe8a <_ZN6String7reserveEj+0x18>
     e80:	22 81       	ldd	r18, Z+2	; 0x02
     e82:	33 81       	ldd	r19, Z+3	; 0x03
     e84:	26 17       	cp	r18, r22
     e86:	37 07       	cpc	r19, r23
     e88:	70 f4       	brcc	.+28     	; 0xea6 <_ZN6String7reserveEj+0x34>
     e8a:	ec 01       	movw	r28, r24
     e8c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_ZN6String12changeBufferEj>
     e90:	88 23       	and	r24, r24
     e92:	61 f0       	breq	.+24     	; 0xeac <_ZN6String7reserveEj+0x3a>
     e94:	8c 81       	ldd	r24, Y+4	; 0x04
     e96:	9d 81       	ldd	r25, Y+5	; 0x05
     e98:	89 2b       	or	r24, r25
     e9a:	39 f4       	brne	.+14     	; 0xeaa <_ZN6String7reserveEj+0x38>
     e9c:	e8 81       	ld	r30, Y
     e9e:	f9 81       	ldd	r31, Y+1	; 0x01
     ea0:	10 82       	st	Z, r1
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	03 c0       	rjmp	.+6      	; 0xeac <_ZN6String7reserveEj+0x3a>
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	01 c0       	rjmp	.+2      	; 0xeac <_ZN6String7reserveEj+0x3a>
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	08 95       	ret

00000eb2 <_ZN6String4copyEPKcj>:
     eb2:	ef 92       	push	r14
     eb4:	ff 92       	push	r15
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	ec 01       	movw	r28, r24
     ec0:	7b 01       	movw	r14, r22
     ec2:	8a 01       	movw	r16, r20
     ec4:	ba 01       	movw	r22, r20
     ec6:	0e 94 39 07 	call	0xe72	; 0xe72 <_ZN6String7reserveEj>
     eca:	81 11       	cpse	r24, r1
     ecc:	04 c0       	rjmp	.+8      	; 0xed6 <_ZN6String4copyEPKcj+0x24>
     ece:	ce 01       	movw	r24, r28
     ed0:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZN6String10invalidateEv>
     ed4:	07 c0       	rjmp	.+14     	; 0xee4 <_ZN6String4copyEPKcj+0x32>
     ed6:	1d 83       	std	Y+5, r17	; 0x05
     ed8:	0c 83       	std	Y+4, r16	; 0x04
     eda:	b7 01       	movw	r22, r14
     edc:	88 81       	ld	r24, Y
     ede:	99 81       	ldd	r25, Y+1	; 0x01
     ee0:	0e 94 8e 30 	call	0x611c	; 0x611c <strcpy>
     ee4:	ce 01       	movw	r24, r28
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	ff 90       	pop	r15
     ef0:	ef 90       	pop	r14
     ef2:	08 95       	ret

00000ef4 <_ZN6StringC1EPKc>:
     ef4:	fc 01       	movw	r30, r24
     ef6:	11 82       	std	Z+1, r1	; 0x01
     ef8:	10 82       	st	Z, r1
     efa:	13 82       	std	Z+3, r1	; 0x03
     efc:	12 82       	std	Z+2, r1	; 0x02
     efe:	15 82       	std	Z+5, r1	; 0x05
     f00:	14 82       	std	Z+4, r1	; 0x04
     f02:	61 15       	cp	r22, r1
     f04:	71 05       	cpc	r23, r1
     f06:	51 f0       	breq	.+20     	; 0xf1c <_ZN6StringC1EPKc+0x28>
     f08:	fb 01       	movw	r30, r22
     f0a:	01 90       	ld	r0, Z+
     f0c:	00 20       	and	r0, r0
     f0e:	e9 f7       	brne	.-6      	; 0xf0a <_ZN6StringC1EPKc+0x16>
     f10:	31 97       	sbiw	r30, 0x01	; 1
     f12:	af 01       	movw	r20, r30
     f14:	46 1b       	sub	r20, r22
     f16:	57 0b       	sbc	r21, r23
     f18:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN6String4copyEPKcj>
     f1c:	08 95       	ret

00000f1e <_ZN6StringaSERKS_>:
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	ec 01       	movw	r28, r24
     f24:	fb 01       	movw	r30, r22
     f26:	86 17       	cp	r24, r22
     f28:	97 07       	cpc	r25, r23
     f2a:	61 f0       	breq	.+24     	; 0xf44 <_ZN6StringaSERKS_+0x26>
     f2c:	60 81       	ld	r22, Z
     f2e:	71 81       	ldd	r23, Z+1	; 0x01
     f30:	61 15       	cp	r22, r1
     f32:	71 05       	cpc	r23, r1
     f34:	29 f0       	breq	.+10     	; 0xf40 <_ZN6StringaSERKS_+0x22>
     f36:	44 81       	ldd	r20, Z+4	; 0x04
     f38:	55 81       	ldd	r21, Z+5	; 0x05
     f3a:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN6String4copyEPKcj>
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <_ZN6StringaSERKS_+0x26>
     f40:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZN6String10invalidateEv>
     f44:	ce 01       	movw	r24, r28
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	08 95       	ret

00000f4c <_ZN6StringC1ERKS_>:
     f4c:	fc 01       	movw	r30, r24
     f4e:	11 82       	std	Z+1, r1	; 0x01
     f50:	10 82       	st	Z, r1
     f52:	13 82       	std	Z+3, r1	; 0x03
     f54:	12 82       	std	Z+2, r1	; 0x02
     f56:	15 82       	std	Z+5, r1	; 0x05
     f58:	14 82       	std	Z+4, r1	; 0x04
     f5a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_ZN6StringaSERKS_>
     f5e:	08 95       	ret

00000f60 <_ZN6StringaSEPKc>:
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	ec 01       	movw	r28, r24
     f66:	61 15       	cp	r22, r1
     f68:	71 05       	cpc	r23, r1
     f6a:	59 f0       	breq	.+22     	; 0xf82 <_ZN6StringaSEPKc+0x22>
     f6c:	fb 01       	movw	r30, r22
     f6e:	01 90       	ld	r0, Z+
     f70:	00 20       	and	r0, r0
     f72:	e9 f7       	brne	.-6      	; 0xf6e <_ZN6StringaSEPKc+0xe>
     f74:	31 97       	sbiw	r30, 0x01	; 1
     f76:	af 01       	movw	r20, r30
     f78:	46 1b       	sub	r20, r22
     f7a:	57 0b       	sbc	r21, r23
     f7c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN6String4copyEPKcj>
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <_ZN6StringaSEPKc+0x26>
     f82:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZN6String10invalidateEv>
     f86:	ce 01       	movw	r24, r28
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	08 95       	ret

00000f8e <_ZN6StringC1Ec>:
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	00 d0       	rcall	.+0      	; 0xf94 <_ZN6StringC1Ec+0x6>
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	fc 01       	movw	r30, r24
     f9a:	11 82       	std	Z+1, r1	; 0x01
     f9c:	10 82       	st	Z, r1
     f9e:	13 82       	std	Z+3, r1	; 0x03
     fa0:	12 82       	std	Z+2, r1	; 0x02
     fa2:	15 82       	std	Z+5, r1	; 0x05
     fa4:	14 82       	std	Z+4, r1	; 0x04
     fa6:	69 83       	std	Y+1, r22	; 0x01
     fa8:	1a 82       	std	Y+2, r1	; 0x02
     faa:	be 01       	movw	r22, r28
     fac:	6f 5f       	subi	r22, 0xFF	; 255
     fae:	7f 4f       	sbci	r23, 0xFF	; 255
     fb0:	0e 94 b0 07 	call	0xf60	; 0xf60 <_ZN6StringaSEPKc>
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	08 95       	ret

00000fbe <_ZN6String6concatEPKcj>:
     fbe:	ef 92       	push	r14
     fc0:	ff 92       	push	r15
     fc2:	0f 93       	push	r16
     fc4:	1f 93       	push	r17
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	fc 01       	movw	r30, r24
     fcc:	c4 81       	ldd	r28, Z+4	; 0x04
     fce:	d5 81       	ldd	r29, Z+5	; 0x05
     fd0:	c4 0f       	add	r28, r20
     fd2:	d5 1f       	adc	r29, r21
     fd4:	61 15       	cp	r22, r1
     fd6:	71 05       	cpc	r23, r1
     fd8:	c1 f0       	breq	.+48     	; 0x100a <_ZN6String6concatEPKcj+0x4c>
     fda:	45 2b       	or	r20, r21
     fdc:	c1 f0       	breq	.+48     	; 0x100e <_ZN6String6concatEPKcj+0x50>
     fde:	7b 01       	movw	r14, r22
     fe0:	8c 01       	movw	r16, r24
     fe2:	be 01       	movw	r22, r28
     fe4:	0e 94 39 07 	call	0xe72	; 0xe72 <_ZN6String7reserveEj>
     fe8:	88 23       	and	r24, r24
     fea:	91 f0       	breq	.+36     	; 0x1010 <_ZN6String6concatEPKcj+0x52>
     fec:	f8 01       	movw	r30, r16
     fee:	20 81       	ld	r18, Z
     ff0:	31 81       	ldd	r19, Z+1	; 0x01
     ff2:	84 81       	ldd	r24, Z+4	; 0x04
     ff4:	95 81       	ldd	r25, Z+5	; 0x05
     ff6:	b7 01       	movw	r22, r14
     ff8:	82 0f       	add	r24, r18
     ffa:	93 1f       	adc	r25, r19
     ffc:	0e 94 8e 30 	call	0x611c	; 0x611c <strcpy>
    1000:	f8 01       	movw	r30, r16
    1002:	d5 83       	std	Z+5, r29	; 0x05
    1004:	c4 83       	std	Z+4, r28	; 0x04
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	03 c0       	rjmp	.+6      	; 0x1010 <_ZN6String6concatEPKcj+0x52>
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	01 c0       	rjmp	.+2      	; 0x1010 <_ZN6String6concatEPKcj+0x52>
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	ff 90       	pop	r15
    101a:	ef 90       	pop	r14
    101c:	08 95       	ret

0000101e <_ZplRK15StringSumHelperRK6String>:
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	ec 01       	movw	r28, r24
    1024:	fb 01       	movw	r30, r22
    1026:	44 81       	ldd	r20, Z+4	; 0x04
    1028:	55 81       	ldd	r21, Z+5	; 0x05
    102a:	60 81       	ld	r22, Z
    102c:	71 81       	ldd	r23, Z+1	; 0x01
    102e:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN6String6concatEPKcj>
    1032:	81 11       	cpse	r24, r1
    1034:	03 c0       	rjmp	.+6      	; 0x103c <_ZplRK15StringSumHelperRK6String+0x1e>
    1036:	ce 01       	movw	r24, r28
    1038:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZN6String10invalidateEv>
    103c:	ce 01       	movw	r24, r28
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	08 95       	ret

00001044 <_ZplRK15StringSumHelperPKc>:
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	ec 01       	movw	r28, r24
    104a:	61 15       	cp	r22, r1
    104c:	71 05       	cpc	r23, r1
    104e:	71 f0       	breq	.+28     	; 0x106c <_ZplRK15StringSumHelperPKc+0x28>
    1050:	fb 01       	movw	r30, r22
    1052:	01 90       	ld	r0, Z+
    1054:	00 20       	and	r0, r0
    1056:	e9 f7       	brne	.-6      	; 0x1052 <_ZplRK15StringSumHelperPKc+0xe>
    1058:	31 97       	sbiw	r30, 0x01	; 1
    105a:	af 01       	movw	r20, r30
    105c:	46 1b       	sub	r20, r22
    105e:	57 0b       	sbc	r21, r23
    1060:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN6String6concatEPKcj>
    1064:	88 23       	and	r24, r24
    1066:	21 f0       	breq	.+8      	; 0x1070 <_ZplRK15StringSumHelperPKc+0x2c>
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	03 c0       	rjmp	.+6      	; 0x1072 <_ZplRK15StringSumHelperPKc+0x2e>
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	01 c0       	rjmp	.+2      	; 0x1072 <_ZplRK15StringSumHelperPKc+0x2e>
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	88 23       	and	r24, r24
    1074:	19 f0       	breq	.+6      	; 0x107c <_ZplRK15StringSumHelperPKc+0x38>
    1076:	ce 01       	movw	r24, r28
    1078:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZN6String10invalidateEv>
    107c:	ce 01       	movw	r24, r28
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	08 95       	ret

00001084 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    1084:	fc 01       	movw	r30, r24
    1086:	24 81       	ldd	r18, Z+4	; 0x04
    1088:	35 81       	ldd	r19, Z+5	; 0x05
    108a:	62 17       	cp	r22, r18
    108c:	73 07       	cpc	r23, r19
    108e:	20 f4       	brcc	.+8      	; 0x1098 <_ZN6StringixEj+0x14>
    1090:	80 81       	ld	r24, Z
    1092:	91 81       	ldd	r25, Z+1	; 0x01
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	29 f4       	brne	.+10     	; 0x10a2 <_ZN6StringixEj+0x1e>
		dummy_writable_char = 0;
    1098:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <_ZZN6StringixEjE19dummy_writable_char>
		return dummy_writable_char;
    109c:	8d e2       	ldi	r24, 0x2D	; 45
    109e:	93 e0       	ldi	r25, 0x03	; 3
    10a0:	08 95       	ret
	}
	return buffer[index];
    10a2:	86 0f       	add	r24, r22
    10a4:	97 1f       	adc	r25, r23
}
    10a6:	08 95       	ret

000010a8 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    10a8:	cf 93       	push	r28
  uint8_t sreg = SREG;
    10aa:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    10ac:	f8 94       	cli
  if (!initialized) {
    10ae:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <_ZN8SPIClass11initializedE>
    10b2:	81 11       	cpse	r24, r1
    10b4:	27 c0       	rjmp	.+78     	; 0x1104 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    10b6:	ed e2       	ldi	r30, 0x2D	; 45
    10b8:	f2 e0       	ldi	r31, 0x02	; 2
    10ba:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    10bc:	e9 e1       	ldi	r30, 0x19	; 25
    10be:	f2 e0       	ldi	r31, 0x02	; 2
    10c0:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    10c2:	e8 2f       	mov	r30, r24
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	ee 0f       	add	r30, r30
    10c8:	ff 1f       	adc	r31, r31
    10ca:	ef 5b       	subi	r30, 0xBF	; 191
    10cc:	fd 4f       	sbci	r31, 0xFD	; 253
    10ce:	a5 91       	lpm	r26, Z+
    10d0:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    10d2:	ec 91       	ld	r30, X
    10d4:	e9 23       	and	r30, r25
    10d6:	21 f4       	brne	.+8      	; 0x10e0 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    10d8:	61 e0       	ldi	r22, 0x01	; 1
    10da:	8a e0       	ldi	r24, 0x0A	; 10
    10dc:	0e 94 d4 06 	call	0xda8	; 0xda8 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    10e0:	61 e0       	ldi	r22, 0x01	; 1
    10e2:	8a e0       	ldi	r24, 0x0A	; 10
    10e4:	0e 94 95 06 	call	0xd2a	; 0xd2a <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    10e8:	8c b5       	in	r24, 0x2c	; 44
    10ea:	80 61       	ori	r24, 0x10	; 16
    10ec:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    10ee:	8c b5       	in	r24, 0x2c	; 44
    10f0:	80 64       	ori	r24, 0x40	; 64
    10f2:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    10f4:	61 e0       	ldi	r22, 0x01	; 1
    10f6:	8d e0       	ldi	r24, 0x0D	; 13
    10f8:	0e 94 95 06 	call	0xd2a	; 0xd2a <pinMode>
    pinMode(MOSI, OUTPUT);
    10fc:	61 e0       	ldi	r22, 0x01	; 1
    10fe:	8b e0       	ldi	r24, 0x0B	; 11
    1100:	0e 94 95 06 	call	0xd2a	; 0xd2a <pinMode>
  }
  initialized++; // reference count
    1104:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <_ZN8SPIClass11initializedE>
    1108:	8f 5f       	subi	r24, 0xFF	; 255
    110a:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    110e:	cf bf       	out	0x3f, r28	; 63
}
    1110:	cf 91       	pop	r28
    1112:	08 95       	ret

00001114 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    1114:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <twi_state>
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <twi_sendStop>
    111e:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <twi_inRepStart>
    1122:	61 e0       	ldi	r22, 0x01	; 1
    1124:	82 e1       	ldi	r24, 0x12	; 18
    1126:	0e 94 d4 06 	call	0xda8	; 0xda8 <digitalWrite>
    112a:	61 e0       	ldi	r22, 0x01	; 1
    112c:	83 e1       	ldi	r24, 0x13	; 19
    112e:	0e 94 d4 06 	call	0xda8	; 0xda8 <digitalWrite>
    1132:	e9 eb       	ldi	r30, 0xB9	; 185
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	8e 7f       	andi	r24, 0xFE	; 254
    113a:	80 83       	st	Z, r24
    113c:	80 81       	ld	r24, Z
    113e:	8d 7f       	andi	r24, 0xFD	; 253
    1140:	80 83       	st	Z, r24
    1142:	88 e4       	ldi	r24, 0x48	; 72
    1144:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    1148:	85 e4       	ldi	r24, 0x45	; 69
    114a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    114e:	08 95       	ret

00001150 <twi_disable>:
    1150:	ec eb       	ldi	r30, 0xBC	; 188
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	8a 7b       	andi	r24, 0xBA	; 186
    1158:	80 83       	st	Z, r24
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	82 e1       	ldi	r24, 0x12	; 18
    115e:	0e 94 d4 06 	call	0xda8	; 0xda8 <digitalWrite>
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	83 e1       	ldi	r24, 0x13	; 19
    1166:	0e 94 d4 06 	call	0xda8	; 0xda8 <digitalWrite>
    116a:	08 95       	ret

0000116c <twi_transmit>:
    116c:	ac 01       	movw	r20, r24
    116e:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <twi_txBufferLength>
    1172:	26 2f       	mov	r18, r22
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	29 0f       	add	r18, r25
    1178:	31 1d       	adc	r19, r1
    117a:	21 32       	cpi	r18, 0x21	; 33
    117c:	31 05       	cpc	r19, r1
    117e:	f4 f4       	brge	.+60     	; 0x11bc <twi_transmit+0x50>
    1180:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <twi_state>
    1184:	84 30       	cpi	r24, 0x04	; 4
    1186:	e1 f4       	brne	.+56     	; 0x11c0 <twi_transmit+0x54>
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	0f c0       	rjmp	.+30     	; 0x11aa <twi_transmit+0x3e>
    118c:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <twi_txBufferLength>
    1190:	29 2f       	mov	r18, r25
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	f9 01       	movw	r30, r18
    1196:	e8 0f       	add	r30, r24
    1198:	f1 1d       	adc	r31, r1
    119a:	da 01       	movw	r26, r20
    119c:	a2 0f       	add	r26, r18
    119e:	b3 1f       	adc	r27, r19
    11a0:	8c 91       	ld	r24, X
    11a2:	ea 5a       	subi	r30, 0xAA	; 170
    11a4:	fc 4f       	sbci	r31, 0xFC	; 252
    11a6:	80 83       	st	Z, r24
    11a8:	9f 5f       	subi	r25, 0xFF	; 255
    11aa:	96 17       	cp	r25, r22
    11ac:	78 f3       	brcs	.-34     	; 0x118c <twi_transmit+0x20>
    11ae:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <twi_txBufferLength>
    11b2:	68 0f       	add	r22, r24
    11b4:	60 93 54 03 	sts	0x0354, r22	; 0x800354 <twi_txBufferLength>
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	08 95       	ret
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	08 95       	ret
    11c0:	82 e0       	ldi	r24, 0x02	; 2
    11c2:	08 95       	ret

000011c4 <twi_attachSlaveRxEvent>:
    11c4:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <twi_onSlaveReceive+0x1>
    11c8:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <twi_onSlaveReceive>
    11cc:	08 95       	ret

000011ce <twi_attachSlaveTxEvent>:
    11ce:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <twi_onSlaveTransmit+0x1>
    11d2:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <twi_onSlaveTransmit>
    11d6:	08 95       	ret

000011d8 <twi_reply>:
    11d8:	88 23       	and	r24, r24
    11da:	21 f0       	breq	.+8      	; 0x11e4 <twi_reply+0xc>
    11dc:	85 ec       	ldi	r24, 0xC5	; 197
    11de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    11e2:	08 95       	ret
    11e4:	85 e8       	ldi	r24, 0x85	; 133
    11e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    11ea:	08 95       	ret

000011ec <twi_releaseBus>:
    11ec:	85 ec       	ldi	r24, 0xC5	; 197
    11ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    11f2:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <twi_state>
    11f6:	08 95       	ret

000011f8 <twi_handleTimeout>:
    11f8:	ef 92       	push	r14
    11fa:	ff 92       	push	r15
    11fc:	0f 93       	push	r16
    11fe:	1f 93       	push	r17
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	91 e0       	ldi	r25, 0x01	; 1
    1206:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <twi_timed_out_flag>
    120a:	88 23       	and	r24, r24
    120c:	71 f0       	breq	.+28     	; 0x122a <twi_handleTimeout+0x32>
    120e:	c8 eb       	ldi	r28, 0xB8	; 184
    1210:	d0 e0       	ldi	r29, 0x00	; 0
    1212:	f8 80       	ld	r15, Y
    1214:	0a eb       	ldi	r16, 0xBA	; 186
    1216:	10 e0       	ldi	r17, 0x00	; 0
    1218:	f8 01       	movw	r30, r16
    121a:	e0 80       	ld	r14, Z
    121c:	0e 94 a8 08 	call	0x1150	; 0x1150 <twi_disable>
    1220:	0e 94 8a 08 	call	0x1114	; 0x1114 <twi_init>
    1224:	f8 01       	movw	r30, r16
    1226:	e0 82       	st	Z, r14
    1228:	f8 82       	st	Y, r15
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	1f 91       	pop	r17
    1230:	0f 91       	pop	r16
    1232:	ff 90       	pop	r15
    1234:	ef 90       	pop	r14
    1236:	08 95       	ret

00001238 <twi_writeTo>:
    1238:	4f 92       	push	r4
    123a:	5f 92       	push	r5
    123c:	6f 92       	push	r6
    123e:	7f 92       	push	r7
    1240:	8f 92       	push	r8
    1242:	9f 92       	push	r9
    1244:	af 92       	push	r10
    1246:	bf 92       	push	r11
    1248:	df 92       	push	r13
    124a:	ef 92       	push	r14
    124c:	ff 92       	push	r15
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	41 32       	cpi	r20, 0x21	; 33
    1258:	08 f0       	brcs	.+2      	; 0x125c <twi_writeTo+0x24>
    125a:	d9 c0       	rjmp	.+434    	; 0x140e <twi_writeTo+0x1d6>
    125c:	12 2f       	mov	r17, r18
    125e:	d4 2f       	mov	r29, r20
    1260:	7b 01       	movw	r14, r22
    1262:	d8 2e       	mov	r13, r24
    1264:	0e 94 70 05 	call	0xae0	; 0xae0 <micros>
    1268:	4b 01       	movw	r8, r22
    126a:	5c 01       	movw	r10, r24
    126c:	27 c0       	rjmp	.+78     	; 0x12bc <twi_writeTo+0x84>
    126e:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <twi_timeout_us>
    1272:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <twi_timeout_us+0x1>
    1276:	a0 91 a0 03 	lds	r26, 0x03A0	; 0x8003a0 <twi_timeout_us+0x2>
    127a:	b0 91 a1 03 	lds	r27, 0x03A1	; 0x8003a1 <twi_timeout_us+0x3>
    127e:	89 2b       	or	r24, r25
    1280:	8a 2b       	or	r24, r26
    1282:	8b 2b       	or	r24, r27
    1284:	d9 f0       	breq	.+54     	; 0x12bc <twi_writeTo+0x84>
    1286:	0e 94 70 05 	call	0xae0	; 0xae0 <micros>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	88 19       	sub	r24, r8
    1290:	99 09       	sbc	r25, r9
    1292:	aa 09       	sbc	r26, r10
    1294:	bb 09       	sbc	r27, r11
    1296:	40 90 9e 03 	lds	r4, 0x039E	; 0x80039e <twi_timeout_us>
    129a:	50 90 9f 03 	lds	r5, 0x039F	; 0x80039f <twi_timeout_us+0x1>
    129e:	60 90 a0 03 	lds	r6, 0x03A0	; 0x8003a0 <twi_timeout_us+0x2>
    12a2:	70 90 a1 03 	lds	r7, 0x03A1	; 0x8003a1 <twi_timeout_us+0x3>
    12a6:	48 16       	cp	r4, r24
    12a8:	59 06       	cpc	r5, r25
    12aa:	6a 06       	cpc	r6, r26
    12ac:	7b 06       	cpc	r7, r27
    12ae:	30 f4       	brcc	.+12     	; 0x12bc <twi_writeTo+0x84>
    12b0:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <twi_do_reset_on_timeout>
    12b4:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <twi_handleTimeout>
    12b8:	c5 e0       	ldi	r28, 0x05	; 5
    12ba:	ae c0       	rjmp	.+348    	; 0x1418 <twi_writeTo+0x1e0>
    12bc:	c0 91 a5 03 	lds	r28, 0x03A5	; 0x8003a5 <twi_state>
    12c0:	c1 11       	cpse	r28, r1
    12c2:	d5 cf       	rjmp	.-86     	; 0x126e <twi_writeTo+0x36>
    12c4:	82 e0       	ldi	r24, 0x02	; 2
    12c6:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <twi_state>
    12ca:	00 93 a3 03 	sts	0x03A3, r16	; 0x8003a3 <twi_sendStop>
    12ce:	8f ef       	ldi	r24, 0xFF	; 255
    12d0:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <twi_error>
    12d4:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <twi_masterBufferIndex>
    12d8:	d0 93 76 03 	sts	0x0376, r29	; 0x800376 <twi_masterBufferLength>
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	0a c0       	rjmp	.+20     	; 0x12f4 <twi_writeTo+0xbc>
    12e0:	e9 2f       	mov	r30, r25
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	d7 01       	movw	r26, r14
    12e6:	ae 0f       	add	r26, r30
    12e8:	bf 1f       	adc	r27, r31
    12ea:	3c 91       	ld	r19, X
    12ec:	e8 58       	subi	r30, 0x88	; 136
    12ee:	fc 4f       	sbci	r31, 0xFC	; 252
    12f0:	30 83       	st	Z, r19
    12f2:	9f 5f       	subi	r25, 0xFF	; 255
    12f4:	9d 17       	cp	r25, r29
    12f6:	a0 f3       	brcs	.-24     	; 0x12e0 <twi_writeTo+0xa8>
    12f8:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <twi_slarw>
    12fc:	8d 2d       	mov	r24, r13
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	d0 90 a4 03 	lds	r13, 0x03A4	; 0x8003a4 <twi_slarw>
    1308:	8d 29       	or	r24, r13
    130a:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <twi_slarw>
    130e:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <twi_inRepStart>
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	c9 f5       	brne	.+114    	; 0x1388 <twi_writeTo+0x150>
    1316:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <twi_inRepStart>
    131a:	0e 94 70 05 	call	0xae0	; 0xae0 <micros>
    131e:	4b 01       	movw	r8, r22
    1320:	5c 01       	movw	r10, r24
    1322:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <twi_slarw>
    1326:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    132a:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <twi_timeout_us>
    132e:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <twi_timeout_us+0x1>
    1332:	a0 91 a0 03 	lds	r26, 0x03A0	; 0x8003a0 <twi_timeout_us+0x2>
    1336:	b0 91 a1 03 	lds	r27, 0x03A1	; 0x8003a1 <twi_timeout_us+0x3>
    133a:	89 2b       	or	r24, r25
    133c:	8a 2b       	or	r24, r26
    133e:	8b 2b       	or	r24, r27
    1340:	d9 f0       	breq	.+54     	; 0x1378 <twi_writeTo+0x140>
    1342:	0e 94 70 05 	call	0xae0	; 0xae0 <micros>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	88 19       	sub	r24, r8
    134c:	99 09       	sbc	r25, r9
    134e:	aa 09       	sbc	r26, r10
    1350:	bb 09       	sbc	r27, r11
    1352:	40 90 9e 03 	lds	r4, 0x039E	; 0x80039e <twi_timeout_us>
    1356:	50 90 9f 03 	lds	r5, 0x039F	; 0x80039f <twi_timeout_us+0x1>
    135a:	60 90 a0 03 	lds	r6, 0x03A0	; 0x8003a0 <twi_timeout_us+0x2>
    135e:	70 90 a1 03 	lds	r7, 0x03A1	; 0x8003a1 <twi_timeout_us+0x3>
    1362:	48 16       	cp	r4, r24
    1364:	59 06       	cpc	r5, r25
    1366:	6a 06       	cpc	r6, r26
    1368:	7b 06       	cpc	r7, r27
    136a:	30 f4       	brcc	.+12     	; 0x1378 <twi_writeTo+0x140>
    136c:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <twi_do_reset_on_timeout>
    1370:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <twi_handleTimeout>
    1374:	c5 e0       	ldi	r28, 0x05	; 5
    1376:	50 c0       	rjmp	.+160    	; 0x1418 <twi_writeTo+0x1e0>
    1378:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    137c:	83 fd       	sbrc	r24, 3
    137e:	d1 cf       	rjmp	.-94     	; 0x1322 <twi_writeTo+0xea>
    1380:	85 ec       	ldi	r24, 0xC5	; 197
    1382:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1386:	03 c0       	rjmp	.+6      	; 0x138e <twi_writeTo+0x156>
    1388:	85 ee       	ldi	r24, 0xE5	; 229
    138a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    138e:	0e 94 70 05 	call	0xae0	; 0xae0 <micros>
    1392:	4b 01       	movw	r8, r22
    1394:	5c 01       	movw	r10, r24
    1396:	27 c0       	rjmp	.+78     	; 0x13e6 <twi_writeTo+0x1ae>
    1398:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <twi_timeout_us>
    139c:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <twi_timeout_us+0x1>
    13a0:	a0 91 a0 03 	lds	r26, 0x03A0	; 0x8003a0 <twi_timeout_us+0x2>
    13a4:	b0 91 a1 03 	lds	r27, 0x03A1	; 0x8003a1 <twi_timeout_us+0x3>
    13a8:	89 2b       	or	r24, r25
    13aa:	8a 2b       	or	r24, r26
    13ac:	8b 2b       	or	r24, r27
    13ae:	d9 f0       	breq	.+54     	; 0x13e6 <twi_writeTo+0x1ae>
    13b0:	0e 94 70 05 	call	0xae0	; 0xae0 <micros>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	88 19       	sub	r24, r8
    13ba:	99 09       	sbc	r25, r9
    13bc:	aa 09       	sbc	r26, r10
    13be:	bb 09       	sbc	r27, r11
    13c0:	40 90 9e 03 	lds	r4, 0x039E	; 0x80039e <twi_timeout_us>
    13c4:	50 90 9f 03 	lds	r5, 0x039F	; 0x80039f <twi_timeout_us+0x1>
    13c8:	60 90 a0 03 	lds	r6, 0x03A0	; 0x8003a0 <twi_timeout_us+0x2>
    13cc:	70 90 a1 03 	lds	r7, 0x03A1	; 0x8003a1 <twi_timeout_us+0x3>
    13d0:	48 16       	cp	r4, r24
    13d2:	59 06       	cpc	r5, r25
    13d4:	6a 06       	cpc	r6, r26
    13d6:	7b 06       	cpc	r7, r27
    13d8:	30 f4       	brcc	.+12     	; 0x13e6 <twi_writeTo+0x1ae>
    13da:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <twi_do_reset_on_timeout>
    13de:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <twi_handleTimeout>
    13e2:	c5 e0       	ldi	r28, 0x05	; 5
    13e4:	19 c0       	rjmp	.+50     	; 0x1418 <twi_writeTo+0x1e0>
    13e6:	11 23       	and	r17, r17
    13e8:	21 f0       	breq	.+8      	; 0x13f2 <twi_writeTo+0x1ba>
    13ea:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <twi_state>
    13ee:	82 30       	cpi	r24, 0x02	; 2
    13f0:	99 f2       	breq	.-90     	; 0x1398 <twi_writeTo+0x160>
    13f2:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <twi_error>
    13f6:	8f 3f       	cpi	r24, 0xFF	; 255
    13f8:	79 f0       	breq	.+30     	; 0x1418 <twi_writeTo+0x1e0>
    13fa:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <twi_error>
    13fe:	80 32       	cpi	r24, 0x20	; 32
    1400:	41 f0       	breq	.+16     	; 0x1412 <twi_writeTo+0x1da>
    1402:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <twi_error>
    1406:	80 33       	cpi	r24, 0x30	; 48
    1408:	31 f4       	brne	.+12     	; 0x1416 <twi_writeTo+0x1de>
    140a:	c3 e0       	ldi	r28, 0x03	; 3
    140c:	05 c0       	rjmp	.+10     	; 0x1418 <twi_writeTo+0x1e0>
    140e:	c1 e0       	ldi	r28, 0x01	; 1
    1410:	03 c0       	rjmp	.+6      	; 0x1418 <twi_writeTo+0x1e0>
    1412:	c2 e0       	ldi	r28, 0x02	; 2
    1414:	01 c0       	rjmp	.+2      	; 0x1418 <twi_writeTo+0x1e0>
    1416:	c4 e0       	ldi	r28, 0x04	; 4
    1418:	8c 2f       	mov	r24, r28
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	1f 91       	pop	r17
    1420:	0f 91       	pop	r16
    1422:	ff 90       	pop	r15
    1424:	ef 90       	pop	r14
    1426:	df 90       	pop	r13
    1428:	bf 90       	pop	r11
    142a:	af 90       	pop	r10
    142c:	9f 90       	pop	r9
    142e:	8f 90       	pop	r8
    1430:	7f 90       	pop	r7
    1432:	6f 90       	pop	r6
    1434:	5f 90       	pop	r5
    1436:	4f 90       	pop	r4
    1438:	08 95       	ret

0000143a <twi_stop>:
    143a:	85 ed       	ldi	r24, 0xD5	; 213
    143c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1440:	40 91 9e 03 	lds	r20, 0x039E	; 0x80039e <twi_timeout_us>
    1444:	50 91 9f 03 	lds	r21, 0x039F	; 0x80039f <twi_timeout_us+0x1>
    1448:	60 91 a0 03 	lds	r22, 0x03A0	; 0x8003a0 <twi_timeout_us+0x2>
    144c:	70 91 a1 03 	lds	r23, 0x03A1	; 0x8003a1 <twi_timeout_us+0x3>
    1450:	49 5f       	subi	r20, 0xF9	; 249
    1452:	5f 4f       	sbci	r21, 0xFF	; 255
    1454:	6f 4f       	sbci	r22, 0xFF	; 255
    1456:	7f 4f       	sbci	r23, 0xFF	; 255
    1458:	68 94       	set
    145a:	12 f8       	bld	r1, 2
    145c:	76 95       	lsr	r23
    145e:	67 95       	ror	r22
    1460:	57 95       	ror	r21
    1462:	47 95       	ror	r20
    1464:	16 94       	lsr	r1
    1466:	d1 f7       	brne	.-12     	; 0x145c <twi_stop+0x22>
    1468:	1f c0       	rjmp	.+62     	; 0x14a8 <twi_stop+0x6e>
    146a:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <twi_timeout_us>
    146e:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <twi_timeout_us+0x1>
    1472:	a0 91 a0 03 	lds	r26, 0x03A0	; 0x8003a0 <twi_timeout_us+0x2>
    1476:	b0 91 a1 03 	lds	r27, 0x03A1	; 0x8003a1 <twi_timeout_us+0x3>
    147a:	89 2b       	or	r24, r25
    147c:	8a 2b       	or	r24, r26
    147e:	8b 2b       	or	r24, r27
    1480:	99 f0       	breq	.+38     	; 0x14a8 <twi_stop+0x6e>
    1482:	41 15       	cp	r20, r1
    1484:	51 05       	cpc	r21, r1
    1486:	61 05       	cpc	r22, r1
    1488:	71 05       	cpc	r23, r1
    148a:	49 f0       	breq	.+18     	; 0x149e <twi_stop+0x64>
    148c:	85 e3       	ldi	r24, 0x35	; 53
    148e:	8a 95       	dec	r24
    1490:	f1 f7       	brne	.-4      	; 0x148e <twi_stop+0x54>
    1492:	00 00       	nop
    1494:	41 50       	subi	r20, 0x01	; 1
    1496:	51 09       	sbc	r21, r1
    1498:	61 09       	sbc	r22, r1
    149a:	71 09       	sbc	r23, r1
    149c:	05 c0       	rjmp	.+10     	; 0x14a8 <twi_stop+0x6e>
    149e:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <twi_do_reset_on_timeout>
    14a2:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <twi_handleTimeout>
    14a6:	08 95       	ret
    14a8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    14ac:	84 fd       	sbrc	r24, 4
    14ae:	dd cf       	rjmp	.-70     	; 0x146a <twi_stop+0x30>
    14b0:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <twi_state>
    14b4:	08 95       	ret

000014b6 <__vector_24>:

ISR(TWI_vect)
{
    14b6:	1f 92       	push	r1
    14b8:	0f 92       	push	r0
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	0f 92       	push	r0
    14be:	11 24       	eor	r1, r1
    14c0:	2f 93       	push	r18
    14c2:	3f 93       	push	r19
    14c4:	4f 93       	push	r20
    14c6:	5f 93       	push	r21
    14c8:	6f 93       	push	r22
    14ca:	7f 93       	push	r23
    14cc:	8f 93       	push	r24
    14ce:	9f 93       	push	r25
    14d0:	af 93       	push	r26
    14d2:	bf 93       	push	r27
    14d4:	ef 93       	push	r30
    14d6:	ff 93       	push	r31
  switch(TW_STATUS){
    14d8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    14dc:	e8 2f       	mov	r30, r24
    14de:	e8 7f       	andi	r30, 0xF8	; 248
    14e0:	8e 2f       	mov	r24, r30
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	89 3c       	cpi	r24, 0xC9	; 201
    14e6:	91 05       	cpc	r25, r1
    14e8:	08 f0       	brcs	.+2      	; 0x14ec <__vector_24+0x36>
    14ea:	f5 c0       	rjmp	.+490    	; 0x16d6 <__vector_24+0x220>
    14ec:	fc 01       	movw	r30, r24
    14ee:	ec 5c       	subi	r30, 0xCC	; 204
    14f0:	ff 4f       	sbci	r31, 0xFF	; 255
    14f2:	0c 94 4d 2e 	jmp	0x5c9a	; 0x5c9a <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    14f6:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <twi_slarw>
    14fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      twi_reply(1);
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <twi_reply>
      break;
    1504:	e8 c0       	rjmp	.+464    	; 0x16d6 <__vector_24+0x220>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1506:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <twi_masterBufferIndex>
    150a:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <twi_masterBufferLength>
    150e:	98 17       	cp	r25, r24
    1510:	80 f4       	brcc	.+32     	; 0x1532 <__vector_24+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1512:	e0 91 77 03 	lds	r30, 0x0377	; 0x800377 <twi_masterBufferIndex>
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	8e 0f       	add	r24, r30
    151a:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <twi_masterBufferIndex>
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	e8 58       	subi	r30, 0x88	; 136
    1522:	fc 4f       	sbci	r31, 0xFC	; 252
    1524:	80 81       	ld	r24, Z
    1526:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
        twi_reply(1);
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <twi_reply>
    1530:	d2 c0       	rjmp	.+420    	; 0x16d6 <__vector_24+0x220>
      }else{
        if (twi_sendStop){
    1532:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <twi_sendStop>
    1536:	88 23       	and	r24, r24
    1538:	19 f0       	breq	.+6      	; 0x1540 <__vector_24+0x8a>
          twi_stop();
    153a:	0e 94 1d 0a 	call	0x143a	; 0x143a <twi_stop>
    153e:	cb c0       	rjmp	.+406    	; 0x16d6 <__vector_24+0x220>
       } else {
         twi_inRepStart = true;	// we're gonna send the START
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <twi_inRepStart>
         // don't enable the interrupt. We'll generate the start, but we
         // avoid handling the interrupt until we're in the next transaction,
         // at the point where we would normally issue the start.
         TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1546:	84 ea       	ldi	r24, 0xA4	; 164
    1548:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
         twi_state = TWI_READY;
    154c:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <twi_state>
    1550:	c2 c0       	rjmp	.+388    	; 0x16d6 <__vector_24+0x220>
        }
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    1552:	80 e2       	ldi	r24, 0x20	; 32
    1554:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <twi_error>
      twi_stop();
    1558:	0e 94 1d 0a 	call	0x143a	; 0x143a <twi_stop>
      break;
    155c:	bc c0       	rjmp	.+376    	; 0x16d6 <__vector_24+0x220>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    155e:	80 e3       	ldi	r24, 0x30	; 48
    1560:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <twi_error>
      twi_stop();
    1564:	0e 94 1d 0a 	call	0x143a	; 0x143a <twi_stop>
      break;
    1568:	b6 c0       	rjmp	.+364    	; 0x16d6 <__vector_24+0x220>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    156a:	88 e3       	ldi	r24, 0x38	; 56
    156c:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <twi_error>
      twi_releaseBus();
    1570:	0e 94 f6 08 	call	0x11ec	; 0x11ec <twi_releaseBus>
      break;
    1574:	b0 c0       	rjmp	.+352    	; 0x16d6 <__vector_24+0x220>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1576:	e0 91 77 03 	lds	r30, 0x0377	; 0x800377 <twi_masterBufferIndex>
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	8e 0f       	add	r24, r30
    157e:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <twi_masterBufferIndex>
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    1588:	e8 58       	subi	r30, 0x88	; 136
    158a:	fc 4f       	sbci	r31, 0xFC	; 252
    158c:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    158e:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <twi_masterBufferIndex>
    1592:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <twi_masterBufferLength>
    1596:	98 17       	cp	r25, r24
    1598:	20 f4       	brcc	.+8      	; 0x15a2 <__vector_24+0xec>
        twi_reply(1);
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <twi_reply>
    15a0:	9a c0       	rjmp	.+308    	; 0x16d6 <__vector_24+0x220>
      }else{
        twi_reply(0);
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <twi_reply>
    15a8:	96 c0       	rjmp	.+300    	; 0x16d6 <__vector_24+0x220>
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    15aa:	e0 91 77 03 	lds	r30, 0x0377	; 0x800377 <twi_masterBufferIndex>
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	8e 0f       	add	r24, r30
    15b2:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <twi_masterBufferIndex>
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    15bc:	e8 58       	subi	r30, 0x88	; 136
    15be:	fc 4f       	sbci	r31, 0xFC	; 252
    15c0:	80 83       	st	Z, r24
      if (twi_sendStop){
    15c2:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <twi_sendStop>
    15c6:	88 23       	and	r24, r24
    15c8:	19 f0       	breq	.+6      	; 0x15d0 <__vector_24+0x11a>
        twi_stop();
    15ca:	0e 94 1d 0a 	call	0x143a	; 0x143a <twi_stop>
    15ce:	83 c0       	rjmp	.+262    	; 0x16d6 <__vector_24+0x220>
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    15d6:	84 ea       	ldi	r24, 0xA4	; 164
    15d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
        twi_state = TWI_READY;
    15dc:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <twi_state>
    15e0:	7a c0       	rjmp	.+244    	; 0x16d6 <__vector_24+0x220>
      }
      break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    15e2:	0e 94 1d 0a 	call	0x143a	; 0x143a <twi_stop>
      break;
    15e6:	77 c0       	rjmp	.+238    	; 0x16d6 <__vector_24+0x220>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    15e8:	83 e0       	ldi	r24, 0x03	; 3
    15ea:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    15ee:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <twi_rxBufferIndex>
      twi_reply(1);
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <twi_reply>
      break;
    15f8:	6e c0       	rjmp	.+220    	; 0x16d6 <__vector_24+0x220>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    15fa:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <twi_rxBufferIndex>
    15fe:	80 32       	cpi	r24, 0x20	; 32
    1600:	80 f4       	brcc	.+32     	; 0x1622 <__vector_24+0x16c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1602:	e0 91 33 03 	lds	r30, 0x0333	; 0x800333 <twi_rxBufferIndex>
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	8e 0f       	add	r24, r30
    160a:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <twi_rxBufferIndex>
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    1614:	ec 5c       	subi	r30, 0xCC	; 204
    1616:	fc 4f       	sbci	r31, 0xFC	; 252
    1618:	80 83       	st	Z, r24
        twi_reply(1);
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <twi_reply>
    1620:	5a c0       	rjmp	.+180    	; 0x16d6 <__vector_24+0x220>
      }else{
        // otherwise nack
        twi_reply(0);
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <twi_reply>
    1628:	56 c0       	rjmp	.+172    	; 0x16d6 <__vector_24+0x220>
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    162a:	0e 94 f6 08 	call	0x11ec	; 0x11ec <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    162e:	80 91 33 03 	lds	r24, 0x0333	; 0x800333 <twi_rxBufferIndex>
    1632:	80 32       	cpi	r24, 0x20	; 32
    1634:	30 f4       	brcc	.+12     	; 0x1642 <__vector_24+0x18c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1636:	e0 91 33 03 	lds	r30, 0x0333	; 0x800333 <twi_rxBufferIndex>
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	ec 5c       	subi	r30, 0xCC	; 204
    163e:	fc 4f       	sbci	r31, 0xFC	; 252
    1640:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1642:	60 91 33 03 	lds	r22, 0x0333	; 0x800333 <twi_rxBufferIndex>
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	e0 91 98 03 	lds	r30, 0x0398	; 0x800398 <twi_onSlaveReceive>
    164c:	f0 91 99 03 	lds	r31, 0x0399	; 0x800399 <twi_onSlaveReceive+0x1>
    1650:	84 e3       	ldi	r24, 0x34	; 52
    1652:	93 e0       	ldi	r25, 0x03	; 3
    1654:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1656:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <twi_rxBufferIndex>
      break;
    165a:	3d c0       	rjmp	.+122    	; 0x16d6 <__vector_24+0x220>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <twi_reply>
      break;
    1662:	39 c0       	rjmp	.+114    	; 0x16d6 <__vector_24+0x220>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1664:	84 e0       	ldi	r24, 0x04	; 4
    1666:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    166a:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    166e:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1672:	e0 91 9a 03 	lds	r30, 0x039A	; 0x80039a <twi_onSlaveTransmit>
    1676:	f0 91 9b 03 	lds	r31, 0x039B	; 0x80039b <twi_onSlaveTransmit+0x1>
    167a:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    167c:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <twi_txBufferLength>
    1680:	81 11       	cpse	r24, r1
    1682:	05 c0       	rjmp	.+10     	; 0x168e <__vector_24+0x1d8>
        twi_txBufferLength = 1;
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    168a:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    168e:	e0 91 55 03 	lds	r30, 0x0355	; 0x800355 <twi_txBufferIndex>
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	8e 0f       	add	r24, r30
    1696:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <twi_txBufferIndex>
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	ea 5a       	subi	r30, 0xAA	; 170
    169e:	fc 4f       	sbci	r31, 0xFC	; 252
    16a0:	80 81       	ld	r24, Z
    16a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    16a6:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <twi_txBufferIndex>
    16aa:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <twi_txBufferLength>
    16ae:	98 17       	cp	r25, r24
    16b0:	20 f4       	brcc	.+8      	; 0x16ba <__vector_24+0x204>
        twi_reply(1);
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <twi_reply>
    16b8:	0e c0       	rjmp	.+28     	; 0x16d6 <__vector_24+0x220>
      }else{
        twi_reply(0);
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <twi_reply>
    16c0:	0a c0       	rjmp	.+20     	; 0x16d6 <__vector_24+0x220>
      }
      break;
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
    16c8:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <twi_state>
      break;
    16cc:	04 c0       	rjmp	.+8      	; 0x16d6 <__vector_24+0x220>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    16ce:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <twi_error>
      twi_stop();
    16d2:	0e 94 1d 0a 	call	0x143a	; 0x143a <twi_stop>
      break;
  }
}
    16d6:	ff 91       	pop	r31
    16d8:	ef 91       	pop	r30
    16da:	bf 91       	pop	r27
    16dc:	af 91       	pop	r26
    16de:	9f 91       	pop	r25
    16e0:	8f 91       	pop	r24
    16e2:	7f 91       	pop	r23
    16e4:	6f 91       	pop	r22
    16e6:	5f 91       	pop	r21
    16e8:	4f 91       	pop	r20
    16ea:	3f 91       	pop	r19
    16ec:	2f 91       	pop	r18
    16ee:	0f 90       	pop	r0
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	0f 90       	pop	r0
    16f4:	1f 90       	pop	r1
    16f6:	18 95       	reti

000016f8 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    16f8:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <_ZN7TwoWire14rxBufferLengthE>
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	20 91 db 03 	lds	r18, 0x03DB	; 0x8003db <_ZN7TwoWire13rxBufferIndexE>
    1702:	82 1b       	sub	r24, r18
    1704:	91 09       	sbc	r25, r1
    1706:	08 95       	ret

00001708 <_ZN7TwoWire4readEv>:
    1708:	90 91 db 03 	lds	r25, 0x03DB	; 0x8003db <_ZN7TwoWire13rxBufferIndexE>
    170c:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <_ZN7TwoWire14rxBufferLengthE>
    1710:	98 17       	cp	r25, r24
    1712:	50 f4       	brcc	.+20     	; 0x1728 <_ZN7TwoWire4readEv+0x20>
    1714:	e9 2f       	mov	r30, r25
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	e4 52       	subi	r30, 0x24	; 36
    171a:	fc 4f       	sbci	r31, 0xFC	; 252
    171c:	20 81       	ld	r18, Z
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	9f 5f       	subi	r25, 0xFF	; 255
    1722:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <_ZN7TwoWire13rxBufferIndexE>
    1726:	02 c0       	rjmp	.+4      	; 0x172c <_ZN7TwoWire4readEv+0x24>
    1728:	2f ef       	ldi	r18, 0xFF	; 255
    172a:	3f ef       	ldi	r19, 0xFF	; 255
    172c:	c9 01       	movw	r24, r18
    172e:	08 95       	ret

00001730 <_ZN7TwoWire4peekEv>:
    1730:	e0 91 db 03 	lds	r30, 0x03DB	; 0x8003db <_ZN7TwoWire13rxBufferIndexE>
    1734:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <_ZN7TwoWire14rxBufferLengthE>
    1738:	e8 17       	cp	r30, r24
    173a:	30 f4       	brcc	.+12     	; 0x1748 <_ZN7TwoWire4peekEv+0x18>
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	e4 52       	subi	r30, 0x24	; 36
    1740:	fc 4f       	sbci	r31, 0xFC	; 252
    1742:	80 81       	ld	r24, Z
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	08 95       	ret
    1748:	8f ef       	ldi	r24, 0xFF	; 255
    174a:	9f ef       	ldi	r25, 0xFF	; 255
    174c:	08 95       	ret

0000174e <_ZN7TwoWire5flushEv>:
    174e:	08 95       	ret

00001750 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	ec 01       	movw	r28, r24
    1756:	e0 91 b2 03 	lds	r30, 0x03B2	; 0x8003b2 <_ZN7TwoWire14user_onReceiveE>
    175a:	f0 91 b3 03 	lds	r31, 0x03B3	; 0x8003b3 <_ZN7TwoWire14user_onReceiveE+0x1>
    175e:	30 97       	sbiw	r30, 0x00	; 0
    1760:	e1 f0       	breq	.+56     	; 0x179a <_ZN7TwoWire16onReceiveServiceEPhi+0x4a>
    1762:	90 91 db 03 	lds	r25, 0x03DB	; 0x8003db <_ZN7TwoWire13rxBufferIndexE>
    1766:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <_ZN7TwoWire14rxBufferLengthE>
    176a:	98 17       	cp	r25, r24
    176c:	b0 f0       	brcs	.+44     	; 0x179a <_ZN7TwoWire16onReceiveServiceEPhi+0x4a>
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	29 2f       	mov	r18, r25
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	26 17       	cp	r18, r22
    1776:	37 07       	cpc	r19, r23
    1778:	54 f4       	brge	.+20     	; 0x178e <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    177a:	de 01       	movw	r26, r28
    177c:	a9 0f       	add	r26, r25
    177e:	b1 1d       	adc	r27, r1
    1780:	4c 91       	ld	r20, X
    1782:	d9 01       	movw	r26, r18
    1784:	a4 52       	subi	r26, 0x24	; 36
    1786:	bc 4f       	sbci	r27, 0xFC	; 252
    1788:	4c 93       	st	X, r20
    178a:	9f 5f       	subi	r25, 0xFF	; 255
    178c:	f1 cf       	rjmp	.-30     	; 0x1770 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    178e:	cb 01       	movw	r24, r22
    1790:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <_ZN7TwoWire13rxBufferIndexE>
    1794:	60 93 da 03 	sts	0x03DA, r22	; 0x8003da <_ZN7TwoWire14rxBufferLengthE>
    1798:	09 95       	icall
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	08 95       	ret

000017a0 <_ZN7TwoWire16onRequestServiceEv>:
    17a0:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <_ZN7TwoWire14user_onRequestE>
    17a4:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <_ZN7TwoWire14user_onRequestE+0x1>
    17a8:	30 97       	sbiw	r30, 0x00	; 0
    17aa:	29 f0       	breq	.+10     	; 0x17b6 <_ZN7TwoWire16onRequestServiceEv+0x16>
    17ac:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <_ZN7TwoWire13txBufferIndexE>
    17b0:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <_ZN7TwoWire14txBufferLengthE>
    17b4:	09 95       	icall
    17b6:	08 95       	ret

000017b8 <_ZN7TwoWire5writeEPKhj>:
    17b8:	cf 92       	push	r12
    17ba:	df 92       	push	r13
    17bc:	ef 92       	push	r14
    17be:	ff 92       	push	r15
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	8c 01       	movw	r16, r24
    17ca:	6b 01       	movw	r12, r22
    17cc:	7a 01       	movw	r14, r20
    17ce:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <_ZN7TwoWire12transmittingE>
    17d2:	88 23       	and	r24, r24
    17d4:	99 f0       	breq	.+38     	; 0x17fc <_ZN7TwoWire5writeEPKhj+0x44>
    17d6:	c0 e0       	ldi	r28, 0x00	; 0
    17d8:	d0 e0       	ldi	r29, 0x00	; 0
    17da:	ce 15       	cp	r28, r14
    17dc:	df 05       	cpc	r29, r15
    17de:	90 f4       	brcc	.+36     	; 0x1804 <_ZN7TwoWire5writeEPKhj+0x4c>
    17e0:	d8 01       	movw	r26, r16
    17e2:	ed 91       	ld	r30, X+
    17e4:	fc 91       	ld	r31, X
    17e6:	01 90       	ld	r0, Z+
    17e8:	f0 81       	ld	r31, Z
    17ea:	e0 2d       	mov	r30, r0
    17ec:	d6 01       	movw	r26, r12
    17ee:	ac 0f       	add	r26, r28
    17f0:	bd 1f       	adc	r27, r29
    17f2:	6c 91       	ld	r22, X
    17f4:	c8 01       	movw	r24, r16
    17f6:	09 95       	icall
    17f8:	21 96       	adiw	r28, 0x01	; 1
    17fa:	ef cf       	rjmp	.-34     	; 0x17da <_ZN7TwoWire5writeEPKhj+0x22>
    17fc:	64 2f       	mov	r22, r20
    17fe:	c6 01       	movw	r24, r12
    1800:	0e 94 b6 08 	call	0x116c	; 0x116c <twi_transmit>
    1804:	c7 01       	movw	r24, r14
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	1f 91       	pop	r17
    180c:	0f 91       	pop	r16
    180e:	ff 90       	pop	r15
    1810:	ef 90       	pop	r14
    1812:	df 90       	pop	r13
    1814:	cf 90       	pop	r12
    1816:	08 95       	ret

00001818 <_ZN7TwoWire5writeEh>:
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	1f 92       	push	r1
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	fc 01       	movw	r30, r24
    1824:	69 83       	std	Y+1, r22	; 0x01
    1826:	90 91 b6 03 	lds	r25, 0x03B6	; 0x8003b6 <_ZN7TwoWire12transmittingE>
    182a:	99 23       	and	r25, r25
    182c:	d9 f0       	breq	.+54     	; 0x1864 <_ZN7TwoWire5writeEh+0x4c>
    182e:	90 91 b7 03 	lds	r25, 0x03B7	; 0x8003b7 <_ZN7TwoWire14txBufferLengthE>
    1832:	90 32       	cpi	r25, 0x20	; 32
    1834:	38 f0       	brcs	.+14     	; 0x1844 <_ZN7TwoWire5writeEh+0x2c>
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	93 83       	std	Z+3, r25	; 0x03
    183c:	82 83       	std	Z+2, r24	; 0x02
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	17 c0       	rjmp	.+46     	; 0x1872 <_ZN7TwoWire5writeEh+0x5a>
    1844:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <_ZN7TwoWire13txBufferIndexE>
    1848:	e8 2f       	mov	r30, r24
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	e7 54       	subi	r30, 0x47	; 71
    184e:	fc 4f       	sbci	r31, 0xFC	; 252
    1850:	99 81       	ldd	r25, Y+1	; 0x01
    1852:	90 83       	st	Z, r25
    1854:	8f 5f       	subi	r24, 0xFF	; 255
    1856:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <_ZN7TwoWire13txBufferIndexE>
    185a:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <_ZN7TwoWire14txBufferLengthE>
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	07 c0       	rjmp	.+14     	; 0x1872 <_ZN7TwoWire5writeEh+0x5a>
    1864:	61 e0       	ldi	r22, 0x01	; 1
    1866:	ce 01       	movw	r24, r28
    1868:	01 96       	adiw	r24, 0x01	; 1
    186a:	0e 94 b6 08 	call	0x116c	; 0x116c <twi_transmit>
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	0f 90       	pop	r0
    1874:	df 91       	pop	r29
    1876:	cf 91       	pop	r28
    1878:	08 95       	ret

0000187a <_ZN7TwoWireC1Ev>:
    187a:	fc 01       	movw	r30, r24
    187c:	13 82       	std	Z+3, r1	; 0x03
    187e:	12 82       	std	Z+2, r1	; 0x02
    1880:	88 ee       	ldi	r24, 0xE8	; 232
    1882:	93 e0       	ldi	r25, 0x03	; 3
    1884:	a0 e0       	ldi	r26, 0x00	; 0
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	84 83       	std	Z+4, r24	; 0x04
    188a:	95 83       	std	Z+5, r25	; 0x05
    188c:	a6 83       	std	Z+6, r26	; 0x06
    188e:	b7 83       	std	Z+7, r27	; 0x07
    1890:	85 e9       	ldi	r24, 0x95	; 149
    1892:	91 e0       	ldi	r25, 0x01	; 1
    1894:	91 83       	std	Z+1, r25	; 0x01
    1896:	80 83       	st	Z, r24
    1898:	08 95       	ret

0000189a <_Z41__static_initialization_and_destruction_0ii>:
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	39 f4       	brne	.+14     	; 0x18ac <_Z41__static_initialization_and_destruction_0ii+0x12>
    189e:	6f 3f       	cpi	r22, 0xFF	; 255
    18a0:	7f 4f       	sbci	r23, 0xFF	; 255
    18a2:	21 f4       	brne	.+8      	; 0x18ac <_Z41__static_initialization_and_destruction_0ii+0x12>
    18a4:	86 ea       	ldi	r24, 0xA6	; 166
    18a6:	93 e0       	ldi	r25, 0x03	; 3
    18a8:	0e 94 3d 0c 	call	0x187a	; 0x187a <_ZN7TwoWireC1Ev>
    18ac:	08 95       	ret

000018ae <_ZN7TwoWire5beginEv>:
    18ae:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <_ZN7TwoWire13rxBufferIndexE>
    18b2:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <_ZN7TwoWire14rxBufferLengthE>
    18b6:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <_ZN7TwoWire13txBufferIndexE>
    18ba:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <_ZN7TwoWire14txBufferLengthE>
    18be:	0e 94 8a 08 	call	0x1114	; 0x1114 <twi_init>
    18c2:	80 ed       	ldi	r24, 0xD0	; 208
    18c4:	9b e0       	ldi	r25, 0x0B	; 11
    18c6:	0e 94 e7 08 	call	0x11ce	; 0x11ce <twi_attachSlaveTxEvent>
    18ca:	88 ea       	ldi	r24, 0xA8	; 168
    18cc:	9b e0       	ldi	r25, 0x0B	; 11
    18ce:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <twi_attachSlaveRxEvent>
    18d2:	08 95       	ret

000018d4 <_ZN7TwoWire17beginTransmissionEh>:
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <_ZN7TwoWire12transmittingE>
    18da:	60 93 d9 03 	sts	0x03D9, r22	; 0x8003d9 <_ZN7TwoWire9txAddressE>
    18de:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <_ZN7TwoWire13txBufferIndexE>
    18e2:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <_ZN7TwoWire14txBufferLengthE>
    18e6:	08 95       	ret

000018e8 <_ZN7TwoWire15endTransmissionEh>:
    18e8:	0f 93       	push	r16
    18ea:	40 91 b7 03 	lds	r20, 0x03B7	; 0x8003b7 <_ZN7TwoWire14txBufferLengthE>
    18ee:	06 2f       	mov	r16, r22
    18f0:	21 e0       	ldi	r18, 0x01	; 1
    18f2:	69 eb       	ldi	r22, 0xB9	; 185
    18f4:	73 e0       	ldi	r23, 0x03	; 3
    18f6:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <_ZN7TwoWire9txAddressE>
    18fa:	0e 94 1c 09 	call	0x1238	; 0x1238 <twi_writeTo>
    18fe:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <_ZN7TwoWire13txBufferIndexE>
    1902:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <_ZN7TwoWire14txBufferLengthE>
    1906:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <_ZN7TwoWire12transmittingE>
    190a:	0f 91       	pop	r16
    190c:	08 95       	ret

0000190e <_ZN7TwoWire15endTransmissionEv>:
    190e:	61 e0       	ldi	r22, 0x01	; 1
    1910:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZN7TwoWire15endTransmissionEh>
    1914:	08 95       	ret

00001916 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1916:	6f ef       	ldi	r22, 0xFF	; 255
    1918:	7f ef       	ldi	r23, 0xFF	; 255
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	0e 94 4d 0c 	call	0x189a	; 0x189a <_Z41__static_initialization_and_destruction_0ii>
    1922:	08 95       	ret

00001924 <_ZN5SDLib4File5writeEh>:
int File::read(void *buf, uint16_t nbyte) {
  if (_file) {
    return _file->read(buf, nbyte);
  }
  return 0;
}
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	1f 92       	push	r1
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	69 83       	std	Y+1, r22	; 0x01
    1930:	dc 01       	movw	r26, r24
    1932:	ed 91       	ld	r30, X+
    1934:	fc 91       	ld	r31, X
    1936:	02 80       	ldd	r0, Z+2	; 0x02
    1938:	f3 81       	ldd	r31, Z+3	; 0x03
    193a:	e0 2d       	mov	r30, r0
    193c:	41 e0       	ldi	r20, 0x01	; 1
    193e:	50 e0       	ldi	r21, 0x00	; 0
    1940:	be 01       	movw	r22, r28
    1942:	6f 5f       	subi	r22, 0xFF	; 255
    1944:	7f 4f       	sbci	r23, 0xFF	; 255
    1946:	09 95       	icall
    1948:	0f 90       	pop	r0
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	08 95       	ret

00001950 <_ZN5SDLib4File17availableForWriteEv>:
    1950:	dc 01       	movw	r26, r24
    1952:	59 96       	adiw	r26, 0x19	; 25
    1954:	8d 91       	ld	r24, X+
    1956:	9c 91       	ld	r25, X
    1958:	5a 97       	sbiw	r26, 0x1a	; 26
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	41 f0       	breq	.+16     	; 0x196e <_ZN5SDLib4File17availableForWriteEv+0x1e>
    195e:	dc 01       	movw	r26, r24
    1960:	ed 91       	ld	r30, X+
    1962:	fc 91       	ld	r31, X
    1964:	04 80       	ldd	r0, Z+4	; 0x04
    1966:	f5 81       	ldd	r31, Z+5	; 0x05
    1968:	e0 2d       	mov	r30, r0
    196a:	09 95       	icall
    196c:	08 95       	ret
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	08 95       	ret

00001974 <_ZN5SDLib4File5writeEPKhj>:
    1974:	cf 93       	push	r28
    1976:	df 93       	push	r29
    1978:	dc 01       	movw	r26, r24
    197a:	59 96       	adiw	r26, 0x19	; 25
    197c:	ed 91       	ld	r30, X+
    197e:	fc 91       	ld	r31, X
    1980:	5a 97       	sbiw	r26, 0x1a	; 26
    1982:	30 97       	sbiw	r30, 0x00	; 0
    1984:	49 f4       	brne	.+18     	; 0x1998 <_ZN5SDLib4File5writeEPKhj+0x24>
    1986:	21 e0       	ldi	r18, 0x01	; 1
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	13 96       	adiw	r26, 0x03	; 3
    198c:	3c 93       	st	X, r19
    198e:	2e 93       	st	-X, r18
    1990:	12 97       	sbiw	r26, 0x02	; 2
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	13 c0       	rjmp	.+38     	; 0x19be <_ZN5SDLib4File5writeEPKhj+0x4a>
    1998:	ec 01       	movw	r28, r24
    199a:	13 82       	std	Z+3, r1	; 0x03
    199c:	12 82       	std	Z+2, r1	; 0x02
    199e:	89 8d       	ldd	r24, Y+25	; 0x19
    19a0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    19a2:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <_ZN6SdFile5writeEPKvj>
    19a6:	e9 8d       	ldd	r30, Y+25	; 0x19
    19a8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    19aa:	22 81       	ldd	r18, Z+2	; 0x02
    19ac:	33 81       	ldd	r19, Z+3	; 0x03
    19ae:	23 2b       	or	r18, r19
    19b0:	31 f0       	breq	.+12     	; 0x19be <_ZN5SDLib4File5writeEPKhj+0x4a>
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	9b 83       	std	Y+3, r25	; 0x03
    19b8:	8a 83       	std	Y+2, r24	; 0x02
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	08 95       	ret

000019c4 <_ZN5SDLib4File4readEv>:
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	1f 92       	push	r1
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    19ce:	fc 01       	movw	r30, r24
    19d0:	81 8d       	ldd	r24, Z+25	; 0x19
    19d2:	92 8d       	ldd	r25, Z+26	; 0x1a
    19d4:	00 97       	sbiw	r24, 0x00	; 0
    19d6:	79 f0       	breq	.+30     	; 0x19f6 <_ZN5SDLib4File4readEv+0x32>
    19d8:	41 e0       	ldi	r20, 0x01	; 1
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	be 01       	movw	r22, r28
    19de:	6f 5f       	subi	r22, 0xFF	; 255
    19e0:	7f 4f       	sbci	r23, 0xFF	; 255
    19e2:	0e 94 65 16 	call	0x2cca	; 0x2cca <_ZN6SdFile4readEPvj>
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	19 f4       	brne	.+6      	; 0x19f0 <_ZN5SDLib4File4readEv+0x2c>
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	05 c0       	rjmp	.+10     	; 0x19fa <_ZN5SDLib4File4readEv+0x36>
    19f0:	8f ef       	ldi	r24, 0xFF	; 255
    19f2:	9f ef       	ldi	r25, 0xFF	; 255
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <_ZN5SDLib4File4readEv+0x36>
    19f6:	8f ef       	ldi	r24, 0xFF	; 255
    19f8:	9f ef       	ldi	r25, 0xFF	; 255
    19fa:	0f 90       	pop	r0
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	08 95       	ret

00001a02 <_ZN5SDLib4File4peekEv>:
    1a02:	ef 92       	push	r14
    1a04:	ff 92       	push	r15
    1a06:	0f 93       	push	r16
    1a08:	1f 93       	push	r17
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	1f 92       	push	r1
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	fc 01       	movw	r30, r24
    1a16:	81 8d       	ldd	r24, Z+25	; 0x19
    1a18:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	19 f1       	breq	.+70     	; 0x1a64 <_ZN5SDLib4File4peekEv+0x62>
    1a1e:	8f 01       	movw	r16, r30
    1a20:	41 e0       	ldi	r20, 0x01	; 1
    1a22:	50 e0       	ldi	r21, 0x00	; 0
    1a24:	be 01       	movw	r22, r28
    1a26:	6f 5f       	subi	r22, 0xFF	; 255
    1a28:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2a:	0e 94 65 16 	call	0x2cca	; 0x2cca <_ZN6SdFile4readEPvj>
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	19 f4       	brne	.+6      	; 0x1a38 <_ZN5SDLib4File4peekEv+0x36>
    1a32:	e9 80       	ldd	r14, Y+1	; 0x01
    1a34:	f1 2c       	mov	r15, r1
    1a36:	03 c0       	rjmp	.+6      	; 0x1a3e <_ZN5SDLib4File4peekEv+0x3c>
    1a38:	ee 24       	eor	r14, r14
    1a3a:	ea 94       	dec	r14
    1a3c:	fe 2c       	mov	r15, r14
    1a3e:	8f ef       	ldi	r24, 0xFF	; 255
    1a40:	e8 16       	cp	r14, r24
    1a42:	f8 06       	cpc	r15, r24
    1a44:	89 f0       	breq	.+34     	; 0x1a68 <_ZN5SDLib4File4peekEv+0x66>
    1a46:	f8 01       	movw	r30, r16
    1a48:	81 8d       	ldd	r24, Z+25	; 0x19
    1a4a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	42 85       	ldd	r20, Z+10	; 0x0a
    1a50:	53 85       	ldd	r21, Z+11	; 0x0b
    1a52:	64 85       	ldd	r22, Z+12	; 0x0c
    1a54:	75 85       	ldd	r23, Z+13	; 0x0d
    1a56:	41 50       	subi	r20, 0x01	; 1
    1a58:	51 09       	sbc	r21, r1
    1a5a:	61 09       	sbc	r22, r1
    1a5c:	71 09       	sbc	r23, r1
    1a5e:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <_ZN6SdFile7seekSetEm>
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <_ZN5SDLib4File4peekEv+0x66>
    1a64:	e1 2c       	mov	r14, r1
    1a66:	f1 2c       	mov	r15, r1
    1a68:	c7 01       	movw	r24, r14
    1a6a:	0f 90       	pop	r0
    1a6c:	df 91       	pop	r29
    1a6e:	cf 91       	pop	r28
    1a70:	1f 91       	pop	r17
    1a72:	0f 91       	pop	r16
    1a74:	ff 90       	pop	r15
    1a76:	ef 90       	pop	r14
    1a78:	08 95       	ret

00001a7a <_ZN5SDLib4File5flushEv>:
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	81 8d       	ldd	r24, Z+25	; 0x19
    1a7e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	19 f0       	breq	.+6      	; 0x1a8a <_ZN5SDLib4File5flushEv+0x10>
    1a84:	61 e0       	ldi	r22, 0x01	; 1
    1a86:	0e 94 a0 18 	call	0x3140	; 0x3140 <_ZN6SdFile4syncEh>
    1a8a:	08 95       	ret

00001a8c <_ZN5SDLib4FileC1E6SdFilePKc>:
    1a8c:	ef 92       	push	r14
    1a8e:	ff 92       	push	r15
    1a90:	0f 93       	push	r16
    1a92:	1f 93       	push	r17
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
    1a98:	ec 01       	movw	r28, r24
    1a9a:	7b 01       	movw	r14, r22
    1a9c:	8a 01       	movw	r16, r20
    1a9e:	1b 82       	std	Y+3, r1	; 0x03
    1aa0:	1a 82       	std	Y+2, r1	; 0x02
    1aa2:	88 ee       	ldi	r24, 0xE8	; 232
    1aa4:	93 e0       	ldi	r25, 0x03	; 3
    1aa6:	a0 e0       	ldi	r26, 0x00	; 0
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	8c 83       	std	Y+4, r24	; 0x04
    1aac:	9d 83       	std	Y+5, r25	; 0x05
    1aae:	ae 83       	std	Y+6, r26	; 0x06
    1ab0:	bf 83       	std	Y+7, r27	; 0x07
    1ab2:	87 ea       	ldi	r24, 0xA7	; 167
    1ab4:	91 e0       	ldi	r25, 0x01	; 1
    1ab6:	99 83       	std	Y+1, r25	; 0x01
    1ab8:	88 83       	st	Y, r24
    1aba:	8d e1       	ldi	r24, 0x1D	; 29
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <malloc>
    1ac2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ac4:	89 8f       	std	Y+25, r24	; 0x19
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	79 f0       	breq	.+30     	; 0x1ae8 <_ZN5SDLib4FileC1E6SdFilePKc+0x5c>
    1aca:	2d e1       	ldi	r18, 0x1D	; 29
    1acc:	f7 01       	movw	r30, r14
    1ace:	dc 01       	movw	r26, r24
    1ad0:	01 90       	ld	r0, Z+
    1ad2:	0d 92       	st	X+, r0
    1ad4:	2a 95       	dec	r18
    1ad6:	e1 f7       	brne	.-8      	; 0x1ad0 <_ZN5SDLib4FileC1E6SdFilePKc+0x44>
    1ad8:	4c e0       	ldi	r20, 0x0C	; 12
    1ada:	50 e0       	ldi	r21, 0x00	; 0
    1adc:	b8 01       	movw	r22, r16
    1ade:	ce 01       	movw	r24, r28
    1ae0:	0c 96       	adiw	r24, 0x0c	; 12
    1ae2:	0e 94 95 30 	call	0x612a	; 0x612a <strncpy>
    1ae6:	18 8e       	std	Y+24, r1	; 0x18
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	1f 91       	pop	r17
    1aee:	0f 91       	pop	r16
    1af0:	ff 90       	pop	r15
    1af2:	ef 90       	pop	r14
    1af4:	08 95       	ret

00001af6 <_ZN5SDLib4FileC1Ev>:
    1af6:	fc 01       	movw	r30, r24
    1af8:	13 82       	std	Z+3, r1	; 0x03
    1afa:	12 82       	std	Z+2, r1	; 0x02
    1afc:	88 ee       	ldi	r24, 0xE8	; 232
    1afe:	93 e0       	ldi	r25, 0x03	; 3
    1b00:	a0 e0       	ldi	r26, 0x00	; 0
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	84 83       	std	Z+4, r24	; 0x04
    1b06:	95 83       	std	Z+5, r25	; 0x05
    1b08:	a6 83       	std	Z+6, r26	; 0x06
    1b0a:	b7 83       	std	Z+7, r27	; 0x07
    1b0c:	87 ea       	ldi	r24, 0xA7	; 167
    1b0e:	91 e0       	ldi	r25, 0x01	; 1
    1b10:	91 83       	std	Z+1, r25	; 0x01
    1b12:	80 83       	st	Z, r24
    1b14:	12 8e       	std	Z+26, r1	; 0x1a
    1b16:	11 8e       	std	Z+25, r1	; 0x19
    1b18:	14 86       	std	Z+12, r1	; 0x0c
    1b1a:	08 95       	ret

00001b1c <_ZN5SDLib4File4seekEm>:
    _file->sync();
  }
}

boolean File::seek(uint32_t pos) {
  if (! _file) {
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	81 8d       	ldd	r24, Z+25	; 0x19
    1b20:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	39 f0       	breq	.+14     	; 0x1b34 <_ZN5SDLib4File4seekEm+0x18>
    return false;
  }

  return _file->seekSet(pos);
    1b26:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <_ZN6SdFile7seekSetEm>
    1b2a:	91 e0       	ldi	r25, 0x01	; 1
    1b2c:	81 11       	cpse	r24, r1
    1b2e:	03 c0       	rjmp	.+6      	; 0x1b36 <_ZN5SDLib4File4seekEm+0x1a>
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	01 c0       	rjmp	.+2      	; 0x1b36 <_ZN5SDLib4File4seekEm+0x1a>
  }
}

boolean File::seek(uint32_t pos) {
  if (! _file) {
    return false;
    1b34:	90 e0       	ldi	r25, 0x00	; 0
  }

  return _file->seekSet(pos);
}
    1b36:	89 2f       	mov	r24, r25
    1b38:	08 95       	ret

00001b3a <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) {
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	59 96       	adiw	r26, 0x19	; 25
    1b3e:	ed 91       	ld	r30, X+
    1b40:	fc 91       	ld	r31, X
    1b42:	5a 97       	sbiw	r26, 0x1a	; 26
    1b44:	30 97       	sbiw	r30, 0x00	; 0
    1b46:	29 f0       	breq	.+10     	; 0x1b52 <_ZN5SDLib4File8positionEv+0x18>
    uint32_t curCluster(void) const {
      return curCluster_;
    }
    /** \return The current position for a file or directory. */
    uint32_t curPosition(void) const {
      return curPosition_;
    1b48:	62 85       	ldd	r22, Z+10	; 0x0a
    1b4a:	73 85       	ldd	r23, Z+11	; 0x0b
    1b4c:	84 85       	ldd	r24, Z+12	; 0x0c
    1b4e:	95 85       	ldd	r25, Z+13	; 0x0d
    return -1;
  }
  return _file->curPosition();
    1b50:	08 95       	ret
  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) {
    return -1;
    1b52:	6f ef       	ldi	r22, 0xFF	; 255
    1b54:	7f ef       	ldi	r23, 0xFF	; 255
    1b56:	cb 01       	movw	r24, r22
  }
  return _file->curPosition();
}
    1b58:	08 95       	ret

00001b5a <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) {
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	59 96       	adiw	r26, 0x19	; 25
    1b5e:	ed 91       	ld	r30, X+
    1b60:	fc 91       	ld	r31, X
    1b62:	5a 97       	sbiw	r26, 0x1a	; 26
    1b64:	30 97       	sbiw	r30, 0x00	; 0
    1b66:	29 f0       	breq	.+10     	; 0x1b72 <_ZN5SDLib4File4sizeEv+0x18>
      return dirIndex_;
    }
    static void dirName(const dir_t& dir, char* name);
    /** \return The total number of bytes in a file or directory. */
    uint32_t fileSize(void) const {
      return fileSize_;
    1b68:	63 89       	ldd	r22, Z+19	; 0x13
    1b6a:	74 89       	ldd	r23, Z+20	; 0x14
    1b6c:	85 89       	ldd	r24, Z+21	; 0x15
    1b6e:	96 89       	ldd	r25, Z+22	; 0x16
    return 0;
  }
  return _file->fileSize();
    1b70:	08 95       	ret
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) {
    return 0;
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	cb 01       	movw	r24, r22
  }
  return _file->fileSize();
}
    1b78:	08 95       	ret

00001b7a <_ZN5SDLib4File9availableEv>:
    return _file->read(buf, nbyte);
  }
  return 0;
}

int File::available() {
    1b7a:	cf 92       	push	r12
    1b7c:	df 92       	push	r13
    1b7e:	ef 92       	push	r14
    1b80:	ff 92       	push	r15
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
  if (! _file) {
    1b86:	fc 01       	movw	r30, r24
    1b88:	21 8d       	ldd	r18, Z+25	; 0x19
    1b8a:	32 8d       	ldd	r19, Z+26	; 0x1a
    1b8c:	23 2b       	or	r18, r19
    1b8e:	d9 f0       	breq	.+54     	; 0x1bc6 <_ZN5SDLib4File9availableEv+0x4c>
    1b90:	ec 01       	movw	r28, r24
    return 0;
  }

  uint32_t n = size() - position();
    1b92:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <_ZN5SDLib4File4sizeEv>
    1b96:	6b 01       	movw	r12, r22
    1b98:	7c 01       	movw	r14, r24
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <_ZN5SDLib4File8positionEv>

  return n > 0X7FFF ? 0X7FFF : n;
    1ba0:	a7 01       	movw	r20, r14
    1ba2:	96 01       	movw	r18, r12
    1ba4:	26 1b       	sub	r18, r22
    1ba6:	37 0b       	sbc	r19, r23
    1ba8:	48 0b       	sbc	r20, r24
    1baa:	59 0b       	sbc	r21, r25
    1bac:	da 01       	movw	r26, r20
    1bae:	c9 01       	movw	r24, r18
    1bb0:	81 15       	cp	r24, r1
    1bb2:	30 e8       	ldi	r19, 0x80	; 128
    1bb4:	93 07       	cpc	r25, r19
    1bb6:	a1 05       	cpc	r26, r1
    1bb8:	b1 05       	cpc	r27, r1
    1bba:	38 f0       	brcs	.+14     	; 0x1bca <_ZN5SDLib4File9availableEv+0x50>
    1bbc:	8f ef       	ldi	r24, 0xFF	; 255
    1bbe:	9f e7       	ldi	r25, 0x7F	; 127
    1bc0:	a0 e0       	ldi	r26, 0x00	; 0
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <_ZN5SDLib4File9availableEv+0x50>
  return 0;
}

int File::available() {
  if (! _file) {
    return 0;
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
  }

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
    1bca:	df 91       	pop	r29
    1bcc:	cf 91       	pop	r28
    1bce:	ff 90       	pop	r15
    1bd0:	ef 90       	pop	r14
    1bd2:	df 90       	pop	r13
    1bd4:	cf 90       	pop	r12
    1bd6:	08 95       	ret

00001bd8 <_ZN5SDLib4File5closeEv>:
    return 0;
  }
  return _file->fileSize();
}

void File::close() {
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	fc 01       	movw	r30, r24
  if (_file) {
    1bde:	81 8d       	ldd	r24, Z+25	; 0x19
    1be0:	92 8d       	ldd	r25, Z+26	; 0x1a
    1be2:	00 97       	sbiw	r24, 0x00	; 0
    1be4:	49 f0       	breq	.+18     	; 0x1bf8 <_ZN5SDLib4File5closeEv+0x20>
    1be6:	ef 01       	movw	r28, r30
    _file->close();
    1be8:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <_ZN6SdFile5closeEv>
    free(_file);
    1bec:	89 8d       	ldd	r24, Y+25	; 0x19
    1bee:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1bf0:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <free>
    _file = 0;
    1bf4:	1a 8e       	std	Y+26, r1	; 0x1a
    1bf6:	19 8e       	std	Y+25, r1	; 0x19
      nfilecount--;
      Serial.print("Deleted ");
      Serial.println(nfilecount, DEC);
    */
  }
}
    1bf8:	df 91       	pop	r29
    1bfa:	cf 91       	pop	r28
    1bfc:	08 95       	ret

00001bfe <_ZN5SDLib4FilecvbEv>:

File::operator bool() {
  if (_file) {
    1bfe:	dc 01       	movw	r26, r24
    1c00:	59 96       	adiw	r26, 0x19	; 25
    1c02:	ed 91       	ld	r30, X+
    1c04:	fc 91       	ld	r31, X
    1c06:	5a 97       	sbiw	r26, 0x1a	; 26
    1c08:	30 97       	sbiw	r30, 0x00	; 0
    1c0a:	31 f0       	breq	.+12     	; 0x1c18 <_ZN5SDLib4FilecvbEv+0x1a>
    uint8_t isFile(void) const {
      return type_ == FAT_FILE_TYPE_NORMAL;
    }
    /** \return True if this is a SdFile for an open file/directory else false. */
    uint8_t isOpen(void) const {
      return type_ != FAT_FILE_TYPE_CLOSED;
    1c0c:	95 81       	ldd	r25, Z+5	; 0x05
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	91 11       	cpse	r25, r1
    1c12:	03 c0       	rjmp	.+6      	; 0x1c1a <_ZN5SDLib4FilecvbEv+0x1c>
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    return  _file->isOpen();
    1c16:	08 95       	ret
  }
  return false;
    1c18:	80 e0       	ldi	r24, 0x00	; 0
}
    1c1a:	08 95       	ret

00001c1c <_Z41__static_initialization_and_destruction_0ii>:

  void File::rewindDirectory(void) {
    if (isDirectory()) {
      _file->rewind();
    }
  }
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	c9 f4       	brne	.+50     	; 0x1c52 <_Z41__static_initialization_and_destruction_0ii+0x36>
    1c20:	6f 3f       	cpi	r22, 0xFF	; 255
    1c22:	7f 4f       	sbci	r23, 0xFF	; 255
    1c24:	b1 f4       	brne	.+44     	; 0x1c52 <_Z41__static_initialization_and_destruction_0ii+0x36>
    1c26:	ec ef       	ldi	r30, 0xFC	; 252
    1c28:	f3 e0       	ldi	r31, 0x03	; 3
    1c2a:	15 82       	std	Z+5, r1	; 0x05
    1c2c:	16 82       	std	Z+6, r1	; 0x06
    1c2e:	11 86       	std	Z+9, r1	; 0x09
    1c30:	13 86       	std	Z+11, r1	; 0x0b
    1c32:	82 e0       	ldi	r24, 0x02	; 2
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	a0 e0       	ldi	r26, 0x00	; 0
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	84 87       	std	Z+12, r24	; 0x0c
    1c3c:	95 87       	std	Z+13, r25	; 0x0d
    1c3e:	a6 87       	std	Z+14, r26	; 0x0e
    1c40:	b7 87       	std	Z+15, r27	; 0x0f
    1c42:	13 a2       	std	Z+35, r1	; 0x23
    1c44:	15 a6       	std	Z+45, r1	; 0x2d
    1c46:	14 a6       	std	Z+44, r1	; 0x2c
    1c48:	8b eb       	ldi	r24, 0xBB	; 187
    1c4a:	91 e0       	ldi	r25, 0x01	; 1
    1c4c:	93 a7       	std	Z+43, r25	; 0x2b
    1c4e:	82 a7       	std	Z+42, r24	; 0x2a
    1c50:	17 a6       	std	Z+47, r1	; 0x2f
    1c52:	08 95       	ret

00001c54 <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv>:
    1c54:	1f 93       	push	r17
    1c56:	cf 93       	push	r28
    1c58:	df 93       	push	r29
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	6d 97       	sbiw	r28, 0x1d	; 29
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	f8 94       	cli
    1c64:	de bf       	out	0x3e, r29	; 62
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	cd bf       	out	0x3d, r28	; 61
    1c6a:	ab 01       	movw	r20, r22
    1c6c:	1c 82       	std	Y+4, r1	; 0x04
    1c6e:	1b 82       	std	Y+3, r1	; 0x03
    1c70:	2b eb       	ldi	r18, 0xBB	; 187
    1c72:	31 e0       	ldi	r19, 0x01	; 1
    1c74:	3a 83       	std	Y+2, r19	; 0x02
    1c76:	29 83       	std	Y+1, r18	; 0x01
    1c78:	1e 82       	std	Y+6, r1	; 0x06
    1c7a:	21 e0       	ldi	r18, 0x01	; 1
    1c7c:	bc 01       	movw	r22, r24
    1c7e:	ce 01       	movw	r24, r28
    1c80:	01 96       	adiw	r24, 0x01	; 1
    1c82:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN6SdFile4openEPS_PKch>
    1c86:	11 e0       	ldi	r17, 0x01	; 1
    1c88:	81 11       	cpse	r24, r1
    1c8a:	01 c0       	rjmp	.+2      	; 0x1c8e <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv+0x3a>
    1c8c:	10 e0       	ldi	r17, 0x00	; 0
    1c8e:	88 23       	and	r24, r24
    1c90:	21 f0       	breq	.+8      	; 0x1c9a <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv+0x46>
    1c92:	ce 01       	movw	r24, r28
    1c94:	01 96       	adiw	r24, 0x01	; 1
    1c96:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <_ZN6SdFile5closeEv>
    1c9a:	81 2f       	mov	r24, r17
    1c9c:	6d 96       	adiw	r28, 0x1d	; 29
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
    1ca8:	df 91       	pop	r29
    1caa:	cf 91       	pop	r28
    1cac:	1f 91       	pop	r17
    1cae:	08 95       	ret

00001cb0 <_ZN5SDLib15callback_removeER6SdFilePKcbPv>:
    1cb0:	44 23       	and	r20, r20
    1cb2:	39 f0       	breq	.+14     	; 0x1cc2 <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x12>
    1cb4:	0e 94 b5 1b 	call	0x376a	; 0x376a <_ZN6SdFile6removeEPS_PKc>
    1cb8:	91 e0       	ldi	r25, 0x01	; 1
    1cba:	81 11       	cpse	r24, r1
    1cbc:	03 c0       	rjmp	.+6      	; 0x1cc4 <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x14>
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	01 c0       	rjmp	.+2      	; 0x1cc4 <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x14>
    1cc2:	91 e0       	ldi	r25, 0x01	; 1
    1cc4:	89 2f       	mov	r24, r25
    1cc6:	08 95       	ret

00001cc8 <_ZN5SDLib20getNextPathComponentEPKcPjPc>:
    1cc8:	cf 93       	push	r28
    1cca:	df 93       	push	r29
    1ccc:	ec 01       	movw	r28, r24
    1cce:	db 01       	movw	r26, r22
    1cd0:	ed 91       	ld	r30, X+
    1cd2:	fc 91       	ld	r31, X
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	ae 0f       	add	r26, r30
    1cd8:	bf 1f       	adc	r27, r31
    1cda:	8c 91       	ld	r24, X
    1cdc:	8f 32       	cpi	r24, 0x2F	; 47
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x1a>
    1ce0:	31 96       	adiw	r30, 0x01	; 1
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	2c 30       	cpi	r18, 0x0C	; 12
    1ce8:	31 05       	cpc	r19, r1
    1cea:	84 f4       	brge	.+32     	; 0x1d0c <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x44>
    1cec:	de 01       	movw	r26, r28
    1cee:	ae 0f       	add	r26, r30
    1cf0:	bf 1f       	adc	r27, r31
    1cf2:	9c 91       	ld	r25, X
    1cf4:	9f 32       	cpi	r25, 0x2F	; 47
    1cf6:	51 f0       	breq	.+20     	; 0x1d0c <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x44>
    1cf8:	99 23       	and	r25, r25
    1cfa:	41 f0       	breq	.+16     	; 0x1d0c <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x44>
    1cfc:	da 01       	movw	r26, r20
    1cfe:	a2 0f       	add	r26, r18
    1d00:	b3 1f       	adc	r27, r19
    1d02:	31 96       	adiw	r30, 0x01	; 1
    1d04:	9c 93       	st	X, r25
    1d06:	2f 5f       	subi	r18, 0xFF	; 255
    1d08:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0a:	ed cf       	rjmp	.-38     	; 0x1ce6 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x1e>
    1d0c:	da 01       	movw	r26, r20
    1d0e:	a2 0f       	add	r26, r18
    1d10:	b3 1f       	adc	r27, r19
    1d12:	1c 92       	st	X, r1
    1d14:	de 01       	movw	r26, r28
    1d16:	ae 0f       	add	r26, r30
    1d18:	bf 1f       	adc	r27, r31
    1d1a:	8c 91       	ld	r24, X
    1d1c:	8f 32       	cpi	r24, 0x2F	; 47
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x5a>
    1d20:	31 96       	adiw	r30, 0x01	; 1
    1d22:	db 01       	movw	r26, r22
    1d24:	ed 93       	st	X+, r30
    1d26:	fc 93       	st	X, r31
    1d28:	ec 0f       	add	r30, r28
    1d2a:	fd 1f       	adc	r31, r29
    1d2c:	90 81       	ld	r25, Z
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	91 11       	cpse	r25, r1
    1d32:	01 c0       	rjmp	.+2      	; 0x1d36 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x6e>
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	08 95       	ret

00001d3c <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>:
    1d3c:	5f 92       	push	r5
    1d3e:	6f 92       	push	r6
    1d40:	7f 92       	push	r7
    1d42:	8f 92       	push	r8
    1d44:	9f 92       	push	r9
    1d46:	af 92       	push	r10
    1d48:	bf 92       	push	r11
    1d4a:	cf 92       	push	r12
    1d4c:	df 92       	push	r13
    1d4e:	ef 92       	push	r14
    1d50:	ff 92       	push	r15
    1d52:	0f 93       	push	r16
    1d54:	1f 93       	push	r17
    1d56:	cf 93       	push	r28
    1d58:	df 93       	push	r29
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	c9 54       	subi	r28, 0x49	; 73
    1d60:	d1 09       	sbc	r29, r1
    1d62:	0f b6       	in	r0, 0x3f	; 63
    1d64:	f8 94       	cli
    1d66:	de bf       	out	0x3e, r29	; 62
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	cd bf       	out	0x3d, r28	; 61
    1d6c:	4c 01       	movw	r8, r24
    1d6e:	6b 01       	movw	r12, r22
    1d70:	3a 01       	movw	r6, r20
    1d72:	59 01       	movw	r10, r18
    1d74:	1c 82       	std	Y+4, r1	; 0x04
    1d76:	1b 82       	std	Y+3, r1	; 0x03
    1d78:	8b eb       	ldi	r24, 0xBB	; 187
    1d7a:	91 e0       	ldi	r25, 0x01	; 1
    1d7c:	9a 83       	std	Y+2, r25	; 0x02
    1d7e:	89 83       	std	Y+1, r24	; 0x01
    1d80:	1e 82       	std	Y+6, r1	; 0x06
    1d82:	19 a2       	std	Y+33, r1	; 0x21
    1d84:	18 a2       	std	Y+32, r1	; 0x20
    1d86:	9f 8f       	std	Y+31, r25	; 0x1f
    1d88:	8e 8f       	std	Y+30, r24	; 0x1e
    1d8a:	1b a2       	std	Y+35, r1	; 0x23
    1d8c:	2a 96       	adiw	r28, 0x0a	; 10
    1d8e:	1f ae       	std	Y+63, r1	; 0x3f
    1d90:	1e ae       	std	Y+62, r1	; 0x3e
    1d92:	2a 97       	sbiw	r28, 0x0a	; 10
    1d94:	8b 01       	movw	r16, r22
    1d96:	ce 01       	movw	r24, r28
    1d98:	01 96       	adiw	r24, 0x01	; 1
    1d9a:	7c 01       	movw	r14, r24
    1d9c:	ae 01       	movw	r20, r28
    1d9e:	45 5c       	subi	r20, 0xC5	; 197
    1da0:	5f 4f       	sbci	r21, 0xFF	; 255
    1da2:	be 01       	movw	r22, r28
    1da4:	68 5b       	subi	r22, 0xB8	; 184
    1da6:	7f 4f       	sbci	r23, 0xFF	; 255
    1da8:	c4 01       	movw	r24, r8
    1daa:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <_ZN5SDLib20getNextPathComponentEPKcPjPc>
    1dae:	58 2e       	mov	r5, r24
    1db0:	41 e0       	ldi	r20, 0x01	; 1
    1db2:	48 27       	eor	r20, r24
    1db4:	95 01       	movw	r18, r10
    1db6:	be 01       	movw	r22, r28
    1db8:	65 5c       	subi	r22, 0xC5	; 197
    1dba:	7f 4f       	sbci	r23, 0xFF	; 255
    1dbc:	c8 01       	movw	r24, r16
    1dbe:	f3 01       	movw	r30, r6
    1dc0:	09 95       	icall
    1dc2:	81 11       	cpse	r24, r1
    1dc4:	08 c0       	rjmp	.+16     	; 0x1dd6 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x9a>
    1dc6:	0c 15       	cp	r16, r12
    1dc8:	1d 05       	cpc	r17, r13
    1dca:	51 f1       	breq	.+84     	; 0x1e20 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xe4>
    1dcc:	c8 01       	movw	r24, r16
    1dce:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <_ZN6SdFile5closeEv>
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	2a c0       	rjmp	.+84     	; 0x1e2a <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    1dd6:	55 20       	and	r5, r5
    1dd8:	d9 f0       	breq	.+54     	; 0x1e10 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xd4>
    1dda:	21 e0       	ldi	r18, 0x01	; 1
    1ddc:	ae 01       	movw	r20, r28
    1dde:	45 5c       	subi	r20, 0xC5	; 197
    1de0:	5f 4f       	sbci	r21, 0xFF	; 255
    1de2:	b8 01       	movw	r22, r16
    1de4:	c7 01       	movw	r24, r14
    1de6:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN6SdFile4openEPS_PKch>
    1dea:	58 2e       	mov	r5, r24
    1dec:	0c 15       	cp	r16, r12
    1dee:	1d 05       	cpc	r17, r13
    1df0:	19 f0       	breq	.+6      	; 0x1df8 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xbc>
    1df2:	c8 01       	movw	r24, r16
    1df4:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <_ZN6SdFile5closeEv>
    1df8:	55 20       	and	r5, r5
    1dfa:	a1 f0       	breq	.+40     	; 0x1e24 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xe8>
    1dfc:	0c 15       	cp	r16, r12
    1dfe:	1d 05       	cpc	r17, r13
    1e00:	11 f0       	breq	.+4      	; 0x1e06 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xca>
    1e02:	c8 01       	movw	r24, r16
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xce>
    1e06:	ce 01       	movw	r24, r28
    1e08:	4e 96       	adiw	r24, 0x1e	; 30
    1e0a:	87 01       	movw	r16, r14
    1e0c:	7c 01       	movw	r14, r24
    1e0e:	c6 cf       	rjmp	.-116    	; 0x1d9c <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x60>
    1e10:	0c 15       	cp	r16, r12
    1e12:	1d 05       	cpc	r17, r13
    1e14:	49 f0       	breq	.+18     	; 0x1e28 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xec>
    1e16:	c8 01       	movw	r24, r16
    1e18:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <_ZN6SdFile5closeEv>
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	05 c0       	rjmp	.+10     	; 0x1e2a <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	03 c0       	rjmp	.+6      	; 0x1e2a <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	01 c0       	rjmp	.+2      	; 0x1e2a <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	c7 5b       	subi	r28, 0xB7	; 183
    1e2c:	df 4f       	sbci	r29, 0xFF	; 255
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	f8 94       	cli
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	cd bf       	out	0x3d, r28	; 61
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	1f 91       	pop	r17
    1e3e:	0f 91       	pop	r16
    1e40:	ff 90       	pop	r15
    1e42:	ef 90       	pop	r14
    1e44:	df 90       	pop	r13
    1e46:	cf 90       	pop	r12
    1e48:	bf 90       	pop	r11
    1e4a:	af 90       	pop	r10
    1e4c:	9f 90       	pop	r9
    1e4e:	8f 90       	pop	r8
    1e50:	7f 90       	pop	r7
    1e52:	6f 90       	pop	r6
    1e54:	5f 90       	pop	r5
    1e56:	08 95       	ret

00001e58 <_ZN5SDLib7SDClass5beginEh>:
    1e58:	0f 93       	push	r16
    1e5a:	1f 93       	push	r17
    1e5c:	cf 93       	push	r28
    1e5e:	df 93       	push	r29
    1e60:	ec 01       	movw	r28, r24
    1e62:	16 2f       	mov	r17, r22
    1e64:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e66:	88 23       	and	r24, r24
    1e68:	21 f0       	breq	.+8      	; 0x1e72 <_ZN5SDLib7SDClass5beginEh+0x1a>
    1e6a:	ce 01       	movw	r24, r28
    1e6c:	8a 96       	adiw	r24, 0x2a	; 42
    1e6e:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <_ZN6SdFile5closeEv>
    1e72:	41 2f       	mov	r20, r17
    1e74:	61 e0       	ldi	r22, 0x01	; 1
    1e76:	ce 01       	movw	r24, r28
    1e78:	0e 94 b5 12 	call	0x256a	; 0x256a <_ZN7Sd2Card4initEhh>
    1e7c:	88 23       	and	r24, r24
    1e7e:	e1 f0       	breq	.+56     	; 0x1eb8 <_ZN5SDLib7SDClass5beginEh+0x60>
    1e80:	8e 01       	movw	r16, r28
    1e82:	04 5f       	subi	r16, 0xF4	; 244
    1e84:	1f 4f       	sbci	r17, 0xFF	; 255
    1e86:	41 e0       	ldi	r20, 0x01	; 1
    1e88:	be 01       	movw	r22, r28
    1e8a:	c8 01       	movw	r24, r16
    1e8c:	0e 94 7e 21 	call	0x42fc	; 0x42fc <_ZN8SdVolume4initEP7Sd2Cardh>
    1e90:	81 11       	cpse	r24, r1
    1e92:	06 c0       	rjmp	.+12     	; 0x1ea0 <_ZN5SDLib7SDClass5beginEh+0x48>
    1e94:	40 e0       	ldi	r20, 0x00	; 0
    1e96:	be 01       	movw	r22, r28
    1e98:	c8 01       	movw	r24, r16
    1e9a:	0e 94 7e 21 	call	0x42fc	; 0x42fc <_ZN8SdVolume4initEP7Sd2Cardh>
    1e9e:	01 c0       	rjmp	.+2      	; 0x1ea2 <_ZN5SDLib7SDClass5beginEh+0x4a>
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	88 23       	and	r24, r24
    1ea4:	59 f0       	breq	.+22     	; 0x1ebc <_ZN5SDLib7SDClass5beginEh+0x64>
    1ea6:	b8 01       	movw	r22, r16
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	8a 96       	adiw	r24, 0x2a	; 42
    1eac:	0e 94 08 16 	call	0x2c10	; 0x2c10 <_ZN6SdFile8openRootEP8SdVolume>
    1eb0:	88 23       	and	r24, r24
    1eb2:	31 f0       	breq	.+12     	; 0x1ec0 <_ZN5SDLib7SDClass5beginEh+0x68>
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	05 c0       	rjmp	.+10     	; 0x1ec2 <_ZN5SDLib7SDClass5beginEh+0x6a>
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	03 c0       	rjmp	.+6      	; 0x1ec2 <_ZN5SDLib7SDClass5beginEh+0x6a>
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	01 c0       	rjmp	.+2      	; 0x1ec2 <_ZN5SDLib7SDClass5beginEh+0x6a>
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
    1ec6:	1f 91       	pop	r17
    1ec8:	0f 91       	pop	r16
    1eca:	08 95       	ret

00001ecc <_ZN5SDLib7SDClass12getParentDirEPKcPi>:
    1ecc:	4f 92       	push	r4
    1ece:	5f 92       	push	r5
    1ed0:	6f 92       	push	r6
    1ed2:	7f 92       	push	r7
    1ed4:	8f 92       	push	r8
    1ed6:	9f 92       	push	r9
    1ed8:	af 92       	push	r10
    1eda:	bf 92       	push	r11
    1edc:	cf 92       	push	r12
    1ede:	df 92       	push	r13
    1ee0:	ef 92       	push	r14
    1ee2:	ff 92       	push	r15
    1ee4:	0f 93       	push	r16
    1ee6:	1f 93       	push	r17
    1ee8:	cf 93       	push	r28
    1eea:	df 93       	push	r29
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	c7 54       	subi	r28, 0x47	; 71
    1ef2:	d1 09       	sbc	r29, r1
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	cd bf       	out	0x3d, r28	; 61
    1efe:	4c 01       	movw	r8, r24
    1f00:	3a 01       	movw	r6, r20
    1f02:	29 01       	movw	r4, r18
    1f04:	1c 82       	std	Y+4, r1	; 0x04
    1f06:	1b 82       	std	Y+3, r1	; 0x03
    1f08:	8b eb       	ldi	r24, 0xBB	; 187
    1f0a:	91 e0       	ldi	r25, 0x01	; 1
    1f0c:	9a 83       	std	Y+2, r25	; 0x02
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    1f10:	1e 82       	std	Y+6, r1	; 0x06
    1f12:	19 a2       	std	Y+33, r1	; 0x21
    1f14:	18 a2       	std	Y+32, r1	; 0x20
    1f16:	9f 8f       	std	Y+31, r25	; 0x1f
    1f18:	8e 8f       	std	Y+30, r24	; 0x1e
    1f1a:	1b a2       	std	Y+35, r1	; 0x23
    1f1c:	64 5f       	subi	r22, 0xF4	; 244
    1f1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f20:	ce 01       	movw	r24, r28
    1f22:	01 96       	adiw	r24, 0x01	; 1
    1f24:	0e 94 08 16 	call	0x2c10	; 0x2c10 <_ZN6SdFile8openRootEP8SdVolume>
    1f28:	73 01       	movw	r14, r6
    1f2a:	6e 01       	movw	r12, r28
    1f2c:	8e e1       	ldi	r24, 0x1E	; 30
    1f2e:	c8 0e       	add	r12, r24
    1f30:	d1 1c       	adc	r13, r1
    1f32:	fe 01       	movw	r30, r28
    1f34:	31 96       	adiw	r30, 0x01	; 1
    1f36:	5f 01       	movw	r10, r30
    1f38:	6f e2       	ldi	r22, 0x2F	; 47
    1f3a:	70 e0       	ldi	r23, 0x00	; 0
    1f3c:	c7 01       	movw	r24, r14
    1f3e:	0e 94 83 30 	call	0x6106	; 0x6106 <strchr>
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	f1 f1       	breq	.+124    	; 0x1fc2 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xf6>
    1f46:	f7 01       	movw	r30, r14
    1f48:	20 81       	ld	r18, Z
    1f4a:	2f 32       	cpi	r18, 0x2F	; 47
    1f4c:	21 f4       	brne	.+8      	; 0x1f56 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x8a>
    1f4e:	ff ef       	ldi	r31, 0xFF	; 255
    1f50:	ef 1a       	sub	r14, r31
    1f52:	ff 0a       	sbc	r15, r31
    1f54:	f1 cf       	rjmp	.-30     	; 0x1f38 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x6c>
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	a1 f1       	breq	.+104    	; 0x1fc2 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xf6>
    1f5a:	8e 19       	sub	r24, r14
    1f5c:	8d 30       	cpi	r24, 0x0D	; 13
    1f5e:	08 f0       	brcs	.+2      	; 0x1f62 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x96>
    1f60:	8c e0       	ldi	r24, 0x0C	; 12
    1f62:	08 2f       	mov	r16, r24
    1f64:	10 e0       	ldi	r17, 0x00	; 0
    1f66:	a8 01       	movw	r20, r16
    1f68:	b7 01       	movw	r22, r14
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	cb 96       	adiw	r24, 0x3b	; 59
    1f6e:	0e 94 95 30 	call	0x612a	; 0x612a <strncpy>
    1f72:	eb e3       	ldi	r30, 0x3B	; 59
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	ec 0f       	add	r30, r28
    1f78:	fd 1f       	adc	r31, r29
    1f7a:	e0 0f       	add	r30, r16
    1f7c:	f1 1f       	adc	r31, r17
    1f7e:	10 82       	st	Z, r1
    1f80:	c6 01       	movw	r24, r12
    1f82:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <_ZN6SdFile5closeEv>
    1f86:	21 e0       	ldi	r18, 0x01	; 1
    1f88:	ae 01       	movw	r20, r28
    1f8a:	45 5c       	subi	r20, 0xC5	; 197
    1f8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f8e:	b5 01       	movw	r22, r10
    1f90:	c6 01       	movw	r24, r12
    1f92:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN6SdFile4openEPS_PKch>
    1f96:	81 11       	cpse	r24, r1
    1f98:	09 c0       	rjmp	.+18     	; 0x1fac <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xe0>
    1f9a:	f4 01       	movw	r30, r8
    1f9c:	13 82       	std	Z+3, r1	; 0x03
    1f9e:	12 82       	std	Z+2, r1	; 0x02
    1fa0:	8b eb       	ldi	r24, 0xBB	; 187
    1fa2:	91 e0       	ldi	r25, 0x01	; 1
    1fa4:	91 83       	std	Z+1, r25	; 0x01
    1fa6:	80 83       	st	Z, r24
    1fa8:	15 82       	std	Z+5, r1	; 0x05
    1faa:	63 c0       	rjmp	.+198    	; 0x2072 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x1a6>
    1fac:	e0 0e       	add	r14, r16
    1fae:	f1 1e       	adc	r15, r17
    1fb0:	c5 01       	movw	r24, r10
    1fb2:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <_ZN6SdFile5closeEv>
    1fb6:	9a 2d       	mov	r25, r10
    1fb8:	8b 2d       	mov	r24, r11
    1fba:	56 01       	movw	r10, r12
    1fbc:	c9 2e       	mov	r12, r25
    1fbe:	d8 2e       	mov	r13, r24
    1fc0:	bb cf       	rjmp	.-138    	; 0x1f38 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x6c>
    1fc2:	e6 18       	sub	r14, r6
    1fc4:	f7 08       	sbc	r15, r7
    1fc6:	f2 01       	movw	r30, r4
    1fc8:	f1 82       	std	Z+1, r15	; 0x01
    1fca:	e0 82       	st	Z, r14
    1fcc:	89 e8       	ldi	r24, 0x89	; 137
    1fce:	91 e0       	ldi	r25, 0x01	; 1
    1fd0:	f4 01       	movw	r30, r8
    1fd2:	91 83       	std	Z+1, r25	; 0x01
    1fd4:	80 83       	st	Z, r24
    1fd6:	f5 01       	movw	r30, r10
    1fd8:	82 81       	ldd	r24, Z+2	; 0x02
    1fda:	93 81       	ldd	r25, Z+3	; 0x03
    1fdc:	f4 01       	movw	r30, r8
    1fde:	93 83       	std	Z+3, r25	; 0x03
    1fe0:	82 83       	std	Z+2, r24	; 0x02
    1fe2:	8b eb       	ldi	r24, 0xBB	; 187
    1fe4:	91 e0       	ldi	r25, 0x01	; 1
    1fe6:	91 83       	std	Z+1, r25	; 0x01
    1fe8:	80 83       	st	Z, r24
    1fea:	f5 01       	movw	r30, r10
    1fec:	84 81       	ldd	r24, Z+4	; 0x04
    1fee:	f4 01       	movw	r30, r8
    1ff0:	84 83       	std	Z+4, r24	; 0x04
    1ff2:	f5 01       	movw	r30, r10
    1ff4:	85 81       	ldd	r24, Z+5	; 0x05
    1ff6:	f4 01       	movw	r30, r8
    1ff8:	85 83       	std	Z+5, r24	; 0x05
    1ffa:	f5 01       	movw	r30, r10
    1ffc:	86 81       	ldd	r24, Z+6	; 0x06
    1ffe:	97 81       	ldd	r25, Z+7	; 0x07
    2000:	a0 85       	ldd	r26, Z+8	; 0x08
    2002:	b1 85       	ldd	r27, Z+9	; 0x09
    2004:	f4 01       	movw	r30, r8
    2006:	86 83       	std	Z+6, r24	; 0x06
    2008:	97 83       	std	Z+7, r25	; 0x07
    200a:	a0 87       	std	Z+8, r26	; 0x08
    200c:	b1 87       	std	Z+9, r27	; 0x09
    200e:	f5 01       	movw	r30, r10
    2010:	82 85       	ldd	r24, Z+10	; 0x0a
    2012:	93 85       	ldd	r25, Z+11	; 0x0b
    2014:	a4 85       	ldd	r26, Z+12	; 0x0c
    2016:	b5 85       	ldd	r27, Z+13	; 0x0d
    2018:	f4 01       	movw	r30, r8
    201a:	82 87       	std	Z+10, r24	; 0x0a
    201c:	93 87       	std	Z+11, r25	; 0x0b
    201e:	a4 87       	std	Z+12, r26	; 0x0c
    2020:	b5 87       	std	Z+13, r27	; 0x0d
    2022:	f5 01       	movw	r30, r10
    2024:	86 85       	ldd	r24, Z+14	; 0x0e
    2026:	97 85       	ldd	r25, Z+15	; 0x0f
    2028:	a0 89       	ldd	r26, Z+16	; 0x10
    202a:	b1 89       	ldd	r27, Z+17	; 0x11
    202c:	f4 01       	movw	r30, r8
    202e:	86 87       	std	Z+14, r24	; 0x0e
    2030:	97 87       	std	Z+15, r25	; 0x0f
    2032:	a0 8b       	std	Z+16, r26	; 0x10
    2034:	b1 8b       	std	Z+17, r27	; 0x11
    2036:	f5 01       	movw	r30, r10
    2038:	82 89       	ldd	r24, Z+18	; 0x12
    203a:	f4 01       	movw	r30, r8
    203c:	82 8b       	std	Z+18, r24	; 0x12
    203e:	f5 01       	movw	r30, r10
    2040:	83 89       	ldd	r24, Z+19	; 0x13
    2042:	94 89       	ldd	r25, Z+20	; 0x14
    2044:	a5 89       	ldd	r26, Z+21	; 0x15
    2046:	b6 89       	ldd	r27, Z+22	; 0x16
    2048:	f4 01       	movw	r30, r8
    204a:	83 8b       	std	Z+19, r24	; 0x13
    204c:	94 8b       	std	Z+20, r25	; 0x14
    204e:	a5 8b       	std	Z+21, r26	; 0x15
    2050:	b6 8b       	std	Z+22, r27	; 0x16
    2052:	f5 01       	movw	r30, r10
    2054:	87 89       	ldd	r24, Z+23	; 0x17
    2056:	90 8d       	ldd	r25, Z+24	; 0x18
    2058:	a1 8d       	ldd	r26, Z+25	; 0x19
    205a:	b2 8d       	ldd	r27, Z+26	; 0x1a
    205c:	f4 01       	movw	r30, r8
    205e:	87 8b       	std	Z+23, r24	; 0x17
    2060:	90 8f       	std	Z+24, r25	; 0x18
    2062:	a1 8f       	std	Z+25, r26	; 0x19
    2064:	b2 8f       	std	Z+26, r27	; 0x1a
    2066:	f5 01       	movw	r30, r10
    2068:	83 8d       	ldd	r24, Z+27	; 0x1b
    206a:	94 8d       	ldd	r25, Z+28	; 0x1c
    206c:	f4 01       	movw	r30, r8
    206e:	94 8f       	std	Z+28, r25	; 0x1c
    2070:	83 8f       	std	Z+27, r24	; 0x1b
    2072:	c4 01       	movw	r24, r8
    2074:	c9 5b       	subi	r28, 0xB9	; 185
    2076:	df 4f       	sbci	r29, 0xFF	; 255
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	f8 94       	cli
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	0f be       	out	0x3f, r0	; 63
    2080:	cd bf       	out	0x3d, r28	; 61
    2082:	df 91       	pop	r29
    2084:	cf 91       	pop	r28
    2086:	1f 91       	pop	r17
    2088:	0f 91       	pop	r16
    208a:	ff 90       	pop	r15
    208c:	ef 90       	pop	r14
    208e:	df 90       	pop	r13
    2090:	cf 90       	pop	r12
    2092:	bf 90       	pop	r11
    2094:	af 90       	pop	r10
    2096:	9f 90       	pop	r9
    2098:	8f 90       	pop	r8
    209a:	7f 90       	pop	r7
    209c:	6f 90       	pop	r6
    209e:	5f 90       	pop	r5
    20a0:	4f 90       	pop	r4
    20a2:	08 95       	ret

000020a4 <_ZN5SDLib7SDClass4openEPKch>:
    20a4:	df 92       	push	r13
    20a6:	ef 92       	push	r14
    20a8:	ff 92       	push	r15
    20aa:	0f 93       	push	r16
    20ac:	1f 93       	push	r17
    20ae:	cf 93       	push	r28
    20b0:	df 93       	push	r29
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	c6 57       	subi	r28, 0x76	; 118
    20b8:	d1 09       	sbc	r29, r1
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	f8 94       	cli
    20be:	de bf       	out	0x3e, r29	; 62
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	cd bf       	out	0x3d, r28	; 61
    20c4:	7c 01       	movw	r14, r24
    20c6:	8a 01       	movw	r16, r20
    20c8:	d2 2e       	mov	r13, r18
    20ca:	9e 01       	movw	r18, r28
    20cc:	25 5c       	subi	r18, 0xC5	; 197
    20ce:	3f 4f       	sbci	r19, 0xFF	; 255
    20d0:	ce 01       	movw	r24, r28
    20d2:	cd 96       	adiw	r24, 0x3d	; 61
    20d4:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <_ZN5SDLib7SDClass12getParentDirEPKcPi>
    20d8:	8b ad       	ldd	r24, Y+59	; 0x3b
    20da:	9c ad       	ldd	r25, Y+60	; 0x3c
    20dc:	08 0f       	add	r16, r24
    20de:	19 1f       	adc	r17, r25
    20e0:	f8 01       	movw	r30, r16
    20e2:	80 81       	ld	r24, Z
    20e4:	81 11       	cpse	r24, r1
    20e6:	57 c0       	rjmp	.+174    	; 0x2196 <_ZN5SDLib7SDClass4openEPKch+0xf2>
    20e8:	21 96       	adiw	r28, 0x01	; 1
    20ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    20ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    20ee:	21 97       	sbiw	r28, 0x01	; 1
    20f0:	99 a3       	std	Y+33, r25	; 0x21
    20f2:	88 a3       	std	Y+32, r24	; 0x20
    20f4:	8b eb       	ldi	r24, 0xBB	; 187
    20f6:	91 e0       	ldi	r25, 0x01	; 1
    20f8:	9f 8f       	std	Y+31, r25	; 0x1f
    20fa:	8e 8f       	std	Y+30, r24	; 0x1e
    20fc:	22 96       	adiw	r28, 0x02	; 2
    20fe:	8f ad       	ldd	r24, Y+63	; 0x3f
    2100:	22 97       	sbiw	r28, 0x02	; 2
    2102:	8a a3       	std	Y+34, r24	; 0x22
    2104:	23 96       	adiw	r28, 0x03	; 3
    2106:	8f ad       	ldd	r24, Y+63	; 0x3f
    2108:	23 97       	sbiw	r28, 0x03	; 3
    210a:	8b a3       	std	Y+35, r24	; 0x23
    210c:	27 96       	adiw	r28, 0x07	; 7
    210e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2110:	9d ad       	ldd	r25, Y+61	; 0x3d
    2112:	ae ad       	ldd	r26, Y+62	; 0x3e
    2114:	bf ad       	ldd	r27, Y+63	; 0x3f
    2116:	27 97       	sbiw	r28, 0x07	; 7
    2118:	8c a3       	std	Y+36, r24	; 0x24
    211a:	9d a3       	std	Y+37, r25	; 0x25
    211c:	ae a3       	std	Y+38, r26	; 0x26
    211e:	bf a3       	std	Y+39, r27	; 0x27
    2120:	2b 96       	adiw	r28, 0x0b	; 11
    2122:	8c ad       	ldd	r24, Y+60	; 0x3c
    2124:	9d ad       	ldd	r25, Y+61	; 0x3d
    2126:	ae ad       	ldd	r26, Y+62	; 0x3e
    2128:	bf ad       	ldd	r27, Y+63	; 0x3f
    212a:	2b 97       	sbiw	r28, 0x0b	; 11
    212c:	88 a7       	std	Y+40, r24	; 0x28
    212e:	99 a7       	std	Y+41, r25	; 0x29
    2130:	aa a7       	std	Y+42, r26	; 0x2a
    2132:	bb a7       	std	Y+43, r27	; 0x2b
    2134:	2f 96       	adiw	r28, 0x0f	; 15
    2136:	8c ad       	ldd	r24, Y+60	; 0x3c
    2138:	9d ad       	ldd	r25, Y+61	; 0x3d
    213a:	ae ad       	ldd	r26, Y+62	; 0x3e
    213c:	bf ad       	ldd	r27, Y+63	; 0x3f
    213e:	2f 97       	sbiw	r28, 0x0f	; 15
    2140:	8c a7       	std	Y+44, r24	; 0x2c
    2142:	9d a7       	std	Y+45, r25	; 0x2d
    2144:	ae a7       	std	Y+46, r26	; 0x2e
    2146:	bf a7       	std	Y+47, r27	; 0x2f
    2148:	60 96       	adiw	r28, 0x10	; 16
    214a:	8f ad       	ldd	r24, Y+63	; 0x3f
    214c:	60 97       	sbiw	r28, 0x10	; 16
    214e:	88 ab       	std	Y+48, r24	; 0x30
    2150:	64 96       	adiw	r28, 0x14	; 20
    2152:	8c ad       	ldd	r24, Y+60	; 0x3c
    2154:	9d ad       	ldd	r25, Y+61	; 0x3d
    2156:	ae ad       	ldd	r26, Y+62	; 0x3e
    2158:	bf ad       	ldd	r27, Y+63	; 0x3f
    215a:	64 97       	sbiw	r28, 0x14	; 20
    215c:	89 ab       	std	Y+49, r24	; 0x31
    215e:	9a ab       	std	Y+50, r25	; 0x32
    2160:	ab ab       	std	Y+51, r26	; 0x33
    2162:	bc ab       	std	Y+52, r27	; 0x34
    2164:	68 96       	adiw	r28, 0x18	; 24
    2166:	8c ad       	ldd	r24, Y+60	; 0x3c
    2168:	9d ad       	ldd	r25, Y+61	; 0x3d
    216a:	ae ad       	ldd	r26, Y+62	; 0x3e
    216c:	bf ad       	ldd	r27, Y+63	; 0x3f
    216e:	68 97       	sbiw	r28, 0x18	; 24
    2170:	8d ab       	std	Y+53, r24	; 0x35
    2172:	9e ab       	std	Y+54, r25	; 0x36
    2174:	af ab       	std	Y+55, r26	; 0x37
    2176:	b8 af       	std	Y+56, r27	; 0x38
    2178:	6a 96       	adiw	r28, 0x1a	; 26
    217a:	8e ad       	ldd	r24, Y+62	; 0x3e
    217c:	9f ad       	ldd	r25, Y+63	; 0x3f
    217e:	6a 97       	sbiw	r28, 0x1a	; 26
    2180:	9a af       	std	Y+58, r25	; 0x3a
    2182:	89 af       	std	Y+57, r24	; 0x39
    2184:	45 eb       	ldi	r20, 0xB5	; 181
    2186:	51 e0       	ldi	r21, 0x01	; 1
    2188:	be 01       	movw	r22, r28
    218a:	62 5e       	subi	r22, 0xE2	; 226
    218c:	7f 4f       	sbci	r23, 0xFF	; 255
    218e:	c7 01       	movw	r24, r14
    2190:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <_ZN5SDLib4FileC1E6SdFilePKc>
    2194:	8e c0       	rjmp	.+284    	; 0x22b2 <_ZN5SDLib7SDClass4openEPKch+0x20e>
    2196:	6e 96       	adiw	r28, 0x1e	; 30
    2198:	1f ae       	std	Y+63, r1	; 0x3f
    219a:	1e ae       	std	Y+62, r1	; 0x3e
    219c:	6e 97       	sbiw	r28, 0x1e	; 30
    219e:	8b eb       	ldi	r24, 0xBB	; 187
    21a0:	91 e0       	ldi	r25, 0x01	; 1
    21a2:	6c 96       	adiw	r28, 0x1c	; 28
    21a4:	9f af       	std	Y+63, r25	; 0x3f
    21a6:	8e af       	std	Y+62, r24	; 0x3e
    21a8:	6c 97       	sbiw	r28, 0x1c	; 28
    21aa:	a0 96       	adiw	r28, 0x20	; 32
    21ac:	1f ae       	std	Y+63, r1	; 0x3f
    21ae:	a0 97       	sbiw	r28, 0x20	; 32
    21b0:	23 96       	adiw	r28, 0x03	; 3
    21b2:	8f ad       	ldd	r24, Y+63	; 0x3f
    21b4:	23 97       	sbiw	r28, 0x03	; 3
    21b6:	81 11       	cpse	r24, r1
    21b8:	04 c0       	rjmp	.+8      	; 0x21c2 <_ZN5SDLib7SDClass4openEPKch+0x11e>
    21ba:	c7 01       	movw	r24, r14
    21bc:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <_ZN5SDLib4FileC1Ev>
    21c0:	78 c0       	rjmp	.+240    	; 0x22b2 <_ZN5SDLib7SDClass4openEPKch+0x20e>
    21c2:	2d 2d       	mov	r18, r13
    21c4:	a8 01       	movw	r20, r16
    21c6:	be 01       	movw	r22, r28
    21c8:	63 5c       	subi	r22, 0xC3	; 195
    21ca:	7f 4f       	sbci	r23, 0xFF	; 255
    21cc:	ce 01       	movw	r24, r28
    21ce:	86 5a       	subi	r24, 0xA6	; 166
    21d0:	9f 4f       	sbci	r25, 0xFF	; 255
    21d2:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN6SdFile4openEPS_PKch>
    21d6:	81 11       	cpse	r24, r1
    21d8:	04 c0       	rjmp	.+8      	; 0x21e2 <_ZN5SDLib7SDClass4openEPKch+0x13e>
    21da:	c7 01       	movw	r24, r14
    21dc:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <_ZN5SDLib4FileC1Ev>
    21e0:	68 c0       	rjmp	.+208    	; 0x22b2 <_ZN5SDLib7SDClass4openEPKch+0x20e>
    21e2:	ce 01       	movw	r24, r28
    21e4:	cd 96       	adiw	r24, 0x3d	; 61
    21e6:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <_ZN6SdFile5closeEv>
    21ea:	8d 2d       	mov	r24, r13
    21ec:	86 70       	andi	r24, 0x06	; 6
    21ee:	86 30       	cpi	r24, 0x06	; 6
    21f0:	59 f4       	brne	.+22     	; 0x2208 <_ZN5SDLib7SDClass4openEPKch+0x164>
    21f2:	e1 96       	adiw	r28, 0x31	; 49
    21f4:	4c ad       	ldd	r20, Y+60	; 0x3c
    21f6:	5d ad       	ldd	r21, Y+61	; 0x3d
    21f8:	6e ad       	ldd	r22, Y+62	; 0x3e
    21fa:	7f ad       	ldd	r23, Y+63	; 0x3f
    21fc:	e1 97       	sbiw	r28, 0x31	; 49
    21fe:	ce 01       	movw	r24, r28
    2200:	86 5a       	subi	r24, 0xA6	; 166
    2202:	9f 4f       	sbci	r25, 0xFF	; 255
    2204:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <_ZN6SdFile7seekSetEm>
    2208:	6e 96       	adiw	r28, 0x1e	; 30
    220a:	8e ad       	ldd	r24, Y+62	; 0x3e
    220c:	9f ad       	ldd	r25, Y+63	; 0x3f
    220e:	6e 97       	sbiw	r28, 0x1e	; 30
    2210:	9c 83       	std	Y+4, r25	; 0x04
    2212:	8b 83       	std	Y+3, r24	; 0x03
    2214:	8b eb       	ldi	r24, 0xBB	; 187
    2216:	91 e0       	ldi	r25, 0x01	; 1
    2218:	9a 83       	std	Y+2, r25	; 0x02
    221a:	89 83       	std	Y+1, r24	; 0x01
    221c:	6f 96       	adiw	r28, 0x1f	; 31
    221e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2220:	6f 97       	sbiw	r28, 0x1f	; 31
    2222:	8d 83       	std	Y+5, r24	; 0x05
    2224:	a0 96       	adiw	r28, 0x20	; 32
    2226:	8f ad       	ldd	r24, Y+63	; 0x3f
    2228:	a0 97       	sbiw	r28, 0x20	; 32
    222a:	8e 83       	std	Y+6, r24	; 0x06
    222c:	a4 96       	adiw	r28, 0x24	; 36
    222e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2230:	9d ad       	ldd	r25, Y+61	; 0x3d
    2232:	ae ad       	ldd	r26, Y+62	; 0x3e
    2234:	bf ad       	ldd	r27, Y+63	; 0x3f
    2236:	a4 97       	sbiw	r28, 0x24	; 36
    2238:	8f 83       	std	Y+7, r24	; 0x07
    223a:	98 87       	std	Y+8, r25	; 0x08
    223c:	a9 87       	std	Y+9, r26	; 0x09
    223e:	ba 87       	std	Y+10, r27	; 0x0a
    2240:	a8 96       	adiw	r28, 0x28	; 40
    2242:	8c ad       	ldd	r24, Y+60	; 0x3c
    2244:	9d ad       	ldd	r25, Y+61	; 0x3d
    2246:	ae ad       	ldd	r26, Y+62	; 0x3e
    2248:	bf ad       	ldd	r27, Y+63	; 0x3f
    224a:	a8 97       	sbiw	r28, 0x28	; 40
    224c:	8b 87       	std	Y+11, r24	; 0x0b
    224e:	9c 87       	std	Y+12, r25	; 0x0c
    2250:	ad 87       	std	Y+13, r26	; 0x0d
    2252:	be 87       	std	Y+14, r27	; 0x0e
    2254:	ac 96       	adiw	r28, 0x2c	; 44
    2256:	8c ad       	ldd	r24, Y+60	; 0x3c
    2258:	9d ad       	ldd	r25, Y+61	; 0x3d
    225a:	ae ad       	ldd	r26, Y+62	; 0x3e
    225c:	bf ad       	ldd	r27, Y+63	; 0x3f
    225e:	ac 97       	sbiw	r28, 0x2c	; 44
    2260:	8f 87       	std	Y+15, r24	; 0x0f
    2262:	98 8b       	std	Y+16, r25	; 0x10
    2264:	a9 8b       	std	Y+17, r26	; 0x11
    2266:	ba 8b       	std	Y+18, r27	; 0x12
    2268:	ad 96       	adiw	r28, 0x2d	; 45
    226a:	8f ad       	ldd	r24, Y+63	; 0x3f
    226c:	ad 97       	sbiw	r28, 0x2d	; 45
    226e:	8b 8b       	std	Y+19, r24	; 0x13
    2270:	e1 96       	adiw	r28, 0x31	; 49
    2272:	8c ad       	ldd	r24, Y+60	; 0x3c
    2274:	9d ad       	ldd	r25, Y+61	; 0x3d
    2276:	ae ad       	ldd	r26, Y+62	; 0x3e
    2278:	bf ad       	ldd	r27, Y+63	; 0x3f
    227a:	e1 97       	sbiw	r28, 0x31	; 49
    227c:	8c 8b       	std	Y+20, r24	; 0x14
    227e:	9d 8b       	std	Y+21, r25	; 0x15
    2280:	ae 8b       	std	Y+22, r26	; 0x16
    2282:	bf 8b       	std	Y+23, r27	; 0x17
    2284:	e5 96       	adiw	r28, 0x35	; 53
    2286:	8c ad       	ldd	r24, Y+60	; 0x3c
    2288:	9d ad       	ldd	r25, Y+61	; 0x3d
    228a:	ae ad       	ldd	r26, Y+62	; 0x3e
    228c:	bf ad       	ldd	r27, Y+63	; 0x3f
    228e:	e5 97       	sbiw	r28, 0x35	; 53
    2290:	88 8f       	std	Y+24, r24	; 0x18
    2292:	99 8f       	std	Y+25, r25	; 0x19
    2294:	aa 8f       	std	Y+26, r26	; 0x1a
    2296:	bb 8f       	std	Y+27, r27	; 0x1b
    2298:	e7 96       	adiw	r28, 0x37	; 55
    229a:	8e ad       	ldd	r24, Y+62	; 0x3e
    229c:	9f ad       	ldd	r25, Y+63	; 0x3f
    229e:	e7 97       	sbiw	r28, 0x37	; 55
    22a0:	9d 8f       	std	Y+29, r25	; 0x1d
    22a2:	8c 8f       	std	Y+28, r24	; 0x1c
    22a4:	a8 01       	movw	r20, r16
    22a6:	be 01       	movw	r22, r28
    22a8:	6f 5f       	subi	r22, 0xFF	; 255
    22aa:	7f 4f       	sbci	r23, 0xFF	; 255
    22ac:	c7 01       	movw	r24, r14
    22ae:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <_ZN5SDLib4FileC1E6SdFilePKc>
    22b2:	c7 01       	movw	r24, r14
    22b4:	ca 58       	subi	r28, 0x8A	; 138
    22b6:	df 4f       	sbci	r29, 0xFF	; 255
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	de bf       	out	0x3e, r29	; 62
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	cd bf       	out	0x3d, r28	; 61
    22c2:	df 91       	pop	r29
    22c4:	cf 91       	pop	r28
    22c6:	1f 91       	pop	r17
    22c8:	0f 91       	pop	r16
    22ca:	ff 90       	pop	r15
    22cc:	ef 90       	pop	r14
    22ce:	df 90       	pop	r13
    22d0:	08 95       	ret

000022d2 <_ZN5SDLib7SDClass6existsEPKc>:
    22d2:	fb 01       	movw	r30, r22
    22d4:	bc 01       	movw	r22, r24
    22d6:	66 5d       	subi	r22, 0xD6	; 214
    22d8:	7f 4f       	sbci	r23, 0xFF	; 255
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	4a e2       	ldi	r20, 0x2A	; 42
    22e0:	5e e0       	ldi	r21, 0x0E	; 14
    22e2:	cf 01       	movw	r24, r30
    22e4:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>
    22e8:	08 95       	ret

000022ea <_ZN5SDLib7SDClass6removeEPKc>:
    22ea:	fb 01       	movw	r30, r22
    22ec:	bc 01       	movw	r22, r24
    22ee:	66 5d       	subi	r22, 0xD6	; 214
    22f0:	7f 4f       	sbci	r23, 0xFF	; 255
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	48 e5       	ldi	r20, 0x58	; 88
    22f8:	5e e0       	ldi	r21, 0x0E	; 14
    22fa:	cf 01       	movw	r24, r30
    22fc:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>
    2300:	08 95       	ret

00002302 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:

  SDClass SD;

};
    2302:	6f ef       	ldi	r22, 0xFF	; 255
    2304:	7f ef       	ldi	r23, 0xFF	; 255
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <_Z41__static_initialization_and_destruction_0ii>
    230e:	08 95       	ret

00002310 <_ZL7spiSendh>:

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    2310:	8e bd       	out	0x2e, r24	; 46
    2312:	00 00       	nop
    2314:	0d b4       	in	r0, 0x2d	; 45
    2316:	07 fe       	sbrs	r0, 7
    2318:	fd cf       	rjmp	.-6      	; 0x2314 <_ZL7spiSendh+0x4>
    231a:	8e b5       	in	r24, 0x2e	; 46
    231c:	08 95       	ret

0000231e <_ZL6spiRecv>:
    231e:	8f ef       	ldi	r24, 0xFF	; 255
    2320:	8e bd       	out	0x2e, r24	; 46
    2322:	00 00       	nop
    2324:	0d b4       	in	r0, 0x2d	; 45
    2326:	07 fe       	sbrs	r0, 7
    2328:	fd cf       	rjmp	.-6      	; 0x2324 <_ZL6spiRecv+0x6>
    232a:	8e b5       	in	r24, 0x2e	; 46
    232c:	08 95       	ret

0000232e <_Z41__static_initialization_and_destruction_0ii>:
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	41 f4       	brne	.+16     	; 0x2342 <_Z41__static_initialization_and_destruction_0ii+0x14>
    2332:	6f 3f       	cpi	r22, 0xFF	; 255
    2334:	7f 4f       	sbci	r23, 0xFF	; 255
    2336:	29 f4       	brne	.+10     	; 0x2342 <_Z41__static_initialization_and_destruction_0ii+0x14>
    2338:	e6 e4       	ldi	r30, 0x46	; 70
    233a:	f4 e0       	ldi	r31, 0x04	; 4
    233c:	80 e5       	ldi	r24, 0x50	; 80
    233e:	80 83       	st	Z, r24
    2340:	11 82       	std	Z+1, r1	; 0x01
    2342:	08 95       	ret

00002344 <_ZN7Sd2Card14chipSelectHighEv>:
    2344:	61 e0       	ldi	r22, 0x01	; 1
    2346:	fc 01       	movw	r30, r24
    2348:	84 81       	ldd	r24, Z+4	; 0x04
    234a:	0e 94 d4 06 	call	0xda8	; 0xda8 <digitalWrite>
    234e:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <_ZL20chip_select_asserted>
    2352:	88 23       	and	r24, r24
    2354:	a1 f0       	breq	.+40     	; 0x237e <_ZN7Sd2Card14chipSelectHighEv+0x3a>
    2356:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <_ZL20chip_select_asserted>
    235a:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <_ZN8SPIClass13interruptModeE>
    235e:	88 23       	and	r24, r24
    2360:	71 f0       	breq	.+28     	; 0x237e <_ZN7Sd2Card14chipSelectHighEv+0x3a>
    2362:	9f b7       	in	r25, 0x3f	; 63
    2364:	f8 94       	cli
    2366:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <_ZN8SPIClass13interruptModeE>
    236a:	81 30       	cpi	r24, 0x01	; 1
    236c:	29 f4       	brne	.+10     	; 0x2378 <_ZN7Sd2Card14chipSelectHighEv+0x34>
    236e:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <_ZN8SPIClass13interruptSaveE>
    2372:	8d bb       	out	0x1d, r24	; 29
    2374:	9f bf       	out	0x3f, r25	; 63
    2376:	08 95       	ret
    2378:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <_ZN8SPIClass13interruptSaveE>
    237c:	8f bf       	out	0x3f, r24	; 63
    237e:	08 95       	ret

00002380 <_ZN7Sd2Card13chipSelectLowEv>:
    2380:	20 91 45 04 	lds	r18, 0x0445	; 0x800445 <_ZL20chip_select_asserted>
    2384:	21 11       	cpse	r18, r1
    2386:	20 c0       	rjmp	.+64     	; 0x23c8 <_ZN7Sd2Card13chipSelectLowEv+0x48>
    2388:	21 e0       	ldi	r18, 0x01	; 1
    238a:	20 93 45 04 	sts	0x0445, r18	; 0x800445 <_ZL20chip_select_asserted>
    238e:	30 91 46 04 	lds	r19, 0x0446	; 0x800446 <_ZL8settings>
    2392:	20 91 47 04 	lds	r18, 0x0447	; 0x800447 <_ZL8settings+0x1>
    2396:	40 91 30 03 	lds	r20, 0x0330	; 0x800330 <_ZN8SPIClass13interruptModeE>
    239a:	44 23       	and	r20, r20
    239c:	99 f0       	breq	.+38     	; 0x23c4 <_ZN7Sd2Card13chipSelectLowEv+0x44>
    239e:	4f b7       	in	r20, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	50 91 30 03 	lds	r21, 0x0330	; 0x800330 <_ZN8SPIClass13interruptModeE>
    23a6:	51 30       	cpi	r21, 0x01	; 1
    23a8:	59 f4       	brne	.+22     	; 0x23c0 <_ZN7Sd2Card13chipSelectLowEv+0x40>
    23aa:	5d b3       	in	r21, 0x1d	; 29
    23ac:	50 93 2e 03 	sts	0x032E, r21	; 0x80032e <_ZN8SPIClass13interruptSaveE>
    23b0:	6d b3       	in	r22, 0x1d	; 29
    23b2:	50 91 2f 03 	lds	r21, 0x032F	; 0x80032f <_ZN8SPIClass13interruptMaskE>
    23b6:	50 95       	com	r21
    23b8:	56 23       	and	r21, r22
    23ba:	5d bb       	out	0x1d, r21	; 29
    23bc:	4f bf       	out	0x3f, r20	; 63
    23be:	02 c0       	rjmp	.+4      	; 0x23c4 <_ZN7Sd2Card13chipSelectLowEv+0x44>
    23c0:	40 93 2e 03 	sts	0x032E, r20	; 0x80032e <_ZN8SPIClass13interruptSaveE>
    23c4:	3c bd       	out	0x2c, r19	; 44
    23c6:	2d bd       	out	0x2d, r18	; 45
    23c8:	60 e0       	ldi	r22, 0x00	; 0
    23ca:	fc 01       	movw	r30, r24
    23cc:	84 81       	ldd	r24, Z+4	; 0x04
    23ce:	0e 94 d4 06 	call	0xda8	; 0xda8 <digitalWrite>
    23d2:	08 95       	ret

000023d4 <_ZN7Sd2Card7readEndEv>:
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	ec 01       	movw	r28, r24
    23da:	8e 81       	ldd	r24, Y+6	; 0x06
    23dc:	88 23       	and	r24, r24
    23de:	89 f0       	breq	.+34     	; 0x2402 <_ZN7Sd2Card7readEndEv+0x2e>
    23e0:	8f 81       	ldd	r24, Y+7	; 0x07
    23e2:	98 85       	ldd	r25, Y+8	; 0x08
    23e4:	9c 01       	movw	r18, r24
    23e6:	2f 5f       	subi	r18, 0xFF	; 255
    23e8:	3f 4f       	sbci	r19, 0xFF	; 255
    23ea:	38 87       	std	Y+8, r19	; 0x08
    23ec:	2f 83       	std	Y+7, r18	; 0x07
    23ee:	82 30       	cpi	r24, 0x02	; 2
    23f0:	92 40       	sbci	r25, 0x02	; 2
    23f2:	18 f4       	brcc	.+6      	; 0x23fa <_ZN7Sd2Card7readEndEv+0x26>
    23f4:	0e 94 8f 11 	call	0x231e	; 0x231e <_ZL6spiRecv>
    23f8:	f3 cf       	rjmp	.-26     	; 0x23e0 <_ZN7Sd2Card7readEndEv+0xc>
    23fa:	ce 01       	movw	r24, r28
    23fc:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7Sd2Card14chipSelectHighEv>
    2400:	1e 82       	std	Y+6, r1	; 0x06
    2402:	df 91       	pop	r29
    2404:	cf 91       	pop	r28
    2406:	08 95       	ret

00002408 <_ZN7Sd2Card10setSckRateEh>:
    2408:	67 30       	cpi	r22, 0x07	; 7
    240a:	28 f0       	brcs	.+10     	; 0x2416 <_ZN7Sd2Card10setSckRateEh+0xe>
    240c:	26 e1       	ldi	r18, 0x16	; 22
    240e:	fc 01       	movw	r30, r24
    2410:	25 83       	std	Z+5, r18	; 0x05
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	08 95       	ret
    2416:	62 30       	cpi	r22, 0x02	; 2
    2418:	d1 f0       	breq	.+52     	; 0x244e <_ZN7Sd2Card10setSckRateEh+0x46>
    241a:	28 f4       	brcc	.+10     	; 0x2426 <_ZN7Sd2Card10setSckRateEh+0x1e>
    241c:	66 23       	and	r22, r22
    241e:	49 f0       	breq	.+18     	; 0x2432 <_ZN7Sd2Card10setSckRateEh+0x2a>
    2420:	61 30       	cpi	r22, 0x01	; 1
    2422:	71 f0       	breq	.+28     	; 0x2440 <_ZN7Sd2Card10setSckRateEh+0x38>
    2424:	30 c0       	rjmp	.+96     	; 0x2486 <_ZN7Sd2Card10setSckRateEh+0x7e>
    2426:	64 30       	cpi	r22, 0x04	; 4
    2428:	01 f1       	breq	.+64     	; 0x246a <_ZN7Sd2Card10setSckRateEh+0x62>
    242a:	c0 f0       	brcs	.+48     	; 0x245c <_ZN7Sd2Card10setSckRateEh+0x54>
    242c:	65 30       	cpi	r22, 0x05	; 5
    242e:	21 f1       	breq	.+72     	; 0x2478 <_ZN7Sd2Card10setSckRateEh+0x70>
    2430:	2a c0       	rjmp	.+84     	; 0x2486 <_ZN7Sd2Card10setSckRateEh+0x7e>
    2432:	80 e5       	ldi	r24, 0x50	; 80
    2434:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <_ZL8settings>
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <_ZL8settings+0x1>
    243e:	08 95       	ret
    2440:	80 e5       	ldi	r24, 0x50	; 80
    2442:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <_ZL8settings>
    2446:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <_ZL8settings+0x1>
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	08 95       	ret
    244e:	81 e5       	ldi	r24, 0x51	; 81
    2450:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <_ZL8settings>
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <_ZL8settings+0x1>
    245a:	08 95       	ret
    245c:	81 e5       	ldi	r24, 0x51	; 81
    245e:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <_ZL8settings>
    2462:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <_ZL8settings+0x1>
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	08 95       	ret
    246a:	82 e5       	ldi	r24, 0x52	; 82
    246c:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <_ZL8settings>
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <_ZL8settings+0x1>
    2476:	08 95       	ret
    2478:	82 e5       	ldi	r24, 0x52	; 82
    247a:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <_ZL8settings>
    247e:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <_ZL8settings+0x1>
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	08 95       	ret
    2486:	83 e5       	ldi	r24, 0x53	; 83
    2488:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <_ZL8settings>
    248c:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <_ZL8settings+0x1>
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	08 95       	ret

00002494 <_ZN7Sd2Card11waitNotBusyEj>:
    2494:	0f 93       	push	r16
    2496:	1f 93       	push	r17
    2498:	cf 93       	push	r28
    249a:	df 93       	push	r29
    249c:	eb 01       	movw	r28, r22
    249e:	0e 94 64 05 	call	0xac8	; 0xac8 <millis>
    24a2:	8b 01       	movw	r16, r22
    24a4:	0e 94 8f 11 	call	0x231e	; 0x231e <_ZL6spiRecv>
    24a8:	8f 3f       	cpi	r24, 0xFF	; 255
    24aa:	49 f0       	breq	.+18     	; 0x24be <_ZN7Sd2Card11waitNotBusyEj+0x2a>
    24ac:	0e 94 64 05 	call	0xac8	; 0xac8 <millis>
    24b0:	60 1b       	sub	r22, r16
    24b2:	71 0b       	sbc	r23, r17
    24b4:	6c 17       	cp	r22, r28
    24b6:	7d 07       	cpc	r23, r29
    24b8:	a8 f3       	brcs	.-22     	; 0x24a4 <_ZN7Sd2Card11waitNotBusyEj+0x10>
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	01 c0       	rjmp	.+2      	; 0x24c0 <_ZN7Sd2Card11waitNotBusyEj+0x2c>
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	df 91       	pop	r29
    24c2:	cf 91       	pop	r28
    24c4:	1f 91       	pop	r17
    24c6:	0f 91       	pop	r16
    24c8:	08 95       	ret

000024ca <_ZN7Sd2Card11cardCommandEhm>:
    24ca:	cf 92       	push	r12
    24cc:	df 92       	push	r13
    24ce:	ef 92       	push	r14
    24d0:	ff 92       	push	r15
    24d2:	0f 93       	push	r16
    24d4:	1f 93       	push	r17
    24d6:	cf 93       	push	r28
    24d8:	df 93       	push	r29
    24da:	8c 01       	movw	r16, r24
    24dc:	d6 2f       	mov	r29, r22
    24de:	69 01       	movw	r12, r18
    24e0:	7a 01       	movw	r14, r20
    24e2:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <_ZN7Sd2Card7readEndEv>
    24e6:	c8 01       	movw	r24, r16
    24e8:	0e 94 c0 11 	call	0x2380	; 0x2380 <_ZN7Sd2Card13chipSelectLowEv>
    24ec:	6c e2       	ldi	r22, 0x2C	; 44
    24ee:	71 e0       	ldi	r23, 0x01	; 1
    24f0:	c8 01       	movw	r24, r16
    24f2:	0e 94 4a 12 	call	0x2494	; 0x2494 <_ZN7Sd2Card11waitNotBusyEj>
    24f6:	8d 2f       	mov	r24, r29
    24f8:	80 64       	ori	r24, 0x40	; 64
    24fa:	0e 94 88 11 	call	0x2310	; 0x2310 <_ZL7spiSendh>
    24fe:	c8 e1       	ldi	r28, 0x18	; 24
    2500:	cc 23       	and	r28, r28
    2502:	74 f0       	brlt	.+28     	; 0x2520 <_ZN7Sd2Card11cardCommandEhm+0x56>
    2504:	d7 01       	movw	r26, r14
    2506:	c6 01       	movw	r24, r12
    2508:	0c 2e       	mov	r0, r28
    250a:	04 c0       	rjmp	.+8      	; 0x2514 <_ZN7Sd2Card11cardCommandEhm+0x4a>
    250c:	b6 95       	lsr	r27
    250e:	a7 95       	ror	r26
    2510:	97 95       	ror	r25
    2512:	87 95       	ror	r24
    2514:	0a 94       	dec	r0
    2516:	d2 f7       	brpl	.-12     	; 0x250c <_ZN7Sd2Card11cardCommandEhm+0x42>
    2518:	0e 94 88 11 	call	0x2310	; 0x2310 <_ZL7spiSendh>
    251c:	c8 50       	subi	r28, 0x08	; 8
    251e:	f0 cf       	rjmp	.-32     	; 0x2500 <_ZN7Sd2Card11cardCommandEhm+0x36>
    2520:	dd 23       	and	r29, r29
    2522:	11 f0       	breq	.+4      	; 0x2528 <_ZN7Sd2Card11cardCommandEhm+0x5e>
    2524:	8f ef       	ldi	r24, 0xFF	; 255
    2526:	01 c0       	rjmp	.+2      	; 0x252a <_ZN7Sd2Card11cardCommandEhm+0x60>
    2528:	85 e9       	ldi	r24, 0x95	; 149
    252a:	d8 30       	cpi	r29, 0x08	; 8
    252c:	09 f4       	brne	.+2      	; 0x2530 <_ZN7Sd2Card11cardCommandEhm+0x66>
    252e:	87 e8       	ldi	r24, 0x87	; 135
    2530:	0e 94 88 11 	call	0x2310	; 0x2310 <_ZL7spiSendh>
    2534:	c0 e0       	ldi	r28, 0x00	; 0
    2536:	0e 94 8f 11 	call	0x231e	; 0x231e <_ZL6spiRecv>
    253a:	f8 01       	movw	r30, r16
    253c:	82 87       	std	Z+10, r24	; 0x0a
    253e:	88 23       	and	r24, r24
    2540:	24 f4       	brge	.+8      	; 0x254a <_ZN7Sd2Card11cardCommandEhm+0x80>
    2542:	cf 3f       	cpi	r28, 0xFF	; 255
    2544:	21 f4       	brne	.+8      	; 0x254e <_ZN7Sd2Card11cardCommandEhm+0x84>
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	03 c0       	rjmp	.+6      	; 0x2550 <_ZN7Sd2Card11cardCommandEhm+0x86>
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	01 c0       	rjmp	.+2      	; 0x2550 <_ZN7Sd2Card11cardCommandEhm+0x86>
    254e:	91 e0       	ldi	r25, 0x01	; 1
    2550:	99 23       	and	r25, r25
    2552:	11 f0       	breq	.+4      	; 0x2558 <_ZN7Sd2Card11cardCommandEhm+0x8e>
    2554:	cf 5f       	subi	r28, 0xFF	; 255
    2556:	ef cf       	rjmp	.-34     	; 0x2536 <_ZN7Sd2Card11cardCommandEhm+0x6c>
    2558:	df 91       	pop	r29
    255a:	cf 91       	pop	r28
    255c:	1f 91       	pop	r17
    255e:	0f 91       	pop	r16
    2560:	ff 90       	pop	r15
    2562:	ef 90       	pop	r14
    2564:	df 90       	pop	r13
    2566:	cf 90       	pop	r12
    2568:	08 95       	ret

0000256a <_ZN7Sd2Card4initEhh>:
    256a:	8f 92       	push	r8
    256c:	9f 92       	push	r9
    256e:	af 92       	push	r10
    2570:	bf 92       	push	r11
    2572:	ef 92       	push	r14
    2574:	ff 92       	push	r15
    2576:	0f 93       	push	r16
    2578:	1f 93       	push	r17
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
    257e:	ec 01       	movw	r28, r24
    2580:	e6 2e       	mov	r14, r22
    2582:	1b 86       	std	Y+11, r1	; 0x0b
    2584:	19 86       	std	Y+9, r1	; 0x09
    2586:	1e 82       	std	Y+6, r1	; 0x06
    2588:	1d 82       	std	Y+5, r1	; 0x05
    258a:	4c 83       	std	Y+4, r20	; 0x04
    258c:	0e 94 64 05 	call	0xac8	; 0xac8 <millis>
    2590:	8b 01       	movw	r16, r22
    2592:	61 e0       	ldi	r22, 0x01	; 1
    2594:	8c 81       	ldd	r24, Y+4	; 0x04
    2596:	0e 94 95 06 	call	0xd2a	; 0xd2a <pinMode>
    259a:	61 e0       	ldi	r22, 0x01	; 1
    259c:	8c 81       	ldd	r24, Y+4	; 0x04
    259e:	0e 94 d4 06 	call	0xda8	; 0xda8 <digitalWrite>
    25a2:	0e 94 54 08 	call	0x10a8	; 0x10a8 <_ZN8SPIClass5beginEv>
    25a6:	82 e5       	ldi	r24, 0x52	; 82
    25a8:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <_ZL8settings>
    25ac:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <_ZL8settings+0x1>
    25b0:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <_ZN8SPIClass13interruptModeE>
    25b4:	88 23       	and	r24, r24
    25b6:	99 f0       	breq	.+38     	; 0x25de <_ZN7Sd2Card4initEhh+0x74>
    25b8:	8f b7       	in	r24, 0x3f	; 63
    25ba:	f8 94       	cli
    25bc:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <_ZN8SPIClass13interruptModeE>
    25c0:	91 30       	cpi	r25, 0x01	; 1
    25c2:	59 f4       	brne	.+22     	; 0x25da <_ZN7Sd2Card4initEhh+0x70>
    25c4:	9d b3       	in	r25, 0x1d	; 29
    25c6:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <_ZN8SPIClass13interruptSaveE>
    25ca:	2d b3       	in	r18, 0x1d	; 29
    25cc:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <_ZN8SPIClass13interruptMaskE>
    25d0:	90 95       	com	r25
    25d2:	92 23       	and	r25, r18
    25d4:	9d bb       	out	0x1d, r25	; 29
    25d6:	8f bf       	out	0x3f, r24	; 63
    25d8:	02 c0       	rjmp	.+4      	; 0x25de <_ZN7Sd2Card4initEhh+0x74>
    25da:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <_ZN8SPIClass13interruptSaveE>
    25de:	82 e5       	ldi	r24, 0x52	; 82
    25e0:	8c bd       	out	0x2c, r24	; 44
    25e2:	1d bc       	out	0x2d, r1	; 45
    25e4:	f1 2c       	mov	r15, r1
    25e6:	89 e0       	ldi	r24, 0x09	; 9
    25e8:	8f 15       	cp	r24, r15
    25ea:	28 f0       	brcs	.+10     	; 0x25f6 <_ZN7Sd2Card4initEhh+0x8c>
    25ec:	8f ef       	ldi	r24, 0xFF	; 255
    25ee:	0e 94 88 11 	call	0x2310	; 0x2310 <_ZL7spiSendh>
    25f2:	f3 94       	inc	r15
    25f4:	f8 cf       	rjmp	.-16     	; 0x25e6 <_ZN7Sd2Card4initEhh+0x7c>
    25f6:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <_ZN8SPIClass13interruptModeE>
    25fa:	88 23       	and	r24, r24
    25fc:	71 f0       	breq	.+28     	; 0x261a <_ZN7Sd2Card4initEhh+0xb0>
    25fe:	9f b7       	in	r25, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <_ZN8SPIClass13interruptModeE>
    2606:	81 30       	cpi	r24, 0x01	; 1
    2608:	29 f4       	brne	.+10     	; 0x2614 <_ZN7Sd2Card4initEhh+0xaa>
    260a:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <_ZN8SPIClass13interruptSaveE>
    260e:	8d bb       	out	0x1d, r24	; 29
    2610:	9f bf       	out	0x3f, r25	; 63
    2612:	03 c0       	rjmp	.+6      	; 0x261a <_ZN7Sd2Card4initEhh+0xb0>
    2614:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <_ZN8SPIClass13interruptSaveE>
    2618:	8f bf       	out	0x3f, r24	; 63
    261a:	ce 01       	movw	r24, r28
    261c:	0e 94 c0 11 	call	0x2380	; 0x2380 <_ZN7Sd2Card13chipSelectLowEv>
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	a9 01       	movw	r20, r18
    2626:	60 e0       	ldi	r22, 0x00	; 0
    2628:	ce 01       	movw	r24, r28
    262a:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZN7Sd2Card11cardCommandEhm>
    262e:	8a 87       	std	Y+10, r24	; 0x0a
    2630:	81 30       	cpi	r24, 0x01	; 1
    2632:	51 f0       	breq	.+20     	; 0x2648 <_ZN7Sd2Card4initEhh+0xde>
    2634:	0e 94 64 05 	call	0xac8	; 0xac8 <millis>
    2638:	60 1b       	sub	r22, r16
    263a:	71 0b       	sbc	r23, r17
    263c:	61 3d       	cpi	r22, 0xD1	; 209
    263e:	77 40       	sbci	r23, 0x07	; 7
    2640:	78 f3       	brcs	.-34     	; 0x2620 <_ZN7Sd2Card4initEhh+0xb6>
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	8d 83       	std	Y+5, r24	; 0x05
    2646:	69 c0       	rjmp	.+210    	; 0x271a <_ZN7Sd2Card4initEhh+0x1b0>
    2648:	2a ea       	ldi	r18, 0xAA	; 170
    264a:	31 e0       	ldi	r19, 0x01	; 1
    264c:	40 e0       	ldi	r20, 0x00	; 0
    264e:	50 e0       	ldi	r21, 0x00	; 0
    2650:	68 e0       	ldi	r22, 0x08	; 8
    2652:	ce 01       	movw	r24, r28
    2654:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZN7Sd2Card11cardCommandEhm>
    2658:	82 ff       	sbrs	r24, 2
    265a:	03 c0       	rjmp	.+6      	; 0x2662 <_ZN7Sd2Card4initEhh+0xf8>
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	8b 87       	std	Y+11, r24	; 0x0b
    2660:	11 c0       	rjmp	.+34     	; 0x2684 <_ZN7Sd2Card4initEhh+0x11a>
    2662:	f1 2c       	mov	r15, r1
    2664:	83 e0       	ldi	r24, 0x03	; 3
    2666:	8f 15       	cp	r24, r15
    2668:	28 f0       	brcs	.+10     	; 0x2674 <_ZN7Sd2Card4initEhh+0x10a>
    266a:	0e 94 8f 11 	call	0x231e	; 0x231e <_ZL6spiRecv>
    266e:	8a 87       	std	Y+10, r24	; 0x0a
    2670:	f3 94       	inc	r15
    2672:	f8 cf       	rjmp	.-16     	; 0x2664 <_ZN7Sd2Card4initEhh+0xfa>
    2674:	8a 85       	ldd	r24, Y+10	; 0x0a
    2676:	8a 3a       	cpi	r24, 0xAA	; 170
    2678:	19 f0       	breq	.+6      	; 0x2680 <_ZN7Sd2Card4initEhh+0x116>
    267a:	82 e0       	ldi	r24, 0x02	; 2
    267c:	8d 83       	std	Y+5, r24	; 0x05
    267e:	4d c0       	rjmp	.+154    	; 0x271a <_ZN7Sd2Card4initEhh+0x1b0>
    2680:	82 e0       	ldi	r24, 0x02	; 2
    2682:	8b 87       	std	Y+11, r24	; 0x0b
    2684:	8b 85       	ldd	r24, Y+11	; 0x0b
    2686:	82 30       	cpi	r24, 0x02	; 2
    2688:	31 f4       	brne	.+12     	; 0x2696 <_ZN7Sd2Card4initEhh+0x12c>
    268a:	81 2c       	mov	r8, r1
    268c:	91 2c       	mov	r9, r1
    268e:	54 01       	movw	r10, r8
    2690:	68 94       	set
    2692:	b6 f8       	bld	r11, 6
    2694:	03 c0       	rjmp	.+6      	; 0x269c <_ZN7Sd2Card4initEhh+0x132>
    2696:	81 2c       	mov	r8, r1
    2698:	91 2c       	mov	r9, r1
    269a:	54 01       	movw	r10, r8
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	a9 01       	movw	r20, r18
    26a2:	67 e3       	ldi	r22, 0x37	; 55
    26a4:	ce 01       	movw	r24, r28
    26a6:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZN7Sd2Card11cardCommandEhm>
    26aa:	a5 01       	movw	r20, r10
    26ac:	94 01       	movw	r18, r8
    26ae:	69 e2       	ldi	r22, 0x29	; 41
    26b0:	ce 01       	movw	r24, r28
    26b2:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZN7Sd2Card11cardCommandEhm>
    26b6:	8a 87       	std	Y+10, r24	; 0x0a
    26b8:	88 23       	and	r24, r24
    26ba:	51 f0       	breq	.+20     	; 0x26d0 <_ZN7Sd2Card4initEhh+0x166>
    26bc:	0e 94 64 05 	call	0xac8	; 0xac8 <millis>
    26c0:	60 1b       	sub	r22, r16
    26c2:	71 0b       	sbc	r23, r17
    26c4:	61 3d       	cpi	r22, 0xD1	; 209
    26c6:	77 40       	sbci	r23, 0x07	; 7
    26c8:	48 f3       	brcs	.-46     	; 0x269c <_ZN7Sd2Card4initEhh+0x132>
    26ca:	88 e0       	ldi	r24, 0x08	; 8
    26cc:	8d 83       	std	Y+5, r24	; 0x05
    26ce:	25 c0       	rjmp	.+74     	; 0x271a <_ZN7Sd2Card4initEhh+0x1b0>
    26d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    26d2:	82 30       	cpi	r24, 0x02	; 2
    26d4:	d1 f4       	brne	.+52     	; 0x270a <_ZN7Sd2Card4initEhh+0x1a0>
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	a9 01       	movw	r20, r18
    26dc:	6a e3       	ldi	r22, 0x3A	; 58
    26de:	ce 01       	movw	r24, r28
    26e0:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZN7Sd2Card11cardCommandEhm>
    26e4:	88 23       	and	r24, r24
    26e6:	19 f0       	breq	.+6      	; 0x26ee <_ZN7Sd2Card4initEhh+0x184>
    26e8:	86 e0       	ldi	r24, 0x06	; 6
    26ea:	8d 83       	std	Y+5, r24	; 0x05
    26ec:	16 c0       	rjmp	.+44     	; 0x271a <_ZN7Sd2Card4initEhh+0x1b0>
    26ee:	0e 94 8f 11 	call	0x231e	; 0x231e <_ZL6spiRecv>
    26f2:	80 7c       	andi	r24, 0xC0	; 192
    26f4:	80 3c       	cpi	r24, 0xC0	; 192
    26f6:	11 f4       	brne	.+4      	; 0x26fc <_ZN7Sd2Card4initEhh+0x192>
    26f8:	83 e0       	ldi	r24, 0x03	; 3
    26fa:	8b 87       	std	Y+11, r24	; 0x0b
    26fc:	10 e0       	ldi	r17, 0x00	; 0
    26fe:	13 30       	cpi	r17, 0x03	; 3
    2700:	20 f4       	brcc	.+8      	; 0x270a <_ZN7Sd2Card4initEhh+0x1a0>
    2702:	0e 94 8f 11 	call	0x231e	; 0x231e <_ZL6spiRecv>
    2706:	1f 5f       	subi	r17, 0xFF	; 255
    2708:	fa cf       	rjmp	.-12     	; 0x26fe <_ZN7Sd2Card4initEhh+0x194>
    270a:	ce 01       	movw	r24, r28
    270c:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7Sd2Card14chipSelectHighEv>
    2710:	6e 2d       	mov	r22, r14
    2712:	ce 01       	movw	r24, r28
    2714:	0e 94 04 12 	call	0x2408	; 0x2408 <_ZN7Sd2Card10setSckRateEh>
    2718:	04 c0       	rjmp	.+8      	; 0x2722 <_ZN7Sd2Card4initEhh+0x1b8>
    271a:	ce 01       	movw	r24, r28
    271c:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7Sd2Card14chipSelectHighEv>
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	df 91       	pop	r29
    2724:	cf 91       	pop	r28
    2726:	1f 91       	pop	r17
    2728:	0f 91       	pop	r16
    272a:	ff 90       	pop	r15
    272c:	ef 90       	pop	r14
    272e:	bf 90       	pop	r11
    2730:	af 90       	pop	r10
    2732:	9f 90       	pop	r9
    2734:	8f 90       	pop	r8
    2736:	08 95       	ret

00002738 <_ZN7Sd2Card14waitStartBlockEv>:
    2738:	0f 93       	push	r16
    273a:	1f 93       	push	r17
    273c:	cf 93       	push	r28
    273e:	df 93       	push	r29
    2740:	ec 01       	movw	r28, r24
    2742:	0e 94 64 05 	call	0xac8	; 0xac8 <millis>
    2746:	8b 01       	movw	r16, r22
    2748:	0e 94 8f 11 	call	0x231e	; 0x231e <_ZL6spiRecv>
    274c:	8a 87       	std	Y+10, r24	; 0x0a
    274e:	8f 3f       	cpi	r24, 0xFF	; 255
    2750:	51 f4       	brne	.+20     	; 0x2766 <_ZN7Sd2Card14waitStartBlockEv+0x2e>
    2752:	0e 94 64 05 	call	0xac8	; 0xac8 <millis>
    2756:	60 1b       	sub	r22, r16
    2758:	71 0b       	sbc	r23, r17
    275a:	6d 32       	cpi	r22, 0x2D	; 45
    275c:	71 40       	sbci	r23, 0x01	; 1
    275e:	a0 f3       	brcs	.-24     	; 0x2748 <_ZN7Sd2Card14waitStartBlockEv+0x10>
    2760:	8f e0       	ldi	r24, 0x0F	; 15
    2762:	8d 83       	std	Y+5, r24	; 0x05
    2764:	04 c0       	rjmp	.+8      	; 0x276e <_ZN7Sd2Card14waitStartBlockEv+0x36>
    2766:	8e 3f       	cpi	r24, 0xFE	; 254
    2768:	39 f0       	breq	.+14     	; 0x2778 <_ZN7Sd2Card14waitStartBlockEv+0x40>
    276a:	8d e0       	ldi	r24, 0x0D	; 13
    276c:	8d 83       	std	Y+5, r24	; 0x05
    276e:	ce 01       	movw	r24, r28
    2770:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7Sd2Card14chipSelectHighEv>
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	01 c0       	rjmp	.+2      	; 0x277a <_ZN7Sd2Card14waitStartBlockEv+0x42>
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	df 91       	pop	r29
    277c:	cf 91       	pop	r28
    277e:	1f 91       	pop	r17
    2780:	0f 91       	pop	r16
    2782:	08 95       	ret

00002784 <_ZN7Sd2Card8readDataEmjjPh>:
    2784:	af 92       	push	r10
    2786:	bf 92       	push	r11
    2788:	cf 92       	push	r12
    278a:	df 92       	push	r13
    278c:	ef 92       	push	r14
    278e:	ff 92       	push	r15
    2790:	0f 93       	push	r16
    2792:	1f 93       	push	r17
    2794:	cf 93       	push	r28
    2796:	df 93       	push	r29
    2798:	ec 01       	movw	r28, r24
    279a:	69 01       	movw	r12, r18
    279c:	01 15       	cp	r16, r1
    279e:	11 05       	cpc	r17, r1
    27a0:	09 f4       	brne	.+2      	; 0x27a4 <_ZN7Sd2Card8readDataEmjjPh+0x20>
    27a2:	6f c0       	rjmp	.+222    	; 0x2882 <_ZN7Sd2Card8readDataEmjjPh+0xfe>
    27a4:	c8 01       	movw	r24, r16
    27a6:	82 0f       	add	r24, r18
    27a8:	93 1f       	adc	r25, r19
    27aa:	81 30       	cpi	r24, 0x01	; 1
    27ac:	92 40       	sbci	r25, 0x02	; 2
    27ae:	08 f0       	brcs	.+2      	; 0x27b2 <_ZN7Sd2Card8readDataEmjjPh+0x2e>
    27b0:	63 c0       	rjmp	.+198    	; 0x2878 <_ZN7Sd2Card8readDataEmjjPh+0xf4>
    27b2:	8e 81       	ldd	r24, Y+6	; 0x06
    27b4:	88 23       	and	r24, r24
    27b6:	71 f0       	breq	.+28     	; 0x27d4 <_ZN7Sd2Card8readDataEmjjPh+0x50>
    27b8:	88 81       	ld	r24, Y
    27ba:	99 81       	ldd	r25, Y+1	; 0x01
    27bc:	aa 81       	ldd	r26, Y+2	; 0x02
    27be:	bb 81       	ldd	r27, Y+3	; 0x03
    27c0:	84 17       	cp	r24, r20
    27c2:	95 07       	cpc	r25, r21
    27c4:	a6 07       	cpc	r26, r22
    27c6:	b7 07       	cpc	r27, r23
    27c8:	29 f4       	brne	.+10     	; 0x27d4 <_ZN7Sd2Card8readDataEmjjPh+0x50>
    27ca:	8f 81       	ldd	r24, Y+7	; 0x07
    27cc:	98 85       	ldd	r25, Y+8	; 0x08
    27ce:	c8 16       	cp	r12, r24
    27d0:	d9 06       	cpc	r13, r25
    27d2:	20 f5       	brcc	.+72     	; 0x281c <_ZN7Sd2Card8readDataEmjjPh+0x98>
    27d4:	48 83       	st	Y, r20
    27d6:	59 83       	std	Y+1, r21	; 0x01
    27d8:	6a 83       	std	Y+2, r22	; 0x02
    27da:	7b 83       	std	Y+3, r23	; 0x03
    27dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    27de:	83 30       	cpi	r24, 0x03	; 3
    27e0:	49 f0       	breq	.+18     	; 0x27f4 <_ZN7Sd2Card8readDataEmjjPh+0x70>
    27e2:	03 2e       	mov	r0, r19
    27e4:	39 e0       	ldi	r19, 0x09	; 9
    27e6:	44 0f       	add	r20, r20
    27e8:	55 1f       	adc	r21, r21
    27ea:	66 1f       	adc	r22, r22
    27ec:	77 1f       	adc	r23, r23
    27ee:	3a 95       	dec	r19
    27f0:	d1 f7       	brne	.-12     	; 0x27e6 <_ZN7Sd2Card8readDataEmjjPh+0x62>
    27f2:	30 2d       	mov	r19, r0
    27f4:	9a 01       	movw	r18, r20
    27f6:	ab 01       	movw	r20, r22
    27f8:	61 e1       	ldi	r22, 0x11	; 17
    27fa:	ce 01       	movw	r24, r28
    27fc:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZN7Sd2Card11cardCommandEhm>
    2800:	88 23       	and	r24, r24
    2802:	19 f0       	breq	.+6      	; 0x280a <_ZN7Sd2Card8readDataEmjjPh+0x86>
    2804:	83 e0       	ldi	r24, 0x03	; 3
    2806:	8d 83       	std	Y+5, r24	; 0x05
    2808:	37 c0       	rjmp	.+110    	; 0x2878 <_ZN7Sd2Card8readDataEmjjPh+0xf4>
    280a:	ce 01       	movw	r24, r28
    280c:	0e 94 9c 13 	call	0x2738	; 0x2738 <_ZN7Sd2Card14waitStartBlockEv>
    2810:	88 23       	and	r24, r24
    2812:	91 f1       	breq	.+100    	; 0x2878 <_ZN7Sd2Card8readDataEmjjPh+0xf4>
    2814:	18 86       	std	Y+8, r1	; 0x08
    2816:	1f 82       	std	Y+7, r1	; 0x07
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	8e 83       	std	Y+6, r24	; 0x06
    281c:	8f 81       	ldd	r24, Y+7	; 0x07
    281e:	98 85       	ldd	r25, Y+8	; 0x08
    2820:	8c 15       	cp	r24, r12
    2822:	9d 05       	cpc	r25, r13
    2824:	40 f4       	brcc	.+16     	; 0x2836 <_ZN7Sd2Card8readDataEmjjPh+0xb2>
    2826:	0e 94 8f 11 	call	0x231e	; 0x231e <_ZL6spiRecv>
    282a:	8f 81       	ldd	r24, Y+7	; 0x07
    282c:	98 85       	ldd	r25, Y+8	; 0x08
    282e:	01 96       	adiw	r24, 0x01	; 1
    2830:	98 87       	std	Y+8, r25	; 0x08
    2832:	8f 83       	std	Y+7, r24	; 0x07
    2834:	f3 cf       	rjmp	.-26     	; 0x281c <_ZN7Sd2Card8readDataEmjjPh+0x98>
    2836:	c1 2c       	mov	r12, r1
    2838:	d1 2c       	mov	r13, r1
    283a:	c0 16       	cp	r12, r16
    283c:	d1 06       	cpc	r13, r17
    283e:	58 f4       	brcc	.+22     	; 0x2856 <_ZN7Sd2Card8readDataEmjjPh+0xd2>
    2840:	57 01       	movw	r10, r14
    2842:	ac 0c       	add	r10, r12
    2844:	bd 1c       	adc	r11, r13
    2846:	0e 94 8f 11 	call	0x231e	; 0x231e <_ZL6spiRecv>
    284a:	f5 01       	movw	r30, r10
    284c:	80 83       	st	Z, r24
    284e:	ff ef       	ldi	r31, 0xFF	; 255
    2850:	cf 1a       	sub	r12, r31
    2852:	df 0a       	sbc	r13, r31
    2854:	f2 cf       	rjmp	.-28     	; 0x283a <_ZN7Sd2Card8readDataEmjjPh+0xb6>
    2856:	8f 81       	ldd	r24, Y+7	; 0x07
    2858:	98 85       	ldd	r25, Y+8	; 0x08
    285a:	08 0f       	add	r16, r24
    285c:	19 1f       	adc	r17, r25
    285e:	18 87       	std	Y+8, r17	; 0x08
    2860:	0f 83       	std	Y+7, r16	; 0x07
    2862:	89 85       	ldd	r24, Y+9	; 0x09
    2864:	88 23       	and	r24, r24
    2866:	19 f0       	breq	.+6      	; 0x286e <_ZN7Sd2Card8readDataEmjjPh+0xea>
    2868:	01 15       	cp	r16, r1
    286a:	12 40       	sbci	r17, 0x02	; 2
    286c:	60 f0       	brcs	.+24     	; 0x2886 <_ZN7Sd2Card8readDataEmjjPh+0x102>
    286e:	ce 01       	movw	r24, r28
    2870:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <_ZN7Sd2Card7readEndEv>
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	08 c0       	rjmp	.+16     	; 0x2888 <_ZN7Sd2Card8readDataEmjjPh+0x104>
    2878:	ce 01       	movw	r24, r28
    287a:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7Sd2Card14chipSelectHighEv>
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	03 c0       	rjmp	.+6      	; 0x2888 <_ZN7Sd2Card8readDataEmjjPh+0x104>
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	01 c0       	rjmp	.+2      	; 0x2888 <_ZN7Sd2Card8readDataEmjjPh+0x104>
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	df 91       	pop	r29
    288a:	cf 91       	pop	r28
    288c:	1f 91       	pop	r17
    288e:	0f 91       	pop	r16
    2890:	ff 90       	pop	r15
    2892:	ef 90       	pop	r14
    2894:	df 90       	pop	r13
    2896:	cf 90       	pop	r12
    2898:	bf 90       	pop	r11
    289a:	af 90       	pop	r10
    289c:	08 95       	ret

0000289e <_ZN7Sd2Card9readBlockEmPh>:
    289e:	ef 92       	push	r14
    28a0:	ff 92       	push	r15
    28a2:	0f 93       	push	r16
    28a4:	1f 93       	push	r17
    28a6:	79 01       	movw	r14, r18
    28a8:	00 e0       	ldi	r16, 0x00	; 0
    28aa:	12 e0       	ldi	r17, 0x02	; 2
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	0e 94 c2 13 	call	0x2784	; 0x2784 <_ZN7Sd2Card8readDataEmjjPh>
    28b4:	1f 91       	pop	r17
    28b6:	0f 91       	pop	r16
    28b8:	ff 90       	pop	r15
    28ba:	ef 90       	pop	r14
    28bc:	08 95       	ret

000028be <_ZN7Sd2Card9writeDataEhPKh>:
    28be:	ef 92       	push	r14
    28c0:	ff 92       	push	r15
    28c2:	0f 93       	push	r16
    28c4:	1f 93       	push	r17
    28c6:	cf 93       	push	r28
    28c8:	df 93       	push	r29
    28ca:	7c 01       	movw	r14, r24
    28cc:	86 2f       	mov	r24, r22
    28ce:	8a 01       	movw	r16, r20
    28d0:	0e 94 88 11 	call	0x2310	; 0x2310 <_ZL7spiSendh>
    28d4:	c0 e0       	ldi	r28, 0x00	; 0
    28d6:	d0 e0       	ldi	r29, 0x00	; 0
    28d8:	c1 15       	cp	r28, r1
    28da:	82 e0       	ldi	r24, 0x02	; 2
    28dc:	d8 07       	cpc	r29, r24
    28de:	40 f4       	brcc	.+16     	; 0x28f0 <_ZN7Sd2Card9writeDataEhPKh+0x32>
    28e0:	f8 01       	movw	r30, r16
    28e2:	ec 0f       	add	r30, r28
    28e4:	fd 1f       	adc	r31, r29
    28e6:	80 81       	ld	r24, Z
    28e8:	0e 94 88 11 	call	0x2310	; 0x2310 <_ZL7spiSendh>
    28ec:	21 96       	adiw	r28, 0x01	; 1
    28ee:	f4 cf       	rjmp	.-24     	; 0x28d8 <_ZN7Sd2Card9writeDataEhPKh+0x1a>
    28f0:	8f ef       	ldi	r24, 0xFF	; 255
    28f2:	0e 94 88 11 	call	0x2310	; 0x2310 <_ZL7spiSendh>
    28f6:	8f ef       	ldi	r24, 0xFF	; 255
    28f8:	0e 94 88 11 	call	0x2310	; 0x2310 <_ZL7spiSendh>
    28fc:	0e 94 8f 11 	call	0x231e	; 0x231e <_ZL6spiRecv>
    2900:	f7 01       	movw	r30, r14
    2902:	82 87       	std	Z+10, r24	; 0x0a
    2904:	8f 71       	andi	r24, 0x1F	; 31
    2906:	85 30       	cpi	r24, 0x05	; 5
    2908:	39 f0       	breq	.+14     	; 0x2918 <_ZN7Sd2Card9writeDataEhPKh+0x5a>
    290a:	81 e1       	ldi	r24, 0x11	; 17
    290c:	85 83       	std	Z+5, r24	; 0x05
    290e:	c7 01       	movw	r24, r14
    2910:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7Sd2Card14chipSelectHighEv>
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	01 c0       	rjmp	.+2      	; 0x291a <_ZN7Sd2Card9writeDataEhPKh+0x5c>
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	df 91       	pop	r29
    291c:	cf 91       	pop	r28
    291e:	1f 91       	pop	r17
    2920:	0f 91       	pop	r16
    2922:	ff 90       	pop	r15
    2924:	ef 90       	pop	r14
    2926:	08 95       	ret

00002928 <_ZN7Sd2Card10writeBlockEmPKhh>:
    2928:	ef 92       	push	r14
    292a:	ff 92       	push	r15
    292c:	0f 93       	push	r16
    292e:	cf 93       	push	r28
    2930:	df 93       	push	r29
    2932:	ec 01       	movw	r28, r24
    2934:	79 01       	movw	r14, r18
    2936:	41 15       	cp	r20, r1
    2938:	51 05       	cpc	r21, r1
    293a:	61 05       	cpc	r22, r1
    293c:	71 05       	cpc	r23, r1
    293e:	19 f4       	brne	.+6      	; 0x2946 <_ZN7Sd2Card10writeBlockEmPKhh+0x1e>
    2940:	82 e1       	ldi	r24, 0x12	; 18
    2942:	8d 83       	std	Y+5, r24	; 0x05
    2944:	45 c0       	rjmp	.+138    	; 0x29d0 <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    2946:	8b 85       	ldd	r24, Y+11	; 0x0b
    2948:	83 30       	cpi	r24, 0x03	; 3
    294a:	49 f0       	breq	.+18     	; 0x295e <_ZN7Sd2Card10writeBlockEmPKhh+0x36>
    294c:	03 2e       	mov	r0, r19
    294e:	39 e0       	ldi	r19, 0x09	; 9
    2950:	44 0f       	add	r20, r20
    2952:	55 1f       	adc	r21, r21
    2954:	66 1f       	adc	r22, r22
    2956:	77 1f       	adc	r23, r23
    2958:	3a 95       	dec	r19
    295a:	d1 f7       	brne	.-12     	; 0x2950 <_ZN7Sd2Card10writeBlockEmPKhh+0x28>
    295c:	30 2d       	mov	r19, r0
    295e:	9a 01       	movw	r18, r20
    2960:	ab 01       	movw	r20, r22
    2962:	68 e1       	ldi	r22, 0x18	; 24
    2964:	ce 01       	movw	r24, r28
    2966:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZN7Sd2Card11cardCommandEhm>
    296a:	88 23       	and	r24, r24
    296c:	19 f0       	breq	.+6      	; 0x2974 <_ZN7Sd2Card10writeBlockEmPKhh+0x4c>
    296e:	84 e0       	ldi	r24, 0x04	; 4
    2970:	8d 83       	std	Y+5, r24	; 0x05
    2972:	2e c0       	rjmp	.+92     	; 0x29d0 <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    2974:	a7 01       	movw	r20, r14
    2976:	6e ef       	ldi	r22, 0xFE	; 254
    2978:	ce 01       	movw	r24, r28
    297a:	0e 94 5f 14 	call	0x28be	; 0x28be <_ZN7Sd2Card9writeDataEhPKh>
    297e:	88 23       	and	r24, r24
    2980:	39 f1       	breq	.+78     	; 0x29d0 <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    2982:	00 23       	and	r16, r16
    2984:	01 f1       	breq	.+64     	; 0x29c6 <_ZN7Sd2Card10writeBlockEmPKhh+0x9e>
    2986:	68 e5       	ldi	r22, 0x58	; 88
    2988:	72 e0       	ldi	r23, 0x02	; 2
    298a:	ce 01       	movw	r24, r28
    298c:	0e 94 4a 12 	call	0x2494	; 0x2494 <_ZN7Sd2Card11waitNotBusyEj>
    2990:	81 11       	cpse	r24, r1
    2992:	03 c0       	rjmp	.+6      	; 0x299a <_ZN7Sd2Card10writeBlockEmPKhh+0x72>
    2994:	85 e1       	ldi	r24, 0x15	; 21
    2996:	8d 83       	std	Y+5, r24	; 0x05
    2998:	1b c0       	rjmp	.+54     	; 0x29d0 <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	a9 01       	movw	r20, r18
    29a0:	6d e0       	ldi	r22, 0x0D	; 13
    29a2:	ce 01       	movw	r24, r28
    29a4:	0e 94 65 12 	call	0x24ca	; 0x24ca <_ZN7Sd2Card11cardCommandEhm>
    29a8:	81 11       	cpse	r24, r1
    29aa:	05 c0       	rjmp	.+10     	; 0x29b6 <_ZN7Sd2Card10writeBlockEmPKhh+0x8e>
    29ac:	0e 94 8f 11 	call	0x231e	; 0x231e <_ZL6spiRecv>
    29b0:	81 11       	cpse	r24, r1
    29b2:	03 c0       	rjmp	.+6      	; 0x29ba <_ZN7Sd2Card10writeBlockEmPKhh+0x92>
    29b4:	03 c0       	rjmp	.+6      	; 0x29bc <_ZN7Sd2Card10writeBlockEmPKhh+0x94>
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	01 c0       	rjmp	.+2      	; 0x29bc <_ZN7Sd2Card10writeBlockEmPKhh+0x94>
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	88 23       	and	r24, r24
    29be:	19 f0       	breq	.+6      	; 0x29c6 <_ZN7Sd2Card10writeBlockEmPKhh+0x9e>
    29c0:	84 e1       	ldi	r24, 0x14	; 20
    29c2:	8d 83       	std	Y+5, r24	; 0x05
    29c4:	05 c0       	rjmp	.+10     	; 0x29d0 <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    29c6:	ce 01       	movw	r24, r28
    29c8:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7Sd2Card14chipSelectHighEv>
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	04 c0       	rjmp	.+8      	; 0x29d8 <_ZN7Sd2Card10writeBlockEmPKhh+0xb0>
    29d0:	ce 01       	movw	r24, r28
    29d2:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7Sd2Card14chipSelectHighEv>
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	df 91       	pop	r29
    29da:	cf 91       	pop	r28
    29dc:	0f 91       	pop	r16
    29de:	ff 90       	pop	r15
    29e0:	ef 90       	pop	r14
    29e2:	08 95       	ret

000029e4 <_ZN7Sd2Card6isBusyEv>:
/** Check if the SD card is busy

  \return The value one, true, is returned when is busy and
   the value zero, false, is returned for when is NOT busy.
*/
uint8_t Sd2Card::isBusy(void) {
    29e4:	1f 93       	push	r17
    29e6:	cf 93       	push	r28
    29e8:	df 93       	push	r29
    29ea:	ec 01       	movw	r28, r24
  chipSelectLow();
    29ec:	0e 94 c0 11 	call	0x2380	; 0x2380 <_ZN7Sd2Card13chipSelectLowEv>
  byte b = spiRec();
    29f0:	0e 94 8f 11 	call	0x231e	; 0x231e <_ZL6spiRecv>
    29f4:	18 2f       	mov	r17, r24
  chipSelectHigh();
    29f6:	ce 01       	movw	r24, r28
    29f8:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7Sd2Card14chipSelectHighEv>

  return (b != 0XFF);
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	1f 3f       	cpi	r17, 0xFF	; 255
    2a00:	09 f4       	brne	.+2      	; 0x2a04 <_ZN7Sd2Card6isBusyEv+0x20>
    2a02:	80 e0       	ldi	r24, 0x00	; 0
}
    2a04:	df 91       	pop	r29
    2a06:	cf 91       	pop	r28
    2a08:	1f 91       	pop	r17
    2a0a:	08 95       	ret

00002a0c <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    2a0c:	6f ef       	ldi	r22, 0xFF	; 255
    2a0e:	7f ef       	ldi	r23, 0xFF	; 255
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	0e 94 97 11 	call	0x232e	; 0x232e <_Z41__static_initialization_and_destruction_0ii>
    2a18:	08 95       	ret

00002a1a <_ZN6SdFile10addClusterEv>:
  // don't try to delete root
  if (isRoot()) {
    return true;
  }
  return rmDir();
}
    2a1a:	cf 93       	push	r28
    2a1c:	df 93       	push	r29
    2a1e:	ec 01       	movw	r28, r24
    2a20:	9c 01       	movw	r18, r24
    2a22:	2a 5f       	subi	r18, 0xFA	; 250
    2a24:	3f 4f       	sbci	r19, 0xFF	; 255
    2a26:	41 e0       	ldi	r20, 0x01	; 1
    2a28:	50 e0       	ldi	r21, 0x00	; 0
    2a2a:	60 e0       	ldi	r22, 0x00	; 0
    2a2c:	70 e0       	ldi	r23, 0x00	; 0
    2a2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a32:	0e 94 14 20 	call	0x4028	; 0x4028 <_ZN8SdVolume15allocContiguousEmPm>
    2a36:	88 23       	and	r24, r24
    2a38:	b9 f0       	breq	.+46     	; 0x2a68 <_ZN6SdFile10addClusterEv+0x4e>
    2a3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a3e:	a9 8d       	ldd	r26, Y+25	; 0x19
    2a40:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2a42:	89 2b       	or	r24, r25
    2a44:	8a 2b       	or	r24, r26
    2a46:	8b 2b       	or	r24, r27
    2a48:	59 f4       	brne	.+22     	; 0x2a60 <_ZN6SdFile10addClusterEv+0x46>
    2a4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a4c:	9f 81       	ldd	r25, Y+7	; 0x07
    2a4e:	a8 85       	ldd	r26, Y+8	; 0x08
    2a50:	b9 85       	ldd	r27, Y+9	; 0x09
    2a52:	8f 8b       	std	Y+23, r24	; 0x17
    2a54:	98 8f       	std	Y+24, r25	; 0x18
    2a56:	a9 8f       	std	Y+25, r26	; 0x19
    2a58:	ba 8f       	std	Y+26, r27	; 0x1a
    2a5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a5c:	80 68       	ori	r24, 0x80	; 128
    2a5e:	8c 83       	std	Y+4, r24	; 0x04
    2a60:	8c 81       	ldd	r24, Y+4	; 0x04
    2a62:	80 62       	ori	r24, 0x20	; 32
    2a64:	8c 83       	std	Y+4, r24	; 0x04
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	df 91       	pop	r29
    2a6a:	cf 91       	pop	r28
    2a6c:	08 95       	ret

00002a6e <_ZN6SdFile13addDirClusterEv>:
    2a6e:	cf 92       	push	r12
    2a70:	df 92       	push	r13
    2a72:	ef 92       	push	r14
    2a74:	ff 92       	push	r15
    2a76:	0f 93       	push	r16
    2a78:	1f 93       	push	r17
    2a7a:	cf 93       	push	r28
    2a7c:	8c 01       	movw	r16, r24
    2a7e:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <_ZN6SdFile10addClusterEv>
    2a82:	88 23       	and	r24, r24
    2a84:	09 f4       	brne	.+2      	; 0x2a88 <_ZN6SdFile13addDirClusterEv+0x1a>
    2a86:	54 c0       	rjmp	.+168    	; 0x2b30 <_ZN6SdFile13addDirClusterEv+0xc2>
    2a88:	d8 01       	movw	r26, r16
    2a8a:	16 96       	adiw	r26, 0x06	; 6
    2a8c:	cd 90       	ld	r12, X+
    2a8e:	dd 90       	ld	r13, X+
    2a90:	ed 90       	ld	r14, X+
    2a92:	fc 90       	ld	r15, X
    2a94:	19 97       	sbiw	r26, 0x09	; 9
    2a96:	5b 96       	adiw	r26, 0x1b	; 27
    2a98:	ed 91       	ld	r30, X+
    2a9a:	fc 91       	ld	r31, X
    2a9c:	5c 97       	sbiw	r26, 0x1c	; 28
    2a9e:	86 85       	ldd	r24, Z+14	; 0x0e
    2aa0:	97 85       	ldd	r25, Z+15	; 0x0f
    2aa2:	a0 89       	ldd	r26, Z+16	; 0x10
    2aa4:	b1 89       	ldd	r27, Z+17	; 0x11
    2aa6:	22 e0       	ldi	r18, 0x02	; 2
    2aa8:	c2 1a       	sub	r12, r18
    2aaa:	d1 08       	sbc	r13, r1
    2aac:	e1 08       	sbc	r14, r1
    2aae:	f1 08       	sbc	r15, r1
    2ab0:	05 84       	ldd	r0, Z+13	; 0x0d
    2ab2:	04 c0       	rjmp	.+8      	; 0x2abc <_ZN6SdFile13addDirClusterEv+0x4e>
    2ab4:	cc 0c       	add	r12, r12
    2ab6:	dd 1c       	adc	r13, r13
    2ab8:	ee 1c       	adc	r14, r14
    2aba:	ff 1c       	adc	r15, r15
    2abc:	0a 94       	dec	r0
    2abe:	d2 f7       	brpl	.-12     	; 0x2ab4 <_ZN6SdFile13addDirClusterEv+0x46>
    2ac0:	c8 0e       	add	r12, r24
    2ac2:	d9 1e       	adc	r13, r25
    2ac4:	ea 1e       	adc	r14, r26
    2ac6:	fb 1e       	adc	r15, r27
    2ac8:	c4 81       	ldd	r28, Z+4	; 0x04
    2aca:	cc 23       	and	r28, r28
    2acc:	91 f0       	breq	.+36     	; 0x2af2 <_ZN6SdFile13addDirClusterEv+0x84>
    2ace:	d7 01       	movw	r26, r14
    2ad0:	c6 01       	movw	r24, r12
    2ad2:	8c 0f       	add	r24, r28
    2ad4:	91 1d       	adc	r25, r1
    2ad6:	a1 1d       	adc	r26, r1
    2ad8:	b1 1d       	adc	r27, r1
    2ada:	bc 01       	movw	r22, r24
    2adc:	cd 01       	movw	r24, r26
    2ade:	61 50       	subi	r22, 0x01	; 1
    2ae0:	71 09       	sbc	r23, r1
    2ae2:	81 09       	sbc	r24, r1
    2ae4:	91 09       	sbc	r25, r1
    2ae6:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <_ZN8SdVolume14cacheZeroBlockEm>
    2aea:	88 23       	and	r24, r24
    2aec:	09 f1       	breq	.+66     	; 0x2b30 <_ZN6SdFile13addDirClusterEv+0xc2>
    2aee:	c1 50       	subi	r28, 0x01	; 1
    2af0:	ec cf       	rjmp	.-40     	; 0x2aca <_ZN6SdFile13addDirClusterEv+0x5c>
    2af2:	d8 01       	movw	r26, r16
    2af4:	5b 96       	adiw	r26, 0x1b	; 27
    2af6:	ed 91       	ld	r30, X+
    2af8:	fc 91       	ld	r31, X
    2afa:	5c 97       	sbiw	r26, 0x1c	; 28
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	92 e0       	ldi	r25, 0x02	; 2
    2b00:	a0 e0       	ldi	r26, 0x00	; 0
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	05 84       	ldd	r0, Z+13	; 0x0d
    2b06:	04 c0       	rjmp	.+8      	; 0x2b10 <_ZN6SdFile13addDirClusterEv+0xa2>
    2b08:	88 0f       	add	r24, r24
    2b0a:	99 1f       	adc	r25, r25
    2b0c:	aa 1f       	adc	r26, r26
    2b0e:	bb 1f       	adc	r27, r27
    2b10:	0a 94       	dec	r0
    2b12:	d2 f7       	brpl	.-12     	; 0x2b08 <_ZN6SdFile13addDirClusterEv+0x9a>
    2b14:	f8 01       	movw	r30, r16
    2b16:	43 89       	ldd	r20, Z+19	; 0x13
    2b18:	54 89       	ldd	r21, Z+20	; 0x14
    2b1a:	65 89       	ldd	r22, Z+21	; 0x15
    2b1c:	76 89       	ldd	r23, Z+22	; 0x16
    2b1e:	84 0f       	add	r24, r20
    2b20:	95 1f       	adc	r25, r21
    2b22:	a6 1f       	adc	r26, r22
    2b24:	b7 1f       	adc	r27, r23
    2b26:	83 8b       	std	Z+19, r24	; 0x13
    2b28:	94 8b       	std	Z+20, r25	; 0x14
    2b2a:	a5 8b       	std	Z+21, r26	; 0x15
    2b2c:	b6 8b       	std	Z+22, r27	; 0x16
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	cf 91       	pop	r28
    2b32:	1f 91       	pop	r17
    2b34:	0f 91       	pop	r16
    2b36:	ff 90       	pop	r15
    2b38:	ef 90       	pop	r14
    2b3a:	df 90       	pop	r13
    2b3c:	cf 90       	pop	r12
    2b3e:	08 95       	ret

00002b40 <_ZN6SdFile13cacheDirEntryEh>:
    2b40:	cf 93       	push	r28
    2b42:	df 93       	push	r29
    2b44:	ec 01       	movw	r28, r24
    2b46:	46 2f       	mov	r20, r22
    2b48:	6e 85       	ldd	r22, Y+14	; 0x0e
    2b4a:	7f 85       	ldd	r23, Y+15	; 0x0f
    2b4c:	88 89       	ldd	r24, Y+16	; 0x10
    2b4e:	99 89       	ldd	r25, Y+17	; 0x11
    2b50:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <_ZN8SdVolume13cacheRawBlockEmh>
    2b54:	88 23       	and	r24, r24
    2b56:	41 f0       	breq	.+16     	; 0x2b68 <_ZN6SdFile13cacheDirEntryEh+0x28>
    2b58:	8a 89       	ldd	r24, Y+18	; 0x12
    2b5a:	20 e2       	ldi	r18, 0x20	; 32
    2b5c:	82 9f       	mul	r24, r18
    2b5e:	c0 01       	movw	r24, r0
    2b60:	11 24       	eor	r1, r1
    2b62:	8f 5a       	subi	r24, 0xAF	; 175
    2b64:	9b 4f       	sbci	r25, 0xFB	; 251
    2b66:	02 c0       	rjmp	.+4      	; 0x2b6c <_ZN6SdFile13cacheDirEntryEh+0x2c>
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	df 91       	pop	r29
    2b6e:	cf 91       	pop	r28
    2b70:	08 95       	ret

00002b72 <_ZN6SdFile10make83NameEPKcPh>:
    2b72:	cf 93       	push	r28
    2b74:	df 93       	push	r29
    2b76:	dc 01       	movw	r26, r24
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	9b 30       	cpi	r25, 0x0B	; 11
    2b7c:	48 f4       	brcc	.+18     	; 0x2b90 <_ZN6SdFile10make83NameEPKcPh+0x1e>
    2b7e:	fb 01       	movw	r30, r22
    2b80:	e9 0f       	add	r30, r25
    2b82:	f1 1d       	adc	r31, r1
    2b84:	20 e2       	ldi	r18, 0x20	; 32
    2b86:	20 83       	st	Z, r18
    2b88:	9f 5f       	subi	r25, 0xFF	; 255
    2b8a:	f7 cf       	rjmp	.-18     	; 0x2b7a <_ZN6SdFile10make83NameEPKcPh+0x8>
    2b8c:	de 01       	movw	r26, r28
    2b8e:	02 c0       	rjmp	.+4      	; 0x2b94 <_ZN6SdFile10make83NameEPKcPh+0x22>
    2b90:	40 e0       	ldi	r20, 0x00	; 0
    2b92:	57 e0       	ldi	r21, 0x07	; 7
    2b94:	ed 01       	movw	r28, r26
    2b96:	21 96       	adiw	r28, 0x01	; 1
    2b98:	9c 91       	ld	r25, X
    2b9a:	99 23       	and	r25, r25
    2b9c:	31 f1       	breq	.+76     	; 0x2bea <_ZN6SdFile10make83NameEPKcPh+0x78>
    2b9e:	9e 32       	cpi	r25, 0x2E	; 46
    2ba0:	29 f4       	brne	.+10     	; 0x2bac <_ZN6SdFile10make83NameEPKcPh+0x3a>
    2ba2:	5a 30       	cpi	r21, 0x0A	; 10
    2ba4:	49 f1       	breq	.+82     	; 0x2bf8 <_ZN6SdFile10make83NameEPKcPh+0x86>
    2ba6:	48 e0       	ldi	r20, 0x08	; 8
    2ba8:	5a e0       	ldi	r21, 0x0A	; 10
    2baa:	f0 cf       	rjmp	.-32     	; 0x2b8c <_ZN6SdFile10make83NameEPKcPh+0x1a>
    2bac:	eb e4       	ldi	r30, 0x4B	; 75
    2bae:	f2 e0       	ldi	r31, 0x02	; 2
    2bb0:	9f 01       	movw	r18, r30
    2bb2:	2f 5f       	subi	r18, 0xFF	; 255
    2bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb6:	84 91       	lpm	r24, Z
    2bb8:	88 23       	and	r24, r24
    2bba:	21 f0       	breq	.+8      	; 0x2bc4 <_ZN6SdFile10make83NameEPKcPh+0x52>
    2bbc:	f9 01       	movw	r30, r18
    2bbe:	98 13       	cpse	r25, r24
    2bc0:	f7 cf       	rjmp	.-18     	; 0x2bb0 <_ZN6SdFile10make83NameEPKcPh+0x3e>
    2bc2:	1c c0       	rjmp	.+56     	; 0x2bfc <_ZN6SdFile10make83NameEPKcPh+0x8a>
    2bc4:	54 17       	cp	r21, r20
    2bc6:	e0 f0       	brcs	.+56     	; 0x2c00 <_ZN6SdFile10make83NameEPKcPh+0x8e>
    2bc8:	91 32       	cpi	r25, 0x21	; 33
    2bca:	e0 f0       	brcs	.+56     	; 0x2c04 <_ZN6SdFile10make83NameEPKcPh+0x92>
    2bcc:	9f 37       	cpi	r25, 0x7F	; 127
    2bce:	e0 f4       	brcc	.+56     	; 0x2c08 <_ZN6SdFile10make83NameEPKcPh+0x96>
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	84 0f       	add	r24, r20
    2bd4:	fb 01       	movw	r30, r22
    2bd6:	e4 0f       	add	r30, r20
    2bd8:	f1 1d       	adc	r31, r1
    2bda:	2f e9       	ldi	r18, 0x9F	; 159
    2bdc:	29 0f       	add	r18, r25
    2bde:	2a 31       	cpi	r18, 0x1A	; 26
    2be0:	08 f4       	brcc	.+2      	; 0x2be4 <_ZN6SdFile10make83NameEPKcPh+0x72>
    2be2:	90 52       	subi	r25, 0x20	; 32
    2be4:	90 83       	st	Z, r25
    2be6:	48 2f       	mov	r20, r24
    2be8:	d1 cf       	rjmp	.-94     	; 0x2b8c <_ZN6SdFile10make83NameEPKcPh+0x1a>
    2bea:	fb 01       	movw	r30, r22
    2bec:	90 81       	ld	r25, Z
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	90 32       	cpi	r25, 0x20	; 32
    2bf2:	59 f4       	brne	.+22     	; 0x2c0a <_ZN6SdFile10make83NameEPKcPh+0x98>
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	09 c0       	rjmp	.+18     	; 0x2c0a <_ZN6SdFile10make83NameEPKcPh+0x98>
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	07 c0       	rjmp	.+14     	; 0x2c0a <_ZN6SdFile10make83NameEPKcPh+0x98>
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	05 c0       	rjmp	.+10     	; 0x2c0a <_ZN6SdFile10make83NameEPKcPh+0x98>
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	03 c0       	rjmp	.+6      	; 0x2c0a <_ZN6SdFile10make83NameEPKcPh+0x98>
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	01 c0       	rjmp	.+2      	; 0x2c0a <_ZN6SdFile10make83NameEPKcPh+0x98>
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	df 91       	pop	r29
    2c0c:	cf 91       	pop	r28
    2c0e:	08 95       	ret

00002c10 <_ZN6SdFile8openRootEP8SdVolume>:
    2c10:	0f 93       	push	r16
    2c12:	1f 93       	push	r17
    2c14:	cf 93       	push	r28
    2c16:	df 93       	push	r29
    2c18:	ec 01       	movw	r28, r24
    2c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1c:	81 11       	cpse	r24, r1
    2c1e:	4f c0       	rjmp	.+158    	; 0x2cbe <_ZN6SdFile8openRootEP8SdVolume+0xae>
    2c20:	8b 01       	movw	r16, r22
    2c22:	fb 01       	movw	r30, r22
    2c24:	97 89       	ldd	r25, Z+23	; 0x17
    2c26:	90 31       	cpi	r25, 0x10	; 16
    2c28:	19 f5       	brne	.+70     	; 0x2c70 <_ZN6SdFile8openRootEP8SdVolume+0x60>
    2c2a:	82 e0       	ldi	r24, 0x02	; 2
    2c2c:	8d 83       	std	Y+5, r24	; 0x05
    2c2e:	1f 8a       	std	Y+23, r1	; 0x17
    2c30:	18 8e       	std	Y+24, r1	; 0x18
    2c32:	19 8e       	std	Y+25, r1	; 0x19
    2c34:	1a 8e       	std	Y+26, r1	; 0x1a
    2c36:	80 8d       	ldd	r24, Z+24	; 0x18
    2c38:	91 8d       	ldd	r25, Z+25	; 0x19
    2c3a:	a0 e0       	ldi	r26, 0x00	; 0
    2c3c:	b0 e0       	ldi	r27, 0x00	; 0
    2c3e:	88 0f       	add	r24, r24
    2c40:	99 1f       	adc	r25, r25
    2c42:	aa 1f       	adc	r26, r26
    2c44:	bb 1f       	adc	r27, r27
    2c46:	88 0f       	add	r24, r24
    2c48:	99 1f       	adc	r25, r25
    2c4a:	aa 1f       	adc	r26, r26
    2c4c:	bb 1f       	adc	r27, r27
    2c4e:	88 0f       	add	r24, r24
    2c50:	99 1f       	adc	r25, r25
    2c52:	aa 1f       	adc	r26, r26
    2c54:	bb 1f       	adc	r27, r27
    2c56:	88 0f       	add	r24, r24
    2c58:	99 1f       	adc	r25, r25
    2c5a:	aa 1f       	adc	r26, r26
    2c5c:	bb 1f       	adc	r27, r27
    2c5e:	88 0f       	add	r24, r24
    2c60:	99 1f       	adc	r25, r25
    2c62:	aa 1f       	adc	r26, r26
    2c64:	bb 1f       	adc	r27, r27
    2c66:	8b 8b       	std	Y+19, r24	; 0x13
    2c68:	9c 8b       	std	Y+20, r25	; 0x14
    2c6a:	ad 8b       	std	Y+21, r26	; 0x15
    2c6c:	be 8b       	std	Y+22, r27	; 0x16
    2c6e:	15 c0       	rjmp	.+42     	; 0x2c9a <_ZN6SdFile8openRootEP8SdVolume+0x8a>
    2c70:	90 32       	cpi	r25, 0x20	; 32
    2c72:	31 f5       	brne	.+76     	; 0x2cc0 <_ZN6SdFile8openRootEP8SdVolume+0xb0>
    2c74:	83 e0       	ldi	r24, 0x03	; 3
    2c76:	8d 83       	std	Y+5, r24	; 0x05
    2c78:	fb 01       	movw	r30, r22
    2c7a:	42 8d       	ldd	r20, Z+26	; 0x1a
    2c7c:	53 8d       	ldd	r21, Z+27	; 0x1b
    2c7e:	64 8d       	ldd	r22, Z+28	; 0x1c
    2c80:	75 8d       	ldd	r23, Z+29	; 0x1d
    2c82:	4f 8b       	std	Y+23, r20	; 0x17
    2c84:	58 8f       	std	Y+24, r21	; 0x18
    2c86:	69 8f       	std	Y+25, r22	; 0x19
    2c88:	7a 8f       	std	Y+26, r23	; 0x1a
    2c8a:	9e 01       	movw	r18, r28
    2c8c:	2d 5e       	subi	r18, 0xED	; 237
    2c8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c90:	c8 01       	movw	r24, r16
    2c92:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <_ZNK8SdVolume9chainSizeEmPm>
    2c96:	88 23       	and	r24, r24
    2c98:	99 f0       	breq	.+38     	; 0x2cc0 <_ZN6SdFile8openRootEP8SdVolume+0xb0>
    2c9a:	1c 8f       	std	Y+28, r17	; 0x1c
    2c9c:	0b 8f       	std	Y+27, r16	; 0x1b
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	8c 83       	std	Y+4, r24	; 0x04
    2ca2:	1e 82       	std	Y+6, r1	; 0x06
    2ca4:	1f 82       	std	Y+7, r1	; 0x07
    2ca6:	18 86       	std	Y+8, r1	; 0x08
    2ca8:	19 86       	std	Y+9, r1	; 0x09
    2caa:	1a 86       	std	Y+10, r1	; 0x0a
    2cac:	1b 86       	std	Y+11, r1	; 0x0b
    2cae:	1c 86       	std	Y+12, r1	; 0x0c
    2cb0:	1d 86       	std	Y+13, r1	; 0x0d
    2cb2:	1e 86       	std	Y+14, r1	; 0x0e
    2cb4:	1f 86       	std	Y+15, r1	; 0x0f
    2cb6:	18 8a       	std	Y+16, r1	; 0x10
    2cb8:	19 8a       	std	Y+17, r1	; 0x11
    2cba:	1a 8a       	std	Y+18, r1	; 0x12
    2cbc:	01 c0       	rjmp	.+2      	; 0x2cc0 <_ZN6SdFile8openRootEP8SdVolume+0xb0>
    2cbe:	80 e0       	ldi	r24, 0x00	; 0
    2cc0:	df 91       	pop	r29
    2cc2:	cf 91       	pop	r28
    2cc4:	1f 91       	pop	r17
    2cc6:	0f 91       	pop	r16
    2cc8:	08 95       	ret

00002cca <_ZN6SdFile4readEPvj>:
    2cca:	3f 92       	push	r3
    2ccc:	4f 92       	push	r4
    2cce:	5f 92       	push	r5
    2cd0:	6f 92       	push	r6
    2cd2:	7f 92       	push	r7
    2cd4:	8f 92       	push	r8
    2cd6:	9f 92       	push	r9
    2cd8:	af 92       	push	r10
    2cda:	bf 92       	push	r11
    2cdc:	cf 92       	push	r12
    2cde:	df 92       	push	r13
    2ce0:	ef 92       	push	r14
    2ce2:	ff 92       	push	r15
    2ce4:	0f 93       	push	r16
    2ce6:	1f 93       	push	r17
    2ce8:	cf 93       	push	r28
    2cea:	df 93       	push	r29
    2cec:	00 d0       	rcall	.+0      	; 0x2cee <_ZN6SdFile4readEPvj+0x24>
    2cee:	00 d0       	rcall	.+0      	; 0x2cf0 <_ZN6SdFile4readEPvj+0x26>
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	4c 01       	movw	r8, r24
    2cf6:	6b 01       	movw	r12, r22
    2cf8:	5a 83       	std	Y+2, r21	; 0x02
    2cfa:	49 83       	std	Y+1, r20	; 0x01
    2cfc:	fc 01       	movw	r30, r24
    2cfe:	85 81       	ldd	r24, Z+5	; 0x05
    2d00:	88 23       	and	r24, r24
    2d02:	31 f0       	breq	.+12     	; 0x2d10 <_ZN6SdFile4readEPvj+0x46>
    2d04:	84 81       	ldd	r24, Z+4	; 0x04
    2d06:	80 fd       	sbrc	r24, 0
    2d08:	06 c0       	rjmp	.+12     	; 0x2d16 <_ZN6SdFile4readEPvj+0x4c>
    2d0a:	33 24       	eor	r3, r3
    2d0c:	33 94       	inc	r3
    2d0e:	04 c0       	rjmp	.+8      	; 0x2d18 <_ZN6SdFile4readEPvj+0x4e>
    2d10:	33 24       	eor	r3, r3
    2d12:	33 94       	inc	r3
    2d14:	01 c0       	rjmp	.+2      	; 0x2d18 <_ZN6SdFile4readEPvj+0x4e>
    2d16:	31 2c       	mov	r3, r1
    2d18:	31 10       	cpse	r3, r1
    2d1a:	05 c1       	rjmp	.+522    	; 0x2f26 <_ZN6SdFile4readEPvj+0x25c>
    2d1c:	09 81       	ldd	r16, Y+1	; 0x01
    2d1e:	1a 81       	ldd	r17, Y+2	; 0x02
    2d20:	c8 01       	movw	r24, r16
    2d22:	a0 e0       	ldi	r26, 0x00	; 0
    2d24:	b0 e0       	ldi	r27, 0x00	; 0
    2d26:	f4 01       	movw	r30, r8
    2d28:	03 89       	ldd	r16, Z+19	; 0x13
    2d2a:	14 89       	ldd	r17, Z+20	; 0x14
    2d2c:	25 89       	ldd	r18, Z+21	; 0x15
    2d2e:	36 89       	ldd	r19, Z+22	; 0x16
    2d30:	42 85       	ldd	r20, Z+10	; 0x0a
    2d32:	53 85       	ldd	r21, Z+11	; 0x0b
    2d34:	64 85       	ldd	r22, Z+12	; 0x0c
    2d36:	75 85       	ldd	r23, Z+13	; 0x0d
    2d38:	28 01       	movw	r4, r16
    2d3a:	39 01       	movw	r6, r18
    2d3c:	44 1a       	sub	r4, r20
    2d3e:	55 0a       	sbc	r5, r21
    2d40:	66 0a       	sbc	r6, r22
    2d42:	77 0a       	sbc	r7, r23
    2d44:	48 16       	cp	r4, r24
    2d46:	59 06       	cpc	r5, r25
    2d48:	6a 06       	cpc	r6, r26
    2d4a:	7b 06       	cpc	r7, r27
    2d4c:	28 f4       	brcc	.+10     	; 0x2d58 <_ZN6SdFile4readEPvj+0x8e>
    2d4e:	c8 01       	movw	r24, r16
    2d50:	84 1b       	sub	r24, r20
    2d52:	95 0b       	sbc	r25, r21
    2d54:	9a 83       	std	Y+2, r25	; 0x02
    2d56:	89 83       	std	Y+1, r24	; 0x01
    2d58:	69 80       	ldd	r6, Y+1	; 0x01
    2d5a:	7a 80       	ldd	r7, Y+2	; 0x02
    2d5c:	61 14       	cp	r6, r1
    2d5e:	71 04       	cpc	r7, r1
    2d60:	09 f4       	brne	.+2      	; 0x2d64 <_ZN6SdFile4readEPvj+0x9a>
    2d62:	de c0       	rjmp	.+444    	; 0x2f20 <_ZN6SdFile4readEPvj+0x256>
    2d64:	f4 01       	movw	r30, r8
    2d66:	82 85       	ldd	r24, Z+10	; 0x0a
    2d68:	93 85       	ldd	r25, Z+11	; 0x0b
    2d6a:	a4 85       	ldd	r26, Z+12	; 0x0c
    2d6c:	b5 85       	ldd	r27, Z+13	; 0x0d
    2d6e:	2c 01       	movw	r4, r24
    2d70:	f1 e0       	ldi	r31, 0x01	; 1
    2d72:	5f 22       	and	r5, r31
    2d74:	f4 01       	movw	r30, r8
    2d76:	25 81       	ldd	r18, Z+5	; 0x05
    2d78:	22 30       	cpi	r18, 0x02	; 2
    2d7a:	c9 f4       	brne	.+50     	; 0x2dae <_ZN6SdFile4readEPvj+0xe4>
    2d7c:	23 8d       	ldd	r18, Z+27	; 0x1b
    2d7e:	34 8d       	ldd	r19, Z+28	; 0x1c
    2d80:	f9 01       	movw	r30, r18
    2d82:	42 8d       	ldd	r20, Z+26	; 0x1a
    2d84:	53 8d       	ldd	r21, Z+27	; 0x1b
    2d86:	64 8d       	ldd	r22, Z+28	; 0x1c
    2d88:	75 8d       	ldd	r23, Z+29	; 0x1d
    2d8a:	07 2e       	mov	r0, r23
    2d8c:	79 e0       	ldi	r23, 0x09	; 9
    2d8e:	b6 95       	lsr	r27
    2d90:	a7 95       	ror	r26
    2d92:	97 95       	ror	r25
    2d94:	87 95       	ror	r24
    2d96:	7a 95       	dec	r23
    2d98:	d1 f7       	brne	.-12     	; 0x2d8e <_ZN6SdFile4readEPvj+0xc4>
    2d9a:	70 2d       	mov	r23, r0
    2d9c:	8a 01       	movw	r16, r20
    2d9e:	9b 01       	movw	r18, r22
    2da0:	08 0f       	add	r16, r24
    2da2:	19 1f       	adc	r17, r25
    2da4:	2a 1f       	adc	r18, r26
    2da6:	3b 1f       	adc	r19, r27
    2da8:	c9 01       	movw	r24, r18
    2daa:	b8 01       	movw	r22, r16
    2dac:	54 c0       	rjmp	.+168    	; 0x2e56 <_ZN6SdFile4readEPvj+0x18c>
    2dae:	f4 01       	movw	r30, r8
    2db0:	03 8d       	ldd	r16, Z+27	; 0x1b
    2db2:	14 8d       	ldd	r17, Z+28	; 0x1c
    2db4:	f8 01       	movw	r30, r16
    2db6:	b4 80       	ldd	r11, Z+4	; 0x04
    2db8:	ba 94       	dec	r11
    2dba:	ac 01       	movw	r20, r24
    2dbc:	bd 01       	movw	r22, r26
    2dbe:	03 2e       	mov	r0, r19
    2dc0:	39 e0       	ldi	r19, 0x09	; 9
    2dc2:	76 95       	lsr	r23
    2dc4:	67 95       	ror	r22
    2dc6:	57 95       	ror	r21
    2dc8:	47 95       	ror	r20
    2dca:	3a 95       	dec	r19
    2dcc:	d1 f7       	brne	.-12     	; 0x2dc2 <_ZN6SdFile4readEPvj+0xf8>
    2dce:	30 2d       	mov	r19, r0
    2dd0:	b4 22       	and	r11, r20
    2dd2:	41 14       	cp	r4, r1
    2dd4:	51 04       	cpc	r5, r1
    2dd6:	f1 f4       	brne	.+60     	; 0x2e14 <_ZN6SdFile4readEPvj+0x14a>
    2dd8:	b1 10       	cpse	r11, r1
    2dda:	1c c0       	rjmp	.+56     	; 0x2e14 <_ZN6SdFile4readEPvj+0x14a>
    2ddc:	89 2b       	or	r24, r25
    2dde:	8a 2b       	or	r24, r26
    2de0:	8b 2b       	or	r24, r27
    2de2:	51 f4       	brne	.+20     	; 0x2df8 <_ZN6SdFile4readEPvj+0x12e>
    2de4:	f4 01       	movw	r30, r8
    2de6:	87 89       	ldd	r24, Z+23	; 0x17
    2de8:	90 8d       	ldd	r25, Z+24	; 0x18
    2dea:	a1 8d       	ldd	r26, Z+25	; 0x19
    2dec:	b2 8d       	ldd	r27, Z+26	; 0x1a
    2dee:	86 83       	std	Z+6, r24	; 0x06
    2df0:	97 83       	std	Z+7, r25	; 0x07
    2df2:	a0 87       	std	Z+8, r26	; 0x08
    2df4:	b1 87       	std	Z+9, r27	; 0x09
    2df6:	0e c0       	rjmp	.+28     	; 0x2e14 <_ZN6SdFile4readEPvj+0x14a>
    2df8:	f4 01       	movw	r30, r8
    2dfa:	46 81       	ldd	r20, Z+6	; 0x06
    2dfc:	57 81       	ldd	r21, Z+7	; 0x07
    2dfe:	60 85       	ldd	r22, Z+8	; 0x08
    2e00:	71 85       	ldd	r23, Z+9	; 0x09
    2e02:	94 01       	movw	r18, r8
    2e04:	2a 5f       	subi	r18, 0xFA	; 250
    2e06:	3f 4f       	sbci	r19, 0xFF	; 255
    2e08:	c8 01       	movw	r24, r16
    2e0a:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <_ZNK8SdVolume6fatGetEmPm>
    2e0e:	88 23       	and	r24, r24
    2e10:	09 f4       	brne	.+2      	; 0x2e14 <_ZN6SdFile4readEPvj+0x14a>
    2e12:	8c c0       	rjmp	.+280    	; 0x2f2c <_ZN6SdFile4readEPvj+0x262>
    2e14:	f4 01       	movw	r30, r8
    2e16:	86 81       	ldd	r24, Z+6	; 0x06
    2e18:	97 81       	ldd	r25, Z+7	; 0x07
    2e1a:	a0 85       	ldd	r26, Z+8	; 0x08
    2e1c:	b1 85       	ldd	r27, Z+9	; 0x09
    2e1e:	23 8d       	ldd	r18, Z+27	; 0x1b
    2e20:	34 8d       	ldd	r19, Z+28	; 0x1c
    2e22:	f9 01       	movw	r30, r18
    2e24:	46 85       	ldd	r20, Z+14	; 0x0e
    2e26:	57 85       	ldd	r21, Z+15	; 0x0f
    2e28:	60 89       	ldd	r22, Z+16	; 0x10
    2e2a:	71 89       	ldd	r23, Z+17	; 0x11
    2e2c:	02 97       	sbiw	r24, 0x02	; 2
    2e2e:	a1 09       	sbc	r26, r1
    2e30:	b1 09       	sbc	r27, r1
    2e32:	05 84       	ldd	r0, Z+13	; 0x0d
    2e34:	04 c0       	rjmp	.+8      	; 0x2e3e <_ZN6SdFile4readEPvj+0x174>
    2e36:	88 0f       	add	r24, r24
    2e38:	99 1f       	adc	r25, r25
    2e3a:	aa 1f       	adc	r26, r26
    2e3c:	bb 1f       	adc	r27, r27
    2e3e:	0a 94       	dec	r0
    2e40:	d2 f7       	brpl	.-12     	; 0x2e36 <_ZN6SdFile4readEPvj+0x16c>
    2e42:	84 0f       	add	r24, r20
    2e44:	95 1f       	adc	r25, r21
    2e46:	a6 1f       	adc	r26, r22
    2e48:	b7 1f       	adc	r27, r23
    2e4a:	bc 01       	movw	r22, r24
    2e4c:	cd 01       	movw	r24, r26
    2e4e:	6b 0d       	add	r22, r11
    2e50:	71 1d       	adc	r23, r1
    2e52:	81 1d       	adc	r24, r1
    2e54:	91 1d       	adc	r25, r1
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	32 e0       	ldi	r19, 0x02	; 2
    2e5a:	59 01       	movw	r10, r18
    2e5c:	a4 18       	sub	r10, r4
    2e5e:	b5 08       	sbc	r11, r5
    2e60:	a6 14       	cp	r10, r6
    2e62:	b7 04       	cpc	r11, r7
    2e64:	08 f0       	brcs	.+2      	; 0x2e68 <_ZN6SdFile4readEPvj+0x19e>
    2e66:	53 01       	movw	r10, r6
    2e68:	f4 01       	movw	r30, r8
    2e6a:	24 81       	ldd	r18, Z+4	; 0x04
    2e6c:	26 fd       	sbrc	r18, 6
    2e6e:	04 c0       	rjmp	.+8      	; 0x2e78 <_ZN6SdFile4readEPvj+0x1ae>
    2e70:	a1 14       	cp	r10, r1
    2e72:	f2 e0       	ldi	r31, 0x02	; 2
    2e74:	bf 06       	cpc	r11, r31
    2e76:	79 f4       	brne	.+30     	; 0x2e96 <_ZN6SdFile4readEPvj+0x1cc>
    2e78:	00 91 0c 01 	lds	r16, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E>
    2e7c:	10 91 0d 01 	lds	r17, 0x010D	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2e80:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2e84:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2e88:	60 17       	cp	r22, r16
    2e8a:	71 07       	cpc	r23, r17
    2e8c:	82 07       	cpc	r24, r18
    2e8e:	93 07       	cpc	r25, r19
    2e90:	21 f4       	brne	.+8      	; 0x2e9a <_ZN6SdFile4readEPvj+0x1d0>
    2e92:	23 2d       	mov	r18, r3
    2e94:	03 c0       	rjmp	.+6      	; 0x2e9c <_ZN6SdFile4readEPvj+0x1d2>
    2e96:	23 2d       	mov	r18, r3
    2e98:	01 c0       	rjmp	.+2      	; 0x2e9c <_ZN6SdFile4readEPvj+0x1d2>
    2e9a:	21 e0       	ldi	r18, 0x01	; 1
    2e9c:	22 23       	and	r18, r18
    2e9e:	81 f0       	breq	.+32     	; 0x2ec0 <_ZN6SdFile4readEPvj+0x1f6>
    2ea0:	76 01       	movw	r14, r12
    2ea2:	85 01       	movw	r16, r10
    2ea4:	92 01       	movw	r18, r4
    2ea6:	ab 01       	movw	r20, r22
    2ea8:	bc 01       	movw	r22, r24
    2eaa:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <_ZN8SdVolume7sdCard_E>
    2eae:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <_ZN8SdVolume7sdCard_E+0x1>
    2eb2:	0e 94 c2 13 	call	0x2784	; 0x2784 <_ZN7Sd2Card8readDataEmjjPh>
    2eb6:	88 23       	and	r24, r24
    2eb8:	e1 f1       	breq	.+120    	; 0x2f32 <_ZN6SdFile4readEPvj+0x268>
    2eba:	ca 0c       	add	r12, r10
    2ebc:	db 1c       	adc	r13, r11
    2ebe:	20 c0       	rjmp	.+64     	; 0x2f00 <_ZN6SdFile4readEPvj+0x236>
    2ec0:	40 e0       	ldi	r20, 0x00	; 0
    2ec2:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <_ZN8SdVolume13cacheRawBlockEmh>
    2ec6:	88 23       	and	r24, r24
    2ec8:	b9 f1       	breq	.+110    	; 0x2f38 <_ZN6SdFile4readEPvj+0x26e>
    2eca:	82 01       	movw	r16, r4
    2ecc:	0f 5a       	subi	r16, 0xAF	; 175
    2ece:	1b 4f       	sbci	r17, 0xFB	; 251
    2ed0:	1c 83       	std	Y+4, r17	; 0x04
    2ed2:	0b 83       	std	Y+3, r16	; 0x03
    2ed4:	98 01       	movw	r18, r16
    2ed6:	2a 0d       	add	r18, r10
    2ed8:	3b 1d       	adc	r19, r11
    2eda:	4b 81       	ldd	r20, Y+3	; 0x03
    2edc:	5c 81       	ldd	r21, Y+4	; 0x04
    2ede:	42 17       	cp	r20, r18
    2ee0:	53 07       	cpc	r21, r19
    2ee2:	71 f0       	breq	.+28     	; 0x2f00 <_ZN6SdFile4readEPvj+0x236>
    2ee4:	fa 01       	movw	r30, r20
    2ee6:	80 81       	ld	r24, Z
    2ee8:	f6 01       	movw	r30, r12
    2eea:	80 83       	st	Z, r24
    2eec:	8a 01       	movw	r16, r20
    2eee:	0f 5f       	subi	r16, 0xFF	; 255
    2ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef2:	1c 83       	std	Y+4, r17	; 0x04
    2ef4:	0b 83       	std	Y+3, r16	; 0x03
    2ef6:	a6 01       	movw	r20, r12
    2ef8:	4f 5f       	subi	r20, 0xFF	; 255
    2efa:	5f 4f       	sbci	r21, 0xFF	; 255
    2efc:	6a 01       	movw	r12, r20
    2efe:	ed cf       	rjmp	.-38     	; 0x2eda <_ZN6SdFile4readEPvj+0x210>
    2f00:	f4 01       	movw	r30, r8
    2f02:	82 85       	ldd	r24, Z+10	; 0x0a
    2f04:	93 85       	ldd	r25, Z+11	; 0x0b
    2f06:	a4 85       	ldd	r26, Z+12	; 0x0c
    2f08:	b5 85       	ldd	r27, Z+13	; 0x0d
    2f0a:	8a 0d       	add	r24, r10
    2f0c:	9b 1d       	adc	r25, r11
    2f0e:	a1 1d       	adc	r26, r1
    2f10:	b1 1d       	adc	r27, r1
    2f12:	82 87       	std	Z+10, r24	; 0x0a
    2f14:	93 87       	std	Z+11, r25	; 0x0b
    2f16:	a4 87       	std	Z+12, r26	; 0x0c
    2f18:	b5 87       	std	Z+13, r27	; 0x0d
    2f1a:	6a 18       	sub	r6, r10
    2f1c:	7b 08       	sbc	r7, r11
    2f1e:	1e cf       	rjmp	.-452    	; 0x2d5c <_ZN6SdFile4readEPvj+0x92>
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	9a 81       	ldd	r25, Y+2	; 0x02
    2f24:	0b c0       	rjmp	.+22     	; 0x2f3c <_ZN6SdFile4readEPvj+0x272>
    2f26:	8f ef       	ldi	r24, 0xFF	; 255
    2f28:	9f ef       	ldi	r25, 0xFF	; 255
    2f2a:	08 c0       	rjmp	.+16     	; 0x2f3c <_ZN6SdFile4readEPvj+0x272>
    2f2c:	8f ef       	ldi	r24, 0xFF	; 255
    2f2e:	9f ef       	ldi	r25, 0xFF	; 255
    2f30:	05 c0       	rjmp	.+10     	; 0x2f3c <_ZN6SdFile4readEPvj+0x272>
    2f32:	8f ef       	ldi	r24, 0xFF	; 255
    2f34:	9f ef       	ldi	r25, 0xFF	; 255
    2f36:	02 c0       	rjmp	.+4      	; 0x2f3c <_ZN6SdFile4readEPvj+0x272>
    2f38:	8f ef       	ldi	r24, 0xFF	; 255
    2f3a:	9f ef       	ldi	r25, 0xFF	; 255
    2f3c:	0f 90       	pop	r0
    2f3e:	0f 90       	pop	r0
    2f40:	0f 90       	pop	r0
    2f42:	0f 90       	pop	r0
    2f44:	df 91       	pop	r29
    2f46:	cf 91       	pop	r28
    2f48:	1f 91       	pop	r17
    2f4a:	0f 91       	pop	r16
    2f4c:	ff 90       	pop	r15
    2f4e:	ef 90       	pop	r14
    2f50:	df 90       	pop	r13
    2f52:	cf 90       	pop	r12
    2f54:	bf 90       	pop	r11
    2f56:	af 90       	pop	r10
    2f58:	9f 90       	pop	r9
    2f5a:	8f 90       	pop	r8
    2f5c:	7f 90       	pop	r7
    2f5e:	6f 90       	pop	r6
    2f60:	5f 90       	pop	r5
    2f62:	4f 90       	pop	r4
    2f64:	3f 90       	pop	r3
    2f66:	08 95       	ret

00002f68 <_ZN6SdFile12readDirCacheEv>:
    2f68:	ff 92       	push	r15
    2f6a:	0f 93       	push	r16
    2f6c:	1f 93       	push	r17
    2f6e:	cf 93       	push	r28
    2f70:	df 93       	push	r29
    2f72:	1f 92       	push	r1
    2f74:	cd b7       	in	r28, 0x3d	; 61
    2f76:	de b7       	in	r29, 0x3e	; 62
    2f78:	fc 01       	movw	r30, r24
    2f7a:	25 81       	ldd	r18, Z+5	; 0x05
    2f7c:	22 30       	cpi	r18, 0x02	; 2
    2f7e:	98 f1       	brcs	.+102    	; 0x2fe6 <_ZN6SdFile12readDirCacheEv+0x7e>
    2f80:	8c 01       	movw	r16, r24
    2f82:	42 85       	ldd	r20, Z+10	; 0x0a
    2f84:	53 85       	ldd	r21, Z+11	; 0x0b
    2f86:	64 85       	ldd	r22, Z+12	; 0x0c
    2f88:	75 85       	ldd	r23, Z+13	; 0x0d
    2f8a:	68 94       	set
    2f8c:	14 f8       	bld	r1, 4
    2f8e:	76 95       	lsr	r23
    2f90:	67 95       	ror	r22
    2f92:	57 95       	ror	r21
    2f94:	47 95       	ror	r20
    2f96:	16 94       	lsr	r1
    2f98:	d1 f7       	brne	.-12     	; 0x2f8e <_ZN6SdFile12readDirCacheEv+0x26>
    2f9a:	f4 2f       	mov	r31, r20
    2f9c:	ff 70       	andi	r31, 0x0F	; 15
    2f9e:	ff 2e       	mov	r15, r31
    2fa0:	41 e0       	ldi	r20, 0x01	; 1
    2fa2:	50 e0       	ldi	r21, 0x00	; 0
    2fa4:	be 01       	movw	r22, r28
    2fa6:	6f 5f       	subi	r22, 0xFF	; 255
    2fa8:	7f 4f       	sbci	r23, 0xFF	; 255
    2faa:	0e 94 65 16 	call	0x2cca	; 0x2cca <_ZN6SdFile4readEPvj>
    2fae:	01 97       	sbiw	r24, 0x01	; 1
    2fb0:	19 f4       	brne	.+6      	; 0x2fb8 <_ZN6SdFile12readDirCacheEv+0x50>
    2fb2:	89 81       	ldd	r24, Y+1	; 0x01
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	02 c0       	rjmp	.+4      	; 0x2fbc <_ZN6SdFile12readDirCacheEv+0x54>
    2fb8:	8f ef       	ldi	r24, 0xFF	; 255
    2fba:	9f ef       	ldi	r25, 0xFF	; 255
    2fbc:	99 23       	and	r25, r25
    2fbe:	b4 f0       	brlt	.+44     	; 0x2fec <_ZN6SdFile12readDirCacheEv+0x84>
    2fc0:	f8 01       	movw	r30, r16
    2fc2:	82 85       	ldd	r24, Z+10	; 0x0a
    2fc4:	93 85       	ldd	r25, Z+11	; 0x0b
    2fc6:	a4 85       	ldd	r26, Z+12	; 0x0c
    2fc8:	b5 85       	ldd	r27, Z+13	; 0x0d
    2fca:	4f 96       	adiw	r24, 0x1f	; 31
    2fcc:	a1 1d       	adc	r26, r1
    2fce:	b1 1d       	adc	r27, r1
    2fd0:	82 87       	std	Z+10, r24	; 0x0a
    2fd2:	93 87       	std	Z+11, r25	; 0x0b
    2fd4:	a4 87       	std	Z+12, r26	; 0x0c
    2fd6:	b5 87       	std	Z+13, r27	; 0x0d
    2fd8:	f0 e2       	ldi	r31, 0x20	; 32
    2fda:	ff 9e       	mul	r15, r31
    2fdc:	c0 01       	movw	r24, r0
    2fde:	11 24       	eor	r1, r1
    2fe0:	8f 5a       	subi	r24, 0xAF	; 175
    2fe2:	9b 4f       	sbci	r25, 0xFB	; 251
    2fe4:	05 c0       	rjmp	.+10     	; 0x2ff0 <_ZN6SdFile12readDirCacheEv+0x88>
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	02 c0       	rjmp	.+4      	; 0x2ff0 <_ZN6SdFile12readDirCacheEv+0x88>
    2fec:	80 e0       	ldi	r24, 0x00	; 0
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	0f 90       	pop	r0
    2ff2:	df 91       	pop	r29
    2ff4:	cf 91       	pop	r28
    2ff6:	1f 91       	pop	r17
    2ff8:	0f 91       	pop	r16
    2ffa:	ff 90       	pop	r15
    2ffc:	08 95       	ret

00002ffe <_ZN6SdFile7seekSetEm>:
    2ffe:	8f 92       	push	r8
    3000:	9f 92       	push	r9
    3002:	af 92       	push	r10
    3004:	bf 92       	push	r11
    3006:	cf 92       	push	r12
    3008:	df 92       	push	r13
    300a:	ef 92       	push	r14
    300c:	ff 92       	push	r15
    300e:	0f 93       	push	r16
    3010:	1f 93       	push	r17
    3012:	cf 93       	push	r28
    3014:	df 93       	push	r29
    3016:	ec 01       	movw	r28, r24
    3018:	8d 81       	ldd	r24, Y+5	; 0x05
    301a:	88 23       	and	r24, r24
    301c:	59 f0       	breq	.+22     	; 0x3034 <_ZN6SdFile7seekSetEm+0x36>
    301e:	0b 89       	ldd	r16, Y+19	; 0x13
    3020:	1c 89       	ldd	r17, Y+20	; 0x14
    3022:	2d 89       	ldd	r18, Y+21	; 0x15
    3024:	3e 89       	ldd	r19, Y+22	; 0x16
    3026:	04 17       	cp	r16, r20
    3028:	15 07       	cpc	r17, r21
    302a:	26 07       	cpc	r18, r22
    302c:	37 07       	cpc	r19, r23
    302e:	20 f4       	brcc	.+8      	; 0x3038 <_ZN6SdFile7seekSetEm+0x3a>
    3030:	91 e0       	ldi	r25, 0x01	; 1
    3032:	03 c0       	rjmp	.+6      	; 0x303a <_ZN6SdFile7seekSetEm+0x3c>
    3034:	91 e0       	ldi	r25, 0x01	; 1
    3036:	01 c0       	rjmp	.+2      	; 0x303a <_ZN6SdFile7seekSetEm+0x3c>
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	91 11       	cpse	r25, r1
    303c:	73 c0       	rjmp	.+230    	; 0x3124 <_ZN6SdFile7seekSetEm+0x126>
    303e:	82 30       	cpi	r24, 0x02	; 2
    3040:	31 f4       	brne	.+12     	; 0x304e <_ZN6SdFile7seekSetEm+0x50>
    3042:	4a 87       	std	Y+10, r20	; 0x0a
    3044:	5b 87       	std	Y+11, r21	; 0x0b
    3046:	6c 87       	std	Y+12, r22	; 0x0c
    3048:	7d 87       	std	Y+13, r23	; 0x0d
    304a:	81 e0       	ldi	r24, 0x01	; 1
    304c:	6c c0       	rjmp	.+216    	; 0x3126 <_ZN6SdFile7seekSetEm+0x128>
    304e:	41 15       	cp	r20, r1
    3050:	51 05       	cpc	r21, r1
    3052:	61 05       	cpc	r22, r1
    3054:	71 05       	cpc	r23, r1
    3056:	51 f4       	brne	.+20     	; 0x306c <_ZN6SdFile7seekSetEm+0x6e>
    3058:	1e 82       	std	Y+6, r1	; 0x06
    305a:	1f 82       	std	Y+7, r1	; 0x07
    305c:	18 86       	std	Y+8, r1	; 0x08
    305e:	19 86       	std	Y+9, r1	; 0x09
    3060:	1a 86       	std	Y+10, r1	; 0x0a
    3062:	1b 86       	std	Y+11, r1	; 0x0b
    3064:	1c 86       	std	Y+12, r1	; 0x0c
    3066:	1d 86       	std	Y+13, r1	; 0x0d
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	5d c0       	rjmp	.+186    	; 0x3126 <_ZN6SdFile7seekSetEm+0x128>
    306c:	4a 01       	movw	r8, r20
    306e:	5b 01       	movw	r10, r22
    3070:	0a 85       	ldd	r16, Y+10	; 0x0a
    3072:	1b 85       	ldd	r17, Y+11	; 0x0b
    3074:	2c 85       	ldd	r18, Y+12	; 0x0c
    3076:	3d 85       	ldd	r19, Y+13	; 0x0d
    3078:	68 01       	movw	r12, r16
    307a:	79 01       	movw	r14, r18
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	c8 1a       	sub	r12, r24
    3080:	d1 08       	sbc	r13, r1
    3082:	e1 08       	sbc	r14, r1
    3084:	f1 08       	sbc	r15, r1
    3086:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3088:	fc 8d       	ldd	r31, Y+28	; 0x1c
    308a:	85 85       	ldd	r24, Z+13	; 0x0d
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	09 96       	adiw	r24, 0x09	; 9
    3090:	08 2e       	mov	r0, r24
    3092:	04 c0       	rjmp	.+8      	; 0x309c <_ZN6SdFile7seekSetEm+0x9e>
    3094:	f6 94       	lsr	r15
    3096:	e7 94       	ror	r14
    3098:	d7 94       	ror	r13
    309a:	c7 94       	ror	r12
    309c:	0a 94       	dec	r0
    309e:	d2 f7       	brpl	.-12     	; 0x3094 <_ZN6SdFile7seekSetEm+0x96>
    30a0:	41 50       	subi	r20, 0x01	; 1
    30a2:	51 09       	sbc	r21, r1
    30a4:	61 09       	sbc	r22, r1
    30a6:	71 09       	sbc	r23, r1
    30a8:	04 c0       	rjmp	.+8      	; 0x30b2 <_ZN6SdFile7seekSetEm+0xb4>
    30aa:	76 95       	lsr	r23
    30ac:	67 95       	ror	r22
    30ae:	57 95       	ror	r21
    30b0:	47 95       	ror	r20
    30b2:	8a 95       	dec	r24
    30b4:	d2 f7       	brpl	.-12     	; 0x30aa <_ZN6SdFile7seekSetEm+0xac>
    30b6:	4c 15       	cp	r20, r12
    30b8:	5d 05       	cpc	r21, r13
    30ba:	6e 05       	cpc	r22, r14
    30bc:	7f 05       	cpc	r23, r15
    30be:	20 f0       	brcs	.+8      	; 0x30c8 <_ZN6SdFile7seekSetEm+0xca>
    30c0:	01 2b       	or	r16, r17
    30c2:	02 2b       	or	r16, r18
    30c4:	03 2b       	or	r16, r19
    30c6:	49 f4       	brne	.+18     	; 0x30da <_ZN6SdFile7seekSetEm+0xdc>
    30c8:	8f 89       	ldd	r24, Y+23	; 0x17
    30ca:	98 8d       	ldd	r25, Y+24	; 0x18
    30cc:	a9 8d       	ldd	r26, Y+25	; 0x19
    30ce:	ba 8d       	ldd	r27, Y+26	; 0x1a
    30d0:	8e 83       	std	Y+6, r24	; 0x06
    30d2:	9f 83       	std	Y+7, r25	; 0x07
    30d4:	a8 87       	std	Y+8, r26	; 0x08
    30d6:	b9 87       	std	Y+9, r27	; 0x09
    30d8:	04 c0       	rjmp	.+8      	; 0x30e2 <_ZN6SdFile7seekSetEm+0xe4>
    30da:	4c 19       	sub	r20, r12
    30dc:	5d 09       	sbc	r21, r13
    30de:	6e 09       	sbc	r22, r14
    30e0:	7f 09       	sbc	r23, r15
    30e2:	6a 01       	movw	r12, r20
    30e4:	7b 01       	movw	r14, r22
    30e6:	81 e0       	ldi	r24, 0x01	; 1
    30e8:	c8 1a       	sub	r12, r24
    30ea:	d1 08       	sbc	r13, r1
    30ec:	e1 08       	sbc	r14, r1
    30ee:	f1 08       	sbc	r15, r1
    30f0:	45 2b       	or	r20, r21
    30f2:	46 2b       	or	r20, r22
    30f4:	47 2b       	or	r20, r23
    30f6:	81 f0       	breq	.+32     	; 0x3118 <_ZN6SdFile7seekSetEm+0x11a>
    30f8:	4e 81       	ldd	r20, Y+6	; 0x06
    30fa:	5f 81       	ldd	r21, Y+7	; 0x07
    30fc:	68 85       	ldd	r22, Y+8	; 0x08
    30fe:	79 85       	ldd	r23, Y+9	; 0x09
    3100:	9e 01       	movw	r18, r28
    3102:	2a 5f       	subi	r18, 0xFA	; 250
    3104:	3f 4f       	sbci	r19, 0xFF	; 255
    3106:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3108:	9c 8d       	ldd	r25, Y+28	; 0x1c
    310a:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <_ZNK8SdVolume6fatGetEmPm>
    310e:	b7 01       	movw	r22, r14
    3110:	a6 01       	movw	r20, r12
    3112:	81 11       	cpse	r24, r1
    3114:	e6 cf       	rjmp	.-52     	; 0x30e2 <_ZN6SdFile7seekSetEm+0xe4>
    3116:	07 c0       	rjmp	.+14     	; 0x3126 <_ZN6SdFile7seekSetEm+0x128>
    3118:	8a 86       	std	Y+10, r8	; 0x0a
    311a:	9b 86       	std	Y+11, r9	; 0x0b
    311c:	ac 86       	std	Y+12, r10	; 0x0c
    311e:	bd 86       	std	Y+13, r11	; 0x0d
    3120:	81 e0       	ldi	r24, 0x01	; 1
    3122:	01 c0       	rjmp	.+2      	; 0x3126 <_ZN6SdFile7seekSetEm+0x128>
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	df 91       	pop	r29
    3128:	cf 91       	pop	r28
    312a:	1f 91       	pop	r17
    312c:	0f 91       	pop	r16
    312e:	ff 90       	pop	r15
    3130:	ef 90       	pop	r14
    3132:	df 90       	pop	r13
    3134:	cf 90       	pop	r12
    3136:	bf 90       	pop	r11
    3138:	af 90       	pop	r10
    313a:	9f 90       	pop	r9
    313c:	8f 90       	pop	r8
    313e:	08 95       	ret

00003140 <_ZN6SdFile4syncEh>:
    3140:	ff 92       	push	r15
    3142:	0f 93       	push	r16
    3144:	1f 93       	push	r17
    3146:	cf 93       	push	r28
    3148:	df 93       	push	r29
    314a:	fc 01       	movw	r30, r24
    314c:	85 81       	ldd	r24, Z+5	; 0x05
    314e:	88 23       	and	r24, r24
    3150:	09 f4       	brne	.+2      	; 0x3154 <_ZN6SdFile4syncEh+0x14>
    3152:	43 c0       	rjmp	.+134    	; 0x31da <_ZN6SdFile4syncEh+0x9a>
    3154:	f6 2e       	mov	r15, r22
    3156:	ef 01       	movw	r28, r30
    3158:	84 81       	ldd	r24, Z+4	; 0x04
    315a:	88 23       	and	r24, r24
    315c:	a4 f5       	brge	.+104    	; 0x31c6 <_ZN6SdFile4syncEh+0x86>
    315e:	61 e0       	ldi	r22, 0x01	; 1
    3160:	cf 01       	movw	r24, r30
    3162:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <_ZN6SdFile13cacheDirEntryEh>
    3166:	8c 01       	movw	r16, r24
    3168:	89 2b       	or	r24, r25
    316a:	b1 f1       	breq	.+108    	; 0x31d8 <_ZN6SdFile4syncEh+0x98>
    316c:	8d 81       	ldd	r24, Y+5	; 0x05
    316e:	82 30       	cpi	r24, 0x02	; 2
    3170:	48 f4       	brcc	.+18     	; 0x3184 <_ZN6SdFile4syncEh+0x44>
    3172:	8b 89       	ldd	r24, Y+19	; 0x13
    3174:	9c 89       	ldd	r25, Y+20	; 0x14
    3176:	ad 89       	ldd	r26, Y+21	; 0x15
    3178:	be 89       	ldd	r27, Y+22	; 0x16
    317a:	f8 01       	movw	r30, r16
    317c:	84 8f       	std	Z+28, r24	; 0x1c
    317e:	95 8f       	std	Z+29, r25	; 0x1d
    3180:	a6 8f       	std	Z+30, r26	; 0x1e
    3182:	b7 8f       	std	Z+31, r27	; 0x1f
    3184:	8f 89       	ldd	r24, Y+23	; 0x17
    3186:	98 8d       	ldd	r25, Y+24	; 0x18
    3188:	a9 8d       	ldd	r26, Y+25	; 0x19
    318a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    318c:	f8 01       	movw	r30, r16
    318e:	93 8f       	std	Z+27, r25	; 0x1b
    3190:	82 8f       	std	Z+26, r24	; 0x1a
    3192:	8f 89       	ldd	r24, Y+23	; 0x17
    3194:	98 8d       	ldd	r25, Y+24	; 0x18
    3196:	a9 8d       	ldd	r26, Y+25	; 0x19
    3198:	ba 8d       	ldd	r27, Y+26	; 0x1a
    319a:	b5 8b       	std	Z+21, r27	; 0x15
    319c:	a4 8b       	std	Z+20, r26	; 0x14
    319e:	e0 91 48 04 	lds	r30, 0x0448	; 0x800448 <_ZN6SdFile9dateTime_E>
    31a2:	f0 91 49 04 	lds	r31, 0x0449	; 0x800449 <_ZN6SdFile9dateTime_E+0x1>
    31a6:	30 97       	sbiw	r30, 0x00	; 0
    31a8:	59 f0       	breq	.+22     	; 0x31c0 <_ZN6SdFile4syncEh+0x80>
    31aa:	b8 01       	movw	r22, r16
    31ac:	6a 5e       	subi	r22, 0xEA	; 234
    31ae:	7f 4f       	sbci	r23, 0xFF	; 255
    31b0:	c8 01       	movw	r24, r16
    31b2:	48 96       	adiw	r24, 0x18	; 24
    31b4:	09 95       	icall
    31b6:	f8 01       	movw	r30, r16
    31b8:	80 8d       	ldd	r24, Z+24	; 0x18
    31ba:	91 8d       	ldd	r25, Z+25	; 0x19
    31bc:	93 8b       	std	Z+19, r25	; 0x13
    31be:	82 8b       	std	Z+18, r24	; 0x12
    31c0:	8c 81       	ldd	r24, Y+4	; 0x04
    31c2:	8f 77       	andi	r24, 0x7F	; 127
    31c4:	8c 83       	std	Y+4, r24	; 0x04
    31c6:	f1 10       	cpse	r15, r1
    31c8:	03 c0       	rjmp	.+6      	; 0x31d0 <_ZN6SdFile4syncEh+0x90>
    31ca:	8c 81       	ldd	r24, Y+4	; 0x04
    31cc:	8f 7e       	andi	r24, 0xEF	; 239
    31ce:	8c 83       	std	Y+4, r24	; 0x04
    31d0:	8f 2d       	mov	r24, r15
    31d2:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <_ZN8SdVolume10cacheFlushEh>
    31d6:	01 c0       	rjmp	.+2      	; 0x31da <_ZN6SdFile4syncEh+0x9a>
    31d8:	80 e0       	ldi	r24, 0x00	; 0
    31da:	df 91       	pop	r29
    31dc:	cf 91       	pop	r28
    31de:	1f 91       	pop	r17
    31e0:	0f 91       	pop	r16
    31e2:	ff 90       	pop	r15
    31e4:	08 95       	ret

000031e6 <_ZN6SdFile5closeEv>:
    31e6:	cf 93       	push	r28
    31e8:	df 93       	push	r29
    31ea:	ec 01       	movw	r28, r24
    31ec:	61 e0       	ldi	r22, 0x01	; 1
    31ee:	0e 94 a0 18 	call	0x3140	; 0x3140 <_ZN6SdFile4syncEh>
    31f2:	88 23       	and	r24, r24
    31f4:	11 f0       	breq	.+4      	; 0x31fa <_ZN6SdFile5closeEv+0x14>
    31f6:	1d 82       	std	Y+5, r1	; 0x05
    31f8:	81 e0       	ldi	r24, 0x01	; 1
    31fa:	df 91       	pop	r29
    31fc:	cf 91       	pop	r28
    31fe:	08 95       	ret

00003200 <_ZN6SdFile17availableForWriteEv>:
    3200:	cf 93       	push	r28
    3202:	df 93       	push	r29
    3204:	fc 01       	movw	r30, r24
    3206:	25 81       	ldd	r18, Z+5	; 0x05
    3208:	21 30       	cpi	r18, 0x01	; 1
    320a:	29 f4       	brne	.+10     	; 0x3216 <_ZN6SdFile17availableForWriteEv+0x16>
    320c:	24 81       	ldd	r18, Z+4	; 0x04
    320e:	21 fd       	sbrc	r18, 1
    3210:	04 c0       	rjmp	.+8      	; 0x321a <_ZN6SdFile17availableForWriteEv+0x1a>
    3212:	21 e0       	ldi	r18, 0x01	; 1
    3214:	03 c0       	rjmp	.+6      	; 0x321c <_ZN6SdFile17availableForWriteEv+0x1c>
    3216:	21 e0       	ldi	r18, 0x01	; 1
    3218:	01 c0       	rjmp	.+2      	; 0x321c <_ZN6SdFile17availableForWriteEv+0x1c>
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	21 11       	cpse	r18, r1
    321e:	4a c0       	rjmp	.+148    	; 0x32b4 <_ZN6SdFile17availableForWriteEv+0xb4>
    3220:	ec 01       	movw	r28, r24
    3222:	8c 81       	ldd	r24, Y+4	; 0x04
    3224:	82 ff       	sbrs	r24, 2
    3226:	12 c0       	rjmp	.+36     	; 0x324c <_ZN6SdFile17availableForWriteEv+0x4c>
    3228:	8a 85       	ldd	r24, Y+10	; 0x0a
    322a:	9b 85       	ldd	r25, Y+11	; 0x0b
    322c:	ac 85       	ldd	r26, Y+12	; 0x0c
    322e:	bd 85       	ldd	r27, Y+13	; 0x0d
    3230:	4b 89       	ldd	r20, Y+19	; 0x13
    3232:	5c 89       	ldd	r21, Y+20	; 0x14
    3234:	6d 89       	ldd	r22, Y+21	; 0x15
    3236:	7e 89       	ldd	r23, Y+22	; 0x16
    3238:	84 17       	cp	r24, r20
    323a:	95 07       	cpc	r25, r21
    323c:	a6 07       	cpc	r26, r22
    323e:	b7 07       	cpc	r27, r23
    3240:	29 f0       	breq	.+10     	; 0x324c <_ZN6SdFile17availableForWriteEv+0x4c>
    3242:	ce 01       	movw	r24, r28
    3244:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <_ZN6SdFile7seekSetEm>
    3248:	88 23       	and	r24, r24
    324a:	b9 f1       	breq	.+110    	; 0x32ba <_ZN6SdFile17availableForWriteEv+0xba>
    324c:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <_ZN8SdVolume7sdCard_E>
    3250:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <_ZN8SdVolume7sdCard_E+0x1>
    3254:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <_ZN7Sd2Card6isBusyEv>
    3258:	81 11       	cpse	r24, r1
    325a:	32 c0       	rjmp	.+100    	; 0x32c0 <_ZN6SdFile17availableForWriteEv+0xc0>
    325c:	8c 81       	ldd	r24, Y+4	; 0x04
    325e:	85 ff       	sbrs	r24, 5
    3260:	0a c0       	rjmp	.+20     	; 0x3276 <_ZN6SdFile17availableForWriteEv+0x76>
    3262:	60 e0       	ldi	r22, 0x00	; 0
    3264:	ce 01       	movw	r24, r28
    3266:	0e 94 a0 18 	call	0x3140	; 0x3140 <_ZN6SdFile4syncEh>
    326a:	8c 81       	ldd	r24, Y+4	; 0x04
    326c:	8f 7d       	andi	r24, 0xDF	; 223
    326e:	8c 83       	std	Y+4, r24	; 0x04
    3270:	80 e0       	ldi	r24, 0x00	; 0
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	27 c0       	rjmp	.+78     	; 0x32c4 <_ZN6SdFile17availableForWriteEv+0xc4>
    3276:	40 91 4a 04 	lds	r20, 0x044A	; 0x80044a <_ZN8SdVolume17cacheMirrorBlock_E>
    327a:	50 91 4b 04 	lds	r21, 0x044B	; 0x80044b <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    327e:	60 91 4c 04 	lds	r22, 0x044C	; 0x80044c <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    3282:	70 91 4d 04 	lds	r23, 0x044D	; 0x80044d <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    3286:	45 2b       	or	r20, r21
    3288:	46 2b       	or	r20, r22
    328a:	47 2b       	or	r20, r23
    328c:	31 f0       	breq	.+12     	; 0x329a <_ZN6SdFile17availableForWriteEv+0x9a>
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <_ZN8SdVolume21cacheMirrorBlockFlushEh>
    3294:	80 e0       	ldi	r24, 0x00	; 0
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	15 c0       	rjmp	.+42     	; 0x32c4 <_ZN6SdFile17availableForWriteEv+0xc4>
    329a:	80 61       	ori	r24, 0x10	; 16
    329c:	8c 83       	std	Y+4, r24	; 0x04
    329e:	8a 85       	ldd	r24, Y+10	; 0x0a
    32a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    32a2:	ac 85       	ldd	r26, Y+12	; 0x0c
    32a4:	bd 85       	ldd	r27, Y+13	; 0x0d
    32a6:	9c 01       	movw	r18, r24
    32a8:	31 70       	andi	r19, 0x01	; 1
    32aa:	80 e0       	ldi	r24, 0x00	; 0
    32ac:	92 e0       	ldi	r25, 0x02	; 2
    32ae:	82 1b       	sub	r24, r18
    32b0:	93 0b       	sbc	r25, r19
    32b2:	08 c0       	rjmp	.+16     	; 0x32c4 <_ZN6SdFile17availableForWriteEv+0xc4>
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	05 c0       	rjmp	.+10     	; 0x32c4 <_ZN6SdFile17availableForWriteEv+0xc4>
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	02 c0       	rjmp	.+4      	; 0x32c4 <_ZN6SdFile17availableForWriteEv+0xc4>
    32c0:	80 e0       	ldi	r24, 0x00	; 0
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	df 91       	pop	r29
    32c6:	cf 91       	pop	r28
    32c8:	08 95       	ret

000032ca <_ZN6SdFile8truncateEm>:
    32ca:	4f 92       	push	r4
    32cc:	5f 92       	push	r5
    32ce:	6f 92       	push	r6
    32d0:	7f 92       	push	r7
    32d2:	8f 92       	push	r8
    32d4:	9f 92       	push	r9
    32d6:	af 92       	push	r10
    32d8:	bf 92       	push	r11
    32da:	ef 92       	push	r14
    32dc:	ff 92       	push	r15
    32de:	0f 93       	push	r16
    32e0:	1f 93       	push	r17
    32e2:	cf 93       	push	r28
    32e4:	df 93       	push	r29
    32e6:	00 d0       	rcall	.+0      	; 0x32e8 <_ZN6SdFile8truncateEm+0x1e>
    32e8:	00 d0       	rcall	.+0      	; 0x32ea <_ZN6SdFile8truncateEm+0x20>
    32ea:	cd b7       	in	r28, 0x3d	; 61
    32ec:	de b7       	in	r29, 0x3e	; 62
    32ee:	fc 01       	movw	r30, r24
    32f0:	85 81       	ldd	r24, Z+5	; 0x05
    32f2:	81 30       	cpi	r24, 0x01	; 1
    32f4:	29 f4       	brne	.+10     	; 0x3300 <_ZN6SdFile8truncateEm+0x36>
    32f6:	84 81       	ldd	r24, Z+4	; 0x04
    32f8:	81 fd       	sbrc	r24, 1
    32fa:	04 c0       	rjmp	.+8      	; 0x3304 <_ZN6SdFile8truncateEm+0x3a>
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	03 c0       	rjmp	.+6      	; 0x3306 <_ZN6SdFile8truncateEm+0x3c>
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	01 c0       	rjmp	.+2      	; 0x3306 <_ZN6SdFile8truncateEm+0x3c>
    3304:	80 e0       	ldi	r24, 0x00	; 0
    3306:	81 11       	cpse	r24, r1
    3308:	99 c0       	rjmp	.+306    	; 0x343c <_ZN6SdFile8truncateEm+0x172>
    330a:	83 89       	ldd	r24, Z+19	; 0x13
    330c:	94 89       	ldd	r25, Z+20	; 0x14
    330e:	a5 89       	ldd	r26, Z+21	; 0x15
    3310:	b6 89       	ldd	r27, Z+22	; 0x16
    3312:	84 17       	cp	r24, r20
    3314:	95 07       	cpc	r25, r21
    3316:	a6 07       	cpc	r26, r22
    3318:	b7 07       	cpc	r27, r23
    331a:	08 f4       	brcc	.+2      	; 0x331e <_ZN6SdFile8truncateEm+0x54>
    331c:	91 c0       	rjmp	.+290    	; 0x3440 <_ZN6SdFile8truncateEm+0x176>
    331e:	89 2b       	or	r24, r25
    3320:	8a 2b       	or	r24, r26
    3322:	8b 2b       	or	r24, r27
    3324:	09 f4       	brne	.+2      	; 0x3328 <_ZN6SdFile8truncateEm+0x5e>
    3326:	8e c0       	rjmp	.+284    	; 0x3444 <_ZN6SdFile8truncateEm+0x17a>
    3328:	82 84       	ldd	r8, Z+10	; 0x0a
    332a:	93 84       	ldd	r9, Z+11	; 0x0b
    332c:	a4 84       	ldd	r10, Z+12	; 0x0c
    332e:	b5 84       	ldd	r11, Z+13	; 0x0d
    3330:	48 15       	cp	r20, r8
    3332:	59 05       	cpc	r21, r9
    3334:	6a 05       	cpc	r22, r10
    3336:	7b 05       	cpc	r23, r11
    3338:	10 f4       	brcc	.+4      	; 0x333e <_ZN6SdFile8truncateEm+0x74>
    333a:	4a 01       	movw	r8, r20
    333c:	5b 01       	movw	r10, r22
    333e:	2a 01       	movw	r4, r20
    3340:	3b 01       	movw	r6, r22
    3342:	7f 01       	movw	r14, r30
    3344:	cf 01       	movw	r24, r30
    3346:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <_ZN6SdFile7seekSetEm>
    334a:	88 23       	and	r24, r24
    334c:	09 f4       	brne	.+2      	; 0x3350 <_ZN6SdFile8truncateEm+0x86>
    334e:	7b c0       	rjmp	.+246    	; 0x3446 <_ZN6SdFile8truncateEm+0x17c>
    3350:	41 14       	cp	r4, r1
    3352:	51 04       	cpc	r5, r1
    3354:	61 04       	cpc	r6, r1
    3356:	71 04       	cpc	r7, r1
    3358:	b1 f4       	brne	.+44     	; 0x3386 <_ZN6SdFile8truncateEm+0xbc>
    335a:	d7 01       	movw	r26, r14
    335c:	57 96       	adiw	r26, 0x17	; 23
    335e:	4d 91       	ld	r20, X+
    3360:	5d 91       	ld	r21, X+
    3362:	6d 91       	ld	r22, X+
    3364:	7c 91       	ld	r23, X
    3366:	5a 97       	sbiw	r26, 0x1a	; 26
    3368:	5b 96       	adiw	r26, 0x1b	; 27
    336a:	8d 91       	ld	r24, X+
    336c:	9c 91       	ld	r25, X
    336e:	5c 97       	sbiw	r26, 0x1c	; 28
    3370:	0e 94 28 21 	call	0x4250	; 0x4250 <_ZN8SdVolume9freeChainEm>
    3374:	88 23       	and	r24, r24
    3376:	09 f4       	brne	.+2      	; 0x337a <_ZN6SdFile8truncateEm+0xb0>
    3378:	66 c0       	rjmp	.+204    	; 0x3446 <_ZN6SdFile8truncateEm+0x17c>
    337a:	f7 01       	movw	r30, r14
    337c:	17 8a       	std	Z+23, r1	; 0x17
    337e:	10 8e       	std	Z+24, r1	; 0x18
    3380:	11 8e       	std	Z+25, r1	; 0x19
    3382:	12 8e       	std	Z+26, r1	; 0x1a
    3384:	42 c0       	rjmp	.+132    	; 0x340a <_ZN6SdFile8truncateEm+0x140>
    3386:	d7 01       	movw	r26, r14
    3388:	16 96       	adiw	r26, 0x06	; 6
    338a:	4d 91       	ld	r20, X+
    338c:	5d 91       	ld	r21, X+
    338e:	6d 91       	ld	r22, X+
    3390:	7c 91       	ld	r23, X
    3392:	19 97       	sbiw	r26, 0x09	; 9
    3394:	9e 01       	movw	r18, r28
    3396:	2f 5f       	subi	r18, 0xFF	; 255
    3398:	3f 4f       	sbci	r19, 0xFF	; 255
    339a:	5b 96       	adiw	r26, 0x1b	; 27
    339c:	8d 91       	ld	r24, X+
    339e:	9c 91       	ld	r25, X
    33a0:	5c 97       	sbiw	r26, 0x1c	; 28
    33a2:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <_ZNK8SdVolume6fatGetEmPm>
    33a6:	88 23       	and	r24, r24
    33a8:	71 f1       	breq	.+92     	; 0x3406 <_ZN6SdFile8truncateEm+0x13c>
    33aa:	49 81       	ldd	r20, Y+1	; 0x01
    33ac:	5a 81       	ldd	r21, Y+2	; 0x02
    33ae:	6b 81       	ldd	r22, Y+3	; 0x03
    33b0:	7c 81       	ldd	r23, Y+4	; 0x04
    33b2:	d7 01       	movw	r26, r14
    33b4:	5b 96       	adiw	r26, 0x1b	; 27
    33b6:	ed 91       	ld	r30, X+
    33b8:	fc 91       	ld	r31, X
    33ba:	5c 97       	sbiw	r26, 0x1c	; 28
    33bc:	87 89       	ldd	r24, Z+23	; 0x17
    33be:	80 31       	cpi	r24, 0x10	; 16
    33c0:	29 f4       	brne	.+10     	; 0x33cc <_ZN6SdFile8truncateEm+0x102>
    33c2:	88 ef       	ldi	r24, 0xF8	; 248
    33c4:	9f ef       	ldi	r25, 0xFF	; 255
    33c6:	a0 e0       	ldi	r26, 0x00	; 0
    33c8:	b0 e0       	ldi	r27, 0x00	; 0
    33ca:	04 c0       	rjmp	.+8      	; 0x33d4 <_ZN6SdFile8truncateEm+0x10a>
    33cc:	88 ef       	ldi	r24, 0xF8	; 248
    33ce:	9f ef       	ldi	r25, 0xFF	; 255
    33d0:	af ef       	ldi	r26, 0xFF	; 255
    33d2:	bf e0       	ldi	r27, 0x0F	; 15
    33d4:	48 17       	cp	r20, r24
    33d6:	59 07       	cpc	r21, r25
    33d8:	6a 07       	cpc	r22, r26
    33da:	7b 07       	cpc	r23, r27
    33dc:	b0 f4       	brcc	.+44     	; 0x340a <_ZN6SdFile8truncateEm+0x140>
    33de:	cf 01       	movw	r24, r30
    33e0:	0e 94 28 21 	call	0x4250	; 0x4250 <_ZN8SdVolume9freeChainEm>
    33e4:	88 23       	and	r24, r24
    33e6:	79 f0       	breq	.+30     	; 0x3406 <_ZN6SdFile8truncateEm+0x13c>
    33e8:	f7 01       	movw	r30, r14
    33ea:	46 81       	ldd	r20, Z+6	; 0x06
    33ec:	57 81       	ldd	r21, Z+7	; 0x07
    33ee:	60 85       	ldd	r22, Z+8	; 0x08
    33f0:	71 85       	ldd	r23, Z+9	; 0x09
    33f2:	0f ef       	ldi	r16, 0xFF	; 255
    33f4:	1f ef       	ldi	r17, 0xFF	; 255
    33f6:	2f ef       	ldi	r18, 0xFF	; 255
    33f8:	3f e0       	ldi	r19, 0x0F	; 15
    33fa:	83 8d       	ldd	r24, Z+27	; 0x1b
    33fc:	94 8d       	ldd	r25, Z+28	; 0x1c
    33fe:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <_ZN8SdVolume6fatPutEmm>
    3402:	81 11       	cpse	r24, r1
    3404:	02 c0       	rjmp	.+4      	; 0x340a <_ZN6SdFile8truncateEm+0x140>
    3406:	80 e0       	ldi	r24, 0x00	; 0
    3408:	1e c0       	rjmp	.+60     	; 0x3446 <_ZN6SdFile8truncateEm+0x17c>
    340a:	d7 01       	movw	r26, r14
    340c:	53 96       	adiw	r26, 0x13	; 19
    340e:	4d 92       	st	X+, r4
    3410:	5d 92       	st	X+, r5
    3412:	6d 92       	st	X+, r6
    3414:	7c 92       	st	X, r7
    3416:	56 97       	sbiw	r26, 0x16	; 22
    3418:	14 96       	adiw	r26, 0x04	; 4
    341a:	8c 91       	ld	r24, X
    341c:	14 97       	sbiw	r26, 0x04	; 4
    341e:	80 68       	ori	r24, 0x80	; 128
    3420:	14 96       	adiw	r26, 0x04	; 4
    3422:	8c 93       	st	X, r24
    3424:	61 e0       	ldi	r22, 0x01	; 1
    3426:	c7 01       	movw	r24, r14
    3428:	0e 94 a0 18 	call	0x3140	; 0x3140 <_ZN6SdFile4syncEh>
    342c:	88 23       	and	r24, r24
    342e:	59 f0       	breq	.+22     	; 0x3446 <_ZN6SdFile8truncateEm+0x17c>
    3430:	b5 01       	movw	r22, r10
    3432:	a4 01       	movw	r20, r8
    3434:	c7 01       	movw	r24, r14
    3436:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <_ZN6SdFile7seekSetEm>
    343a:	05 c0       	rjmp	.+10     	; 0x3446 <_ZN6SdFile8truncateEm+0x17c>
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	03 c0       	rjmp	.+6      	; 0x3446 <_ZN6SdFile8truncateEm+0x17c>
    3440:	80 e0       	ldi	r24, 0x00	; 0
    3442:	01 c0       	rjmp	.+2      	; 0x3446 <_ZN6SdFile8truncateEm+0x17c>
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	0f 90       	pop	r0
    3448:	0f 90       	pop	r0
    344a:	0f 90       	pop	r0
    344c:	0f 90       	pop	r0
    344e:	df 91       	pop	r29
    3450:	cf 91       	pop	r28
    3452:	1f 91       	pop	r17
    3454:	0f 91       	pop	r16
    3456:	ff 90       	pop	r15
    3458:	ef 90       	pop	r14
    345a:	bf 90       	pop	r11
    345c:	af 90       	pop	r10
    345e:	9f 90       	pop	r9
    3460:	8f 90       	pop	r8
    3462:	7f 90       	pop	r7
    3464:	6f 90       	pop	r6
    3466:	5f 90       	pop	r5
    3468:	4f 90       	pop	r4
    346a:	08 95       	ret

0000346c <_ZN6SdFile15openCachedEntryEhh>:
    346c:	1f 93       	push	r17
    346e:	cf 93       	push	r28
    3470:	df 93       	push	r29
    3472:	ec 01       	movw	r28, r24
    3474:	80 e2       	ldi	r24, 0x20	; 32
    3476:	68 9f       	mul	r22, r24
    3478:	f0 01       	movw	r30, r0
    347a:	11 24       	eor	r1, r1
    347c:	ef 5a       	subi	r30, 0xAF	; 175
    347e:	fb 4f       	sbci	r31, 0xFB	; 251
    3480:	93 85       	ldd	r25, Z+11	; 0x0b
    3482:	91 71       	andi	r25, 0x11	; 17
    3484:	21 f0       	breq	.+8      	; 0x348e <_ZN6SdFile15openCachedEntryEhh+0x22>
    3486:	84 2f       	mov	r24, r20
    3488:	82 74       	andi	r24, 0x42	; 66
    348a:	09 f0       	breq	.+2      	; 0x348e <_ZN6SdFile15openCachedEntryEhh+0x22>
    348c:	54 c0       	rjmp	.+168    	; 0x3536 <_ZN6SdFile15openCachedEntryEhh+0xca>
    348e:	14 2f       	mov	r17, r20
    3490:	6a 8b       	std	Y+18, r22	; 0x12
    3492:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E>
    3496:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    349a:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    349e:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    34a2:	8e 87       	std	Y+14, r24	; 0x0e
    34a4:	9f 87       	std	Y+15, r25	; 0x0f
    34a6:	a8 8b       	std	Y+16, r26	; 0x10
    34a8:	b9 8b       	std	Y+17, r27	; 0x11
    34aa:	84 89       	ldd	r24, Z+20	; 0x14
    34ac:	95 89       	ldd	r25, Z+21	; 0x15
    34ae:	a0 e0       	ldi	r26, 0x00	; 0
    34b0:	b0 e0       	ldi	r27, 0x00	; 0
    34b2:	dc 01       	movw	r26, r24
    34b4:	99 27       	eor	r25, r25
    34b6:	88 27       	eor	r24, r24
    34b8:	8f 8b       	std	Y+23, r24	; 0x17
    34ba:	98 8f       	std	Y+24, r25	; 0x18
    34bc:	a9 8f       	std	Y+25, r26	; 0x19
    34be:	ba 8f       	std	Y+26, r27	; 0x1a
    34c0:	42 8d       	ldd	r20, Z+26	; 0x1a
    34c2:	53 8d       	ldd	r21, Z+27	; 0x1b
    34c4:	60 e0       	ldi	r22, 0x00	; 0
    34c6:	70 e0       	ldi	r23, 0x00	; 0
    34c8:	48 2b       	or	r20, r24
    34ca:	59 2b       	or	r21, r25
    34cc:	6a 2b       	or	r22, r26
    34ce:	7b 2b       	or	r23, r27
    34d0:	4f 8b       	std	Y+23, r20	; 0x17
    34d2:	58 8f       	std	Y+24, r21	; 0x18
    34d4:	69 8f       	std	Y+25, r22	; 0x19
    34d6:	7a 8f       	std	Y+26, r23	; 0x1a
    34d8:	23 85       	ldd	r18, Z+11	; 0x0b
    34da:	28 71       	andi	r18, 0x18	; 24
    34dc:	59 f4       	brne	.+22     	; 0x34f4 <_ZN6SdFile15openCachedEntryEhh+0x88>
    34de:	84 8d       	ldd	r24, Z+28	; 0x1c
    34e0:	95 8d       	ldd	r25, Z+29	; 0x1d
    34e2:	a6 8d       	ldd	r26, Z+30	; 0x1e
    34e4:	b7 8d       	ldd	r27, Z+31	; 0x1f
    34e6:	8b 8b       	std	Y+19, r24	; 0x13
    34e8:	9c 8b       	std	Y+20, r25	; 0x14
    34ea:	ad 8b       	std	Y+21, r26	; 0x15
    34ec:	be 8b       	std	Y+22, r27	; 0x16
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	8d 83       	std	Y+5, r24	; 0x05
    34f2:	0d c0       	rjmp	.+26     	; 0x350e <_ZN6SdFile15openCachedEntryEhh+0xa2>
    34f4:	20 31       	cpi	r18, 0x10	; 16
    34f6:	09 f5       	brne	.+66     	; 0x353a <_ZN6SdFile15openCachedEntryEhh+0xce>
    34f8:	9e 01       	movw	r18, r28
    34fa:	2d 5e       	subi	r18, 0xED	; 237
    34fc:	3f 4f       	sbci	r19, 0xFF	; 255
    34fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3500:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3502:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <_ZNK8SdVolume9chainSizeEmPm>
    3506:	88 23       	and	r24, r24
    3508:	d9 f0       	breq	.+54     	; 0x3540 <_ZN6SdFile15openCachedEntryEhh+0xd4>
    350a:	84 e0       	ldi	r24, 0x04	; 4
    350c:	8d 83       	std	Y+5, r24	; 0x05
    350e:	81 2f       	mov	r24, r17
    3510:	8f 70       	andi	r24, 0x0F	; 15
    3512:	8c 83       	std	Y+4, r24	; 0x04
    3514:	1e 82       	std	Y+6, r1	; 0x06
    3516:	1f 82       	std	Y+7, r1	; 0x07
    3518:	18 86       	std	Y+8, r1	; 0x08
    351a:	19 86       	std	Y+9, r1	; 0x09
    351c:	1a 86       	std	Y+10, r1	; 0x0a
    351e:	1b 86       	std	Y+11, r1	; 0x0b
    3520:	1c 86       	std	Y+12, r1	; 0x0c
    3522:	1d 86       	std	Y+13, r1	; 0x0d
    3524:	16 ff       	sbrs	r17, 6
    3526:	0b c0       	rjmp	.+22     	; 0x353e <_ZN6SdFile15openCachedEntryEhh+0xd2>
    3528:	40 e0       	ldi	r20, 0x00	; 0
    352a:	50 e0       	ldi	r21, 0x00	; 0
    352c:	ba 01       	movw	r22, r20
    352e:	ce 01       	movw	r24, r28
    3530:	0e 94 65 19 	call	0x32ca	; 0x32ca <_ZN6SdFile8truncateEm>
    3534:	05 c0       	rjmp	.+10     	; 0x3540 <_ZN6SdFile15openCachedEntryEhh+0xd4>
    3536:	80 e0       	ldi	r24, 0x00	; 0
    3538:	03 c0       	rjmp	.+6      	; 0x3540 <_ZN6SdFile15openCachedEntryEhh+0xd4>
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	01 c0       	rjmp	.+2      	; 0x3540 <_ZN6SdFile15openCachedEntryEhh+0xd4>
    353e:	81 e0       	ldi	r24, 0x01	; 1
    3540:	df 91       	pop	r29
    3542:	cf 91       	pop	r28
    3544:	1f 91       	pop	r17
    3546:	08 95       	ret

00003548 <_ZN6SdFile4openEPS_PKch>:
    3548:	af 92       	push	r10
    354a:	bf 92       	push	r11
    354c:	cf 92       	push	r12
    354e:	df 92       	push	r13
    3550:	ef 92       	push	r14
    3552:	ff 92       	push	r15
    3554:	0f 93       	push	r16
    3556:	1f 93       	push	r17
    3558:	cf 93       	push	r28
    355a:	df 93       	push	r29
    355c:	cd b7       	in	r28, 0x3d	; 61
    355e:	de b7       	in	r29, 0x3e	; 62
    3560:	2b 97       	sbiw	r28, 0x0b	; 11
    3562:	0f b6       	in	r0, 0x3f	; 63
    3564:	f8 94       	cli
    3566:	de bf       	out	0x3e, r29	; 62
    3568:	0f be       	out	0x3f, r0	; 63
    356a:	cd bf       	out	0x3d, r28	; 61
    356c:	fc 01       	movw	r30, r24
    356e:	c5 80       	ldd	r12, Z+5	; 0x05
    3570:	c1 10       	cpse	r12, r1
    3572:	ca c0       	rjmp	.+404    	; 0x3708 <_ZN6SdFile4openEPS_PKch+0x1c0>
    3574:	a2 2e       	mov	r10, r18
    3576:	8b 01       	movw	r16, r22
    3578:	7c 01       	movw	r14, r24
    357a:	be 01       	movw	r22, r28
    357c:	6f 5f       	subi	r22, 0xFF	; 255
    357e:	7f 4f       	sbci	r23, 0xFF	; 255
    3580:	ca 01       	movw	r24, r20
    3582:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <_ZN6SdFile10make83NameEPKcPh>
    3586:	88 23       	and	r24, r24
    3588:	09 f4       	brne	.+2      	; 0x358c <_ZN6SdFile4openEPS_PKch+0x44>
    358a:	c0 c0       	rjmp	.+384    	; 0x370c <_ZN6SdFile4openEPS_PKch+0x1c4>
    358c:	f8 01       	movw	r30, r16
    358e:	83 8d       	ldd	r24, Z+27	; 0x1b
    3590:	94 8d       	ldd	r25, Z+28	; 0x1c
    3592:	f7 01       	movw	r30, r14
    3594:	94 8f       	std	Z+28, r25	; 0x1c
    3596:	83 8f       	std	Z+27, r24	; 0x1b
    3598:	f8 01       	movw	r30, r16
    359a:	16 82       	std	Z+6, r1	; 0x06
    359c:	17 82       	std	Z+7, r1	; 0x07
    359e:	10 86       	std	Z+8, r1	; 0x08
    35a0:	11 86       	std	Z+9, r1	; 0x09
    35a2:	12 86       	std	Z+10, r1	; 0x0a
    35a4:	13 86       	std	Z+11, r1	; 0x0b
    35a6:	14 86       	std	Z+12, r1	; 0x0c
    35a8:	15 86       	std	Z+13, r1	; 0x0d
    35aa:	b1 2c       	mov	r11, r1
    35ac:	f8 01       	movw	r30, r16
    35ae:	42 85       	ldd	r20, Z+10	; 0x0a
    35b0:	53 85       	ldd	r21, Z+11	; 0x0b
    35b2:	64 85       	ldd	r22, Z+12	; 0x0c
    35b4:	75 85       	ldd	r23, Z+13	; 0x0d
    35b6:	83 89       	ldd	r24, Z+19	; 0x13
    35b8:	94 89       	ldd	r25, Z+20	; 0x14
    35ba:	a5 89       	ldd	r26, Z+21	; 0x15
    35bc:	b6 89       	ldd	r27, Z+22	; 0x16
    35be:	48 17       	cp	r20, r24
    35c0:	59 07       	cpc	r21, r25
    35c2:	6a 07       	cpc	r22, r26
    35c4:	7b 07       	cpc	r23, r27
    35c6:	08 f0       	brcs	.+2      	; 0x35ca <_ZN6SdFile4openEPS_PKch+0x82>
    35c8:	44 c0       	rjmp	.+136    	; 0x3652 <_ZN6SdFile4openEPS_PKch+0x10a>
    35ca:	68 94       	set
    35cc:	14 f8       	bld	r1, 4
    35ce:	76 95       	lsr	r23
    35d0:	67 95       	ror	r22
    35d2:	57 95       	ror	r21
    35d4:	47 95       	ror	r20
    35d6:	16 94       	lsr	r1
    35d8:	d1 f7       	brne	.-12     	; 0x35ce <_ZN6SdFile4openEPS_PKch+0x86>
    35da:	f4 2f       	mov	r31, r20
    35dc:	ff 70       	andi	r31, 0x0F	; 15
    35de:	df 2e       	mov	r13, r31
    35e0:	c8 01       	movw	r24, r16
    35e2:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <_ZN6SdFile12readDirCacheEv>
    35e6:	00 97       	sbiw	r24, 0x00	; 0
    35e8:	09 f4       	brne	.+2      	; 0x35ec <_ZN6SdFile4openEPS_PKch+0xa4>
    35ea:	91 c0       	rjmp	.+290    	; 0x370e <_ZN6SdFile4openEPS_PKch+0x1c6>
    35ec:	fc 01       	movw	r30, r24
    35ee:	20 81       	ld	r18, Z
    35f0:	22 23       	and	r18, r18
    35f2:	11 f0       	breq	.+4      	; 0x35f8 <_ZN6SdFile4openEPS_PKch+0xb0>
    35f4:	25 3e       	cpi	r18, 0xE5	; 229
    35f6:	b9 f4       	brne	.+46     	; 0x3626 <_ZN6SdFile4openEPS_PKch+0xde>
    35f8:	b1 10       	cpse	r11, r1
    35fa:	10 c0       	rjmp	.+32     	; 0x361c <_ZN6SdFile4openEPS_PKch+0xd4>
    35fc:	f7 01       	movw	r30, r14
    35fe:	d2 8a       	std	Z+18, r13	; 0x12
    3600:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E>
    3604:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3608:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    360c:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3610:	46 87       	std	Z+14, r20	; 0x0e
    3612:	57 87       	std	Z+15, r21	; 0x0f
    3614:	60 8b       	std	Z+16, r22	; 0x10
    3616:	71 8b       	std	Z+17, r23	; 0x11
    3618:	bb 24       	eor	r11, r11
    361a:	b3 94       	inc	r11
    361c:	fc 01       	movw	r30, r24
    361e:	80 81       	ld	r24, Z
    3620:	81 11       	cpse	r24, r1
    3622:	c4 cf       	rjmp	.-120    	; 0x35ac <_ZN6SdFile4openEPS_PKch+0x64>
    3624:	16 c0       	rjmp	.+44     	; 0x3652 <_ZN6SdFile4openEPS_PKch+0x10a>
    3626:	4b e0       	ldi	r20, 0x0B	; 11
    3628:	50 e0       	ldi	r21, 0x00	; 0
    362a:	bc 01       	movw	r22, r24
    362c:	ce 01       	movw	r24, r28
    362e:	01 96       	adiw	r24, 0x01	; 1
    3630:	0e 94 6d 30 	call	0x60da	; 0x60da <memcmp>
    3634:	89 2b       	or	r24, r25
    3636:	09 f0       	breq	.+2      	; 0x363a <_ZN6SdFile4openEPS_PKch+0xf2>
    3638:	b9 cf       	rjmp	.-142    	; 0x35ac <_ZN6SdFile4openEPS_PKch+0x64>
    363a:	8a 2d       	mov	r24, r10
    363c:	80 73       	andi	r24, 0x30	; 48
    363e:	80 33       	cpi	r24, 0x30	; 48
    3640:	09 f4       	brne	.+2      	; 0x3644 <_ZN6SdFile4openEPS_PKch+0xfc>
    3642:	65 c0       	rjmp	.+202    	; 0x370e <_ZN6SdFile4openEPS_PKch+0x1c6>
    3644:	4a 2d       	mov	r20, r10
    3646:	6d 2d       	mov	r22, r13
    3648:	c7 01       	movw	r24, r14
    364a:	0e 94 36 1a 	call	0x346c	; 0x346c <_ZN6SdFile15openCachedEntryEhh>
    364e:	c8 2e       	mov	r12, r24
    3650:	5e c0       	rjmp	.+188    	; 0x370e <_ZN6SdFile4openEPS_PKch+0x1c6>
    3652:	8a 2d       	mov	r24, r10
    3654:	82 71       	andi	r24, 0x12	; 18
    3656:	82 31       	cpi	r24, 0x12	; 18
    3658:	09 f0       	breq	.+2      	; 0x365c <_ZN6SdFile4openEPS_PKch+0x114>
    365a:	59 c0       	rjmp	.+178    	; 0x370e <_ZN6SdFile4openEPS_PKch+0x1c6>
    365c:	bb 20       	and	r11, r11
    365e:	41 f0       	breq	.+16     	; 0x3670 <_ZN6SdFile4openEPS_PKch+0x128>
    3660:	61 e0       	ldi	r22, 0x01	; 1
    3662:	c7 01       	movw	r24, r14
    3664:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <_ZN6SdFile13cacheDirEntryEh>
    3668:	8c 01       	movw	r16, r24
    366a:	89 2b       	or	r24, r25
    366c:	89 f4       	brne	.+34     	; 0x3690 <_ZN6SdFile4openEPS_PKch+0x148>
    366e:	4f c0       	rjmp	.+158    	; 0x370e <_ZN6SdFile4openEPS_PKch+0x1c6>
    3670:	f8 01       	movw	r30, r16
    3672:	85 81       	ldd	r24, Z+5	; 0x05
    3674:	82 30       	cpi	r24, 0x02	; 2
    3676:	09 f4       	brne	.+2      	; 0x367a <_ZN6SdFile4openEPS_PKch+0x132>
    3678:	4a c0       	rjmp	.+148    	; 0x370e <_ZN6SdFile4openEPS_PKch+0x1c6>
    367a:	c8 01       	movw	r24, r16
    367c:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <_ZN6SdFile13addDirClusterEv>
    3680:	c8 2e       	mov	r12, r24
    3682:	88 23       	and	r24, r24
    3684:	09 f4       	brne	.+2      	; 0x3688 <_ZN6SdFile4openEPS_PKch+0x140>
    3686:	43 c0       	rjmp	.+134    	; 0x370e <_ZN6SdFile4openEPS_PKch+0x1c6>
    3688:	f7 01       	movw	r30, r14
    368a:	12 8a       	std	Z+18, r1	; 0x12
    368c:	01 e5       	ldi	r16, 0x51	; 81
    368e:	14 e0       	ldi	r17, 0x04	; 4
    3690:	80 e2       	ldi	r24, 0x20	; 32
    3692:	f8 01       	movw	r30, r16
    3694:	11 92       	st	Z+, r1
    3696:	8a 95       	dec	r24
    3698:	e9 f7       	brne	.-6      	; 0x3694 <_ZN6SdFile4openEPS_PKch+0x14c>
    369a:	8b e0       	ldi	r24, 0x0B	; 11
    369c:	fe 01       	movw	r30, r28
    369e:	31 96       	adiw	r30, 0x01	; 1
    36a0:	d8 01       	movw	r26, r16
    36a2:	01 90       	ld	r0, Z+
    36a4:	0d 92       	st	X+, r0
    36a6:	8a 95       	dec	r24
    36a8:	e1 f7       	brne	.-8      	; 0x36a2 <_ZN6SdFile4openEPS_PKch+0x15a>
    36aa:	e0 91 48 04 	lds	r30, 0x0448	; 0x800448 <_ZN6SdFile9dateTime_E>
    36ae:	f0 91 49 04 	lds	r31, 0x0449	; 0x800449 <_ZN6SdFile9dateTime_E+0x1>
    36b2:	30 97       	sbiw	r30, 0x00	; 0
    36b4:	39 f0       	breq	.+14     	; 0x36c4 <_ZN6SdFile4openEPS_PKch+0x17c>
    36b6:	b8 01       	movw	r22, r16
    36b8:	62 5f       	subi	r22, 0xF2	; 242
    36ba:	7f 4f       	sbci	r23, 0xFF	; 255
    36bc:	c8 01       	movw	r24, r16
    36be:	40 96       	adiw	r24, 0x10	; 16
    36c0:	09 95       	icall
    36c2:	09 c0       	rjmp	.+18     	; 0x36d6 <_ZN6SdFile4openEPS_PKch+0x18e>
    36c4:	81 e2       	ldi	r24, 0x21	; 33
    36c6:	98 e2       	ldi	r25, 0x28	; 40
    36c8:	f8 01       	movw	r30, r16
    36ca:	91 8b       	std	Z+17, r25	; 0x11
    36cc:	80 8b       	std	Z+16, r24	; 0x10
    36ce:	80 e0       	ldi	r24, 0x00	; 0
    36d0:	98 e0       	ldi	r25, 0x08	; 8
    36d2:	97 87       	std	Z+15, r25	; 0x0f
    36d4:	86 87       	std	Z+14, r24	; 0x0e
    36d6:	f8 01       	movw	r30, r16
    36d8:	80 89       	ldd	r24, Z+16	; 0x10
    36da:	91 89       	ldd	r25, Z+17	; 0x11
    36dc:	93 8b       	std	Z+19, r25	; 0x13
    36de:	82 8b       	std	Z+18, r24	; 0x12
    36e0:	91 8f       	std	Z+25, r25	; 0x19
    36e2:	80 8f       	std	Z+24, r24	; 0x18
    36e4:	86 85       	ldd	r24, Z+14	; 0x0e
    36e6:	97 85       	ldd	r25, Z+15	; 0x0f
    36e8:	97 8b       	std	Z+23, r25	; 0x17
    36ea:	86 8b       	std	Z+22, r24	; 0x16
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <_ZN8SdVolume10cacheFlushEh>
    36f2:	c8 2e       	mov	r12, r24
    36f4:	88 23       	and	r24, r24
    36f6:	59 f0       	breq	.+22     	; 0x370e <_ZN6SdFile4openEPS_PKch+0x1c6>
    36f8:	f7 01       	movw	r30, r14
    36fa:	62 89       	ldd	r22, Z+18	; 0x12
    36fc:	4a 2d       	mov	r20, r10
    36fe:	c7 01       	movw	r24, r14
    3700:	0e 94 36 1a 	call	0x346c	; 0x346c <_ZN6SdFile15openCachedEntryEhh>
    3704:	c8 2e       	mov	r12, r24
    3706:	03 c0       	rjmp	.+6      	; 0x370e <_ZN6SdFile4openEPS_PKch+0x1c6>
    3708:	c1 2c       	mov	r12, r1
    370a:	01 c0       	rjmp	.+2      	; 0x370e <_ZN6SdFile4openEPS_PKch+0x1c6>
    370c:	c8 2e       	mov	r12, r24
    370e:	8c 2d       	mov	r24, r12
    3710:	2b 96       	adiw	r28, 0x0b	; 11
    3712:	0f b6       	in	r0, 0x3f	; 63
    3714:	f8 94       	cli
    3716:	de bf       	out	0x3e, r29	; 62
    3718:	0f be       	out	0x3f, r0	; 63
    371a:	cd bf       	out	0x3d, r28	; 61
    371c:	df 91       	pop	r29
    371e:	cf 91       	pop	r28
    3720:	1f 91       	pop	r17
    3722:	0f 91       	pop	r16
    3724:	ff 90       	pop	r15
    3726:	ef 90       	pop	r14
    3728:	df 90       	pop	r13
    372a:	cf 90       	pop	r12
    372c:	bf 90       	pop	r11
    372e:	af 90       	pop	r10
    3730:	08 95       	ret

00003732 <_ZN6SdFile6removeEv>:
    3732:	cf 93       	push	r28
    3734:	df 93       	push	r29
    3736:	ec 01       	movw	r28, r24
    3738:	40 e0       	ldi	r20, 0x00	; 0
    373a:	50 e0       	ldi	r21, 0x00	; 0
    373c:	ba 01       	movw	r22, r20
    373e:	0e 94 65 19 	call	0x32ca	; 0x32ca <_ZN6SdFile8truncateEm>
    3742:	88 23       	and	r24, r24
    3744:	79 f0       	breq	.+30     	; 0x3764 <_ZN6SdFile6removeEv+0x32>
    3746:	61 e0       	ldi	r22, 0x01	; 1
    3748:	ce 01       	movw	r24, r28
    374a:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <_ZN6SdFile13cacheDirEntryEh>
    374e:	00 97       	sbiw	r24, 0x00	; 0
    3750:	41 f0       	breq	.+16     	; 0x3762 <_ZN6SdFile6removeEv+0x30>
    3752:	25 ee       	ldi	r18, 0xE5	; 229
    3754:	fc 01       	movw	r30, r24
    3756:	20 83       	st	Z, r18
    3758:	1d 82       	std	Y+5, r1	; 0x05
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <_ZN8SdVolume10cacheFlushEh>
    3760:	01 c0       	rjmp	.+2      	; 0x3764 <_ZN6SdFile6removeEv+0x32>
    3762:	80 e0       	ldi	r24, 0x00	; 0
    3764:	df 91       	pop	r29
    3766:	cf 91       	pop	r28
    3768:	08 95       	ret

0000376a <_ZN6SdFile6removeEPS_PKc>:
    376a:	cf 93       	push	r28
    376c:	df 93       	push	r29
    376e:	cd b7       	in	r28, 0x3d	; 61
    3770:	de b7       	in	r29, 0x3e	; 62
    3772:	6d 97       	sbiw	r28, 0x1d	; 29
    3774:	0f b6       	in	r0, 0x3f	; 63
    3776:	f8 94       	cli
    3778:	de bf       	out	0x3e, r29	; 62
    377a:	0f be       	out	0x3f, r0	; 63
    377c:	cd bf       	out	0x3d, r28	; 61
    377e:	ab 01       	movw	r20, r22
    3780:	1c 82       	std	Y+4, r1	; 0x04
    3782:	1b 82       	std	Y+3, r1	; 0x03
    3784:	2b eb       	ldi	r18, 0xBB	; 187
    3786:	31 e0       	ldi	r19, 0x01	; 1
    3788:	3a 83       	std	Y+2, r19	; 0x02
    378a:	29 83       	std	Y+1, r18	; 0x01
    378c:	1e 82       	std	Y+6, r1	; 0x06
    378e:	22 e0       	ldi	r18, 0x02	; 2
    3790:	bc 01       	movw	r22, r24
    3792:	ce 01       	movw	r24, r28
    3794:	01 96       	adiw	r24, 0x01	; 1
    3796:	0e 94 a4 1a 	call	0x3548	; 0x3548 <_ZN6SdFile4openEPS_PKch>
    379a:	88 23       	and	r24, r24
    379c:	21 f0       	breq	.+8      	; 0x37a6 <_ZN6SdFile6removeEPS_PKc+0x3c>
    379e:	ce 01       	movw	r24, r28
    37a0:	01 96       	adiw	r24, 0x01	; 1
    37a2:	0e 94 99 1b 	call	0x3732	; 0x3732 <_ZN6SdFile6removeEv>
    37a6:	6d 96       	adiw	r28, 0x1d	; 29
    37a8:	0f b6       	in	r0, 0x3f	; 63
    37aa:	f8 94       	cli
    37ac:	de bf       	out	0x3e, r29	; 62
    37ae:	0f be       	out	0x3f, r0	; 63
    37b0:	cd bf       	out	0x3d, r28	; 61
    37b2:	df 91       	pop	r29
    37b4:	cf 91       	pop	r28
    37b6:	08 95       	ret

000037b8 <_ZN6SdFile5writeEPKvj>:
   \a nbyte.  If an error occurs, write() returns 0.  Possible errors
   include write() is called before a file has been opened, write is called
   for a read-only file, device is full, a corrupt file system or an I/O error.

*/
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    37b8:	3f 92       	push	r3
    37ba:	4f 92       	push	r4
    37bc:	5f 92       	push	r5
    37be:	6f 92       	push	r6
    37c0:	7f 92       	push	r7
    37c2:	8f 92       	push	r8
    37c4:	9f 92       	push	r9
    37c6:	af 92       	push	r10
    37c8:	bf 92       	push	r11
    37ca:	cf 92       	push	r12
    37cc:	df 92       	push	r13
    37ce:	ef 92       	push	r14
    37d0:	ff 92       	push	r15
    37d2:	0f 93       	push	r16
    37d4:	1f 93       	push	r17
    37d6:	cf 93       	push	r28
    37d8:	df 93       	push	r29
    37da:	00 d0       	rcall	.+0      	; 0x37dc <_ZN6SdFile5writeEPKvj+0x24>
    37dc:	00 d0       	rcall	.+0      	; 0x37de <_ZN6SdFile5writeEPKvj+0x26>
    37de:	00 d0       	rcall	.+0      	; 0x37e0 <_ZN6SdFile5writeEPKvj+0x28>
    37e0:	cd b7       	in	r28, 0x3d	; 61
    37e2:	de b7       	in	r29, 0x3e	; 62
    37e4:	6c 01       	movw	r12, r24
    37e6:	7b 01       	movw	r14, r22
    37e8:	5e 83       	std	Y+6, r21	; 0x06
    37ea:	4d 83       	std	Y+5, r20	; 0x05
  const uint8_t* src = reinterpret_cast<const uint8_t*>(buf);

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;
  // if blocking writes should be used
  uint8_t blocking = (flags_ & F_FILE_NON_BLOCKING_WRITE) == 0x00;
    37ec:	dc 01       	movw	r26, r24
    37ee:	14 96       	adiw	r26, 0x04	; 4
    37f0:	9c 91       	ld	r25, X
    37f2:	14 97       	sbiw	r26, 0x04	; 4
    37f4:	29 2f       	mov	r18, r25
    37f6:	22 95       	swap	r18
    37f8:	2f 70       	andi	r18, 0x0F	; 15
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	82 27       	eor	r24, r18
    37fe:	81 70       	andi	r24, 0x01	; 1
    3800:	38 2e       	mov	r3, r24
    uint8_t isDir(void) const {
      return type_ >= FAT_FILE_TYPE_MIN_DIR;
    }
    /** \return True if this is a SdFile for a file else false. */
    uint8_t isFile(void) const {
      return type_ == FAT_FILE_TYPE_NORMAL;
    3802:	15 96       	adiw	r26, 0x05	; 5
    3804:	8c 91       	ld	r24, X

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) {
    3806:	81 30       	cpi	r24, 0x01	; 1
    3808:	19 f4       	brne	.+6      	; 0x3810 <_ZN6SdFile5writeEPKvj+0x58>
    380a:	91 fd       	sbrc	r25, 1
    380c:	03 c0       	rjmp	.+6      	; 0x3814 <_ZN6SdFile5writeEPKvj+0x5c>
    380e:	03 c0       	rjmp	.+6      	; 0x3816 <_ZN6SdFile5writeEPKvj+0x5e>
    3810:	81 e0       	ldi	r24, 0x01	; 1
    3812:	01 c0       	rjmp	.+2      	; 0x3816 <_ZN6SdFile5writeEPKvj+0x5e>
    3814:	80 e0       	ldi	r24, 0x00	; 0
    3816:	81 11       	cpse	r24, r1
    3818:	66 c1       	rjmp	.+716    	; 0x3ae6 <_ZN6SdFile5writeEPKvj+0x32e>
    goto writeErrorReturn;
  }

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    381a:	92 fd       	sbrc	r25, 2
    381c:	03 c0       	rjmp	.+6      	; 0x3824 <_ZN6SdFile5writeEPKvj+0x6c>
  uint16_t nToWrite = nbyte;
  // if blocking writes should be used
  uint8_t blocking = (flags_ & F_FILE_NON_BLOCKING_WRITE) == 0x00;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) {
    381e:	8d 80       	ldd	r8, Y+5	; 0x05
    3820:	9e 80       	ldd	r9, Y+6	; 0x06
    3822:	15 c0       	rjmp	.+42     	; 0x384e <_ZN6SdFile5writeEPKvj+0x96>
    goto writeErrorReturn;
  }

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    3824:	f6 01       	movw	r30, r12
    3826:	82 85       	ldd	r24, Z+10	; 0x0a
    3828:	93 85       	ldd	r25, Z+11	; 0x0b
    382a:	a4 85       	ldd	r26, Z+12	; 0x0c
    382c:	b5 85       	ldd	r27, Z+13	; 0x0d
    382e:	43 89       	ldd	r20, Z+19	; 0x13
    3830:	54 89       	ldd	r21, Z+20	; 0x14
    3832:	65 89       	ldd	r22, Z+21	; 0x15
    3834:	76 89       	ldd	r23, Z+22	; 0x16
    3836:	84 17       	cp	r24, r20
    3838:	95 07       	cpc	r25, r21
    383a:	a6 07       	cpc	r26, r22
    383c:	b7 07       	cpc	r27, r23
    383e:	79 f3       	breq	.-34     	; 0x381e <_ZN6SdFile5writeEPKvj+0x66>
    /**
        Set the files current position to end of file.  Useful to position
        a file for append. See seekSet().
    */
    uint8_t seekEnd(void) {
      return seekSet(fileSize_);
    3840:	c6 01       	movw	r24, r12
    3842:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) {
    3846:	88 23       	and	r24, r24
    3848:	09 f4       	brne	.+2      	; 0x384c <_ZN6SdFile5writeEPKvj+0x94>
    384a:	4d c1       	rjmp	.+666    	; 0x3ae6 <_ZN6SdFile5writeEPKvj+0x32e>
    384c:	e8 cf       	rjmp	.-48     	; 0x381e <_ZN6SdFile5writeEPKvj+0x66>
      goto writeErrorReturn;
    }
  }

  while (nToWrite > 0) {
    384e:	81 14       	cp	r8, r1
    3850:	91 04       	cpc	r9, r1
    3852:	09 f4       	brne	.+2      	; 0x3856 <_ZN6SdFile5writeEPKvj+0x9e>
    3854:	1b c1       	rjmp	.+566    	; 0x3a8c <_ZN6SdFile5writeEPKvj+0x2d4>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    3856:	d6 01       	movw	r26, r12
    3858:	1a 96       	adiw	r26, 0x0a	; 10
    385a:	0d 91       	ld	r16, X+
    385c:	1d 91       	ld	r17, X+
    385e:	2d 91       	ld	r18, X+
    3860:	3c 91       	ld	r19, X
    3862:	1d 97       	sbiw	r26, 0x0d	; 13
    3864:	5b 96       	adiw	r26, 0x1b	; 27
    3866:	ed 91       	ld	r30, X+
    3868:	fc 91       	ld	r31, X
    386a:	5c 97       	sbiw	r26, 0x1c	; 28
    uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
    uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
    //----------------------------------------------------------------------------
    uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
    uint8_t blockOfCluster(uint32_t position) const {
      return (position >> 9) & (blocksPerCluster_ - 1);
    386c:	d9 01       	movw	r26, r18
    386e:	c8 01       	movw	r24, r16
    3870:	07 2e       	mov	r0, r23
    3872:	79 e0       	ldi	r23, 0x09	; 9
    3874:	b6 95       	lsr	r27
    3876:	a7 95       	ror	r26
    3878:	97 95       	ror	r25
    387a:	87 95       	ror	r24
    387c:	7a 95       	dec	r23
    387e:	d1 f7       	brne	.-12     	; 0x3874 <_ZN6SdFile5writeEPKvj+0xbc>
    3880:	70 2d       	mov	r23, r0
    3882:	74 80       	ldd	r7, Z+4	; 0x04
    3884:	7a 94       	dec	r7
    3886:	78 22       	and	r7, r24
    uint16_t blockOffset = curPosition_ & 0X1FF;
    3888:	11 70       	andi	r17, 0x01	; 1
    if (blockOfCluster == 0 && blockOffset == 0) {
    388a:	71 10       	cpse	r7, r1
    388c:	54 c0       	rjmp	.+168    	; 0x3936 <_ZN6SdFile5writeEPKvj+0x17e>
    388e:	01 15       	cp	r16, r1
    3890:	11 05       	cpc	r17, r1
    3892:	09 f0       	breq	.+2      	; 0x3896 <_ZN6SdFile5writeEPKvj+0xde>
    3894:	50 c0       	rjmp	.+160    	; 0x3936 <_ZN6SdFile5writeEPKvj+0x17e>
      // start of new cluster
      if (curCluster_ == 0) {
    3896:	d6 01       	movw	r26, r12
    3898:	16 96       	adiw	r26, 0x06	; 6
    389a:	4d 91       	ld	r20, X+
    389c:	5d 91       	ld	r21, X+
    389e:	6d 91       	ld	r22, X+
    38a0:	7c 91       	ld	r23, X
    38a2:	19 97       	sbiw	r26, 0x09	; 9
    38a4:	41 15       	cp	r20, r1
    38a6:	51 05       	cpc	r21, r1
    38a8:	61 05       	cpc	r22, r1
    38aa:	71 05       	cpc	r23, r1
    38ac:	b1 f4       	brne	.+44     	; 0x38da <_ZN6SdFile5writeEPKvj+0x122>
        if (firstCluster_ == 0) {
    38ae:	57 96       	adiw	r26, 0x17	; 23
    38b0:	8d 91       	ld	r24, X+
    38b2:	9d 91       	ld	r25, X+
    38b4:	0d 90       	ld	r0, X+
    38b6:	bc 91       	ld	r27, X
    38b8:	a0 2d       	mov	r26, r0
    38ba:	00 97       	sbiw	r24, 0x00	; 0
    38bc:	a1 05       	cpc	r26, r1
    38be:	b1 05       	cpc	r27, r1
    38c0:	31 f4       	brne	.+12     	; 0x38ce <_ZN6SdFile5writeEPKvj+0x116>
          // allocate first cluster of file
          if (!addCluster()) {
    38c2:	c6 01       	movw	r24, r12
    38c4:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <_ZN6SdFile10addClusterEv>
    38c8:	81 11       	cpse	r24, r1
    38ca:	35 c0       	rjmp	.+106    	; 0x3936 <_ZN6SdFile5writeEPKvj+0x17e>
    38cc:	0c c1       	rjmp	.+536    	; 0x3ae6 <_ZN6SdFile5writeEPKvj+0x32e>
            goto writeErrorReturn;
          }
        } else {
          curCluster_ = firstCluster_;
    38ce:	f6 01       	movw	r30, r12
    38d0:	86 83       	std	Z+6, r24	; 0x06
    38d2:	97 83       	std	Z+7, r25	; 0x07
    38d4:	a0 87       	std	Z+8, r26	; 0x08
    38d6:	b1 87       	std	Z+9, r27	; 0x09
    38d8:	2e c0       	rjmp	.+92     	; 0x3936 <_ZN6SdFile5writeEPKvj+0x17e>
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) {
    38da:	9e 01       	movw	r18, r28
    38dc:	2f 5f       	subi	r18, 0xFF	; 255
    38de:	3f 4f       	sbci	r19, 0xFF	; 255
    38e0:	cf 01       	movw	r24, r30
    38e2:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <_ZNK8SdVolume6fatGetEmPm>
    38e6:	81 11       	cpse	r24, r1
    38e8:	02 c0       	rjmp	.+4      	; 0x38ee <_ZN6SdFile5writeEPKvj+0x136>
          return false;
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	0b c1       	rjmp	.+534    	; 0x3b04 <_ZN6SdFile5writeEPKvj+0x34c>
        }
        if (vol_->isEOC(next)) {
    38ee:	89 81       	ldd	r24, Y+1	; 0x01
    38f0:	9a 81       	ldd	r25, Y+2	; 0x02
    38f2:	ab 81       	ldd	r26, Y+3	; 0x03
    38f4:	bc 81       	ldd	r27, Y+4	; 0x04
    38f6:	f6 01       	movw	r30, r12
    38f8:	23 8d       	ldd	r18, Z+27	; 0x1b
    38fa:	34 8d       	ldd	r19, Z+28	; 0x1c
    uint8_t fatPutEOC(uint32_t cluster) {
      return fatPut(cluster, 0x0FFFFFFF);
    }
    uint8_t freeChain(uint32_t cluster);
    uint8_t isEOC(uint32_t cluster) const {
      return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    38fc:	f9 01       	movw	r30, r18
    38fe:	27 89       	ldd	r18, Z+23	; 0x17
    3900:	20 31       	cpi	r18, 0x10	; 16
    3902:	29 f4       	brne	.+10     	; 0x390e <_ZN6SdFile5writeEPKvj+0x156>
    3904:	48 ef       	ldi	r20, 0xF8	; 248
    3906:	5f ef       	ldi	r21, 0xFF	; 255
    3908:	60 e0       	ldi	r22, 0x00	; 0
    390a:	70 e0       	ldi	r23, 0x00	; 0
    390c:	04 c0       	rjmp	.+8      	; 0x3916 <_ZN6SdFile5writeEPKvj+0x15e>
    390e:	48 ef       	ldi	r20, 0xF8	; 248
    3910:	5f ef       	ldi	r21, 0xFF	; 255
    3912:	6f ef       	ldi	r22, 0xFF	; 255
    3914:	7f e0       	ldi	r23, 0x0F	; 15
    3916:	84 17       	cp	r24, r20
    3918:	95 07       	cpc	r25, r21
    391a:	a6 07       	cpc	r26, r22
    391c:	b7 07       	cpc	r27, r23
    391e:	30 f0       	brcs	.+12     	; 0x392c <_ZN6SdFile5writeEPKvj+0x174>
          // add cluster if at end of chain
          if (!addCluster()) {
    3920:	c6 01       	movw	r24, r12
    3922:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <_ZN6SdFile10addClusterEv>
    3926:	81 11       	cpse	r24, r1
    3928:	06 c0       	rjmp	.+12     	; 0x3936 <_ZN6SdFile5writeEPKvj+0x17e>
    392a:	dd c0       	rjmp	.+442    	; 0x3ae6 <_ZN6SdFile5writeEPKvj+0x32e>
            goto writeErrorReturn;
          }
        } else {
          curCluster_ = next;
    392c:	f6 01       	movw	r30, r12
    392e:	86 83       	std	Z+6, r24	; 0x06
    3930:	97 83       	std	Z+7, r25	; 0x07
    3932:	a0 87       	std	Z+8, r26	; 0x08
    3934:	b1 87       	std	Z+9, r27	; 0x09
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    3936:	80 e0       	ldi	r24, 0x00	; 0
    3938:	92 e0       	ldi	r25, 0x02	; 2
    393a:	5c 01       	movw	r10, r24
    393c:	a0 1a       	sub	r10, r16
    393e:	b1 0a       	sbc	r11, r17

    // lesser of space and amount to write
    if (n > nToWrite) {
    3940:	8a 14       	cp	r8, r10
    3942:	9b 04       	cpc	r9, r11
    3944:	08 f4       	brcc	.+2      	; 0x3948 <_ZN6SdFile5writeEPKvj+0x190>
      n = nToWrite;
    3946:	54 01       	movw	r10, r8
    }

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3948:	f6 01       	movw	r30, r12
    394a:	86 81       	ldd	r24, Z+6	; 0x06
    394c:	97 81       	ldd	r25, Z+7	; 0x07
    394e:	a0 85       	ldd	r26, Z+8	; 0x08
    3950:	b1 85       	ldd	r27, Z+9	; 0x09
    3952:	23 8d       	ldd	r18, Z+27	; 0x1b
    3954:	34 8d       	ldd	r19, Z+28	; 0x1c
    uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
    uint8_t blockOfCluster(uint32_t position) const {
      return (position >> 9) & (blocksPerCluster_ - 1);
    }
    uint32_t clusterStartBlock(uint32_t cluster) const {
      return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);
    3956:	f9 01       	movw	r30, r18
    3958:	46 85       	ldd	r20, Z+14	; 0x0e
    395a:	57 85       	ldd	r21, Z+15	; 0x0f
    395c:	60 89       	ldd	r22, Z+16	; 0x10
    395e:	71 89       	ldd	r23, Z+17	; 0x11
    3960:	02 97       	sbiw	r24, 0x02	; 2
    3962:	a1 09       	sbc	r26, r1
    3964:	b1 09       	sbc	r27, r1
    3966:	05 84       	ldd	r0, Z+13	; 0x0d
    3968:	04 c0       	rjmp	.+8      	; 0x3972 <_ZN6SdFile5writeEPKvj+0x1ba>
    396a:	88 0f       	add	r24, r24
    396c:	99 1f       	adc	r25, r25
    396e:	aa 1f       	adc	r26, r26
    3970:	bb 1f       	adc	r27, r27
    3972:	0a 94       	dec	r0
    3974:	d2 f7       	brpl	.-12     	; 0x396a <_ZN6SdFile5writeEPKvj+0x1b2>
    3976:	84 0f       	add	r24, r20
    3978:	95 1f       	adc	r25, r21
    397a:	a6 1f       	adc	r26, r22
    397c:	b7 1f       	adc	r27, r23
    397e:	9c 01       	movw	r18, r24
    3980:	ad 01       	movw	r20, r26
    3982:	27 0d       	add	r18, r7
    3984:	31 1d       	adc	r19, r1
    3986:	41 1d       	adc	r20, r1
    3988:	51 1d       	adc	r21, r1
    398a:	29 01       	movw	r4, r18
    398c:	3a 01       	movw	r6, r20
    if (n == 512) {
    398e:	a1 14       	cp	r10, r1
    3990:	32 e0       	ldi	r19, 0x02	; 2
    3992:	b3 06       	cpc	r11, r19
    3994:	41 f5       	brne	.+80     	; 0x39e6 <_ZN6SdFile5writeEPKvj+0x22e>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    3996:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E>
    399a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    399e:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    39a2:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    39a6:	48 16       	cp	r4, r24
    39a8:	59 06       	cpc	r5, r25
    39aa:	6a 06       	cpc	r6, r26
    39ac:	7b 06       	cpc	r7, r27
    39ae:	59 f4       	brne	.+22     	; 0x39c6 <_ZN6SdFile5writeEPKvj+0x20e>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    39b0:	8f ef       	ldi	r24, 0xFF	; 255
    39b2:	9f ef       	ldi	r25, 0xFF	; 255
    39b4:	dc 01       	movw	r26, r24
    39b6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E>
    39ba:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    39be:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    39c2:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    uint8_t readData(uint32_t block, uint16_t offset,
                     uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
    }
    uint8_t writeBlock(uint32_t block, const uint8_t* dst, uint8_t blocking = 1) {
      return sdCard_->writeBlock(block, dst, blocking);
    39c6:	03 2d       	mov	r16, r3
    39c8:	97 01       	movw	r18, r14
    39ca:	b3 01       	movw	r22, r6
    39cc:	a2 01       	movw	r20, r4
    39ce:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <_ZN8SdVolume7sdCard_E>
    39d2:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <_ZN8SdVolume7sdCard_E+0x1>
    39d6:	0e 94 94 14 	call	0x2928	; 0x2928 <_ZN7Sd2Card10writeBlockEmPKhh>
      }
      if (!vol_->writeBlock(block, src, blocking)) {
    39da:	88 23       	and	r24, r24
    39dc:	09 f4       	brne	.+2      	; 0x39e0 <_ZN6SdFile5writeEPKvj+0x228>
    39de:	83 c0       	rjmp	.+262    	; 0x3ae6 <_ZN6SdFile5writeEPKvj+0x32e>
        goto writeErrorReturn;
      }
      src += 512;
    39e0:	4e ef       	ldi	r20, 0xFE	; 254
    39e2:	f4 1a       	sub	r15, r20
    39e4:	43 c0       	rjmp	.+134    	; 0x3a6c <_ZN6SdFile5writeEPKvj+0x2b4>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    39e6:	01 15       	cp	r16, r1
    39e8:	11 05       	cpc	r17, r1
    39ea:	31 f5       	brne	.+76     	; 0x3a38 <_ZN6SdFile5writeEPKvj+0x280>
    39ec:	d6 01       	movw	r26, r12
    39ee:	1a 96       	adiw	r26, 0x0a	; 10
    39f0:	4d 91       	ld	r20, X+
    39f2:	5d 91       	ld	r21, X+
    39f4:	6d 91       	ld	r22, X+
    39f6:	7c 91       	ld	r23, X
    39f8:	1d 97       	sbiw	r26, 0x0d	; 13
    39fa:	53 96       	adiw	r26, 0x13	; 19
    39fc:	8d 91       	ld	r24, X+
    39fe:	9d 91       	ld	r25, X+
    3a00:	0d 90       	ld	r0, X+
    3a02:	bc 91       	ld	r27, X
    3a04:	a0 2d       	mov	r26, r0
    3a06:	48 17       	cp	r20, r24
    3a08:	59 07       	cpc	r21, r25
    3a0a:	6a 07       	cpc	r22, r26
    3a0c:	7b 07       	cpc	r23, r27
    3a0e:	a0 f0       	brcs	.+40     	; 0x3a38 <_ZN6SdFile5writeEPKvj+0x280>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) {
    3a10:	81 e0       	ldi	r24, 0x01	; 1
    3a12:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <_ZN8SdVolume10cacheFlushEh>
    3a16:	88 23       	and	r24, r24
    3a18:	09 f4       	brne	.+2      	; 0x3a1c <_ZN6SdFile5writeEPKvj+0x264>
    3a1a:	65 c0       	rjmp	.+202    	; 0x3ae6 <_ZN6SdFile5writeEPKvj+0x32e>
          goto writeErrorReturn;
        }
        SdVolume::cacheBlockNumber_ = block;
    3a1c:	40 92 0c 01 	sts	0x010C, r4	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E>
    3a20:	50 92 0d 01 	sts	0x010D, r5	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3a24:	60 92 0e 01 	sts	0x010E, r6	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3a28:	70 92 0f 01 	sts	0x010F, r7	; 0x80010f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    }
    static uint8_t cacheFlush(uint8_t blocking = 1);
    static uint8_t cacheMirrorBlockFlush(uint8_t blocking);
    static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
    static void cacheSetDirty(void) {
      cacheDirty_ |= CACHE_FOR_WRITE;
    3a2c:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <_ZN8SdVolume11cacheDirty_E>
    3a30:	81 60       	ori	r24, 0x01	; 1
    3a32:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <_ZN8SdVolume11cacheDirty_E>
    3a36:	08 c0       	rjmp	.+16     	; 0x3a48 <_ZN6SdFile5writeEPKvj+0x290>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    3a38:	41 e0       	ldi	r20, 0x01	; 1
    3a3a:	c3 01       	movw	r24, r6
    3a3c:	b2 01       	movw	r22, r4
    3a3e:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <_ZN8SdVolume13cacheRawBlockEmh>
    3a42:	88 23       	and	r24, r24
    3a44:	09 f4       	brne	.+2      	; 0x3a48 <_ZN6SdFile5writeEPKvj+0x290>
    3a46:	4f c0       	rjmp	.+158    	; 0x3ae6 <_ZN6SdFile5writeEPKvj+0x32e>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    3a48:	f8 01       	movw	r30, r16
    3a4a:	ef 5a       	subi	r30, 0xAF	; 175
    3a4c:	fb 4f       	sbci	r31, 0xFB	; 251
      uint8_t* end = dst + n;
    3a4e:	9f 01       	movw	r18, r30
    3a50:	2a 0d       	add	r18, r10
    3a52:	3b 1d       	adc	r19, r11
      while (dst != end) {
    3a54:	e2 17       	cp	r30, r18
    3a56:	f3 07       	cpc	r31, r19
    3a58:	49 f0       	breq	.+18     	; 0x3a6c <_ZN6SdFile5writeEPKvj+0x2b4>
        *dst++ = *src++;
    3a5a:	d7 01       	movw	r26, r14
    3a5c:	8c 91       	ld	r24, X
    3a5e:	80 83       	st	Z, r24
    3a60:	31 96       	adiw	r30, 0x01	; 1
    3a62:	a7 01       	movw	r20, r14
    3a64:	4f 5f       	subi	r20, 0xFF	; 255
    3a66:	5f 4f       	sbci	r21, 0xFF	; 255
    3a68:	7a 01       	movw	r14, r20
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) {
    3a6a:	f4 cf       	rjmp	.-24     	; 0x3a54 <_ZN6SdFile5writeEPKvj+0x29c>
        *dst++ = *src++;
      }
    }
    nToWrite -= n;
    3a6c:	8a 18       	sub	r8, r10
    3a6e:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    3a70:	f6 01       	movw	r30, r12
    3a72:	82 85       	ldd	r24, Z+10	; 0x0a
    3a74:	93 85       	ldd	r25, Z+11	; 0x0b
    3a76:	a4 85       	ldd	r26, Z+12	; 0x0c
    3a78:	b5 85       	ldd	r27, Z+13	; 0x0d
    3a7a:	8a 0d       	add	r24, r10
    3a7c:	9b 1d       	adc	r25, r11
    3a7e:	a1 1d       	adc	r26, r1
    3a80:	b1 1d       	adc	r27, r1
    3a82:	82 87       	std	Z+10, r24	; 0x0a
    3a84:	93 87       	std	Z+11, r25	; 0x0b
    3a86:	a4 87       	std	Z+12, r26	; 0x0c
    3a88:	b5 87       	std	Z+13, r27	; 0x0d
    if (!seekEnd()) {
      goto writeErrorReturn;
    }
  }

  while (nToWrite > 0) {
    3a8a:	e1 ce       	rjmp	.-574    	; 0x384e <_ZN6SdFile5writeEPKvj+0x96>
      }
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    3a8c:	f6 01       	movw	r30, r12
    3a8e:	82 85       	ldd	r24, Z+10	; 0x0a
    3a90:	93 85       	ldd	r25, Z+11	; 0x0b
    3a92:	a4 85       	ldd	r26, Z+12	; 0x0c
    3a94:	b5 85       	ldd	r27, Z+13	; 0x0d
    3a96:	43 89       	ldd	r20, Z+19	; 0x13
    3a98:	54 89       	ldd	r21, Z+20	; 0x14
    3a9a:	65 89       	ldd	r22, Z+21	; 0x15
    3a9c:	76 89       	ldd	r23, Z+22	; 0x16
    3a9e:	48 17       	cp	r20, r24
    3aa0:	59 07       	cpc	r21, r25
    3aa2:	6a 07       	cpc	r22, r26
    3aa4:	7b 07       	cpc	r23, r27
    3aa6:	40 f4       	brcc	.+16     	; 0x3ab8 <_ZN6SdFile5writeEPKvj+0x300>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    3aa8:	83 8b       	std	Z+19, r24	; 0x13
    3aaa:	94 8b       	std	Z+20, r25	; 0x14
    3aac:	a5 8b       	std	Z+21, r26	; 0x15
    3aae:	b6 8b       	std	Z+22, r27	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    3ab0:	84 81       	ldd	r24, Z+4	; 0x04
    3ab2:	80 68       	ori	r24, 0x80	; 128
    3ab4:	84 83       	std	Z+4, r24	; 0x04
    3ab6:	0d c0       	rjmp	.+26     	; 0x3ad2 <_ZN6SdFile5writeEPKvj+0x31a>
  } else if (dateTime_ && nbyte) {
    3ab8:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <_ZN6SdFile9dateTime_E>
    3abc:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <_ZN6SdFile9dateTime_E+0x1>
    3ac0:	89 2b       	or	r24, r25
    3ac2:	39 f0       	breq	.+14     	; 0x3ad2 <_ZN6SdFile5writeEPKvj+0x31a>
    3ac4:	2d 81       	ldd	r18, Y+5	; 0x05
    3ac6:	3e 81       	ldd	r19, Y+6	; 0x06
    3ac8:	23 2b       	or	r18, r19
    3aca:	19 f0       	breq	.+6      	; 0x3ad2 <_ZN6SdFile5writeEPKvj+0x31a>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    3acc:	84 81       	ldd	r24, Z+4	; 0x04
    3ace:	80 68       	ori	r24, 0x80	; 128
    3ad0:	84 83       	std	Z+4, r24	; 0x04
  }

  if (flags_ & O_SYNC) {
    3ad2:	f6 01       	movw	r30, r12
    3ad4:	84 81       	ldd	r24, Z+4	; 0x04
    3ad6:	83 ff       	sbrs	r24, 3
    3ad8:	10 c0       	rjmp	.+32     	; 0x3afa <_ZN6SdFile5writeEPKvj+0x342>
    if (!sync()) {
    3ada:	61 e0       	ldi	r22, 0x01	; 1
    3adc:	c6 01       	movw	r24, r12
    3ade:	0e 94 a0 18 	call	0x3140	; 0x3140 <_ZN6SdFile4syncEh>
    3ae2:	81 11       	cpse	r24, r1
    3ae4:	0d c0       	rjmp	.+26     	; 0x3b00 <_ZN6SdFile5writeEPKvj+0x348>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    3ae6:	81 e0       	ldi	r24, 0x01	; 1
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	d6 01       	movw	r26, r12
    3aec:	13 96       	adiw	r26, 0x03	; 3
    3aee:	9c 93       	st	X, r25
    3af0:	8e 93       	st	-X, r24
    3af2:	12 97       	sbiw	r26, 0x02	; 2

writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    3af4:	80 e0       	ldi	r24, 0x00	; 0
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	05 c0       	rjmp	.+10     	; 0x3b04 <_ZN6SdFile5writeEPKvj+0x34c>
  if (flags_ & O_SYNC) {
    if (!sync()) {
      goto writeErrorReturn;
    }
  }
  return nbyte;
    3afa:	8d 81       	ldd	r24, Y+5	; 0x05
    3afc:	9e 81       	ldd	r25, Y+6	; 0x06
    3afe:	02 c0       	rjmp	.+4      	; 0x3b04 <_ZN6SdFile5writeEPKvj+0x34c>
    3b00:	8d 81       	ldd	r24, Y+5	; 0x05
    3b02:	9e 81       	ldd	r25, Y+6	; 0x06
writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    3b04:	26 96       	adiw	r28, 0x06	; 6
    3b06:	0f b6       	in	r0, 0x3f	; 63
    3b08:	f8 94       	cli
    3b0a:	de bf       	out	0x3e, r29	; 62
    3b0c:	0f be       	out	0x3f, r0	; 63
    3b0e:	cd bf       	out	0x3d, r28	; 61
    3b10:	df 91       	pop	r29
    3b12:	cf 91       	pop	r28
    3b14:	1f 91       	pop	r17
    3b16:	0f 91       	pop	r16
    3b18:	ff 90       	pop	r15
    3b1a:	ef 90       	pop	r14
    3b1c:	df 90       	pop	r13
    3b1e:	cf 90       	pop	r12
    3b20:	bf 90       	pop	r11
    3b22:	af 90       	pop	r10
    3b24:	9f 90       	pop	r9
    3b26:	8f 90       	pop	r8
    3b28:	7f 90       	pop	r7
    3b2a:	6f 90       	pop	r6
    3b2c:	5f 90       	pop	r5
    3b2e:	4f 90       	pop	r4
    3b30:	3f 90       	pop	r3
    3b32:	08 95       	ret

00003b34 <_ZN6SdFile5writeEh>:
/**
   Write a byte to a file. Required by the Arduino Print class.

   Use SdFile::writeError to check for errors.
*/
size_t SdFile::write(uint8_t b) {
    3b34:	cf 93       	push	r28
    3b36:	df 93       	push	r29
    3b38:	1f 92       	push	r1
    3b3a:	cd b7       	in	r28, 0x3d	; 61
    3b3c:	de b7       	in	r29, 0x3e	; 62
    3b3e:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    3b40:	41 e0       	ldi	r20, 0x01	; 1
    3b42:	50 e0       	ldi	r21, 0x00	; 0
    3b44:	be 01       	movw	r22, r28
    3b46:	6f 5f       	subi	r22, 0xFF	; 255
    3b48:	7f 4f       	sbci	r23, 0xFF	; 255
    3b4a:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <_ZN6SdFile5writeEPKvj>
}
    3b4e:	0f 90       	pop	r0
    3b50:	df 91       	pop	r29
    3b52:	cf 91       	pop	r28
    3b54:	08 95       	ret

00003b56 <_ZN8SdVolume21cacheMirrorBlockFlushEh>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheMirrorBlockFlush(uint8_t blocking) {
    3b56:	0f 93       	push	r16
  if (cacheMirrorBlock_) {
    3b58:	40 91 4a 04 	lds	r20, 0x044A	; 0x80044a <_ZN8SdVolume17cacheMirrorBlock_E>
    3b5c:	50 91 4b 04 	lds	r21, 0x044B	; 0x80044b <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    3b60:	60 91 4c 04 	lds	r22, 0x044C	; 0x80044c <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    3b64:	70 91 4d 04 	lds	r23, 0x044D	; 0x80044d <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    3b68:	41 15       	cp	r20, r1
    3b6a:	51 05       	cpc	r21, r1
    3b6c:	61 05       	cpc	r22, r1
    3b6e:	71 05       	cpc	r23, r1
    3b70:	a9 f0       	breq	.+42     	; 0x3b9c <_ZN8SdVolume21cacheMirrorBlockFlushEh+0x46>
    3b72:	08 2f       	mov	r16, r24
    if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data, blocking)) {
    3b74:	21 e5       	ldi	r18, 0x51	; 81
    3b76:	34 e0       	ldi	r19, 0x04	; 4
    3b78:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <_ZN8SdVolume7sdCard_E>
    3b7c:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <_ZN8SdVolume7sdCard_E+0x1>
    3b80:	0e 94 94 14 	call	0x2928	; 0x2928 <_ZN7Sd2Card10writeBlockEmPKhh>
    3b84:	88 23       	and	r24, r24
    3b86:	59 f0       	breq	.+22     	; 0x3b9e <_ZN8SdVolume21cacheMirrorBlockFlushEh+0x48>
      return false;
    }
    cacheMirrorBlock_ = 0;
    3b88:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <_ZN8SdVolume17cacheMirrorBlock_E>
    3b8c:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    3b90:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    3b94:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  }
  return true;
    3b98:	81 e0       	ldi	r24, 0x01	; 1
    3b9a:	01 c0       	rjmp	.+2      	; 0x3b9e <_ZN8SdVolume21cacheMirrorBlockFlushEh+0x48>
    3b9c:	81 e0       	ldi	r24, 0x01	; 1
}
    3b9e:	0f 91       	pop	r16
    3ba0:	08 95       	ret

00003ba2 <_ZN8SdVolume10cacheFlushEh>:
  }

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(uint8_t blocking) {
    3ba2:	0f 93       	push	r16
    3ba4:	cf 93       	push	r28
  if (cacheDirty_) {
    3ba6:	90 91 4e 04 	lds	r25, 0x044E	; 0x80044e <_ZN8SdVolume11cacheDirty_E>
    3baa:	99 23       	and	r25, r25
    3bac:	f9 f0       	breq	.+62     	; 0x3bec <_ZN8SdVolume10cacheFlushEh+0x4a>
    3bae:	c8 2f       	mov	r28, r24
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data, blocking)) {
    3bb0:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E>
    3bb4:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3bb8:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3bbc:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3bc0:	08 2f       	mov	r16, r24
    3bc2:	21 e5       	ldi	r18, 0x51	; 81
    3bc4:	34 e0       	ldi	r19, 0x04	; 4
    3bc6:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <_ZN8SdVolume7sdCard_E>
    3bca:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <_ZN8SdVolume7sdCard_E+0x1>
    3bce:	0e 94 94 14 	call	0x2928	; 0x2928 <_ZN7Sd2Card10writeBlockEmPKhh>
    3bd2:	88 23       	and	r24, r24
    3bd4:	71 f0       	breq	.+28     	; 0x3bf2 <_ZN8SdVolume10cacheFlushEh+0x50>
      return false;
    }

    if (!blocking) {
    3bd6:	cc 23       	and	r28, r28
    3bd8:	59 f0       	breq	.+22     	; 0x3bf0 <_ZN8SdVolume10cacheFlushEh+0x4e>
      return true;
    }

    // mirror FAT tables
    if (!cacheMirrorBlockFlush(blocking)) {
    3bda:	8c 2f       	mov	r24, r28
    3bdc:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <_ZN8SdVolume21cacheMirrorBlockFlushEh>
    3be0:	88 23       	and	r24, r24
    3be2:	39 f0       	breq	.+14     	; 0x3bf2 <_ZN8SdVolume10cacheFlushEh+0x50>
      return false;
    }
    cacheDirty_ = 0;
    3be4:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <_ZN8SdVolume11cacheDirty_E>
  }
  return true;
    3be8:	81 e0       	ldi	r24, 0x01	; 1
    3bea:	03 c0       	rjmp	.+6      	; 0x3bf2 <_ZN8SdVolume10cacheFlushEh+0x50>
    3bec:	81 e0       	ldi	r24, 0x01	; 1
    3bee:	01 c0       	rjmp	.+2      	; 0x3bf2 <_ZN8SdVolume10cacheFlushEh+0x50>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data, blocking)) {
      return false;
    }

    if (!blocking) {
      return true;
    3bf0:	81 e0       	ldi	r24, 0x01	; 1
      return false;
    }
    cacheDirty_ = 0;
  }
  return true;
}
    3bf2:	cf 91       	pop	r28
    3bf4:	0f 91       	pop	r16
    3bf6:	08 95       	ret

00003bf8 <_ZN8SdVolume13cacheRawBlockEmh>:
    cacheMirrorBlock_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    3bf8:	cf 92       	push	r12
    3bfa:	df 92       	push	r13
    3bfc:	ef 92       	push	r14
    3bfe:	ff 92       	push	r15
    3c00:	cf 93       	push	r28
    3c02:	6b 01       	movw	r12, r22
    3c04:	7c 01       	movw	r14, r24
    3c06:	c4 2f       	mov	r28, r20
  if (cacheBlockNumber_ != blockNumber) {
    3c08:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E>
    3c0c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3c10:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3c14:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3c18:	8c 15       	cp	r24, r12
    3c1a:	9d 05       	cpc	r25, r13
    3c1c:	ae 05       	cpc	r26, r14
    3c1e:	bf 05       	cpc	r27, r15
    3c20:	c9 f0       	breq	.+50     	; 0x3c54 <_ZN8SdVolume13cacheRawBlockEmh+0x5c>
    if (!cacheFlush()) {
    3c22:	81 e0       	ldi	r24, 0x01	; 1
    3c24:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <_ZN8SdVolume10cacheFlushEh>
    3c28:	88 23       	and	r24, r24
    3c2a:	d1 f0       	breq	.+52     	; 0x3c60 <_ZN8SdVolume13cacheRawBlockEmh+0x68>
      return false;
    }
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) {
    3c2c:	21 e5       	ldi	r18, 0x51	; 81
    3c2e:	34 e0       	ldi	r19, 0x04	; 4
    3c30:	b7 01       	movw	r22, r14
    3c32:	a6 01       	movw	r20, r12
    3c34:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <_ZN8SdVolume7sdCard_E>
    3c38:	90 91 50 04 	lds	r25, 0x0450	; 0x800450 <_ZN8SdVolume7sdCard_E+0x1>
    3c3c:	0e 94 4f 14 	call	0x289e	; 0x289e <_ZN7Sd2Card9readBlockEmPh>
    3c40:	88 23       	and	r24, r24
    3c42:	71 f0       	breq	.+28     	; 0x3c60 <_ZN8SdVolume13cacheRawBlockEmh+0x68>
      return false;
    }
    cacheBlockNumber_ = blockNumber;
    3c44:	c0 92 0c 01 	sts	0x010C, r12	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E>
    3c48:	d0 92 0d 01 	sts	0x010D, r13	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3c4c:	e0 92 0e 01 	sts	0x010E, r14	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3c50:	f0 92 0f 01 	sts	0x010F, r15	; 0x80010f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  }
  cacheDirty_ |= action;
    3c54:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <_ZN8SdVolume11cacheDirty_E>
    3c58:	c8 2b       	or	r28, r24
    3c5a:	c0 93 4e 04 	sts	0x044E, r28	; 0x80044e <_ZN8SdVolume11cacheDirty_E>
  return true;
    3c5e:	81 e0       	ldi	r24, 0x01	; 1
}
    3c60:	cf 91       	pop	r28
    3c62:	ff 90       	pop	r15
    3c64:	ef 90       	pop	r14
    3c66:	df 90       	pop	r13
    3c68:	cf 90       	pop	r12
    3c6a:	08 95       	ret

00003c6c <_ZN8SdVolume14cacheZeroBlockEm>:
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    3c6c:	cf 92       	push	r12
    3c6e:	df 92       	push	r13
    3c70:	ef 92       	push	r14
    3c72:	ff 92       	push	r15
    3c74:	6b 01       	movw	r12, r22
    3c76:	7c 01       	movw	r14, r24
  if (!cacheFlush()) {
    3c78:	81 e0       	ldi	r24, 0x01	; 1
    3c7a:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <_ZN8SdVolume10cacheFlushEh>
    3c7e:	88 23       	and	r24, r24
    3c80:	d1 f0       	breq	.+52     	; 0x3cb6 <_ZN8SdVolume14cacheZeroBlockEm+0x4a>
    3c82:	80 e0       	ldi	r24, 0x00	; 0
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    return false;
  }

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    3c86:	81 15       	cp	r24, r1
    3c88:	22 e0       	ldi	r18, 0x02	; 2
    3c8a:	92 07       	cpc	r25, r18
    3c8c:	30 f4       	brcc	.+12     	; 0x3c9a <_ZN8SdVolume14cacheZeroBlockEm+0x2e>
    cacheBuffer_.data[i] = 0;
    3c8e:	fc 01       	movw	r30, r24
    3c90:	ef 5a       	subi	r30, 0xAF	; 175
    3c92:	fb 4f       	sbci	r31, 0xFB	; 251
    3c94:	10 82       	st	Z, r1
  if (!cacheFlush()) {
    return false;
  }

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    3c96:	01 96       	adiw	r24, 0x01	; 1
    3c98:	f6 cf       	rjmp	.-20     	; 0x3c86 <_ZN8SdVolume14cacheZeroBlockEm+0x1a>
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    3c9a:	c0 92 0c 01 	sts	0x010C, r12	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E>
    3c9e:	d0 92 0d 01 	sts	0x010D, r13	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3ca2:	e0 92 0e 01 	sts	0x010E, r14	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3ca6:	f0 92 0f 01 	sts	0x010F, r15	; 0x80010f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3caa:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <_ZN8SdVolume11cacheDirty_E>
    3cae:	81 60       	ori	r24, 0x01	; 1
    3cb0:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <_ZN8SdVolume11cacheDirty_E>
  cacheSetDirty();
  return true;
    3cb4:	81 e0       	ldi	r24, 0x01	; 1
}
    3cb6:	ff 90       	pop	r15
    3cb8:	ef 90       	pop	r14
    3cba:	df 90       	pop	r13
    3cbc:	cf 90       	pop	r12
    3cbe:	08 95       	ret

00003cc0 <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    3cc0:	8f 92       	push	r8
    3cc2:	9f 92       	push	r9
    3cc4:	af 92       	push	r10
    3cc6:	bf 92       	push	r11
    3cc8:	cf 92       	push	r12
    3cca:	df 92       	push	r13
    3ccc:	ef 92       	push	r14
    3cce:	ff 92       	push	r15
    3cd0:	0f 93       	push	r16
    3cd2:	1f 93       	push	r17
    3cd4:	cf 93       	push	r28
    3cd6:	df 93       	push	r29
    3cd8:	fc 01       	movw	r30, r24
    3cda:	e9 01       	movw	r28, r18
  if (cluster > (clusterCount_ + 1)) {
    3cdc:	01 85       	ldd	r16, Z+9	; 0x09
    3cde:	12 85       	ldd	r17, Z+10	; 0x0a
    3ce0:	23 85       	ldd	r18, Z+11	; 0x0b
    3ce2:	34 85       	ldd	r19, Z+12	; 0x0c
    3ce4:	0f 5f       	subi	r16, 0xFF	; 255
    3ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ce8:	2f 4f       	sbci	r18, 0xFF	; 255
    3cea:	3f 4f       	sbci	r19, 0xFF	; 255
    3cec:	04 17       	cp	r16, r20
    3cee:	15 07       	cpc	r17, r21
    3cf0:	26 07       	cpc	r18, r22
    3cf2:	37 07       	cpc	r19, r23
    3cf4:	08 f4       	brcc	.+2      	; 0x3cf8 <_ZNK8SdVolume6fatGetEmPm+0x38>
    3cf6:	61 c0       	rjmp	.+194    	; 0x3dba <_ZNK8SdVolume6fatGetEmPm+0xfa>
    return false;
  }
  uint32_t lba = fatStartBlock_;
    3cf8:	83 89       	ldd	r24, Z+19	; 0x13
    3cfa:	94 89       	ldd	r25, Z+20	; 0x14
    3cfc:	a5 89       	ldd	r26, Z+21	; 0x15
    3cfe:	b6 89       	ldd	r27, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3d00:	27 89       	ldd	r18, Z+23	; 0x17
    3d02:	20 31       	cpi	r18, 0x10	; 16
    3d04:	29 f4       	brne	.+10     	; 0x3d10 <_ZNK8SdVolume6fatGetEmPm+0x50>
    3d06:	85 2e       	mov	r8, r21
    3d08:	96 2e       	mov	r9, r22
    3d0a:	a7 2e       	mov	r10, r23
    3d0c:	bb 24       	eor	r11, r11
    3d0e:	0a c0       	rjmp	.+20     	; 0x3d24 <_ZNK8SdVolume6fatGetEmPm+0x64>
    3d10:	4a 01       	movw	r8, r20
    3d12:	5b 01       	movw	r10, r22
    3d14:	68 94       	set
    3d16:	16 f8       	bld	r1, 6
    3d18:	b6 94       	lsr	r11
    3d1a:	a7 94       	ror	r10
    3d1c:	97 94       	ror	r9
    3d1e:	87 94       	ror	r8
    3d20:	16 94       	lsr	r1
    3d22:	d1 f7       	brne	.-12     	; 0x3d18 <_ZNK8SdVolume6fatGetEmPm+0x58>
    3d24:	6a 01       	movw	r12, r20
    3d26:	7b 01       	movw	r14, r22
    3d28:	8f 01       	movw	r16, r30
    3d2a:	bc 01       	movw	r22, r24
    3d2c:	cd 01       	movw	r24, r26
    3d2e:	68 0d       	add	r22, r8
    3d30:	79 1d       	adc	r23, r9
    3d32:	8a 1d       	adc	r24, r10
    3d34:	9b 1d       	adc	r25, r11
  if (lba != cacheBlockNumber_) {
    3d36:	80 90 0c 01 	lds	r8, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E>
    3d3a:	90 90 0d 01 	lds	r9, 0x010D	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3d3e:	a0 90 0e 01 	lds	r10, 0x010E	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3d42:	b0 90 0f 01 	lds	r11, 0x010F	; 0x80010f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3d46:	68 15       	cp	r22, r8
    3d48:	79 05       	cpc	r23, r9
    3d4a:	8a 05       	cpc	r24, r10
    3d4c:	9b 05       	cpc	r25, r11
    3d4e:	29 f0       	breq	.+10     	; 0x3d5a <_ZNK8SdVolume6fatGetEmPm+0x9a>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) {
    3d50:	40 e0       	ldi	r20, 0x00	; 0
    3d52:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <_ZN8SdVolume13cacheRawBlockEmh>
    3d56:	88 23       	and	r24, r24
    3d58:	89 f1       	breq	.+98     	; 0x3dbc <_ZNK8SdVolume6fatGetEmPm+0xfc>
      return false;
    }
  }
  if (fatType_ == 16) {
    3d5a:	f8 01       	movw	r30, r16
    3d5c:	87 89       	ldd	r24, Z+23	; 0x17
    3d5e:	80 31       	cpi	r24, 0x10	; 16
    3d60:	a1 f4       	brne	.+40     	; 0x3d8a <_ZNK8SdVolume6fatGetEmPm+0xca>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    3d62:	b7 01       	movw	r22, r14
    3d64:	a6 01       	movw	r20, r12
    3d66:	55 27       	eor	r21, r21
    3d68:	66 27       	eor	r22, r22
    3d6a:	77 27       	eor	r23, r23
    3d6c:	44 0f       	add	r20, r20
    3d6e:	55 1f       	adc	r21, r21
    3d70:	fa 01       	movw	r30, r20
    3d72:	ef 5a       	subi	r30, 0xAF	; 175
    3d74:	fb 4f       	sbci	r31, 0xFB	; 251
    3d76:	80 81       	ld	r24, Z
    3d78:	91 81       	ldd	r25, Z+1	; 0x01
    3d7a:	a0 e0       	ldi	r26, 0x00	; 0
    3d7c:	b0 e0       	ldi	r27, 0x00	; 0
    3d7e:	88 83       	st	Y, r24
    3d80:	99 83       	std	Y+1, r25	; 0x01
    3d82:	aa 83       	std	Y+2, r26	; 0x02
    3d84:	bb 83       	std	Y+3, r27	; 0x03
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
    3d86:	81 e0       	ldi	r24, 0x01	; 1
    3d88:	19 c0       	rjmp	.+50     	; 0x3dbc <_ZNK8SdVolume6fatGetEmPm+0xfc>
    }
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    3d8a:	b7 01       	movw	r22, r14
    3d8c:	a6 01       	movw	r20, r12
    3d8e:	4f 77       	andi	r20, 0x7F	; 127
    3d90:	55 27       	eor	r21, r21
    3d92:	66 27       	eor	r22, r22
    3d94:	77 27       	eor	r23, r23
    3d96:	44 0f       	add	r20, r20
    3d98:	55 1f       	adc	r21, r21
    3d9a:	44 0f       	add	r20, r20
    3d9c:	55 1f       	adc	r21, r21
    3d9e:	fa 01       	movw	r30, r20
    3da0:	ef 5a       	subi	r30, 0xAF	; 175
    3da2:	fb 4f       	sbci	r31, 0xFB	; 251
    3da4:	80 81       	ld	r24, Z
    3da6:	91 81       	ldd	r25, Z+1	; 0x01
    3da8:	a2 81       	ldd	r26, Z+2	; 0x02
    3daa:	b3 81       	ldd	r27, Z+3	; 0x03
    3dac:	bf 70       	andi	r27, 0x0F	; 15
    3dae:	88 83       	st	Y, r24
    3db0:	99 83       	std	Y+1, r25	; 0x01
    3db2:	aa 83       	std	Y+2, r26	; 0x02
    3db4:	bb 83       	std	Y+3, r27	; 0x03
  }
  return true;
    3db6:	81 e0       	ldi	r24, 0x01	; 1
    3db8:	01 c0       	rjmp	.+2      	; 0x3dbc <_ZNK8SdVolume6fatGetEmPm+0xfc>
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) {
    return false;
    3dba:	80 e0       	ldi	r24, 0x00	; 0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    3dbc:	df 91       	pop	r29
    3dbe:	cf 91       	pop	r28
    3dc0:	1f 91       	pop	r17
    3dc2:	0f 91       	pop	r16
    3dc4:	ff 90       	pop	r15
    3dc6:	ef 90       	pop	r14
    3dc8:	df 90       	pop	r13
    3dca:	cf 90       	pop	r12
    3dcc:	bf 90       	pop	r11
    3dce:	af 90       	pop	r10
    3dd0:	9f 90       	pop	r9
    3dd2:	8f 90       	pop	r8
    3dd4:	08 95       	ret

00003dd6 <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    3dd6:	8f 92       	push	r8
    3dd8:	9f 92       	push	r9
    3dda:	af 92       	push	r10
    3ddc:	bf 92       	push	r11
    3dde:	ef 92       	push	r14
    3de0:	ff 92       	push	r15
    3de2:	0f 93       	push	r16
    3de4:	1f 93       	push	r17
    3de6:	cf 93       	push	r28
    3de8:	df 93       	push	r29
    3dea:	00 d0       	rcall	.+0      	; 0x3dec <_ZNK8SdVolume9chainSizeEmPm+0x16>
    3dec:	00 d0       	rcall	.+0      	; 0x3dee <_ZNK8SdVolume9chainSizeEmPm+0x18>
    3dee:	cd b7       	in	r28, 0x3d	; 61
    3df0:	de b7       	in	r29, 0x3e	; 62
    3df2:	8c 01       	movw	r16, r24
    3df4:	49 83       	std	Y+1, r20	; 0x01
    3df6:	5a 83       	std	Y+2, r21	; 0x02
    3df8:	6b 83       	std	Y+3, r22	; 0x03
    3dfa:	7c 83       	std	Y+4, r23	; 0x04
    3dfc:	79 01       	movw	r14, r18
  uint32_t s = 0;
    3dfe:	81 2c       	mov	r8, r1
    3e00:	91 2c       	mov	r9, r1
    3e02:	54 01       	movw	r10, r8
  do {
    if (!fatGet(cluster, &cluster)) {
    3e04:	49 81       	ldd	r20, Y+1	; 0x01
    3e06:	5a 81       	ldd	r21, Y+2	; 0x02
    3e08:	6b 81       	ldd	r22, Y+3	; 0x03
    3e0a:	7c 81       	ldd	r23, Y+4	; 0x04
    3e0c:	9e 01       	movw	r18, r28
    3e0e:	2f 5f       	subi	r18, 0xFF	; 255
    3e10:	3f 4f       	sbci	r19, 0xFF	; 255
    3e12:	c8 01       	movw	r24, r16
    3e14:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <_ZNK8SdVolume6fatGetEmPm>
    3e18:	88 23       	and	r24, r24
    3e1a:	61 f1       	breq	.+88     	; 0x3e74 <_ZNK8SdVolume9chainSizeEmPm+0x9e>
      return false;
    }
    s += 512UL << clusterSizeShift_;
    3e1c:	80 e0       	ldi	r24, 0x00	; 0
    3e1e:	92 e0       	ldi	r25, 0x02	; 2
    3e20:	a0 e0       	ldi	r26, 0x00	; 0
    3e22:	b0 e0       	ldi	r27, 0x00	; 0
    3e24:	f8 01       	movw	r30, r16
    3e26:	05 84       	ldd	r0, Z+13	; 0x0d
    3e28:	04 c0       	rjmp	.+8      	; 0x3e32 <_ZNK8SdVolume9chainSizeEmPm+0x5c>
    3e2a:	88 0f       	add	r24, r24
    3e2c:	99 1f       	adc	r25, r25
    3e2e:	aa 1f       	adc	r26, r26
    3e30:	bb 1f       	adc	r27, r27
    3e32:	0a 94       	dec	r0
    3e34:	d2 f7       	brpl	.-12     	; 0x3e2a <_ZNK8SdVolume9chainSizeEmPm+0x54>
    3e36:	88 0e       	add	r8, r24
    3e38:	99 1e       	adc	r9, r25
    3e3a:	aa 1e       	adc	r10, r26
    3e3c:	bb 1e       	adc	r11, r27
  } while (!isEOC(cluster));
    3e3e:	89 81       	ldd	r24, Y+1	; 0x01
    3e40:	9a 81       	ldd	r25, Y+2	; 0x02
    3e42:	ab 81       	ldd	r26, Y+3	; 0x03
    3e44:	bc 81       	ldd	r27, Y+4	; 0x04
    uint8_t fatPutEOC(uint32_t cluster) {
      return fatPut(cluster, 0x0FFFFFFF);
    }
    uint8_t freeChain(uint32_t cluster);
    uint8_t isEOC(uint32_t cluster) const {
      return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    3e46:	27 89       	ldd	r18, Z+23	; 0x17
    3e48:	20 31       	cpi	r18, 0x10	; 16
    3e4a:	29 f4       	brne	.+10     	; 0x3e56 <_ZNK8SdVolume9chainSizeEmPm+0x80>
    3e4c:	48 ef       	ldi	r20, 0xF8	; 248
    3e4e:	5f ef       	ldi	r21, 0xFF	; 255
    3e50:	60 e0       	ldi	r22, 0x00	; 0
    3e52:	70 e0       	ldi	r23, 0x00	; 0
    3e54:	04 c0       	rjmp	.+8      	; 0x3e5e <_ZNK8SdVolume9chainSizeEmPm+0x88>
    3e56:	48 ef       	ldi	r20, 0xF8	; 248
    3e58:	5f ef       	ldi	r21, 0xFF	; 255
    3e5a:	6f ef       	ldi	r22, 0xFF	; 255
    3e5c:	7f e0       	ldi	r23, 0x0F	; 15
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    3e5e:	84 17       	cp	r24, r20
    3e60:	95 07       	cpc	r25, r21
    3e62:	a6 07       	cpc	r26, r22
    3e64:	b7 07       	cpc	r27, r23
    3e66:	70 f2       	brcs	.-100    	; 0x3e04 <_ZNK8SdVolume9chainSizeEmPm+0x2e>
    if (!fatGet(cluster, &cluster)) {
      return false;
    }
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    3e68:	f7 01       	movw	r30, r14
    3e6a:	80 82       	st	Z, r8
    3e6c:	91 82       	std	Z+1, r9	; 0x01
    3e6e:	a2 82       	std	Z+2, r10	; 0x02
    3e70:	b3 82       	std	Z+3, r11	; 0x03
  return true;
    3e72:	81 e0       	ldi	r24, 0x01	; 1
}
    3e74:	0f 90       	pop	r0
    3e76:	0f 90       	pop	r0
    3e78:	0f 90       	pop	r0
    3e7a:	0f 90       	pop	r0
    3e7c:	df 91       	pop	r29
    3e7e:	cf 91       	pop	r28
    3e80:	1f 91       	pop	r17
    3e82:	0f 91       	pop	r16
    3e84:	ff 90       	pop	r15
    3e86:	ef 90       	pop	r14
    3e88:	bf 90       	pop	r11
    3e8a:	af 90       	pop	r10
    3e8c:	9f 90       	pop	r9
    3e8e:	8f 90       	pop	r8
    3e90:	08 95       	ret

00003e92 <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    3e92:	4f 92       	push	r4
    3e94:	5f 92       	push	r5
    3e96:	6f 92       	push	r6
    3e98:	7f 92       	push	r7
    3e9a:	8f 92       	push	r8
    3e9c:	9f 92       	push	r9
    3e9e:	af 92       	push	r10
    3ea0:	bf 92       	push	r11
    3ea2:	cf 92       	push	r12
    3ea4:	df 92       	push	r13
    3ea6:	ef 92       	push	r14
    3ea8:	ff 92       	push	r15
    3eaa:	0f 93       	push	r16
    3eac:	1f 93       	push	r17
    3eae:	cf 93       	push	r28
    3eb0:	df 93       	push	r29
    3eb2:	00 d0       	rcall	.+0      	; 0x3eb4 <_ZN8SdVolume6fatPutEmm+0x22>
    3eb4:	00 d0       	rcall	.+0      	; 0x3eb6 <_ZN8SdVolume6fatPutEmm+0x24>
    3eb6:	00 d0       	rcall	.+0      	; 0x3eb8 <_ZN8SdVolume6fatPutEmm+0x26>
    3eb8:	cd b7       	in	r28, 0x3d	; 61
    3eba:	de b7       	in	r29, 0x3e	; 62
  // error if reserved cluster
  if (cluster < 2) {
    3ebc:	42 30       	cpi	r20, 0x02	; 2
    3ebe:	51 05       	cpc	r21, r1
    3ec0:	61 05       	cpc	r22, r1
    3ec2:	71 05       	cpc	r23, r1
    3ec4:	08 f4       	brcc	.+2      	; 0x3ec8 <_ZN8SdVolume6fatPutEmm+0x36>
    3ec6:	94 c0       	rjmp	.+296    	; 0x3ff0 <_ZN8SdVolume6fatPutEmm+0x15e>
    return false;
  }

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) {
    3ec8:	dc 01       	movw	r26, r24
    3eca:	19 96       	adiw	r26, 0x09	; 9
    3ecc:	cd 90       	ld	r12, X+
    3ece:	dd 90       	ld	r13, X+
    3ed0:	ed 90       	ld	r14, X+
    3ed2:	fc 90       	ld	r15, X
    3ed4:	1c 97       	sbiw	r26, 0x0c	; 12
    3ed6:	bf ef       	ldi	r27, 0xFF	; 255
    3ed8:	cb 1a       	sub	r12, r27
    3eda:	db 0a       	sbc	r13, r27
    3edc:	eb 0a       	sbc	r14, r27
    3ede:	fb 0a       	sbc	r15, r27
    3ee0:	c4 16       	cp	r12, r20
    3ee2:	d5 06       	cpc	r13, r21
    3ee4:	e6 06       	cpc	r14, r22
    3ee6:	f7 06       	cpc	r15, r23
    3ee8:	08 f4       	brcc	.+2      	; 0x3eec <_ZN8SdVolume6fatPutEmm+0x5a>
    3eea:	84 c0       	rjmp	.+264    	; 0x3ff4 <_ZN8SdVolume6fatPutEmm+0x162>
    return false;
  }

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    3eec:	fc 01       	movw	r30, r24
    3eee:	43 88       	ldd	r4, Z+19	; 0x13
    3ef0:	54 88       	ldd	r5, Z+20	; 0x14
    3ef2:	65 88       	ldd	r6, Z+21	; 0x15
    3ef4:	76 88       	ldd	r7, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3ef6:	e7 89       	ldd	r30, Z+23	; 0x17
    3ef8:	e0 31       	cpi	r30, 0x10	; 16
    3efa:	29 f4       	brne	.+10     	; 0x3f06 <_ZN8SdVolume6fatPutEmm+0x74>
    3efc:	85 2e       	mov	r8, r21
    3efe:	96 2e       	mov	r9, r22
    3f00:	a7 2e       	mov	r10, r23
    3f02:	bb 24       	eor	r11, r11
    3f04:	0a c0       	rjmp	.+20     	; 0x3f1a <_ZN8SdVolume6fatPutEmm+0x88>
    3f06:	4a 01       	movw	r8, r20
    3f08:	5b 01       	movw	r10, r22
    3f0a:	68 94       	set
    3f0c:	16 f8       	bld	r1, 6
    3f0e:	b6 94       	lsr	r11
    3f10:	a7 94       	ror	r10
    3f12:	97 94       	ror	r9
    3f14:	87 94       	ror	r8
    3f16:	16 94       	lsr	r1
    3f18:	d1 f7       	brne	.-12     	; 0x3f0e <_ZN8SdVolume6fatPutEmm+0x7c>
    3f1a:	09 83       	std	Y+1, r16	; 0x01
    3f1c:	1a 83       	std	Y+2, r17	; 0x02
    3f1e:	2b 83       	std	Y+3, r18	; 0x03
    3f20:	3c 83       	std	Y+4, r19	; 0x04
    3f22:	6a 01       	movw	r12, r20
    3f24:	7b 01       	movw	r14, r22
    3f26:	9e 83       	std	Y+6, r25	; 0x06
    3f28:	8d 83       	std	Y+5, r24	; 0x05
    3f2a:	48 0c       	add	r4, r8
    3f2c:	59 1c       	adc	r5, r9
    3f2e:	6a 1c       	adc	r6, r10
    3f30:	7b 1c       	adc	r7, r11

  if (lba != cacheBlockNumber_) {
    3f32:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E>
    3f36:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3f3a:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3f3e:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3f42:	48 16       	cp	r4, r24
    3f44:	59 06       	cpc	r5, r25
    3f46:	6a 06       	cpc	r6, r26
    3f48:	7b 06       	cpc	r7, r27
    3f4a:	41 f0       	breq	.+16     	; 0x3f5c <_ZN8SdVolume6fatPutEmm+0xca>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) {
    3f4c:	40 e0       	ldi	r20, 0x00	; 0
    3f4e:	c3 01       	movw	r24, r6
    3f50:	b2 01       	movw	r22, r4
    3f52:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <_ZN8SdVolume13cacheRawBlockEmh>
    3f56:	88 23       	and	r24, r24
    3f58:	09 f4       	brne	.+2      	; 0x3f5c <_ZN8SdVolume6fatPutEmm+0xca>
    3f5a:	4f c0       	rjmp	.+158    	; 0x3ffa <_ZN8SdVolume6fatPutEmm+0x168>
      return false;
    }
  }
  // store entry
  if (fatType_ == 16) {
    3f5c:	ad 81       	ldd	r26, Y+5	; 0x05
    3f5e:	be 81       	ldd	r27, Y+6	; 0x06
    3f60:	57 96       	adiw	r26, 0x17	; 23
    3f62:	8c 91       	ld	r24, X
    3f64:	80 31       	cpi	r24, 0x10	; 16
    3f66:	79 f4       	brne	.+30     	; 0x3f86 <_ZN8SdVolume6fatPutEmm+0xf4>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    3f68:	b7 01       	movw	r22, r14
    3f6a:	a6 01       	movw	r20, r12
    3f6c:	55 27       	eor	r21, r21
    3f6e:	66 27       	eor	r22, r22
    3f70:	77 27       	eor	r23, r23
    3f72:	44 0f       	add	r20, r20
    3f74:	55 1f       	adc	r21, r21
    3f76:	fa 01       	movw	r30, r20
    3f78:	ef 5a       	subi	r30, 0xAF	; 175
    3f7a:	fb 4f       	sbci	r31, 0xFB	; 251
    3f7c:	89 81       	ldd	r24, Y+1	; 0x01
    3f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f80:	91 83       	std	Z+1, r25	; 0x01
    3f82:	80 83       	st	Z, r24
    3f84:	15 c0       	rjmp	.+42     	; 0x3fb0 <_ZN8SdVolume6fatPutEmm+0x11e>
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    3f86:	b7 01       	movw	r22, r14
    3f88:	a6 01       	movw	r20, r12
    3f8a:	4f 77       	andi	r20, 0x7F	; 127
    3f8c:	55 27       	eor	r21, r21
    3f8e:	66 27       	eor	r22, r22
    3f90:	77 27       	eor	r23, r23
    3f92:	44 0f       	add	r20, r20
    3f94:	55 1f       	adc	r21, r21
    3f96:	44 0f       	add	r20, r20
    3f98:	55 1f       	adc	r21, r21
    3f9a:	fa 01       	movw	r30, r20
    3f9c:	ef 5a       	subi	r30, 0xAF	; 175
    3f9e:	fb 4f       	sbci	r31, 0xFB	; 251
    3fa0:	89 81       	ldd	r24, Y+1	; 0x01
    3fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    3fa4:	ab 81       	ldd	r26, Y+3	; 0x03
    3fa6:	bc 81       	ldd	r27, Y+4	; 0x04
    3fa8:	80 83       	st	Z, r24
    3faa:	91 83       	std	Z+1, r25	; 0x01
    3fac:	a2 83       	std	Z+2, r26	; 0x02
    3fae:	b3 83       	std	Z+3, r27	; 0x03
    }
    static uint8_t cacheFlush(uint8_t blocking = 1);
    static uint8_t cacheMirrorBlockFlush(uint8_t blocking);
    static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
    static void cacheSetDirty(void) {
      cacheDirty_ |= CACHE_FOR_WRITE;
    3fb0:	80 91 4e 04 	lds	r24, 0x044E	; 0x80044e <_ZN8SdVolume11cacheDirty_E>
    3fb4:	81 60       	ori	r24, 0x01	; 1
    3fb6:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <_ZN8SdVolume11cacheDirty_E>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) {
    3fba:	ad 81       	ldd	r26, Y+5	; 0x05
    3fbc:	be 81       	ldd	r27, Y+6	; 0x06
    3fbe:	52 96       	adiw	r26, 0x12	; 18
    3fc0:	8c 91       	ld	r24, X
    3fc2:	52 97       	sbiw	r26, 0x12	; 18
    3fc4:	82 30       	cpi	r24, 0x02	; 2
    3fc6:	c0 f0       	brcs	.+48     	; 0x3ff8 <_ZN8SdVolume6fatPutEmm+0x166>
    cacheMirrorBlock_ = lba + blocksPerFat_;
    3fc8:	15 96       	adiw	r26, 0x05	; 5
    3fca:	8d 91       	ld	r24, X+
    3fcc:	9d 91       	ld	r25, X+
    3fce:	0d 90       	ld	r0, X+
    3fd0:	bc 91       	ld	r27, X
    3fd2:	a0 2d       	mov	r26, r0
    3fd4:	48 0e       	add	r4, r24
    3fd6:	59 1e       	adc	r5, r25
    3fd8:	6a 1e       	adc	r6, r26
    3fda:	7b 1e       	adc	r7, r27
    3fdc:	40 92 4a 04 	sts	0x044A, r4	; 0x80044a <_ZN8SdVolume17cacheMirrorBlock_E>
    3fe0:	50 92 4b 04 	sts	0x044B, r5	; 0x80044b <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    3fe4:	60 92 4c 04 	sts	0x044C, r6	; 0x80044c <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    3fe8:	70 92 4d 04 	sts	0x044D, r7	; 0x80044d <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  }
  return true;
    3fec:	81 e0       	ldi	r24, 0x01	; 1
    3fee:	05 c0       	rjmp	.+10     	; 0x3ffa <_ZN8SdVolume6fatPutEmm+0x168>
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) {
    return false;
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	03 c0       	rjmp	.+6      	; 0x3ffa <_ZN8SdVolume6fatPutEmm+0x168>
  }

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) {
    return false;
    3ff4:	80 e0       	ldi	r24, 0x00	; 0
    3ff6:	01 c0       	rjmp	.+2      	; 0x3ffa <_ZN8SdVolume6fatPutEmm+0x168>

  // mirror second FAT
  if (fatCount_ > 1) {
    cacheMirrorBlock_ = lba + blocksPerFat_;
  }
  return true;
    3ff8:	81 e0       	ldi	r24, 0x01	; 1
}
    3ffa:	26 96       	adiw	r28, 0x06	; 6
    3ffc:	0f b6       	in	r0, 0x3f	; 63
    3ffe:	f8 94       	cli
    4000:	de bf       	out	0x3e, r29	; 62
    4002:	0f be       	out	0x3f, r0	; 63
    4004:	cd bf       	out	0x3d, r28	; 61
    4006:	df 91       	pop	r29
    4008:	cf 91       	pop	r28
    400a:	1f 91       	pop	r17
    400c:	0f 91       	pop	r16
    400e:	ff 90       	pop	r15
    4010:	ef 90       	pop	r14
    4012:	df 90       	pop	r13
    4014:	cf 90       	pop	r12
    4016:	bf 90       	pop	r11
    4018:	af 90       	pop	r10
    401a:	9f 90       	pop	r9
    401c:	8f 90       	pop	r8
    401e:	7f 90       	pop	r7
    4020:	6f 90       	pop	r6
    4022:	5f 90       	pop	r5
    4024:	4f 90       	pop	r4
    4026:	08 95       	ret

00004028 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    4028:	2f 92       	push	r2
    402a:	3f 92       	push	r3
    402c:	4f 92       	push	r4
    402e:	5f 92       	push	r5
    4030:	6f 92       	push	r6
    4032:	7f 92       	push	r7
    4034:	8f 92       	push	r8
    4036:	9f 92       	push	r9
    4038:	af 92       	push	r10
    403a:	bf 92       	push	r11
    403c:	cf 92       	push	r12
    403e:	df 92       	push	r13
    4040:	ef 92       	push	r14
    4042:	ff 92       	push	r15
    4044:	0f 93       	push	r16
    4046:	1f 93       	push	r17
    4048:	cf 93       	push	r28
    404a:	df 93       	push	r29
    404c:	cd b7       	in	r28, 0x3d	; 61
    404e:	de b7       	in	r29, 0x3e	; 62
    4050:	2f 97       	sbiw	r28, 0x0f	; 15
    4052:	0f b6       	in	r0, 0x3f	; 63
    4054:	f8 94       	cli
    4056:	de bf       	out	0x3e, r29	; 62
    4058:	0f be       	out	0x3f, r0	; 63
    405a:	cd bf       	out	0x3d, r28	; 61
    405c:	1c 01       	movw	r2, r24
    405e:	49 87       	std	Y+9, r20	; 0x09
    4060:	5a 87       	std	Y+10, r21	; 0x0a
    4062:	6b 87       	std	Y+11, r22	; 0x0b
    4064:	7c 87       	std	Y+12, r23	; 0x0c
    4066:	3e 87       	std	Y+14, r19	; 0x0e
    4068:	2d 87       	std	Y+13, r18	; 0x0d

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    406a:	d9 01       	movw	r26, r18
    406c:	4d 90       	ld	r4, X+
    406e:	5d 90       	ld	r5, X+
    4070:	6d 90       	ld	r6, X+
    4072:	7c 90       	ld	r7, X
    4074:	41 14       	cp	r4, r1
    4076:	51 04       	cpc	r5, r1
    4078:	61 04       	cpc	r6, r1
    407a:	71 04       	cpc	r7, r1
    407c:	39 f0       	breq	.+14     	; 0x408c <_ZN8SdVolume15allocContiguousEmPm+0x64>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    407e:	bf ef       	ldi	r27, 0xFF	; 255
    4080:	4b 1a       	sub	r4, r27
    4082:	5b 0a       	sbc	r5, r27
    4084:	6b 0a       	sbc	r6, r27
    4086:	7b 0a       	sbc	r7, r27

    // don't save new start location
    setStart = false;
    4088:	1f 86       	std	Y+15, r1	; 0x0f
    408a:	11 c0       	rjmp	.+34     	; 0x40ae <_ZN8SdVolume15allocContiguousEmPm+0x86>
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    408c:	fc 01       	movw	r30, r24
    408e:	40 80       	ld	r4, Z
    4090:	51 80       	ldd	r5, Z+1	; 0x01
    4092:	62 80       	ldd	r6, Z+2	; 0x02
    4094:	73 80       	ldd	r7, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    4096:	81 e0       	ldi	r24, 0x01	; 1
    4098:	29 85       	ldd	r18, Y+9	; 0x09
    409a:	3a 85       	ldd	r19, Y+10	; 0x0a
    409c:	4b 85       	ldd	r20, Y+11	; 0x0b
    409e:	5c 85       	ldd	r21, Y+12	; 0x0c
    40a0:	21 30       	cpi	r18, 0x01	; 1
    40a2:	31 05       	cpc	r19, r1
    40a4:	41 05       	cpc	r20, r1
    40a6:	51 05       	cpc	r21, r1
    40a8:	09 f0       	breq	.+2      	; 0x40ac <_ZN8SdVolume15allocContiguousEmPm+0x84>
    40aa:	80 e0       	ldi	r24, 0x00	; 0
    40ac:	8f 87       	std	Y+15, r24	; 0x0f
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    40ae:	f1 01       	movw	r30, r2
    40b0:	81 85       	ldd	r24, Z+9	; 0x09
    40b2:	92 85       	ldd	r25, Z+10	; 0x0a
    40b4:	a3 85       	ldd	r26, Z+11	; 0x0b
    40b6:	b4 85       	ldd	r27, Z+12	; 0x0c
    40b8:	9c 01       	movw	r18, r24
    40ba:	ad 01       	movw	r20, r26
    40bc:	2f 5f       	subi	r18, 0xFF	; 255
    40be:	3f 4f       	sbci	r19, 0xFF	; 255
    40c0:	4f 4f       	sbci	r20, 0xFF	; 255
    40c2:	5f 4f       	sbci	r21, 0xFF	; 255
    40c4:	2d 83       	std	Y+5, r18	; 0x05
    40c6:	3e 83       	std	Y+6, r19	; 0x06
    40c8:	4f 83       	std	Y+7, r20	; 0x07
    40ca:	58 87       	std	Y+8, r21	; 0x08

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    40cc:	73 01       	movw	r14, r6
    40ce:	62 01       	movw	r12, r4

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    40d0:	81 2c       	mov	r8, r1
    40d2:	91 2c       	mov	r9, r1
    40d4:	54 01       	movw	r10, r8
    // can't find space checked all clusters
    if (n >= clusterCount_) {
    40d6:	f1 01       	movw	r30, r2
    40d8:	81 85       	ldd	r24, Z+9	; 0x09
    40da:	92 85       	ldd	r25, Z+10	; 0x0a
    40dc:	a3 85       	ldd	r26, Z+11	; 0x0b
    40de:	b4 85       	ldd	r27, Z+12	; 0x0c
    40e0:	88 16       	cp	r8, r24
    40e2:	99 06       	cpc	r9, r25
    40e4:	aa 06       	cpc	r10, r26
    40e6:	bb 06       	cpc	r11, r27
    40e8:	08 f0       	brcs	.+2      	; 0x40ec <_ZN8SdVolume15allocContiguousEmPm+0xc4>
    40ea:	4a c0       	rjmp	.+148    	; 0x4180 <_ZN8SdVolume15allocContiguousEmPm+0x158>
      return false;
    }

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    40ec:	2d 81       	ldd	r18, Y+5	; 0x05
    40ee:	3e 81       	ldd	r19, Y+6	; 0x06
    40f0:	4f 81       	ldd	r20, Y+7	; 0x07
    40f2:	58 85       	ldd	r21, Y+8	; 0x08
    40f4:	2c 15       	cp	r18, r12
    40f6:	3d 05       	cpc	r19, r13
    40f8:	4e 05       	cpc	r20, r14
    40fa:	5f 05       	cpc	r21, r15
    40fc:	50 f4       	brcc	.+20     	; 0x4112 <_ZN8SdVolume15allocContiguousEmPm+0xea>
      bgnCluster = endCluster = 2;
    40fe:	c1 2c       	mov	r12, r1
    4100:	d1 2c       	mov	r13, r1
    4102:	76 01       	movw	r14, r12
    4104:	68 94       	set
    4106:	c1 f8       	bld	r12, 1
    4108:	41 2c       	mov	r4, r1
    410a:	51 2c       	mov	r5, r1
    410c:	32 01       	movw	r6, r4
    410e:	68 94       	set
    4110:	41 f8       	bld	r4, 1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) {
    4112:	9e 01       	movw	r18, r28
    4114:	2f 5f       	subi	r18, 0xFF	; 255
    4116:	3f 4f       	sbci	r19, 0xFF	; 255
    4118:	b7 01       	movw	r22, r14
    411a:	a6 01       	movw	r20, r12
    411c:	c1 01       	movw	r24, r2
    411e:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <_ZNK8SdVolume6fatGetEmPm>
    4122:	88 23       	and	r24, r24
    4124:	69 f1       	breq	.+90     	; 0x4180 <_ZN8SdVolume15allocContiguousEmPm+0x158>
      return false;
    }

    if (f != 0) {
    4126:	89 81       	ldd	r24, Y+1	; 0x01
    4128:	9a 81       	ldd	r25, Y+2	; 0x02
    412a:	ab 81       	ldd	r26, Y+3	; 0x03
    412c:	bc 81       	ldd	r27, Y+4	; 0x04
    412e:	89 2b       	or	r24, r25
    4130:	8a 2b       	or	r24, r26
    4132:	8b 2b       	or	r24, r27
    4134:	41 f0       	breq	.+16     	; 0x4146 <_ZN8SdVolume15allocContiguousEmPm+0x11e>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    4136:	26 01       	movw	r4, r12
    4138:	37 01       	movw	r6, r14
    413a:	3f ef       	ldi	r19, 0xFF	; 255
    413c:	43 1a       	sub	r4, r19
    413e:	53 0a       	sbc	r5, r19
    4140:	63 0a       	sbc	r6, r19
    4142:	73 0a       	sbc	r7, r19
    4144:	12 c0       	rjmp	.+36     	; 0x416a <_ZN8SdVolume15allocContiguousEmPm+0x142>
    } else if ((endCluster - bgnCluster + 1) == count) {
    4146:	d7 01       	movw	r26, r14
    4148:	c6 01       	movw	r24, r12
    414a:	84 19       	sub	r24, r4
    414c:	95 09       	sbc	r25, r5
    414e:	a6 09       	sbc	r26, r6
    4150:	b7 09       	sbc	r27, r7
    4152:	01 96       	adiw	r24, 0x01	; 1
    4154:	a1 1d       	adc	r26, r1
    4156:	b1 1d       	adc	r27, r1
    4158:	29 85       	ldd	r18, Y+9	; 0x09
    415a:	3a 85       	ldd	r19, Y+10	; 0x0a
    415c:	4b 85       	ldd	r20, Y+11	; 0x0b
    415e:	5c 85       	ldd	r21, Y+12	; 0x0c
    4160:	28 17       	cp	r18, r24
    4162:	39 07       	cpc	r19, r25
    4164:	4a 07       	cpc	r20, r26
    4166:	5b 07       	cpc	r21, r27
    4168:	69 f0       	breq	.+26     	; 0x4184 <_ZN8SdVolume15allocContiguousEmPm+0x15c>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    416a:	3f ef       	ldi	r19, 0xFF	; 255
    416c:	83 1a       	sub	r8, r19
    416e:	93 0a       	sbc	r9, r19
    4170:	a3 0a       	sbc	r10, r19
    4172:	b3 0a       	sbc	r11, r19
    4174:	4f ef       	ldi	r20, 0xFF	; 255
    4176:	c4 1a       	sub	r12, r20
    4178:	d4 0a       	sbc	r13, r20
    417a:	e4 0a       	sbc	r14, r20
    417c:	f4 0a       	sbc	r15, r20
    417e:	ab cf       	rjmp	.-170    	; 0x40d6 <_ZN8SdVolume15allocContiguousEmPm+0xae>
    // can't find space checked all clusters
    if (n >= clusterCount_) {
      return false;
    4180:	80 e0       	ldi	r24, 0x00	; 0
    4182:	4d c0       	rjmp	.+154    	; 0x421e <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
    static uint8_t cacheZeroBlock(uint32_t blockNumber);
    uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
    uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
    uint8_t fatPut(uint32_t cluster, uint32_t value);
    uint8_t fatPutEOC(uint32_t cluster) {
      return fatPut(cluster, 0x0FFFFFFF);
    4184:	0f ef       	ldi	r16, 0xFF	; 255
    4186:	1f ef       	ldi	r17, 0xFF	; 255
    4188:	2f ef       	ldi	r18, 0xFF	; 255
    418a:	3f e0       	ldi	r19, 0x0F	; 15
    418c:	b7 01       	movw	r22, r14
    418e:	a6 01       	movw	r20, r12
    4190:	c1 01       	movw	r24, r2
    4192:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) {
    4196:	88 23       	and	r24, r24
    4198:	09 f4       	brne	.+2      	; 0x419c <_ZN8SdVolume15allocContiguousEmPm+0x174>
    419a:	41 c0       	rjmp	.+130    	; 0x421e <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
    return false;
  }

  // link clusters
  while (endCluster > bgnCluster) {
    419c:	4c 14       	cp	r4, r12
    419e:	5d 04       	cpc	r5, r13
    41a0:	6e 04       	cpc	r6, r14
    41a2:	7f 04       	cpc	r7, r15
    41a4:	98 f4       	brcc	.+38     	; 0x41cc <_ZN8SdVolume15allocContiguousEmPm+0x1a4>
    if (!fatPut(endCluster - 1, endCluster)) {
    41a6:	46 01       	movw	r8, r12
    41a8:	57 01       	movw	r10, r14
    41aa:	51 e0       	ldi	r21, 0x01	; 1
    41ac:	85 1a       	sub	r8, r21
    41ae:	91 08       	sbc	r9, r1
    41b0:	a1 08       	sbc	r10, r1
    41b2:	b1 08       	sbc	r11, r1
    41b4:	97 01       	movw	r18, r14
    41b6:	86 01       	movw	r16, r12
    41b8:	b5 01       	movw	r22, r10
    41ba:	a4 01       	movw	r20, r8
    41bc:	c1 01       	movw	r24, r2
    41be:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <_ZN8SdVolume6fatPutEmm>
    41c2:	88 23       	and	r24, r24
    41c4:	61 f1       	breq	.+88     	; 0x421e <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
      return false;
    }
    endCluster--;
    41c6:	75 01       	movw	r14, r10
    41c8:	64 01       	movw	r12, r8
    41ca:	e8 cf       	rjmp	.-48     	; 0x419c <_ZN8SdVolume15allocContiguousEmPm+0x174>
  }
  if (*curCluster != 0) {
    41cc:	ad 85       	ldd	r26, Y+13	; 0x0d
    41ce:	be 85       	ldd	r27, Y+14	; 0x0e
    41d0:	4d 91       	ld	r20, X+
    41d2:	5d 91       	ld	r21, X+
    41d4:	6d 91       	ld	r22, X+
    41d6:	7c 91       	ld	r23, X
    41d8:	41 15       	cp	r20, r1
    41da:	51 05       	cpc	r21, r1
    41dc:	61 05       	cpc	r22, r1
    41de:	71 05       	cpc	r23, r1
    41e0:	39 f0       	breq	.+14     	; 0x41f0 <_ZN8SdVolume15allocContiguousEmPm+0x1c8>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) {
    41e2:	93 01       	movw	r18, r6
    41e4:	82 01       	movw	r16, r4
    41e6:	c1 01       	movw	r24, r2
    41e8:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <_ZN8SdVolume6fatPutEmm>
    41ec:	88 23       	and	r24, r24
    41ee:	b9 f0       	breq	.+46     	; 0x421e <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
      return false;
    }
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    41f0:	ed 85       	ldd	r30, Y+13	; 0x0d
    41f2:	fe 85       	ldd	r31, Y+14	; 0x0e
    41f4:	40 82       	st	Z, r4
    41f6:	51 82       	std	Z+1, r5	; 0x01
    41f8:	62 82       	std	Z+2, r6	; 0x02
    41fa:	73 82       	std	Z+3, r7	; 0x03

  // remember possible next free cluster
  if (setStart) {
    41fc:	ff 85       	ldd	r31, Y+15	; 0x0f
    41fe:	ff 23       	and	r31, r31
    4200:	69 f0       	breq	.+26     	; 0x421c <_ZN8SdVolume15allocContiguousEmPm+0x1f4>
    allocSearchStart_ = bgnCluster + 1;
    4202:	2f ef       	ldi	r18, 0xFF	; 255
    4204:	42 1a       	sub	r4, r18
    4206:	52 0a       	sbc	r5, r18
    4208:	62 0a       	sbc	r6, r18
    420a:	72 0a       	sbc	r7, r18
    420c:	d1 01       	movw	r26, r2
    420e:	4d 92       	st	X+, r4
    4210:	5d 92       	st	X+, r5
    4212:	6d 92       	st	X+, r6
    4214:	7c 92       	st	X, r7
    4216:	13 97       	sbiw	r26, 0x03	; 3
  }

  return true;
    4218:	81 e0       	ldi	r24, 0x01	; 1
    421a:	01 c0       	rjmp	.+2      	; 0x421e <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
    421c:	81 e0       	ldi	r24, 0x01	; 1
}
    421e:	2f 96       	adiw	r28, 0x0f	; 15
    4220:	0f b6       	in	r0, 0x3f	; 63
    4222:	f8 94       	cli
    4224:	de bf       	out	0x3e, r29	; 62
    4226:	0f be       	out	0x3f, r0	; 63
    4228:	cd bf       	out	0x3d, r28	; 61
    422a:	df 91       	pop	r29
    422c:	cf 91       	pop	r28
    422e:	1f 91       	pop	r17
    4230:	0f 91       	pop	r16
    4232:	ff 90       	pop	r15
    4234:	ef 90       	pop	r14
    4236:	df 90       	pop	r13
    4238:	cf 90       	pop	r12
    423a:	bf 90       	pop	r11
    423c:	af 90       	pop	r10
    423e:	9f 90       	pop	r9
    4240:	8f 90       	pop	r8
    4242:	7f 90       	pop	r7
    4244:	6f 90       	pop	r6
    4246:	5f 90       	pop	r5
    4248:	4f 90       	pop	r4
    424a:	3f 90       	pop	r3
    424c:	2f 90       	pop	r2
    424e:	08 95       	ret

00004250 <_ZN8SdVolume9freeChainEm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    4250:	af 92       	push	r10
    4252:	bf 92       	push	r11
    4254:	cf 92       	push	r12
    4256:	df 92       	push	r13
    4258:	ef 92       	push	r14
    425a:	ff 92       	push	r15
    425c:	0f 93       	push	r16
    425e:	1f 93       	push	r17
    4260:	cf 93       	push	r28
    4262:	df 93       	push	r29
    4264:	00 d0       	rcall	.+0      	; 0x4266 <_ZN8SdVolume9freeChainEm+0x16>
    4266:	00 d0       	rcall	.+0      	; 0x4268 <_ZN8SdVolume9freeChainEm+0x18>
    4268:	cd b7       	in	r28, 0x3d	; 61
    426a:	de b7       	in	r29, 0x3e	; 62
    426c:	5c 01       	movw	r10, r24
    426e:	6a 01       	movw	r12, r20
    4270:	7b 01       	movw	r14, r22
  // clear free cluster location
  allocSearchStart_ = 2;
    4272:	82 e0       	ldi	r24, 0x02	; 2
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	a0 e0       	ldi	r26, 0x00	; 0
    4278:	b0 e0       	ldi	r27, 0x00	; 0
    427a:	f5 01       	movw	r30, r10
    427c:	80 83       	st	Z, r24
    427e:	91 83       	std	Z+1, r25	; 0x01
    4280:	a2 83       	std	Z+2, r26	; 0x02
    4282:	b3 83       	std	Z+3, r27	; 0x03

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) {
    4284:	9e 01       	movw	r18, r28
    4286:	2f 5f       	subi	r18, 0xFF	; 255
    4288:	3f 4f       	sbci	r19, 0xFF	; 255
    428a:	b7 01       	movw	r22, r14
    428c:	a6 01       	movw	r20, r12
    428e:	c5 01       	movw	r24, r10
    4290:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <_ZNK8SdVolume6fatGetEmPm>
    4294:	88 23       	and	r24, r24
    4296:	11 f1       	breq	.+68     	; 0x42dc <_ZN8SdVolume9freeChainEm+0x8c>
      return false;
    }

    // free cluster
    if (!fatPut(cluster, 0)) {
    4298:	00 e0       	ldi	r16, 0x00	; 0
    429a:	10 e0       	ldi	r17, 0x00	; 0
    429c:	98 01       	movw	r18, r16
    429e:	b7 01       	movw	r22, r14
    42a0:	a6 01       	movw	r20, r12
    42a2:	c5 01       	movw	r24, r10
    42a4:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <_ZN8SdVolume6fatPutEmm>
    42a8:	88 23       	and	r24, r24
    42aa:	c1 f0       	breq	.+48     	; 0x42dc <_ZN8SdVolume9freeChainEm+0x8c>
      return false;
    }

    cluster = next;
    42ac:	c9 80       	ldd	r12, Y+1	; 0x01
    42ae:	da 80       	ldd	r13, Y+2	; 0x02
    42b0:	eb 80       	ldd	r14, Y+3	; 0x03
    42b2:	fc 80       	ldd	r15, Y+4	; 0x04
    }
    uint8_t freeChain(uint32_t cluster);
    uint8_t isEOC(uint32_t cluster) const {
      return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    42b4:	f5 01       	movw	r30, r10
    42b6:	87 89       	ldd	r24, Z+23	; 0x17
    42b8:	80 31       	cpi	r24, 0x10	; 16
    42ba:	29 f4       	brne	.+10     	; 0x42c6 <_ZN8SdVolume9freeChainEm+0x76>
    42bc:	88 ef       	ldi	r24, 0xF8	; 248
    42be:	9f ef       	ldi	r25, 0xFF	; 255
    42c0:	a0 e0       	ldi	r26, 0x00	; 0
    42c2:	b0 e0       	ldi	r27, 0x00	; 0
    42c4:	04 c0       	rjmp	.+8      	; 0x42ce <_ZN8SdVolume9freeChainEm+0x7e>
    42c6:	88 ef       	ldi	r24, 0xF8	; 248
    42c8:	9f ef       	ldi	r25, 0xFF	; 255
    42ca:	af ef       	ldi	r26, 0xFF	; 255
    42cc:	bf e0       	ldi	r27, 0x0F	; 15
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    42ce:	c8 16       	cp	r12, r24
    42d0:	d9 06       	cpc	r13, r25
    42d2:	ea 06       	cpc	r14, r26
    42d4:	fb 06       	cpc	r15, r27
    42d6:	b0 f2       	brcs	.-84     	; 0x4284 <_ZN8SdVolume9freeChainEm+0x34>
    }

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    42d8:	81 e0       	ldi	r24, 0x01	; 1
    42da:	01 c0       	rjmp	.+2      	; 0x42de <_ZN8SdVolume9freeChainEm+0x8e>
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) {
      return false;
    42dc:	80 e0       	ldi	r24, 0x00	; 0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    42de:	0f 90       	pop	r0
    42e0:	0f 90       	pop	r0
    42e2:	0f 90       	pop	r0
    42e4:	0f 90       	pop	r0
    42e6:	df 91       	pop	r29
    42e8:	cf 91       	pop	r28
    42ea:	1f 91       	pop	r17
    42ec:	0f 91       	pop	r16
    42ee:	ff 90       	pop	r15
    42f0:	ef 90       	pop	r14
    42f2:	df 90       	pop	r13
    42f4:	cf 90       	pop	r12
    42f6:	bf 90       	pop	r11
    42f8:	af 90       	pop	r10
    42fa:	08 95       	ret

000042fc <_ZN8SdVolume4initEP7Sd2Cardh>:
   \return The value one, true, is returned for success and
   the value zero, false, is returned for failure.  Reasons for
   failure include not finding a valid partition, not finding a valid
   FAT file system in the specified partition or an I/O error.
*/
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    42fc:	4f 92       	push	r4
    42fe:	5f 92       	push	r5
    4300:	6f 92       	push	r6
    4302:	7f 92       	push	r7
    4304:	8f 92       	push	r8
    4306:	9f 92       	push	r9
    4308:	af 92       	push	r10
    430a:	bf 92       	push	r11
    430c:	cf 92       	push	r12
    430e:	df 92       	push	r13
    4310:	ef 92       	push	r14
    4312:	ff 92       	push	r15
    4314:	0f 93       	push	r16
    4316:	1f 93       	push	r17
    4318:	cf 93       	push	r28
    431a:	df 93       	push	r29
    431c:	8c 01       	movw	r16, r24
    431e:	c4 2f       	mov	r28, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    4320:	70 93 50 04 	sts	0x0450, r23	; 0x800450 <_ZN8SdVolume7sdCard_E+0x1>
    4324:	60 93 4f 04 	sts	0x044F, r22	; 0x80044f <_ZN8SdVolume7sdCard_E>
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    4328:	44 23       	and	r20, r20
    432a:	09 f4       	brne	.+2      	; 0x432e <_ZN8SdVolume4initEP7Sd2Cardh+0x32>
    432c:	44 c0       	rjmp	.+136    	; 0x43b6 <_ZN8SdVolume4initEP7Sd2Cardh+0xba>
    if (part > 4) {
    432e:	45 30       	cpi	r20, 0x05	; 5
    4330:	08 f0       	brcs	.+2      	; 0x4334 <_ZN8SdVolume4initEP7Sd2Cardh+0x38>
    4332:	29 c1       	rjmp	.+594    	; 0x4586 <_ZN8SdVolume4initEP7Sd2Cardh+0x28a>
      return false;
    }
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    4334:	40 e0       	ldi	r20, 0x00	; 0
    4336:	60 e0       	ldi	r22, 0x00	; 0
    4338:	70 e0       	ldi	r23, 0x00	; 0
    433a:	cb 01       	movw	r24, r22
    433c:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <_ZN8SdVolume13cacheRawBlockEmh>
    4340:	88 23       	and	r24, r24
    4342:	09 f4       	brne	.+2      	; 0x4346 <_ZN8SdVolume4initEP7Sd2Cardh+0x4a>
    4344:	2b c1       	rjmp	.+598    	; 0x459c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
      return false;
    }
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    4346:	4c 2f       	mov	r20, r28
    4348:	50 e0       	ldi	r21, 0x00	; 0
    434a:	41 50       	subi	r20, 0x01	; 1
    434c:	51 09       	sbc	r21, r1
    if ((p->boot & 0X7F) != 0  ||
    434e:	fa 01       	movw	r30, r20
    4350:	e2 95       	swap	r30
    4352:	f2 95       	swap	r31
    4354:	f0 7f       	andi	r31, 0xF0	; 240
    4356:	fe 27       	eor	r31, r30
    4358:	e0 7f       	andi	r30, 0xF0	; 240
    435a:	fe 27       	eor	r31, r30
    435c:	e1 5f       	subi	r30, 0xF1	; 241
    435e:	f9 4f       	sbci	r31, 0xF9	; 249
    4360:	80 81       	ld	r24, Z
    4362:	8f 77       	andi	r24, 0x7F	; 127
    4364:	09 f0       	breq	.+2      	; 0x4368 <_ZN8SdVolume4initEP7Sd2Cardh+0x6c>
    4366:	11 c1       	rjmp	.+546    	; 0x458a <_ZN8SdVolume4initEP7Sd2Cardh+0x28e>
        p->totalSectors < 100 ||
    4368:	fa 01       	movw	r30, r20
    436a:	e2 95       	swap	r30
    436c:	f2 95       	swap	r31
    436e:	f0 7f       	andi	r31, 0xF0	; 240
    4370:	fe 27       	eor	r31, r30
    4372:	e0 7f       	andi	r30, 0xF0	; 240
    4374:	fe 27       	eor	r31, r30
    4376:	e5 5e       	subi	r30, 0xE5	; 229
    4378:	f9 4f       	sbci	r31, 0xF9	; 249
    437a:	c0 80       	ld	r12, Z
    437c:	d1 80       	ldd	r13, Z+1	; 0x01
    437e:	e2 80       	ldd	r14, Z+2	; 0x02
    4380:	f3 80       	ldd	r15, Z+3	; 0x03
    }
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
      return false;
    }
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0  ||
    4382:	24 e6       	ldi	r18, 0x64	; 100
    4384:	c2 16       	cp	r12, r18
    4386:	d1 04       	cpc	r13, r1
    4388:	e1 04       	cpc	r14, r1
    438a:	f1 04       	cpc	r15, r1
    438c:	08 f4       	brcc	.+2      	; 0x4390 <_ZN8SdVolume4initEP7Sd2Cardh+0x94>
    438e:	06 c1       	rjmp	.+524    	; 0x459c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
        p->totalSectors < 100 ||
        p->firstSector == 0) {
    4390:	42 95       	swap	r20
    4392:	52 95       	swap	r21
    4394:	50 7f       	andi	r21, 0xF0	; 240
    4396:	54 27       	eor	r21, r20
    4398:	40 7f       	andi	r20, 0xF0	; 240
    439a:	54 27       	eor	r21, r20
    439c:	fa 01       	movw	r30, r20
    439e:	e9 5e       	subi	r30, 0xE9	; 233
    43a0:	f9 4f       	sbci	r31, 0xF9	; 249
    43a2:	c0 80       	ld	r12, Z
    43a4:	d1 80       	ldd	r13, Z+1	; 0x01
    43a6:	e2 80       	ldd	r14, Z+2	; 0x02
    43a8:	f3 80       	ldd	r15, Z+3	; 0x03
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
      return false;
    }
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0  ||
        p->totalSectors < 100 ||
    43aa:	c1 14       	cp	r12, r1
    43ac:	d1 04       	cpc	r13, r1
    43ae:	e1 04       	cpc	r14, r1
    43b0:	f1 04       	cpc	r15, r1
    43b2:	21 f4       	brne	.+8      	; 0x43bc <_ZN8SdVolume4initEP7Sd2Cardh+0xc0>
    43b4:	f3 c0       	rjmp	.+486    	; 0x459c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
   the value zero, false, is returned for failure.  Reasons for
   failure include not finding a valid partition, not finding a valid
   FAT file system in the specified partition or an I/O error.
*/
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    43b6:	c1 2c       	mov	r12, r1
    43b8:	d1 2c       	mov	r13, r1
    43ba:	76 01       	movw	r14, r12
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    43bc:	40 e0       	ldi	r20, 0x00	; 0
    43be:	c7 01       	movw	r24, r14
    43c0:	b6 01       	movw	r22, r12
    43c2:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <_ZN8SdVolume13cacheRawBlockEmh>
    43c6:	88 23       	and	r24, r24
    43c8:	09 f4       	brne	.+2      	; 0x43cc <_ZN8SdVolume4initEP7Sd2Cardh+0xd0>
    43ca:	e8 c0       	rjmp	.+464    	; 0x459c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    43cc:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <_ZN8SdVolume12cacheBuffer_E+0xb>
    43d0:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <_ZN8SdVolume12cacheBuffer_E+0xc>
    43d4:	81 15       	cp	r24, r1
    43d6:	92 40       	sbci	r25, 0x02	; 2
    43d8:	09 f0       	breq	.+2      	; 0x43dc <_ZN8SdVolume4initEP7Sd2Cardh+0xe0>
    43da:	d9 c0       	rjmp	.+434    	; 0x458e <_ZN8SdVolume4initEP7Sd2Cardh+0x292>
      bpb->fatCount == 0 ||
    43dc:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <_ZN8SdVolume12cacheBuffer_E+0x10>
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    43e0:	88 23       	and	r24, r24
    43e2:	09 f4       	brne	.+2      	; 0x43e6 <_ZN8SdVolume4initEP7Sd2Cardh+0xea>
    43e4:	db c0       	rjmp	.+438    	; 0x459c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
      bpb->fatCount == 0 ||
      bpb->reservedSectorCount == 0 ||
    43e6:	20 91 5f 04 	lds	r18, 0x045F	; 0x80045f <_ZN8SdVolume12cacheBuffer_E+0xe>
    43ea:	30 91 60 04 	lds	r19, 0x0460	; 0x800460 <_ZN8SdVolume12cacheBuffer_E+0xf>
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
      bpb->fatCount == 0 ||
    43ee:	23 2b       	or	r18, r19
    43f0:	09 f4       	brne	.+2      	; 0x43f4 <_ZN8SdVolume4initEP7Sd2Cardh+0xf8>
    43f2:	cf c0       	rjmp	.+414    	; 0x4592 <_ZN8SdVolume4initEP7Sd2Cardh+0x296>
      bpb->reservedSectorCount == 0 ||
      bpb->sectorsPerCluster == 0) {
    43f4:	60 91 5e 04 	lds	r22, 0x045E	; 0x80045e <_ZN8SdVolume12cacheBuffer_E+0xd>
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
      bpb->fatCount == 0 ||
      bpb->reservedSectorCount == 0 ||
    43f8:	66 23       	and	r22, r22
    43fa:	09 f4       	brne	.+2      	; 0x43fe <_ZN8SdVolume4initEP7Sd2Cardh+0x102>
    43fc:	cc c0       	rjmp	.+408    	; 0x4596 <_ZN8SdVolume4initEP7Sd2Cardh+0x29a>
      bpb->sectorsPerCluster == 0) {
    // not valid FAT volume
    return false;
  }
  fatCount_ = bpb->fatCount;
    43fe:	e8 01       	movw	r28, r16
    4400:	8a 8b       	std	Y+18, r24	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    4402:	6c 83       	std	Y+4, r22	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    4404:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    4406:	f8 01       	movw	r30, r16
    4408:	85 85       	ldd	r24, Z+13	; 0x0d
    440a:	e8 2f       	mov	r30, r24
    440c:	21 e0       	ldi	r18, 0x01	; 1
    440e:	30 e0       	ldi	r19, 0x00	; 0
    4410:	08 2e       	mov	r0, r24
    4412:	02 c0       	rjmp	.+4      	; 0x4418 <_ZN8SdVolume4initEP7Sd2Cardh+0x11c>
    4414:	22 0f       	add	r18, r18
    4416:	33 1f       	adc	r19, r19
    4418:	0a 94       	dec	r0
    441a:	e2 f7       	brpl	.-8      	; 0x4414 <_ZN8SdVolume4initEP7Sd2Cardh+0x118>
    441c:	46 2f       	mov	r20, r22
    441e:	50 e0       	ldi	r21, 0x00	; 0
    4420:	42 17       	cp	r20, r18
    4422:	53 07       	cpc	r21, r19
    4424:	41 f0       	breq	.+16     	; 0x4436 <_ZN8SdVolume4initEP7Sd2Cardh+0x13a>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) {
    4426:	91 e0       	ldi	r25, 0x01	; 1
    4428:	98 0f       	add	r25, r24
    442a:	d8 01       	movw	r26, r16
    442c:	1d 96       	adiw	r26, 0x0d	; 13
    442e:	9c 93       	st	X, r25
    4430:	88 30       	cpi	r24, 0x08	; 8
    4432:	48 f3       	brcs	.-46     	; 0x4406 <_ZN8SdVolume4initEP7Sd2Cardh+0x10a>
    4434:	b2 c0       	rjmp	.+356    	; 0x459a <_ZN8SdVolume4initEP7Sd2Cardh+0x29e>
      return false;
    }
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    4436:	20 91 67 04 	lds	r18, 0x0467	; 0x800467 <_ZN8SdVolume12cacheBuffer_E+0x16>
    443a:	30 91 68 04 	lds	r19, 0x0468	; 0x800468 <_ZN8SdVolume12cacheBuffer_E+0x17>
                  bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    443e:	21 15       	cp	r18, r1
    4440:	31 05       	cpc	r19, r1
    4442:	19 f0       	breq	.+6      	; 0x444a <_ZN8SdVolume4initEP7Sd2Cardh+0x14e>
    4444:	40 e0       	ldi	r20, 0x00	; 0
    4446:	50 e0       	ldi	r21, 0x00	; 0
    4448:	08 c0       	rjmp	.+16     	; 0x445a <_ZN8SdVolume4initEP7Sd2Cardh+0x15e>
    444a:	20 91 75 04 	lds	r18, 0x0475	; 0x800475 <_ZN8SdVolume12cacheBuffer_E+0x24>
    444e:	30 91 76 04 	lds	r19, 0x0476	; 0x800476 <_ZN8SdVolume12cacheBuffer_E+0x25>
    4452:	40 91 77 04 	lds	r20, 0x0477	; 0x800477 <_ZN8SdVolume12cacheBuffer_E+0x26>
    4456:	50 91 78 04 	lds	r21, 0x0478	; 0x800478 <_ZN8SdVolume12cacheBuffer_E+0x27>
    445a:	e8 01       	movw	r28, r16
    445c:	2d 83       	std	Y+5, r18	; 0x05
    445e:	3e 83       	std	Y+6, r19	; 0x06
    4460:	4f 83       	std	Y+7, r20	; 0x07
    4462:	58 87       	std	Y+8, r21	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    4464:	0f 2e       	mov	r0, r31
    4466:	f1 e5       	ldi	r31, 0x51	; 81
    4468:	af 2e       	mov	r10, r31
    446a:	f4 e0       	ldi	r31, 0x04	; 4
    446c:	bf 2e       	mov	r11, r31
    446e:	f0 2d       	mov	r31, r0
    4470:	d5 01       	movw	r26, r10
    4472:	1e 96       	adiw	r26, 0x0e	; 14
    4474:	8d 91       	ld	r24, X+
    4476:	9c 91       	ld	r25, X
    4478:	1f 97       	sbiw	r26, 0x0f	; 15
    447a:	26 01       	movw	r4, r12
    447c:	37 01       	movw	r6, r14
    447e:	48 0e       	add	r4, r24
    4480:	59 1e       	adc	r5, r25
    4482:	61 1c       	adc	r6, r1
    4484:	71 1c       	adc	r7, r1
    4486:	4b 8a       	std	Y+19, r4	; 0x13
    4488:	5c 8a       	std	Y+20, r5	; 0x14
    448a:	6d 8a       	std	Y+21, r6	; 0x15
    448c:	7e 8a       	std	Y+22, r7	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    448e:	51 96       	adiw	r26, 0x11	; 17
    4490:	8d 90       	ld	r8, X+
    4492:	9c 90       	ld	r9, X
    4494:	52 97       	sbiw	r26, 0x12	; 18
    4496:	99 8e       	std	Y+25, r9	; 0x19
    4498:	88 8e       	std	Y+24, r8	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    449a:	50 96       	adiw	r26, 0x10	; 16
    449c:	8c 91       	ld	r24, X
    449e:	a8 2f       	mov	r26, r24
    44a0:	b0 e0       	ldi	r27, 0x00	; 0
    44a2:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <__muluhisi3>
    44a6:	dc 01       	movw	r26, r24
    44a8:	cb 01       	movw	r24, r22
    44aa:	84 0d       	add	r24, r4
    44ac:	95 1d       	adc	r25, r5
    44ae:	a6 1d       	adc	r26, r6
    44b0:	b7 1d       	adc	r27, r7
    44b2:	8a 8f       	std	Y+26, r24	; 0x1a
    44b4:	9b 8f       	std	Y+27, r25	; 0x1b
    44b6:	ac 8f       	std	Y+28, r26	; 0x1c
    44b8:	bd 8f       	std	Y+29, r27	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511) / 512);
    44ba:	e4 01       	movw	r28, r8
    44bc:	cc 0f       	add	r28, r28
    44be:	dd 1f       	adc	r29, r29
    44c0:	c2 95       	swap	r28
    44c2:	d2 95       	swap	r29
    44c4:	d0 7f       	andi	r29, 0xF0	; 240
    44c6:	dc 27       	eor	r29, r28
    44c8:	c0 7f       	andi	r28, 0xF0	; 240
    44ca:	dc 27       	eor	r29, r28
    44cc:	c1 50       	subi	r28, 0x01	; 1
    44ce:	de 4f       	sbci	r29, 0xFE	; 254
    44d0:	cd 2f       	mov	r28, r29
    44d2:	dd 27       	eor	r29, r29
    44d4:	c6 95       	lsr	r28
    44d6:	8c 0f       	add	r24, r28
    44d8:	9d 1f       	adc	r25, r29
    44da:	a1 1d       	adc	r26, r1
    44dc:	b1 1d       	adc	r27, r1
    44de:	e8 01       	movw	r28, r16
    44e0:	8e 87       	std	Y+14, r24	; 0x0e
    44e2:	9f 87       	std	Y+15, r25	; 0x0f
    44e4:	a8 8b       	std	Y+16, r26	; 0x10
    44e6:	b9 8b       	std	Y+17, r27	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    44e8:	e5 01       	movw	r28, r10
    44ea:	4b 88       	ldd	r4, Y+19	; 0x13
    44ec:	5c 88       	ldd	r5, Y+20	; 0x14
                         bpb->totalSectors16 : bpb->totalSectors32;
    44ee:	41 14       	cp	r4, r1
    44f0:	51 04       	cpc	r5, r1
    44f2:	19 f0       	breq	.+6      	; 0x44fa <_ZN8SdVolume4initEP7Sd2Cardh+0x1fe>
    44f4:	61 2c       	mov	r6, r1
    44f6:	71 2c       	mov	r7, r1
    44f8:	08 c0       	rjmp	.+16     	; 0x450a <_ZN8SdVolume4initEP7Sd2Cardh+0x20e>
    44fa:	40 90 71 04 	lds	r4, 0x0471	; 0x800471 <_ZN8SdVolume12cacheBuffer_E+0x20>
    44fe:	50 90 72 04 	lds	r5, 0x0472	; 0x800472 <_ZN8SdVolume12cacheBuffer_E+0x21>
    4502:	60 90 73 04 	lds	r6, 0x0473	; 0x800473 <_ZN8SdVolume12cacheBuffer_E+0x22>
    4506:	70 90 74 04 	lds	r7, 0x0474	; 0x800474 <_ZN8SdVolume12cacheBuffer_E+0x23>
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
    450a:	c8 1a       	sub	r12, r24
    450c:	d9 0a       	sbc	r13, r25
    450e:	ea 0a       	sbc	r14, r26
    4510:	fb 0a       	sbc	r15, r27
    4512:	c4 0c       	add	r12, r4
    4514:	d5 1c       	adc	r13, r5
    4516:	e6 1c       	adc	r14, r6
    4518:	f7 1c       	adc	r15, r7

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    451a:	04 c0       	rjmp	.+8      	; 0x4524 <_ZN8SdVolume4initEP7Sd2Cardh+0x228>
    451c:	f6 94       	lsr	r15
    451e:	e7 94       	ror	r14
    4520:	d7 94       	ror	r13
    4522:	c7 94       	ror	r12
    4524:	ea 95       	dec	r30
    4526:	d2 f7       	brpl	.-12     	; 0x451c <_ZN8SdVolume4initEP7Sd2Cardh+0x220>
    4528:	f8 01       	movw	r30, r16
    452a:	c1 86       	std	Z+9, r12	; 0x09
    452c:	d2 86       	std	Z+10, r13	; 0x0a
    452e:	e3 86       	std	Z+11, r14	; 0x0b
    4530:	f4 86       	std	Z+12, r15	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    4532:	f5 ef       	ldi	r31, 0xF5	; 245
    4534:	cf 16       	cp	r12, r31
    4536:	ff e0       	ldi	r31, 0x0F	; 15
    4538:	df 06       	cpc	r13, r31
    453a:	e1 04       	cpc	r14, r1
    453c:	f1 04       	cpc	r15, r1
    453e:	30 f4       	brcc	.+12     	; 0x454c <_ZN8SdVolume4initEP7Sd2Cardh+0x250>
    fatType_ = 12;
    4540:	8c e0       	ldi	r24, 0x0C	; 12
    4542:	d8 01       	movw	r26, r16
    4544:	57 96       	adiw	r26, 0x17	; 23
    4546:	8c 93       	st	X, r24
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    4548:	81 e0       	ldi	r24, 0x01	; 1
    454a:	28 c0       	rjmp	.+80     	; 0x459c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  clusterCount_ >>= clusterSizeShift_;

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    454c:	b5 ef       	ldi	r27, 0xF5	; 245
    454e:	cb 16       	cp	r12, r27
    4550:	bf ef       	ldi	r27, 0xFF	; 255
    4552:	db 06       	cpc	r13, r27
    4554:	e1 04       	cpc	r14, r1
    4556:	f1 04       	cpc	r15, r1
    4558:	28 f4       	brcc	.+10     	; 0x4564 <_ZN8SdVolume4initEP7Sd2Cardh+0x268>
    fatType_ = 16;
    455a:	80 e1       	ldi	r24, 0x10	; 16
    455c:	e8 01       	movw	r28, r16
    455e:	8f 8b       	std	Y+23, r24	; 0x17
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    4560:	81 e0       	ldi	r24, 0x01	; 1
    4562:	1c c0       	rjmp	.+56     	; 0x459c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    4564:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <_ZN8SdVolume12cacheBuffer_E+0x2c>
    4568:	90 91 7e 04 	lds	r25, 0x047E	; 0x80047e <_ZN8SdVolume12cacheBuffer_E+0x2d>
    456c:	a0 91 7f 04 	lds	r26, 0x047F	; 0x80047f <_ZN8SdVolume12cacheBuffer_E+0x2e>
    4570:	b0 91 80 04 	lds	r27, 0x0480	; 0x800480 <_ZN8SdVolume12cacheBuffer_E+0x2f>
    4574:	f8 01       	movw	r30, r16
    4576:	82 8f       	std	Z+26, r24	; 0x1a
    4578:	93 8f       	std	Z+27, r25	; 0x1b
    457a:	a4 8f       	std	Z+28, r26	; 0x1c
    457c:	b5 8f       	std	Z+29, r27	; 0x1d
    fatType_ = 32;
    457e:	80 e2       	ldi	r24, 0x20	; 32
    4580:	87 8b       	std	Z+23, r24	; 0x17
  }
  return true;
    4582:	81 e0       	ldi	r24, 0x01	; 1
    4584:	0b c0       	rjmp	.+22     	; 0x459c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  sdCard_ = dev;
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4) {
      return false;
    4586:	80 e0       	ldi	r24, 0x00	; 0
    4588:	09 c0       	rjmp	.+18     	; 0x459c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0  ||
        p->totalSectors < 100 ||
        p->firstSector == 0) {
      // not a valid partition
      return false;
    458a:	80 e0       	ldi	r24, 0x00	; 0
    458c:	07 c0       	rjmp	.+14     	; 0x459c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  if (bpb->bytesPerSector != 512 ||
      bpb->fatCount == 0 ||
      bpb->reservedSectorCount == 0 ||
      bpb->sectorsPerCluster == 0) {
    // not valid FAT volume
    return false;
    458e:	80 e0       	ldi	r24, 0x00	; 0
    4590:	05 c0       	rjmp	.+10     	; 0x459c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    4592:	80 e0       	ldi	r24, 0x00	; 0
    4594:	03 c0       	rjmp	.+6      	; 0x459c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    4596:	86 2f       	mov	r24, r22
    4598:	01 c0       	rjmp	.+2      	; 0x459c <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    // error if not power of 2
    if (clusterSizeShift_++ > 7) {
      return false;
    459a:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
}
    459c:	df 91       	pop	r29
    459e:	cf 91       	pop	r28
    45a0:	1f 91       	pop	r17
    45a2:	0f 91       	pop	r16
    45a4:	ff 90       	pop	r15
    45a6:	ef 90       	pop	r14
    45a8:	df 90       	pop	r13
    45aa:	cf 90       	pop	r12
    45ac:	bf 90       	pop	r11
    45ae:	af 90       	pop	r10
    45b0:	9f 90       	pop	r9
    45b2:	8f 90       	pop	r8
    45b4:	7f 90       	pop	r7
    45b6:	6f 90       	pop	r6
    45b8:	5f 90       	pop	r5
    45ba:	4f 90       	pop	r4
    45bc:	08 95       	ret

000045be <_ZN9LCDScreenC1Eh>:
	_cols = lcd_cols;
	_rows = lcd_rows;
	_charsize = charsize;
	_backlightval = LCD_BACKLIGHT;
} */
LCDScreen::LCDScreen(uint8_t lcd_addr)
    45be:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    45c0:	13 82       	std	Z+3, r1	; 0x03
    45c2:	12 82       	std	Z+2, r1	; 0x02
    45c4:	87 ec       	ldi	r24, 0xC7	; 199
    45c6:	91 e0       	ldi	r25, 0x01	; 1
    45c8:	91 83       	std	Z+1, r25	; 0x01
    45ca:	80 83       	st	Z, r24
{
	_addr = lcd_addr;
    45cc:	64 83       	std	Z+4, r22	; 0x04
    45ce:	08 95       	ret

000045d0 <_ZN9LCDScreen13expanderWriteEh>:
void LCDScreen::write4bits(uint8_t value) {
	expanderWrite(value);
	pulseEnable(value);
}

void LCDScreen::expanderWrite(uint8_t _data){
    45d0:	cf 93       	push	r28
    45d2:	c6 2f       	mov	r28, r22
	Wire.beginTransmission(_addr);
    45d4:	fc 01       	movw	r30, r24
    45d6:	64 81       	ldd	r22, Z+4	; 0x04
    45d8:	86 ea       	ldi	r24, 0xA6	; 166
    45da:	93 e0       	ldi	r25, 0x03	; 3
    45dc:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((int)(_data) | 0x08);
    45e0:	6c 2f       	mov	r22, r28
    45e2:	68 60       	ori	r22, 0x08	; 8
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    45e4:	e0 91 a6 03 	lds	r30, 0x03A6	; 0x8003a6 <Wire>
    45e8:	f0 91 a7 03 	lds	r31, 0x03A7	; 0x8003a7 <Wire+0x1>
    45ec:	01 90       	ld	r0, Z+
    45ee:	f0 81       	ld	r31, Z
    45f0:	e0 2d       	mov	r30, r0
    45f2:	86 ea       	ldi	r24, 0xA6	; 166
    45f4:	93 e0       	ldi	r25, 0x03	; 3
    45f6:	09 95       	icall
	Wire.endTransmission();
    45f8:	86 ea       	ldi	r24, 0xA6	; 166
    45fa:	93 e0       	ldi	r25, 0x03	; 3
    45fc:	0e 94 87 0c 	call	0x190e	; 0x190e <_ZN7TwoWire15endTransmissionEv>
}
    4600:	cf 91       	pop	r28
    4602:	08 95       	ret

00004604 <_ZN9LCDScreen11pulseEnableEh>:

void LCDScreen::pulseEnable(uint8_t _data){
    4604:	0f 93       	push	r16
    4606:	1f 93       	push	r17
    4608:	cf 93       	push	r28
    460a:	8c 01       	movw	r16, r24
    460c:	c6 2f       	mov	r28, r22
	expanderWrite(_data | En);	// En high
    460e:	64 60       	ori	r22, 0x04	; 4
    4610:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <_ZN9LCDScreen13expanderWriteEh>
	delayMicroseconds(1);		// enable pulse must be >450ns
    4614:	81 e0       	ldi	r24, 0x01	; 1
    4616:	90 e0       	ldi	r25, 0x00	; 0
    4618:	0e 94 d3 05 	call	0xba6	; 0xba6 <delayMicroseconds>

	expanderWrite(_data & ~En);	// En low
    461c:	6c 2f       	mov	r22, r28
    461e:	6b 7f       	andi	r22, 0xFB	; 251
    4620:	c8 01       	movw	r24, r16
    4622:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <_ZN9LCDScreen13expanderWriteEh>
	delayMicroseconds(50);		// commands need > 37us to settle
    4626:	82 e3       	ldi	r24, 0x32	; 50
    4628:	90 e0       	ldi	r25, 0x00	; 0
    462a:	0e 94 d3 05 	call	0xba6	; 0xba6 <delayMicroseconds>
}
    462e:	cf 91       	pop	r28
    4630:	1f 91       	pop	r17
    4632:	0f 91       	pop	r16
    4634:	08 95       	ret

00004636 <_ZN9LCDScreen10write4bitsEh>:
	uint8_t lownib=(value<<4)&0xf0;
	write4bits((highnib)|mode);
	write4bits((lownib)|mode);
}

void LCDScreen::write4bits(uint8_t value) {
    4636:	1f 93       	push	r17
    4638:	cf 93       	push	r28
    463a:	df 93       	push	r29
    463c:	ec 01       	movw	r28, r24
    463e:	16 2f       	mov	r17, r22
	expanderWrite(value);
    4640:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <_ZN9LCDScreen13expanderWriteEh>
	pulseEnable(value);
    4644:	61 2f       	mov	r22, r17
    4646:	ce 01       	movw	r24, r28
    4648:	0e 94 02 23 	call	0x4604	; 0x4604 <_ZN9LCDScreen11pulseEnableEh>
}
    464c:	df 91       	pop	r29
    464e:	cf 91       	pop	r28
    4650:	1f 91       	pop	r17
    4652:	08 95       	ret

00004654 <_ZN9LCDScreen4sendEhh>:


/************ low level data pushing commands **********/

// write either command or data
void LCDScreen::send(uint8_t value, uint8_t mode) {
    4654:	ff 92       	push	r15
    4656:	0f 93       	push	r16
    4658:	1f 93       	push	r17
    465a:	cf 93       	push	r28
    465c:	df 93       	push	r29
    465e:	8c 01       	movw	r16, r24
    4660:	f4 2e       	mov	r15, r20
	uint8_t highnib=value&0xf0;
    4662:	86 2f       	mov	r24, r22
    4664:	80 7f       	andi	r24, 0xF0	; 240
	uint8_t lownib=(value<<4)&0xf0;
    4666:	90 e1       	ldi	r25, 0x10	; 16
    4668:	69 9f       	mul	r22, r25
    466a:	e0 01       	movw	r28, r0
    466c:	11 24       	eor	r1, r1
	write4bits((highnib)|mode);
    466e:	68 2f       	mov	r22, r24
    4670:	64 2b       	or	r22, r20
    4672:	c8 01       	movw	r24, r16
    4674:	0e 94 1b 23 	call	0x4636	; 0x4636 <_ZN9LCDScreen10write4bitsEh>
	write4bits((lownib)|mode);
    4678:	6c 2f       	mov	r22, r28
    467a:	6f 29       	or	r22, r15
    467c:	c8 01       	movw	r24, r16
    467e:	0e 94 1b 23 	call	0x4636	; 0x4636 <_ZN9LCDScreen10write4bitsEh>
}
    4682:	df 91       	pop	r29
    4684:	cf 91       	pop	r28
    4686:	1f 91       	pop	r17
    4688:	0f 91       	pop	r16
    468a:	ff 90       	pop	r15
    468c:	08 95       	ret

0000468e <_ZN9LCDScreen5clearEv>:
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
    468e:	40 e0       	ldi	r20, 0x00	; 0
    4690:	61 e0       	ldi	r22, 0x01	; 1
    4692:	0e 94 2a 23 	call	0x4654	; 0x4654 <_ZN9LCDScreen4sendEhh>
}

/********** high level commands, for the user! */
void LCDScreen::clear(){
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
    4696:	80 ed       	ldi	r24, 0xD0	; 208
    4698:	97 e0       	ldi	r25, 0x07	; 7
    469a:	0e 94 d3 05 	call	0xba6	; 0xba6 <delayMicroseconds>
    469e:	08 95       	ret

000046a0 <_ZN9LCDScreen4homeEv>:
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
    46a0:	40 e0       	ldi	r20, 0x00	; 0
    46a2:	62 e0       	ldi	r22, 0x02	; 2
    46a4:	0e 94 2a 23 	call	0x4654	; 0x4654 <_ZN9LCDScreen4sendEhh>
	delayMicroseconds(2000);  // this command takes a long time!
}

void LCDScreen::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
    46a8:	80 ed       	ldi	r24, 0xD0	; 208
    46aa:	97 e0       	ldi	r25, 0x07	; 7
    46ac:	0e 94 d3 05 	call	0xba6	; 0xba6 <delayMicroseconds>
    46b0:	08 95       	ret

000046b2 <_ZN9LCDScreen9setCursorEhh>:
} 

void LCDScreen::setCursor(uint8_t col, uint8_t row){
    46b2:	cf 93       	push	r28
    46b4:	df 93       	push	r29
    46b6:	cd b7       	in	r28, 0x3d	; 61
    46b8:	de b7       	in	r29, 0x3e	; 62
    46ba:	28 97       	sbiw	r28, 0x08	; 8
    46bc:	0f b6       	in	r0, 0x3f	; 63
    46be:	f8 94       	cli
    46c0:	de bf       	out	0x3e, r29	; 62
    46c2:	0f be       	out	0x3f, r0	; 63
    46c4:	cd bf       	out	0x3d, r28	; 61
    46c6:	9c 01       	movw	r18, r24
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
    46c8:	98 e0       	ldi	r25, 0x08	; 8
    46ca:	e3 e1       	ldi	r30, 0x13	; 19
    46cc:	f1 e0       	ldi	r31, 0x01	; 1
    46ce:	de 01       	movw	r26, r28
    46d0:	11 96       	adiw	r26, 0x01	; 1
    46d2:	01 90       	ld	r0, Z+
    46d4:	0d 92       	st	X+, r0
    46d6:	9a 95       	dec	r25
    46d8:	e1 f7       	brne	.-8      	; 0x46d2 <_ZN9LCDScreen9setCursorEhh+0x20>
	if (row > 2) {
    46da:	43 30       	cpi	r20, 0x03	; 3
    46dc:	08 f0       	brcs	.+2      	; 0x46e0 <_ZN9LCDScreen9setCursorEhh+0x2e>
		row = 1;    // we count rows starting w/0
    46de:	41 e0       	ldi	r20, 0x01	; 1
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
    46e0:	e4 2f       	mov	r30, r20
    46e2:	f0 e0       	ldi	r31, 0x00	; 0
    46e4:	ee 0f       	add	r30, r30
    46e6:	ff 1f       	adc	r31, r31
    46e8:	81 e0       	ldi	r24, 0x01	; 1
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	8c 0f       	add	r24, r28
    46ee:	9d 1f       	adc	r25, r29
    46f0:	e8 0f       	add	r30, r24
    46f2:	f9 1f       	adc	r31, r25
    46f4:	90 81       	ld	r25, Z
    46f6:	69 0f       	add	r22, r25
    46f8:	60 68       	ori	r22, 0x80	; 128
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
    46fa:	40 e0       	ldi	r20, 0x00	; 0
    46fc:	c9 01       	movw	r24, r18
    46fe:	0e 94 2a 23 	call	0x4654	; 0x4654 <_ZN9LCDScreen4sendEhh>
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (row > 2) {
		row = 1;    // we count rows starting w/0
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
}
    4702:	28 96       	adiw	r28, 0x08	; 8
    4704:	0f b6       	in	r0, 0x3f	; 63
    4706:	f8 94       	cli
    4708:	de bf       	out	0x3e, r29	; 62
    470a:	0f be       	out	0x3f, r0	; 63
    470c:	cd bf       	out	0x3d, r28	; 61
    470e:	df 91       	pop	r29
    4710:	cf 91       	pop	r28
    4712:	08 95       	ret

00004714 <_ZN9LCDScreen7displayEv>:


void LCDScreen::display() {
	_displaycontrol |= LCD_DISPLAYON;
    4714:	fc 01       	movw	r30, r24
    4716:	66 81       	ldd	r22, Z+6	; 0x06
    4718:	26 2f       	mov	r18, r22
    471a:	24 60       	ori	r18, 0x04	; 4
    471c:	26 83       	std	Z+6, r18	; 0x06
	command(LCD_DISPLAYCONTROL | _displaycontrol);
    471e:	6c 60       	ori	r22, 0x0C	; 12
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
    4720:	40 e0       	ldi	r20, 0x00	; 0
    4722:	0e 94 2a 23 	call	0x4654	; 0x4654 <_ZN9LCDScreen4sendEhh>
    4726:	08 95       	ret

00004728 <_ZN9LCDScreen5writeEh>:
}

inline size_t LCDScreen::write(uint8_t value) {
	send(value, Rs);
    4728:	41 e0       	ldi	r20, 0x01	; 1
    472a:	0e 94 2a 23 	call	0x4654	; 0x4654 <_ZN9LCDScreen4sendEhh>
	return 1;
}
    472e:	81 e0       	ldi	r24, 0x01	; 1
    4730:	90 e0       	ldi	r25, 0x00	; 0
    4732:	08 95       	ret

00004734 <_ZN9LCDScreen5beginEv>:
} */
LCDScreen::LCDScreen(uint8_t lcd_addr)
{
	_addr = lcd_addr;
}
void LCDScreen::begin() {
    4734:	cf 93       	push	r28
    4736:	df 93       	push	r29
    4738:	ec 01       	movw	r28, r24
	Wire.begin();
    473a:	86 ea       	ldi	r24, 0xA6	; 166
    473c:	93 e0       	ldi	r25, 0x03	; 3
    473e:	0e 94 57 0c 	call	0x18ae	; 0x18ae <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	_displayfunction |= LCD_2LINE;
    4742:	88 e0       	ldi	r24, 0x08	; 8
    4744:	8d 83       	std	Y+5, r24	; 0x05
	} */

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50);
    4746:	62 e3       	ldi	r22, 0x32	; 50
    4748:	70 e0       	ldi	r23, 0x00	; 0
    474a:	80 e0       	ldi	r24, 0x00	; 0
    474c:	90 e0       	ldi	r25, 0x00	; 0
    474e:	0e 94 96 05 	call	0xb2c	; 0xb2c <delay>

	// Now we pull both RS and R/W low to begin commands
	expanderWrite(0x08);	// reset expanderand turn backlight off (Bit 8 =1)
    4752:	68 e0       	ldi	r22, 0x08	; 8
    4754:	ce 01       	movw	r24, r28
    4756:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <_ZN9LCDScreen13expanderWriteEh>
	delay(1000);
    475a:	68 ee       	ldi	r22, 0xE8	; 232
    475c:	73 e0       	ldi	r23, 0x03	; 3
    475e:	80 e0       	ldi	r24, 0x00	; 0
    4760:	90 e0       	ldi	r25, 0x00	; 0
    4762:	0e 94 96 05 	call	0xb2c	; 0xb2c <delay>
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
	write4bits(0x03 << 4);
    4766:	60 e3       	ldi	r22, 0x30	; 48
    4768:	ce 01       	movw	r24, r28
    476a:	0e 94 1b 23 	call	0x4636	; 0x4636 <_ZN9LCDScreen10write4bitsEh>
	delayMicroseconds(4500); // wait min 4.1ms
    476e:	84 e9       	ldi	r24, 0x94	; 148
    4770:	91 e1       	ldi	r25, 0x11	; 17
    4772:	0e 94 d3 05 	call	0xba6	; 0xba6 <delayMicroseconds>

	// second try
	write4bits(0x03 << 4);
    4776:	60 e3       	ldi	r22, 0x30	; 48
    4778:	ce 01       	movw	r24, r28
    477a:	0e 94 1b 23 	call	0x4636	; 0x4636 <_ZN9LCDScreen10write4bitsEh>
	delayMicroseconds(4500); // wait min 4.1ms
    477e:	84 e9       	ldi	r24, 0x94	; 148
    4780:	91 e1       	ldi	r25, 0x11	; 17
    4782:	0e 94 d3 05 	call	0xba6	; 0xba6 <delayMicroseconds>

	// third go!
	write4bits(0x03 << 4);
    4786:	60 e3       	ldi	r22, 0x30	; 48
    4788:	ce 01       	movw	r24, r28
    478a:	0e 94 1b 23 	call	0x4636	; 0x4636 <_ZN9LCDScreen10write4bitsEh>
	delayMicroseconds(150);
    478e:	86 e9       	ldi	r24, 0x96	; 150
    4790:	90 e0       	ldi	r25, 0x00	; 0
    4792:	0e 94 d3 05 	call	0xba6	; 0xba6 <delayMicroseconds>

	// finally, set to 4-bit interface
	write4bits(0x02 << 4);
    4796:	60 e2       	ldi	r22, 0x20	; 32
    4798:	ce 01       	movw	r24, r28
    479a:	0e 94 1b 23 	call	0x4636	; 0x4636 <_ZN9LCDScreen10write4bitsEh>

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);
    479e:	6d 81       	ldd	r22, Y+5	; 0x05
    47a0:	60 62       	ori	r22, 0x20	; 32
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
    47a2:	40 e0       	ldi	r20, 0x00	; 0
    47a4:	ce 01       	movw	r24, r28
    47a6:	0e 94 2a 23 	call	0x4654	; 0x4654 <_ZN9LCDScreen4sendEhh>

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);

	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    47aa:	84 e0       	ldi	r24, 0x04	; 4
    47ac:	8e 83       	std	Y+6, r24	; 0x06
	display();
    47ae:	ce 01       	movw	r24, r28
    47b0:	0e 94 8a 23 	call	0x4714	; 0x4714 <_ZN9LCDScreen7displayEv>

	// clear it off
	clear();
    47b4:	ce 01       	movw	r24, r28
    47b6:	0e 94 47 23 	call	0x468e	; 0x468e <_ZN9LCDScreen5clearEv>

	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    47ba:	82 e0       	ldi	r24, 0x02	; 2
    47bc:	8f 83       	std	Y+7, r24	; 0x07
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
    47be:	40 e0       	ldi	r20, 0x00	; 0
    47c0:	66 e0       	ldi	r22, 0x06	; 6
    47c2:	ce 01       	movw	r24, r28
    47c4:	0e 94 2a 23 	call	0x4654	; 0x4654 <_ZN9LCDScreen4sendEhh>
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;

	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);

	home();
    47c8:	ce 01       	movw	r24, r28
    47ca:	0e 94 50 23 	call	0x46a0	; 0x46a0 <_ZN9LCDScreen4homeEv>
}
    47ce:	df 91       	pop	r29
    47d0:	cf 91       	pop	r28
    47d2:	08 95       	ret

000047d4 <_Z41__static_initialization_and_destruction_0ii>:
	}
	finalizeWave(out);
	out.close();
	target.close();
	Serial.println("stop");
}
    47d4:	0f 93       	push	r16
    47d6:	1f 93       	push	r17
    47d8:	cf 93       	push	r28
    47da:	df 93       	push	r29
    47dc:	ec 01       	movw	r28, r24
    47de:	8b 01       	movw	r16, r22
    47e0:	01 97       	sbiw	r24, 0x01	; 1
    47e2:	71 f4       	brne	.+28     	; 0x4800 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    47e4:	6f 3f       	cpi	r22, 0xFF	; 255
    47e6:	7f 4f       	sbci	r23, 0xFF	; 255
    47e8:	59 f4       	brne	.+22     	; 0x4800 <_Z41__static_initialization_and_destruction_0ii+0x2c>
    47ea:	68 ee       	ldi	r22, 0xE8	; 232
    47ec:	71 e0       	ldi	r23, 0x01	; 1
    47ee:	89 e5       	ldi	r24, 0x59	; 89
    47f0:	96 e0       	ldi	r25, 0x06	; 6
    47f2:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1EPKc>
    47f6:	60 e2       	ldi	r22, 0x20	; 32
    47f8:	81 e5       	ldi	r24, 0x51	; 81
    47fa:	96 e0       	ldi	r25, 0x06	; 6
    47fc:	0e 94 df 22 	call	0x45be	; 0x45be <_ZN9LCDScreenC1Eh>
    4800:	cd 2b       	or	r28, r29
    4802:	39 f4       	brne	.+14     	; 0x4812 <_Z41__static_initialization_and_destruction_0ii+0x3e>
    4804:	0f 3f       	cpi	r16, 0xFF	; 255
    4806:	1f 4f       	sbci	r17, 0xFF	; 255
    4808:	21 f4       	brne	.+8      	; 0x4812 <_Z41__static_initialization_and_destruction_0ii+0x3e>
    480a:	89 e5       	ldi	r24, 0x59	; 89
    480c:	96 e0       	ldi	r25, 0x06	; 6
    480e:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    4812:	df 91       	pop	r29
    4814:	cf 91       	pop	r28
    4816:	1f 91       	pop	r17
    4818:	0f 91       	pop	r16
    481a:	08 95       	ret

0000481c <_Z8keyInputv>:
    481c:	89 b1       	in	r24, 0x09	; 9
    481e:	80 95       	com	r24
    4820:	61 f1       	breq	.+88     	; 0x487a <_Z8keyInputv+0x5e>
    4822:	88 30       	cpi	r24, 0x08	; 8
    4824:	99 f0       	breq	.+38     	; 0x484c <_Z8keyInputv+0x30>
    4826:	38 f4       	brcc	.+14     	; 0x4836 <_Z8keyInputv+0x1a>
    4828:	82 30       	cpi	r24, 0x02	; 2
    482a:	d1 f0       	breq	.+52     	; 0x4860 <_Z8keyInputv+0x44>
    482c:	84 30       	cpi	r24, 0x04	; 4
    482e:	61 f0       	breq	.+24     	; 0x4848 <_Z8keyInputv+0x2c>
    4830:	81 30       	cpi	r24, 0x01	; 1
    4832:	a1 f4       	brne	.+40     	; 0x485c <_Z8keyInputv+0x40>
    4834:	07 c0       	rjmp	.+14     	; 0x4844 <_Z8keyInputv+0x28>
    4836:	80 34       	cpi	r24, 0x40	; 64
    4838:	69 f0       	breq	.+26     	; 0x4854 <_Z8keyInputv+0x38>
    483a:	80 38       	cpi	r24, 0x80	; 128
    483c:	69 f0       	breq	.+26     	; 0x4858 <_Z8keyInputv+0x3c>
    483e:	80 32       	cpi	r24, 0x20	; 32
    4840:	69 f4       	brne	.+26     	; 0x485c <_Z8keyInputv+0x40>
    4842:	06 c0       	rjmp	.+12     	; 0x4850 <_Z8keyInputv+0x34>
    4844:	83 e7       	ldi	r24, 0x73	; 115
    4846:	0d c0       	rjmp	.+26     	; 0x4862 <_Z8keyInputv+0x46>
    4848:	80 e7       	ldi	r24, 0x70	; 112
    484a:	0b c0       	rjmp	.+22     	; 0x4862 <_Z8keyInputv+0x46>
    484c:	8e e3       	ldi	r24, 0x3E	; 62
    484e:	09 c0       	rjmp	.+18     	; 0x4862 <_Z8keyInputv+0x46>
    4850:	84 e6       	ldi	r24, 0x64	; 100
    4852:	07 c0       	rjmp	.+14     	; 0x4862 <_Z8keyInputv+0x46>
    4854:	8d e6       	ldi	r24, 0x6D	; 109
    4856:	05 c0       	rjmp	.+10     	; 0x4862 <_Z8keyInputv+0x46>
    4858:	8f e6       	ldi	r24, 0x6F	; 111
    485a:	03 c0       	rjmp	.+6      	; 0x4862 <_Z8keyInputv+0x46>
    485c:	80 e0       	ldi	r24, 0x00	; 0
    485e:	01 c0       	rjmp	.+2      	; 0x4862 <_Z8keyInputv+0x46>
    4860:	8c e3       	ldi	r24, 0x3C	; 60
    4862:	2f ef       	ldi	r18, 0xFF	; 255
    4864:	35 ea       	ldi	r19, 0xA5	; 165
    4866:	9e e0       	ldi	r25, 0x0E	; 14
    4868:	21 50       	subi	r18, 0x01	; 1
    486a:	30 40       	sbci	r19, 0x00	; 0
    486c:	90 40       	sbci	r25, 0x00	; 0
    486e:	e1 f7       	brne	.-8      	; 0x4868 <_Z8keyInputv+0x4c>
    4870:	00 c0       	rjmp	.+0      	; 0x4872 <_Z8keyInputv+0x56>
    4872:	00 00       	nop
    4874:	9f ef       	ldi	r25, 0xFF	; 255
    4876:	9b b9       	out	0x0b, r25	; 11
    4878:	08 95       	ret
    487a:	80 e0       	ldi	r24, 0x00	; 0
    487c:	08 95       	ret

0000487e <_Z9firstLine6String>:
    487e:	cf 93       	push	r28
    4880:	df 93       	push	r29
    4882:	ec 01       	movw	r28, r24
    4884:	40 e0       	ldi	r20, 0x00	; 0
    4886:	60 e0       	ldi	r22, 0x00	; 0
    4888:	81 e5       	ldi	r24, 0x51	; 81
    488a:	96 e0       	ldi	r25, 0x06	; 6
    488c:	0e 94 59 23 	call	0x46b2	; 0x46b2 <_ZN9LCDScreen9setCursorEhh>
    4890:	be 01       	movw	r22, r28
    4892:	81 e5       	ldi	r24, 0x51	; 81
    4894:	96 e0       	ldi	r25, 0x06	; 6
    4896:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN5Print5printERK6String>
    489a:	df 91       	pop	r29
    489c:	cf 91       	pop	r28
    489e:	08 95       	ret

000048a0 <_Z10clrDisplay6String>:
    48a0:	0f 93       	push	r16
    48a2:	1f 93       	push	r17
    48a4:	cf 93       	push	r28
    48a6:	df 93       	push	r29
    48a8:	00 d0       	rcall	.+0      	; 0x48aa <_Z10clrDisplay6String+0xa>
    48aa:	00 d0       	rcall	.+0      	; 0x48ac <_Z10clrDisplay6String+0xc>
    48ac:	00 d0       	rcall	.+0      	; 0x48ae <_Z10clrDisplay6String+0xe>
    48ae:	cd b7       	in	r28, 0x3d	; 61
    48b0:	de b7       	in	r29, 0x3e	; 62
    48b2:	8c 01       	movw	r16, r24
    48b4:	81 e5       	ldi	r24, 0x51	; 81
    48b6:	96 e0       	ldi	r25, 0x06	; 6
    48b8:	0e 94 47 23 	call	0x468e	; 0x468e <_ZN9LCDScreen5clearEv>
    48bc:	b8 01       	movw	r22, r16
    48be:	ce 01       	movw	r24, r28
    48c0:	01 96       	adiw	r24, 0x01	; 1
    48c2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN6StringC1ERKS_>
    48c6:	ce 01       	movw	r24, r28
    48c8:	01 96       	adiw	r24, 0x01	; 1
    48ca:	0e 94 3f 24 	call	0x487e	; 0x487e <_Z9firstLine6String>
    48ce:	ce 01       	movw	r24, r28
    48d0:	01 96       	adiw	r24, 0x01	; 1
    48d2:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    48d6:	26 96       	adiw	r28, 0x06	; 6
    48d8:	0f b6       	in	r0, 0x3f	; 63
    48da:	f8 94       	cli
    48dc:	de bf       	out	0x3e, r29	; 62
    48de:	0f be       	out	0x3f, r0	; 63
    48e0:	cd bf       	out	0x3d, r28	; 61
    48e2:	df 91       	pop	r29
    48e4:	cf 91       	pop	r28
    48e6:	1f 91       	pop	r17
    48e8:	0f 91       	pop	r16
    48ea:	08 95       	ret

000048ec <_Z10secondLine6String>:
    48ec:	cf 93       	push	r28
    48ee:	df 93       	push	r29
    48f0:	ec 01       	movw	r28, r24
    48f2:	41 e0       	ldi	r20, 0x01	; 1
    48f4:	60 e0       	ldi	r22, 0x00	; 0
    48f6:	81 e5       	ldi	r24, 0x51	; 81
    48f8:	96 e0       	ldi	r25, 0x06	; 6
    48fa:	0e 94 59 23 	call	0x46b2	; 0x46b2 <_ZN9LCDScreen9setCursorEhh>
    48fe:	be 01       	movw	r22, r28
    4900:	81 e5       	ldi	r24, 0x51	; 81
    4902:	96 e0       	ldi	r25, 0x06	; 6
    4904:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN5Print5printERK6String>
    4908:	df 91       	pop	r29
    490a:	cf 91       	pop	r28
    490c:	08 95       	ret

0000490e <_Z12checkChangesv>:
    490e:	cf 93       	push	r28
    4910:	81 e1       	ldi	r24, 0x11	; 17
    4912:	0e 94 de 05 	call	0xbbc	; 0xbbc <analogRead>
    4916:	bc 01       	movw	r22, r24
    4918:	99 0f       	add	r25, r25
    491a:	88 0b       	sbc	r24, r24
    491c:	99 0b       	sbc	r25, r25
    491e:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <__floatsisf>
    4922:	20 ed       	ldi	r18, 0xD0	; 208
    4924:	3f e3       	ldi	r19, 0x3F	; 63
    4926:	4f e7       	ldi	r20, 0x7F	; 127
    4928:	5e e3       	ldi	r21, 0x3E	; 62
    492a:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <__mulsf3>
    492e:	0e 94 ed 2c 	call	0x59da	; 0x59da <__fixunssfsi>
    4932:	c6 2f       	mov	r28, r22
    4934:	8f e0       	ldi	r24, 0x0F	; 15
    4936:	0e 94 de 05 	call	0xbbc	; 0xbbc <analogRead>
    493a:	bc 01       	movw	r22, r24
    493c:	99 0f       	add	r25, r25
    493e:	88 0b       	sbc	r24, r24
    4940:	99 0b       	sbc	r25, r25
    4942:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <__floatsisf>
    4946:	20 ed       	ldi	r18, 0xD0	; 208
    4948:	3f e3       	ldi	r19, 0x3F	; 63
    494a:	4f e7       	ldi	r20, 0x7F	; 127
    494c:	5e e3       	ldi	r21, 0x3E	; 62
    494e:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <__mulsf3>
    4952:	0e 94 ed 2c 	call	0x59da	; 0x59da <__fixunssfsi>
    4956:	ca 35       	cpi	r28, 0x5A	; 90
    4958:	20 f4       	brcc	.+8      	; 0x4962 <_Z12checkChangesv+0x54>
    495a:	81 e0       	ldi	r24, 0x01	; 1
    495c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <freqScal>
    4960:	09 c0       	rjmp	.+18     	; 0x4974 <_Z12checkChangesv+0x66>
    4962:	c4 3b       	cpi	r28, 0xB4	; 180
    4964:	20 f4       	brcc	.+8      	; 0x496e <_Z12checkChangesv+0x60>
    4966:	82 e0       	ldi	r24, 0x02	; 2
    4968:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <freqScal>
    496c:	03 c0       	rjmp	.+6      	; 0x4974 <_Z12checkChangesv+0x66>
    496e:	83 e0       	ldi	r24, 0x03	; 3
    4970:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <freqScal>
    4974:	6a 35       	cpi	r22, 0x5A	; 90
    4976:	28 f4       	brcc	.+10     	; 0x4982 <_Z12checkChangesv+0x74>
    4978:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <shift>
    497c:	10 92 70 06 	sts	0x0670, r1	; 0x800670 <enhance>
    4980:	0d c0       	rjmp	.+26     	; 0x499c <_Z12checkChangesv+0x8e>
    4982:	64 3b       	cpi	r22, 0xB4	; 180
    4984:	30 f4       	brcc	.+12     	; 0x4992 <_Z12checkChangesv+0x84>
    4986:	81 e0       	ldi	r24, 0x01	; 1
    4988:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <shift>
    498c:	10 92 70 06 	sts	0x0670, r1	; 0x800670 <enhance>
    4990:	05 c0       	rjmp	.+10     	; 0x499c <_Z12checkChangesv+0x8e>
    4992:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <shift>
    4996:	81 e0       	ldi	r24, 0x01	; 1
    4998:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <enhance>
    499c:	cf 91       	pop	r28
    499e:	08 95       	ret

000049a0 <_Z12getTrackListv>:
    49a0:	ef 92       	push	r14
    49a2:	ff 92       	push	r15
    49a4:	0f 93       	push	r16
    49a6:	1f 93       	push	r17
    49a8:	cf 93       	push	r28
    49aa:	df 93       	push	r29
    49ac:	cd b7       	in	r28, 0x3d	; 61
    49ae:	de b7       	in	r29, 0x3e	; 62
    49b0:	68 97       	sbiw	r28, 0x18	; 24
    49b2:	0f b6       	in	r0, 0x3f	; 63
    49b4:	f8 94       	cli
    49b6:	de bf       	out	0x3e, r29	; 62
    49b8:	0f be       	out	0x3f, r0	; 63
    49ba:	cd bf       	out	0x3d, r28	; 61
    49bc:	10 92 60 06 	sts	0x0660, r1	; 0x800660 <files>
    49c0:	61 e4       	ldi	r22, 0x41	; 65
    49c2:	ce 01       	movw	r24, r28
    49c4:	0d 96       	adiw	r24, 0x0d	; 13
    49c6:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_ZN6StringC1Ec>
    49ca:	be 01       	movw	r22, r28
    49cc:	63 5f       	subi	r22, 0xF3	; 243
    49ce:	7f 4f       	sbci	r23, 0xFF	; 255
    49d0:	ce 01       	movw	r24, r28
    49d2:	43 96       	adiw	r24, 0x13	; 19
    49d4:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN6StringC1ERKS_>
    49d8:	6f e6       	ldi	r22, 0x6F	; 111
    49da:	72 e0       	ldi	r23, 0x02	; 2
    49dc:	ce 01       	movw	r24, r28
    49de:	43 96       	adiw	r24, 0x13	; 19
    49e0:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZplRK15StringSumHelperPKc>
    49e4:	bc 01       	movw	r22, r24
    49e6:	89 e5       	ldi	r24, 0x59	; 89
    49e8:	96 e0       	ldi	r25, 0x06	; 6
    49ea:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_ZN6StringaSERKS_>
    49ee:	ce 01       	movw	r24, r28
    49f0:	43 96       	adiw	r24, 0x13	; 19
    49f2:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    49f6:	ce 01       	movw	r24, r28
    49f8:	0d 96       	adiw	r24, 0x0d	; 13
    49fa:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    49fe:	00 e0       	ldi	r16, 0x00	; 0
    4a00:	0f 2e       	mov	r0, r31
    4a02:	f1 e4       	ldi	r31, 0x41	; 65
    4a04:	ff 2e       	mov	r15, r31
    4a06:	f0 2d       	mov	r31, r0
    4a08:	0f 30       	cpi	r16, 0x0F	; 15
    4a0a:	09 f4       	brne	.+2      	; 0x4a0e <_Z12getTrackListv+0x6e>
    4a0c:	45 c0       	rjmp	.+138    	; 0x4a98 <_Z12getTrackListv+0xf8>
    4a0e:	8b e5       	ldi	r24, 0x5B	; 91
    4a10:	f8 16       	cp	r15, r24
    4a12:	09 f4       	brne	.+2      	; 0x4a16 <_Z12getTrackListv+0x76>
    4a14:	41 c0       	rjmp	.+130    	; 0x4a98 <_Z12getTrackListv+0xf8>
    4a16:	60 91 59 06 	lds	r22, 0x0659	; 0x800659 <fname_temp>
    4a1a:	70 91 5a 06 	lds	r23, 0x065A	; 0x80065a <fname_temp+0x1>
    4a1e:	8c ef       	ldi	r24, 0xFC	; 252
    4a20:	93 e0       	ldi	r25, 0x03	; 3
    4a22:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5SDLib7SDClass6existsEPKc>
    4a26:	88 23       	and	r24, r24
    4a28:	b1 f0       	breq	.+44     	; 0x4a56 <_Z12getTrackListv+0xb6>
    4a2a:	ee 24       	eor	r14, r14
    4a2c:	e3 94       	inc	r14
    4a2e:	e0 0e       	add	r14, r16
    4a30:	10 e0       	ldi	r17, 0x00	; 0
    4a32:	60 e0       	ldi	r22, 0x00	; 0
    4a34:	70 e0       	ldi	r23, 0x00	; 0
    4a36:	89 e5       	ldi	r24, 0x59	; 89
    4a38:	96 e0       	ldi	r25, 0x06	; 6
    4a3a:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN6StringixEj>
    4a3e:	fc 01       	movw	r30, r24
    4a40:	80 81       	ld	r24, Z
    4a42:	f8 01       	movw	r30, r16
    4a44:	ef 59       	subi	r30, 0x9F	; 159
    4a46:	f9 4f       	sbci	r31, 0xF9	; 249
    4a48:	80 83       	st	Z, r24
    4a4a:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <files>
    4a4e:	8f 5f       	subi	r24, 0xFF	; 255
    4a50:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <files>
    4a54:	0e 2d       	mov	r16, r14
    4a56:	f3 94       	inc	r15
    4a58:	6f 2d       	mov	r22, r15
    4a5a:	ce 01       	movw	r24, r28
    4a5c:	01 96       	adiw	r24, 0x01	; 1
    4a5e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_ZN6StringC1Ec>
    4a62:	be 01       	movw	r22, r28
    4a64:	6f 5f       	subi	r22, 0xFF	; 255
    4a66:	7f 4f       	sbci	r23, 0xFF	; 255
    4a68:	ce 01       	movw	r24, r28
    4a6a:	07 96       	adiw	r24, 0x07	; 7
    4a6c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN6StringC1ERKS_>
    4a70:	6f e6       	ldi	r22, 0x6F	; 111
    4a72:	72 e0       	ldi	r23, 0x02	; 2
    4a74:	ce 01       	movw	r24, r28
    4a76:	07 96       	adiw	r24, 0x07	; 7
    4a78:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZplRK15StringSumHelperPKc>
    4a7c:	bc 01       	movw	r22, r24
    4a7e:	89 e5       	ldi	r24, 0x59	; 89
    4a80:	96 e0       	ldi	r25, 0x06	; 6
    4a82:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_ZN6StringaSERKS_>
    4a86:	ce 01       	movw	r24, r28
    4a88:	07 96       	adiw	r24, 0x07	; 7
    4a8a:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    4a8e:	ce 01       	movw	r24, r28
    4a90:	01 96       	adiw	r24, 0x01	; 1
    4a92:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    4a96:	b8 cf       	rjmp	.-144    	; 0x4a08 <_Z12getTrackListv+0x68>
    4a98:	0f 30       	cpi	r16, 0x0F	; 15
    4a9a:	40 f4       	brcc	.+16     	; 0x4aac <_Z12getTrackListv+0x10c>
    4a9c:	e0 2f       	mov	r30, r16
    4a9e:	f0 e0       	ldi	r31, 0x00	; 0
    4aa0:	ef 59       	subi	r30, 0x9F	; 159
    4aa2:	f9 4f       	sbci	r31, 0xF9	; 249
    4aa4:	8f e5       	ldi	r24, 0x5F	; 95
    4aa6:	80 83       	st	Z, r24
    4aa8:	0f 5f       	subi	r16, 0xFF	; 255
    4aaa:	f6 cf       	rjmp	.-20     	; 0x4a98 <_Z12getTrackListv+0xf8>
    4aac:	68 96       	adiw	r28, 0x18	; 24
    4aae:	0f b6       	in	r0, 0x3f	; 63
    4ab0:	f8 94       	cli
    4ab2:	de bf       	out	0x3e, r29	; 62
    4ab4:	0f be       	out	0x3f, r0	; 63
    4ab6:	cd bf       	out	0x3d, r28	; 61
    4ab8:	df 91       	pop	r29
    4aba:	cf 91       	pop	r28
    4abc:	1f 91       	pop	r17
    4abe:	0f 91       	pop	r16
    4ac0:	ff 90       	pop	r15
    4ac2:	ef 90       	pop	r14
    4ac4:	08 95       	ret

00004ac6 <_Z9nextTrackv>:
    4ac6:	cf 93       	push	r28
    4ac8:	df 93       	push	r29
    4aca:	cd b7       	in	r28, 0x3d	; 61
    4acc:	de b7       	in	r29, 0x3e	; 62
    4ace:	62 97       	sbiw	r28, 0x12	; 18
    4ad0:	0f b6       	in	r0, 0x3f	; 63
    4ad2:	f8 94       	cli
    4ad4:	de bf       	out	0x3e, r29	; 62
    4ad6:	0f be       	out	0x3f, r0	; 63
    4ad8:	cd bf       	out	0x3d, r28	; 61
    4ada:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <fcount>
    4ade:	ef 5f       	subi	r30, 0xFF	; 255
    4ae0:	e0 93 5f 06 	sts	0x065F, r30	; 0x80065f <fcount>
    4ae4:	f0 e0       	ldi	r31, 0x00	; 0
    4ae6:	ef 59       	subi	r30, 0x9F	; 159
    4ae8:	f9 4f       	sbci	r31, 0xF9	; 249
    4aea:	80 81       	ld	r24, Z
    4aec:	8f 35       	cpi	r24, 0x5F	; 95
    4aee:	11 f4       	brne	.+4      	; 0x4af4 <_Z9nextTrackv+0x2e>
    4af0:	10 92 5f 06 	sts	0x065F, r1	; 0x80065f <fcount>
    4af4:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <fcount>
    4af8:	f0 e0       	ldi	r31, 0x00	; 0
    4afa:	ef 59       	subi	r30, 0x9F	; 159
    4afc:	f9 4f       	sbci	r31, 0xF9	; 249
    4afe:	60 81       	ld	r22, Z
    4b00:	ce 01       	movw	r24, r28
    4b02:	07 96       	adiw	r24, 0x07	; 7
    4b04:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_ZN6StringC1Ec>
    4b08:	be 01       	movw	r22, r28
    4b0a:	69 5f       	subi	r22, 0xF9	; 249
    4b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    4b0e:	ce 01       	movw	r24, r28
    4b10:	0d 96       	adiw	r24, 0x0d	; 13
    4b12:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN6StringC1ERKS_>
    4b16:	6f e6       	ldi	r22, 0x6F	; 111
    4b18:	72 e0       	ldi	r23, 0x02	; 2
    4b1a:	ce 01       	movw	r24, r28
    4b1c:	0d 96       	adiw	r24, 0x0d	; 13
    4b1e:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZplRK15StringSumHelperPKc>
    4b22:	bc 01       	movw	r22, r24
    4b24:	89 e5       	ldi	r24, 0x59	; 89
    4b26:	96 e0       	ldi	r25, 0x06	; 6
    4b28:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_ZN6StringaSERKS_>
    4b2c:	ce 01       	movw	r24, r28
    4b2e:	0d 96       	adiw	r24, 0x0d	; 13
    4b30:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    4b34:	ce 01       	movw	r24, r28
    4b36:	07 96       	adiw	r24, 0x07	; 7
    4b38:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    4b3c:	69 e5       	ldi	r22, 0x59	; 89
    4b3e:	76 e0       	ldi	r23, 0x06	; 6
    4b40:	ce 01       	movw	r24, r28
    4b42:	01 96       	adiw	r24, 0x01	; 1
    4b44:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN6StringC1ERKS_>
    4b48:	ce 01       	movw	r24, r28
    4b4a:	01 96       	adiw	r24, 0x01	; 1
    4b4c:	0e 94 76 24 	call	0x48ec	; 0x48ec <_Z10secondLine6String>
    4b50:	ce 01       	movw	r24, r28
    4b52:	01 96       	adiw	r24, 0x01	; 1
    4b54:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    4b58:	62 96       	adiw	r28, 0x12	; 18
    4b5a:	0f b6       	in	r0, 0x3f	; 63
    4b5c:	f8 94       	cli
    4b5e:	de bf       	out	0x3e, r29	; 62
    4b60:	0f be       	out	0x3f, r0	; 63
    4b62:	cd bf       	out	0x3d, r28	; 61
    4b64:	df 91       	pop	r29
    4b66:	cf 91       	pop	r28
    4b68:	08 95       	ret

00004b6a <_Z13previousTrackv>:
    4b6a:	cf 93       	push	r28
    4b6c:	df 93       	push	r29
    4b6e:	cd b7       	in	r28, 0x3d	; 61
    4b70:	de b7       	in	r29, 0x3e	; 62
    4b72:	62 97       	sbiw	r28, 0x12	; 18
    4b74:	0f b6       	in	r0, 0x3f	; 63
    4b76:	f8 94       	cli
    4b78:	de bf       	out	0x3e, r29	; 62
    4b7a:	0f be       	out	0x3f, r0	; 63
    4b7c:	cd bf       	out	0x3d, r28	; 61
    4b7e:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <fcount>
    4b82:	81 11       	cpse	r24, r1
    4b84:	06 c0       	rjmp	.+12     	; 0x4b92 <_Z13previousTrackv+0x28>
    4b86:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <files>
    4b8a:	81 50       	subi	r24, 0x01	; 1
    4b8c:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <fcount>
    4b90:	03 c0       	rjmp	.+6      	; 0x4b98 <_Z13previousTrackv+0x2e>
    4b92:	81 50       	subi	r24, 0x01	; 1
    4b94:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <fcount>
    4b98:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <fcount>
    4b9c:	f0 e0       	ldi	r31, 0x00	; 0
    4b9e:	ef 59       	subi	r30, 0x9F	; 159
    4ba0:	f9 4f       	sbci	r31, 0xF9	; 249
    4ba2:	60 81       	ld	r22, Z
    4ba4:	ce 01       	movw	r24, r28
    4ba6:	07 96       	adiw	r24, 0x07	; 7
    4ba8:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_ZN6StringC1Ec>
    4bac:	be 01       	movw	r22, r28
    4bae:	69 5f       	subi	r22, 0xF9	; 249
    4bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    4bb2:	ce 01       	movw	r24, r28
    4bb4:	0d 96       	adiw	r24, 0x0d	; 13
    4bb6:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN6StringC1ERKS_>
    4bba:	6f e6       	ldi	r22, 0x6F	; 111
    4bbc:	72 e0       	ldi	r23, 0x02	; 2
    4bbe:	ce 01       	movw	r24, r28
    4bc0:	0d 96       	adiw	r24, 0x0d	; 13
    4bc2:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZplRK15StringSumHelperPKc>
    4bc6:	bc 01       	movw	r22, r24
    4bc8:	89 e5       	ldi	r24, 0x59	; 89
    4bca:	96 e0       	ldi	r25, 0x06	; 6
    4bcc:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_ZN6StringaSERKS_>
    4bd0:	ce 01       	movw	r24, r28
    4bd2:	0d 96       	adiw	r24, 0x0d	; 13
    4bd4:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    4bd8:	ce 01       	movw	r24, r28
    4bda:	07 96       	adiw	r24, 0x07	; 7
    4bdc:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    4be0:	69 e5       	ldi	r22, 0x59	; 89
    4be2:	76 e0       	ldi	r23, 0x06	; 6
    4be4:	ce 01       	movw	r24, r28
    4be6:	01 96       	adiw	r24, 0x01	; 1
    4be8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN6StringC1ERKS_>
    4bec:	ce 01       	movw	r24, r28
    4bee:	01 96       	adiw	r24, 0x01	; 1
    4bf0:	0e 94 76 24 	call	0x48ec	; 0x48ec <_Z10secondLine6String>
    4bf4:	ce 01       	movw	r24, r28
    4bf6:	01 96       	adiw	r24, 0x01	; 1
    4bf8:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    4bfc:	62 96       	adiw	r28, 0x12	; 18
    4bfe:	0f b6       	in	r0, 0x3f	; 63
    4c00:	f8 94       	cli
    4c02:	de bf       	out	0x3e, r29	; 62
    4c04:	0f be       	out	0x3f, r0	; 63
    4c06:	cd bf       	out	0x3d, r28	; 61
    4c08:	df 91       	pop	r29
    4c0a:	cf 91       	pop	r28
    4c0c:	08 95       	ret

00004c0e <_Z15checkDuplicatesv>:
    4c0e:	1f 93       	push	r17
    4c10:	cf 93       	push	r28
    4c12:	df 93       	push	r29
    4c14:	cd b7       	in	r28, 0x3d	; 61
    4c16:	de b7       	in	r29, 0x3e	; 62
    4c18:	68 97       	sbiw	r28, 0x18	; 24
    4c1a:	0f b6       	in	r0, 0x3f	; 63
    4c1c:	f8 94       	cli
    4c1e:	de bf       	out	0x3e, r29	; 62
    4c20:	0f be       	out	0x3f, r0	; 63
    4c22:	cd bf       	out	0x3d, r28	; 61
    4c24:	61 e4       	ldi	r22, 0x41	; 65
    4c26:	ce 01       	movw	r24, r28
    4c28:	0d 96       	adiw	r24, 0x0d	; 13
    4c2a:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_ZN6StringC1Ec>
    4c2e:	be 01       	movw	r22, r28
    4c30:	63 5f       	subi	r22, 0xF3	; 243
    4c32:	7f 4f       	sbci	r23, 0xFF	; 255
    4c34:	ce 01       	movw	r24, r28
    4c36:	43 96       	adiw	r24, 0x13	; 19
    4c38:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN6StringC1ERKS_>
    4c3c:	64 e6       	ldi	r22, 0x64	; 100
    4c3e:	72 e0       	ldi	r23, 0x02	; 2
    4c40:	ce 01       	movw	r24, r28
    4c42:	43 96       	adiw	r24, 0x13	; 19
    4c44:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZplRK15StringSumHelperPKc>
    4c48:	bc 01       	movw	r22, r24
    4c4a:	89 e5       	ldi	r24, 0x59	; 89
    4c4c:	96 e0       	ldi	r25, 0x06	; 6
    4c4e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_ZN6StringaSERKS_>
    4c52:	ce 01       	movw	r24, r28
    4c54:	43 96       	adiw	r24, 0x13	; 19
    4c56:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    4c5a:	ce 01       	movw	r24, r28
    4c5c:	0d 96       	adiw	r24, 0x0d	; 13
    4c5e:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    4c62:	11 e4       	ldi	r17, 0x41	; 65
    4c64:	60 91 59 06 	lds	r22, 0x0659	; 0x800659 <fname_temp>
    4c68:	70 91 5a 06 	lds	r23, 0x065A	; 0x80065a <fname_temp+0x1>
    4c6c:	8c ef       	ldi	r24, 0xFC	; 252
    4c6e:	93 e0       	ldi	r25, 0x03	; 3
    4c70:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5SDLib7SDClass6existsEPKc>
    4c74:	88 23       	and	r24, r24
    4c76:	09 f1       	breq	.+66     	; 0x4cba <_Z15checkDuplicatesv+0xac>
    4c78:	1f 5f       	subi	r17, 0xFF	; 255
    4c7a:	61 2f       	mov	r22, r17
    4c7c:	ce 01       	movw	r24, r28
    4c7e:	01 96       	adiw	r24, 0x01	; 1
    4c80:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_ZN6StringC1Ec>
    4c84:	be 01       	movw	r22, r28
    4c86:	6f 5f       	subi	r22, 0xFF	; 255
    4c88:	7f 4f       	sbci	r23, 0xFF	; 255
    4c8a:	ce 01       	movw	r24, r28
    4c8c:	07 96       	adiw	r24, 0x07	; 7
    4c8e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN6StringC1ERKS_>
    4c92:	64 e6       	ldi	r22, 0x64	; 100
    4c94:	72 e0       	ldi	r23, 0x02	; 2
    4c96:	ce 01       	movw	r24, r28
    4c98:	07 96       	adiw	r24, 0x07	; 7
    4c9a:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZplRK15StringSumHelperPKc>
    4c9e:	bc 01       	movw	r22, r24
    4ca0:	89 e5       	ldi	r24, 0x59	; 89
    4ca2:	96 e0       	ldi	r25, 0x06	; 6
    4ca4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_ZN6StringaSERKS_>
    4ca8:	ce 01       	movw	r24, r28
    4caa:	07 96       	adiw	r24, 0x07	; 7
    4cac:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    4cb0:	ce 01       	movw	r24, r28
    4cb2:	01 96       	adiw	r24, 0x01	; 1
    4cb4:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    4cb8:	d5 cf       	rjmp	.-86     	; 0x4c64 <_Z15checkDuplicatesv+0x56>
    4cba:	68 96       	adiw	r28, 0x18	; 24
    4cbc:	0f b6       	in	r0, 0x3f	; 63
    4cbe:	f8 94       	cli
    4cc0:	de bf       	out	0x3e, r29	; 62
    4cc2:	0f be       	out	0x3f, r0	; 63
    4cc4:	cd bf       	out	0x3d, r28	; 61
    4cc6:	df 91       	pop	r29
    4cc8:	cf 91       	pop	r28
    4cca:	1f 91       	pop	r17
    4ccc:	08 95       	ret

00004cce <_Z12makeWaveFileN5SDLib4FileE>:
    4cce:	0f 93       	push	r16
    4cd0:	1f 93       	push	r17
    4cd2:	cf 93       	push	r28
    4cd4:	df 93       	push	r29
    4cd6:	cd b7       	in	r28, 0x3d	; 61
    4cd8:	de b7       	in	r29, 0x3e	; 62
    4cda:	2a 97       	sbiw	r28, 0x0a	; 10
    4cdc:	0f b6       	in	r0, 0x3f	; 63
    4cde:	f8 94       	cli
    4ce0:	de bf       	out	0x3e, r29	; 62
    4ce2:	0f be       	out	0x3f, r0	; 63
    4ce4:	cd bf       	out	0x3d, r28	; 61
    4ce6:	8c 01       	movw	r16, r24
    4ce8:	40 e1       	ldi	r20, 0x10	; 16
    4cea:	50 e0       	ldi	r21, 0x00	; 0
    4cec:	6f ec       	ldi	r22, 0xCF	; 207
    4cee:	71 e0       	ldi	r23, 0x01	; 1
    4cf0:	0e 94 ba 0c 	call	0x1974	; 0x1974 <_ZN5SDLib4File5writeEPKhj>
    4cf4:	8a e0       	ldi	r24, 0x0A	; 10
    4cf6:	eb e1       	ldi	r30, 0x1B	; 27
    4cf8:	f1 e0       	ldi	r31, 0x01	; 1
    4cfa:	de 01       	movw	r26, r28
    4cfc:	11 96       	adiw	r26, 0x01	; 1
    4cfe:	01 90       	ld	r0, Z+
    4d00:	0d 92       	st	X+, r0
    4d02:	8a 95       	dec	r24
    4d04:	e1 f7       	brne	.-8      	; 0x4cfe <_Z12makeWaveFileN5SDLib4FileE+0x30>
    4d06:	4a e0       	ldi	r20, 0x0A	; 10
    4d08:	50 e0       	ldi	r21, 0x00	; 0
    4d0a:	be 01       	movw	r22, r28
    4d0c:	6f 5f       	subi	r22, 0xFF	; 255
    4d0e:	7f 4f       	sbci	r23, 0xFF	; 255
    4d10:	c8 01       	movw	r24, r16
    4d12:	0e 94 ba 0c 	call	0x1974	; 0x1974 <_ZN5SDLib4File5writeEPKhj>
    4d16:	19 82       	std	Y+1, r1	; 0x01
    4d18:	1a 82       	std	Y+2, r1	; 0x02
    4d1a:	80 ed       	ldi	r24, 0xD0	; 208
    4d1c:	8b 83       	std	Y+3, r24	; 0x03
    4d1e:	80 e3       	ldi	r24, 0x30	; 48
    4d20:	8c 83       	std	Y+4, r24	; 0x04
    4d22:	1d 82       	std	Y+5, r1	; 0x05
    4d24:	1e 82       	std	Y+6, r1	; 0x06
    4d26:	81 e0       	ldi	r24, 0x01	; 1
    4d28:	8f 83       	std	Y+7, r24	; 0x07
    4d2a:	18 86       	std	Y+8, r1	; 0x08
    4d2c:	88 e0       	ldi	r24, 0x08	; 8
    4d2e:	89 87       	std	Y+9, r24	; 0x09
    4d30:	1a 86       	std	Y+10, r1	; 0x0a
    4d32:	4a e0       	ldi	r20, 0x0A	; 10
    4d34:	50 e0       	ldi	r21, 0x00	; 0
    4d36:	be 01       	movw	r22, r28
    4d38:	6f 5f       	subi	r22, 0xFF	; 255
    4d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    4d3c:	c8 01       	movw	r24, r16
    4d3e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <_ZN5SDLib4File5writeEPKhj>
    4d42:	48 e0       	ldi	r20, 0x08	; 8
    4d44:	50 e0       	ldi	r21, 0x00	; 0
    4d46:	60 ee       	ldi	r22, 0xE0	; 224
    4d48:	71 e0       	ldi	r23, 0x01	; 1
    4d4a:	c8 01       	movw	r24, r16
    4d4c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <_ZN5SDLib4File5writeEPKhj>
    4d50:	2a 96       	adiw	r28, 0x0a	; 10
    4d52:	0f b6       	in	r0, 0x3f	; 63
    4d54:	f8 94       	cli
    4d56:	de bf       	out	0x3e, r29	; 62
    4d58:	0f be       	out	0x3f, r0	; 63
    4d5a:	cd bf       	out	0x3d, r28	; 61
    4d5c:	df 91       	pop	r29
    4d5e:	cf 91       	pop	r28
    4d60:	1f 91       	pop	r17
    4d62:	0f 91       	pop	r16
    4d64:	08 95       	ret

00004d66 <_Z12finalizeWaveN5SDLib4FileE>:
    4d66:	8f 92       	push	r8
    4d68:	9f 92       	push	r9
    4d6a:	af 92       	push	r10
    4d6c:	bf 92       	push	r11
    4d6e:	cf 92       	push	r12
    4d70:	df 92       	push	r13
    4d72:	ef 92       	push	r14
    4d74:	ff 92       	push	r15
    4d76:	0f 93       	push	r16
    4d78:	1f 93       	push	r17
    4d7a:	cf 93       	push	r28
    4d7c:	df 93       	push	r29
    4d7e:	00 d0       	rcall	.+0      	; 0x4d80 <_Z12finalizeWaveN5SDLib4FileE+0x1a>
    4d80:	00 d0       	rcall	.+0      	; 0x4d82 <_Z12finalizeWaveN5SDLib4FileE+0x1c>
    4d82:	cd b7       	in	r28, 0x3d	; 61
    4d84:	de b7       	in	r29, 0x3e	; 62
    4d86:	8c 01       	movw	r16, r24
    4d88:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <_ZN5SDLib4File4sizeEv>
    4d8c:	6b 01       	movw	r12, r22
    4d8e:	7c 01       	movw	r14, r24
    4d90:	4b 01       	movw	r8, r22
    4d92:	5c 01       	movw	r10, r24
    4d94:	88 e0       	ldi	r24, 0x08	; 8
    4d96:	88 1a       	sub	r8, r24
    4d98:	91 08       	sbc	r9, r1
    4d9a:	a1 08       	sbc	r10, r1
    4d9c:	b1 08       	sbc	r11, r1
    4d9e:	44 e0       	ldi	r20, 0x04	; 4
    4da0:	50 e0       	ldi	r21, 0x00	; 0
    4da2:	60 e0       	ldi	r22, 0x00	; 0
    4da4:	70 e0       	ldi	r23, 0x00	; 0
    4da6:	c8 01       	movw	r24, r16
    4da8:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN5SDLib4File4seekEm>
    4dac:	89 82       	std	Y+1, r8	; 0x01
    4dae:	9a 82       	std	Y+2, r9	; 0x02
    4db0:	ab 82       	std	Y+3, r10	; 0x03
    4db2:	bc 82       	std	Y+4, r11	; 0x04
    4db4:	44 e0       	ldi	r20, 0x04	; 4
    4db6:	50 e0       	ldi	r21, 0x00	; 0
    4db8:	be 01       	movw	r22, r28
    4dba:	6f 5f       	subi	r22, 0xFF	; 255
    4dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    4dbe:	c8 01       	movw	r24, r16
    4dc0:	0e 94 ba 0c 	call	0x1974	; 0x1974 <_ZN5SDLib4File5writeEPKhj>
    4dc4:	48 e2       	ldi	r20, 0x28	; 40
    4dc6:	50 e0       	ldi	r21, 0x00	; 0
    4dc8:	60 e0       	ldi	r22, 0x00	; 0
    4dca:	70 e0       	ldi	r23, 0x00	; 0
    4dcc:	c8 01       	movw	r24, r16
    4dce:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN5SDLib4File4seekEm>
    4dd2:	d7 01       	movw	r26, r14
    4dd4:	c6 01       	movw	r24, r12
    4dd6:	8c 97       	sbiw	r24, 0x2c	; 44
    4dd8:	a1 09       	sbc	r26, r1
    4dda:	b1 09       	sbc	r27, r1
    4ddc:	89 83       	std	Y+1, r24	; 0x01
    4dde:	9a 83       	std	Y+2, r25	; 0x02
    4de0:	ab 83       	std	Y+3, r26	; 0x03
    4de2:	bc 83       	std	Y+4, r27	; 0x04
    4de4:	44 e0       	ldi	r20, 0x04	; 4
    4de6:	50 e0       	ldi	r21, 0x00	; 0
    4de8:	be 01       	movw	r22, r28
    4dea:	6f 5f       	subi	r22, 0xFF	; 255
    4dec:	7f 4f       	sbci	r23, 0xFF	; 255
    4dee:	c8 01       	movw	r24, r16
    4df0:	0e 94 ba 0c 	call	0x1974	; 0x1974 <_ZN5SDLib4File5writeEPKhj>
    4df4:	0f 90       	pop	r0
    4df6:	0f 90       	pop	r0
    4df8:	0f 90       	pop	r0
    4dfa:	0f 90       	pop	r0
    4dfc:	df 91       	pop	r29
    4dfe:	cf 91       	pop	r28
    4e00:	1f 91       	pop	r17
    4e02:	0f 91       	pop	r16
    4e04:	ff 90       	pop	r15
    4e06:	ef 90       	pop	r14
    4e08:	df 90       	pop	r13
    4e0a:	cf 90       	pop	r12
    4e0c:	bf 90       	pop	r11
    4e0e:	af 90       	pop	r10
    4e10:	9f 90       	pop	r9
    4e12:	8f 90       	pop	r8
    4e14:	08 95       	ret

00004e16 <_Z6recordv>:
    4e16:	1f 93       	push	r17
    4e18:	cf 93       	push	r28
    4e1a:	df 93       	push	r29
    4e1c:	cd b7       	in	r28, 0x3d	; 61
    4e1e:	de b7       	in	r29, 0x3e	; 62
    4e20:	c3 56       	subi	r28, 0x63	; 99
    4e22:	d1 09       	sbc	r29, r1
    4e24:	0f b6       	in	r0, 0x3f	; 63
    4e26:	f8 94       	cli
    4e28:	de bf       	out	0x3e, r29	; 62
    4e2a:	0f be       	out	0x3f, r0	; 63
    4e2c:	cd bf       	out	0x3d, r28	; 61
    4e2e:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <_Z15checkDuplicatesv>
    4e32:	40 91 59 06 	lds	r20, 0x0659	; 0x800659 <fname_temp>
    4e36:	50 91 5a 06 	lds	r21, 0x065A	; 0x80065a <fname_temp+0x1>
    4e3a:	27 e1       	ldi	r18, 0x17	; 23
    4e3c:	6c ef       	ldi	r22, 0xFC	; 252
    4e3e:	73 e0       	ldi	r23, 0x03	; 3
    4e40:	ce 01       	movw	r24, r28
    4e42:	87 5b       	subi	r24, 0xB7	; 183
    4e44:	9f 4f       	sbci	r25, 0xFF	; 255
    4e46:	0e 94 52 10 	call	0x20a4	; 0x20a4 <_ZN5SDLib7SDClass4openEPKch>
    4e4a:	ce 01       	movw	r24, r28
    4e4c:	87 5b       	subi	r24, 0xB7	; 183
    4e4e:	9f 4f       	sbci	r25, 0xFF	; 255
    4e50:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <_ZN5SDLib4FilecvbEv>
    4e54:	81 11       	cpse	r24, r1
    4e56:	1b c0       	rjmp	.+54     	; 0x4e8e <_Z6recordv+0x78>
    4e58:	69 ee       	ldi	r22, 0xE9	; 233
    4e5a:	71 e0       	ldi	r23, 0x01	; 1
    4e5c:	ce 01       	movw	r24, r28
    4e5e:	8d 5b       	subi	r24, 0xBD	; 189
    4e60:	9f 4f       	sbci	r25, 0xFF	; 255
    4e62:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1EPKc>
    4e66:	ce 01       	movw	r24, r28
    4e68:	8d 5b       	subi	r24, 0xBD	; 189
    4e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e6c:	0e 94 50 24 	call	0x48a0	; 0x48a0 <_Z10clrDisplay6String>
    4e70:	ce 01       	movw	r24, r28
    4e72:	8d 5b       	subi	r24, 0xBD	; 189
    4e74:	9f 4f       	sbci	r25, 0xFF	; 255
    4e76:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    4e7a:	2f ef       	ldi	r18, 0xFF	; 255
    4e7c:	83 ed       	ldi	r24, 0xD3	; 211
    4e7e:	90 e3       	ldi	r25, 0x30	; 48
    4e80:	21 50       	subi	r18, 0x01	; 1
    4e82:	80 40       	sbci	r24, 0x00	; 0
    4e84:	90 40       	sbci	r25, 0x00	; 0
    4e86:	e1 f7       	brne	.-8      	; 0x4e80 <_Z6recordv+0x6a>
    4e88:	00 c0       	rjmp	.+0      	; 0x4e8a <_Z6recordv+0x74>
    4e8a:	00 00       	nop
    4e8c:	ae c0       	rjmp	.+348    	; 0x4fea <_Z6recordv+0x1d4>
    4e8e:	6f ee       	ldi	r22, 0xEF	; 239
    4e90:	71 e0       	ldi	r23, 0x01	; 1
    4e92:	ce 01       	movw	r24, r28
    4e94:	cd 96       	adiw	r24, 0x3d	; 61
    4e96:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1EPKc>
    4e9a:	ce 01       	movw	r24, r28
    4e9c:	cd 96       	adiw	r24, 0x3d	; 61
    4e9e:	0e 94 50 24 	call	0x48a0	; 0x48a0 <_Z10clrDisplay6String>
    4ea2:	ce 01       	movw	r24, r28
    4ea4:	cd 96       	adiw	r24, 0x3d	; 61
    4ea6:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    4eaa:	2d 96       	adiw	r28, 0x0d	; 13
    4eac:	8e ad       	ldd	r24, Y+62	; 0x3e
    4eae:	9f ad       	ldd	r25, Y+63	; 0x3f
    4eb0:	2d 97       	sbiw	r28, 0x0d	; 13
    4eb2:	9d a3       	std	Y+37, r25	; 0x25
    4eb4:	8c a3       	std	Y+36, r24	; 0x24
    4eb6:	61 96       	adiw	r28, 0x11	; 17
    4eb8:	8c ad       	ldd	r24, Y+60	; 0x3c
    4eba:	9d ad       	ldd	r25, Y+61	; 0x3d
    4ebc:	ae ad       	ldd	r26, Y+62	; 0x3e
    4ebe:	bf ad       	ldd	r27, Y+63	; 0x3f
    4ec0:	61 97       	sbiw	r28, 0x11	; 17
    4ec2:	8e a3       	std	Y+38, r24	; 0x26
    4ec4:	9f a3       	std	Y+39, r25	; 0x27
    4ec6:	a8 a7       	std	Y+40, r26	; 0x28
    4ec8:	b9 a7       	std	Y+41, r27	; 0x29
    4eca:	65 96       	adiw	r28, 0x15	; 21
    4ecc:	8c ad       	ldd	r24, Y+60	; 0x3c
    4ece:	9d ad       	ldd	r25, Y+61	; 0x3d
    4ed0:	ae ad       	ldd	r26, Y+62	; 0x3e
    4ed2:	bf ad       	ldd	r27, Y+63	; 0x3f
    4ed4:	65 97       	sbiw	r28, 0x15	; 21
    4ed6:	8a a7       	std	Y+42, r24	; 0x2a
    4ed8:	9b a7       	std	Y+43, r25	; 0x2b
    4eda:	ac a7       	std	Y+44, r26	; 0x2c
    4edc:	bd a7       	std	Y+45, r27	; 0x2d
    4ede:	87 ea       	ldi	r24, 0xA7	; 167
    4ee0:	91 e0       	ldi	r25, 0x01	; 1
    4ee2:	9b a3       	std	Y+35, r25	; 0x23
    4ee4:	8a a3       	std	Y+34, r24	; 0x22
    4ee6:	8d e0       	ldi	r24, 0x0D	; 13
    4ee8:	e9 e4       	ldi	r30, 0x49	; 73
    4eea:	f0 e0       	ldi	r31, 0x00	; 0
    4eec:	ec 0f       	add	r30, r28
    4eee:	fd 1f       	adc	r31, r29
    4ef0:	3c 96       	adiw	r30, 0x0c	; 12
    4ef2:	de 01       	movw	r26, r28
    4ef4:	9e 96       	adiw	r26, 0x2e	; 46
    4ef6:	01 90       	ld	r0, Z+
    4ef8:	0d 92       	st	X+, r0
    4efa:	8a 95       	dec	r24
    4efc:	e1 f7       	brne	.-8      	; 0x4ef6 <_Z6recordv+0xe0>
    4efe:	a4 96       	adiw	r28, 0x24	; 36
    4f00:	8e ad       	ldd	r24, Y+62	; 0x3e
    4f02:	9f ad       	ldd	r25, Y+63	; 0x3f
    4f04:	a4 97       	sbiw	r28, 0x24	; 36
    4f06:	9c af       	std	Y+60, r25	; 0x3c
    4f08:	8b af       	std	Y+59, r24	; 0x3b
    4f0a:	ce 01       	movw	r24, r28
    4f0c:	82 96       	adiw	r24, 0x22	; 34
    4f0e:	0e 94 67 26 	call	0x4cce	; 0x4cce <_Z12makeWaveFileN5SDLib4FileE>
    4f12:	8e e0       	ldi	r24, 0x0E	; 14
    4f14:	0e 94 de 05 	call	0xbbc	; 0xbbc <analogRead>
    4f18:	bc 01       	movw	r22, r24
    4f1a:	99 0f       	add	r25, r25
    4f1c:	88 0b       	sbc	r24, r24
    4f1e:	99 0b       	sbc	r25, r25
    4f20:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <__floatsisf>
    4f24:	20 ed       	ldi	r18, 0xD0	; 208
    4f26:	3f e3       	ldi	r19, 0x3F	; 63
    4f28:	4f e7       	ldi	r20, 0x7F	; 127
    4f2a:	5e e3       	ldi	r21, 0x3E	; 62
    4f2c:	0e 94 aa 2d 	call	0x5b54	; 0x5b54 <__mulsf3>
    4f30:	0e 94 ed 2c 	call	0x59da	; 0x59da <__fixunssfsi>
    4f34:	16 2f       	mov	r17, r22
    4f36:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z8keyInputv>
    4f3a:	83 37       	cpi	r24, 0x73	; 115
    4f3c:	59 f0       	breq	.+22     	; 0x4f54 <_Z6recordv+0x13e>
    4f3e:	61 2f       	mov	r22, r17
    4f40:	ce 01       	movw	r24, r28
    4f42:	87 5b       	subi	r24, 0xB7	; 183
    4f44:	9f 4f       	sbci	r25, 0xFF	; 255
    4f46:	0e 94 92 0c 	call	0x1924	; 0x1924 <_ZN5SDLib4File5writeEh>
    4f4a:	25 e5       	ldi	r18, 0x55	; 85
    4f4c:	2a 95       	dec	r18
    4f4e:	f1 f7       	brne	.-4      	; 0x4f4c <_Z6recordv+0x136>
    4f50:	00 00       	nop
    4f52:	df cf       	rjmp	.-66     	; 0x4f12 <_Z6recordv+0xfc>
    4f54:	2d 96       	adiw	r28, 0x0d	; 13
    4f56:	8e ad       	ldd	r24, Y+62	; 0x3e
    4f58:	9f ad       	ldd	r25, Y+63	; 0x3f
    4f5a:	2d 97       	sbiw	r28, 0x0d	; 13
    4f5c:	9a 87       	std	Y+10, r25	; 0x0a
    4f5e:	89 87       	std	Y+9, r24	; 0x09
    4f60:	61 96       	adiw	r28, 0x11	; 17
    4f62:	8c ad       	ldd	r24, Y+60	; 0x3c
    4f64:	9d ad       	ldd	r25, Y+61	; 0x3d
    4f66:	ae ad       	ldd	r26, Y+62	; 0x3e
    4f68:	bf ad       	ldd	r27, Y+63	; 0x3f
    4f6a:	61 97       	sbiw	r28, 0x11	; 17
    4f6c:	8b 87       	std	Y+11, r24	; 0x0b
    4f6e:	9c 87       	std	Y+12, r25	; 0x0c
    4f70:	ad 87       	std	Y+13, r26	; 0x0d
    4f72:	be 87       	std	Y+14, r27	; 0x0e
    4f74:	65 96       	adiw	r28, 0x15	; 21
    4f76:	8c ad       	ldd	r24, Y+60	; 0x3c
    4f78:	9d ad       	ldd	r25, Y+61	; 0x3d
    4f7a:	ae ad       	ldd	r26, Y+62	; 0x3e
    4f7c:	bf ad       	ldd	r27, Y+63	; 0x3f
    4f7e:	65 97       	sbiw	r28, 0x15	; 21
    4f80:	8f 87       	std	Y+15, r24	; 0x0f
    4f82:	98 8b       	std	Y+16, r25	; 0x10
    4f84:	a9 8b       	std	Y+17, r26	; 0x11
    4f86:	ba 8b       	std	Y+18, r27	; 0x12
    4f88:	87 ea       	ldi	r24, 0xA7	; 167
    4f8a:	91 e0       	ldi	r25, 0x01	; 1
    4f8c:	98 87       	std	Y+8, r25	; 0x08
    4f8e:	8f 83       	std	Y+7, r24	; 0x07
    4f90:	8d e0       	ldi	r24, 0x0D	; 13
    4f92:	e9 e4       	ldi	r30, 0x49	; 73
    4f94:	f0 e0       	ldi	r31, 0x00	; 0
    4f96:	ec 0f       	add	r30, r28
    4f98:	fd 1f       	adc	r31, r29
    4f9a:	3c 96       	adiw	r30, 0x0c	; 12
    4f9c:	de 01       	movw	r26, r28
    4f9e:	53 96       	adiw	r26, 0x13	; 19
    4fa0:	01 90       	ld	r0, Z+
    4fa2:	0d 92       	st	X+, r0
    4fa4:	8a 95       	dec	r24
    4fa6:	e1 f7       	brne	.-8      	; 0x4fa0 <_Z6recordv+0x18a>
    4fa8:	a4 96       	adiw	r28, 0x24	; 36
    4faa:	8e ad       	ldd	r24, Y+62	; 0x3e
    4fac:	9f ad       	ldd	r25, Y+63	; 0x3f
    4fae:	a4 97       	sbiw	r28, 0x24	; 36
    4fb0:	99 a3       	std	Y+33, r25	; 0x21
    4fb2:	88 a3       	std	Y+32, r24	; 0x20
    4fb4:	ce 01       	movw	r24, r28
    4fb6:	07 96       	adiw	r24, 0x07	; 7
    4fb8:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <_Z12finalizeWaveN5SDLib4FileE>
    4fbc:	69 ef       	ldi	r22, 0xF9	; 249
    4fbe:	71 e0       	ldi	r23, 0x01	; 1
    4fc0:	ce 01       	movw	r24, r28
    4fc2:	01 96       	adiw	r24, 0x01	; 1
    4fc4:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1EPKc>
    4fc8:	ce 01       	movw	r24, r28
    4fca:	01 96       	adiw	r24, 0x01	; 1
    4fcc:	0e 94 50 24 	call	0x48a0	; 0x48a0 <_Z10clrDisplay6String>
    4fd0:	ce 01       	movw	r24, r28
    4fd2:	01 96       	adiw	r24, 0x01	; 1
    4fd4:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    4fd8:	8f ef       	ldi	r24, 0xFF	; 255
    4fda:	93 ed       	ldi	r25, 0xD3	; 211
    4fdc:	20 e3       	ldi	r18, 0x30	; 48
    4fde:	81 50       	subi	r24, 0x01	; 1
    4fe0:	90 40       	sbci	r25, 0x00	; 0
    4fe2:	20 40       	sbci	r18, 0x00	; 0
    4fe4:	e1 f7       	brne	.-8      	; 0x4fde <_Z6recordv+0x1c8>
    4fe6:	00 c0       	rjmp	.+0      	; 0x4fe8 <_Z6recordv+0x1d2>
    4fe8:	00 00       	nop
    4fea:	ce 01       	movw	r24, r28
    4fec:	87 5b       	subi	r24, 0xB7	; 183
    4fee:	9f 4f       	sbci	r25, 0xFF	; 255
    4ff0:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_ZN5SDLib4File5closeEv>
    4ff4:	cd 59       	subi	r28, 0x9D	; 157
    4ff6:	df 4f       	sbci	r29, 0xFF	; 255
    4ff8:	0f b6       	in	r0, 0x3f	; 63
    4ffa:	f8 94       	cli
    4ffc:	de bf       	out	0x3e, r29	; 62
    4ffe:	0f be       	out	0x3f, r0	; 63
    5000:	cd bf       	out	0x3d, r28	; 61
    5002:	df 91       	pop	r29
    5004:	cf 91       	pop	r28
    5006:	1f 91       	pop	r17
    5008:	08 95       	ret

0000500a <_Z15setPwmFrequencyii>:
    500a:	9c 01       	movw	r18, r24
    500c:	25 50       	subi	r18, 0x05	; 5
    500e:	31 09       	sbc	r19, r1
    5010:	22 30       	cpi	r18, 0x02	; 2
    5012:	31 05       	cpc	r19, r1
    5014:	30 f0       	brcs	.+12     	; 0x5022 <_Z15setPwmFrequencyii+0x18>
    5016:	89 30       	cpi	r24, 0x09	; 9
    5018:	91 05       	cpc	r25, r1
    501a:	19 f0       	breq	.+6      	; 0x5022 <_Z15setPwmFrequencyii+0x18>
    501c:	8a 30       	cpi	r24, 0x0A	; 10
    501e:	91 05       	cpc	r25, r1
    5020:	59 f5       	brne	.+86     	; 0x5078 <_Z15setPwmFrequencyii+0x6e>
    5022:	60 34       	cpi	r22, 0x40	; 64
    5024:	71 05       	cpc	r23, r1
    5026:	91 f0       	breq	.+36     	; 0x504c <_Z15setPwmFrequencyii+0x42>
    5028:	3c f4       	brge	.+14     	; 0x5038 <_Z15setPwmFrequencyii+0x2e>
    502a:	61 30       	cpi	r22, 0x01	; 1
    502c:	71 05       	cpc	r23, r1
    502e:	61 f0       	breq	.+24     	; 0x5048 <_Z15setPwmFrequencyii+0x3e>
    5030:	68 30       	cpi	r22, 0x08	; 8
    5032:	71 05       	cpc	r23, r1
    5034:	89 f0       	breq	.+34     	; 0x5058 <_Z15setPwmFrequencyii+0x4e>
    5036:	08 95       	ret
    5038:	61 15       	cp	r22, r1
    503a:	81 e0       	ldi	r24, 0x01	; 1
    503c:	78 07       	cpc	r23, r24
    503e:	41 f0       	breq	.+16     	; 0x5050 <_Z15setPwmFrequencyii+0x46>
    5040:	61 15       	cp	r22, r1
    5042:	74 40       	sbci	r23, 0x04	; 4
    5044:	39 f0       	breq	.+14     	; 0x5054 <_Z15setPwmFrequencyii+0x4a>
    5046:	08 95       	ret
    5048:	81 e0       	ldi	r24, 0x01	; 1
    504a:	07 c0       	rjmp	.+14     	; 0x505a <_Z15setPwmFrequencyii+0x50>
    504c:	83 e0       	ldi	r24, 0x03	; 3
    504e:	05 c0       	rjmp	.+10     	; 0x505a <_Z15setPwmFrequencyii+0x50>
    5050:	84 e0       	ldi	r24, 0x04	; 4
    5052:	03 c0       	rjmp	.+6      	; 0x505a <_Z15setPwmFrequencyii+0x50>
    5054:	85 e0       	ldi	r24, 0x05	; 5
    5056:	01 c0       	rjmp	.+2      	; 0x505a <_Z15setPwmFrequencyii+0x50>
    5058:	82 e0       	ldi	r24, 0x02	; 2
    505a:	22 30       	cpi	r18, 0x02	; 2
    505c:	31 05       	cpc	r19, r1
    505e:	28 f4       	brcc	.+10     	; 0x506a <_Z15setPwmFrequencyii+0x60>
    5060:	95 b5       	in	r25, 0x25	; 37
    5062:	98 7f       	andi	r25, 0xF8	; 248
    5064:	89 2b       	or	r24, r25
    5066:	85 bd       	out	0x25, r24	; 37
    5068:	08 95       	ret
    506a:	e1 e8       	ldi	r30, 0x81	; 129
    506c:	f0 e0       	ldi	r31, 0x00	; 0
    506e:	90 81       	ld	r25, Z
    5070:	98 7f       	andi	r25, 0xF8	; 248
    5072:	89 2b       	or	r24, r25
    5074:	80 83       	st	Z, r24
    5076:	08 95       	ret
    5078:	83 30       	cpi	r24, 0x03	; 3
    507a:	91 05       	cpc	r25, r1
    507c:	11 f0       	breq	.+4      	; 0x5082 <_Z15setPwmFrequencyii+0x78>
    507e:	0b 97       	sbiw	r24, 0x0b	; 11
    5080:	69 f5       	brne	.+90     	; 0x50dc <_Z15setPwmFrequencyii+0xd2>
    5082:	60 34       	cpi	r22, 0x40	; 64
    5084:	71 05       	cpc	r23, r1
    5086:	d9 f0       	breq	.+54     	; 0x50be <_Z15setPwmFrequencyii+0xb4>
    5088:	54 f4       	brge	.+20     	; 0x509e <_Z15setPwmFrequencyii+0x94>
    508a:	68 30       	cpi	r22, 0x08	; 8
    508c:	71 05       	cpc	r23, r1
    508e:	f9 f0       	breq	.+62     	; 0x50ce <_Z15setPwmFrequencyii+0xc4>
    5090:	60 32       	cpi	r22, 0x20	; 32
    5092:	71 05       	cpc	r23, r1
    5094:	91 f0       	breq	.+36     	; 0x50ba <_Z15setPwmFrequencyii+0xb0>
    5096:	61 30       	cpi	r22, 0x01	; 1
    5098:	71 05       	cpc	r23, r1
    509a:	01 f5       	brne	.+64     	; 0x50dc <_Z15setPwmFrequencyii+0xd2>
    509c:	0c c0       	rjmp	.+24     	; 0x50b6 <_Z15setPwmFrequencyii+0xac>
    509e:	61 15       	cp	r22, r1
    50a0:	81 e0       	ldi	r24, 0x01	; 1
    50a2:	78 07       	cpc	r23, r24
    50a4:	81 f0       	breq	.+32     	; 0x50c6 <_Z15setPwmFrequencyii+0xbc>
    50a6:	61 15       	cp	r22, r1
    50a8:	84 e0       	ldi	r24, 0x04	; 4
    50aa:	78 07       	cpc	r23, r24
    50ac:	71 f0       	breq	.+28     	; 0x50ca <_Z15setPwmFrequencyii+0xc0>
    50ae:	60 38       	cpi	r22, 0x80	; 128
    50b0:	71 05       	cpc	r23, r1
    50b2:	a1 f4       	brne	.+40     	; 0x50dc <_Z15setPwmFrequencyii+0xd2>
    50b4:	06 c0       	rjmp	.+12     	; 0x50c2 <_Z15setPwmFrequencyii+0xb8>
    50b6:	91 e0       	ldi	r25, 0x01	; 1
    50b8:	0b c0       	rjmp	.+22     	; 0x50d0 <_Z15setPwmFrequencyii+0xc6>
    50ba:	93 e0       	ldi	r25, 0x03	; 3
    50bc:	09 c0       	rjmp	.+18     	; 0x50d0 <_Z15setPwmFrequencyii+0xc6>
    50be:	94 e0       	ldi	r25, 0x04	; 4
    50c0:	07 c0       	rjmp	.+14     	; 0x50d0 <_Z15setPwmFrequencyii+0xc6>
    50c2:	95 e0       	ldi	r25, 0x05	; 5
    50c4:	05 c0       	rjmp	.+10     	; 0x50d0 <_Z15setPwmFrequencyii+0xc6>
    50c6:	96 e0       	ldi	r25, 0x06	; 6
    50c8:	03 c0       	rjmp	.+6      	; 0x50d0 <_Z15setPwmFrequencyii+0xc6>
    50ca:	97 e0       	ldi	r25, 0x07	; 7
    50cc:	01 c0       	rjmp	.+2      	; 0x50d0 <_Z15setPwmFrequencyii+0xc6>
    50ce:	92 e0       	ldi	r25, 0x02	; 2
    50d0:	e1 eb       	ldi	r30, 0xB1	; 177
    50d2:	f0 e0       	ldi	r31, 0x00	; 0
    50d4:	80 81       	ld	r24, Z
    50d6:	88 7f       	andi	r24, 0xF8	; 248
    50d8:	89 2b       	or	r24, r25
    50da:	80 83       	st	Z, r24
    50dc:	08 95       	ret

000050de <_Z13sig_freqShiftv>:
    50de:	ef 92       	push	r14
    50e0:	ff 92       	push	r15
    50e2:	0f 93       	push	r16
    50e4:	1f 93       	push	r17
    50e6:	cf 93       	push	r28
    50e8:	df 93       	push	r29
    50ea:	cd b7       	in	r28, 0x3d	; 61
    50ec:	de b7       	in	r29, 0x3e	; 62
    50ee:	c9 5c       	subi	r28, 0xC9	; 201
    50f0:	d1 09       	sbc	r29, r1
    50f2:	0f b6       	in	r0, 0x3f	; 63
    50f4:	f8 94       	cli
    50f6:	de bf       	out	0x3e, r29	; 62
    50f8:	0f be       	out	0x3f, r0	; 63
    50fa:	cd bf       	out	0x3d, r28	; 61
    50fc:	6f ef       	ldi	r22, 0xFF	; 255
    50fe:	71 e0       	ldi	r23, 0x01	; 1
    5100:	ce 01       	movw	r24, r28
    5102:	8d 5b       	subi	r24, 0xBD	; 189
    5104:	9f 4f       	sbci	r25, 0xFF	; 255
    5106:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1EPKc>
    510a:	69 e5       	ldi	r22, 0x59	; 89
    510c:	76 e0       	ldi	r23, 0x06	; 6
    510e:	ce 01       	movw	r24, r28
    5110:	8d 5b       	subi	r24, 0xBD	; 189
    5112:	9f 4f       	sbci	r25, 0xFF	; 255
    5114:	0e 94 0f 08 	call	0x101e	; 0x101e <_ZplRK15StringSumHelperRK6String>
    5118:	fc 01       	movw	r30, r24
    511a:	60 81       	ld	r22, Z
    511c:	71 81       	ldd	r23, Z+1	; 0x01
    511e:	8c ef       	ldi	r24, 0xFC	; 252
    5120:	93 e0       	ldi	r25, 0x03	; 3
    5122:	0e 94 69 11 	call	0x22d2	; 0x22d2 <_ZN5SDLib7SDClass6existsEPKc>
    5126:	18 2f       	mov	r17, r24
    5128:	ce 01       	movw	r24, r28
    512a:	8d 5b       	subi	r24, 0xBD	; 189
    512c:	9f 4f       	sbci	r25, 0xFF	; 255
    512e:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    5132:	11 11       	cpse	r17, r1
    5134:	06 c1       	rjmp	.+524    	; 0x5342 <_Z13sig_freqShiftv+0x264>
    5136:	6f ef       	ldi	r22, 0xFF	; 255
    5138:	71 e0       	ldi	r23, 0x01	; 1
    513a:	ce 01       	movw	r24, r28
    513c:	cd 96       	adiw	r24, 0x3d	; 61
    513e:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1EPKc>
    5142:	69 e5       	ldi	r22, 0x59	; 89
    5144:	76 e0       	ldi	r23, 0x06	; 6
    5146:	ce 01       	movw	r24, r28
    5148:	cd 96       	adiw	r24, 0x3d	; 61
    514a:	0e 94 0f 08 	call	0x101e	; 0x101e <_ZplRK15StringSumHelperRK6String>
    514e:	fc 01       	movw	r30, r24
    5150:	40 81       	ld	r20, Z
    5152:	51 81       	ldd	r21, Z+1	; 0x01
    5154:	27 e1       	ldi	r18, 0x17	; 23
    5156:	6c ef       	ldi	r22, 0xFC	; 252
    5158:	73 e0       	ldi	r23, 0x03	; 3
    515a:	ce 01       	movw	r24, r28
    515c:	8a 56       	subi	r24, 0x6A	; 106
    515e:	9f 4f       	sbci	r25, 0xFF	; 255
    5160:	0e 94 52 10 	call	0x20a4	; 0x20a4 <_ZN5SDLib7SDClass4openEPKch>
    5164:	ce 01       	movw	r24, r28
    5166:	cd 96       	adiw	r24, 0x3d	; 61
    5168:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    516c:	c8 56       	subi	r28, 0x68	; 104
    516e:	df 4f       	sbci	r29, 0xFF	; 255
    5170:	88 81       	ld	r24, Y
    5172:	99 81       	ldd	r25, Y+1	; 0x01
    5174:	c8 59       	subi	r28, 0x98	; 152
    5176:	d0 40       	sbci	r29, 0x00	; 0
    5178:	9d a3       	std	Y+37, r25	; 0x25
    517a:	8c a3       	std	Y+36, r24	; 0x24
    517c:	c6 56       	subi	r28, 0x66	; 102
    517e:	df 4f       	sbci	r29, 0xFF	; 255
    5180:	88 81       	ld	r24, Y
    5182:	99 81       	ldd	r25, Y+1	; 0x01
    5184:	aa 81       	ldd	r26, Y+2	; 0x02
    5186:	bb 81       	ldd	r27, Y+3	; 0x03
    5188:	ca 59       	subi	r28, 0x9A	; 154
    518a:	d0 40       	sbci	r29, 0x00	; 0
    518c:	8e a3       	std	Y+38, r24	; 0x26
    518e:	9f a3       	std	Y+39, r25	; 0x27
    5190:	a8 a7       	std	Y+40, r26	; 0x28
    5192:	b9 a7       	std	Y+41, r27	; 0x29
    5194:	c2 56       	subi	r28, 0x62	; 98
    5196:	df 4f       	sbci	r29, 0xFF	; 255
    5198:	88 81       	ld	r24, Y
    519a:	99 81       	ldd	r25, Y+1	; 0x01
    519c:	aa 81       	ldd	r26, Y+2	; 0x02
    519e:	bb 81       	ldd	r27, Y+3	; 0x03
    51a0:	ce 59       	subi	r28, 0x9E	; 158
    51a2:	d0 40       	sbci	r29, 0x00	; 0
    51a4:	8a a7       	std	Y+42, r24	; 0x2a
    51a6:	9b a7       	std	Y+43, r25	; 0x2b
    51a8:	ac a7       	std	Y+44, r26	; 0x2c
    51aa:	bd a7       	std	Y+45, r27	; 0x2d
    51ac:	87 ea       	ldi	r24, 0xA7	; 167
    51ae:	91 e0       	ldi	r25, 0x01	; 1
    51b0:	9b a3       	std	Y+35, r25	; 0x23
    51b2:	8a a3       	std	Y+34, r24	; 0x22
    51b4:	8d e0       	ldi	r24, 0x0D	; 13
    51b6:	e6 e9       	ldi	r30, 0x96	; 150
    51b8:	f0 e0       	ldi	r31, 0x00	; 0
    51ba:	ec 0f       	add	r30, r28
    51bc:	fd 1f       	adc	r31, r29
    51be:	3c 96       	adiw	r30, 0x0c	; 12
    51c0:	de 01       	movw	r26, r28
    51c2:	9e 96       	adiw	r26, 0x2e	; 46
    51c4:	01 90       	ld	r0, Z+
    51c6:	0d 92       	st	X+, r0
    51c8:	8a 95       	dec	r24
    51ca:	e1 f7       	brne	.-8      	; 0x51c4 <_Z13sig_freqShiftv+0xe6>
    51cc:	c1 55       	subi	r28, 0x51	; 81
    51ce:	df 4f       	sbci	r29, 0xFF	; 255
    51d0:	88 81       	ld	r24, Y
    51d2:	99 81       	ldd	r25, Y+1	; 0x01
    51d4:	cf 5a       	subi	r28, 0xAF	; 175
    51d6:	d0 40       	sbci	r29, 0x00	; 0
    51d8:	9c af       	std	Y+60, r25	; 0x3c
    51da:	8b af       	std	Y+59, r24	; 0x3b
    51dc:	ce 01       	movw	r24, r28
    51de:	82 96       	adiw	r24, 0x22	; 34
    51e0:	0e 94 67 26 	call	0x4cce	; 0x4cce <_Z12makeWaveFileN5SDLib4FileE>
    51e4:	40 91 59 06 	lds	r20, 0x0659	; 0x800659 <fname_temp>
    51e8:	50 91 5a 06 	lds	r21, 0x065A	; 0x80065a <fname_temp+0x1>
    51ec:	21 e0       	ldi	r18, 0x01	; 1
    51ee:	6c ef       	ldi	r22, 0xFC	; 252
    51f0:	73 e0       	ldi	r23, 0x03	; 3
    51f2:	ce 01       	movw	r24, r28
    51f4:	85 58       	subi	r24, 0x85	; 133
    51f6:	9f 4f       	sbci	r25, 0xFF	; 255
    51f8:	0e 94 52 10 	call	0x20a4	; 0x20a4 <_ZN5SDLib7SDClass4openEPKch>
    51fc:	4c e2       	ldi	r20, 0x2C	; 44
    51fe:	50 e0       	ldi	r21, 0x00	; 0
    5200:	60 e0       	ldi	r22, 0x00	; 0
    5202:	70 e0       	ldi	r23, 0x00	; 0
    5204:	ce 01       	movw	r24, r28
    5206:	85 58       	subi	r24, 0x85	; 133
    5208:	9f 4f       	sbci	r25, 0xFF	; 255
    520a:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN5SDLib4File4seekEm>
    520e:	82 e3       	ldi	r24, 0x32	; 50
    5210:	e5 e2       	ldi	r30, 0x25	; 37
    5212:	f1 e0       	ldi	r31, 0x01	; 1
    5214:	de 01       	movw	r26, r28
    5216:	a7 5b       	subi	r26, 0xB7	; 183
    5218:	bf 4f       	sbci	r27, 0xFF	; 255
    521a:	01 90       	ld	r0, Z+
    521c:	0d 92       	st	X+, r0
    521e:	8a 95       	dec	r24
    5220:	e1 f7       	brne	.-8      	; 0x521a <_Z13sig_freqShiftv+0x13c>
    5222:	e1 2c       	mov	r14, r1
    5224:	01 c0       	rjmp	.+2      	; 0x5228 <_Z13sig_freqShiftv+0x14a>
    5226:	e0 2e       	mov	r14, r16
    5228:	ce 01       	movw	r24, r28
    522a:	85 58       	subi	r24, 0x85	; 133
    522c:	9f 4f       	sbci	r25, 0xFF	; 255
    522e:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_ZN5SDLib4File9availableEv>
    5232:	89 2b       	or	r24, r25
    5234:	09 f4       	brne	.+2      	; 0x5238 <_Z13sig_freqShiftv+0x15a>
    5236:	3f c0       	rjmp	.+126    	; 0x52b6 <_Z13sig_freqShiftv+0x1d8>
    5238:	01 e0       	ldi	r16, 0x01	; 1
    523a:	0e 0d       	add	r16, r14
    523c:	f1 2c       	mov	r15, r1
    523e:	ce 01       	movw	r24, r28
    5240:	85 58       	subi	r24, 0x85	; 133
    5242:	9f 4f       	sbci	r25, 0xFF	; 255
    5244:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <_ZN5SDLib4File4readEv>
    5248:	bc 01       	movw	r22, r24
    524a:	6f 57       	subi	r22, 0x7F	; 127
    524c:	71 09       	sbc	r23, r1
    524e:	21 e0       	ldi	r18, 0x01	; 1
    5250:	21 0f       	add	r18, r17
    5252:	e1 2f       	mov	r30, r17
    5254:	f0 e0       	ldi	r31, 0x00	; 0
    5256:	ee 0f       	add	r30, r30
    5258:	ff 1f       	adc	r31, r31
    525a:	89 e4       	ldi	r24, 0x49	; 73
    525c:	90 e0       	ldi	r25, 0x00	; 0
    525e:	8c 0f       	add	r24, r28
    5260:	9d 1f       	adc	r25, r29
    5262:	e8 0f       	add	r30, r24
    5264:	f9 1f       	adc	r31, r25
    5266:	40 81       	ld	r20, Z
    5268:	51 81       	ldd	r21, Z+1	; 0x01
    526a:	64 9f       	mul	r22, r20
    526c:	c0 01       	movw	r24, r0
    526e:	65 9f       	mul	r22, r21
    5270:	90 0d       	add	r25, r0
    5272:	74 9f       	mul	r23, r20
    5274:	90 0d       	add	r25, r0
    5276:	11 24       	eor	r1, r1
    5278:	6a e0       	ldi	r22, 0x0A	; 10
    527a:	70 e0       	ldi	r23, 0x00	; 0
    527c:	0e 94 17 2e 	call	0x5c2e	; 0x5c2e <__divmodhi4>
    5280:	e1 eb       	ldi	r30, 0xB1	; 177
    5282:	f0 e0       	ldi	r31, 0x00	; 0
    5284:	ec 0f       	add	r30, r28
    5286:	fd 1f       	adc	r31, r29
    5288:	ee 0d       	add	r30, r14
    528a:	ff 1d       	adc	r31, r15
    528c:	61 58       	subi	r22, 0x81	; 129
    528e:	60 83       	st	Z, r22
    5290:	29 31       	cpi	r18, 0x19	; 25
    5292:	11 f0       	breq	.+4      	; 0x5298 <_Z13sig_freqShiftv+0x1ba>
    5294:	12 2f       	mov	r17, r18
    5296:	01 c0       	rjmp	.+2      	; 0x529a <_Z13sig_freqShiftv+0x1bc>
    5298:	10 e0       	ldi	r17, 0x00	; 0
    529a:	09 31       	cpi	r16, 0x19	; 25
    529c:	21 f6       	brne	.-120    	; 0x5226 <_Z13sig_freqShiftv+0x148>
    529e:	49 e1       	ldi	r20, 0x19	; 25
    52a0:	50 e0       	ldi	r21, 0x00	; 0
    52a2:	be 01       	movw	r22, r28
    52a4:	6f 54       	subi	r22, 0x4F	; 79
    52a6:	7f 4f       	sbci	r23, 0xFF	; 255
    52a8:	ce 01       	movw	r24, r28
    52aa:	8a 56       	subi	r24, 0x6A	; 106
    52ac:	9f 4f       	sbci	r25, 0xFF	; 255
    52ae:	0e 94 ba 0c 	call	0x1974	; 0x1974 <_ZN5SDLib4File5writeEPKhj>
    52b2:	00 e0       	ldi	r16, 0x00	; 0
    52b4:	b8 cf       	rjmp	.-144    	; 0x5226 <_Z13sig_freqShiftv+0x148>
    52b6:	c8 56       	subi	r28, 0x68	; 104
    52b8:	df 4f       	sbci	r29, 0xFF	; 255
    52ba:	88 81       	ld	r24, Y
    52bc:	99 81       	ldd	r25, Y+1	; 0x01
    52be:	c8 59       	subi	r28, 0x98	; 152
    52c0:	d0 40       	sbci	r29, 0x00	; 0
    52c2:	9a 87       	std	Y+10, r25	; 0x0a
    52c4:	89 87       	std	Y+9, r24	; 0x09
    52c6:	c6 56       	subi	r28, 0x66	; 102
    52c8:	df 4f       	sbci	r29, 0xFF	; 255
    52ca:	88 81       	ld	r24, Y
    52cc:	99 81       	ldd	r25, Y+1	; 0x01
    52ce:	aa 81       	ldd	r26, Y+2	; 0x02
    52d0:	bb 81       	ldd	r27, Y+3	; 0x03
    52d2:	ca 59       	subi	r28, 0x9A	; 154
    52d4:	d0 40       	sbci	r29, 0x00	; 0
    52d6:	8b 87       	std	Y+11, r24	; 0x0b
    52d8:	9c 87       	std	Y+12, r25	; 0x0c
    52da:	ad 87       	std	Y+13, r26	; 0x0d
    52dc:	be 87       	std	Y+14, r27	; 0x0e
    52de:	c2 56       	subi	r28, 0x62	; 98
    52e0:	df 4f       	sbci	r29, 0xFF	; 255
    52e2:	88 81       	ld	r24, Y
    52e4:	99 81       	ldd	r25, Y+1	; 0x01
    52e6:	aa 81       	ldd	r26, Y+2	; 0x02
    52e8:	bb 81       	ldd	r27, Y+3	; 0x03
    52ea:	ce 59       	subi	r28, 0x9E	; 158
    52ec:	d0 40       	sbci	r29, 0x00	; 0
    52ee:	8f 87       	std	Y+15, r24	; 0x0f
    52f0:	98 8b       	std	Y+16, r25	; 0x10
    52f2:	a9 8b       	std	Y+17, r26	; 0x11
    52f4:	ba 8b       	std	Y+18, r27	; 0x12
    52f6:	87 ea       	ldi	r24, 0xA7	; 167
    52f8:	91 e0       	ldi	r25, 0x01	; 1
    52fa:	98 87       	std	Y+8, r25	; 0x08
    52fc:	8f 83       	std	Y+7, r24	; 0x07
    52fe:	8d e0       	ldi	r24, 0x0D	; 13
    5300:	e6 e9       	ldi	r30, 0x96	; 150
    5302:	f0 e0       	ldi	r31, 0x00	; 0
    5304:	ec 0f       	add	r30, r28
    5306:	fd 1f       	adc	r31, r29
    5308:	3c 96       	adiw	r30, 0x0c	; 12
    530a:	de 01       	movw	r26, r28
    530c:	53 96       	adiw	r26, 0x13	; 19
    530e:	01 90       	ld	r0, Z+
    5310:	0d 92       	st	X+, r0
    5312:	8a 95       	dec	r24
    5314:	e1 f7       	brne	.-8      	; 0x530e <_Z13sig_freqShiftv+0x230>
    5316:	c1 55       	subi	r28, 0x51	; 81
    5318:	df 4f       	sbci	r29, 0xFF	; 255
    531a:	88 81       	ld	r24, Y
    531c:	99 81       	ldd	r25, Y+1	; 0x01
    531e:	cf 5a       	subi	r28, 0xAF	; 175
    5320:	d0 40       	sbci	r29, 0x00	; 0
    5322:	99 a3       	std	Y+33, r25	; 0x21
    5324:	88 a3       	std	Y+32, r24	; 0x20
    5326:	ce 01       	movw	r24, r28
    5328:	07 96       	adiw	r24, 0x07	; 7
    532a:	0e 94 b3 26 	call	0x4d66	; 0x4d66 <_Z12finalizeWaveN5SDLib4FileE>
    532e:	ce 01       	movw	r24, r28
    5330:	8a 56       	subi	r24, 0x6A	; 106
    5332:	9f 4f       	sbci	r25, 0xFF	; 255
    5334:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_ZN5SDLib4File5closeEv>
    5338:	ce 01       	movw	r24, r28
    533a:	85 58       	subi	r24, 0x85	; 133
    533c:	9f 4f       	sbci	r25, 0xFF	; 255
    533e:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_ZN5SDLib4File5closeEv>
    5342:	6f ef       	ldi	r22, 0xFF	; 255
    5344:	71 e0       	ldi	r23, 0x01	; 1
    5346:	ce 01       	movw	r24, r28
    5348:	01 96       	adiw	r24, 0x01	; 1
    534a:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1EPKc>
    534e:	69 e5       	ldi	r22, 0x59	; 89
    5350:	76 e0       	ldi	r23, 0x06	; 6
    5352:	ce 01       	movw	r24, r28
    5354:	01 96       	adiw	r24, 0x01	; 1
    5356:	0e 94 0f 08 	call	0x101e	; 0x101e <_ZplRK15StringSumHelperRK6String>
    535a:	bc 01       	movw	r22, r24
    535c:	89 e5       	ldi	r24, 0x59	; 89
    535e:	96 e0       	ldi	r25, 0x06	; 6
    5360:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_ZN6StringaSERKS_>
    5364:	ce 01       	movw	r24, r28
    5366:	01 96       	adiw	r24, 0x01	; 1
    5368:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    536c:	c7 53       	subi	r28, 0x37	; 55
    536e:	df 4f       	sbci	r29, 0xFF	; 255
    5370:	0f b6       	in	r0, 0x3f	; 63
    5372:	f8 94       	cli
    5374:	de bf       	out	0x3e, r29	; 62
    5376:	0f be       	out	0x3f, r0	; 63
    5378:	cd bf       	out	0x3d, r28	; 61
    537a:	df 91       	pop	r29
    537c:	cf 91       	pop	r28
    537e:	1f 91       	pop	r17
    5380:	0f 91       	pop	r16
    5382:	ff 90       	pop	r15
    5384:	ef 90       	pop	r14
    5386:	08 95       	ret

00005388 <_Z9playTrackv>:
    5388:	1f 93       	push	r17
    538a:	cf 93       	push	r28
    538c:	df 93       	push	r29
    538e:	cd b7       	in	r28, 0x3d	; 61
    5390:	de b7       	in	r29, 0x3e	; 62
    5392:	c5 54       	subi	r28, 0x45	; 69
    5394:	d1 09       	sbc	r29, r1
    5396:	0f b6       	in	r0, 0x3f	; 63
    5398:	f8 94       	cli
    539a:	de bf       	out	0x3e, r29	; 62
    539c:	0f be       	out	0x3f, r0	; 63
    539e:	cd bf       	out	0x3d, r28	; 61
    53a0:	0e 94 87 24 	call	0x490e	; 0x490e <_Z12checkChangesv>
    53a4:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <shift>
    53a8:	88 23       	and	r24, r24
    53aa:	81 f0       	breq	.+32     	; 0x53cc <_Z9playTrackv+0x44>
    53ac:	65 e0       	ldi	r22, 0x05	; 5
    53ae:	72 e0       	ldi	r23, 0x02	; 2
    53b0:	ce 01       	movw	r24, r28
    53b2:	85 96       	adiw	r24, 0x25	; 37
    53b4:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1EPKc>
    53b8:	ce 01       	movw	r24, r28
    53ba:	85 96       	adiw	r24, 0x25	; 37
    53bc:	0e 94 76 24 	call	0x48ec	; 0x48ec <_Z10secondLine6String>
    53c0:	ce 01       	movw	r24, r28
    53c2:	85 96       	adiw	r24, 0x25	; 37
    53c4:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    53c8:	0e 94 6f 28 	call	0x50de	; 0x50de <_Z13sig_freqShiftv>
    53cc:	40 91 59 06 	lds	r20, 0x0659	; 0x800659 <fname_temp>
    53d0:	50 91 5a 06 	lds	r21, 0x065A	; 0x80065a <fname_temp+0x1>
    53d4:	21 e0       	ldi	r18, 0x01	; 1
    53d6:	6c ef       	ldi	r22, 0xFC	; 252
    53d8:	73 e0       	ldi	r23, 0x03	; 3
    53da:	ce 01       	movw	r24, r28
    53dc:	8b 96       	adiw	r24, 0x2b	; 43
    53de:	0e 94 52 10 	call	0x20a4	; 0x20a4 <_ZN5SDLib7SDClass4openEPKch>
    53e2:	ce 01       	movw	r24, r28
    53e4:	8b 96       	adiw	r24, 0x2b	; 43
    53e6:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <_ZN5SDLib4FilecvbEv>
    53ea:	81 11       	cpse	r24, r1
    53ec:	18 c0       	rjmp	.+48     	; 0x541e <_Z9playTrackv+0x96>
    53ee:	69 ee       	ldi	r22, 0xE9	; 233
    53f0:	71 e0       	ldi	r23, 0x01	; 1
    53f2:	ce 01       	movw	r24, r28
    53f4:	4f 96       	adiw	r24, 0x1f	; 31
    53f6:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1EPKc>
    53fa:	ce 01       	movw	r24, r28
    53fc:	4f 96       	adiw	r24, 0x1f	; 31
    53fe:	0e 94 76 24 	call	0x48ec	; 0x48ec <_Z10secondLine6String>
    5402:	ce 01       	movw	r24, r28
    5404:	4f 96       	adiw	r24, 0x1f	; 31
    5406:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    540a:	2f ef       	ldi	r18, 0xFF	; 255
    540c:	83 ed       	ldi	r24, 0xD3	; 211
    540e:	90 e3       	ldi	r25, 0x30	; 48
    5410:	21 50       	subi	r18, 0x01	; 1
    5412:	80 40       	sbci	r24, 0x00	; 0
    5414:	90 40       	sbci	r25, 0x00	; 0
    5416:	e1 f7       	brne	.-8      	; 0x5410 <_Z9playTrackv+0x88>
    5418:	00 c0       	rjmp	.+0      	; 0x541a <_Z9playTrackv+0x92>
    541a:	00 00       	nop
    541c:	ba c0       	rjmp	.+372    	; 0x5592 <_Z9playTrackv+0x20a>
    541e:	4c e2       	ldi	r20, 0x2C	; 44
    5420:	50 e0       	ldi	r21, 0x00	; 0
    5422:	60 e0       	ldi	r22, 0x00	; 0
    5424:	70 e0       	ldi	r23, 0x00	; 0
    5426:	ce 01       	movw	r24, r28
    5428:	8b 96       	adiw	r24, 0x2b	; 43
    542a:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <_ZN5SDLib4File4seekEm>
    542e:	60 e1       	ldi	r22, 0x10	; 16
    5430:	72 e0       	ldi	r23, 0x02	; 2
    5432:	ce 01       	movw	r24, r28
    5434:	49 96       	adiw	r24, 0x19	; 25
    5436:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1EPKc>
    543a:	ce 01       	movw	r24, r28
    543c:	49 96       	adiw	r24, 0x19	; 25
    543e:	0e 94 50 24 	call	0x48a0	; 0x48a0 <_Z10clrDisplay6String>
    5442:	ce 01       	movw	r24, r28
    5444:	49 96       	adiw	r24, 0x19	; 25
    5446:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    544a:	69 e5       	ldi	r22, 0x59	; 89
    544c:	76 e0       	ldi	r23, 0x06	; 6
    544e:	ce 01       	movw	r24, r28
    5450:	43 96       	adiw	r24, 0x13	; 19
    5452:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN6StringC1ERKS_>
    5456:	ce 01       	movw	r24, r28
    5458:	43 96       	adiw	r24, 0x13	; 19
    545a:	0e 94 76 24 	call	0x48ec	; 0x48ec <_Z10secondLine6String>
    545e:	ce 01       	movw	r24, r28
    5460:	43 96       	adiw	r24, 0x13	; 19
    5462:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    5466:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <freqScal>
    546a:	82 30       	cpi	r24, 0x02	; 2
    546c:	c8 f4       	brcc	.+50     	; 0x54a0 <_Z9playTrackv+0x118>
    546e:	ce 01       	movw	r24, r28
    5470:	8b 96       	adiw	r24, 0x2b	; 43
    5472:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_ZN5SDLib4File9availableEv>
    5476:	89 2b       	or	r24, r25
    5478:	e1 f1       	breq	.+120    	; 0x54f2 <_Z9playTrackv+0x16a>
    547a:	ce 01       	movw	r24, r28
    547c:	8b 96       	adiw	r24, 0x2b	; 43
    547e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <_ZN5SDLib4File4readEv>
    5482:	bc 01       	movw	r22, r24
    5484:	89 e0       	ldi	r24, 0x09	; 9
    5486:	0e 94 fd 05 	call	0xbfa	; 0xbfa <analogWrite>
    548a:	25 ed       	ldi	r18, 0xD5	; 213
    548c:	2a 95       	dec	r18
    548e:	f1 f7       	brne	.-4      	; 0x548c <_Z9playTrackv+0x104>
    5490:	00 00       	nop
    5492:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z8keyInputv>
    5496:	80 37       	cpi	r24, 0x70	; 112
    5498:	51 f7       	brne	.-44     	; 0x546e <_Z9playTrackv+0xe6>
    549a:	2b c0       	rjmp	.+86     	; 0x54f2 <_Z9playTrackv+0x16a>
    549c:	11 e0       	ldi	r17, 0x01	; 1
    549e:	01 c0       	rjmp	.+2      	; 0x54a2 <_Z9playTrackv+0x11a>
    54a0:	11 e0       	ldi	r17, 0x01	; 1
    54a2:	ce 01       	movw	r24, r28
    54a4:	8b 96       	adiw	r24, 0x2b	; 43
    54a6:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_ZN5SDLib4File9availableEv>
    54aa:	89 2b       	or	r24, r25
    54ac:	11 f1       	breq	.+68     	; 0x54f2 <_Z9playTrackv+0x16a>
    54ae:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z8keyInputv>
    54b2:	80 37       	cpi	r24, 0x70	; 112
    54b4:	f1 f0       	breq	.+60     	; 0x54f2 <_Z9playTrackv+0x16a>
    54b6:	11 30       	cpi	r17, 0x01	; 1
    54b8:	69 f4       	brne	.+26     	; 0x54d4 <_Z9playTrackv+0x14c>
    54ba:	ce 01       	movw	r24, r28
    54bc:	8b 96       	adiw	r24, 0x2b	; 43
    54be:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <_ZN5SDLib4File4readEv>
    54c2:	bc 01       	movw	r22, r24
    54c4:	89 e0       	ldi	r24, 0x09	; 9
    54c6:	0e 94 fd 05 	call	0xbfa	; 0xbfa <analogWrite>
    54ca:	85 ed       	ldi	r24, 0xD5	; 213
    54cc:	8a 95       	dec	r24
    54ce:	f1 f7       	brne	.-4      	; 0x54cc <_Z9playTrackv+0x144>
    54d0:	00 00       	nop
    54d2:	04 c0       	rjmp	.+8      	; 0x54dc <_Z9playTrackv+0x154>
    54d4:	ce 01       	movw	r24, r28
    54d6:	8b 96       	adiw	r24, 0x2b	; 43
    54d8:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <_ZN5SDLib4File4readEv>
    54dc:	1f 5f       	subi	r17, 0xFF	; 255
    54de:	21 2f       	mov	r18, r17
    54e0:	30 e0       	ldi	r19, 0x00	; 0
    54e2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <freqScal>
    54e6:	90 e0       	ldi	r25, 0x00	; 0
    54e8:	01 96       	adiw	r24, 0x01	; 1
    54ea:	28 17       	cp	r18, r24
    54ec:	39 07       	cpc	r19, r25
    54ee:	c9 f6       	brne	.-78     	; 0x54a2 <_Z9playTrackv+0x11a>
    54f0:	d5 cf       	rjmp	.-86     	; 0x549c <_Z9playTrackv+0x114>
    54f2:	60 e0       	ldi	r22, 0x00	; 0
    54f4:	70 e0       	ldi	r23, 0x00	; 0
    54f6:	89 e0       	ldi	r24, 0x09	; 9
    54f8:	0e 94 fd 05 	call	0xbfa	; 0xbfa <analogWrite>
    54fc:	68 e1       	ldi	r22, 0x18	; 24
    54fe:	72 e0       	ldi	r23, 0x02	; 2
    5500:	ce 01       	movw	r24, r28
    5502:	0d 96       	adiw	r24, 0x0d	; 13
    5504:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1EPKc>
    5508:	ce 01       	movw	r24, r28
    550a:	0d 96       	adiw	r24, 0x0d	; 13
    550c:	0e 94 76 24 	call	0x48ec	; 0x48ec <_Z10secondLine6String>
    5510:	ce 01       	movw	r24, r28
    5512:	0d 96       	adiw	r24, 0x0d	; 13
    5514:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    5518:	ce 01       	movw	r24, r28
    551a:	8b 96       	adiw	r24, 0x2b	; 43
    551c:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_ZN5SDLib4File5closeEv>
    5520:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <shift>
    5524:	81 11       	cpse	r24, r1
    5526:	04 c0       	rjmp	.+8      	; 0x5530 <_Z9playTrackv+0x1a8>
    5528:	80 91 70 06 	lds	r24, 0x0670	; 0x800670 <enhance>
    552c:	88 23       	and	r24, r24
    552e:	41 f1       	breq	.+80     	; 0x5580 <_Z9playTrackv+0x1f8>
    5530:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <fcount>
    5534:	f0 e0       	ldi	r31, 0x00	; 0
    5536:	ef 59       	subi	r30, 0x9F	; 159
    5538:	f9 4f       	sbci	r31, 0xF9	; 249
    553a:	60 81       	ld	r22, Z
    553c:	ce 01       	movw	r24, r28
    553e:	01 96       	adiw	r24, 0x01	; 1
    5540:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_ZN6StringC1Ec>
    5544:	be 01       	movw	r22, r28
    5546:	6f 5f       	subi	r22, 0xFF	; 255
    5548:	7f 4f       	sbci	r23, 0xFF	; 255
    554a:	ce 01       	movw	r24, r28
    554c:	07 96       	adiw	r24, 0x07	; 7
    554e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN6StringC1ERKS_>
    5552:	6f e6       	ldi	r22, 0x6F	; 111
    5554:	72 e0       	ldi	r23, 0x02	; 2
    5556:	ce 01       	movw	r24, r28
    5558:	07 96       	adiw	r24, 0x07	; 7
    555a:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZplRK15StringSumHelperPKc>
    555e:	bc 01       	movw	r22, r24
    5560:	89 e5       	ldi	r24, 0x59	; 89
    5562:	96 e0       	ldi	r25, 0x06	; 6
    5564:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_ZN6StringaSERKS_>
    5568:	ce 01       	movw	r24, r28
    556a:	07 96       	adiw	r24, 0x07	; 7
    556c:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    5570:	ce 01       	movw	r24, r28
    5572:	01 96       	adiw	r24, 0x01	; 1
    5574:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    5578:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <shift>
    557c:	10 92 70 06 	sts	0x0670, r1	; 0x800670 <enhance>
    5580:	9f ef       	ldi	r25, 0xFF	; 255
    5582:	23 ed       	ldi	r18, 0xD3	; 211
    5584:	80 e3       	ldi	r24, 0x30	; 48
    5586:	91 50       	subi	r25, 0x01	; 1
    5588:	20 40       	sbci	r18, 0x00	; 0
    558a:	80 40       	sbci	r24, 0x00	; 0
    558c:	e1 f7       	brne	.-8      	; 0x5586 <_Z9playTrackv+0x1fe>
    558e:	00 c0       	rjmp	.+0      	; 0x5590 <_Z9playTrackv+0x208>
    5590:	00 00       	nop
    5592:	cb 5b       	subi	r28, 0xBB	; 187
    5594:	df 4f       	sbci	r29, 0xFF	; 255
    5596:	0f b6       	in	r0, 0x3f	; 63
    5598:	f8 94       	cli
    559a:	de bf       	out	0x3e, r29	; 62
    559c:	0f be       	out	0x3f, r0	; 63
    559e:	cd bf       	out	0x3d, r28	; 61
    55a0:	df 91       	pop	r29
    55a2:	cf 91       	pop	r28
    55a4:	1f 91       	pop	r17
    55a6:	08 95       	ret

000055a8 <main>:
    55a8:	cf 93       	push	r28
    55aa:	df 93       	push	r29
    55ac:	cd b7       	in	r28, 0x3d	; 61
    55ae:	de b7       	in	r29, 0x3e	; 62
    55b0:	c6 56       	subi	r28, 0x66	; 102
    55b2:	d1 09       	sbc	r29, r1
    55b4:	0f b6       	in	r0, 0x3f	; 63
    55b6:	f8 94       	cli
    55b8:	de bf       	out	0x3e, r29	; 62
    55ba:	0f be       	out	0x3f, r0	; 63
    55bc:	cd bf       	out	0x3d, r28	; 61
    55be:	ea e7       	ldi	r30, 0x7A	; 122
    55c0:	f0 e0       	ldi	r31, 0x00	; 0
    55c2:	80 81       	ld	r24, Z
    55c4:	8b 7f       	andi	r24, 0xFB	; 251
    55c6:	80 83       	st	Z, r24
    55c8:	80 81       	ld	r24, Z
    55ca:	82 60       	ori	r24, 0x02	; 2
    55cc:	80 83       	st	Z, r24
    55ce:	80 81       	ld	r24, Z
    55d0:	81 60       	ori	r24, 0x01	; 1
    55d2:	80 83       	st	Z, r24
    55d4:	1a b8       	out	0x0a, r1	; 10
    55d6:	8f ef       	ldi	r24, 0xFF	; 255
    55d8:	8b b9       	out	0x0b, r24	; 11
    55da:	60 e0       	ldi	r22, 0x00	; 0
    55dc:	8e e0       	ldi	r24, 0x0E	; 14
    55de:	0e 94 95 06 	call	0xd2a	; 0xd2a <pinMode>
    55e2:	60 e0       	ldi	r22, 0x00	; 0
    55e4:	81 e1       	ldi	r24, 0x11	; 17
    55e6:	0e 94 95 06 	call	0xd2a	; 0xd2a <pinMode>
    55ea:	60 e0       	ldi	r22, 0x00	; 0
    55ec:	8f e0       	ldi	r24, 0x0F	; 15
    55ee:	0e 94 95 06 	call	0xd2a	; 0xd2a <pinMode>
    55f2:	61 e0       	ldi	r22, 0x01	; 1
    55f4:	89 e0       	ldi	r24, 0x09	; 9
    55f6:	0e 94 95 06 	call	0xd2a	; 0xd2a <pinMode>
    55fa:	61 e0       	ldi	r22, 0x01	; 1
    55fc:	70 e0       	ldi	r23, 0x00	; 0
    55fe:	89 e0       	ldi	r24, 0x09	; 9
    5600:	90 e0       	ldi	r25, 0x00	; 0
    5602:	0e 94 05 28 	call	0x500a	; 0x500a <_Z15setPwmFrequencyii>
    5606:	81 e5       	ldi	r24, 0x51	; 81
    5608:	96 e0       	ldi	r25, 0x06	; 6
    560a:	0e 94 9a 23 	call	0x4734	; 0x4734 <_ZN9LCDScreen5beginEv>
    560e:	6a e0       	ldi	r22, 0x0A	; 10
    5610:	8c ef       	ldi	r24, 0xFC	; 252
    5612:	93 e0       	ldi	r25, 0x03	; 3
    5614:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <_ZN5SDLib7SDClass5beginEh>
    5618:	81 11       	cpse	r24, r1
    561a:	12 c0       	rjmp	.+36     	; 0x5640 <main+0x98>
    561c:	69 ee       	ldi	r22, 0xE9	; 233
    561e:	71 e0       	ldi	r23, 0x01	; 1
    5620:	ce 01       	movw	r24, r28
    5622:	8f 59       	subi	r24, 0x9F	; 159
    5624:	9f 4f       	sbci	r25, 0xFF	; 255
    5626:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1EPKc>
    562a:	ce 01       	movw	r24, r28
    562c:	8f 59       	subi	r24, 0x9F	; 159
    562e:	9f 4f       	sbci	r25, 0xFF	; 255
    5630:	0e 94 50 24 	call	0x48a0	; 0x48a0 <_Z10clrDisplay6String>
    5634:	ce 01       	movw	r24, r28
    5636:	8f 59       	subi	r24, 0x9F	; 159
    5638:	9f 4f       	sbci	r25, 0xFF	; 255
    563a:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    563e:	ff cf       	rjmp	.-2      	; 0x563e <main+0x96>
    5640:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <_Z12getTrackListv>
    5644:	2f ef       	ldi	r18, 0xFF	; 255
    5646:	83 ed       	ldi	r24, 0xD3	; 211
    5648:	90 e3       	ldi	r25, 0x30	; 48
    564a:	21 50       	subi	r18, 0x01	; 1
    564c:	80 40       	sbci	r24, 0x00	; 0
    564e:	90 40       	sbci	r25, 0x00	; 0
    5650:	e1 f7       	brne	.-8      	; 0x564a <main+0xa2>
    5652:	00 c0       	rjmp	.+0      	; 0x5654 <main+0xac>
    5654:	00 00       	nop
    5656:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z8keyInputv>
    565a:	81 11       	cpse	r24, r1
    565c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mode>
    5660:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mode>
    5664:	83 37       	cpi	r24, 0x73	; 115
    5666:	59 f4       	brne	.+22     	; 0x567e <main+0xd6>
    5668:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mode_>
    566c:	8a 36       	cpi	r24, 0x6A	; 106
    566e:	39 f4       	brne	.+14     	; 0x567e <main+0xd6>
    5670:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <_Z6recordv>
    5674:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <_Z12getTrackListv>
    5678:	89 e6       	ldi	r24, 0x69	; 105
    567a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mode>
    567e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mode>
    5682:	80 37       	cpi	r24, 0x70	; 112
    5684:	09 f0       	breq	.+2      	; 0x5688 <main+0xe0>
    5686:	81 c0       	rjmp	.+258    	; 0x578a <main+0x1e2>
    5688:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mode_>
    568c:	8a 36       	cpi	r24, 0x6A	; 106
    568e:	09 f0       	breq	.+2      	; 0x5692 <main+0xea>
    5690:	7c c0       	rjmp	.+248    	; 0x578a <main+0x1e2>
    5692:	8b e6       	ldi	r24, 0x6B	; 107
    5694:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mode_>
    5698:	89 e6       	ldi	r24, 0x69	; 105
    569a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mode>
    569e:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <files>
    56a2:	81 11       	cpse	r24, r1
    56a4:	1e c0       	rjmp	.+60     	; 0x56e2 <main+0x13a>
    56a6:	8a e6       	ldi	r24, 0x6A	; 106
    56a8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mode_>
    56ac:	64 e2       	ldi	r22, 0x24	; 36
    56ae:	72 e0       	ldi	r23, 0x02	; 2
    56b0:	ce 01       	movw	r24, r28
    56b2:	85 5a       	subi	r24, 0xA5	; 165
    56b4:	9f 4f       	sbci	r25, 0xFF	; 255
    56b6:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1EPKc>
    56ba:	ce 01       	movw	r24, r28
    56bc:	85 5a       	subi	r24, 0xA5	; 165
    56be:	9f 4f       	sbci	r25, 0xFF	; 255
    56c0:	0e 94 50 24 	call	0x48a0	; 0x48a0 <_Z10clrDisplay6String>
    56c4:	ce 01       	movw	r24, r28
    56c6:	85 5a       	subi	r24, 0xA5	; 165
    56c8:	9f 4f       	sbci	r25, 0xFF	; 255
    56ca:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    56ce:	2f ef       	ldi	r18, 0xFF	; 255
    56d0:	83 ed       	ldi	r24, 0xD3	; 211
    56d2:	90 e3       	ldi	r25, 0x30	; 48
    56d4:	21 50       	subi	r18, 0x01	; 1
    56d6:	80 40       	sbci	r24, 0x00	; 0
    56d8:	90 40       	sbci	r25, 0x00	; 0
    56da:	e1 f7       	brne	.-8      	; 0x56d4 <main+0x12c>
    56dc:	00 c0       	rjmp	.+0      	; 0x56de <main+0x136>
    56de:	00 00       	nop
    56e0:	54 c0       	rjmp	.+168    	; 0x578a <main+0x1e2>
    56e2:	6e e2       	ldi	r22, 0x2E	; 46
    56e4:	72 e0       	ldi	r23, 0x02	; 2
    56e6:	ce 01       	movw	r24, r28
    56e8:	8b 5a       	subi	r24, 0xAB	; 171
    56ea:	9f 4f       	sbci	r25, 0xFF	; 255
    56ec:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1EPKc>
    56f0:	ce 01       	movw	r24, r28
    56f2:	8b 5a       	subi	r24, 0xAB	; 171
    56f4:	9f 4f       	sbci	r25, 0xFF	; 255
    56f6:	0e 94 50 24 	call	0x48a0	; 0x48a0 <_Z10clrDisplay6String>
    56fa:	ce 01       	movw	r24, r28
    56fc:	8b 5a       	subi	r24, 0xAB	; 171
    56fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5700:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    5704:	2f ef       	ldi	r18, 0xFF	; 255
    5706:	83 ed       	ldi	r24, 0xD3	; 211
    5708:	90 e3       	ldi	r25, 0x30	; 48
    570a:	21 50       	subi	r18, 0x01	; 1
    570c:	80 40       	sbci	r24, 0x00	; 0
    570e:	90 40       	sbci	r25, 0x00	; 0
    5710:	e1 f7       	brne	.-8      	; 0x570a <main+0x162>
    5712:	00 c0       	rjmp	.+0      	; 0x5714 <main+0x16c>
    5714:	00 00       	nop
    5716:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <fcount>
    571a:	f0 e0       	ldi	r31, 0x00	; 0
    571c:	ef 59       	subi	r30, 0x9F	; 159
    571e:	f9 4f       	sbci	r31, 0xF9	; 249
    5720:	60 81       	ld	r22, Z
    5722:	ce 01       	movw	r24, r28
    5724:	87 5b       	subi	r24, 0xB7	; 183
    5726:	9f 4f       	sbci	r25, 0xFF	; 255
    5728:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_ZN6StringC1Ec>
    572c:	be 01       	movw	r22, r28
    572e:	67 5b       	subi	r22, 0xB7	; 183
    5730:	7f 4f       	sbci	r23, 0xFF	; 255
    5732:	ce 01       	movw	r24, r28
    5734:	81 5b       	subi	r24, 0xB1	; 177
    5736:	9f 4f       	sbci	r25, 0xFF	; 255
    5738:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN6StringC1ERKS_>
    573c:	6f e6       	ldi	r22, 0x6F	; 111
    573e:	72 e0       	ldi	r23, 0x02	; 2
    5740:	ce 01       	movw	r24, r28
    5742:	81 5b       	subi	r24, 0xB1	; 177
    5744:	9f 4f       	sbci	r25, 0xFF	; 255
    5746:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZplRK15StringSumHelperPKc>
    574a:	bc 01       	movw	r22, r24
    574c:	89 e5       	ldi	r24, 0x59	; 89
    574e:	96 e0       	ldi	r25, 0x06	; 6
    5750:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_ZN6StringaSERKS_>
    5754:	ce 01       	movw	r24, r28
    5756:	81 5b       	subi	r24, 0xB1	; 177
    5758:	9f 4f       	sbci	r25, 0xFF	; 255
    575a:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    575e:	ce 01       	movw	r24, r28
    5760:	87 5b       	subi	r24, 0xB7	; 183
    5762:	9f 4f       	sbci	r25, 0xFF	; 255
    5764:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    5768:	69 e5       	ldi	r22, 0x59	; 89
    576a:	76 e0       	ldi	r23, 0x06	; 6
    576c:	ce 01       	movw	r24, r28
    576e:	8d 5b       	subi	r24, 0xBD	; 189
    5770:	9f 4f       	sbci	r25, 0xFF	; 255
    5772:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN6StringC1ERKS_>
    5776:	ce 01       	movw	r24, r28
    5778:	8d 5b       	subi	r24, 0xBD	; 189
    577a:	9f 4f       	sbci	r25, 0xFF	; 255
    577c:	0e 94 76 24 	call	0x48ec	; 0x48ec <_Z10secondLine6String>
    5780:	ce 01       	movw	r24, r28
    5782:	8d 5b       	subi	r24, 0xBD	; 189
    5784:	9f 4f       	sbci	r25, 0xFF	; 255
    5786:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    578a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mode_>
    578e:	8b 36       	cpi	r24, 0x6B	; 107
    5790:	09 f0       	breq	.+2      	; 0x5794 <main+0x1ec>
    5792:	f6 c0       	rjmp	.+492    	; 0x5980 <main+0x3d8>
    5794:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mode>
    5798:	80 37       	cpi	r24, 0x70	; 112
    579a:	41 f5       	brne	.+80     	; 0x57ec <main+0x244>
    579c:	0e 94 c4 29 	call	0x5388	; 0x5388 <_Z9playTrackv>
    57a0:	6e e2       	ldi	r22, 0x2E	; 46
    57a2:	72 e0       	ldi	r23, 0x02	; 2
    57a4:	ce 01       	movw	r24, r28
    57a6:	cd 96       	adiw	r24, 0x3d	; 61
    57a8:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1EPKc>
    57ac:	ce 01       	movw	r24, r28
    57ae:	cd 96       	adiw	r24, 0x3d	; 61
    57b0:	0e 94 50 24 	call	0x48a0	; 0x48a0 <_Z10clrDisplay6String>
    57b4:	ce 01       	movw	r24, r28
    57b6:	cd 96       	adiw	r24, 0x3d	; 61
    57b8:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    57bc:	2f ef       	ldi	r18, 0xFF	; 255
    57be:	83 ec       	ldi	r24, 0xC3	; 195
    57c0:	99 e0       	ldi	r25, 0x09	; 9
    57c2:	21 50       	subi	r18, 0x01	; 1
    57c4:	80 40       	sbci	r24, 0x00	; 0
    57c6:	90 40       	sbci	r25, 0x00	; 0
    57c8:	e1 f7       	brne	.-8      	; 0x57c2 <main+0x21a>
    57ca:	00 c0       	rjmp	.+0      	; 0x57cc <main+0x224>
    57cc:	00 00       	nop
    57ce:	69 e5       	ldi	r22, 0x59	; 89
    57d0:	76 e0       	ldi	r23, 0x06	; 6
    57d2:	ce 01       	movw	r24, r28
    57d4:	c7 96       	adiw	r24, 0x37	; 55
    57d6:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN6StringC1ERKS_>
    57da:	ce 01       	movw	r24, r28
    57dc:	c7 96       	adiw	r24, 0x37	; 55
    57de:	0e 94 76 24 	call	0x48ec	; 0x48ec <_Z10secondLine6String>
    57e2:	ce 01       	movw	r24, r28
    57e4:	c7 96       	adiw	r24, 0x37	; 55
    57e6:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    57ea:	c7 c0       	rjmp	.+398    	; 0x597a <main+0x3d2>
    57ec:	8e 33       	cpi	r24, 0x3E	; 62
    57ee:	19 f4       	brne	.+6      	; 0x57f6 <main+0x24e>
    57f0:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <_Z9nextTrackv>
    57f4:	c2 c0       	rjmp	.+388    	; 0x597a <main+0x3d2>
    57f6:	8c 33       	cpi	r24, 0x3C	; 60
    57f8:	19 f4       	brne	.+6      	; 0x5800 <main+0x258>
    57fa:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <_Z13previousTrackv>
    57fe:	bd c0       	rjmp	.+378    	; 0x597a <main+0x3d2>
    5800:	83 37       	cpi	r24, 0x73	; 115
    5802:	21 f4       	brne	.+8      	; 0x580c <main+0x264>
    5804:	8a e6       	ldi	r24, 0x6A	; 106
    5806:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mode_>
    580a:	b7 c0       	rjmp	.+366    	; 0x597a <main+0x3d2>
    580c:	84 36       	cpi	r24, 0x64	; 100
    580e:	09 f0       	breq	.+2      	; 0x5812 <main+0x26a>
    5810:	b4 c0       	rjmp	.+360    	; 0x597a <main+0x3d2>
    5812:	6c e3       	ldi	r22, 0x3C	; 60
    5814:	72 e0       	ldi	r23, 0x02	; 2
    5816:	ce 01       	movw	r24, r28
    5818:	c1 96       	adiw	r24, 0x31	; 49
    581a:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1EPKc>
    581e:	ce 01       	movw	r24, r28
    5820:	c1 96       	adiw	r24, 0x31	; 49
    5822:	0e 94 50 24 	call	0x48a0	; 0x48a0 <_Z10clrDisplay6String>
    5826:	ce 01       	movw	r24, r28
    5828:	c1 96       	adiw	r24, 0x31	; 49
    582a:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    582e:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z8keyInputv>
    5832:	84 36       	cpi	r24, 0x64	; 100
    5834:	11 f5       	brne	.+68     	; 0x587a <main+0x2d2>
    5836:	60 91 59 06 	lds	r22, 0x0659	; 0x800659 <fname_temp>
    583a:	70 91 5a 06 	lds	r23, 0x065A	; 0x80065a <fname_temp+0x1>
    583e:	8c ef       	ldi	r24, 0xFC	; 252
    5840:	93 e0       	ldi	r25, 0x03	; 3
    5842:	0e 94 75 11 	call	0x22ea	; 0x22ea <_ZN5SDLib7SDClass6removeEPKc>
    5846:	68 e4       	ldi	r22, 0x48	; 72
    5848:	72 e0       	ldi	r23, 0x02	; 2
    584a:	ce 01       	movw	r24, r28
    584c:	8b 96       	adiw	r24, 0x2b	; 43
    584e:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1EPKc>
    5852:	ce 01       	movw	r24, r28
    5854:	8b 96       	adiw	r24, 0x2b	; 43
    5856:	0e 94 50 24 	call	0x48a0	; 0x48a0 <_Z10clrDisplay6String>
    585a:	ce 01       	movw	r24, r28
    585c:	8b 96       	adiw	r24, 0x2b	; 43
    585e:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    5862:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <_Z12getTrackListv>
    5866:	2f ef       	ldi	r18, 0xFF	; 255
    5868:	83 ed       	ldi	r24, 0xD3	; 211
    586a:	90 e3       	ldi	r25, 0x30	; 48
    586c:	21 50       	subi	r18, 0x01	; 1
    586e:	80 40       	sbci	r24, 0x00	; 0
    5870:	90 40       	sbci	r25, 0x00	; 0
    5872:	e1 f7       	brne	.-8      	; 0x586c <main+0x2c4>
    5874:	00 c0       	rjmp	.+0      	; 0x5876 <main+0x2ce>
    5876:	00 00       	nop
    5878:	19 c0       	rjmp	.+50     	; 0x58ac <main+0x304>
    587a:	80 37       	cpi	r24, 0x70	; 112
    587c:	c1 f6       	brne	.-80     	; 0x582e <main+0x286>
    587e:	64 e4       	ldi	r22, 0x44	; 68
    5880:	72 e0       	ldi	r23, 0x02	; 2
    5882:	ce 01       	movw	r24, r28
    5884:	85 96       	adiw	r24, 0x25	; 37
    5886:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1EPKc>
    588a:	ce 01       	movw	r24, r28
    588c:	85 96       	adiw	r24, 0x25	; 37
    588e:	0e 94 50 24 	call	0x48a0	; 0x48a0 <_Z10clrDisplay6String>
    5892:	ce 01       	movw	r24, r28
    5894:	85 96       	adiw	r24, 0x25	; 37
    5896:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    589a:	2f ef       	ldi	r18, 0xFF	; 255
    589c:	83 ed       	ldi	r24, 0xD3	; 211
    589e:	90 e3       	ldi	r25, 0x30	; 48
    58a0:	21 50       	subi	r18, 0x01	; 1
    58a2:	80 40       	sbci	r24, 0x00	; 0
    58a4:	90 40       	sbci	r25, 0x00	; 0
    58a6:	e1 f7       	brne	.-8      	; 0x58a0 <main+0x2f8>
    58a8:	00 c0       	rjmp	.+0      	; 0x58aa <main+0x302>
    58aa:	00 00       	nop
    58ac:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <files>
    58b0:	81 11       	cpse	r24, r1
    58b2:	1a c0       	rjmp	.+52     	; 0x58e8 <main+0x340>
    58b4:	64 e2       	ldi	r22, 0x24	; 36
    58b6:	72 e0       	ldi	r23, 0x02	; 2
    58b8:	ce 01       	movw	r24, r28
    58ba:	4f 96       	adiw	r24, 0x1f	; 31
    58bc:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1EPKc>
    58c0:	ce 01       	movw	r24, r28
    58c2:	4f 96       	adiw	r24, 0x1f	; 31
    58c4:	0e 94 50 24 	call	0x48a0	; 0x48a0 <_Z10clrDisplay6String>
    58c8:	ce 01       	movw	r24, r28
    58ca:	4f 96       	adiw	r24, 0x1f	; 31
    58cc:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    58d0:	2f ef       	ldi	r18, 0xFF	; 255
    58d2:	83 ed       	ldi	r24, 0xD3	; 211
    58d4:	90 e3       	ldi	r25, 0x30	; 48
    58d6:	21 50       	subi	r18, 0x01	; 1
    58d8:	80 40       	sbci	r24, 0x00	; 0
    58da:	90 40       	sbci	r25, 0x00	; 0
    58dc:	e1 f7       	brne	.-8      	; 0x58d6 <main+0x32e>
    58de:	00 c0       	rjmp	.+0      	; 0x58e0 <main+0x338>
    58e0:	00 00       	nop
    58e2:	8a e6       	ldi	r24, 0x6A	; 106
    58e4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mode_>
    58e8:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <fcount>
    58ec:	90 91 60 06 	lds	r25, 0x0660	; 0x800660 <files>
    58f0:	89 13       	cpse	r24, r25
    58f2:	03 c0       	rjmp	.+6      	; 0x58fa <main+0x352>
    58f4:	81 50       	subi	r24, 0x01	; 1
    58f6:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <fcount>
    58fa:	6e e2       	ldi	r22, 0x2E	; 46
    58fc:	72 e0       	ldi	r23, 0x02	; 2
    58fe:	ce 01       	movw	r24, r28
    5900:	49 96       	adiw	r24, 0x19	; 25
    5902:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1EPKc>
    5906:	ce 01       	movw	r24, r28
    5908:	49 96       	adiw	r24, 0x19	; 25
    590a:	0e 94 50 24 	call	0x48a0	; 0x48a0 <_Z10clrDisplay6String>
    590e:	ce 01       	movw	r24, r28
    5910:	49 96       	adiw	r24, 0x19	; 25
    5912:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    5916:	e0 91 5f 06 	lds	r30, 0x065F	; 0x80065f <fcount>
    591a:	f0 e0       	ldi	r31, 0x00	; 0
    591c:	ef 59       	subi	r30, 0x9F	; 159
    591e:	f9 4f       	sbci	r31, 0xF9	; 249
    5920:	60 81       	ld	r22, Z
    5922:	ce 01       	movw	r24, r28
    5924:	0d 96       	adiw	r24, 0x0d	; 13
    5926:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_ZN6StringC1Ec>
    592a:	be 01       	movw	r22, r28
    592c:	63 5f       	subi	r22, 0xF3	; 243
    592e:	7f 4f       	sbci	r23, 0xFF	; 255
    5930:	ce 01       	movw	r24, r28
    5932:	43 96       	adiw	r24, 0x13	; 19
    5934:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN6StringC1ERKS_>
    5938:	6f e6       	ldi	r22, 0x6F	; 111
    593a:	72 e0       	ldi	r23, 0x02	; 2
    593c:	ce 01       	movw	r24, r28
    593e:	43 96       	adiw	r24, 0x13	; 19
    5940:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZplRK15StringSumHelperPKc>
    5944:	bc 01       	movw	r22, r24
    5946:	89 e5       	ldi	r24, 0x59	; 89
    5948:	96 e0       	ldi	r25, 0x06	; 6
    594a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <_ZN6StringaSERKS_>
    594e:	ce 01       	movw	r24, r28
    5950:	43 96       	adiw	r24, 0x13	; 19
    5952:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    5956:	ce 01       	movw	r24, r28
    5958:	0d 96       	adiw	r24, 0x0d	; 13
    595a:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    595e:	69 e5       	ldi	r22, 0x59	; 89
    5960:	76 e0       	ldi	r23, 0x06	; 6
    5962:	ce 01       	movw	r24, r28
    5964:	07 96       	adiw	r24, 0x07	; 7
    5966:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN6StringC1ERKS_>
    596a:	ce 01       	movw	r24, r28
    596c:	07 96       	adiw	r24, 0x07	; 7
    596e:	0e 94 76 24 	call	0x48ec	; 0x48ec <_Z10secondLine6String>
    5972:	ce 01       	movw	r24, r28
    5974:	07 96       	adiw	r24, 0x07	; 7
    5976:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    597a:	89 e6       	ldi	r24, 0x69	; 105
    597c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mode>
    5980:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <mode>
    5984:	89 36       	cpi	r24, 0x69	; 105
    5986:	09 f0       	breq	.+2      	; 0x598a <main+0x3e2>
    5988:	66 ce       	rjmp	.-820    	; 0x5656 <main+0xae>
    598a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mode_>
    598e:	8a 36       	cpi	r24, 0x6A	; 106
    5990:	09 f0       	breq	.+2      	; 0x5994 <main+0x3ec>
    5992:	61 ce       	rjmp	.-830    	; 0x5656 <main+0xae>
    5994:	60 e5       	ldi	r22, 0x50	; 80
    5996:	72 e0       	ldi	r23, 0x02	; 2
    5998:	ce 01       	movw	r24, r28
    599a:	01 96       	adiw	r24, 0x01	; 1
    599c:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1EPKc>
    59a0:	ce 01       	movw	r24, r28
    59a2:	01 96       	adiw	r24, 0x01	; 1
    59a4:	0e 94 50 24 	call	0x48a0	; 0x48a0 <_Z10clrDisplay6String>
    59a8:	ce 01       	movw	r24, r28
    59aa:	01 96       	adiw	r24, 0x01	; 1
    59ac:	0e 94 05 07 	call	0xe0a	; 0xe0a <_ZN6StringD1Ev>
    59b0:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z8keyInputv>
    59b4:	88 23       	and	r24, r24
    59b6:	e1 f3       	breq	.-8      	; 0x59b0 <main+0x408>
    59b8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mode>
    59bc:	4c ce       	rjmp	.-872    	; 0x5656 <main+0xae>

000059be <_GLOBAL__sub_I_mode>:
    59be:	6f ef       	ldi	r22, 0xFF	; 255
    59c0:	7f ef       	ldi	r23, 0xFF	; 255
    59c2:	81 e0       	ldi	r24, 0x01	; 1
    59c4:	90 e0       	ldi	r25, 0x00	; 0
    59c6:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <_Z41__static_initialization_and_destruction_0ii>
    59ca:	08 95       	ret

000059cc <_GLOBAL__sub_D_mode>:
    59cc:	6f ef       	ldi	r22, 0xFF	; 255
    59ce:	7f ef       	ldi	r23, 0xFF	; 255
    59d0:	80 e0       	ldi	r24, 0x00	; 0
    59d2:	90 e0       	ldi	r25, 0x00	; 0
    59d4:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <_Z41__static_initialization_and_destruction_0ii>
    59d8:	08 95       	ret

000059da <__fixunssfsi>:
    59da:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__fp_splitA>
    59de:	88 f0       	brcs	.+34     	; 0x5a02 <__fixunssfsi+0x28>
    59e0:	9f 57       	subi	r25, 0x7F	; 127
    59e2:	98 f0       	brcs	.+38     	; 0x5a0a <__fixunssfsi+0x30>
    59e4:	b9 2f       	mov	r27, r25
    59e6:	99 27       	eor	r25, r25
    59e8:	b7 51       	subi	r27, 0x17	; 23
    59ea:	b0 f0       	brcs	.+44     	; 0x5a18 <__fixunssfsi+0x3e>
    59ec:	e1 f0       	breq	.+56     	; 0x5a26 <__fixunssfsi+0x4c>
    59ee:	66 0f       	add	r22, r22
    59f0:	77 1f       	adc	r23, r23
    59f2:	88 1f       	adc	r24, r24
    59f4:	99 1f       	adc	r25, r25
    59f6:	1a f0       	brmi	.+6      	; 0x59fe <__fixunssfsi+0x24>
    59f8:	ba 95       	dec	r27
    59fa:	c9 f7       	brne	.-14     	; 0x59ee <__fixunssfsi+0x14>
    59fc:	14 c0       	rjmp	.+40     	; 0x5a26 <__fixunssfsi+0x4c>
    59fe:	b1 30       	cpi	r27, 0x01	; 1
    5a00:	91 f0       	breq	.+36     	; 0x5a26 <__fixunssfsi+0x4c>
    5a02:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <__fp_zero>
    5a06:	b1 e0       	ldi	r27, 0x01	; 1
    5a08:	08 95       	ret
    5a0a:	0c 94 a3 2d 	jmp	0x5b46	; 0x5b46 <__fp_zero>
    5a0e:	67 2f       	mov	r22, r23
    5a10:	78 2f       	mov	r23, r24
    5a12:	88 27       	eor	r24, r24
    5a14:	b8 5f       	subi	r27, 0xF8	; 248
    5a16:	39 f0       	breq	.+14     	; 0x5a26 <__fixunssfsi+0x4c>
    5a18:	b9 3f       	cpi	r27, 0xF9	; 249
    5a1a:	cc f3       	brlt	.-14     	; 0x5a0e <__fixunssfsi+0x34>
    5a1c:	86 95       	lsr	r24
    5a1e:	77 95       	ror	r23
    5a20:	67 95       	ror	r22
    5a22:	b3 95       	inc	r27
    5a24:	d9 f7       	brne	.-10     	; 0x5a1c <__fixunssfsi+0x42>
    5a26:	3e f4       	brtc	.+14     	; 0x5a36 <__fixunssfsi+0x5c>
    5a28:	90 95       	com	r25
    5a2a:	80 95       	com	r24
    5a2c:	70 95       	com	r23
    5a2e:	61 95       	neg	r22
    5a30:	7f 4f       	sbci	r23, 0xFF	; 255
    5a32:	8f 4f       	sbci	r24, 0xFF	; 255
    5a34:	9f 4f       	sbci	r25, 0xFF	; 255
    5a36:	08 95       	ret

00005a38 <__floatunsisf>:
    5a38:	e8 94       	clt
    5a3a:	09 c0       	rjmp	.+18     	; 0x5a4e <__floatsisf+0x12>

00005a3c <__floatsisf>:
    5a3c:	97 fb       	bst	r25, 7
    5a3e:	3e f4       	brtc	.+14     	; 0x5a4e <__floatsisf+0x12>
    5a40:	90 95       	com	r25
    5a42:	80 95       	com	r24
    5a44:	70 95       	com	r23
    5a46:	61 95       	neg	r22
    5a48:	7f 4f       	sbci	r23, 0xFF	; 255
    5a4a:	8f 4f       	sbci	r24, 0xFF	; 255
    5a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a4e:	99 23       	and	r25, r25
    5a50:	a9 f0       	breq	.+42     	; 0x5a7c <__floatsisf+0x40>
    5a52:	f9 2f       	mov	r31, r25
    5a54:	96 e9       	ldi	r25, 0x96	; 150
    5a56:	bb 27       	eor	r27, r27
    5a58:	93 95       	inc	r25
    5a5a:	f6 95       	lsr	r31
    5a5c:	87 95       	ror	r24
    5a5e:	77 95       	ror	r23
    5a60:	67 95       	ror	r22
    5a62:	b7 95       	ror	r27
    5a64:	f1 11       	cpse	r31, r1
    5a66:	f8 cf       	rjmp	.-16     	; 0x5a58 <__floatsisf+0x1c>
    5a68:	fa f4       	brpl	.+62     	; 0x5aa8 <__floatsisf+0x6c>
    5a6a:	bb 0f       	add	r27, r27
    5a6c:	11 f4       	brne	.+4      	; 0x5a72 <__floatsisf+0x36>
    5a6e:	60 ff       	sbrs	r22, 0
    5a70:	1b c0       	rjmp	.+54     	; 0x5aa8 <__floatsisf+0x6c>
    5a72:	6f 5f       	subi	r22, 0xFF	; 255
    5a74:	7f 4f       	sbci	r23, 0xFF	; 255
    5a76:	8f 4f       	sbci	r24, 0xFF	; 255
    5a78:	9f 4f       	sbci	r25, 0xFF	; 255
    5a7a:	16 c0       	rjmp	.+44     	; 0x5aa8 <__floatsisf+0x6c>
    5a7c:	88 23       	and	r24, r24
    5a7e:	11 f0       	breq	.+4      	; 0x5a84 <__floatsisf+0x48>
    5a80:	96 e9       	ldi	r25, 0x96	; 150
    5a82:	11 c0       	rjmp	.+34     	; 0x5aa6 <__floatsisf+0x6a>
    5a84:	77 23       	and	r23, r23
    5a86:	21 f0       	breq	.+8      	; 0x5a90 <__floatsisf+0x54>
    5a88:	9e e8       	ldi	r25, 0x8E	; 142
    5a8a:	87 2f       	mov	r24, r23
    5a8c:	76 2f       	mov	r23, r22
    5a8e:	05 c0       	rjmp	.+10     	; 0x5a9a <__floatsisf+0x5e>
    5a90:	66 23       	and	r22, r22
    5a92:	71 f0       	breq	.+28     	; 0x5ab0 <__floatsisf+0x74>
    5a94:	96 e8       	ldi	r25, 0x86	; 134
    5a96:	86 2f       	mov	r24, r22
    5a98:	70 e0       	ldi	r23, 0x00	; 0
    5a9a:	60 e0       	ldi	r22, 0x00	; 0
    5a9c:	2a f0       	brmi	.+10     	; 0x5aa8 <__floatsisf+0x6c>
    5a9e:	9a 95       	dec	r25
    5aa0:	66 0f       	add	r22, r22
    5aa2:	77 1f       	adc	r23, r23
    5aa4:	88 1f       	adc	r24, r24
    5aa6:	da f7       	brpl	.-10     	; 0x5a9e <__floatsisf+0x62>
    5aa8:	88 0f       	add	r24, r24
    5aaa:	96 95       	lsr	r25
    5aac:	87 95       	ror	r24
    5aae:	97 f9       	bld	r25, 7
    5ab0:	08 95       	ret

00005ab2 <__fp_inf>:
    5ab2:	97 f9       	bld	r25, 7
    5ab4:	9f 67       	ori	r25, 0x7F	; 127
    5ab6:	80 e8       	ldi	r24, 0x80	; 128
    5ab8:	70 e0       	ldi	r23, 0x00	; 0
    5aba:	60 e0       	ldi	r22, 0x00	; 0
    5abc:	08 95       	ret

00005abe <__fp_nan>:
    5abe:	9f ef       	ldi	r25, 0xFF	; 255
    5ac0:	80 ec       	ldi	r24, 0xC0	; 192
    5ac2:	08 95       	ret

00005ac4 <__fp_pscA>:
    5ac4:	00 24       	eor	r0, r0
    5ac6:	0a 94       	dec	r0
    5ac8:	16 16       	cp	r1, r22
    5aca:	17 06       	cpc	r1, r23
    5acc:	18 06       	cpc	r1, r24
    5ace:	09 06       	cpc	r0, r25
    5ad0:	08 95       	ret

00005ad2 <__fp_pscB>:
    5ad2:	00 24       	eor	r0, r0
    5ad4:	0a 94       	dec	r0
    5ad6:	12 16       	cp	r1, r18
    5ad8:	13 06       	cpc	r1, r19
    5ada:	14 06       	cpc	r1, r20
    5adc:	05 06       	cpc	r0, r21
    5ade:	08 95       	ret

00005ae0 <__fp_round>:
    5ae0:	09 2e       	mov	r0, r25
    5ae2:	03 94       	inc	r0
    5ae4:	00 0c       	add	r0, r0
    5ae6:	11 f4       	brne	.+4      	; 0x5aec <__fp_round+0xc>
    5ae8:	88 23       	and	r24, r24
    5aea:	52 f0       	brmi	.+20     	; 0x5b00 <__fp_round+0x20>
    5aec:	bb 0f       	add	r27, r27
    5aee:	40 f4       	brcc	.+16     	; 0x5b00 <__fp_round+0x20>
    5af0:	bf 2b       	or	r27, r31
    5af2:	11 f4       	brne	.+4      	; 0x5af8 <__fp_round+0x18>
    5af4:	60 ff       	sbrs	r22, 0
    5af6:	04 c0       	rjmp	.+8      	; 0x5b00 <__fp_round+0x20>
    5af8:	6f 5f       	subi	r22, 0xFF	; 255
    5afa:	7f 4f       	sbci	r23, 0xFF	; 255
    5afc:	8f 4f       	sbci	r24, 0xFF	; 255
    5afe:	9f 4f       	sbci	r25, 0xFF	; 255
    5b00:	08 95       	ret

00005b02 <__fp_split3>:
    5b02:	57 fd       	sbrc	r21, 7
    5b04:	90 58       	subi	r25, 0x80	; 128
    5b06:	44 0f       	add	r20, r20
    5b08:	55 1f       	adc	r21, r21
    5b0a:	59 f0       	breq	.+22     	; 0x5b22 <__fp_splitA+0x10>
    5b0c:	5f 3f       	cpi	r21, 0xFF	; 255
    5b0e:	71 f0       	breq	.+28     	; 0x5b2c <__fp_splitA+0x1a>
    5b10:	47 95       	ror	r20

00005b12 <__fp_splitA>:
    5b12:	88 0f       	add	r24, r24
    5b14:	97 fb       	bst	r25, 7
    5b16:	99 1f       	adc	r25, r25
    5b18:	61 f0       	breq	.+24     	; 0x5b32 <__fp_splitA+0x20>
    5b1a:	9f 3f       	cpi	r25, 0xFF	; 255
    5b1c:	79 f0       	breq	.+30     	; 0x5b3c <__fp_splitA+0x2a>
    5b1e:	87 95       	ror	r24
    5b20:	08 95       	ret
    5b22:	12 16       	cp	r1, r18
    5b24:	13 06       	cpc	r1, r19
    5b26:	14 06       	cpc	r1, r20
    5b28:	55 1f       	adc	r21, r21
    5b2a:	f2 cf       	rjmp	.-28     	; 0x5b10 <__fp_split3+0xe>
    5b2c:	46 95       	lsr	r20
    5b2e:	f1 df       	rcall	.-30     	; 0x5b12 <__fp_splitA>
    5b30:	08 c0       	rjmp	.+16     	; 0x5b42 <__fp_splitA+0x30>
    5b32:	16 16       	cp	r1, r22
    5b34:	17 06       	cpc	r1, r23
    5b36:	18 06       	cpc	r1, r24
    5b38:	99 1f       	adc	r25, r25
    5b3a:	f1 cf       	rjmp	.-30     	; 0x5b1e <__fp_splitA+0xc>
    5b3c:	86 95       	lsr	r24
    5b3e:	71 05       	cpc	r23, r1
    5b40:	61 05       	cpc	r22, r1
    5b42:	08 94       	sec
    5b44:	08 95       	ret

00005b46 <__fp_zero>:
    5b46:	e8 94       	clt

00005b48 <__fp_szero>:
    5b48:	bb 27       	eor	r27, r27
    5b4a:	66 27       	eor	r22, r22
    5b4c:	77 27       	eor	r23, r23
    5b4e:	cb 01       	movw	r24, r22
    5b50:	97 f9       	bld	r25, 7
    5b52:	08 95       	ret

00005b54 <__mulsf3>:
    5b54:	0e 94 bd 2d 	call	0x5b7a	; 0x5b7a <__mulsf3x>
    5b58:	0c 94 70 2d 	jmp	0x5ae0	; 0x5ae0 <__fp_round>
    5b5c:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <__fp_pscA>
    5b60:	38 f0       	brcs	.+14     	; 0x5b70 <__mulsf3+0x1c>
    5b62:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <__fp_pscB>
    5b66:	20 f0       	brcs	.+8      	; 0x5b70 <__mulsf3+0x1c>
    5b68:	95 23       	and	r25, r21
    5b6a:	11 f0       	breq	.+4      	; 0x5b70 <__mulsf3+0x1c>
    5b6c:	0c 94 59 2d 	jmp	0x5ab2	; 0x5ab2 <__fp_inf>
    5b70:	0c 94 5f 2d 	jmp	0x5abe	; 0x5abe <__fp_nan>
    5b74:	11 24       	eor	r1, r1
    5b76:	0c 94 a4 2d 	jmp	0x5b48	; 0x5b48 <__fp_szero>

00005b7a <__mulsf3x>:
    5b7a:	0e 94 81 2d 	call	0x5b02	; 0x5b02 <__fp_split3>
    5b7e:	70 f3       	brcs	.-36     	; 0x5b5c <__mulsf3+0x8>

00005b80 <__mulsf3_pse>:
    5b80:	95 9f       	mul	r25, r21
    5b82:	c1 f3       	breq	.-16     	; 0x5b74 <__mulsf3+0x20>
    5b84:	95 0f       	add	r25, r21
    5b86:	50 e0       	ldi	r21, 0x00	; 0
    5b88:	55 1f       	adc	r21, r21
    5b8a:	62 9f       	mul	r22, r18
    5b8c:	f0 01       	movw	r30, r0
    5b8e:	72 9f       	mul	r23, r18
    5b90:	bb 27       	eor	r27, r27
    5b92:	f0 0d       	add	r31, r0
    5b94:	b1 1d       	adc	r27, r1
    5b96:	63 9f       	mul	r22, r19
    5b98:	aa 27       	eor	r26, r26
    5b9a:	f0 0d       	add	r31, r0
    5b9c:	b1 1d       	adc	r27, r1
    5b9e:	aa 1f       	adc	r26, r26
    5ba0:	64 9f       	mul	r22, r20
    5ba2:	66 27       	eor	r22, r22
    5ba4:	b0 0d       	add	r27, r0
    5ba6:	a1 1d       	adc	r26, r1
    5ba8:	66 1f       	adc	r22, r22
    5baa:	82 9f       	mul	r24, r18
    5bac:	22 27       	eor	r18, r18
    5bae:	b0 0d       	add	r27, r0
    5bb0:	a1 1d       	adc	r26, r1
    5bb2:	62 1f       	adc	r22, r18
    5bb4:	73 9f       	mul	r23, r19
    5bb6:	b0 0d       	add	r27, r0
    5bb8:	a1 1d       	adc	r26, r1
    5bba:	62 1f       	adc	r22, r18
    5bbc:	83 9f       	mul	r24, r19
    5bbe:	a0 0d       	add	r26, r0
    5bc0:	61 1d       	adc	r22, r1
    5bc2:	22 1f       	adc	r18, r18
    5bc4:	74 9f       	mul	r23, r20
    5bc6:	33 27       	eor	r19, r19
    5bc8:	a0 0d       	add	r26, r0
    5bca:	61 1d       	adc	r22, r1
    5bcc:	23 1f       	adc	r18, r19
    5bce:	84 9f       	mul	r24, r20
    5bd0:	60 0d       	add	r22, r0
    5bd2:	21 1d       	adc	r18, r1
    5bd4:	82 2f       	mov	r24, r18
    5bd6:	76 2f       	mov	r23, r22
    5bd8:	6a 2f       	mov	r22, r26
    5bda:	11 24       	eor	r1, r1
    5bdc:	9f 57       	subi	r25, 0x7F	; 127
    5bde:	50 40       	sbci	r21, 0x00	; 0
    5be0:	9a f0       	brmi	.+38     	; 0x5c08 <__mulsf3_pse+0x88>
    5be2:	f1 f0       	breq	.+60     	; 0x5c20 <__mulsf3_pse+0xa0>
    5be4:	88 23       	and	r24, r24
    5be6:	4a f0       	brmi	.+18     	; 0x5bfa <__mulsf3_pse+0x7a>
    5be8:	ee 0f       	add	r30, r30
    5bea:	ff 1f       	adc	r31, r31
    5bec:	bb 1f       	adc	r27, r27
    5bee:	66 1f       	adc	r22, r22
    5bf0:	77 1f       	adc	r23, r23
    5bf2:	88 1f       	adc	r24, r24
    5bf4:	91 50       	subi	r25, 0x01	; 1
    5bf6:	50 40       	sbci	r21, 0x00	; 0
    5bf8:	a9 f7       	brne	.-22     	; 0x5be4 <__mulsf3_pse+0x64>
    5bfa:	9e 3f       	cpi	r25, 0xFE	; 254
    5bfc:	51 05       	cpc	r21, r1
    5bfe:	80 f0       	brcs	.+32     	; 0x5c20 <__mulsf3_pse+0xa0>
    5c00:	0c 94 59 2d 	jmp	0x5ab2	; 0x5ab2 <__fp_inf>
    5c04:	0c 94 a4 2d 	jmp	0x5b48	; 0x5b48 <__fp_szero>
    5c08:	5f 3f       	cpi	r21, 0xFF	; 255
    5c0a:	e4 f3       	brlt	.-8      	; 0x5c04 <__mulsf3_pse+0x84>
    5c0c:	98 3e       	cpi	r25, 0xE8	; 232
    5c0e:	d4 f3       	brlt	.-12     	; 0x5c04 <__mulsf3_pse+0x84>
    5c10:	86 95       	lsr	r24
    5c12:	77 95       	ror	r23
    5c14:	67 95       	ror	r22
    5c16:	b7 95       	ror	r27
    5c18:	f7 95       	ror	r31
    5c1a:	e7 95       	ror	r30
    5c1c:	9f 5f       	subi	r25, 0xFF	; 255
    5c1e:	c1 f7       	brne	.-16     	; 0x5c10 <__mulsf3_pse+0x90>
    5c20:	fe 2b       	or	r31, r30
    5c22:	88 0f       	add	r24, r24
    5c24:	91 1d       	adc	r25, r1
    5c26:	96 95       	lsr	r25
    5c28:	87 95       	ror	r24
    5c2a:	97 f9       	bld	r25, 7
    5c2c:	08 95       	ret

00005c2e <__divmodhi4>:
    5c2e:	97 fb       	bst	r25, 7
    5c30:	07 2e       	mov	r0, r23
    5c32:	16 f4       	brtc	.+4      	; 0x5c38 <__divmodhi4+0xa>
    5c34:	00 94       	com	r0
    5c36:	07 d0       	rcall	.+14     	; 0x5c46 <__divmodhi4_neg1>
    5c38:	77 fd       	sbrc	r23, 7
    5c3a:	09 d0       	rcall	.+18     	; 0x5c4e <__divmodhi4_neg2>
    5c3c:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <__udivmodhi4>
    5c40:	07 fc       	sbrc	r0, 7
    5c42:	05 d0       	rcall	.+10     	; 0x5c4e <__divmodhi4_neg2>
    5c44:	3e f4       	brtc	.+14     	; 0x5c54 <__divmodhi4_exit>

00005c46 <__divmodhi4_neg1>:
    5c46:	90 95       	com	r25
    5c48:	81 95       	neg	r24
    5c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c4c:	08 95       	ret

00005c4e <__divmodhi4_neg2>:
    5c4e:	70 95       	com	r23
    5c50:	61 95       	neg	r22
    5c52:	7f 4f       	sbci	r23, 0xFF	; 255

00005c54 <__divmodhi4_exit>:
    5c54:	08 95       	ret

00005c56 <__udivmodsi4>:
    5c56:	a1 e2       	ldi	r26, 0x21	; 33
    5c58:	1a 2e       	mov	r1, r26
    5c5a:	aa 1b       	sub	r26, r26
    5c5c:	bb 1b       	sub	r27, r27
    5c5e:	fd 01       	movw	r30, r26
    5c60:	0d c0       	rjmp	.+26     	; 0x5c7c <__udivmodsi4_ep>

00005c62 <__udivmodsi4_loop>:
    5c62:	aa 1f       	adc	r26, r26
    5c64:	bb 1f       	adc	r27, r27
    5c66:	ee 1f       	adc	r30, r30
    5c68:	ff 1f       	adc	r31, r31
    5c6a:	a2 17       	cp	r26, r18
    5c6c:	b3 07       	cpc	r27, r19
    5c6e:	e4 07       	cpc	r30, r20
    5c70:	f5 07       	cpc	r31, r21
    5c72:	20 f0       	brcs	.+8      	; 0x5c7c <__udivmodsi4_ep>
    5c74:	a2 1b       	sub	r26, r18
    5c76:	b3 0b       	sbc	r27, r19
    5c78:	e4 0b       	sbc	r30, r20
    5c7a:	f5 0b       	sbc	r31, r21

00005c7c <__udivmodsi4_ep>:
    5c7c:	66 1f       	adc	r22, r22
    5c7e:	77 1f       	adc	r23, r23
    5c80:	88 1f       	adc	r24, r24
    5c82:	99 1f       	adc	r25, r25
    5c84:	1a 94       	dec	r1
    5c86:	69 f7       	brne	.-38     	; 0x5c62 <__udivmodsi4_loop>
    5c88:	60 95       	com	r22
    5c8a:	70 95       	com	r23
    5c8c:	80 95       	com	r24
    5c8e:	90 95       	com	r25
    5c90:	9b 01       	movw	r18, r22
    5c92:	ac 01       	movw	r20, r24
    5c94:	bd 01       	movw	r22, r26
    5c96:	cf 01       	movw	r24, r30
    5c98:	08 95       	ret

00005c9a <__tablejump2__>:
    5c9a:	ee 0f       	add	r30, r30
    5c9c:	ff 1f       	adc	r31, r31
    5c9e:	05 90       	lpm	r0, Z+
    5ca0:	f4 91       	lpm	r31, Z
    5ca2:	e0 2d       	mov	r30, r0
    5ca4:	09 94       	ijmp

00005ca6 <__muluhisi3>:
    5ca6:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <__umulhisi3>
    5caa:	a5 9f       	mul	r26, r21
    5cac:	90 0d       	add	r25, r0
    5cae:	b4 9f       	mul	r27, r20
    5cb0:	90 0d       	add	r25, r0
    5cb2:	a4 9f       	mul	r26, r20
    5cb4:	80 0d       	add	r24, r0
    5cb6:	91 1d       	adc	r25, r1
    5cb8:	11 24       	eor	r1, r1
    5cba:	08 95       	ret

00005cbc <__udivmodhi4>:
    5cbc:	aa 1b       	sub	r26, r26
    5cbe:	bb 1b       	sub	r27, r27
    5cc0:	51 e1       	ldi	r21, 0x11	; 17
    5cc2:	07 c0       	rjmp	.+14     	; 0x5cd2 <__udivmodhi4_ep>

00005cc4 <__udivmodhi4_loop>:
    5cc4:	aa 1f       	adc	r26, r26
    5cc6:	bb 1f       	adc	r27, r27
    5cc8:	a6 17       	cp	r26, r22
    5cca:	b7 07       	cpc	r27, r23
    5ccc:	10 f0       	brcs	.+4      	; 0x5cd2 <__udivmodhi4_ep>
    5cce:	a6 1b       	sub	r26, r22
    5cd0:	b7 0b       	sbc	r27, r23

00005cd2 <__udivmodhi4_ep>:
    5cd2:	88 1f       	adc	r24, r24
    5cd4:	99 1f       	adc	r25, r25
    5cd6:	5a 95       	dec	r21
    5cd8:	a9 f7       	brne	.-22     	; 0x5cc4 <__udivmodhi4_loop>
    5cda:	80 95       	com	r24
    5cdc:	90 95       	com	r25
    5cde:	bc 01       	movw	r22, r24
    5ce0:	cd 01       	movw	r24, r26
    5ce2:	08 95       	ret

00005ce4 <__umulhisi3>:
    5ce4:	a2 9f       	mul	r26, r18
    5ce6:	b0 01       	movw	r22, r0
    5ce8:	b3 9f       	mul	r27, r19
    5cea:	c0 01       	movw	r24, r0
    5cec:	a3 9f       	mul	r26, r19
    5cee:	70 0d       	add	r23, r0
    5cf0:	81 1d       	adc	r24, r1
    5cf2:	11 24       	eor	r1, r1
    5cf4:	91 1d       	adc	r25, r1
    5cf6:	b2 9f       	mul	r27, r18
    5cf8:	70 0d       	add	r23, r0
    5cfa:	81 1d       	adc	r24, r1
    5cfc:	11 24       	eor	r1, r1
    5cfe:	91 1d       	adc	r25, r1
    5d00:	08 95       	ret

00005d02 <malloc>:
    5d02:	0f 93       	push	r16
    5d04:	1f 93       	push	r17
    5d06:	cf 93       	push	r28
    5d08:	df 93       	push	r29
    5d0a:	82 30       	cpi	r24, 0x02	; 2
    5d0c:	91 05       	cpc	r25, r1
    5d0e:	10 f4       	brcc	.+4      	; 0x5d14 <malloc+0x12>
    5d10:	82 e0       	ldi	r24, 0x02	; 2
    5d12:	90 e0       	ldi	r25, 0x00	; 0
    5d14:	e0 91 74 06 	lds	r30, 0x0674	; 0x800674 <__flp>
    5d18:	f0 91 75 06 	lds	r31, 0x0675	; 0x800675 <__flp+0x1>
    5d1c:	20 e0       	ldi	r18, 0x00	; 0
    5d1e:	30 e0       	ldi	r19, 0x00	; 0
    5d20:	a0 e0       	ldi	r26, 0x00	; 0
    5d22:	b0 e0       	ldi	r27, 0x00	; 0
    5d24:	30 97       	sbiw	r30, 0x00	; 0
    5d26:	19 f1       	breq	.+70     	; 0x5d6e <malloc+0x6c>
    5d28:	40 81       	ld	r20, Z
    5d2a:	51 81       	ldd	r21, Z+1	; 0x01
    5d2c:	02 81       	ldd	r16, Z+2	; 0x02
    5d2e:	13 81       	ldd	r17, Z+3	; 0x03
    5d30:	48 17       	cp	r20, r24
    5d32:	59 07       	cpc	r21, r25
    5d34:	c8 f0       	brcs	.+50     	; 0x5d68 <malloc+0x66>
    5d36:	84 17       	cp	r24, r20
    5d38:	95 07       	cpc	r25, r21
    5d3a:	69 f4       	brne	.+26     	; 0x5d56 <malloc+0x54>
    5d3c:	10 97       	sbiw	r26, 0x00	; 0
    5d3e:	31 f0       	breq	.+12     	; 0x5d4c <malloc+0x4a>
    5d40:	12 96       	adiw	r26, 0x02	; 2
    5d42:	0c 93       	st	X, r16
    5d44:	12 97       	sbiw	r26, 0x02	; 2
    5d46:	13 96       	adiw	r26, 0x03	; 3
    5d48:	1c 93       	st	X, r17
    5d4a:	27 c0       	rjmp	.+78     	; 0x5d9a <malloc+0x98>
    5d4c:	00 93 74 06 	sts	0x0674, r16	; 0x800674 <__flp>
    5d50:	10 93 75 06 	sts	0x0675, r17	; 0x800675 <__flp+0x1>
    5d54:	22 c0       	rjmp	.+68     	; 0x5d9a <malloc+0x98>
    5d56:	21 15       	cp	r18, r1
    5d58:	31 05       	cpc	r19, r1
    5d5a:	19 f0       	breq	.+6      	; 0x5d62 <malloc+0x60>
    5d5c:	42 17       	cp	r20, r18
    5d5e:	53 07       	cpc	r21, r19
    5d60:	18 f4       	brcc	.+6      	; 0x5d68 <malloc+0x66>
    5d62:	9a 01       	movw	r18, r20
    5d64:	bd 01       	movw	r22, r26
    5d66:	ef 01       	movw	r28, r30
    5d68:	df 01       	movw	r26, r30
    5d6a:	f8 01       	movw	r30, r16
    5d6c:	db cf       	rjmp	.-74     	; 0x5d24 <malloc+0x22>
    5d6e:	21 15       	cp	r18, r1
    5d70:	31 05       	cpc	r19, r1
    5d72:	f9 f0       	breq	.+62     	; 0x5db2 <malloc+0xb0>
    5d74:	28 1b       	sub	r18, r24
    5d76:	39 0b       	sbc	r19, r25
    5d78:	24 30       	cpi	r18, 0x04	; 4
    5d7a:	31 05       	cpc	r19, r1
    5d7c:	80 f4       	brcc	.+32     	; 0x5d9e <malloc+0x9c>
    5d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    5d80:	9b 81       	ldd	r25, Y+3	; 0x03
    5d82:	61 15       	cp	r22, r1
    5d84:	71 05       	cpc	r23, r1
    5d86:	21 f0       	breq	.+8      	; 0x5d90 <malloc+0x8e>
    5d88:	fb 01       	movw	r30, r22
    5d8a:	93 83       	std	Z+3, r25	; 0x03
    5d8c:	82 83       	std	Z+2, r24	; 0x02
    5d8e:	04 c0       	rjmp	.+8      	; 0x5d98 <malloc+0x96>
    5d90:	90 93 75 06 	sts	0x0675, r25	; 0x800675 <__flp+0x1>
    5d94:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <__flp>
    5d98:	fe 01       	movw	r30, r28
    5d9a:	32 96       	adiw	r30, 0x02	; 2
    5d9c:	44 c0       	rjmp	.+136    	; 0x5e26 <malloc+0x124>
    5d9e:	fe 01       	movw	r30, r28
    5da0:	e2 0f       	add	r30, r18
    5da2:	f3 1f       	adc	r31, r19
    5da4:	81 93       	st	Z+, r24
    5da6:	91 93       	st	Z+, r25
    5da8:	22 50       	subi	r18, 0x02	; 2
    5daa:	31 09       	sbc	r19, r1
    5dac:	39 83       	std	Y+1, r19	; 0x01
    5dae:	28 83       	st	Y, r18
    5db0:	3a c0       	rjmp	.+116    	; 0x5e26 <malloc+0x124>
    5db2:	20 91 72 06 	lds	r18, 0x0672	; 0x800672 <__brkval>
    5db6:	30 91 73 06 	lds	r19, 0x0673	; 0x800673 <__brkval+0x1>
    5dba:	23 2b       	or	r18, r19
    5dbc:	41 f4       	brne	.+16     	; 0x5dce <malloc+0xcc>
    5dbe:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    5dc2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    5dc6:	30 93 73 06 	sts	0x0673, r19	; 0x800673 <__brkval+0x1>
    5dca:	20 93 72 06 	sts	0x0672, r18	; 0x800672 <__brkval>
    5dce:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    5dd2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    5dd6:	21 15       	cp	r18, r1
    5dd8:	31 05       	cpc	r19, r1
    5dda:	41 f4       	brne	.+16     	; 0x5dec <malloc+0xea>
    5ddc:	2d b7       	in	r18, 0x3d	; 61
    5dde:	3e b7       	in	r19, 0x3e	; 62
    5de0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    5de4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    5de8:	24 1b       	sub	r18, r20
    5dea:	35 0b       	sbc	r19, r21
    5dec:	e0 91 72 06 	lds	r30, 0x0672	; 0x800672 <__brkval>
    5df0:	f0 91 73 06 	lds	r31, 0x0673	; 0x800673 <__brkval+0x1>
    5df4:	e2 17       	cp	r30, r18
    5df6:	f3 07       	cpc	r31, r19
    5df8:	a0 f4       	brcc	.+40     	; 0x5e22 <malloc+0x120>
    5dfa:	2e 1b       	sub	r18, r30
    5dfc:	3f 0b       	sbc	r19, r31
    5dfe:	28 17       	cp	r18, r24
    5e00:	39 07       	cpc	r19, r25
    5e02:	78 f0       	brcs	.+30     	; 0x5e22 <malloc+0x120>
    5e04:	ac 01       	movw	r20, r24
    5e06:	4e 5f       	subi	r20, 0xFE	; 254
    5e08:	5f 4f       	sbci	r21, 0xFF	; 255
    5e0a:	24 17       	cp	r18, r20
    5e0c:	35 07       	cpc	r19, r21
    5e0e:	48 f0       	brcs	.+18     	; 0x5e22 <malloc+0x120>
    5e10:	4e 0f       	add	r20, r30
    5e12:	5f 1f       	adc	r21, r31
    5e14:	50 93 73 06 	sts	0x0673, r21	; 0x800673 <__brkval+0x1>
    5e18:	40 93 72 06 	sts	0x0672, r20	; 0x800672 <__brkval>
    5e1c:	81 93       	st	Z+, r24
    5e1e:	91 93       	st	Z+, r25
    5e20:	02 c0       	rjmp	.+4      	; 0x5e26 <malloc+0x124>
    5e22:	e0 e0       	ldi	r30, 0x00	; 0
    5e24:	f0 e0       	ldi	r31, 0x00	; 0
    5e26:	cf 01       	movw	r24, r30
    5e28:	df 91       	pop	r29
    5e2a:	cf 91       	pop	r28
    5e2c:	1f 91       	pop	r17
    5e2e:	0f 91       	pop	r16
    5e30:	08 95       	ret

00005e32 <free>:
    5e32:	cf 93       	push	r28
    5e34:	df 93       	push	r29
    5e36:	00 97       	sbiw	r24, 0x00	; 0
    5e38:	09 f4       	brne	.+2      	; 0x5e3c <free+0xa>
    5e3a:	81 c0       	rjmp	.+258    	; 0x5f3e <free+0x10c>
    5e3c:	fc 01       	movw	r30, r24
    5e3e:	32 97       	sbiw	r30, 0x02	; 2
    5e40:	13 82       	std	Z+3, r1	; 0x03
    5e42:	12 82       	std	Z+2, r1	; 0x02
    5e44:	a0 91 74 06 	lds	r26, 0x0674	; 0x800674 <__flp>
    5e48:	b0 91 75 06 	lds	r27, 0x0675	; 0x800675 <__flp+0x1>
    5e4c:	10 97       	sbiw	r26, 0x00	; 0
    5e4e:	81 f4       	brne	.+32     	; 0x5e70 <free+0x3e>
    5e50:	20 81       	ld	r18, Z
    5e52:	31 81       	ldd	r19, Z+1	; 0x01
    5e54:	82 0f       	add	r24, r18
    5e56:	93 1f       	adc	r25, r19
    5e58:	20 91 72 06 	lds	r18, 0x0672	; 0x800672 <__brkval>
    5e5c:	30 91 73 06 	lds	r19, 0x0673	; 0x800673 <__brkval+0x1>
    5e60:	28 17       	cp	r18, r24
    5e62:	39 07       	cpc	r19, r25
    5e64:	51 f5       	brne	.+84     	; 0x5eba <free+0x88>
    5e66:	f0 93 73 06 	sts	0x0673, r31	; 0x800673 <__brkval+0x1>
    5e6a:	e0 93 72 06 	sts	0x0672, r30	; 0x800672 <__brkval>
    5e6e:	67 c0       	rjmp	.+206    	; 0x5f3e <free+0x10c>
    5e70:	ed 01       	movw	r28, r26
    5e72:	20 e0       	ldi	r18, 0x00	; 0
    5e74:	30 e0       	ldi	r19, 0x00	; 0
    5e76:	ce 17       	cp	r28, r30
    5e78:	df 07       	cpc	r29, r31
    5e7a:	40 f4       	brcc	.+16     	; 0x5e8c <free+0x5a>
    5e7c:	4a 81       	ldd	r20, Y+2	; 0x02
    5e7e:	5b 81       	ldd	r21, Y+3	; 0x03
    5e80:	9e 01       	movw	r18, r28
    5e82:	41 15       	cp	r20, r1
    5e84:	51 05       	cpc	r21, r1
    5e86:	f1 f0       	breq	.+60     	; 0x5ec4 <free+0x92>
    5e88:	ea 01       	movw	r28, r20
    5e8a:	f5 cf       	rjmp	.-22     	; 0x5e76 <free+0x44>
    5e8c:	d3 83       	std	Z+3, r29	; 0x03
    5e8e:	c2 83       	std	Z+2, r28	; 0x02
    5e90:	40 81       	ld	r20, Z
    5e92:	51 81       	ldd	r21, Z+1	; 0x01
    5e94:	84 0f       	add	r24, r20
    5e96:	95 1f       	adc	r25, r21
    5e98:	c8 17       	cp	r28, r24
    5e9a:	d9 07       	cpc	r29, r25
    5e9c:	59 f4       	brne	.+22     	; 0x5eb4 <free+0x82>
    5e9e:	88 81       	ld	r24, Y
    5ea0:	99 81       	ldd	r25, Y+1	; 0x01
    5ea2:	84 0f       	add	r24, r20
    5ea4:	95 1f       	adc	r25, r21
    5ea6:	02 96       	adiw	r24, 0x02	; 2
    5ea8:	91 83       	std	Z+1, r25	; 0x01
    5eaa:	80 83       	st	Z, r24
    5eac:	8a 81       	ldd	r24, Y+2	; 0x02
    5eae:	9b 81       	ldd	r25, Y+3	; 0x03
    5eb0:	93 83       	std	Z+3, r25	; 0x03
    5eb2:	82 83       	std	Z+2, r24	; 0x02
    5eb4:	21 15       	cp	r18, r1
    5eb6:	31 05       	cpc	r19, r1
    5eb8:	29 f4       	brne	.+10     	; 0x5ec4 <free+0x92>
    5eba:	f0 93 75 06 	sts	0x0675, r31	; 0x800675 <__flp+0x1>
    5ebe:	e0 93 74 06 	sts	0x0674, r30	; 0x800674 <__flp>
    5ec2:	3d c0       	rjmp	.+122    	; 0x5f3e <free+0x10c>
    5ec4:	e9 01       	movw	r28, r18
    5ec6:	fb 83       	std	Y+3, r31	; 0x03
    5ec8:	ea 83       	std	Y+2, r30	; 0x02
    5eca:	49 91       	ld	r20, Y+
    5ecc:	59 91       	ld	r21, Y+
    5ece:	c4 0f       	add	r28, r20
    5ed0:	d5 1f       	adc	r29, r21
    5ed2:	ec 17       	cp	r30, r28
    5ed4:	fd 07       	cpc	r31, r29
    5ed6:	61 f4       	brne	.+24     	; 0x5ef0 <free+0xbe>
    5ed8:	80 81       	ld	r24, Z
    5eda:	91 81       	ldd	r25, Z+1	; 0x01
    5edc:	84 0f       	add	r24, r20
    5ede:	95 1f       	adc	r25, r21
    5ee0:	02 96       	adiw	r24, 0x02	; 2
    5ee2:	e9 01       	movw	r28, r18
    5ee4:	99 83       	std	Y+1, r25	; 0x01
    5ee6:	88 83       	st	Y, r24
    5ee8:	82 81       	ldd	r24, Z+2	; 0x02
    5eea:	93 81       	ldd	r25, Z+3	; 0x03
    5eec:	9b 83       	std	Y+3, r25	; 0x03
    5eee:	8a 83       	std	Y+2, r24	; 0x02
    5ef0:	e0 e0       	ldi	r30, 0x00	; 0
    5ef2:	f0 e0       	ldi	r31, 0x00	; 0
    5ef4:	12 96       	adiw	r26, 0x02	; 2
    5ef6:	8d 91       	ld	r24, X+
    5ef8:	9c 91       	ld	r25, X
    5efa:	13 97       	sbiw	r26, 0x03	; 3
    5efc:	00 97       	sbiw	r24, 0x00	; 0
    5efe:	19 f0       	breq	.+6      	; 0x5f06 <free+0xd4>
    5f00:	fd 01       	movw	r30, r26
    5f02:	dc 01       	movw	r26, r24
    5f04:	f7 cf       	rjmp	.-18     	; 0x5ef4 <free+0xc2>
    5f06:	8d 91       	ld	r24, X+
    5f08:	9c 91       	ld	r25, X
    5f0a:	11 97       	sbiw	r26, 0x01	; 1
    5f0c:	9d 01       	movw	r18, r26
    5f0e:	2e 5f       	subi	r18, 0xFE	; 254
    5f10:	3f 4f       	sbci	r19, 0xFF	; 255
    5f12:	82 0f       	add	r24, r18
    5f14:	93 1f       	adc	r25, r19
    5f16:	20 91 72 06 	lds	r18, 0x0672	; 0x800672 <__brkval>
    5f1a:	30 91 73 06 	lds	r19, 0x0673	; 0x800673 <__brkval+0x1>
    5f1e:	28 17       	cp	r18, r24
    5f20:	39 07       	cpc	r19, r25
    5f22:	69 f4       	brne	.+26     	; 0x5f3e <free+0x10c>
    5f24:	30 97       	sbiw	r30, 0x00	; 0
    5f26:	29 f4       	brne	.+10     	; 0x5f32 <free+0x100>
    5f28:	10 92 75 06 	sts	0x0675, r1	; 0x800675 <__flp+0x1>
    5f2c:	10 92 74 06 	sts	0x0674, r1	; 0x800674 <__flp>
    5f30:	02 c0       	rjmp	.+4      	; 0x5f36 <free+0x104>
    5f32:	13 82       	std	Z+3, r1	; 0x03
    5f34:	12 82       	std	Z+2, r1	; 0x02
    5f36:	b0 93 73 06 	sts	0x0673, r27	; 0x800673 <__brkval+0x1>
    5f3a:	a0 93 72 06 	sts	0x0672, r26	; 0x800672 <__brkval>
    5f3e:	df 91       	pop	r29
    5f40:	cf 91       	pop	r28
    5f42:	08 95       	ret

00005f44 <realloc>:
    5f44:	a0 e0       	ldi	r26, 0x00	; 0
    5f46:	b0 e0       	ldi	r27, 0x00	; 0
    5f48:	e8 ea       	ldi	r30, 0xA8	; 168
    5f4a:	ff e2       	ldi	r31, 0x2F	; 47
    5f4c:	0c 94 a8 30 	jmp	0x6150	; 0x6150 <__prologue_saves__+0x8>
    5f50:	ec 01       	movw	r28, r24
    5f52:	00 97       	sbiw	r24, 0x00	; 0
    5f54:	21 f4       	brne	.+8      	; 0x5f5e <realloc+0x1a>
    5f56:	cb 01       	movw	r24, r22
    5f58:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <malloc>
    5f5c:	b4 c0       	rjmp	.+360    	; 0x60c6 <realloc+0x182>
    5f5e:	fc 01       	movw	r30, r24
    5f60:	e6 0f       	add	r30, r22
    5f62:	f7 1f       	adc	r31, r23
    5f64:	9c 01       	movw	r18, r24
    5f66:	22 50       	subi	r18, 0x02	; 2
    5f68:	31 09       	sbc	r19, r1
    5f6a:	e2 17       	cp	r30, r18
    5f6c:	f3 07       	cpc	r31, r19
    5f6e:	08 f4       	brcc	.+2      	; 0x5f72 <realloc+0x2e>
    5f70:	a8 c0       	rjmp	.+336    	; 0x60c2 <realloc+0x17e>
    5f72:	d9 01       	movw	r26, r18
    5f74:	0d 91       	ld	r16, X+
    5f76:	1c 91       	ld	r17, X
    5f78:	11 97       	sbiw	r26, 0x01	; 1
    5f7a:	06 17       	cp	r16, r22
    5f7c:	17 07       	cpc	r17, r23
    5f7e:	b0 f0       	brcs	.+44     	; 0x5fac <realloc+0x68>
    5f80:	05 30       	cpi	r16, 0x05	; 5
    5f82:	11 05       	cpc	r17, r1
    5f84:	08 f4       	brcc	.+2      	; 0x5f88 <realloc+0x44>
    5f86:	9b c0       	rjmp	.+310    	; 0x60be <realloc+0x17a>
    5f88:	c8 01       	movw	r24, r16
    5f8a:	04 97       	sbiw	r24, 0x04	; 4
    5f8c:	86 17       	cp	r24, r22
    5f8e:	97 07       	cpc	r25, r23
    5f90:	08 f4       	brcc	.+2      	; 0x5f94 <realloc+0x50>
    5f92:	95 c0       	rjmp	.+298    	; 0x60be <realloc+0x17a>
    5f94:	02 50       	subi	r16, 0x02	; 2
    5f96:	11 09       	sbc	r17, r1
    5f98:	06 1b       	sub	r16, r22
    5f9a:	17 0b       	sbc	r17, r23
    5f9c:	01 93       	st	Z+, r16
    5f9e:	11 93       	st	Z+, r17
    5fa0:	6d 93       	st	X+, r22
    5fa2:	7c 93       	st	X, r23
    5fa4:	cf 01       	movw	r24, r30
    5fa6:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <free>
    5faa:	89 c0       	rjmp	.+274    	; 0x60be <realloc+0x17a>
    5fac:	5b 01       	movw	r10, r22
    5fae:	a0 1a       	sub	r10, r16
    5fb0:	b1 0a       	sbc	r11, r17
    5fb2:	4c 01       	movw	r8, r24
    5fb4:	80 0e       	add	r8, r16
    5fb6:	91 1e       	adc	r9, r17
    5fb8:	a0 91 74 06 	lds	r26, 0x0674	; 0x800674 <__flp>
    5fbc:	b0 91 75 06 	lds	r27, 0x0675	; 0x800675 <__flp+0x1>
    5fc0:	61 2c       	mov	r6, r1
    5fc2:	71 2c       	mov	r7, r1
    5fc4:	e1 2c       	mov	r14, r1
    5fc6:	f1 2c       	mov	r15, r1
    5fc8:	10 97       	sbiw	r26, 0x00	; 0
    5fca:	09 f4       	brne	.+2      	; 0x5fce <realloc+0x8a>
    5fcc:	46 c0       	rjmp	.+140    	; 0x605a <realloc+0x116>
    5fce:	8d 91       	ld	r24, X+
    5fd0:	9c 91       	ld	r25, X
    5fd2:	11 97       	sbiw	r26, 0x01	; 1
    5fd4:	a8 15       	cp	r26, r8
    5fd6:	b9 05       	cpc	r27, r9
    5fd8:	b1 f5       	brne	.+108    	; 0x6046 <realloc+0x102>
    5fda:	6c 01       	movw	r12, r24
    5fdc:	42 e0       	ldi	r20, 0x02	; 2
    5fde:	c4 0e       	add	r12, r20
    5fe0:	d1 1c       	adc	r13, r1
    5fe2:	ca 14       	cp	r12, r10
    5fe4:	db 04       	cpc	r13, r11
    5fe6:	78 f1       	brcs	.+94     	; 0x6046 <realloc+0x102>
    5fe8:	4c 01       	movw	r8, r24
    5fea:	8a 18       	sub	r8, r10
    5fec:	9b 08       	sbc	r9, r11
    5fee:	64 01       	movw	r12, r8
    5ff0:	42 e0       	ldi	r20, 0x02	; 2
    5ff2:	c4 0e       	add	r12, r20
    5ff4:	d1 1c       	adc	r13, r1
    5ff6:	12 96       	adiw	r26, 0x02	; 2
    5ff8:	bc 90       	ld	r11, X
    5ffa:	12 97       	sbiw	r26, 0x02	; 2
    5ffc:	13 96       	adiw	r26, 0x03	; 3
    5ffe:	ac 91       	ld	r26, X
    6000:	b5 e0       	ldi	r27, 0x05	; 5
    6002:	cb 16       	cp	r12, r27
    6004:	d1 04       	cpc	r13, r1
    6006:	40 f0       	brcs	.+16     	; 0x6018 <realloc+0xd4>
    6008:	b2 82       	std	Z+2, r11	; 0x02
    600a:	a3 83       	std	Z+3, r26	; 0x03
    600c:	91 82       	std	Z+1, r9	; 0x01
    600e:	80 82       	st	Z, r8
    6010:	d9 01       	movw	r26, r18
    6012:	6d 93       	st	X+, r22
    6014:	7c 93       	st	X, r23
    6016:	09 c0       	rjmp	.+18     	; 0x602a <realloc+0xe6>
    6018:	0e 5f       	subi	r16, 0xFE	; 254
    601a:	1f 4f       	sbci	r17, 0xFF	; 255
    601c:	80 0f       	add	r24, r16
    601e:	91 1f       	adc	r25, r17
    6020:	f9 01       	movw	r30, r18
    6022:	91 83       	std	Z+1, r25	; 0x01
    6024:	80 83       	st	Z, r24
    6026:	eb 2d       	mov	r30, r11
    6028:	fa 2f       	mov	r31, r26
    602a:	e1 14       	cp	r14, r1
    602c:	f1 04       	cpc	r15, r1
    602e:	31 f0       	breq	.+12     	; 0x603c <realloc+0xf8>
    6030:	d7 01       	movw	r26, r14
    6032:	13 96       	adiw	r26, 0x03	; 3
    6034:	fc 93       	st	X, r31
    6036:	ee 93       	st	-X, r30
    6038:	12 97       	sbiw	r26, 0x02	; 2
    603a:	41 c0       	rjmp	.+130    	; 0x60be <realloc+0x17a>
    603c:	f0 93 75 06 	sts	0x0675, r31	; 0x800675 <__flp+0x1>
    6040:	e0 93 74 06 	sts	0x0674, r30	; 0x800674 <__flp>
    6044:	3c c0       	rjmp	.+120    	; 0x60be <realloc+0x17a>
    6046:	68 16       	cp	r6, r24
    6048:	79 06       	cpc	r7, r25
    604a:	08 f4       	brcc	.+2      	; 0x604e <realloc+0x10a>
    604c:	3c 01       	movw	r6, r24
    604e:	7d 01       	movw	r14, r26
    6050:	12 96       	adiw	r26, 0x02	; 2
    6052:	0d 90       	ld	r0, X+
    6054:	bc 91       	ld	r27, X
    6056:	a0 2d       	mov	r26, r0
    6058:	b7 cf       	rjmp	.-146    	; 0x5fc8 <realloc+0x84>
    605a:	80 91 72 06 	lds	r24, 0x0672	; 0x800672 <__brkval>
    605e:	90 91 73 06 	lds	r25, 0x0673	; 0x800673 <__brkval+0x1>
    6062:	88 16       	cp	r8, r24
    6064:	99 06       	cpc	r9, r25
    6066:	e1 f4       	brne	.+56     	; 0x60a0 <realloc+0x15c>
    6068:	66 16       	cp	r6, r22
    606a:	77 06       	cpc	r7, r23
    606c:	c8 f4       	brcc	.+50     	; 0x60a0 <realloc+0x15c>
    606e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    6072:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    6076:	00 97       	sbiw	r24, 0x00	; 0
    6078:	41 f4       	brne	.+16     	; 0x608a <realloc+0x146>
    607a:	8d b7       	in	r24, 0x3d	; 61
    607c:	9e b7       	in	r25, 0x3e	; 62
    607e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6082:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    6086:	84 1b       	sub	r24, r20
    6088:	95 0b       	sbc	r25, r21
    608a:	e8 17       	cp	r30, r24
    608c:	f9 07       	cpc	r31, r25
    608e:	c8 f4       	brcc	.+50     	; 0x60c2 <realloc+0x17e>
    6090:	f0 93 73 06 	sts	0x0673, r31	; 0x800673 <__brkval+0x1>
    6094:	e0 93 72 06 	sts	0x0672, r30	; 0x800672 <__brkval>
    6098:	f9 01       	movw	r30, r18
    609a:	71 83       	std	Z+1, r23	; 0x01
    609c:	60 83       	st	Z, r22
    609e:	0f c0       	rjmp	.+30     	; 0x60be <realloc+0x17a>
    60a0:	cb 01       	movw	r24, r22
    60a2:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <malloc>
    60a6:	7c 01       	movw	r14, r24
    60a8:	00 97       	sbiw	r24, 0x00	; 0
    60aa:	59 f0       	breq	.+22     	; 0x60c2 <realloc+0x17e>
    60ac:	a8 01       	movw	r20, r16
    60ae:	be 01       	movw	r22, r28
    60b0:	0e 94 7a 30 	call	0x60f4	; 0x60f4 <memcpy>
    60b4:	ce 01       	movw	r24, r28
    60b6:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <free>
    60ba:	c7 01       	movw	r24, r14
    60bc:	04 c0       	rjmp	.+8      	; 0x60c6 <realloc+0x182>
    60be:	ce 01       	movw	r24, r28
    60c0:	02 c0       	rjmp	.+4      	; 0x60c6 <realloc+0x182>
    60c2:	80 e0       	ldi	r24, 0x00	; 0
    60c4:	90 e0       	ldi	r25, 0x00	; 0
    60c6:	cd b7       	in	r28, 0x3d	; 61
    60c8:	de b7       	in	r29, 0x3e	; 62
    60ca:	ee e0       	ldi	r30, 0x0E	; 14
    60cc:	0c 94 c4 30 	jmp	0x6188	; 0x6188 <__epilogue_restores__+0x8>

000060d0 <abort>:
    60d0:	81 e0       	ldi	r24, 0x01	; 1
    60d2:	90 e0       	ldi	r25, 0x00	; 0
    60d4:	f8 94       	cli
    60d6:	0c 94 db 30 	jmp	0x61b6	; 0x61b6 <__do_global_dtors>

000060da <memcmp>:
    60da:	fb 01       	movw	r30, r22
    60dc:	dc 01       	movw	r26, r24
    60de:	04 c0       	rjmp	.+8      	; 0x60e8 <memcmp+0xe>
    60e0:	8d 91       	ld	r24, X+
    60e2:	01 90       	ld	r0, Z+
    60e4:	80 19       	sub	r24, r0
    60e6:	21 f4       	brne	.+8      	; 0x60f0 <memcmp+0x16>
    60e8:	41 50       	subi	r20, 0x01	; 1
    60ea:	50 40       	sbci	r21, 0x00	; 0
    60ec:	c8 f7       	brcc	.-14     	; 0x60e0 <memcmp+0x6>
    60ee:	88 1b       	sub	r24, r24
    60f0:	99 0b       	sbc	r25, r25
    60f2:	08 95       	ret

000060f4 <memcpy>:
    60f4:	fb 01       	movw	r30, r22
    60f6:	dc 01       	movw	r26, r24
    60f8:	02 c0       	rjmp	.+4      	; 0x60fe <memcpy+0xa>
    60fa:	01 90       	ld	r0, Z+
    60fc:	0d 92       	st	X+, r0
    60fe:	41 50       	subi	r20, 0x01	; 1
    6100:	50 40       	sbci	r21, 0x00	; 0
    6102:	d8 f7       	brcc	.-10     	; 0x60fa <memcpy+0x6>
    6104:	08 95       	ret

00006106 <strchr>:
    6106:	fc 01       	movw	r30, r24
    6108:	81 91       	ld	r24, Z+
    610a:	86 17       	cp	r24, r22
    610c:	21 f0       	breq	.+8      	; 0x6116 <strchr+0x10>
    610e:	88 23       	and	r24, r24
    6110:	d9 f7       	brne	.-10     	; 0x6108 <strchr+0x2>
    6112:	99 27       	eor	r25, r25
    6114:	08 95       	ret
    6116:	31 97       	sbiw	r30, 0x01	; 1
    6118:	cf 01       	movw	r24, r30
    611a:	08 95       	ret

0000611c <strcpy>:
    611c:	fb 01       	movw	r30, r22
    611e:	dc 01       	movw	r26, r24
    6120:	01 90       	ld	r0, Z+
    6122:	0d 92       	st	X+, r0
    6124:	00 20       	and	r0, r0
    6126:	e1 f7       	brne	.-8      	; 0x6120 <strcpy+0x4>
    6128:	08 95       	ret

0000612a <strncpy>:
    612a:	fb 01       	movw	r30, r22
    612c:	dc 01       	movw	r26, r24
    612e:	41 50       	subi	r20, 0x01	; 1
    6130:	50 40       	sbci	r21, 0x00	; 0
    6132:	48 f0       	brcs	.+18     	; 0x6146 <strncpy+0x1c>
    6134:	01 90       	ld	r0, Z+
    6136:	0d 92       	st	X+, r0
    6138:	00 20       	and	r0, r0
    613a:	c9 f7       	brne	.-14     	; 0x612e <strncpy+0x4>
    613c:	01 c0       	rjmp	.+2      	; 0x6140 <strncpy+0x16>
    613e:	1d 92       	st	X+, r1
    6140:	41 50       	subi	r20, 0x01	; 1
    6142:	50 40       	sbci	r21, 0x00	; 0
    6144:	e0 f7       	brcc	.-8      	; 0x613e <strncpy+0x14>
    6146:	08 95       	ret

00006148 <__prologue_saves__>:
    6148:	2f 92       	push	r2
    614a:	3f 92       	push	r3
    614c:	4f 92       	push	r4
    614e:	5f 92       	push	r5
    6150:	6f 92       	push	r6
    6152:	7f 92       	push	r7
    6154:	8f 92       	push	r8
    6156:	9f 92       	push	r9
    6158:	af 92       	push	r10
    615a:	bf 92       	push	r11
    615c:	cf 92       	push	r12
    615e:	df 92       	push	r13
    6160:	ef 92       	push	r14
    6162:	ff 92       	push	r15
    6164:	0f 93       	push	r16
    6166:	1f 93       	push	r17
    6168:	cf 93       	push	r28
    616a:	df 93       	push	r29
    616c:	cd b7       	in	r28, 0x3d	; 61
    616e:	de b7       	in	r29, 0x3e	; 62
    6170:	ca 1b       	sub	r28, r26
    6172:	db 0b       	sbc	r29, r27
    6174:	0f b6       	in	r0, 0x3f	; 63
    6176:	f8 94       	cli
    6178:	de bf       	out	0x3e, r29	; 62
    617a:	0f be       	out	0x3f, r0	; 63
    617c:	cd bf       	out	0x3d, r28	; 61
    617e:	09 94       	ijmp

00006180 <__epilogue_restores__>:
    6180:	2a 88       	ldd	r2, Y+18	; 0x12
    6182:	39 88       	ldd	r3, Y+17	; 0x11
    6184:	48 88       	ldd	r4, Y+16	; 0x10
    6186:	5f 84       	ldd	r5, Y+15	; 0x0f
    6188:	6e 84       	ldd	r6, Y+14	; 0x0e
    618a:	7d 84       	ldd	r7, Y+13	; 0x0d
    618c:	8c 84       	ldd	r8, Y+12	; 0x0c
    618e:	9b 84       	ldd	r9, Y+11	; 0x0b
    6190:	aa 84       	ldd	r10, Y+10	; 0x0a
    6192:	b9 84       	ldd	r11, Y+9	; 0x09
    6194:	c8 84       	ldd	r12, Y+8	; 0x08
    6196:	df 80       	ldd	r13, Y+7	; 0x07
    6198:	ee 80       	ldd	r14, Y+6	; 0x06
    619a:	fd 80       	ldd	r15, Y+5	; 0x05
    619c:	0c 81       	ldd	r16, Y+4	; 0x04
    619e:	1b 81       	ldd	r17, Y+3	; 0x03
    61a0:	aa 81       	ldd	r26, Y+2	; 0x02
    61a2:	b9 81       	ldd	r27, Y+1	; 0x01
    61a4:	ce 0f       	add	r28, r30
    61a6:	d1 1d       	adc	r29, r1
    61a8:	0f b6       	in	r0, 0x3f	; 63
    61aa:	f8 94       	cli
    61ac:	de bf       	out	0x3e, r29	; 62
    61ae:	0f be       	out	0x3f, r0	; 63
    61b0:	cd bf       	out	0x3d, r28	; 61
    61b2:	ed 01       	movw	r28, r26
    61b4:	08 95       	ret

000061b6 <__do_global_dtors>:
    61b6:	11 e0       	ldi	r17, 0x01	; 1
    61b8:	c4 e3       	ldi	r28, 0x34	; 52
    61ba:	d1 e0       	ldi	r29, 0x01	; 1
    61bc:	04 c0       	rjmp	.+8      	; 0x61c6 <__do_global_dtors+0x10>
    61be:	fe 01       	movw	r30, r28
    61c0:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <__tablejump2__>
    61c4:	21 96       	adiw	r28, 0x01	; 1
    61c6:	c5 33       	cpi	r28, 0x35	; 53
    61c8:	d1 07       	cpc	r29, r17
    61ca:	c9 f7       	brne	.-14     	; 0x61be <__do_global_dtors+0x8>
    61cc:	f8 94       	cli

000061ce <__stop_program>:
    61ce:	ff cf       	rjmp	.-2      	; 0x61ce <__stop_program>
