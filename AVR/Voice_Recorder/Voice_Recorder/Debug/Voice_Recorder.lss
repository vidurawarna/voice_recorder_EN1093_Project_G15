
Voice_Recorder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013c  00800100  00005264  000052f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005264  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000355  0080023c  0080023c  00005434  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005434  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005464  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008a8  00000000  00000000  000054a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001f660  00000000  00000000  00005d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000409c  00000000  00000000  000253ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007008  00000000  00000000  00029448  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000206c  00000000  00000000  00030450  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005b95  00000000  00000000  000324bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d5fd  00000000  00000000  00038051  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009c0  00000000  00000000  0004564e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 01 	jmp	0x262	; 0x262 <__ctors_end>
       4:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
       8:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
       c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      10:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      14:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      18:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      1c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      20:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      24:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      28:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      2c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      30:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      34:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      38:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      3c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      40:	0c 94 05 25 	jmp	0x4a0a	; 0x4a0a <__vector_16>
      44:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      48:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      4c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      50:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      54:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      58:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      5c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      60:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__vector_24>
      64:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      68:	59 05       	cpc	r21, r9
      6a:	5d 05       	cpc	r21, r13
      6c:	5d 05       	cpc	r21, r13
      6e:	5d 05       	cpc	r21, r13
      70:	5d 05       	cpc	r21, r13
      72:	5d 05       	cpc	r21, r13
      74:	5d 05       	cpc	r21, r13
      76:	5d 05       	cpc	r21, r13
      78:	6d 04       	cpc	r6, r13
      7a:	5d 05       	cpc	r21, r13
      7c:	5d 05       	cpc	r21, r13
      7e:	5d 05       	cpc	r21, r13
      80:	5d 05       	cpc	r21, r13
      82:	5d 05       	cpc	r21, r13
      84:	5d 05       	cpc	r21, r13
      86:	5d 05       	cpc	r21, r13
      88:	6d 04       	cpc	r6, r13
      8a:	5d 05       	cpc	r21, r13
      8c:	5d 05       	cpc	r21, r13
      8e:	5d 05       	cpc	r21, r13
      90:	5d 05       	cpc	r21, r13
      92:	5d 05       	cpc	r21, r13
      94:	5d 05       	cpc	r21, r13
      96:	5d 05       	cpc	r21, r13
      98:	75 04       	cpc	r7, r5
      9a:	5d 05       	cpc	r21, r13
      9c:	5d 05       	cpc	r21, r13
      9e:	5d 05       	cpc	r21, r13
      a0:	5d 05       	cpc	r21, r13
      a2:	5d 05       	cpc	r21, r13
      a4:	5d 05       	cpc	r21, r13
      a6:	5d 05       	cpc	r21, r13
      a8:	9b 04       	cpc	r9, r11
      aa:	5d 05       	cpc	r21, r13
      ac:	5d 05       	cpc	r21, r13
      ae:	5d 05       	cpc	r21, r13
      b0:	5d 05       	cpc	r21, r13
      b2:	5d 05       	cpc	r21, r13
      b4:	5d 05       	cpc	r21, r13
      b6:	5d 05       	cpc	r21, r13
      b8:	75 04       	cpc	r7, r5
      ba:	5d 05       	cpc	r21, r13
      bc:	5d 05       	cpc	r21, r13
      be:	5d 05       	cpc	r21, r13
      c0:	5d 05       	cpc	r21, r13
      c2:	5d 05       	cpc	r21, r13
      c4:	5d 05       	cpc	r21, r13
      c6:	5d 05       	cpc	r21, r13
      c8:	a1 04       	cpc	r10, r1
      ca:	5d 05       	cpc	r21, r13
      cc:	5d 05       	cpc	r21, r13
      ce:	5d 05       	cpc	r21, r13
      d0:	5d 05       	cpc	r21, r13
      d2:	5d 05       	cpc	r21, r13
      d4:	5d 05       	cpc	r21, r13
      d6:	5d 05       	cpc	r21, r13
      d8:	a7 04       	cpc	r10, r7
      da:	5d 05       	cpc	r21, r13
      dc:	5d 05       	cpc	r21, r13
      de:	5d 05       	cpc	r21, r13
      e0:	5d 05       	cpc	r21, r13
      e2:	5d 05       	cpc	r21, r13
      e4:	5d 05       	cpc	r21, r13
      e6:	5d 05       	cpc	r21, r13
      e8:	b9 04       	cpc	r11, r9
      ea:	5d 05       	cpc	r21, r13
      ec:	5d 05       	cpc	r21, r13
      ee:	5d 05       	cpc	r21, r13
      f0:	5d 05       	cpc	r21, r13
      f2:	5d 05       	cpc	r21, r13
      f4:	5d 05       	cpc	r21, r13
      f6:	5d 05       	cpc	r21, r13
      f8:	e3 04       	cpc	r14, r3
      fa:	5d 05       	cpc	r21, r13
      fc:	5d 05       	cpc	r21, r13
      fe:	5d 05       	cpc	r21, r13
     100:	5d 05       	cpc	r21, r13
     102:	5d 05       	cpc	r21, r13
     104:	5d 05       	cpc	r21, r13
     106:	5d 05       	cpc	r21, r13
     108:	ad 04       	cpc	r10, r13
     10a:	5d 05       	cpc	r21, r13
     10c:	5d 05       	cpc	r21, r13
     10e:	5d 05       	cpc	r21, r13
     110:	5d 05       	cpc	r21, r13
     112:	5d 05       	cpc	r21, r13
     114:	5d 05       	cpc	r21, r13
     116:	5d 05       	cpc	r21, r13
     118:	c7 04       	cpc	r12, r7
     11a:	5d 05       	cpc	r21, r13
     11c:	5d 05       	cpc	r21, r13
     11e:	5d 05       	cpc	r21, r13
     120:	5d 05       	cpc	r21, r13
     122:	5d 05       	cpc	r21, r13
     124:	5d 05       	cpc	r21, r13
     126:	5d 05       	cpc	r21, r13
     128:	e6 04       	cpc	r14, r6
     12a:	5d 05       	cpc	r21, r13
     12c:	5d 05       	cpc	r21, r13
     12e:	5d 05       	cpc	r21, r13
     130:	5d 05       	cpc	r21, r13
     132:	5d 05       	cpc	r21, r13
     134:	5d 05       	cpc	r21, r13
     136:	5d 05       	cpc	r21, r13
     138:	e6 04       	cpc	r14, r6
     13a:	5d 05       	cpc	r21, r13
     13c:	5d 05       	cpc	r21, r13
     13e:	5d 05       	cpc	r21, r13
     140:	5d 05       	cpc	r21, r13
     142:	5d 05       	cpc	r21, r13
     144:	5d 05       	cpc	r21, r13
     146:	5d 05       	cpc	r21, r13
     148:	e6 04       	cpc	r14, r6
     14a:	5d 05       	cpc	r21, r13
     14c:	5d 05       	cpc	r21, r13
     14e:	5d 05       	cpc	r21, r13
     150:	5d 05       	cpc	r21, r13
     152:	5d 05       	cpc	r21, r13
     154:	5d 05       	cpc	r21, r13
     156:	5d 05       	cpc	r21, r13
     158:	e6 04       	cpc	r14, r6
     15a:	5d 05       	cpc	r21, r13
     15c:	5d 05       	cpc	r21, r13
     15e:	5d 05       	cpc	r21, r13
     160:	5d 05       	cpc	r21, r13
     162:	5d 05       	cpc	r21, r13
     164:	5d 05       	cpc	r21, r13
     166:	5d 05       	cpc	r21, r13
     168:	ef 04       	cpc	r14, r15
     16a:	5d 05       	cpc	r21, r13
     16c:	5d 05       	cpc	r21, r13
     16e:	5d 05       	cpc	r21, r13
     170:	5d 05       	cpc	r21, r13
     172:	5d 05       	cpc	r21, r13
     174:	5d 05       	cpc	r21, r13
     176:	5d 05       	cpc	r21, r13
     178:	20 05       	cpc	r18, r0
     17a:	5d 05       	cpc	r21, r13
     17c:	5d 05       	cpc	r21, r13
     17e:	5d 05       	cpc	r21, r13
     180:	5d 05       	cpc	r21, r13
     182:	5d 05       	cpc	r21, r13
     184:	5d 05       	cpc	r21, r13
     186:	5d 05       	cpc	r21, r13
     188:	ef 04       	cpc	r14, r15
     18a:	5d 05       	cpc	r21, r13
     18c:	5d 05       	cpc	r21, r13
     18e:	5d 05       	cpc	r21, r13
     190:	5d 05       	cpc	r21, r13
     192:	5d 05       	cpc	r21, r13
     194:	5d 05       	cpc	r21, r13
     196:	5d 05       	cpc	r21, r13
     198:	20 05       	cpc	r18, r0
     19a:	5d 05       	cpc	r21, r13
     19c:	5d 05       	cpc	r21, r13
     19e:	5d 05       	cpc	r21, r13
     1a0:	5d 05       	cpc	r21, r13
     1a2:	5d 05       	cpc	r21, r13
     1a4:	5d 05       	cpc	r21, r13
     1a6:	5d 05       	cpc	r21, r13
     1a8:	07 05       	cpc	r16, r7
     1aa:	5d 05       	cpc	r21, r13
     1ac:	5d 05       	cpc	r21, r13
     1ae:	5d 05       	cpc	r21, r13
     1b0:	5d 05       	cpc	r21, r13
     1b2:	5d 05       	cpc	r21, r13
     1b4:	5d 05       	cpc	r21, r13
     1b6:	5d 05       	cpc	r21, r13
     1b8:	24 05       	cpc	r18, r4
     1ba:	5d 05       	cpc	r21, r13
     1bc:	5d 05       	cpc	r21, r13
     1be:	5d 05       	cpc	r21, r13
     1c0:	5d 05       	cpc	r21, r13
     1c2:	5d 05       	cpc	r21, r13
     1c4:	5d 05       	cpc	r21, r13
     1c6:	5d 05       	cpc	r21, r13
     1c8:	24 05       	cpc	r18, r4
     1ca:	5d 05       	cpc	r21, r13
     1cc:	5d 05       	cpc	r21, r13
     1ce:	5d 05       	cpc	r21, r13
     1d0:	5d 05       	cpc	r21, r13
     1d2:	5d 05       	cpc	r21, r13
     1d4:	5d 05       	cpc	r21, r13
     1d6:	5d 05       	cpc	r21, r13
     1d8:	39 05       	cpc	r19, r9
     1da:	5d 05       	cpc	r21, r13
     1dc:	5d 05       	cpc	r21, r13
     1de:	5d 05       	cpc	r21, r13
     1e0:	5d 05       	cpc	r21, r13
     1e2:	5d 05       	cpc	r21, r13
     1e4:	5d 05       	cpc	r21, r13
     1e6:	5d 05       	cpc	r21, r13
     1e8:	53 05       	cpc	r21, r3
     1ea:	5d 05       	cpc	r21, r13
     1ec:	5d 05       	cpc	r21, r13
     1ee:	5d 05       	cpc	r21, r13
     1f0:	5d 05       	cpc	r21, r13
     1f2:	5d 05       	cpc	r21, r13
     1f4:	5d 05       	cpc	r21, r13
     1f6:	5d 05       	cpc	r21, r13
     1f8:	53 05       	cpc	r21, r3

000001fa <__trampolines_end>:
     1fa:	00 00       	nop
     1fc:	00 08       	sbc	r0, r0
     1fe:	00 02       	muls	r16, r16
     200:	01 00       	.word	0x0001	; ????
     202:	00 03       	mulsu	r16, r16
     204:	04 07       	cpc	r16, r20
	...

0000020e <digital_pin_to_bit_mask_PGM>:
     20e:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     21e:	04 08 10 20                                         ... 

00000222 <digital_pin_to_port_PGM>:
     222:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     232:	03 03 03 03                                         ....

00000236 <port_to_output_PGM>:
     236:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000240 <port_to_mode_PGM>:
     240:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000024a <_ZZN6SdFile10make83NameEPKcPhE3__c>:
     24a:	7c 3c 3e 5e 2b 3d 3f 2f 5b 5d 3b 2c 2a 22 5c 00     |<>^+=?/[];,*"\.

0000025a <__ctors_start>:
     25a:	7d 06       	cpc	r7, r29
     25c:	7e 0b       	sbc	r23, r30
     25e:	03 0f       	add	r16, r19
     260:	fe 24       	eor	r15, r14

00000262 <__ctors_end>:
     262:	11 24       	eor	r1, r1
     264:	1f be       	out	0x3f, r1	; 63
     266:	cf ef       	ldi	r28, 0xFF	; 255
     268:	d8 e0       	ldi	r29, 0x08	; 8
     26a:	de bf       	out	0x3e, r29	; 62
     26c:	cd bf       	out	0x3d, r28	; 61

0000026e <__do_copy_data>:
     26e:	12 e0       	ldi	r17, 0x02	; 2
     270:	a0 e0       	ldi	r26, 0x00	; 0
     272:	b1 e0       	ldi	r27, 0x01	; 1
     274:	e4 e6       	ldi	r30, 0x64	; 100
     276:	f2 e5       	ldi	r31, 0x52	; 82
     278:	02 c0       	rjmp	.+4      	; 0x27e <__do_copy_data+0x10>
     27a:	05 90       	lpm	r0, Z+
     27c:	0d 92       	st	X+, r0
     27e:	ac 33       	cpi	r26, 0x3C	; 60
     280:	b1 07       	cpc	r27, r17
     282:	d9 f7       	brne	.-10     	; 0x27a <__do_copy_data+0xc>

00000284 <__do_clear_bss>:
     284:	25 e0       	ldi	r18, 0x05	; 5
     286:	ac e3       	ldi	r26, 0x3C	; 60
     288:	b2 e0       	ldi	r27, 0x02	; 2
     28a:	01 c0       	rjmp	.+2      	; 0x28e <.do_clear_bss_start>

0000028c <.do_clear_bss_loop>:
     28c:	1d 92       	st	X+, r1

0000028e <.do_clear_bss_start>:
     28e:	a1 39       	cpi	r26, 0x91	; 145
     290:	b2 07       	cpc	r27, r18
     292:	e1 f7       	brne	.-8      	; 0x28c <.do_clear_bss_loop>

00000294 <__do_global_ctors>:
     294:	11 e0       	ldi	r17, 0x01	; 1
     296:	c1 e3       	ldi	r28, 0x31	; 49
     298:	d1 e0       	ldi	r29, 0x01	; 1
     29a:	04 c0       	rjmp	.+8      	; 0x2a4 <__do_global_ctors+0x10>
     29c:	21 97       	sbiw	r28, 0x01	; 1
     29e:	fe 01       	movw	r30, r28
     2a0:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <__tablejump2__>
     2a4:	cd 32       	cpi	r28, 0x2D	; 45
     2a6:	d1 07       	cpc	r29, r17
     2a8:	c9 f7       	brne	.-14     	; 0x29c <__do_global_ctors+0x8>
     2aa:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <main>
     2ae:	0c 94 30 29 	jmp	0x5260	; 0x5260 <_exit>

000002b2 <__bad_interrupt>:
     2b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002b6 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
     2b6:	0e 94 04 29 	call	0x5208	; 0x5208 <abort>

000002ba <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	08 95       	ret

000002c0 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     2c0:	08 95       	ret

000002c2 <_ZN5Print5writeEPKhj>:
}

size_t Print::print(const String &s)
{
  return write(s.c_str(), s.length());
}
     2c2:	cf 92       	push	r12
     2c4:	df 92       	push	r13
     2c6:	ef 92       	push	r14
     2c8:	ff 92       	push	r15
     2ca:	0f 93       	push	r16
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	8c 01       	movw	r16, r24
     2d4:	db 01       	movw	r26, r22
     2d6:	c0 e0       	ldi	r28, 0x00	; 0
     2d8:	d0 e0       	ldi	r29, 0x00	; 0
     2da:	7a 01       	movw	r14, r20
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	e8 1a       	sub	r14, r24
     2e0:	f1 08       	sbc	r15, r1
     2e2:	45 2b       	or	r20, r21
     2e4:	a1 f0       	breq	.+40     	; 0x30e <_ZN5Print5writeEPKhj+0x4c>
     2e6:	f8 01       	movw	r30, r16
     2e8:	80 81       	ld	r24, Z
     2ea:	91 81       	ldd	r25, Z+1	; 0x01
     2ec:	fc 01       	movw	r30, r24
     2ee:	20 81       	ld	r18, Z
     2f0:	31 81       	ldd	r19, Z+1	; 0x01
     2f2:	6d 01       	movw	r12, r26
     2f4:	ff ef       	ldi	r31, 0xFF	; 255
     2f6:	cf 1a       	sub	r12, r31
     2f8:	df 0a       	sbc	r13, r31
     2fa:	6c 91       	ld	r22, X
     2fc:	c8 01       	movw	r24, r16
     2fe:	f9 01       	movw	r30, r18
     300:	09 95       	icall
     302:	89 2b       	or	r24, r25
     304:	21 f0       	breq	.+8      	; 0x30e <_ZN5Print5writeEPKhj+0x4c>
     306:	21 96       	adiw	r28, 0x01	; 1
     308:	a7 01       	movw	r20, r14
     30a:	d6 01       	movw	r26, r12
     30c:	e6 cf       	rjmp	.-52     	; 0x2da <_ZN5Print5writeEPKhj+0x18>
     30e:	ce 01       	movw	r24, r28
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	1f 91       	pop	r17
     316:	0f 91       	pop	r16
     318:	ff 90       	pop	r15
     31a:	ef 90       	pop	r14
     31c:	df 90       	pop	r13
     31e:	cf 90       	pop	r12
     320:	08 95       	ret

00000322 <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     322:	61 15       	cp	r22, r1
     324:	71 05       	cpc	r23, r1
     326:	81 f0       	breq	.+32     	; 0x348 <_ZN5Print5printEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
     328:	fb 01       	movw	r30, r22
     32a:	01 90       	ld	r0, Z+
     32c:	00 20       	and	r0, r0
     32e:	e9 f7       	brne	.-6      	; 0x32a <_ZN5Print5printEPKc+0x8>
     330:	31 97       	sbiw	r30, 0x01	; 1
     332:	af 01       	movw	r20, r30
     334:	46 1b       	sub	r20, r22
     336:	57 0b       	sbc	r21, r23
     338:	dc 01       	movw	r26, r24
     33a:	ed 91       	ld	r30, X+
     33c:	fc 91       	ld	r31, X
     33e:	02 80       	ldd	r0, Z+2	; 0x02
     340:	f3 81       	ldd	r31, Z+3	; 0x03
     342:	e0 2d       	mov	r30, r0
     344:	09 95       	icall
     346:	08 95       	ret
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0

size_t Print::print(const char str[])
{
  return write(str);
}
     34c:	08 95       	ret

0000034e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     34e:	83 30       	cpi	r24, 0x03	; 3
     350:	69 f0       	breq	.+26     	; 0x36c <turnOffPWM+0x1e>
     352:	28 f4       	brcc	.+10     	; 0x35e <turnOffPWM+0x10>
     354:	81 30       	cpi	r24, 0x01	; 1
     356:	b1 f0       	breq	.+44     	; 0x384 <turnOffPWM+0x36>
     358:	82 30       	cpi	r24, 0x02	; 2
     35a:	c1 f0       	breq	.+48     	; 0x38c <turnOffPWM+0x3e>
     35c:	08 95       	ret
     35e:	87 30       	cpi	r24, 0x07	; 7
     360:	c9 f0       	breq	.+50     	; 0x394 <turnOffPWM+0x46>
     362:	88 30       	cpi	r24, 0x08	; 8
     364:	e9 f0       	breq	.+58     	; 0x3a0 <turnOffPWM+0x52>
     366:	84 30       	cpi	r24, 0x04	; 4
     368:	01 f5       	brne	.+64     	; 0x3aa <turnOffPWM+0x5c>
     36a:	06 c0       	rjmp	.+12     	; 0x378 <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     36c:	e0 e8       	ldi	r30, 0x80	; 128
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	80 81       	ld	r24, Z
     372:	8f 77       	andi	r24, 0x7F	; 127
     374:	80 83       	st	Z, r24
     376:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     378:	e0 e8       	ldi	r30, 0x80	; 128
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	80 81       	ld	r24, Z
     37e:	8f 7d       	andi	r24, 0xDF	; 223
     380:	80 83       	st	Z, r24
     382:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     384:	84 b5       	in	r24, 0x24	; 36
     386:	8f 77       	andi	r24, 0x7F	; 127
     388:	84 bd       	out	0x24, r24	; 36
     38a:	08 95       	ret
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     38c:	84 b5       	in	r24, 0x24	; 36
     38e:	8f 7d       	andi	r24, 0xDF	; 223
     390:	84 bd       	out	0x24, r24	; 36
     392:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     394:	e0 eb       	ldi	r30, 0xB0	; 176
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	80 81       	ld	r24, Z
     39a:	8f 77       	andi	r24, 0x7F	; 127
     39c:	80 83       	st	Z, r24
     39e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     3a0:	e0 eb       	ldi	r30, 0xB0	; 176
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	8f 7d       	andi	r24, 0xDF	; 223
     3a8:	80 83       	st	Z, r24
     3aa:	08 95       	ret

000003ac <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	fc 01       	movw	r30, r24
     3b4:	e2 5f       	subi	r30, 0xF2	; 242
     3b6:	fd 4f       	sbci	r31, 0xFD	; 253
     3b8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     3ba:	fc 01       	movw	r30, r24
     3bc:	ee 5d       	subi	r30, 0xDE	; 222
     3be:	fd 4f       	sbci	r31, 0xFD	; 253
     3c0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     3c2:	88 23       	and	r24, r24
     3c4:	79 f1       	breq	.+94     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	88 0f       	add	r24, r24
     3ca:	99 1f       	adc	r25, r25
     3cc:	fc 01       	movw	r30, r24
     3ce:	e0 5c       	subi	r30, 0xC0	; 192
     3d0:	fd 4f       	sbci	r31, 0xFD	; 253
     3d2:	a5 91       	lpm	r26, Z+
     3d4:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     3d6:	fc 01       	movw	r30, r24
     3d8:	ea 5c       	subi	r30, 0xCA	; 202
     3da:	fd 4f       	sbci	r31, 0xFD	; 253
     3dc:	c5 91       	lpm	r28, Z+
     3de:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     3e0:	61 11       	cpse	r22, r1
     3e2:	0c c0       	rjmp	.+24     	; 0x3fc <pinMode+0x50>
		uint8_t oldSREG = SREG;
     3e4:	9f b7       	in	r25, 0x3f	; 63
                cli();
     3e6:	f8 94       	cli
		*reg &= ~bit;
     3e8:	8c 91       	ld	r24, X
     3ea:	e2 2f       	mov	r30, r18
     3ec:	e0 95       	com	r30
     3ee:	8e 23       	and	r24, r30
     3f0:	8c 93       	st	X, r24
		*out &= ~bit;
     3f2:	28 81       	ld	r18, Y
     3f4:	e2 23       	and	r30, r18
     3f6:	e8 83       	st	Y, r30
		SREG = oldSREG;
     3f8:	9f bf       	out	0x3f, r25	; 63
     3fa:	14 c0       	rjmp	.+40     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
	} else if (mode == INPUT_PULLUP) {
     3fc:	62 30       	cpi	r22, 0x02	; 2
     3fe:	61 f4       	brne	.+24     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		uint8_t oldSREG = SREG;
     400:	9f b7       	in	r25, 0x3f	; 63
                cli();
     402:	f8 94       	cli
		*reg &= ~bit;
     404:	8c 91       	ld	r24, X
     406:	32 2f       	mov	r19, r18
     408:	30 95       	com	r19
     40a:	83 23       	and	r24, r19
     40c:	8c 93       	st	X, r24
		*out |= bit;
     40e:	e8 81       	ld	r30, Y
     410:	e2 2b       	or	r30, r18
     412:	e8 83       	st	Y, r30
		SREG = oldSREG;
     414:	9f bf       	out	0x3f, r25	; 63
     416:	06 c0       	rjmp	.+12     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
	} else {
		uint8_t oldSREG = SREG;
     418:	8f b7       	in	r24, 0x3f	; 63
                cli();
     41a:	f8 94       	cli
		*reg |= bit;
     41c:	ec 91       	ld	r30, X
     41e:	e2 2b       	or	r30, r18
     420:	ec 93       	st	X, r30
		SREG = oldSREG;
     422:	8f bf       	out	0x3f, r24	; 63
	}
}
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	08 95       	ret

0000042a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     42a:	1f 93       	push	r17
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     430:	28 2f       	mov	r18, r24
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	f9 01       	movw	r30, r18
     436:	e6 50       	subi	r30, 0x06	; 6
     438:	fe 4f       	sbci	r31, 0xFE	; 254
     43a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     43c:	f9 01       	movw	r30, r18
     43e:	e2 5f       	subi	r30, 0xF2	; 242
     440:	fd 4f       	sbci	r31, 0xFD	; 253
     442:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     444:	f9 01       	movw	r30, r18
     446:	ee 5d       	subi	r30, 0xDE	; 222
     448:	fd 4f       	sbci	r31, 0xFD	; 253
     44a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     44c:	cc 23       	and	r28, r28
     44e:	d1 f0       	breq	.+52     	; 0x484 <digitalWrite+0x5a>
     450:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     452:	81 11       	cpse	r24, r1
     454:	0e 94 a7 01 	call	0x34e	; 0x34e <turnOffPWM>

	out = portOutputRegister(port);
     458:	ec 2f       	mov	r30, r28
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	ee 0f       	add	r30, r30
     45e:	ff 1f       	adc	r31, r31
     460:	ea 5c       	subi	r30, 0xCA	; 202
     462:	fd 4f       	sbci	r31, 0xFD	; 253
     464:	a5 91       	lpm	r26, Z+
     466:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     468:	8f b7       	in	r24, 0x3f	; 63
	cli();
     46a:	f8 94       	cli

	if (val == LOW) {
     46c:	d1 11       	cpse	r29, r1
     46e:	06 c0       	rjmp	.+12     	; 0x47c <digitalWrite+0x52>
		*out &= ~bit;
     470:	9c 91       	ld	r25, X
     472:	e1 2f       	mov	r30, r17
     474:	e0 95       	com	r30
     476:	e9 23       	and	r30, r25
     478:	ec 93       	st	X, r30
     47a:	03 c0       	rjmp	.+6      	; 0x482 <digitalWrite+0x58>
	} else {
		*out |= bit;
     47c:	ec 91       	ld	r30, X
     47e:	e1 2b       	or	r30, r17
     480:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
     482:	8f bf       	out	0x3f, r24	; 63
}
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	08 95       	ret

0000048c <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
     48c:	cf 93       	push	r28
  uint8_t sreg = SREG;
     48e:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
     490:	f8 94       	cli
  if (!initialized) {
     492:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <_ZN8SPIClass11initializedE>
     496:	81 11       	cpse	r24, r1
     498:	27 c0       	rjmp	.+78     	; 0x4e8 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
     49a:	ec e2       	ldi	r30, 0x2C	; 44
     49c:	f2 e0       	ldi	r31, 0x02	; 2
     49e:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
     4a0:	e8 e1       	ldi	r30, 0x18	; 24
     4a2:	f2 e0       	ldi	r31, 0x02	; 2
     4a4:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
     4a6:	e8 2f       	mov	r30, r24
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	ee 0f       	add	r30, r30
     4ac:	ff 1f       	adc	r31, r31
     4ae:	e0 5c       	subi	r30, 0xC0	; 192
     4b0:	fd 4f       	sbci	r31, 0xFD	; 253
     4b2:	a5 91       	lpm	r26, Z+
     4b4:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
     4b6:	ec 91       	ld	r30, X
     4b8:	e9 23       	and	r30, r25
     4ba:	21 f4       	brne	.+8      	; 0x4c4 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
     4bc:	61 e0       	ldi	r22, 0x01	; 1
     4be:	8a e0       	ldi	r24, 0x0A	; 10
     4c0:	0e 94 15 02 	call	0x42a	; 0x42a <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	8a e0       	ldi	r24, 0x0A	; 10
     4c8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
     4cc:	8c b5       	in	r24, 0x2c	; 44
     4ce:	80 61       	ori	r24, 0x10	; 16
     4d0:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
     4d2:	8c b5       	in	r24, 0x2c	; 44
     4d4:	80 64       	ori	r24, 0x40	; 64
     4d6:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
     4d8:	61 e0       	ldi	r22, 0x01	; 1
     4da:	8d e0       	ldi	r24, 0x0D	; 13
     4dc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <pinMode>
    pinMode(MOSI, OUTPUT);
     4e0:	61 e0       	ldi	r22, 0x01	; 1
     4e2:	8b e0       	ldi	r24, 0x0B	; 11
     4e4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <pinMode>
  }
  initialized++; // reference count
     4e8:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <_ZN8SPIClass11initializedE>
     4ec:	8f 5f       	subi	r24, 0xFF	; 255
     4ee:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <_ZN8SPIClass11initializedE>
  SREG = sreg;
     4f2:	cf bf       	out	0x3f, r28	; 63
}
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
     4f8:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <twi_state>
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <twi_sendStop>
     502:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <twi_inRepStart>
     506:	61 e0       	ldi	r22, 0x01	; 1
     508:	82 e1       	ldi	r24, 0x12	; 18
     50a:	0e 94 15 02 	call	0x42a	; 0x42a <digitalWrite>
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	83 e1       	ldi	r24, 0x13	; 19
     512:	0e 94 15 02 	call	0x42a	; 0x42a <digitalWrite>
     516:	e9 eb       	ldi	r30, 0xB9	; 185
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	80 81       	ld	r24, Z
     51c:	8e 7f       	andi	r24, 0xFE	; 254
     51e:	80 83       	st	Z, r24
     520:	80 81       	ld	r24, Z
     522:	8d 7f       	andi	r24, 0xFD	; 253
     524:	80 83       	st	Z, r24
     526:	88 e4       	ldi	r24, 0x48	; 72
     528:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     52c:	85 e4       	ldi	r24, 0x45	; 69
     52e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     532:	08 95       	ret

00000534 <twi_disable>:
     534:	ec eb       	ldi	r30, 0xBC	; 188
     536:	f0 e0       	ldi	r31, 0x00	; 0
     538:	80 81       	ld	r24, Z
     53a:	8a 7b       	andi	r24, 0xBA	; 186
     53c:	80 83       	st	Z, r24
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	82 e1       	ldi	r24, 0x12	; 18
     542:	0e 94 15 02 	call	0x42a	; 0x42a <digitalWrite>
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	83 e1       	ldi	r24, 0x13	; 19
     54a:	0e 94 15 02 	call	0x42a	; 0x42a <digitalWrite>
     54e:	08 95       	ret

00000550 <twi_transmit>:
     550:	ac 01       	movw	r20, r24
     552:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <twi_txBufferLength>
     556:	26 2f       	mov	r18, r22
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	29 0f       	add	r18, r25
     55c:	31 1d       	adc	r19, r1
     55e:	21 32       	cpi	r18, 0x21	; 33
     560:	31 05       	cpc	r19, r1
     562:	f4 f4       	brge	.+60     	; 0x5a0 <twi_transmit+0x50>
     564:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <twi_state>
     568:	84 30       	cpi	r24, 0x04	; 4
     56a:	e1 f4       	brne	.+56     	; 0x5a4 <twi_transmit+0x54>
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0f c0       	rjmp	.+30     	; 0x58e <twi_transmit+0x3e>
     570:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <twi_txBufferLength>
     574:	29 2f       	mov	r18, r25
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	f9 01       	movw	r30, r18
     57a:	e8 0f       	add	r30, r24
     57c:	f1 1d       	adc	r31, r1
     57e:	da 01       	movw	r26, r20
     580:	a2 0f       	add	r26, r18
     582:	b3 1f       	adc	r27, r19
     584:	8c 91       	ld	r24, X
     586:	ec 59       	subi	r30, 0x9C	; 156
     588:	fd 4f       	sbci	r31, 0xFD	; 253
     58a:	80 83       	st	Z, r24
     58c:	9f 5f       	subi	r25, 0xFF	; 255
     58e:	96 17       	cp	r25, r22
     590:	78 f3       	brcs	.-34     	; 0x570 <twi_transmit+0x20>
     592:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <twi_txBufferLength>
     596:	68 0f       	add	r22, r24
     598:	60 93 62 02 	sts	0x0262, r22	; 0x800262 <twi_txBufferLength>
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	08 95       	ret
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	08 95       	ret
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	08 95       	ret

000005a8 <twi_attachSlaveRxEvent>:
     5a8:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <twi_onSlaveReceive+0x1>
     5ac:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <twi_onSlaveReceive>
     5b0:	08 95       	ret

000005b2 <twi_attachSlaveTxEvent>:
     5b2:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <twi_onSlaveTransmit+0x1>
     5b6:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <twi_onSlaveTransmit>
     5ba:	08 95       	ret

000005bc <twi_reply>:
     5bc:	88 23       	and	r24, r24
     5be:	21 f0       	breq	.+8      	; 0x5c8 <twi_reply+0xc>
     5c0:	85 ec       	ldi	r24, 0xC5	; 197
     5c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5c6:	08 95       	ret
     5c8:	85 e8       	ldi	r24, 0x85	; 133
     5ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5ce:	08 95       	ret

000005d0 <twi_releaseBus>:
     5d0:	85 ec       	ldi	r24, 0xC5	; 197
     5d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5d6:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <twi_state>
     5da:	08 95       	ret

000005dc <twi_handleTimeout>:
     5dc:	ef 92       	push	r14
     5de:	ff 92       	push	r15
     5e0:	0f 93       	push	r16
     5e2:	1f 93       	push	r17
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <twi_timed_out_flag>
     5ee:	88 23       	and	r24, r24
     5f0:	71 f0       	breq	.+28     	; 0x60e <twi_handleTimeout+0x32>
     5f2:	c8 eb       	ldi	r28, 0xB8	; 184
     5f4:	d0 e0       	ldi	r29, 0x00	; 0
     5f6:	f8 80       	ld	r15, Y
     5f8:	0a eb       	ldi	r16, 0xBA	; 186
     5fa:	10 e0       	ldi	r17, 0x00	; 0
     5fc:	f8 01       	movw	r30, r16
     5fe:	e0 80       	ld	r14, Z
     600:	0e 94 9a 02 	call	0x534	; 0x534 <twi_disable>
     604:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <twi_init>
     608:	f8 01       	movw	r30, r16
     60a:	e0 82       	st	Z, r14
     60c:	f8 82       	st	Y, r15
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	1f 91       	pop	r17
     614:	0f 91       	pop	r16
     616:	ff 90       	pop	r15
     618:	ef 90       	pop	r14
     61a:	08 95       	ret

0000061c <twi_writeTo>:
     61c:	4f 92       	push	r4
     61e:	5f 92       	push	r5
     620:	6f 92       	push	r6
     622:	7f 92       	push	r7
     624:	8f 92       	push	r8
     626:	9f 92       	push	r9
     628:	af 92       	push	r10
     62a:	bf 92       	push	r11
     62c:	df 92       	push	r13
     62e:	ef 92       	push	r14
     630:	ff 92       	push	r15
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	41 32       	cpi	r20, 0x21	; 33
     63c:	08 f0       	brcs	.+2      	; 0x640 <twi_writeTo+0x24>
     63e:	d9 c0       	rjmp	.+434    	; 0x7f2 <twi_writeTo+0x1d6>
     640:	12 2f       	mov	r17, r18
     642:	d4 2f       	mov	r29, r20
     644:	7b 01       	movw	r14, r22
     646:	d8 2e       	mov	r13, r24
     648:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <micros>
     64c:	4b 01       	movw	r8, r22
     64e:	5c 01       	movw	r10, r24
     650:	27 c0       	rjmp	.+78     	; 0x6a0 <twi_writeTo+0x84>
     652:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <twi_timeout_us>
     656:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <twi_timeout_us+0x1>
     65a:	a0 91 ae 02 	lds	r26, 0x02AE	; 0x8002ae <twi_timeout_us+0x2>
     65e:	b0 91 af 02 	lds	r27, 0x02AF	; 0x8002af <twi_timeout_us+0x3>
     662:	89 2b       	or	r24, r25
     664:	8a 2b       	or	r24, r26
     666:	8b 2b       	or	r24, r27
     668:	d9 f0       	breq	.+54     	; 0x6a0 <twi_writeTo+0x84>
     66a:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <micros>
     66e:	dc 01       	movw	r26, r24
     670:	cb 01       	movw	r24, r22
     672:	88 19       	sub	r24, r8
     674:	99 09       	sbc	r25, r9
     676:	aa 09       	sbc	r26, r10
     678:	bb 09       	sbc	r27, r11
     67a:	40 90 ac 02 	lds	r4, 0x02AC	; 0x8002ac <twi_timeout_us>
     67e:	50 90 ad 02 	lds	r5, 0x02AD	; 0x8002ad <twi_timeout_us+0x1>
     682:	60 90 ae 02 	lds	r6, 0x02AE	; 0x8002ae <twi_timeout_us+0x2>
     686:	70 90 af 02 	lds	r7, 0x02AF	; 0x8002af <twi_timeout_us+0x3>
     68a:	48 16       	cp	r4, r24
     68c:	59 06       	cpc	r5, r25
     68e:	6a 06       	cpc	r6, r26
     690:	7b 06       	cpc	r7, r27
     692:	30 f4       	brcc	.+12     	; 0x6a0 <twi_writeTo+0x84>
     694:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <twi_do_reset_on_timeout>
     698:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twi_handleTimeout>
     69c:	c5 e0       	ldi	r28, 0x05	; 5
     69e:	ae c0       	rjmp	.+348    	; 0x7fc <twi_writeTo+0x1e0>
     6a0:	c0 91 b3 02 	lds	r28, 0x02B3	; 0x8002b3 <twi_state>
     6a4:	c1 11       	cpse	r28, r1
     6a6:	d5 cf       	rjmp	.-86     	; 0x652 <twi_writeTo+0x36>
     6a8:	82 e0       	ldi	r24, 0x02	; 2
     6aa:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <twi_state>
     6ae:	00 93 b1 02 	sts	0x02B1, r16	; 0x8002b1 <twi_sendStop>
     6b2:	8f ef       	ldi	r24, 0xFF	; 255
     6b4:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <twi_error>
     6b8:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <twi_masterBufferIndex>
     6bc:	d0 93 84 02 	sts	0x0284, r29	; 0x800284 <twi_masterBufferLength>
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0a c0       	rjmp	.+20     	; 0x6d8 <twi_writeTo+0xbc>
     6c4:	e9 2f       	mov	r30, r25
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	d7 01       	movw	r26, r14
     6ca:	ae 0f       	add	r26, r30
     6cc:	bf 1f       	adc	r27, r31
     6ce:	3c 91       	ld	r19, X
     6d0:	ea 57       	subi	r30, 0x7A	; 122
     6d2:	fd 4f       	sbci	r31, 0xFD	; 253
     6d4:	30 83       	st	Z, r19
     6d6:	9f 5f       	subi	r25, 0xFF	; 255
     6d8:	9d 17       	cp	r25, r29
     6da:	a0 f3       	brcs	.-24     	; 0x6c4 <twi_writeTo+0xa8>
     6dc:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <twi_slarw>
     6e0:	8d 2d       	mov	r24, r13
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	88 0f       	add	r24, r24
     6e6:	99 1f       	adc	r25, r25
     6e8:	d0 90 b2 02 	lds	r13, 0x02B2	; 0x8002b2 <twi_slarw>
     6ec:	8d 29       	or	r24, r13
     6ee:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <twi_slarw>
     6f2:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <twi_inRepStart>
     6f6:	81 30       	cpi	r24, 0x01	; 1
     6f8:	c9 f5       	brne	.+114    	; 0x76c <twi_writeTo+0x150>
     6fa:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <twi_inRepStart>
     6fe:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <micros>
     702:	4b 01       	movw	r8, r22
     704:	5c 01       	movw	r10, r24
     706:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <twi_slarw>
     70a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     70e:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <twi_timeout_us>
     712:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <twi_timeout_us+0x1>
     716:	a0 91 ae 02 	lds	r26, 0x02AE	; 0x8002ae <twi_timeout_us+0x2>
     71a:	b0 91 af 02 	lds	r27, 0x02AF	; 0x8002af <twi_timeout_us+0x3>
     71e:	89 2b       	or	r24, r25
     720:	8a 2b       	or	r24, r26
     722:	8b 2b       	or	r24, r27
     724:	d9 f0       	breq	.+54     	; 0x75c <twi_writeTo+0x140>
     726:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <micros>
     72a:	dc 01       	movw	r26, r24
     72c:	cb 01       	movw	r24, r22
     72e:	88 19       	sub	r24, r8
     730:	99 09       	sbc	r25, r9
     732:	aa 09       	sbc	r26, r10
     734:	bb 09       	sbc	r27, r11
     736:	40 90 ac 02 	lds	r4, 0x02AC	; 0x8002ac <twi_timeout_us>
     73a:	50 90 ad 02 	lds	r5, 0x02AD	; 0x8002ad <twi_timeout_us+0x1>
     73e:	60 90 ae 02 	lds	r6, 0x02AE	; 0x8002ae <twi_timeout_us+0x2>
     742:	70 90 af 02 	lds	r7, 0x02AF	; 0x8002af <twi_timeout_us+0x3>
     746:	48 16       	cp	r4, r24
     748:	59 06       	cpc	r5, r25
     74a:	6a 06       	cpc	r6, r26
     74c:	7b 06       	cpc	r7, r27
     74e:	30 f4       	brcc	.+12     	; 0x75c <twi_writeTo+0x140>
     750:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <twi_do_reset_on_timeout>
     754:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twi_handleTimeout>
     758:	c5 e0       	ldi	r28, 0x05	; 5
     75a:	50 c0       	rjmp	.+160    	; 0x7fc <twi_writeTo+0x1e0>
     75c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     760:	83 fd       	sbrc	r24, 3
     762:	d1 cf       	rjmp	.-94     	; 0x706 <twi_writeTo+0xea>
     764:	85 ec       	ldi	r24, 0xC5	; 197
     766:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     76a:	03 c0       	rjmp	.+6      	; 0x772 <twi_writeTo+0x156>
     76c:	85 ee       	ldi	r24, 0xE5	; 229
     76e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     772:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <micros>
     776:	4b 01       	movw	r8, r22
     778:	5c 01       	movw	r10, r24
     77a:	27 c0       	rjmp	.+78     	; 0x7ca <twi_writeTo+0x1ae>
     77c:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <twi_timeout_us>
     780:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <twi_timeout_us+0x1>
     784:	a0 91 ae 02 	lds	r26, 0x02AE	; 0x8002ae <twi_timeout_us+0x2>
     788:	b0 91 af 02 	lds	r27, 0x02AF	; 0x8002af <twi_timeout_us+0x3>
     78c:	89 2b       	or	r24, r25
     78e:	8a 2b       	or	r24, r26
     790:	8b 2b       	or	r24, r27
     792:	d9 f0       	breq	.+54     	; 0x7ca <twi_writeTo+0x1ae>
     794:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <micros>
     798:	dc 01       	movw	r26, r24
     79a:	cb 01       	movw	r24, r22
     79c:	88 19       	sub	r24, r8
     79e:	99 09       	sbc	r25, r9
     7a0:	aa 09       	sbc	r26, r10
     7a2:	bb 09       	sbc	r27, r11
     7a4:	40 90 ac 02 	lds	r4, 0x02AC	; 0x8002ac <twi_timeout_us>
     7a8:	50 90 ad 02 	lds	r5, 0x02AD	; 0x8002ad <twi_timeout_us+0x1>
     7ac:	60 90 ae 02 	lds	r6, 0x02AE	; 0x8002ae <twi_timeout_us+0x2>
     7b0:	70 90 af 02 	lds	r7, 0x02AF	; 0x8002af <twi_timeout_us+0x3>
     7b4:	48 16       	cp	r4, r24
     7b6:	59 06       	cpc	r5, r25
     7b8:	6a 06       	cpc	r6, r26
     7ba:	7b 06       	cpc	r7, r27
     7bc:	30 f4       	brcc	.+12     	; 0x7ca <twi_writeTo+0x1ae>
     7be:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <twi_do_reset_on_timeout>
     7c2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twi_handleTimeout>
     7c6:	c5 e0       	ldi	r28, 0x05	; 5
     7c8:	19 c0       	rjmp	.+50     	; 0x7fc <twi_writeTo+0x1e0>
     7ca:	11 23       	and	r17, r17
     7cc:	21 f0       	breq	.+8      	; 0x7d6 <twi_writeTo+0x1ba>
     7ce:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <twi_state>
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	99 f2       	breq	.-90     	; 0x77c <twi_writeTo+0x160>
     7d6:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <twi_error>
     7da:	8f 3f       	cpi	r24, 0xFF	; 255
     7dc:	79 f0       	breq	.+30     	; 0x7fc <twi_writeTo+0x1e0>
     7de:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <twi_error>
     7e2:	80 32       	cpi	r24, 0x20	; 32
     7e4:	41 f0       	breq	.+16     	; 0x7f6 <twi_writeTo+0x1da>
     7e6:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <twi_error>
     7ea:	80 33       	cpi	r24, 0x30	; 48
     7ec:	31 f4       	brne	.+12     	; 0x7fa <twi_writeTo+0x1de>
     7ee:	c3 e0       	ldi	r28, 0x03	; 3
     7f0:	05 c0       	rjmp	.+10     	; 0x7fc <twi_writeTo+0x1e0>
     7f2:	c1 e0       	ldi	r28, 0x01	; 1
     7f4:	03 c0       	rjmp	.+6      	; 0x7fc <twi_writeTo+0x1e0>
     7f6:	c2 e0       	ldi	r28, 0x02	; 2
     7f8:	01 c0       	rjmp	.+2      	; 0x7fc <twi_writeTo+0x1e0>
     7fa:	c4 e0       	ldi	r28, 0x04	; 4
     7fc:	8c 2f       	mov	r24, r28
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	ff 90       	pop	r15
     808:	ef 90       	pop	r14
     80a:	df 90       	pop	r13
     80c:	bf 90       	pop	r11
     80e:	af 90       	pop	r10
     810:	9f 90       	pop	r9
     812:	8f 90       	pop	r8
     814:	7f 90       	pop	r7
     816:	6f 90       	pop	r6
     818:	5f 90       	pop	r5
     81a:	4f 90       	pop	r4
     81c:	08 95       	ret

0000081e <twi_stop>:
     81e:	85 ed       	ldi	r24, 0xD5	; 213
     820:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     824:	40 91 ac 02 	lds	r20, 0x02AC	; 0x8002ac <twi_timeout_us>
     828:	50 91 ad 02 	lds	r21, 0x02AD	; 0x8002ad <twi_timeout_us+0x1>
     82c:	60 91 ae 02 	lds	r22, 0x02AE	; 0x8002ae <twi_timeout_us+0x2>
     830:	70 91 af 02 	lds	r23, 0x02AF	; 0x8002af <twi_timeout_us+0x3>
     834:	49 5f       	subi	r20, 0xF9	; 249
     836:	5f 4f       	sbci	r21, 0xFF	; 255
     838:	6f 4f       	sbci	r22, 0xFF	; 255
     83a:	7f 4f       	sbci	r23, 0xFF	; 255
     83c:	68 94       	set
     83e:	12 f8       	bld	r1, 2
     840:	76 95       	lsr	r23
     842:	67 95       	ror	r22
     844:	57 95       	ror	r21
     846:	47 95       	ror	r20
     848:	16 94       	lsr	r1
     84a:	d1 f7       	brne	.-12     	; 0x840 <twi_stop+0x22>
     84c:	1f c0       	rjmp	.+62     	; 0x88c <twi_stop+0x6e>
     84e:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <twi_timeout_us>
     852:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <twi_timeout_us+0x1>
     856:	a0 91 ae 02 	lds	r26, 0x02AE	; 0x8002ae <twi_timeout_us+0x2>
     85a:	b0 91 af 02 	lds	r27, 0x02AF	; 0x8002af <twi_timeout_us+0x3>
     85e:	89 2b       	or	r24, r25
     860:	8a 2b       	or	r24, r26
     862:	8b 2b       	or	r24, r27
     864:	99 f0       	breq	.+38     	; 0x88c <twi_stop+0x6e>
     866:	41 15       	cp	r20, r1
     868:	51 05       	cpc	r21, r1
     86a:	61 05       	cpc	r22, r1
     86c:	71 05       	cpc	r23, r1
     86e:	49 f0       	breq	.+18     	; 0x882 <twi_stop+0x64>
     870:	85 e3       	ldi	r24, 0x35	; 53
     872:	8a 95       	dec	r24
     874:	f1 f7       	brne	.-4      	; 0x872 <twi_stop+0x54>
     876:	00 00       	nop
     878:	41 50       	subi	r20, 0x01	; 1
     87a:	51 09       	sbc	r21, r1
     87c:	61 09       	sbc	r22, r1
     87e:	71 09       	sbc	r23, r1
     880:	05 c0       	rjmp	.+10     	; 0x88c <twi_stop+0x6e>
     882:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <twi_do_reset_on_timeout>
     886:	0e 94 ee 02 	call	0x5dc	; 0x5dc <twi_handleTimeout>
     88a:	08 95       	ret
     88c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     890:	84 fd       	sbrc	r24, 4
     892:	dd cf       	rjmp	.-70     	; 0x84e <twi_stop+0x30>
     894:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <twi_state>
     898:	08 95       	ret

0000089a <__vector_24>:

ISR(TWI_vect)
{
     89a:	1f 92       	push	r1
     89c:	0f 92       	push	r0
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	0f 92       	push	r0
     8a2:	11 24       	eor	r1, r1
     8a4:	2f 93       	push	r18
     8a6:	3f 93       	push	r19
     8a8:	4f 93       	push	r20
     8aa:	5f 93       	push	r21
     8ac:	6f 93       	push	r22
     8ae:	7f 93       	push	r23
     8b0:	8f 93       	push	r24
     8b2:	9f 93       	push	r25
     8b4:	af 93       	push	r26
     8b6:	bf 93       	push	r27
     8b8:	ef 93       	push	r30
     8ba:	ff 93       	push	r31
  switch(TW_STATUS){
     8bc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     8c0:	e8 2f       	mov	r30, r24
     8c2:	e8 7f       	andi	r30, 0xF8	; 248
     8c4:	8e 2f       	mov	r24, r30
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	89 3c       	cpi	r24, 0xC9	; 201
     8ca:	91 05       	cpc	r25, r1
     8cc:	08 f0       	brcs	.+2      	; 0x8d0 <__vector_24+0x36>
     8ce:	f5 c0       	rjmp	.+490    	; 0xaba <__stack+0x1bb>
     8d0:	fc 01       	movw	r30, r24
     8d2:	ec 5c       	subi	r30, 0xCC	; 204
     8d4:	ff 4f       	sbci	r31, 0xFF	; 255
     8d6:	0c 94 af 27 	jmp	0x4f5e	; 0x4f5e <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     8da:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <twi_slarw>
     8de:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      twi_reply(1);
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	0e 94 de 02 	call	0x5bc	; 0x5bc <twi_reply>
      break;
     8e8:	e8 c0       	rjmp	.+464    	; 0xaba <__stack+0x1bb>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     8ea:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <twi_masterBufferIndex>
     8ee:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <twi_masterBufferLength>
     8f2:	98 17       	cp	r25, r24
     8f4:	80 f4       	brcc	.+32     	; 0x916 <__stack+0x17>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     8f6:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <twi_masterBufferIndex>
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	8e 0f       	add	r24, r30
     8fe:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <twi_masterBufferIndex>
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	ea 57       	subi	r30, 0x7A	; 122
     906:	fd 4f       	sbci	r31, 0xFD	; 253
     908:	80 81       	ld	r24, Z
     90a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
        twi_reply(1);
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	0e 94 de 02 	call	0x5bc	; 0x5bc <twi_reply>
     914:	d2 c0       	rjmp	.+420    	; 0xaba <__stack+0x1bb>
      }else{
        if (twi_sendStop){
     916:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <twi_sendStop>
     91a:	88 23       	and	r24, r24
     91c:	19 f0       	breq	.+6      	; 0x924 <__stack+0x25>
          twi_stop();
     91e:	0e 94 0f 04 	call	0x81e	; 0x81e <twi_stop>
     922:	cb c0       	rjmp	.+406    	; 0xaba <__stack+0x1bb>
       } else {
         twi_inRepStart = true;	// we're gonna send the START
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <twi_inRepStart>
         // don't enable the interrupt. We'll generate the start, but we
         // avoid handling the interrupt until we're in the next transaction,
         // at the point where we would normally issue the start.
         TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     92a:	84 ea       	ldi	r24, 0xA4	; 164
     92c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
         twi_state = TWI_READY;
     930:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <twi_state>
     934:	c2 c0       	rjmp	.+388    	; 0xaba <__stack+0x1bb>
        }
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
     936:	80 e2       	ldi	r24, 0x20	; 32
     938:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <twi_error>
      twi_stop();
     93c:	0e 94 0f 04 	call	0x81e	; 0x81e <twi_stop>
      break;
     940:	bc c0       	rjmp	.+376    	; 0xaba <__stack+0x1bb>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     942:	80 e3       	ldi	r24, 0x30	; 48
     944:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <twi_error>
      twi_stop();
     948:	0e 94 0f 04 	call	0x81e	; 0x81e <twi_stop>
      break;
     94c:	b6 c0       	rjmp	.+364    	; 0xaba <__stack+0x1bb>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     94e:	88 e3       	ldi	r24, 0x38	; 56
     950:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <twi_error>
      twi_releaseBus();
     954:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <twi_releaseBus>
      break;
     958:	b0 c0       	rjmp	.+352    	; 0xaba <__stack+0x1bb>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     95a:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <twi_masterBufferIndex>
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	8e 0f       	add	r24, r30
     962:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <twi_masterBufferIndex>
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     96c:	ea 57       	subi	r30, 0x7A	; 122
     96e:	fd 4f       	sbci	r31, 0xFD	; 253
     970:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     972:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <twi_masterBufferIndex>
     976:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <twi_masterBufferLength>
     97a:	98 17       	cp	r25, r24
     97c:	20 f4       	brcc	.+8      	; 0x986 <__stack+0x87>
        twi_reply(1);
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	0e 94 de 02 	call	0x5bc	; 0x5bc <twi_reply>
     984:	9a c0       	rjmp	.+308    	; 0xaba <__stack+0x1bb>
      }else{
        twi_reply(0);
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	0e 94 de 02 	call	0x5bc	; 0x5bc <twi_reply>
     98c:	96 c0       	rjmp	.+300    	; 0xaba <__stack+0x1bb>
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     98e:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <twi_masterBufferIndex>
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	8e 0f       	add	r24, r30
     996:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <twi_masterBufferIndex>
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     9a0:	ea 57       	subi	r30, 0x7A	; 122
     9a2:	fd 4f       	sbci	r31, 0xFD	; 253
     9a4:	80 83       	st	Z, r24
      if (twi_sendStop){
     9a6:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <twi_sendStop>
     9aa:	88 23       	and	r24, r24
     9ac:	19 f0       	breq	.+6      	; 0x9b4 <__stack+0xb5>
        twi_stop();
     9ae:	0e 94 0f 04 	call	0x81e	; 0x81e <twi_stop>
     9b2:	83 c0       	rjmp	.+262    	; 0xaba <__stack+0x1bb>
      } else {
        twi_inRepStart = true;	// we're gonna send the START
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     9ba:	84 ea       	ldi	r24, 0xA4	; 164
     9bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
        twi_state = TWI_READY;
     9c0:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <twi_state>
     9c4:	7a c0       	rjmp	.+244    	; 0xaba <__stack+0x1bb>
      }
      break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
     9c6:	0e 94 0f 04 	call	0x81e	; 0x81e <twi_stop>
      break;
     9ca:	77 c0       	rjmp	.+238    	; 0xaba <__stack+0x1bb>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     9cc:	83 e0       	ldi	r24, 0x03	; 3
     9ce:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     9d2:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <twi_rxBufferIndex>
      twi_reply(1);
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	0e 94 de 02 	call	0x5bc	; 0x5bc <twi_reply>
      break;
     9dc:	6e c0       	rjmp	.+220    	; 0xaba <__stack+0x1bb>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     9de:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <twi_rxBufferIndex>
     9e2:	80 32       	cpi	r24, 0x20	; 32
     9e4:	80 f4       	brcc	.+32     	; 0xa06 <__stack+0x107>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     9e6:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <twi_rxBufferIndex>
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	8e 0f       	add	r24, r30
     9ee:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <twi_rxBufferIndex>
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     9f8:	ee 5b       	subi	r30, 0xBE	; 190
     9fa:	fd 4f       	sbci	r31, 0xFD	; 253
     9fc:	80 83       	st	Z, r24
        twi_reply(1);
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	0e 94 de 02 	call	0x5bc	; 0x5bc <twi_reply>
     a04:	5a c0       	rjmp	.+180    	; 0xaba <__stack+0x1bb>
      }else{
        // otherwise nack
        twi_reply(0);
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	0e 94 de 02 	call	0x5bc	; 0x5bc <twi_reply>
     a0c:	56 c0       	rjmp	.+172    	; 0xaba <__stack+0x1bb>
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     a0e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
     a12:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <twi_rxBufferIndex>
     a16:	80 32       	cpi	r24, 0x20	; 32
     a18:	30 f4       	brcc	.+12     	; 0xa26 <__stack+0x127>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     a1a:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <twi_rxBufferIndex>
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	ee 5b       	subi	r30, 0xBE	; 190
     a22:	fd 4f       	sbci	r31, 0xFD	; 253
     a24:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     a26:	60 91 41 02 	lds	r22, 0x0241	; 0x800241 <twi_rxBufferIndex>
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	e0 91 a6 02 	lds	r30, 0x02A6	; 0x8002a6 <twi_onSlaveReceive>
     a30:	f0 91 a7 02 	lds	r31, 0x02A7	; 0x8002a7 <twi_onSlaveReceive+0x1>
     a34:	82 e4       	ldi	r24, 0x42	; 66
     a36:	92 e0       	ldi	r25, 0x02	; 2
     a38:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     a3a:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <twi_rxBufferIndex>
      break;
     a3e:	3d c0       	rjmp	.+122    	; 0xaba <__stack+0x1bb>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	0e 94 de 02 	call	0x5bc	; 0x5bc <twi_reply>
      break;
     a46:	39 c0       	rjmp	.+114    	; 0xaba <__stack+0x1bb>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     a48:	84 e0       	ldi	r24, 0x04	; 4
     a4a:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     a4e:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     a52:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     a56:	e0 91 a8 02 	lds	r30, 0x02A8	; 0x8002a8 <twi_onSlaveTransmit>
     a5a:	f0 91 a9 02 	lds	r31, 0x02A9	; 0x8002a9 <twi_onSlaveTransmit+0x1>
     a5e:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     a60:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <twi_txBufferLength>
     a64:	81 11       	cpse	r24, r1
     a66:	05 c0       	rjmp	.+10     	; 0xa72 <__stack+0x173>
        twi_txBufferLength = 1;
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
     a6e:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     a72:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <twi_txBufferIndex>
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	8e 0f       	add	r24, r30
     a7a:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <twi_txBufferIndex>
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	ec 59       	subi	r30, 0x9C	; 156
     a82:	fd 4f       	sbci	r31, 0xFD	; 253
     a84:	80 81       	ld	r24, Z
     a86:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     a8a:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <twi_txBufferIndex>
     a8e:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <twi_txBufferLength>
     a92:	98 17       	cp	r25, r24
     a94:	20 f4       	brcc	.+8      	; 0xa9e <__stack+0x19f>
        twi_reply(1);
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	0e 94 de 02 	call	0x5bc	; 0x5bc <twi_reply>
     a9c:	0e c0       	rjmp	.+28     	; 0xaba <__stack+0x1bb>
      }else{
        twi_reply(0);
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	0e 94 de 02 	call	0x5bc	; 0x5bc <twi_reply>
     aa4:	0a c0       	rjmp	.+20     	; 0xaba <__stack+0x1bb>
      }
      break;
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	0e 94 de 02 	call	0x5bc	; 0x5bc <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
     aac:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <twi_state>
      break;
     ab0:	04 c0       	rjmp	.+8      	; 0xaba <__stack+0x1bb>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     ab2:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <twi_error>
      twi_stop();
     ab6:	0e 94 0f 04 	call	0x81e	; 0x81e <twi_stop>
      break;
  }
}
     aba:	ff 91       	pop	r31
     abc:	ef 91       	pop	r30
     abe:	bf 91       	pop	r27
     ac0:	af 91       	pop	r26
     ac2:	9f 91       	pop	r25
     ac4:	8f 91       	pop	r24
     ac6:	7f 91       	pop	r23
     ac8:	6f 91       	pop	r22
     aca:	5f 91       	pop	r21
     acc:	4f 91       	pop	r20
     ace:	3f 91       	pop	r19
     ad0:	2f 91       	pop	r18
     ad2:	0f 90       	pop	r0
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	0f 90       	pop	r0
     ad8:	1f 90       	pop	r1
     ada:	18 95       	reti

00000adc <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
     adc:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <_ZN7TwoWire14rxBufferLengthE>
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	20 91 e9 02 	lds	r18, 0x02E9	; 0x8002e9 <_ZN7TwoWire13rxBufferIndexE>
     ae6:	82 1b       	sub	r24, r18
     ae8:	91 09       	sbc	r25, r1
     aea:	08 95       	ret

00000aec <_ZN7TwoWire4readEv>:
     aec:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <_ZN7TwoWire13rxBufferIndexE>
     af0:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <_ZN7TwoWire14rxBufferLengthE>
     af4:	98 17       	cp	r25, r24
     af6:	50 f4       	brcc	.+20     	; 0xb0c <_ZN7TwoWire4readEv+0x20>
     af8:	e9 2f       	mov	r30, r25
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	e6 51       	subi	r30, 0x16	; 22
     afe:	fd 4f       	sbci	r31, 0xFD	; 253
     b00:	20 81       	ld	r18, Z
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	9f 5f       	subi	r25, 0xFF	; 255
     b06:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <_ZN7TwoWire13rxBufferIndexE>
     b0a:	02 c0       	rjmp	.+4      	; 0xb10 <_ZN7TwoWire4readEv+0x24>
     b0c:	2f ef       	ldi	r18, 0xFF	; 255
     b0e:	3f ef       	ldi	r19, 0xFF	; 255
     b10:	c9 01       	movw	r24, r18
     b12:	08 95       	ret

00000b14 <_ZN7TwoWire4peekEv>:
     b14:	e0 91 e9 02 	lds	r30, 0x02E9	; 0x8002e9 <_ZN7TwoWire13rxBufferIndexE>
     b18:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <_ZN7TwoWire14rxBufferLengthE>
     b1c:	e8 17       	cp	r30, r24
     b1e:	30 f4       	brcc	.+12     	; 0xb2c <_ZN7TwoWire4peekEv+0x18>
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	e6 51       	subi	r30, 0x16	; 22
     b24:	fd 4f       	sbci	r31, 0xFD	; 253
     b26:	80 81       	ld	r24, Z
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	08 95       	ret
     b2c:	8f ef       	ldi	r24, 0xFF	; 255
     b2e:	9f ef       	ldi	r25, 0xFF	; 255
     b30:	08 95       	ret

00000b32 <_ZN7TwoWire5flushEv>:
     b32:	08 95       	ret

00000b34 <_ZN7TwoWire16onReceiveServiceEPhi>:
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	ec 01       	movw	r28, r24
     b3a:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <_ZN7TwoWire14user_onReceiveE>
     b3e:	f0 91 c1 02 	lds	r31, 0x02C1	; 0x8002c1 <_ZN7TwoWire14user_onReceiveE+0x1>
     b42:	30 97       	sbiw	r30, 0x00	; 0
     b44:	e1 f0       	breq	.+56     	; 0xb7e <_ZN7TwoWire16onReceiveServiceEPhi+0x4a>
     b46:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <_ZN7TwoWire13rxBufferIndexE>
     b4a:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <_ZN7TwoWire14rxBufferLengthE>
     b4e:	98 17       	cp	r25, r24
     b50:	b0 f0       	brcs	.+44     	; 0xb7e <_ZN7TwoWire16onReceiveServiceEPhi+0x4a>
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	29 2f       	mov	r18, r25
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	26 17       	cp	r18, r22
     b5a:	37 07       	cpc	r19, r23
     b5c:	54 f4       	brge	.+20     	; 0xb72 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
     b5e:	de 01       	movw	r26, r28
     b60:	a9 0f       	add	r26, r25
     b62:	b1 1d       	adc	r27, r1
     b64:	4c 91       	ld	r20, X
     b66:	d9 01       	movw	r26, r18
     b68:	a6 51       	subi	r26, 0x16	; 22
     b6a:	bd 4f       	sbci	r27, 0xFD	; 253
     b6c:	4c 93       	st	X, r20
     b6e:	9f 5f       	subi	r25, 0xFF	; 255
     b70:	f1 cf       	rjmp	.-30     	; 0xb54 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
     b72:	cb 01       	movw	r24, r22
     b74:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <_ZN7TwoWire13rxBufferIndexE>
     b78:	60 93 e8 02 	sts	0x02E8, r22	; 0x8002e8 <_ZN7TwoWire14rxBufferLengthE>
     b7c:	09 95       	icall
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	08 95       	ret

00000b84 <_ZN7TwoWire16onRequestServiceEv>:
     b84:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <_ZN7TwoWire14user_onRequestE>
     b88:	f0 91 c3 02 	lds	r31, 0x02C3	; 0x8002c3 <_ZN7TwoWire14user_onRequestE+0x1>
     b8c:	30 97       	sbiw	r30, 0x00	; 0
     b8e:	29 f0       	breq	.+10     	; 0xb9a <_ZN7TwoWire16onRequestServiceEv+0x16>
     b90:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <_ZN7TwoWire13txBufferIndexE>
     b94:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <_ZN7TwoWire14txBufferLengthE>
     b98:	09 95       	icall
     b9a:	08 95       	ret

00000b9c <_ZN7TwoWire5writeEPKhj>:
     b9c:	cf 92       	push	r12
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	8c 01       	movw	r16, r24
     bae:	6b 01       	movw	r12, r22
     bb0:	7a 01       	movw	r14, r20
     bb2:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <_ZN7TwoWire12transmittingE>
     bb6:	88 23       	and	r24, r24
     bb8:	99 f0       	breq	.+38     	; 0xbe0 <_ZN7TwoWire5writeEPKhj+0x44>
     bba:	c0 e0       	ldi	r28, 0x00	; 0
     bbc:	d0 e0       	ldi	r29, 0x00	; 0
     bbe:	ce 15       	cp	r28, r14
     bc0:	df 05       	cpc	r29, r15
     bc2:	90 f4       	brcc	.+36     	; 0xbe8 <_ZN7TwoWire5writeEPKhj+0x4c>
     bc4:	d8 01       	movw	r26, r16
     bc6:	ed 91       	ld	r30, X+
     bc8:	fc 91       	ld	r31, X
     bca:	01 90       	ld	r0, Z+
     bcc:	f0 81       	ld	r31, Z
     bce:	e0 2d       	mov	r30, r0
     bd0:	d6 01       	movw	r26, r12
     bd2:	ac 0f       	add	r26, r28
     bd4:	bd 1f       	adc	r27, r29
     bd6:	6c 91       	ld	r22, X
     bd8:	c8 01       	movw	r24, r16
     bda:	09 95       	icall
     bdc:	21 96       	adiw	r28, 0x01	; 1
     bde:	ef cf       	rjmp	.-34     	; 0xbbe <_ZN7TwoWire5writeEPKhj+0x22>
     be0:	64 2f       	mov	r22, r20
     be2:	c6 01       	movw	r24, r12
     be4:	0e 94 a8 02 	call	0x550	; 0x550 <twi_transmit>
     be8:	c7 01       	movw	r24, r14
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	ff 90       	pop	r15
     bf4:	ef 90       	pop	r14
     bf6:	df 90       	pop	r13
     bf8:	cf 90       	pop	r12
     bfa:	08 95       	ret

00000bfc <_ZN7TwoWire5writeEh>:
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	1f 92       	push	r1
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	fc 01       	movw	r30, r24
     c08:	69 83       	std	Y+1, r22	; 0x01
     c0a:	90 91 c4 02 	lds	r25, 0x02C4	; 0x8002c4 <_ZN7TwoWire12transmittingE>
     c0e:	99 23       	and	r25, r25
     c10:	d9 f0       	breq	.+54     	; 0xc48 <_ZN7TwoWire5writeEh+0x4c>
     c12:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <_ZN7TwoWire14txBufferLengthE>
     c16:	90 32       	cpi	r25, 0x20	; 32
     c18:	38 f0       	brcs	.+14     	; 0xc28 <_ZN7TwoWire5writeEh+0x2c>
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	93 83       	std	Z+3, r25	; 0x03
     c20:	82 83       	std	Z+2, r24	; 0x02
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	17 c0       	rjmp	.+46     	; 0xc56 <_ZN7TwoWire5writeEh+0x5a>
     c28:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <_ZN7TwoWire13txBufferIndexE>
     c2c:	e8 2f       	mov	r30, r24
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	e9 53       	subi	r30, 0x39	; 57
     c32:	fd 4f       	sbci	r31, 0xFD	; 253
     c34:	99 81       	ldd	r25, Y+1	; 0x01
     c36:	90 83       	st	Z, r25
     c38:	8f 5f       	subi	r24, 0xFF	; 255
     c3a:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <_ZN7TwoWire13txBufferIndexE>
     c3e:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <_ZN7TwoWire14txBufferLengthE>
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	07 c0       	rjmp	.+14     	; 0xc56 <_ZN7TwoWire5writeEh+0x5a>
     c48:	61 e0       	ldi	r22, 0x01	; 1
     c4a:	ce 01       	movw	r24, r28
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	0e 94 a8 02 	call	0x550	; 0x550 <twi_transmit>
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0f 90       	pop	r0
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	08 95       	ret

00000c5e <_ZN7TwoWireC1Ev>:
     c5e:	fc 01       	movw	r30, r24
     c60:	13 82       	std	Z+3, r1	; 0x03
     c62:	12 82       	std	Z+2, r1	; 0x02
     c64:	88 ee       	ldi	r24, 0xE8	; 232
     c66:	93 e0       	ldi	r25, 0x03	; 3
     c68:	a0 e0       	ldi	r26, 0x00	; 0
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	84 83       	std	Z+4, r24	; 0x04
     c6e:	95 83       	std	Z+5, r25	; 0x05
     c70:	a6 83       	std	Z+6, r26	; 0x06
     c72:	b7 83       	std	Z+7, r27	; 0x07
     c74:	87 e7       	ldi	r24, 0x77	; 119
     c76:	91 e0       	ldi	r25, 0x01	; 1
     c78:	91 83       	std	Z+1, r25	; 0x01
     c7a:	80 83       	st	Z, r24
     c7c:	08 95       	ret

00000c7e <_Z41__static_initialization_and_destruction_0ii>:
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	39 f4       	brne	.+14     	; 0xc90 <_Z41__static_initialization_and_destruction_0ii+0x12>
     c82:	6f 3f       	cpi	r22, 0xFF	; 255
     c84:	7f 4f       	sbci	r23, 0xFF	; 255
     c86:	21 f4       	brne	.+8      	; 0xc90 <_Z41__static_initialization_and_destruction_0ii+0x12>
     c88:	84 eb       	ldi	r24, 0xB4	; 180
     c8a:	92 e0       	ldi	r25, 0x02	; 2
     c8c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN7TwoWireC1Ev>
     c90:	08 95       	ret

00000c92 <_ZN7TwoWire5beginEv>:
     c92:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <_ZN7TwoWire13rxBufferIndexE>
     c96:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <_ZN7TwoWire14rxBufferLengthE>
     c9a:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <_ZN7TwoWire13txBufferIndexE>
     c9e:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <_ZN7TwoWire14txBufferLengthE>
     ca2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <twi_init>
     ca6:	82 ec       	ldi	r24, 0xC2	; 194
     ca8:	95 e0       	ldi	r25, 0x05	; 5
     caa:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <twi_attachSlaveTxEvent>
     cae:	8a e9       	ldi	r24, 0x9A	; 154
     cb0:	95 e0       	ldi	r25, 0x05	; 5
     cb2:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <twi_attachSlaveRxEvent>
     cb6:	08 95       	ret

00000cb8 <_ZN7TwoWire17beginTransmissionEh>:
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <_ZN7TwoWire12transmittingE>
     cbe:	60 93 e7 02 	sts	0x02E7, r22	; 0x8002e7 <_ZN7TwoWire9txAddressE>
     cc2:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <_ZN7TwoWire13txBufferIndexE>
     cc6:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <_ZN7TwoWire14txBufferLengthE>
     cca:	08 95       	ret

00000ccc <_ZN7TwoWire15endTransmissionEh>:
     ccc:	0f 93       	push	r16
     cce:	40 91 c5 02 	lds	r20, 0x02C5	; 0x8002c5 <_ZN7TwoWire14txBufferLengthE>
     cd2:	06 2f       	mov	r16, r22
     cd4:	21 e0       	ldi	r18, 0x01	; 1
     cd6:	67 ec       	ldi	r22, 0xC7	; 199
     cd8:	72 e0       	ldi	r23, 0x02	; 2
     cda:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <_ZN7TwoWire9txAddressE>
     cde:	0e 94 0e 03 	call	0x61c	; 0x61c <twi_writeTo>
     ce2:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <_ZN7TwoWire13txBufferIndexE>
     ce6:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <_ZN7TwoWire14txBufferLengthE>
     cea:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <_ZN7TwoWire12transmittingE>
     cee:	0f 91       	pop	r16
     cf0:	08 95       	ret

00000cf2 <_ZN7TwoWire15endTransmissionEv>:
     cf2:	61 e0       	ldi	r22, 0x01	; 1
     cf4:	0e 94 66 06 	call	0xccc	; 0xccc <_ZN7TwoWire15endTransmissionEh>
     cf8:	08 95       	ret

00000cfa <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     cfa:	6f ef       	ldi	r22, 0xFF	; 255
     cfc:	7f ef       	ldi	r23, 0xFF	; 255
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_Z41__static_initialization_and_destruction_0ii>
     d06:	08 95       	ret

00000d08 <_ZN5SDLib4File5writeEh>:
}

// a directory is a special type of file
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	1f 92       	push	r1
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	69 83       	std	Y+1, r22	; 0x01
     d14:	dc 01       	movw	r26, r24
     d16:	ed 91       	ld	r30, X+
     d18:	fc 91       	ld	r31, X
     d1a:	02 80       	ldd	r0, Z+2	; 0x02
     d1c:	f3 81       	ldd	r31, Z+3	; 0x03
     d1e:	e0 2d       	mov	r30, r0
     d20:	41 e0       	ldi	r20, 0x01	; 1
     d22:	50 e0       	ldi	r21, 0x00	; 0
     d24:	be 01       	movw	r22, r28
     d26:	6f 5f       	subi	r22, 0xFF	; 255
     d28:	7f 4f       	sbci	r23, 0xFF	; 255
     d2a:	09 95       	icall
     d2c:	0f 90       	pop	r0
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	08 95       	ret

00000d34 <_ZN5SDLib4File17availableForWriteEv>:
     d34:	dc 01       	movw	r26, r24
     d36:	59 96       	adiw	r26, 0x19	; 25
     d38:	8d 91       	ld	r24, X+
     d3a:	9c 91       	ld	r25, X
     d3c:	5a 97       	sbiw	r26, 0x1a	; 26
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	41 f0       	breq	.+16     	; 0xd52 <_ZN5SDLib4File17availableForWriteEv+0x1e>
     d42:	dc 01       	movw	r26, r24
     d44:	ed 91       	ld	r30, X+
     d46:	fc 91       	ld	r31, X
     d48:	04 80       	ldd	r0, Z+4	; 0x04
     d4a:	f5 81       	ldd	r31, Z+5	; 0x05
     d4c:	e0 2d       	mov	r30, r0
     d4e:	09 95       	icall
     d50:	08 95       	ret
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	08 95       	ret

00000d58 <_ZN5SDLib4File5writeEPKhj>:
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	dc 01       	movw	r26, r24
     d5e:	59 96       	adiw	r26, 0x19	; 25
     d60:	ed 91       	ld	r30, X+
     d62:	fc 91       	ld	r31, X
     d64:	5a 97       	sbiw	r26, 0x1a	; 26
     d66:	30 97       	sbiw	r30, 0x00	; 0
     d68:	49 f4       	brne	.+18     	; 0xd7c <_ZN5SDLib4File5writeEPKhj+0x24>
     d6a:	21 e0       	ldi	r18, 0x01	; 1
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	13 96       	adiw	r26, 0x03	; 3
     d70:	3c 93       	st	X, r19
     d72:	2e 93       	st	-X, r18
     d74:	12 97       	sbiw	r26, 0x02	; 2
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	13 c0       	rjmp	.+38     	; 0xda2 <_ZN5SDLib4File5writeEPKhj+0x4a>
     d7c:	ec 01       	movw	r28, r24
     d7e:	13 82       	std	Z+3, r1	; 0x03
     d80:	12 82       	std	Z+2, r1	; 0x02
     d82:	89 8d       	ldd	r24, Y+25	; 0x19
     d84:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d86:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <_ZN6SdFile5writeEPKvj>
     d8a:	e9 8d       	ldd	r30, Y+25	; 0x19
     d8c:	fa 8d       	ldd	r31, Y+26	; 0x1a
     d8e:	22 81       	ldd	r18, Z+2	; 0x02
     d90:	33 81       	ldd	r19, Z+3	; 0x03
     d92:	23 2b       	or	r18, r19
     d94:	31 f0       	breq	.+12     	; 0xda2 <_ZN5SDLib4File5writeEPKhj+0x4a>
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	9b 83       	std	Y+3, r25	; 0x03
     d9c:	8a 83       	std	Y+2, r24	; 0x02
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	08 95       	ret

00000da8 <_ZN5SDLib4File4readEv>:
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	1f 92       	push	r1
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	fc 01       	movw	r30, r24
     db4:	81 8d       	ldd	r24, Z+25	; 0x19
     db6:	92 8d       	ldd	r25, Z+26	; 0x1a
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	79 f0       	breq	.+30     	; 0xdda <_ZN5SDLib4File4readEv+0x32>
     dbc:	41 e0       	ldi	r20, 0x01	; 1
     dbe:	50 e0       	ldi	r21, 0x00	; 0
     dc0:	be 01       	movw	r22, r28
     dc2:	6f 5f       	subi	r22, 0xFF	; 255
     dc4:	7f 4f       	sbci	r23, 0xFF	; 255
     dc6:	0e 94 62 10 	call	0x20c4	; 0x20c4 <_ZN6SdFile4readEPvj>
     dca:	01 97       	sbiw	r24, 0x01	; 1
     dcc:	19 f4       	brne	.+6      	; 0xdd4 <_ZN5SDLib4File4readEv+0x2c>
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	05 c0       	rjmp	.+10     	; 0xdde <_ZN5SDLib4File4readEv+0x36>
     dd4:	8f ef       	ldi	r24, 0xFF	; 255
     dd6:	9f ef       	ldi	r25, 0xFF	; 255
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <_ZN5SDLib4File4readEv+0x36>
     dda:	8f ef       	ldi	r24, 0xFF	; 255
     ddc:	9f ef       	ldi	r25, 0xFF	; 255
     dde:	0f 90       	pop	r0
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	08 95       	ret

00000de6 <_ZN5SDLib4File4peekEv>:
     de6:	ef 92       	push	r14
     de8:	ff 92       	push	r15
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	1f 92       	push	r1
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	fc 01       	movw	r30, r24
     dfa:	81 8d       	ldd	r24, Z+25	; 0x19
     dfc:	92 8d       	ldd	r25, Z+26	; 0x1a
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	19 f1       	breq	.+70     	; 0xe48 <_ZN5SDLib4File4peekEv+0x62>
     e02:	8f 01       	movw	r16, r30
     e04:	41 e0       	ldi	r20, 0x01	; 1
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	be 01       	movw	r22, r28
     e0a:	6f 5f       	subi	r22, 0xFF	; 255
     e0c:	7f 4f       	sbci	r23, 0xFF	; 255
     e0e:	0e 94 62 10 	call	0x20c4	; 0x20c4 <_ZN6SdFile4readEPvj>
     e12:	01 97       	sbiw	r24, 0x01	; 1
     e14:	19 f4       	brne	.+6      	; 0xe1c <_ZN5SDLib4File4peekEv+0x36>
     e16:	e9 80       	ldd	r14, Y+1	; 0x01
     e18:	f1 2c       	mov	r15, r1
     e1a:	03 c0       	rjmp	.+6      	; 0xe22 <_ZN5SDLib4File4peekEv+0x3c>
     e1c:	ee 24       	eor	r14, r14
     e1e:	ea 94       	dec	r14
     e20:	fe 2c       	mov	r15, r14
     e22:	8f ef       	ldi	r24, 0xFF	; 255
     e24:	e8 16       	cp	r14, r24
     e26:	f8 06       	cpc	r15, r24
     e28:	89 f0       	breq	.+34     	; 0xe4c <_ZN5SDLib4File4peekEv+0x66>
     e2a:	f8 01       	movw	r30, r16
     e2c:	81 8d       	ldd	r24, Z+25	; 0x19
     e2e:	92 8d       	ldd	r25, Z+26	; 0x1a
     e30:	fc 01       	movw	r30, r24
     e32:	42 85       	ldd	r20, Z+10	; 0x0a
     e34:	53 85       	ldd	r21, Z+11	; 0x0b
     e36:	64 85       	ldd	r22, Z+12	; 0x0c
     e38:	75 85       	ldd	r23, Z+13	; 0x0d
     e3a:	41 50       	subi	r20, 0x01	; 1
     e3c:	51 09       	sbc	r21, r1
     e3e:	61 09       	sbc	r22, r1
     e40:	71 09       	sbc	r23, r1
     e42:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <_ZN6SdFile7seekSetEm>
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <_ZN5SDLib4File4peekEv+0x66>
     e48:	e1 2c       	mov	r14, r1
     e4a:	f1 2c       	mov	r15, r1
     e4c:	c7 01       	movw	r24, r14
     e4e:	0f 90       	pop	r0
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	1f 91       	pop	r17
     e56:	0f 91       	pop	r16
     e58:	ff 90       	pop	r15
     e5a:	ef 90       	pop	r14
     e5c:	08 95       	ret

00000e5e <_ZN5SDLib4File5flushEv>:
     e5e:	fc 01       	movw	r30, r24
     e60:	81 8d       	ldd	r24, Z+25	; 0x19
     e62:	92 8d       	ldd	r25, Z+26	; 0x1a
     e64:	00 97       	sbiw	r24, 0x00	; 0
     e66:	19 f0       	breq	.+6      	; 0xe6e <_ZN5SDLib4File5flushEv+0x10>
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZN6SdFile4syncEh>
     e6e:	08 95       	ret

00000e70 <_ZN5SDLib4FileC1E6SdFilePKc>:
     e70:	ef 92       	push	r14
     e72:	ff 92       	push	r15
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	ec 01       	movw	r28, r24
     e7e:	7b 01       	movw	r14, r22
     e80:	8a 01       	movw	r16, r20
     e82:	1b 82       	std	Y+3, r1	; 0x03
     e84:	1a 82       	std	Y+2, r1	; 0x02
     e86:	88 ee       	ldi	r24, 0xE8	; 232
     e88:	93 e0       	ldi	r25, 0x03	; 3
     e8a:	a0 e0       	ldi	r26, 0x00	; 0
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	8c 83       	std	Y+4, r24	; 0x04
     e90:	9d 83       	std	Y+5, r25	; 0x05
     e92:	ae 83       	std	Y+6, r26	; 0x06
     e94:	bf 83       	std	Y+7, r27	; 0x07
     e96:	89 e8       	ldi	r24, 0x89	; 137
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	99 83       	std	Y+1, r25	; 0x01
     e9c:	88 83       	st	Y, r24
     e9e:	8d e1       	ldi	r24, 0x1D	; 29
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <malloc>
     ea6:	9a 8f       	std	Y+26, r25	; 0x1a
     ea8:	89 8f       	std	Y+25, r24	; 0x19
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	79 f0       	breq	.+30     	; 0xecc <_ZN5SDLib4FileC1E6SdFilePKc+0x5c>
     eae:	2d e1       	ldi	r18, 0x1D	; 29
     eb0:	f7 01       	movw	r30, r14
     eb2:	dc 01       	movw	r26, r24
     eb4:	01 90       	ld	r0, Z+
     eb6:	0d 92       	st	X+, r0
     eb8:	2a 95       	dec	r18
     eba:	e1 f7       	brne	.-8      	; 0xeb4 <_ZN5SDLib4FileC1E6SdFilePKc+0x44>
     ebc:	4c e0       	ldi	r20, 0x0C	; 12
     ebe:	50 e0       	ldi	r21, 0x00	; 0
     ec0:	b8 01       	movw	r22, r16
     ec2:	ce 01       	movw	r24, r28
     ec4:	0c 96       	adiw	r24, 0x0c	; 12
     ec6:	0e 94 21 29 	call	0x5242	; 0x5242 <strncpy>
     eca:	18 8e       	std	Y+24, r1	; 0x18
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	ff 90       	pop	r15
     ed6:	ef 90       	pop	r14
     ed8:	08 95       	ret

00000eda <_ZN5SDLib4FileC1Ev>:
     eda:	fc 01       	movw	r30, r24
     edc:	13 82       	std	Z+3, r1	; 0x03
     ede:	12 82       	std	Z+2, r1	; 0x02
     ee0:	88 ee       	ldi	r24, 0xE8	; 232
     ee2:	93 e0       	ldi	r25, 0x03	; 3
     ee4:	a0 e0       	ldi	r26, 0x00	; 0
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	84 83       	std	Z+4, r24	; 0x04
     eea:	95 83       	std	Z+5, r25	; 0x05
     eec:	a6 83       	std	Z+6, r26	; 0x06
     eee:	b7 83       	std	Z+7, r27	; 0x07
     ef0:	89 e8       	ldi	r24, 0x89	; 137
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	91 83       	std	Z+1, r25	; 0x01
     ef6:	80 83       	st	Z, r24
     ef8:	12 8e       	std	Z+26, r1	; 0x1a
     efa:	11 8e       	std	Z+25, r1	; 0x19
     efc:	14 86       	std	Z+12, r1	; 0x0c
     efe:	08 95       	ret

00000f00 <_ZN5SDLib4File4readEPvj>:
  return -1;
}

// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
  if (_file) {
     f00:	fc 01       	movw	r30, r24
     f02:	81 8d       	ldd	r24, Z+25	; 0x19
     f04:	92 8d       	ldd	r25, Z+26	; 0x1a
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	19 f0       	breq	.+6      	; 0xf10 <_ZN5SDLib4File4readEPvj+0x10>
    return _file->read(buf, nbyte);
     f0a:	0e 94 62 10 	call	0x20c4	; 0x20c4 <_ZN6SdFile4readEPvj>
     f0e:	08 95       	ret
  }
  return 0;
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
}
     f14:	08 95       	ret

00000f16 <_ZN5SDLib4File4seekEm>:
    _file->sync();
  }
}

boolean File::seek(uint32_t pos) {
  if (! _file) {
     f16:	fc 01       	movw	r30, r24
     f18:	81 8d       	ldd	r24, Z+25	; 0x19
     f1a:	92 8d       	ldd	r25, Z+26	; 0x1a
     f1c:	00 97       	sbiw	r24, 0x00	; 0
     f1e:	39 f0       	breq	.+14     	; 0xf2e <_ZN5SDLib4File4seekEm+0x18>
    return false;
  }

  return _file->seekSet(pos);
     f20:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <_ZN6SdFile7seekSetEm>
     f24:	91 e0       	ldi	r25, 0x01	; 1
     f26:	81 11       	cpse	r24, r1
     f28:	03 c0       	rjmp	.+6      	; 0xf30 <_ZN5SDLib4File4seekEm+0x1a>
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <_ZN5SDLib4File4seekEm+0x1a>
  }
}

boolean File::seek(uint32_t pos) {
  if (! _file) {
    return false;
     f2e:	90 e0       	ldi	r25, 0x00	; 0
  }

  return _file->seekSet(pos);
}
     f30:	89 2f       	mov	r24, r25
     f32:	08 95       	ret

00000f34 <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) {
     f34:	dc 01       	movw	r26, r24
     f36:	59 96       	adiw	r26, 0x19	; 25
     f38:	ed 91       	ld	r30, X+
     f3a:	fc 91       	ld	r31, X
     f3c:	5a 97       	sbiw	r26, 0x1a	; 26
     f3e:	30 97       	sbiw	r30, 0x00	; 0
     f40:	29 f0       	breq	.+10     	; 0xf4c <_ZN5SDLib4File8positionEv+0x18>
    uint32_t curCluster(void) const {
      return curCluster_;
    }
    /** \return The current position for a file or directory. */
    uint32_t curPosition(void) const {
      return curPosition_;
     f42:	62 85       	ldd	r22, Z+10	; 0x0a
     f44:	73 85       	ldd	r23, Z+11	; 0x0b
     f46:	84 85       	ldd	r24, Z+12	; 0x0c
     f48:	95 85       	ldd	r25, Z+13	; 0x0d
    return -1;
  }
  return _file->curPosition();
     f4a:	08 95       	ret
  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) {
    return -1;
     f4c:	6f ef       	ldi	r22, 0xFF	; 255
     f4e:	7f ef       	ldi	r23, 0xFF	; 255
     f50:	cb 01       	movw	r24, r22
  }
  return _file->curPosition();
}
     f52:	08 95       	ret

00000f54 <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) {
     f54:	dc 01       	movw	r26, r24
     f56:	59 96       	adiw	r26, 0x19	; 25
     f58:	ed 91       	ld	r30, X+
     f5a:	fc 91       	ld	r31, X
     f5c:	5a 97       	sbiw	r26, 0x1a	; 26
     f5e:	30 97       	sbiw	r30, 0x00	; 0
     f60:	29 f0       	breq	.+10     	; 0xf6c <_ZN5SDLib4File4sizeEv+0x18>
      return dirIndex_;
    }
    static void dirName(const dir_t& dir, char* name);
    /** \return The total number of bytes in a file or directory. */
    uint32_t fileSize(void) const {
      return fileSize_;
     f62:	63 89       	ldd	r22, Z+19	; 0x13
     f64:	74 89       	ldd	r23, Z+20	; 0x14
     f66:	85 89       	ldd	r24, Z+21	; 0x15
     f68:	96 89       	ldd	r25, Z+22	; 0x16
    return 0;
  }
  return _file->fileSize();
     f6a:	08 95       	ret
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) {
    return 0;
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	cb 01       	movw	r24, r22
  }
  return _file->fileSize();
}
     f72:	08 95       	ret

00000f74 <_ZN5SDLib4File9availableEv>:
    return _file->read(buf, nbyte);
  }
  return 0;
}

int File::available() {
     f74:	cf 92       	push	r12
     f76:	df 92       	push	r13
     f78:	ef 92       	push	r14
     f7a:	ff 92       	push	r15
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
  if (! _file) {
     f80:	fc 01       	movw	r30, r24
     f82:	21 8d       	ldd	r18, Z+25	; 0x19
     f84:	32 8d       	ldd	r19, Z+26	; 0x1a
     f86:	23 2b       	or	r18, r19
     f88:	d9 f0       	breq	.+54     	; 0xfc0 <_ZN5SDLib4File9availableEv+0x4c>
     f8a:	ec 01       	movw	r28, r24
    return 0;
  }

  uint32_t n = size() - position();
     f8c:	0e 94 aa 07 	call	0xf54	; 0xf54 <_ZN5SDLib4File4sizeEv>
     f90:	6b 01       	movw	r12, r22
     f92:	7c 01       	movw	r14, r24
     f94:	ce 01       	movw	r24, r28
     f96:	0e 94 9a 07 	call	0xf34	; 0xf34 <_ZN5SDLib4File8positionEv>

  return n > 0X7FFF ? 0X7FFF : n;
     f9a:	a7 01       	movw	r20, r14
     f9c:	96 01       	movw	r18, r12
     f9e:	26 1b       	sub	r18, r22
     fa0:	37 0b       	sbc	r19, r23
     fa2:	48 0b       	sbc	r20, r24
     fa4:	59 0b       	sbc	r21, r25
     fa6:	da 01       	movw	r26, r20
     fa8:	c9 01       	movw	r24, r18
     faa:	81 15       	cp	r24, r1
     fac:	30 e8       	ldi	r19, 0x80	; 128
     fae:	93 07       	cpc	r25, r19
     fb0:	a1 05       	cpc	r26, r1
     fb2:	b1 05       	cpc	r27, r1
     fb4:	38 f0       	brcs	.+14     	; 0xfc4 <_ZN5SDLib4File9availableEv+0x50>
     fb6:	8f ef       	ldi	r24, 0xFF	; 255
     fb8:	9f e7       	ldi	r25, 0x7F	; 127
     fba:	a0 e0       	ldi	r26, 0x00	; 0
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <_ZN5SDLib4File9availableEv+0x50>
  return 0;
}

int File::available() {
  if (! _file) {
    return 0;
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
  }

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	ff 90       	pop	r15
     fca:	ef 90       	pop	r14
     fcc:	df 90       	pop	r13
     fce:	cf 90       	pop	r12
     fd0:	08 95       	ret

00000fd2 <_ZN5SDLib4File5closeEv>:
    return 0;
  }
  return _file->fileSize();
}

void File::close() {
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	fc 01       	movw	r30, r24
  if (_file) {
     fd8:	81 8d       	ldd	r24, Z+25	; 0x19
     fda:	92 8d       	ldd	r25, Z+26	; 0x1a
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	49 f0       	breq	.+18     	; 0xff2 <_ZN5SDLib4File5closeEv+0x20>
     fe0:	ef 01       	movw	r28, r30
    _file->close();
     fe2:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <_ZN6SdFile5closeEv>
    free(_file);
     fe6:	89 8d       	ldd	r24, Y+25	; 0x19
     fe8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     fea:	0e 94 7b 28 	call	0x50f6	; 0x50f6 <free>
    _file = 0;
     fee:	1a 8e       	std	Y+26, r1	; 0x1a
     ff0:	19 8e       	std	Y+25, r1	; 0x19
      nfilecount--;
      Serial.print("Deleted ");
      Serial.println(nfilecount, DEC);
    */
  }
}
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	08 95       	ret

00000ff8 <_ZN5SDLib4FilecvbEv>:

File::operator bool() {
  if (_file) {
     ff8:	dc 01       	movw	r26, r24
     ffa:	59 96       	adiw	r26, 0x19	; 25
     ffc:	ed 91       	ld	r30, X+
     ffe:	fc 91       	ld	r31, X
    1000:	5a 97       	sbiw	r26, 0x1a	; 26
    1002:	30 97       	sbiw	r30, 0x00	; 0
    1004:	31 f0       	breq	.+12     	; 0x1012 <_ZN5SDLib4FilecvbEv+0x1a>
    uint8_t isFile(void) const {
      return type_ == FAT_FILE_TYPE_NORMAL;
    }
    /** \return True if this is a SdFile for an open file/directory else false. */
    uint8_t isOpen(void) const {
      return type_ != FAT_FILE_TYPE_CLOSED;
    1006:	95 81       	ldd	r25, Z+5	; 0x05
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	91 11       	cpse	r25, r1
    100c:	03 c0       	rjmp	.+6      	; 0x1014 <_ZN5SDLib4FilecvbEv+0x1c>
    100e:	80 e0       	ldi	r24, 0x00	; 0
    return  _file->isOpen();
    1010:	08 95       	ret
  }
  return false;
    1012:	80 e0       	ldi	r24, 0x00	; 0
}
    1014:	08 95       	ret

00001016 <_Z41__static_initialization_and_destruction_0ii>:

  void File::rewindDirectory(void) {
    if (isDirectory()) {
      _file->rewind();
    }
  }
    1016:	01 97       	sbiw	r24, 0x01	; 1
    1018:	c9 f4       	brne	.+50     	; 0x104c <_Z41__static_initialization_and_destruction_0ii+0x36>
    101a:	6f 3f       	cpi	r22, 0xFF	; 255
    101c:	7f 4f       	sbci	r23, 0xFF	; 255
    101e:	b1 f4       	brne	.+44     	; 0x104c <_Z41__static_initialization_and_destruction_0ii+0x36>
    1020:	ea e0       	ldi	r30, 0x0A	; 10
    1022:	f3 e0       	ldi	r31, 0x03	; 3
    1024:	15 82       	std	Z+5, r1	; 0x05
    1026:	16 82       	std	Z+6, r1	; 0x06
    1028:	11 86       	std	Z+9, r1	; 0x09
    102a:	13 86       	std	Z+11, r1	; 0x0b
    102c:	82 e0       	ldi	r24, 0x02	; 2
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	a0 e0       	ldi	r26, 0x00	; 0
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	84 87       	std	Z+12, r24	; 0x0c
    1036:	95 87       	std	Z+13, r25	; 0x0d
    1038:	a6 87       	std	Z+14, r26	; 0x0e
    103a:	b7 87       	std	Z+15, r27	; 0x0f
    103c:	13 a2       	std	Z+35, r1	; 0x23
    103e:	15 a6       	std	Z+45, r1	; 0x2d
    1040:	14 a6       	std	Z+44, r1	; 0x2c
    1042:	8d e9       	ldi	r24, 0x9D	; 157
    1044:	91 e0       	ldi	r25, 0x01	; 1
    1046:	93 a7       	std	Z+43, r25	; 0x2b
    1048:	82 a7       	std	Z+42, r24	; 0x2a
    104a:	17 a6       	std	Z+47, r1	; 0x2f
    104c:	08 95       	ret

0000104e <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv>:
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	6d 97       	sbiw	r28, 0x1d	; 29
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	ab 01       	movw	r20, r22
    1066:	1c 82       	std	Y+4, r1	; 0x04
    1068:	1b 82       	std	Y+3, r1	; 0x03
    106a:	2d e9       	ldi	r18, 0x9D	; 157
    106c:	31 e0       	ldi	r19, 0x01	; 1
    106e:	3a 83       	std	Y+2, r19	; 0x02
    1070:	29 83       	std	Y+1, r18	; 0x01
    1072:	1e 82       	std	Y+6, r1	; 0x06
    1074:	21 e0       	ldi	r18, 0x01	; 1
    1076:	bc 01       	movw	r22, r24
    1078:	ce 01       	movw	r24, r28
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	0e 94 a1 14 	call	0x2942	; 0x2942 <_ZN6SdFile4openEPS_PKch>
    1080:	11 e0       	ldi	r17, 0x01	; 1
    1082:	81 11       	cpse	r24, r1
    1084:	01 c0       	rjmp	.+2      	; 0x1088 <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv+0x3a>
    1086:	10 e0       	ldi	r17, 0x00	; 0
    1088:	88 23       	and	r24, r24
    108a:	21 f0       	breq	.+8      	; 0x1094 <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv+0x46>
    108c:	ce 01       	movw	r24, r28
    108e:	01 96       	adiw	r24, 0x01	; 1
    1090:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <_ZN6SdFile5closeEv>
    1094:	81 2f       	mov	r24, r17
    1096:	6d 96       	adiw	r28, 0x1d	; 29
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	08 95       	ret

000010aa <_ZN5SDLib15callback_removeER6SdFilePKcbPv>:
    10aa:	44 23       	and	r20, r20
    10ac:	39 f0       	breq	.+14     	; 0x10bc <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x12>
    10ae:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <_ZN6SdFile6removeEPS_PKc>
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	81 11       	cpse	r24, r1
    10b6:	03 c0       	rjmp	.+6      	; 0x10be <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x14>
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	01 c0       	rjmp	.+2      	; 0x10be <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x14>
    10bc:	91 e0       	ldi	r25, 0x01	; 1
    10be:	89 2f       	mov	r24, r25
    10c0:	08 95       	ret

000010c2 <_ZN5SDLib20getNextPathComponentEPKcPjPc>:
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	ec 01       	movw	r28, r24
    10c8:	db 01       	movw	r26, r22
    10ca:	ed 91       	ld	r30, X+
    10cc:	fc 91       	ld	r31, X
    10ce:	dc 01       	movw	r26, r24
    10d0:	ae 0f       	add	r26, r30
    10d2:	bf 1f       	adc	r27, r31
    10d4:	8c 91       	ld	r24, X
    10d6:	8f 32       	cpi	r24, 0x2F	; 47
    10d8:	09 f4       	brne	.+2      	; 0x10dc <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x1a>
    10da:	31 96       	adiw	r30, 0x01	; 1
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	2c 30       	cpi	r18, 0x0C	; 12
    10e2:	31 05       	cpc	r19, r1
    10e4:	84 f4       	brge	.+32     	; 0x1106 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x44>
    10e6:	de 01       	movw	r26, r28
    10e8:	ae 0f       	add	r26, r30
    10ea:	bf 1f       	adc	r27, r31
    10ec:	9c 91       	ld	r25, X
    10ee:	9f 32       	cpi	r25, 0x2F	; 47
    10f0:	51 f0       	breq	.+20     	; 0x1106 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x44>
    10f2:	99 23       	and	r25, r25
    10f4:	41 f0       	breq	.+16     	; 0x1106 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x44>
    10f6:	da 01       	movw	r26, r20
    10f8:	a2 0f       	add	r26, r18
    10fa:	b3 1f       	adc	r27, r19
    10fc:	31 96       	adiw	r30, 0x01	; 1
    10fe:	9c 93       	st	X, r25
    1100:	2f 5f       	subi	r18, 0xFF	; 255
    1102:	3f 4f       	sbci	r19, 0xFF	; 255
    1104:	ed cf       	rjmp	.-38     	; 0x10e0 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x1e>
    1106:	da 01       	movw	r26, r20
    1108:	a2 0f       	add	r26, r18
    110a:	b3 1f       	adc	r27, r19
    110c:	1c 92       	st	X, r1
    110e:	de 01       	movw	r26, r28
    1110:	ae 0f       	add	r26, r30
    1112:	bf 1f       	adc	r27, r31
    1114:	8c 91       	ld	r24, X
    1116:	8f 32       	cpi	r24, 0x2F	; 47
    1118:	09 f4       	brne	.+2      	; 0x111c <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x5a>
    111a:	31 96       	adiw	r30, 0x01	; 1
    111c:	db 01       	movw	r26, r22
    111e:	ed 93       	st	X+, r30
    1120:	fc 93       	st	X, r31
    1122:	ec 0f       	add	r30, r28
    1124:	fd 1f       	adc	r31, r29
    1126:	90 81       	ld	r25, Z
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	91 11       	cpse	r25, r1
    112c:	01 c0       	rjmp	.+2      	; 0x1130 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x6e>
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	08 95       	ret

00001136 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>:
    1136:	5f 92       	push	r5
    1138:	6f 92       	push	r6
    113a:	7f 92       	push	r7
    113c:	8f 92       	push	r8
    113e:	9f 92       	push	r9
    1140:	af 92       	push	r10
    1142:	bf 92       	push	r11
    1144:	cf 92       	push	r12
    1146:	df 92       	push	r13
    1148:	ef 92       	push	r14
    114a:	ff 92       	push	r15
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	c9 54       	subi	r28, 0x49	; 73
    115a:	d1 09       	sbc	r29, r1
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	4c 01       	movw	r8, r24
    1168:	6b 01       	movw	r12, r22
    116a:	3a 01       	movw	r6, r20
    116c:	59 01       	movw	r10, r18
    116e:	1c 82       	std	Y+4, r1	; 0x04
    1170:	1b 82       	std	Y+3, r1	; 0x03
    1172:	8d e9       	ldi	r24, 0x9D	; 157
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	9a 83       	std	Y+2, r25	; 0x02
    1178:	89 83       	std	Y+1, r24	; 0x01
    117a:	1e 82       	std	Y+6, r1	; 0x06
    117c:	19 a2       	std	Y+33, r1	; 0x21
    117e:	18 a2       	std	Y+32, r1	; 0x20
    1180:	9f 8f       	std	Y+31, r25	; 0x1f
    1182:	8e 8f       	std	Y+30, r24	; 0x1e
    1184:	1b a2       	std	Y+35, r1	; 0x23
    1186:	2a 96       	adiw	r28, 0x0a	; 10
    1188:	1f ae       	std	Y+63, r1	; 0x3f
    118a:	1e ae       	std	Y+62, r1	; 0x3e
    118c:	2a 97       	sbiw	r28, 0x0a	; 10
    118e:	8b 01       	movw	r16, r22
    1190:	ce 01       	movw	r24, r28
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	7c 01       	movw	r14, r24
    1196:	ae 01       	movw	r20, r28
    1198:	45 5c       	subi	r20, 0xC5	; 197
    119a:	5f 4f       	sbci	r21, 0xFF	; 255
    119c:	be 01       	movw	r22, r28
    119e:	68 5b       	subi	r22, 0xB8	; 184
    11a0:	7f 4f       	sbci	r23, 0xFF	; 255
    11a2:	c4 01       	movw	r24, r8
    11a4:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN5SDLib20getNextPathComponentEPKcPjPc>
    11a8:	58 2e       	mov	r5, r24
    11aa:	41 e0       	ldi	r20, 0x01	; 1
    11ac:	48 27       	eor	r20, r24
    11ae:	95 01       	movw	r18, r10
    11b0:	be 01       	movw	r22, r28
    11b2:	65 5c       	subi	r22, 0xC5	; 197
    11b4:	7f 4f       	sbci	r23, 0xFF	; 255
    11b6:	c8 01       	movw	r24, r16
    11b8:	f3 01       	movw	r30, r6
    11ba:	09 95       	icall
    11bc:	81 11       	cpse	r24, r1
    11be:	08 c0       	rjmp	.+16     	; 0x11d0 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x9a>
    11c0:	0c 15       	cp	r16, r12
    11c2:	1d 05       	cpc	r17, r13
    11c4:	51 f1       	breq	.+84     	; 0x121a <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xe4>
    11c6:	c8 01       	movw	r24, r16
    11c8:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <_ZN6SdFile5closeEv>
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	2a c0       	rjmp	.+84     	; 0x1224 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    11d0:	55 20       	and	r5, r5
    11d2:	d9 f0       	breq	.+54     	; 0x120a <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xd4>
    11d4:	21 e0       	ldi	r18, 0x01	; 1
    11d6:	ae 01       	movw	r20, r28
    11d8:	45 5c       	subi	r20, 0xC5	; 197
    11da:	5f 4f       	sbci	r21, 0xFF	; 255
    11dc:	b8 01       	movw	r22, r16
    11de:	c7 01       	movw	r24, r14
    11e0:	0e 94 a1 14 	call	0x2942	; 0x2942 <_ZN6SdFile4openEPS_PKch>
    11e4:	58 2e       	mov	r5, r24
    11e6:	0c 15       	cp	r16, r12
    11e8:	1d 05       	cpc	r17, r13
    11ea:	19 f0       	breq	.+6      	; 0x11f2 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xbc>
    11ec:	c8 01       	movw	r24, r16
    11ee:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <_ZN6SdFile5closeEv>
    11f2:	55 20       	and	r5, r5
    11f4:	a1 f0       	breq	.+40     	; 0x121e <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xe8>
    11f6:	0c 15       	cp	r16, r12
    11f8:	1d 05       	cpc	r17, r13
    11fa:	11 f0       	breq	.+4      	; 0x1200 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xca>
    11fc:	c8 01       	movw	r24, r16
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xce>
    1200:	ce 01       	movw	r24, r28
    1202:	4e 96       	adiw	r24, 0x1e	; 30
    1204:	87 01       	movw	r16, r14
    1206:	7c 01       	movw	r14, r24
    1208:	c6 cf       	rjmp	.-116    	; 0x1196 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x60>
    120a:	0c 15       	cp	r16, r12
    120c:	1d 05       	cpc	r17, r13
    120e:	49 f0       	breq	.+18     	; 0x1222 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xec>
    1210:	c8 01       	movw	r24, r16
    1212:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <_ZN6SdFile5closeEv>
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	05 c0       	rjmp	.+10     	; 0x1224 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	03 c0       	rjmp	.+6      	; 0x1224 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	01 c0       	rjmp	.+2      	; 0x1224 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	c7 5b       	subi	r28, 0xB7	; 183
    1226:	df 4f       	sbci	r29, 0xFF	; 255
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	ff 90       	pop	r15
    123c:	ef 90       	pop	r14
    123e:	df 90       	pop	r13
    1240:	cf 90       	pop	r12
    1242:	bf 90       	pop	r11
    1244:	af 90       	pop	r10
    1246:	9f 90       	pop	r9
    1248:	8f 90       	pop	r8
    124a:	7f 90       	pop	r7
    124c:	6f 90       	pop	r6
    124e:	5f 90       	pop	r5
    1250:	08 95       	ret

00001252 <_ZN5SDLib7SDClass5beginEh>:
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	ec 01       	movw	r28, r24
    125c:	16 2f       	mov	r17, r22
    125e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1260:	88 23       	and	r24, r24
    1262:	21 f0       	breq	.+8      	; 0x126c <_ZN5SDLib7SDClass5beginEh+0x1a>
    1264:	ce 01       	movw	r24, r28
    1266:	8a 96       	adiw	r24, 0x2a	; 42
    1268:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <_ZN6SdFile5closeEv>
    126c:	41 2f       	mov	r20, r17
    126e:	61 e0       	ldi	r22, 0x01	; 1
    1270:	ce 01       	movw	r24, r28
    1272:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Sd2Card4initEhh>
    1276:	88 23       	and	r24, r24
    1278:	e1 f0       	breq	.+56     	; 0x12b2 <_ZN5SDLib7SDClass5beginEh+0x60>
    127a:	8e 01       	movw	r16, r28
    127c:	04 5f       	subi	r16, 0xF4	; 244
    127e:	1f 4f       	sbci	r17, 0xFF	; 255
    1280:	41 e0       	ldi	r20, 0x01	; 1
    1282:	be 01       	movw	r22, r28
    1284:	c8 01       	movw	r24, r16
    1286:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <_ZN8SdVolume4initEP7Sd2Cardh>
    128a:	81 11       	cpse	r24, r1
    128c:	06 c0       	rjmp	.+12     	; 0x129a <_ZN5SDLib7SDClass5beginEh+0x48>
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	be 01       	movw	r22, r28
    1292:	c8 01       	movw	r24, r16
    1294:	0e 94 7b 1b 	call	0x36f6	; 0x36f6 <_ZN8SdVolume4initEP7Sd2Cardh>
    1298:	01 c0       	rjmp	.+2      	; 0x129c <_ZN5SDLib7SDClass5beginEh+0x4a>
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	88 23       	and	r24, r24
    129e:	59 f0       	breq	.+22     	; 0x12b6 <_ZN5SDLib7SDClass5beginEh+0x64>
    12a0:	b8 01       	movw	r22, r16
    12a2:	ce 01       	movw	r24, r28
    12a4:	8a 96       	adiw	r24, 0x2a	; 42
    12a6:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6SdFile8openRootEP8SdVolume>
    12aa:	88 23       	and	r24, r24
    12ac:	31 f0       	breq	.+12     	; 0x12ba <_ZN5SDLib7SDClass5beginEh+0x68>
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	05 c0       	rjmp	.+10     	; 0x12bc <_ZN5SDLib7SDClass5beginEh+0x6a>
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	03 c0       	rjmp	.+6      	; 0x12bc <_ZN5SDLib7SDClass5beginEh+0x6a>
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	01 c0       	rjmp	.+2      	; 0x12bc <_ZN5SDLib7SDClass5beginEh+0x6a>
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	08 95       	ret

000012c6 <_ZN5SDLib7SDClass12getParentDirEPKcPi>:
    12c6:	4f 92       	push	r4
    12c8:	5f 92       	push	r5
    12ca:	6f 92       	push	r6
    12cc:	7f 92       	push	r7
    12ce:	8f 92       	push	r8
    12d0:	9f 92       	push	r9
    12d2:	af 92       	push	r10
    12d4:	bf 92       	push	r11
    12d6:	cf 92       	push	r12
    12d8:	df 92       	push	r13
    12da:	ef 92       	push	r14
    12dc:	ff 92       	push	r15
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	c7 54       	subi	r28, 0x47	; 71
    12ec:	d1 09       	sbc	r29, r1
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	4c 01       	movw	r8, r24
    12fa:	3a 01       	movw	r6, r20
    12fc:	29 01       	movw	r4, r18
    12fe:	1c 82       	std	Y+4, r1	; 0x04
    1300:	1b 82       	std	Y+3, r1	; 0x03
    1302:	8d e9       	ldi	r24, 0x9D	; 157
    1304:	91 e0       	ldi	r25, 0x01	; 1
    1306:	9a 83       	std	Y+2, r25	; 0x02
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	1e 82       	std	Y+6, r1	; 0x06
    130c:	19 a2       	std	Y+33, r1	; 0x21
    130e:	18 a2       	std	Y+32, r1	; 0x20
    1310:	9f 8f       	std	Y+31, r25	; 0x1f
    1312:	8e 8f       	std	Y+30, r24	; 0x1e
    1314:	1b a2       	std	Y+35, r1	; 0x23
    1316:	64 5f       	subi	r22, 0xF4	; 244
    1318:	7f 4f       	sbci	r23, 0xFF	; 255
    131a:	ce 01       	movw	r24, r28
    131c:	01 96       	adiw	r24, 0x01	; 1
    131e:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6SdFile8openRootEP8SdVolume>
    1322:	73 01       	movw	r14, r6
    1324:	6e 01       	movw	r12, r28
    1326:	8e e1       	ldi	r24, 0x1E	; 30
    1328:	c8 0e       	add	r12, r24
    132a:	d1 1c       	adc	r13, r1
    132c:	fe 01       	movw	r30, r28
    132e:	31 96       	adiw	r30, 0x01	; 1
    1330:	5f 01       	movw	r10, r30
    1332:	6f e2       	ldi	r22, 0x2F	; 47
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	c7 01       	movw	r24, r14
    1338:	0e 94 16 29 	call	0x522c	; 0x522c <strchr>
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	f1 f1       	breq	.+124    	; 0x13bc <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xf6>
    1340:	f7 01       	movw	r30, r14
    1342:	20 81       	ld	r18, Z
    1344:	2f 32       	cpi	r18, 0x2F	; 47
    1346:	21 f4       	brne	.+8      	; 0x1350 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x8a>
    1348:	ff ef       	ldi	r31, 0xFF	; 255
    134a:	ef 1a       	sub	r14, r31
    134c:	ff 0a       	sbc	r15, r31
    134e:	f1 cf       	rjmp	.-30     	; 0x1332 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x6c>
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	a1 f1       	breq	.+104    	; 0x13bc <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xf6>
    1354:	8e 19       	sub	r24, r14
    1356:	8d 30       	cpi	r24, 0x0D	; 13
    1358:	08 f0       	brcs	.+2      	; 0x135c <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x96>
    135a:	8c e0       	ldi	r24, 0x0C	; 12
    135c:	08 2f       	mov	r16, r24
    135e:	10 e0       	ldi	r17, 0x00	; 0
    1360:	a8 01       	movw	r20, r16
    1362:	b7 01       	movw	r22, r14
    1364:	ce 01       	movw	r24, r28
    1366:	cb 96       	adiw	r24, 0x3b	; 59
    1368:	0e 94 21 29 	call	0x5242	; 0x5242 <strncpy>
    136c:	eb e3       	ldi	r30, 0x3B	; 59
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	ec 0f       	add	r30, r28
    1372:	fd 1f       	adc	r31, r29
    1374:	e0 0f       	add	r30, r16
    1376:	f1 1f       	adc	r31, r17
    1378:	10 82       	st	Z, r1
    137a:	c6 01       	movw	r24, r12
    137c:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <_ZN6SdFile5closeEv>
    1380:	21 e0       	ldi	r18, 0x01	; 1
    1382:	ae 01       	movw	r20, r28
    1384:	45 5c       	subi	r20, 0xC5	; 197
    1386:	5f 4f       	sbci	r21, 0xFF	; 255
    1388:	b5 01       	movw	r22, r10
    138a:	c6 01       	movw	r24, r12
    138c:	0e 94 a1 14 	call	0x2942	; 0x2942 <_ZN6SdFile4openEPS_PKch>
    1390:	81 11       	cpse	r24, r1
    1392:	09 c0       	rjmp	.+18     	; 0x13a6 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xe0>
    1394:	f4 01       	movw	r30, r8
    1396:	13 82       	std	Z+3, r1	; 0x03
    1398:	12 82       	std	Z+2, r1	; 0x02
    139a:	8d e9       	ldi	r24, 0x9D	; 157
    139c:	91 e0       	ldi	r25, 0x01	; 1
    139e:	91 83       	std	Z+1, r25	; 0x01
    13a0:	80 83       	st	Z, r24
    13a2:	15 82       	std	Z+5, r1	; 0x05
    13a4:	63 c0       	rjmp	.+198    	; 0x146c <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x1a6>
    13a6:	e0 0e       	add	r14, r16
    13a8:	f1 1e       	adc	r15, r17
    13aa:	c5 01       	movw	r24, r10
    13ac:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <_ZN6SdFile5closeEv>
    13b0:	9a 2d       	mov	r25, r10
    13b2:	8b 2d       	mov	r24, r11
    13b4:	56 01       	movw	r10, r12
    13b6:	c9 2e       	mov	r12, r25
    13b8:	d8 2e       	mov	r13, r24
    13ba:	bb cf       	rjmp	.-138    	; 0x1332 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x6c>
    13bc:	e6 18       	sub	r14, r6
    13be:	f7 08       	sbc	r15, r7
    13c0:	f2 01       	movw	r30, r4
    13c2:	f1 82       	std	Z+1, r15	; 0x01
    13c4:	e0 82       	st	Z, r14
    13c6:	8b e6       	ldi	r24, 0x6B	; 107
    13c8:	91 e0       	ldi	r25, 0x01	; 1
    13ca:	f4 01       	movw	r30, r8
    13cc:	91 83       	std	Z+1, r25	; 0x01
    13ce:	80 83       	st	Z, r24
    13d0:	f5 01       	movw	r30, r10
    13d2:	82 81       	ldd	r24, Z+2	; 0x02
    13d4:	93 81       	ldd	r25, Z+3	; 0x03
    13d6:	f4 01       	movw	r30, r8
    13d8:	93 83       	std	Z+3, r25	; 0x03
    13da:	82 83       	std	Z+2, r24	; 0x02
    13dc:	8d e9       	ldi	r24, 0x9D	; 157
    13de:	91 e0       	ldi	r25, 0x01	; 1
    13e0:	91 83       	std	Z+1, r25	; 0x01
    13e2:	80 83       	st	Z, r24
    13e4:	f5 01       	movw	r30, r10
    13e6:	84 81       	ldd	r24, Z+4	; 0x04
    13e8:	f4 01       	movw	r30, r8
    13ea:	84 83       	std	Z+4, r24	; 0x04
    13ec:	f5 01       	movw	r30, r10
    13ee:	85 81       	ldd	r24, Z+5	; 0x05
    13f0:	f4 01       	movw	r30, r8
    13f2:	85 83       	std	Z+5, r24	; 0x05
    13f4:	f5 01       	movw	r30, r10
    13f6:	86 81       	ldd	r24, Z+6	; 0x06
    13f8:	97 81       	ldd	r25, Z+7	; 0x07
    13fa:	a0 85       	ldd	r26, Z+8	; 0x08
    13fc:	b1 85       	ldd	r27, Z+9	; 0x09
    13fe:	f4 01       	movw	r30, r8
    1400:	86 83       	std	Z+6, r24	; 0x06
    1402:	97 83       	std	Z+7, r25	; 0x07
    1404:	a0 87       	std	Z+8, r26	; 0x08
    1406:	b1 87       	std	Z+9, r27	; 0x09
    1408:	f5 01       	movw	r30, r10
    140a:	82 85       	ldd	r24, Z+10	; 0x0a
    140c:	93 85       	ldd	r25, Z+11	; 0x0b
    140e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1410:	b5 85       	ldd	r27, Z+13	; 0x0d
    1412:	f4 01       	movw	r30, r8
    1414:	82 87       	std	Z+10, r24	; 0x0a
    1416:	93 87       	std	Z+11, r25	; 0x0b
    1418:	a4 87       	std	Z+12, r26	; 0x0c
    141a:	b5 87       	std	Z+13, r27	; 0x0d
    141c:	f5 01       	movw	r30, r10
    141e:	86 85       	ldd	r24, Z+14	; 0x0e
    1420:	97 85       	ldd	r25, Z+15	; 0x0f
    1422:	a0 89       	ldd	r26, Z+16	; 0x10
    1424:	b1 89       	ldd	r27, Z+17	; 0x11
    1426:	f4 01       	movw	r30, r8
    1428:	86 87       	std	Z+14, r24	; 0x0e
    142a:	97 87       	std	Z+15, r25	; 0x0f
    142c:	a0 8b       	std	Z+16, r26	; 0x10
    142e:	b1 8b       	std	Z+17, r27	; 0x11
    1430:	f5 01       	movw	r30, r10
    1432:	82 89       	ldd	r24, Z+18	; 0x12
    1434:	f4 01       	movw	r30, r8
    1436:	82 8b       	std	Z+18, r24	; 0x12
    1438:	f5 01       	movw	r30, r10
    143a:	83 89       	ldd	r24, Z+19	; 0x13
    143c:	94 89       	ldd	r25, Z+20	; 0x14
    143e:	a5 89       	ldd	r26, Z+21	; 0x15
    1440:	b6 89       	ldd	r27, Z+22	; 0x16
    1442:	f4 01       	movw	r30, r8
    1444:	83 8b       	std	Z+19, r24	; 0x13
    1446:	94 8b       	std	Z+20, r25	; 0x14
    1448:	a5 8b       	std	Z+21, r26	; 0x15
    144a:	b6 8b       	std	Z+22, r27	; 0x16
    144c:	f5 01       	movw	r30, r10
    144e:	87 89       	ldd	r24, Z+23	; 0x17
    1450:	90 8d       	ldd	r25, Z+24	; 0x18
    1452:	a1 8d       	ldd	r26, Z+25	; 0x19
    1454:	b2 8d       	ldd	r27, Z+26	; 0x1a
    1456:	f4 01       	movw	r30, r8
    1458:	87 8b       	std	Z+23, r24	; 0x17
    145a:	90 8f       	std	Z+24, r25	; 0x18
    145c:	a1 8f       	std	Z+25, r26	; 0x19
    145e:	b2 8f       	std	Z+26, r27	; 0x1a
    1460:	f5 01       	movw	r30, r10
    1462:	83 8d       	ldd	r24, Z+27	; 0x1b
    1464:	94 8d       	ldd	r25, Z+28	; 0x1c
    1466:	f4 01       	movw	r30, r8
    1468:	94 8f       	std	Z+28, r25	; 0x1c
    146a:	83 8f       	std	Z+27, r24	; 0x1b
    146c:	c4 01       	movw	r24, r8
    146e:	c9 5b       	subi	r28, 0xB9	; 185
    1470:	df 4f       	sbci	r29, 0xFF	; 255
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	1f 91       	pop	r17
    1482:	0f 91       	pop	r16
    1484:	ff 90       	pop	r15
    1486:	ef 90       	pop	r14
    1488:	df 90       	pop	r13
    148a:	cf 90       	pop	r12
    148c:	bf 90       	pop	r11
    148e:	af 90       	pop	r10
    1490:	9f 90       	pop	r9
    1492:	8f 90       	pop	r8
    1494:	7f 90       	pop	r7
    1496:	6f 90       	pop	r6
    1498:	5f 90       	pop	r5
    149a:	4f 90       	pop	r4
    149c:	08 95       	ret

0000149e <_ZN5SDLib7SDClass4openEPKch>:
    149e:	df 92       	push	r13
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	c6 57       	subi	r28, 0x76	; 118
    14b2:	d1 09       	sbc	r29, r1
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	7c 01       	movw	r14, r24
    14c0:	8a 01       	movw	r16, r20
    14c2:	d2 2e       	mov	r13, r18
    14c4:	9e 01       	movw	r18, r28
    14c6:	25 5c       	subi	r18, 0xC5	; 197
    14c8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ca:	ce 01       	movw	r24, r28
    14cc:	cd 96       	adiw	r24, 0x3d	; 61
    14ce:	0e 94 63 09 	call	0x12c6	; 0x12c6 <_ZN5SDLib7SDClass12getParentDirEPKcPi>
    14d2:	8b ad       	ldd	r24, Y+59	; 0x3b
    14d4:	9c ad       	ldd	r25, Y+60	; 0x3c
    14d6:	08 0f       	add	r16, r24
    14d8:	19 1f       	adc	r17, r25
    14da:	f8 01       	movw	r30, r16
    14dc:	80 81       	ld	r24, Z
    14de:	81 11       	cpse	r24, r1
    14e0:	57 c0       	rjmp	.+174    	; 0x1590 <_ZN5SDLib7SDClass4openEPKch+0xf2>
    14e2:	21 96       	adiw	r28, 0x01	; 1
    14e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    14e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    14e8:	21 97       	sbiw	r28, 0x01	; 1
    14ea:	99 a3       	std	Y+33, r25	; 0x21
    14ec:	88 a3       	std	Y+32, r24	; 0x20
    14ee:	8d e9       	ldi	r24, 0x9D	; 157
    14f0:	91 e0       	ldi	r25, 0x01	; 1
    14f2:	9f 8f       	std	Y+31, r25	; 0x1f
    14f4:	8e 8f       	std	Y+30, r24	; 0x1e
    14f6:	22 96       	adiw	r28, 0x02	; 2
    14f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    14fa:	22 97       	sbiw	r28, 0x02	; 2
    14fc:	8a a3       	std	Y+34, r24	; 0x22
    14fe:	23 96       	adiw	r28, 0x03	; 3
    1500:	8f ad       	ldd	r24, Y+63	; 0x3f
    1502:	23 97       	sbiw	r28, 0x03	; 3
    1504:	8b a3       	std	Y+35, r24	; 0x23
    1506:	27 96       	adiw	r28, 0x07	; 7
    1508:	8c ad       	ldd	r24, Y+60	; 0x3c
    150a:	9d ad       	ldd	r25, Y+61	; 0x3d
    150c:	ae ad       	ldd	r26, Y+62	; 0x3e
    150e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1510:	27 97       	sbiw	r28, 0x07	; 7
    1512:	8c a3       	std	Y+36, r24	; 0x24
    1514:	9d a3       	std	Y+37, r25	; 0x25
    1516:	ae a3       	std	Y+38, r26	; 0x26
    1518:	bf a3       	std	Y+39, r27	; 0x27
    151a:	2b 96       	adiw	r28, 0x0b	; 11
    151c:	8c ad       	ldd	r24, Y+60	; 0x3c
    151e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1520:	ae ad       	ldd	r26, Y+62	; 0x3e
    1522:	bf ad       	ldd	r27, Y+63	; 0x3f
    1524:	2b 97       	sbiw	r28, 0x0b	; 11
    1526:	88 a7       	std	Y+40, r24	; 0x28
    1528:	99 a7       	std	Y+41, r25	; 0x29
    152a:	aa a7       	std	Y+42, r26	; 0x2a
    152c:	bb a7       	std	Y+43, r27	; 0x2b
    152e:	2f 96       	adiw	r28, 0x0f	; 15
    1530:	8c ad       	ldd	r24, Y+60	; 0x3c
    1532:	9d ad       	ldd	r25, Y+61	; 0x3d
    1534:	ae ad       	ldd	r26, Y+62	; 0x3e
    1536:	bf ad       	ldd	r27, Y+63	; 0x3f
    1538:	2f 97       	sbiw	r28, 0x0f	; 15
    153a:	8c a7       	std	Y+44, r24	; 0x2c
    153c:	9d a7       	std	Y+45, r25	; 0x2d
    153e:	ae a7       	std	Y+46, r26	; 0x2e
    1540:	bf a7       	std	Y+47, r27	; 0x2f
    1542:	60 96       	adiw	r28, 0x10	; 16
    1544:	8f ad       	ldd	r24, Y+63	; 0x3f
    1546:	60 97       	sbiw	r28, 0x10	; 16
    1548:	88 ab       	std	Y+48, r24	; 0x30
    154a:	64 96       	adiw	r28, 0x14	; 20
    154c:	8c ad       	ldd	r24, Y+60	; 0x3c
    154e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1550:	ae ad       	ldd	r26, Y+62	; 0x3e
    1552:	bf ad       	ldd	r27, Y+63	; 0x3f
    1554:	64 97       	sbiw	r28, 0x14	; 20
    1556:	89 ab       	std	Y+49, r24	; 0x31
    1558:	9a ab       	std	Y+50, r25	; 0x32
    155a:	ab ab       	std	Y+51, r26	; 0x33
    155c:	bc ab       	std	Y+52, r27	; 0x34
    155e:	68 96       	adiw	r28, 0x18	; 24
    1560:	8c ad       	ldd	r24, Y+60	; 0x3c
    1562:	9d ad       	ldd	r25, Y+61	; 0x3d
    1564:	ae ad       	ldd	r26, Y+62	; 0x3e
    1566:	bf ad       	ldd	r27, Y+63	; 0x3f
    1568:	68 97       	sbiw	r28, 0x18	; 24
    156a:	8d ab       	std	Y+53, r24	; 0x35
    156c:	9e ab       	std	Y+54, r25	; 0x36
    156e:	af ab       	std	Y+55, r26	; 0x37
    1570:	b8 af       	std	Y+56, r27	; 0x38
    1572:	6a 96       	adiw	r28, 0x1a	; 26
    1574:	8e ad       	ldd	r24, Y+62	; 0x3e
    1576:	9f ad       	ldd	r25, Y+63	; 0x3f
    1578:	6a 97       	sbiw	r28, 0x1a	; 26
    157a:	9a af       	std	Y+58, r25	; 0x3a
    157c:	89 af       	std	Y+57, r24	; 0x39
    157e:	47 e9       	ldi	r20, 0x97	; 151
    1580:	51 e0       	ldi	r21, 0x01	; 1
    1582:	be 01       	movw	r22, r28
    1584:	62 5e       	subi	r22, 0xE2	; 226
    1586:	7f 4f       	sbci	r23, 0xFF	; 255
    1588:	c7 01       	movw	r24, r14
    158a:	0e 94 38 07 	call	0xe70	; 0xe70 <_ZN5SDLib4FileC1E6SdFilePKc>
    158e:	8e c0       	rjmp	.+284    	; 0x16ac <_ZN5SDLib7SDClass4openEPKch+0x20e>
    1590:	6e 96       	adiw	r28, 0x1e	; 30
    1592:	1f ae       	std	Y+63, r1	; 0x3f
    1594:	1e ae       	std	Y+62, r1	; 0x3e
    1596:	6e 97       	sbiw	r28, 0x1e	; 30
    1598:	8d e9       	ldi	r24, 0x9D	; 157
    159a:	91 e0       	ldi	r25, 0x01	; 1
    159c:	6c 96       	adiw	r28, 0x1c	; 28
    159e:	9f af       	std	Y+63, r25	; 0x3f
    15a0:	8e af       	std	Y+62, r24	; 0x3e
    15a2:	6c 97       	sbiw	r28, 0x1c	; 28
    15a4:	a0 96       	adiw	r28, 0x20	; 32
    15a6:	1f ae       	std	Y+63, r1	; 0x3f
    15a8:	a0 97       	sbiw	r28, 0x20	; 32
    15aa:	23 96       	adiw	r28, 0x03	; 3
    15ac:	8f ad       	ldd	r24, Y+63	; 0x3f
    15ae:	23 97       	sbiw	r28, 0x03	; 3
    15b0:	81 11       	cpse	r24, r1
    15b2:	04 c0       	rjmp	.+8      	; 0x15bc <_ZN5SDLib7SDClass4openEPKch+0x11e>
    15b4:	c7 01       	movw	r24, r14
    15b6:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZN5SDLib4FileC1Ev>
    15ba:	78 c0       	rjmp	.+240    	; 0x16ac <_ZN5SDLib7SDClass4openEPKch+0x20e>
    15bc:	2d 2d       	mov	r18, r13
    15be:	a8 01       	movw	r20, r16
    15c0:	be 01       	movw	r22, r28
    15c2:	63 5c       	subi	r22, 0xC3	; 195
    15c4:	7f 4f       	sbci	r23, 0xFF	; 255
    15c6:	ce 01       	movw	r24, r28
    15c8:	86 5a       	subi	r24, 0xA6	; 166
    15ca:	9f 4f       	sbci	r25, 0xFF	; 255
    15cc:	0e 94 a1 14 	call	0x2942	; 0x2942 <_ZN6SdFile4openEPS_PKch>
    15d0:	81 11       	cpse	r24, r1
    15d2:	04 c0       	rjmp	.+8      	; 0x15dc <_ZN5SDLib7SDClass4openEPKch+0x13e>
    15d4:	c7 01       	movw	r24, r14
    15d6:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZN5SDLib4FileC1Ev>
    15da:	68 c0       	rjmp	.+208    	; 0x16ac <_ZN5SDLib7SDClass4openEPKch+0x20e>
    15dc:	ce 01       	movw	r24, r28
    15de:	cd 96       	adiw	r24, 0x3d	; 61
    15e0:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <_ZN6SdFile5closeEv>
    15e4:	8d 2d       	mov	r24, r13
    15e6:	86 70       	andi	r24, 0x06	; 6
    15e8:	86 30       	cpi	r24, 0x06	; 6
    15ea:	59 f4       	brne	.+22     	; 0x1602 <_ZN5SDLib7SDClass4openEPKch+0x164>
    15ec:	e1 96       	adiw	r28, 0x31	; 49
    15ee:	4c ad       	ldd	r20, Y+60	; 0x3c
    15f0:	5d ad       	ldd	r21, Y+61	; 0x3d
    15f2:	6e ad       	ldd	r22, Y+62	; 0x3e
    15f4:	7f ad       	ldd	r23, Y+63	; 0x3f
    15f6:	e1 97       	sbiw	r28, 0x31	; 49
    15f8:	ce 01       	movw	r24, r28
    15fa:	86 5a       	subi	r24, 0xA6	; 166
    15fc:	9f 4f       	sbci	r25, 0xFF	; 255
    15fe:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <_ZN6SdFile7seekSetEm>
    1602:	6e 96       	adiw	r28, 0x1e	; 30
    1604:	8e ad       	ldd	r24, Y+62	; 0x3e
    1606:	9f ad       	ldd	r25, Y+63	; 0x3f
    1608:	6e 97       	sbiw	r28, 0x1e	; 30
    160a:	9c 83       	std	Y+4, r25	; 0x04
    160c:	8b 83       	std	Y+3, r24	; 0x03
    160e:	8d e9       	ldi	r24, 0x9D	; 157
    1610:	91 e0       	ldi	r25, 0x01	; 1
    1612:	9a 83       	std	Y+2, r25	; 0x02
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	6f 96       	adiw	r28, 0x1f	; 31
    1618:	8f ad       	ldd	r24, Y+63	; 0x3f
    161a:	6f 97       	sbiw	r28, 0x1f	; 31
    161c:	8d 83       	std	Y+5, r24	; 0x05
    161e:	a0 96       	adiw	r28, 0x20	; 32
    1620:	8f ad       	ldd	r24, Y+63	; 0x3f
    1622:	a0 97       	sbiw	r28, 0x20	; 32
    1624:	8e 83       	std	Y+6, r24	; 0x06
    1626:	a4 96       	adiw	r28, 0x24	; 36
    1628:	8c ad       	ldd	r24, Y+60	; 0x3c
    162a:	9d ad       	ldd	r25, Y+61	; 0x3d
    162c:	ae ad       	ldd	r26, Y+62	; 0x3e
    162e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1630:	a4 97       	sbiw	r28, 0x24	; 36
    1632:	8f 83       	std	Y+7, r24	; 0x07
    1634:	98 87       	std	Y+8, r25	; 0x08
    1636:	a9 87       	std	Y+9, r26	; 0x09
    1638:	ba 87       	std	Y+10, r27	; 0x0a
    163a:	a8 96       	adiw	r28, 0x28	; 40
    163c:	8c ad       	ldd	r24, Y+60	; 0x3c
    163e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1640:	ae ad       	ldd	r26, Y+62	; 0x3e
    1642:	bf ad       	ldd	r27, Y+63	; 0x3f
    1644:	a8 97       	sbiw	r28, 0x28	; 40
    1646:	8b 87       	std	Y+11, r24	; 0x0b
    1648:	9c 87       	std	Y+12, r25	; 0x0c
    164a:	ad 87       	std	Y+13, r26	; 0x0d
    164c:	be 87       	std	Y+14, r27	; 0x0e
    164e:	ac 96       	adiw	r28, 0x2c	; 44
    1650:	8c ad       	ldd	r24, Y+60	; 0x3c
    1652:	9d ad       	ldd	r25, Y+61	; 0x3d
    1654:	ae ad       	ldd	r26, Y+62	; 0x3e
    1656:	bf ad       	ldd	r27, Y+63	; 0x3f
    1658:	ac 97       	sbiw	r28, 0x2c	; 44
    165a:	8f 87       	std	Y+15, r24	; 0x0f
    165c:	98 8b       	std	Y+16, r25	; 0x10
    165e:	a9 8b       	std	Y+17, r26	; 0x11
    1660:	ba 8b       	std	Y+18, r27	; 0x12
    1662:	ad 96       	adiw	r28, 0x2d	; 45
    1664:	8f ad       	ldd	r24, Y+63	; 0x3f
    1666:	ad 97       	sbiw	r28, 0x2d	; 45
    1668:	8b 8b       	std	Y+19, r24	; 0x13
    166a:	e1 96       	adiw	r28, 0x31	; 49
    166c:	8c ad       	ldd	r24, Y+60	; 0x3c
    166e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1670:	ae ad       	ldd	r26, Y+62	; 0x3e
    1672:	bf ad       	ldd	r27, Y+63	; 0x3f
    1674:	e1 97       	sbiw	r28, 0x31	; 49
    1676:	8c 8b       	std	Y+20, r24	; 0x14
    1678:	9d 8b       	std	Y+21, r25	; 0x15
    167a:	ae 8b       	std	Y+22, r26	; 0x16
    167c:	bf 8b       	std	Y+23, r27	; 0x17
    167e:	e5 96       	adiw	r28, 0x35	; 53
    1680:	8c ad       	ldd	r24, Y+60	; 0x3c
    1682:	9d ad       	ldd	r25, Y+61	; 0x3d
    1684:	ae ad       	ldd	r26, Y+62	; 0x3e
    1686:	bf ad       	ldd	r27, Y+63	; 0x3f
    1688:	e5 97       	sbiw	r28, 0x35	; 53
    168a:	88 8f       	std	Y+24, r24	; 0x18
    168c:	99 8f       	std	Y+25, r25	; 0x19
    168e:	aa 8f       	std	Y+26, r26	; 0x1a
    1690:	bb 8f       	std	Y+27, r27	; 0x1b
    1692:	e7 96       	adiw	r28, 0x37	; 55
    1694:	8e ad       	ldd	r24, Y+62	; 0x3e
    1696:	9f ad       	ldd	r25, Y+63	; 0x3f
    1698:	e7 97       	sbiw	r28, 0x37	; 55
    169a:	9d 8f       	std	Y+29, r25	; 0x1d
    169c:	8c 8f       	std	Y+28, r24	; 0x1c
    169e:	a8 01       	movw	r20, r16
    16a0:	be 01       	movw	r22, r28
    16a2:	6f 5f       	subi	r22, 0xFF	; 255
    16a4:	7f 4f       	sbci	r23, 0xFF	; 255
    16a6:	c7 01       	movw	r24, r14
    16a8:	0e 94 38 07 	call	0xe70	; 0xe70 <_ZN5SDLib4FileC1E6SdFilePKc>
    16ac:	c7 01       	movw	r24, r14
    16ae:	ca 58       	subi	r28, 0x8A	; 138
    16b0:	df 4f       	sbci	r29, 0xFF	; 255
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	f8 94       	cli
    16b6:	de bf       	out	0x3e, r29	; 62
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	cd bf       	out	0x3d, r28	; 61
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	1f 91       	pop	r17
    16c2:	0f 91       	pop	r16
    16c4:	ff 90       	pop	r15
    16c6:	ef 90       	pop	r14
    16c8:	df 90       	pop	r13
    16ca:	08 95       	ret

000016cc <_ZN5SDLib7SDClass6existsEPKc>:
    16cc:	fb 01       	movw	r30, r22
    16ce:	bc 01       	movw	r22, r24
    16d0:	66 5d       	subi	r22, 0xD6	; 214
    16d2:	7f 4f       	sbci	r23, 0xFF	; 255
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	47 e2       	ldi	r20, 0x27	; 39
    16da:	58 e0       	ldi	r21, 0x08	; 8
    16dc:	cf 01       	movw	r24, r30
    16de:	0e 94 9b 08 	call	0x1136	; 0x1136 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>
    16e2:	08 95       	ret

000016e4 <_ZN5SDLib7SDClass6removeEPKc>:
    16e4:	fb 01       	movw	r30, r22
    16e6:	bc 01       	movw	r22, r24
    16e8:	66 5d       	subi	r22, 0xD6	; 214
    16ea:	7f 4f       	sbci	r23, 0xFF	; 255
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	45 e5       	ldi	r20, 0x55	; 85
    16f2:	58 e0       	ldi	r21, 0x08	; 8
    16f4:	cf 01       	movw	r24, r30
    16f6:	0e 94 9b 08 	call	0x1136	; 0x1136 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>
    16fa:	08 95       	ret

000016fc <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:

  SDClass SD;

};
    16fc:	6f ef       	ldi	r22, 0xFF	; 255
    16fe:	7f ef       	ldi	r23, 0xFF	; 255
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	0e 94 0b 08 	call	0x1016	; 0x1016 <_Z41__static_initialization_and_destruction_0ii>
    1708:	08 95       	ret

0000170a <_ZL7spiSendh>:

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    170a:	8e bd       	out	0x2e, r24	; 46
    170c:	00 00       	nop
    170e:	0d b4       	in	r0, 0x2d	; 45
    1710:	07 fe       	sbrs	r0, 7
    1712:	fd cf       	rjmp	.-6      	; 0x170e <_ZL7spiSendh+0x4>
    1714:	8e b5       	in	r24, 0x2e	; 46
    1716:	08 95       	ret

00001718 <_ZL6spiRecv>:
    1718:	8f ef       	ldi	r24, 0xFF	; 255
    171a:	8e bd       	out	0x2e, r24	; 46
    171c:	00 00       	nop
    171e:	0d b4       	in	r0, 0x2d	; 45
    1720:	07 fe       	sbrs	r0, 7
    1722:	fd cf       	rjmp	.-6      	; 0x171e <_ZL6spiRecv+0x6>
    1724:	8e b5       	in	r24, 0x2e	; 46
    1726:	08 95       	ret

00001728 <_Z41__static_initialization_and_destruction_0ii>:
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	41 f4       	brne	.+16     	; 0x173c <_Z41__static_initialization_and_destruction_0ii+0x14>
    172c:	6f 3f       	cpi	r22, 0xFF	; 255
    172e:	7f 4f       	sbci	r23, 0xFF	; 255
    1730:	29 f4       	brne	.+10     	; 0x173c <_Z41__static_initialization_and_destruction_0ii+0x14>
    1732:	e4 e5       	ldi	r30, 0x54	; 84
    1734:	f3 e0       	ldi	r31, 0x03	; 3
    1736:	80 e5       	ldi	r24, 0x50	; 80
    1738:	80 83       	st	Z, r24
    173a:	11 82       	std	Z+1, r1	; 0x01
    173c:	08 95       	ret

0000173e <_ZN7Sd2Card14chipSelectHighEv>:
    173e:	61 e0       	ldi	r22, 0x01	; 1
    1740:	fc 01       	movw	r30, r24
    1742:	84 81       	ldd	r24, Z+4	; 0x04
    1744:	0e 94 15 02 	call	0x42a	; 0x42a <digitalWrite>
    1748:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <_ZL20chip_select_asserted>
    174c:	88 23       	and	r24, r24
    174e:	a1 f0       	breq	.+40     	; 0x1778 <_ZN7Sd2Card14chipSelectHighEv+0x3a>
    1750:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <_ZL20chip_select_asserted>
    1754:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <_ZN8SPIClass13interruptModeE>
    1758:	88 23       	and	r24, r24
    175a:	71 f0       	breq	.+28     	; 0x1778 <_ZN7Sd2Card14chipSelectHighEv+0x3a>
    175c:	9f b7       	in	r25, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <_ZN8SPIClass13interruptModeE>
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	29 f4       	brne	.+10     	; 0x1772 <_ZN7Sd2Card14chipSelectHighEv+0x34>
    1768:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <__data_end>
    176c:	8d bb       	out	0x1d, r24	; 29
    176e:	9f bf       	out	0x3f, r25	; 63
    1770:	08 95       	ret
    1772:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <__data_end>
    1776:	8f bf       	out	0x3f, r24	; 63
    1778:	08 95       	ret

0000177a <_ZN7Sd2Card13chipSelectLowEv>:
    177a:	20 91 53 03 	lds	r18, 0x0353	; 0x800353 <_ZL20chip_select_asserted>
    177e:	21 11       	cpse	r18, r1
    1780:	20 c0       	rjmp	.+64     	; 0x17c2 <_ZN7Sd2Card13chipSelectLowEv+0x48>
    1782:	21 e0       	ldi	r18, 0x01	; 1
    1784:	20 93 53 03 	sts	0x0353, r18	; 0x800353 <_ZL20chip_select_asserted>
    1788:	30 91 54 03 	lds	r19, 0x0354	; 0x800354 <_ZL8settings>
    178c:	20 91 55 03 	lds	r18, 0x0355	; 0x800355 <_ZL8settings+0x1>
    1790:	40 91 3e 02 	lds	r20, 0x023E	; 0x80023e <_ZN8SPIClass13interruptModeE>
    1794:	44 23       	and	r20, r20
    1796:	99 f0       	breq	.+38     	; 0x17be <_ZN7Sd2Card13chipSelectLowEv+0x44>
    1798:	4f b7       	in	r20, 0x3f	; 63
    179a:	f8 94       	cli
    179c:	50 91 3e 02 	lds	r21, 0x023E	; 0x80023e <_ZN8SPIClass13interruptModeE>
    17a0:	51 30       	cpi	r21, 0x01	; 1
    17a2:	59 f4       	brne	.+22     	; 0x17ba <_ZN7Sd2Card13chipSelectLowEv+0x40>
    17a4:	5d b3       	in	r21, 0x1d	; 29
    17a6:	50 93 3c 02 	sts	0x023C, r21	; 0x80023c <__data_end>
    17aa:	6d b3       	in	r22, 0x1d	; 29
    17ac:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <_ZN8SPIClass13interruptMaskE>
    17b0:	50 95       	com	r21
    17b2:	56 23       	and	r21, r22
    17b4:	5d bb       	out	0x1d, r21	; 29
    17b6:	4f bf       	out	0x3f, r20	; 63
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <_ZN7Sd2Card13chipSelectLowEv+0x44>
    17ba:	40 93 3c 02 	sts	0x023C, r20	; 0x80023c <__data_end>
    17be:	3c bd       	out	0x2c, r19	; 44
    17c0:	2d bd       	out	0x2d, r18	; 45
    17c2:	60 e0       	ldi	r22, 0x00	; 0
    17c4:	fc 01       	movw	r30, r24
    17c6:	84 81       	ldd	r24, Z+4	; 0x04
    17c8:	0e 94 15 02 	call	0x42a	; 0x42a <digitalWrite>
    17cc:	08 95       	ret

000017ce <_ZN7Sd2Card7readEndEv>:
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	ec 01       	movw	r28, r24
    17d4:	8e 81       	ldd	r24, Y+6	; 0x06
    17d6:	88 23       	and	r24, r24
    17d8:	89 f0       	breq	.+34     	; 0x17fc <_ZN7Sd2Card7readEndEv+0x2e>
    17da:	8f 81       	ldd	r24, Y+7	; 0x07
    17dc:	98 85       	ldd	r25, Y+8	; 0x08
    17de:	9c 01       	movw	r18, r24
    17e0:	2f 5f       	subi	r18, 0xFF	; 255
    17e2:	3f 4f       	sbci	r19, 0xFF	; 255
    17e4:	38 87       	std	Y+8, r19	; 0x08
    17e6:	2f 83       	std	Y+7, r18	; 0x07
    17e8:	82 30       	cpi	r24, 0x02	; 2
    17ea:	92 40       	sbci	r25, 0x02	; 2
    17ec:	18 f4       	brcc	.+6      	; 0x17f4 <_ZN7Sd2Card7readEndEv+0x26>
    17ee:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZL6spiRecv>
    17f2:	f3 cf       	rjmp	.-26     	; 0x17da <_ZN7Sd2Card7readEndEv+0xc>
    17f4:	ce 01       	movw	r24, r28
    17f6:	0e 94 9f 0b 	call	0x173e	; 0x173e <_ZN7Sd2Card14chipSelectHighEv>
    17fa:	1e 82       	std	Y+6, r1	; 0x06
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	08 95       	ret

00001802 <_ZN7Sd2Card10setSckRateEh>:
    1802:	67 30       	cpi	r22, 0x07	; 7
    1804:	28 f0       	brcs	.+10     	; 0x1810 <_ZN7Sd2Card10setSckRateEh+0xe>
    1806:	26 e1       	ldi	r18, 0x16	; 22
    1808:	fc 01       	movw	r30, r24
    180a:	25 83       	std	Z+5, r18	; 0x05
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	08 95       	ret
    1810:	62 30       	cpi	r22, 0x02	; 2
    1812:	d1 f0       	breq	.+52     	; 0x1848 <_ZN7Sd2Card10setSckRateEh+0x46>
    1814:	28 f4       	brcc	.+10     	; 0x1820 <_ZN7Sd2Card10setSckRateEh+0x1e>
    1816:	66 23       	and	r22, r22
    1818:	49 f0       	breq	.+18     	; 0x182c <_ZN7Sd2Card10setSckRateEh+0x2a>
    181a:	61 30       	cpi	r22, 0x01	; 1
    181c:	71 f0       	breq	.+28     	; 0x183a <_ZN7Sd2Card10setSckRateEh+0x38>
    181e:	30 c0       	rjmp	.+96     	; 0x1880 <_ZN7Sd2Card10setSckRateEh+0x7e>
    1820:	64 30       	cpi	r22, 0x04	; 4
    1822:	01 f1       	breq	.+64     	; 0x1864 <_ZN7Sd2Card10setSckRateEh+0x62>
    1824:	c0 f0       	brcs	.+48     	; 0x1856 <_ZN7Sd2Card10setSckRateEh+0x54>
    1826:	65 30       	cpi	r22, 0x05	; 5
    1828:	21 f1       	breq	.+72     	; 0x1872 <_ZN7Sd2Card10setSckRateEh+0x70>
    182a:	2a c0       	rjmp	.+84     	; 0x1880 <_ZN7Sd2Card10setSckRateEh+0x7e>
    182c:	80 e5       	ldi	r24, 0x50	; 80
    182e:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <_ZL8settings>
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <_ZL8settings+0x1>
    1838:	08 95       	ret
    183a:	80 e5       	ldi	r24, 0x50	; 80
    183c:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <_ZL8settings>
    1840:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <_ZL8settings+0x1>
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	08 95       	ret
    1848:	81 e5       	ldi	r24, 0x51	; 81
    184a:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <_ZL8settings>
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <_ZL8settings+0x1>
    1854:	08 95       	ret
    1856:	81 e5       	ldi	r24, 0x51	; 81
    1858:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <_ZL8settings>
    185c:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <_ZL8settings+0x1>
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	08 95       	ret
    1864:	82 e5       	ldi	r24, 0x52	; 82
    1866:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <_ZL8settings>
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <_ZL8settings+0x1>
    1870:	08 95       	ret
    1872:	82 e5       	ldi	r24, 0x52	; 82
    1874:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <_ZL8settings>
    1878:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <_ZL8settings+0x1>
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	08 95       	ret
    1880:	83 e5       	ldi	r24, 0x53	; 83
    1882:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <_ZL8settings>
    1886:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <_ZL8settings+0x1>
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	08 95       	ret

0000188e <_ZN7Sd2Card11waitNotBusyEj>:
    188e:	0f 93       	push	r16
    1890:	1f 93       	push	r17
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29
    1896:	eb 01       	movw	r28, r22
    1898:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <millis>
    189c:	8b 01       	movw	r16, r22
    189e:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZL6spiRecv>
    18a2:	8f 3f       	cpi	r24, 0xFF	; 255
    18a4:	49 f0       	breq	.+18     	; 0x18b8 <_ZN7Sd2Card11waitNotBusyEj+0x2a>
    18a6:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <millis>
    18aa:	60 1b       	sub	r22, r16
    18ac:	71 0b       	sbc	r23, r17
    18ae:	6c 17       	cp	r22, r28
    18b0:	7d 07       	cpc	r23, r29
    18b2:	a8 f3       	brcs	.-22     	; 0x189e <_ZN7Sd2Card11waitNotBusyEj+0x10>
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	01 c0       	rjmp	.+2      	; 0x18ba <_ZN7Sd2Card11waitNotBusyEj+0x2c>
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	1f 91       	pop	r17
    18c0:	0f 91       	pop	r16
    18c2:	08 95       	ret

000018c4 <_ZN7Sd2Card11cardCommandEhm>:
    18c4:	cf 92       	push	r12
    18c6:	df 92       	push	r13
    18c8:	ef 92       	push	r14
    18ca:	ff 92       	push	r15
    18cc:	0f 93       	push	r16
    18ce:	1f 93       	push	r17
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	8c 01       	movw	r16, r24
    18d6:	d6 2f       	mov	r29, r22
    18d8:	69 01       	movw	r12, r18
    18da:	7a 01       	movw	r14, r20
    18dc:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN7Sd2Card7readEndEv>
    18e0:	c8 01       	movw	r24, r16
    18e2:	0e 94 bd 0b 	call	0x177a	; 0x177a <_ZN7Sd2Card13chipSelectLowEv>
    18e6:	6c e2       	ldi	r22, 0x2C	; 44
    18e8:	71 e0       	ldi	r23, 0x01	; 1
    18ea:	c8 01       	movw	r24, r16
    18ec:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Sd2Card11waitNotBusyEj>
    18f0:	8d 2f       	mov	r24, r29
    18f2:	80 64       	ori	r24, 0x40	; 64
    18f4:	0e 94 85 0b 	call	0x170a	; 0x170a <_ZL7spiSendh>
    18f8:	c8 e1       	ldi	r28, 0x18	; 24
    18fa:	cc 23       	and	r28, r28
    18fc:	74 f0       	brlt	.+28     	; 0x191a <_ZN7Sd2Card11cardCommandEhm+0x56>
    18fe:	d7 01       	movw	r26, r14
    1900:	c6 01       	movw	r24, r12
    1902:	0c 2e       	mov	r0, r28
    1904:	04 c0       	rjmp	.+8      	; 0x190e <_ZN7Sd2Card11cardCommandEhm+0x4a>
    1906:	b6 95       	lsr	r27
    1908:	a7 95       	ror	r26
    190a:	97 95       	ror	r25
    190c:	87 95       	ror	r24
    190e:	0a 94       	dec	r0
    1910:	d2 f7       	brpl	.-12     	; 0x1906 <_ZN7Sd2Card11cardCommandEhm+0x42>
    1912:	0e 94 85 0b 	call	0x170a	; 0x170a <_ZL7spiSendh>
    1916:	c8 50       	subi	r28, 0x08	; 8
    1918:	f0 cf       	rjmp	.-32     	; 0x18fa <_ZN7Sd2Card11cardCommandEhm+0x36>
    191a:	dd 23       	and	r29, r29
    191c:	11 f0       	breq	.+4      	; 0x1922 <_ZN7Sd2Card11cardCommandEhm+0x5e>
    191e:	8f ef       	ldi	r24, 0xFF	; 255
    1920:	01 c0       	rjmp	.+2      	; 0x1924 <_ZN7Sd2Card11cardCommandEhm+0x60>
    1922:	85 e9       	ldi	r24, 0x95	; 149
    1924:	d8 30       	cpi	r29, 0x08	; 8
    1926:	09 f4       	brne	.+2      	; 0x192a <_ZN7Sd2Card11cardCommandEhm+0x66>
    1928:	87 e8       	ldi	r24, 0x87	; 135
    192a:	0e 94 85 0b 	call	0x170a	; 0x170a <_ZL7spiSendh>
    192e:	c0 e0       	ldi	r28, 0x00	; 0
    1930:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZL6spiRecv>
    1934:	f8 01       	movw	r30, r16
    1936:	82 87       	std	Z+10, r24	; 0x0a
    1938:	88 23       	and	r24, r24
    193a:	24 f4       	brge	.+8      	; 0x1944 <_ZN7Sd2Card11cardCommandEhm+0x80>
    193c:	cf 3f       	cpi	r28, 0xFF	; 255
    193e:	21 f4       	brne	.+8      	; 0x1948 <_ZN7Sd2Card11cardCommandEhm+0x84>
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	03 c0       	rjmp	.+6      	; 0x194a <_ZN7Sd2Card11cardCommandEhm+0x86>
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	01 c0       	rjmp	.+2      	; 0x194a <_ZN7Sd2Card11cardCommandEhm+0x86>
    1948:	91 e0       	ldi	r25, 0x01	; 1
    194a:	99 23       	and	r25, r25
    194c:	11 f0       	breq	.+4      	; 0x1952 <_ZN7Sd2Card11cardCommandEhm+0x8e>
    194e:	cf 5f       	subi	r28, 0xFF	; 255
    1950:	ef cf       	rjmp	.-34     	; 0x1930 <_ZN7Sd2Card11cardCommandEhm+0x6c>
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	1f 91       	pop	r17
    1958:	0f 91       	pop	r16
    195a:	ff 90       	pop	r15
    195c:	ef 90       	pop	r14
    195e:	df 90       	pop	r13
    1960:	cf 90       	pop	r12
    1962:	08 95       	ret

00001964 <_ZN7Sd2Card4initEhh>:
    1964:	8f 92       	push	r8
    1966:	9f 92       	push	r9
    1968:	af 92       	push	r10
    196a:	bf 92       	push	r11
    196c:	ef 92       	push	r14
    196e:	ff 92       	push	r15
    1970:	0f 93       	push	r16
    1972:	1f 93       	push	r17
    1974:	cf 93       	push	r28
    1976:	df 93       	push	r29
    1978:	ec 01       	movw	r28, r24
    197a:	e6 2e       	mov	r14, r22
    197c:	1b 86       	std	Y+11, r1	; 0x0b
    197e:	19 86       	std	Y+9, r1	; 0x09
    1980:	1e 82       	std	Y+6, r1	; 0x06
    1982:	1d 82       	std	Y+5, r1	; 0x05
    1984:	4c 83       	std	Y+4, r20	; 0x04
    1986:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <millis>
    198a:	8b 01       	movw	r16, r22
    198c:	61 e0       	ldi	r22, 0x01	; 1
    198e:	8c 81       	ldd	r24, Y+4	; 0x04
    1990:	0e 94 d6 01 	call	0x3ac	; 0x3ac <pinMode>
    1994:	61 e0       	ldi	r22, 0x01	; 1
    1996:	8c 81       	ldd	r24, Y+4	; 0x04
    1998:	0e 94 15 02 	call	0x42a	; 0x42a <digitalWrite>
    199c:	0e 94 46 02 	call	0x48c	; 0x48c <_ZN8SPIClass5beginEv>
    19a0:	82 e5       	ldi	r24, 0x52	; 82
    19a2:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <_ZL8settings>
    19a6:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <_ZL8settings+0x1>
    19aa:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <_ZN8SPIClass13interruptModeE>
    19ae:	88 23       	and	r24, r24
    19b0:	99 f0       	breq	.+38     	; 0x19d8 <_ZN7Sd2Card4initEhh+0x74>
    19b2:	8f b7       	in	r24, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <_ZN8SPIClass13interruptModeE>
    19ba:	91 30       	cpi	r25, 0x01	; 1
    19bc:	59 f4       	brne	.+22     	; 0x19d4 <_ZN7Sd2Card4initEhh+0x70>
    19be:	9d b3       	in	r25, 0x1d	; 29
    19c0:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <__data_end>
    19c4:	2d b3       	in	r18, 0x1d	; 29
    19c6:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <_ZN8SPIClass13interruptMaskE>
    19ca:	90 95       	com	r25
    19cc:	92 23       	and	r25, r18
    19ce:	9d bb       	out	0x1d, r25	; 29
    19d0:	8f bf       	out	0x3f, r24	; 63
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <_ZN7Sd2Card4initEhh+0x74>
    19d4:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <__data_end>
    19d8:	82 e5       	ldi	r24, 0x52	; 82
    19da:	8c bd       	out	0x2c, r24	; 44
    19dc:	1d bc       	out	0x2d, r1	; 45
    19de:	f1 2c       	mov	r15, r1
    19e0:	89 e0       	ldi	r24, 0x09	; 9
    19e2:	8f 15       	cp	r24, r15
    19e4:	28 f0       	brcs	.+10     	; 0x19f0 <_ZN7Sd2Card4initEhh+0x8c>
    19e6:	8f ef       	ldi	r24, 0xFF	; 255
    19e8:	0e 94 85 0b 	call	0x170a	; 0x170a <_ZL7spiSendh>
    19ec:	f3 94       	inc	r15
    19ee:	f8 cf       	rjmp	.-16     	; 0x19e0 <_ZN7Sd2Card4initEhh+0x7c>
    19f0:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <_ZN8SPIClass13interruptModeE>
    19f4:	88 23       	and	r24, r24
    19f6:	71 f0       	breq	.+28     	; 0x1a14 <_ZN7Sd2Card4initEhh+0xb0>
    19f8:	9f b7       	in	r25, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <_ZN8SPIClass13interruptModeE>
    1a00:	81 30       	cpi	r24, 0x01	; 1
    1a02:	29 f4       	brne	.+10     	; 0x1a0e <_ZN7Sd2Card4initEhh+0xaa>
    1a04:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <__data_end>
    1a08:	8d bb       	out	0x1d, r24	; 29
    1a0a:	9f bf       	out	0x3f, r25	; 63
    1a0c:	03 c0       	rjmp	.+6      	; 0x1a14 <_ZN7Sd2Card4initEhh+0xb0>
    1a0e:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <__data_end>
    1a12:	8f bf       	out	0x3f, r24	; 63
    1a14:	ce 01       	movw	r24, r28
    1a16:	0e 94 bd 0b 	call	0x177a	; 0x177a <_ZN7Sd2Card13chipSelectLowEv>
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	a9 01       	movw	r20, r18
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	ce 01       	movw	r24, r28
    1a24:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <_ZN7Sd2Card11cardCommandEhm>
    1a28:	8a 87       	std	Y+10, r24	; 0x0a
    1a2a:	81 30       	cpi	r24, 0x01	; 1
    1a2c:	51 f0       	breq	.+20     	; 0x1a42 <_ZN7Sd2Card4initEhh+0xde>
    1a2e:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <millis>
    1a32:	60 1b       	sub	r22, r16
    1a34:	71 0b       	sbc	r23, r17
    1a36:	61 3d       	cpi	r22, 0xD1	; 209
    1a38:	77 40       	sbci	r23, 0x07	; 7
    1a3a:	78 f3       	brcs	.-34     	; 0x1a1a <_ZN7Sd2Card4initEhh+0xb6>
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	8d 83       	std	Y+5, r24	; 0x05
    1a40:	69 c0       	rjmp	.+210    	; 0x1b14 <_ZN7Sd2Card4initEhh+0x1b0>
    1a42:	2a ea       	ldi	r18, 0xAA	; 170
    1a44:	31 e0       	ldi	r19, 0x01	; 1
    1a46:	40 e0       	ldi	r20, 0x00	; 0
    1a48:	50 e0       	ldi	r21, 0x00	; 0
    1a4a:	68 e0       	ldi	r22, 0x08	; 8
    1a4c:	ce 01       	movw	r24, r28
    1a4e:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <_ZN7Sd2Card11cardCommandEhm>
    1a52:	82 ff       	sbrs	r24, 2
    1a54:	03 c0       	rjmp	.+6      	; 0x1a5c <_ZN7Sd2Card4initEhh+0xf8>
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	8b 87       	std	Y+11, r24	; 0x0b
    1a5a:	11 c0       	rjmp	.+34     	; 0x1a7e <_ZN7Sd2Card4initEhh+0x11a>
    1a5c:	f1 2c       	mov	r15, r1
    1a5e:	83 e0       	ldi	r24, 0x03	; 3
    1a60:	8f 15       	cp	r24, r15
    1a62:	28 f0       	brcs	.+10     	; 0x1a6e <_ZN7Sd2Card4initEhh+0x10a>
    1a64:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZL6spiRecv>
    1a68:	8a 87       	std	Y+10, r24	; 0x0a
    1a6a:	f3 94       	inc	r15
    1a6c:	f8 cf       	rjmp	.-16     	; 0x1a5e <_ZN7Sd2Card4initEhh+0xfa>
    1a6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a70:	8a 3a       	cpi	r24, 0xAA	; 170
    1a72:	19 f0       	breq	.+6      	; 0x1a7a <_ZN7Sd2Card4initEhh+0x116>
    1a74:	82 e0       	ldi	r24, 0x02	; 2
    1a76:	8d 83       	std	Y+5, r24	; 0x05
    1a78:	4d c0       	rjmp	.+154    	; 0x1b14 <_ZN7Sd2Card4initEhh+0x1b0>
    1a7a:	82 e0       	ldi	r24, 0x02	; 2
    1a7c:	8b 87       	std	Y+11, r24	; 0x0b
    1a7e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a80:	82 30       	cpi	r24, 0x02	; 2
    1a82:	31 f4       	brne	.+12     	; 0x1a90 <_ZN7Sd2Card4initEhh+0x12c>
    1a84:	81 2c       	mov	r8, r1
    1a86:	91 2c       	mov	r9, r1
    1a88:	54 01       	movw	r10, r8
    1a8a:	68 94       	set
    1a8c:	b6 f8       	bld	r11, 6
    1a8e:	03 c0       	rjmp	.+6      	; 0x1a96 <_ZN7Sd2Card4initEhh+0x132>
    1a90:	81 2c       	mov	r8, r1
    1a92:	91 2c       	mov	r9, r1
    1a94:	54 01       	movw	r10, r8
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	a9 01       	movw	r20, r18
    1a9c:	67 e3       	ldi	r22, 0x37	; 55
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <_ZN7Sd2Card11cardCommandEhm>
    1aa4:	a5 01       	movw	r20, r10
    1aa6:	94 01       	movw	r18, r8
    1aa8:	69 e2       	ldi	r22, 0x29	; 41
    1aaa:	ce 01       	movw	r24, r28
    1aac:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <_ZN7Sd2Card11cardCommandEhm>
    1ab0:	8a 87       	std	Y+10, r24	; 0x0a
    1ab2:	88 23       	and	r24, r24
    1ab4:	51 f0       	breq	.+20     	; 0x1aca <_ZN7Sd2Card4initEhh+0x166>
    1ab6:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <millis>
    1aba:	60 1b       	sub	r22, r16
    1abc:	71 0b       	sbc	r23, r17
    1abe:	61 3d       	cpi	r22, 0xD1	; 209
    1ac0:	77 40       	sbci	r23, 0x07	; 7
    1ac2:	48 f3       	brcs	.-46     	; 0x1a96 <_ZN7Sd2Card4initEhh+0x132>
    1ac4:	88 e0       	ldi	r24, 0x08	; 8
    1ac6:	8d 83       	std	Y+5, r24	; 0x05
    1ac8:	25 c0       	rjmp	.+74     	; 0x1b14 <_ZN7Sd2Card4initEhh+0x1b0>
    1aca:	8b 85       	ldd	r24, Y+11	; 0x0b
    1acc:	82 30       	cpi	r24, 0x02	; 2
    1ace:	d1 f4       	brne	.+52     	; 0x1b04 <_ZN7Sd2Card4initEhh+0x1a0>
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	a9 01       	movw	r20, r18
    1ad6:	6a e3       	ldi	r22, 0x3A	; 58
    1ad8:	ce 01       	movw	r24, r28
    1ada:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <_ZN7Sd2Card11cardCommandEhm>
    1ade:	88 23       	and	r24, r24
    1ae0:	19 f0       	breq	.+6      	; 0x1ae8 <_ZN7Sd2Card4initEhh+0x184>
    1ae2:	86 e0       	ldi	r24, 0x06	; 6
    1ae4:	8d 83       	std	Y+5, r24	; 0x05
    1ae6:	16 c0       	rjmp	.+44     	; 0x1b14 <_ZN7Sd2Card4initEhh+0x1b0>
    1ae8:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZL6spiRecv>
    1aec:	80 7c       	andi	r24, 0xC0	; 192
    1aee:	80 3c       	cpi	r24, 0xC0	; 192
    1af0:	11 f4       	brne	.+4      	; 0x1af6 <_ZN7Sd2Card4initEhh+0x192>
    1af2:	83 e0       	ldi	r24, 0x03	; 3
    1af4:	8b 87       	std	Y+11, r24	; 0x0b
    1af6:	10 e0       	ldi	r17, 0x00	; 0
    1af8:	13 30       	cpi	r17, 0x03	; 3
    1afa:	20 f4       	brcc	.+8      	; 0x1b04 <_ZN7Sd2Card4initEhh+0x1a0>
    1afc:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZL6spiRecv>
    1b00:	1f 5f       	subi	r17, 0xFF	; 255
    1b02:	fa cf       	rjmp	.-12     	; 0x1af8 <_ZN7Sd2Card4initEhh+0x194>
    1b04:	ce 01       	movw	r24, r28
    1b06:	0e 94 9f 0b 	call	0x173e	; 0x173e <_ZN7Sd2Card14chipSelectHighEv>
    1b0a:	6e 2d       	mov	r22, r14
    1b0c:	ce 01       	movw	r24, r28
    1b0e:	0e 94 01 0c 	call	0x1802	; 0x1802 <_ZN7Sd2Card10setSckRateEh>
    1b12:	04 c0       	rjmp	.+8      	; 0x1b1c <_ZN7Sd2Card4initEhh+0x1b8>
    1b14:	ce 01       	movw	r24, r28
    1b16:	0e 94 9f 0b 	call	0x173e	; 0x173e <_ZN7Sd2Card14chipSelectHighEv>
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	ff 90       	pop	r15
    1b26:	ef 90       	pop	r14
    1b28:	bf 90       	pop	r11
    1b2a:	af 90       	pop	r10
    1b2c:	9f 90       	pop	r9
    1b2e:	8f 90       	pop	r8
    1b30:	08 95       	ret

00001b32 <_ZN7Sd2Card14waitStartBlockEv>:
    1b32:	0f 93       	push	r16
    1b34:	1f 93       	push	r17
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	ec 01       	movw	r28, r24
    1b3c:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <millis>
    1b40:	8b 01       	movw	r16, r22
    1b42:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZL6spiRecv>
    1b46:	8a 87       	std	Y+10, r24	; 0x0a
    1b48:	8f 3f       	cpi	r24, 0xFF	; 255
    1b4a:	51 f4       	brne	.+20     	; 0x1b60 <_ZN7Sd2Card14waitStartBlockEv+0x2e>
    1b4c:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <millis>
    1b50:	60 1b       	sub	r22, r16
    1b52:	71 0b       	sbc	r23, r17
    1b54:	6d 32       	cpi	r22, 0x2D	; 45
    1b56:	71 40       	sbci	r23, 0x01	; 1
    1b58:	a0 f3       	brcs	.-24     	; 0x1b42 <_ZN7Sd2Card14waitStartBlockEv+0x10>
    1b5a:	8f e0       	ldi	r24, 0x0F	; 15
    1b5c:	8d 83       	std	Y+5, r24	; 0x05
    1b5e:	04 c0       	rjmp	.+8      	; 0x1b68 <_ZN7Sd2Card14waitStartBlockEv+0x36>
    1b60:	8e 3f       	cpi	r24, 0xFE	; 254
    1b62:	39 f0       	breq	.+14     	; 0x1b72 <_ZN7Sd2Card14waitStartBlockEv+0x40>
    1b64:	8d e0       	ldi	r24, 0x0D	; 13
    1b66:	8d 83       	std	Y+5, r24	; 0x05
    1b68:	ce 01       	movw	r24, r28
    1b6a:	0e 94 9f 0b 	call	0x173e	; 0x173e <_ZN7Sd2Card14chipSelectHighEv>
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	01 c0       	rjmp	.+2      	; 0x1b74 <_ZN7Sd2Card14waitStartBlockEv+0x42>
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	df 91       	pop	r29
    1b76:	cf 91       	pop	r28
    1b78:	1f 91       	pop	r17
    1b7a:	0f 91       	pop	r16
    1b7c:	08 95       	ret

00001b7e <_ZN7Sd2Card8readDataEmjjPh>:
    1b7e:	af 92       	push	r10
    1b80:	bf 92       	push	r11
    1b82:	cf 92       	push	r12
    1b84:	df 92       	push	r13
    1b86:	ef 92       	push	r14
    1b88:	ff 92       	push	r15
    1b8a:	0f 93       	push	r16
    1b8c:	1f 93       	push	r17
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	ec 01       	movw	r28, r24
    1b94:	69 01       	movw	r12, r18
    1b96:	01 15       	cp	r16, r1
    1b98:	11 05       	cpc	r17, r1
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <_ZN7Sd2Card8readDataEmjjPh+0x20>
    1b9c:	6f c0       	rjmp	.+222    	; 0x1c7c <_ZN7Sd2Card8readDataEmjjPh+0xfe>
    1b9e:	c8 01       	movw	r24, r16
    1ba0:	82 0f       	add	r24, r18
    1ba2:	93 1f       	adc	r25, r19
    1ba4:	81 30       	cpi	r24, 0x01	; 1
    1ba6:	92 40       	sbci	r25, 0x02	; 2
    1ba8:	08 f0       	brcs	.+2      	; 0x1bac <_ZN7Sd2Card8readDataEmjjPh+0x2e>
    1baa:	63 c0       	rjmp	.+198    	; 0x1c72 <_ZN7Sd2Card8readDataEmjjPh+0xf4>
    1bac:	8e 81       	ldd	r24, Y+6	; 0x06
    1bae:	88 23       	and	r24, r24
    1bb0:	71 f0       	breq	.+28     	; 0x1bce <_ZN7Sd2Card8readDataEmjjPh+0x50>
    1bb2:	88 81       	ld	r24, Y
    1bb4:	99 81       	ldd	r25, Y+1	; 0x01
    1bb6:	aa 81       	ldd	r26, Y+2	; 0x02
    1bb8:	bb 81       	ldd	r27, Y+3	; 0x03
    1bba:	84 17       	cp	r24, r20
    1bbc:	95 07       	cpc	r25, r21
    1bbe:	a6 07       	cpc	r26, r22
    1bc0:	b7 07       	cpc	r27, r23
    1bc2:	29 f4       	brne	.+10     	; 0x1bce <_ZN7Sd2Card8readDataEmjjPh+0x50>
    1bc4:	8f 81       	ldd	r24, Y+7	; 0x07
    1bc6:	98 85       	ldd	r25, Y+8	; 0x08
    1bc8:	c8 16       	cp	r12, r24
    1bca:	d9 06       	cpc	r13, r25
    1bcc:	20 f5       	brcc	.+72     	; 0x1c16 <_ZN7Sd2Card8readDataEmjjPh+0x98>
    1bce:	48 83       	st	Y, r20
    1bd0:	59 83       	std	Y+1, r21	; 0x01
    1bd2:	6a 83       	std	Y+2, r22	; 0x02
    1bd4:	7b 83       	std	Y+3, r23	; 0x03
    1bd6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bd8:	83 30       	cpi	r24, 0x03	; 3
    1bda:	49 f0       	breq	.+18     	; 0x1bee <_ZN7Sd2Card8readDataEmjjPh+0x70>
    1bdc:	03 2e       	mov	r0, r19
    1bde:	39 e0       	ldi	r19, 0x09	; 9
    1be0:	44 0f       	add	r20, r20
    1be2:	55 1f       	adc	r21, r21
    1be4:	66 1f       	adc	r22, r22
    1be6:	77 1f       	adc	r23, r23
    1be8:	3a 95       	dec	r19
    1bea:	d1 f7       	brne	.-12     	; 0x1be0 <_ZN7Sd2Card8readDataEmjjPh+0x62>
    1bec:	30 2d       	mov	r19, r0
    1bee:	9a 01       	movw	r18, r20
    1bf0:	ab 01       	movw	r20, r22
    1bf2:	61 e1       	ldi	r22, 0x11	; 17
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <_ZN7Sd2Card11cardCommandEhm>
    1bfa:	88 23       	and	r24, r24
    1bfc:	19 f0       	breq	.+6      	; 0x1c04 <_ZN7Sd2Card8readDataEmjjPh+0x86>
    1bfe:	83 e0       	ldi	r24, 0x03	; 3
    1c00:	8d 83       	std	Y+5, r24	; 0x05
    1c02:	37 c0       	rjmp	.+110    	; 0x1c72 <_ZN7Sd2Card8readDataEmjjPh+0xf4>
    1c04:	ce 01       	movw	r24, r28
    1c06:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <_ZN7Sd2Card14waitStartBlockEv>
    1c0a:	88 23       	and	r24, r24
    1c0c:	91 f1       	breq	.+100    	; 0x1c72 <_ZN7Sd2Card8readDataEmjjPh+0xf4>
    1c0e:	18 86       	std	Y+8, r1	; 0x08
    1c10:	1f 82       	std	Y+7, r1	; 0x07
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	8e 83       	std	Y+6, r24	; 0x06
    1c16:	8f 81       	ldd	r24, Y+7	; 0x07
    1c18:	98 85       	ldd	r25, Y+8	; 0x08
    1c1a:	8c 15       	cp	r24, r12
    1c1c:	9d 05       	cpc	r25, r13
    1c1e:	40 f4       	brcc	.+16     	; 0x1c30 <_ZN7Sd2Card8readDataEmjjPh+0xb2>
    1c20:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZL6spiRecv>
    1c24:	8f 81       	ldd	r24, Y+7	; 0x07
    1c26:	98 85       	ldd	r25, Y+8	; 0x08
    1c28:	01 96       	adiw	r24, 0x01	; 1
    1c2a:	98 87       	std	Y+8, r25	; 0x08
    1c2c:	8f 83       	std	Y+7, r24	; 0x07
    1c2e:	f3 cf       	rjmp	.-26     	; 0x1c16 <_ZN7Sd2Card8readDataEmjjPh+0x98>
    1c30:	c1 2c       	mov	r12, r1
    1c32:	d1 2c       	mov	r13, r1
    1c34:	c0 16       	cp	r12, r16
    1c36:	d1 06       	cpc	r13, r17
    1c38:	58 f4       	brcc	.+22     	; 0x1c50 <_ZN7Sd2Card8readDataEmjjPh+0xd2>
    1c3a:	57 01       	movw	r10, r14
    1c3c:	ac 0c       	add	r10, r12
    1c3e:	bd 1c       	adc	r11, r13
    1c40:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZL6spiRecv>
    1c44:	f5 01       	movw	r30, r10
    1c46:	80 83       	st	Z, r24
    1c48:	ff ef       	ldi	r31, 0xFF	; 255
    1c4a:	cf 1a       	sub	r12, r31
    1c4c:	df 0a       	sbc	r13, r31
    1c4e:	f2 cf       	rjmp	.-28     	; 0x1c34 <_ZN7Sd2Card8readDataEmjjPh+0xb6>
    1c50:	8f 81       	ldd	r24, Y+7	; 0x07
    1c52:	98 85       	ldd	r25, Y+8	; 0x08
    1c54:	08 0f       	add	r16, r24
    1c56:	19 1f       	adc	r17, r25
    1c58:	18 87       	std	Y+8, r17	; 0x08
    1c5a:	0f 83       	std	Y+7, r16	; 0x07
    1c5c:	89 85       	ldd	r24, Y+9	; 0x09
    1c5e:	88 23       	and	r24, r24
    1c60:	19 f0       	breq	.+6      	; 0x1c68 <_ZN7Sd2Card8readDataEmjjPh+0xea>
    1c62:	01 15       	cp	r16, r1
    1c64:	12 40       	sbci	r17, 0x02	; 2
    1c66:	60 f0       	brcs	.+24     	; 0x1c80 <_ZN7Sd2Card8readDataEmjjPh+0x102>
    1c68:	ce 01       	movw	r24, r28
    1c6a:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN7Sd2Card7readEndEv>
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	08 c0       	rjmp	.+16     	; 0x1c82 <_ZN7Sd2Card8readDataEmjjPh+0x104>
    1c72:	ce 01       	movw	r24, r28
    1c74:	0e 94 9f 0b 	call	0x173e	; 0x173e <_ZN7Sd2Card14chipSelectHighEv>
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	03 c0       	rjmp	.+6      	; 0x1c82 <_ZN7Sd2Card8readDataEmjjPh+0x104>
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	01 c0       	rjmp	.+2      	; 0x1c82 <_ZN7Sd2Card8readDataEmjjPh+0x104>
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	1f 91       	pop	r17
    1c88:	0f 91       	pop	r16
    1c8a:	ff 90       	pop	r15
    1c8c:	ef 90       	pop	r14
    1c8e:	df 90       	pop	r13
    1c90:	cf 90       	pop	r12
    1c92:	bf 90       	pop	r11
    1c94:	af 90       	pop	r10
    1c96:	08 95       	ret

00001c98 <_ZN7Sd2Card9readBlockEmPh>:
    1c98:	ef 92       	push	r14
    1c9a:	ff 92       	push	r15
    1c9c:	0f 93       	push	r16
    1c9e:	1f 93       	push	r17
    1ca0:	79 01       	movw	r14, r18
    1ca2:	00 e0       	ldi	r16, 0x00	; 0
    1ca4:	12 e0       	ldi	r17, 0x02	; 2
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <_ZN7Sd2Card8readDataEmjjPh>
    1cae:	1f 91       	pop	r17
    1cb0:	0f 91       	pop	r16
    1cb2:	ff 90       	pop	r15
    1cb4:	ef 90       	pop	r14
    1cb6:	08 95       	ret

00001cb8 <_ZN7Sd2Card9writeDataEhPKh>:
    1cb8:	ef 92       	push	r14
    1cba:	ff 92       	push	r15
    1cbc:	0f 93       	push	r16
    1cbe:	1f 93       	push	r17
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29
    1cc4:	7c 01       	movw	r14, r24
    1cc6:	86 2f       	mov	r24, r22
    1cc8:	8a 01       	movw	r16, r20
    1cca:	0e 94 85 0b 	call	0x170a	; 0x170a <_ZL7spiSendh>
    1cce:	c0 e0       	ldi	r28, 0x00	; 0
    1cd0:	d0 e0       	ldi	r29, 0x00	; 0
    1cd2:	c1 15       	cp	r28, r1
    1cd4:	82 e0       	ldi	r24, 0x02	; 2
    1cd6:	d8 07       	cpc	r29, r24
    1cd8:	40 f4       	brcc	.+16     	; 0x1cea <_ZN7Sd2Card9writeDataEhPKh+0x32>
    1cda:	f8 01       	movw	r30, r16
    1cdc:	ec 0f       	add	r30, r28
    1cde:	fd 1f       	adc	r31, r29
    1ce0:	80 81       	ld	r24, Z
    1ce2:	0e 94 85 0b 	call	0x170a	; 0x170a <_ZL7spiSendh>
    1ce6:	21 96       	adiw	r28, 0x01	; 1
    1ce8:	f4 cf       	rjmp	.-24     	; 0x1cd2 <_ZN7Sd2Card9writeDataEhPKh+0x1a>
    1cea:	8f ef       	ldi	r24, 0xFF	; 255
    1cec:	0e 94 85 0b 	call	0x170a	; 0x170a <_ZL7spiSendh>
    1cf0:	8f ef       	ldi	r24, 0xFF	; 255
    1cf2:	0e 94 85 0b 	call	0x170a	; 0x170a <_ZL7spiSendh>
    1cf6:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZL6spiRecv>
    1cfa:	f7 01       	movw	r30, r14
    1cfc:	82 87       	std	Z+10, r24	; 0x0a
    1cfe:	8f 71       	andi	r24, 0x1F	; 31
    1d00:	85 30       	cpi	r24, 0x05	; 5
    1d02:	39 f0       	breq	.+14     	; 0x1d12 <_ZN7Sd2Card9writeDataEhPKh+0x5a>
    1d04:	81 e1       	ldi	r24, 0x11	; 17
    1d06:	85 83       	std	Z+5, r24	; 0x05
    1d08:	c7 01       	movw	r24, r14
    1d0a:	0e 94 9f 0b 	call	0x173e	; 0x173e <_ZN7Sd2Card14chipSelectHighEv>
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	01 c0       	rjmp	.+2      	; 0x1d14 <_ZN7Sd2Card9writeDataEhPKh+0x5c>
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	1f 91       	pop	r17
    1d1a:	0f 91       	pop	r16
    1d1c:	ff 90       	pop	r15
    1d1e:	ef 90       	pop	r14
    1d20:	08 95       	ret

00001d22 <_ZN7Sd2Card10writeBlockEmPKhh>:
    1d22:	ef 92       	push	r14
    1d24:	ff 92       	push	r15
    1d26:	0f 93       	push	r16
    1d28:	cf 93       	push	r28
    1d2a:	df 93       	push	r29
    1d2c:	ec 01       	movw	r28, r24
    1d2e:	79 01       	movw	r14, r18
    1d30:	41 15       	cp	r20, r1
    1d32:	51 05       	cpc	r21, r1
    1d34:	61 05       	cpc	r22, r1
    1d36:	71 05       	cpc	r23, r1
    1d38:	19 f4       	brne	.+6      	; 0x1d40 <_ZN7Sd2Card10writeBlockEmPKhh+0x1e>
    1d3a:	82 e1       	ldi	r24, 0x12	; 18
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	45 c0       	rjmp	.+138    	; 0x1dca <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    1d40:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d42:	83 30       	cpi	r24, 0x03	; 3
    1d44:	49 f0       	breq	.+18     	; 0x1d58 <_ZN7Sd2Card10writeBlockEmPKhh+0x36>
    1d46:	03 2e       	mov	r0, r19
    1d48:	39 e0       	ldi	r19, 0x09	; 9
    1d4a:	44 0f       	add	r20, r20
    1d4c:	55 1f       	adc	r21, r21
    1d4e:	66 1f       	adc	r22, r22
    1d50:	77 1f       	adc	r23, r23
    1d52:	3a 95       	dec	r19
    1d54:	d1 f7       	brne	.-12     	; 0x1d4a <_ZN7Sd2Card10writeBlockEmPKhh+0x28>
    1d56:	30 2d       	mov	r19, r0
    1d58:	9a 01       	movw	r18, r20
    1d5a:	ab 01       	movw	r20, r22
    1d5c:	68 e1       	ldi	r22, 0x18	; 24
    1d5e:	ce 01       	movw	r24, r28
    1d60:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <_ZN7Sd2Card11cardCommandEhm>
    1d64:	88 23       	and	r24, r24
    1d66:	19 f0       	breq	.+6      	; 0x1d6e <_ZN7Sd2Card10writeBlockEmPKhh+0x4c>
    1d68:	84 e0       	ldi	r24, 0x04	; 4
    1d6a:	8d 83       	std	Y+5, r24	; 0x05
    1d6c:	2e c0       	rjmp	.+92     	; 0x1dca <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    1d6e:	a7 01       	movw	r20, r14
    1d70:	6e ef       	ldi	r22, 0xFE	; 254
    1d72:	ce 01       	movw	r24, r28
    1d74:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <_ZN7Sd2Card9writeDataEhPKh>
    1d78:	88 23       	and	r24, r24
    1d7a:	39 f1       	breq	.+78     	; 0x1dca <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    1d7c:	00 23       	and	r16, r16
    1d7e:	01 f1       	breq	.+64     	; 0x1dc0 <_ZN7Sd2Card10writeBlockEmPKhh+0x9e>
    1d80:	68 e5       	ldi	r22, 0x58	; 88
    1d82:	72 e0       	ldi	r23, 0x02	; 2
    1d84:	ce 01       	movw	r24, r28
    1d86:	0e 94 47 0c 	call	0x188e	; 0x188e <_ZN7Sd2Card11waitNotBusyEj>
    1d8a:	81 11       	cpse	r24, r1
    1d8c:	03 c0       	rjmp	.+6      	; 0x1d94 <_ZN7Sd2Card10writeBlockEmPKhh+0x72>
    1d8e:	85 e1       	ldi	r24, 0x15	; 21
    1d90:	8d 83       	std	Y+5, r24	; 0x05
    1d92:	1b c0       	rjmp	.+54     	; 0x1dca <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	a9 01       	movw	r20, r18
    1d9a:	6d e0       	ldi	r22, 0x0D	; 13
    1d9c:	ce 01       	movw	r24, r28
    1d9e:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <_ZN7Sd2Card11cardCommandEhm>
    1da2:	81 11       	cpse	r24, r1
    1da4:	05 c0       	rjmp	.+10     	; 0x1db0 <_ZN7Sd2Card10writeBlockEmPKhh+0x8e>
    1da6:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZL6spiRecv>
    1daa:	81 11       	cpse	r24, r1
    1dac:	03 c0       	rjmp	.+6      	; 0x1db4 <_ZN7Sd2Card10writeBlockEmPKhh+0x92>
    1dae:	03 c0       	rjmp	.+6      	; 0x1db6 <_ZN7Sd2Card10writeBlockEmPKhh+0x94>
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	01 c0       	rjmp	.+2      	; 0x1db6 <_ZN7Sd2Card10writeBlockEmPKhh+0x94>
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	88 23       	and	r24, r24
    1db8:	19 f0       	breq	.+6      	; 0x1dc0 <_ZN7Sd2Card10writeBlockEmPKhh+0x9e>
    1dba:	84 e1       	ldi	r24, 0x14	; 20
    1dbc:	8d 83       	std	Y+5, r24	; 0x05
    1dbe:	05 c0       	rjmp	.+10     	; 0x1dca <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	0e 94 9f 0b 	call	0x173e	; 0x173e <_ZN7Sd2Card14chipSelectHighEv>
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	04 c0       	rjmp	.+8      	; 0x1dd2 <_ZN7Sd2Card10writeBlockEmPKhh+0xb0>
    1dca:	ce 01       	movw	r24, r28
    1dcc:	0e 94 9f 0b 	call	0x173e	; 0x173e <_ZN7Sd2Card14chipSelectHighEv>
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	df 91       	pop	r29
    1dd4:	cf 91       	pop	r28
    1dd6:	0f 91       	pop	r16
    1dd8:	ff 90       	pop	r15
    1dda:	ef 90       	pop	r14
    1ddc:	08 95       	ret

00001dde <_ZN7Sd2Card6isBusyEv>:
/** Check if the SD card is busy

  \return The value one, true, is returned when is busy and
   the value zero, false, is returned for when is NOT busy.
*/
uint8_t Sd2Card::isBusy(void) {
    1dde:	1f 93       	push	r17
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	ec 01       	movw	r28, r24
  chipSelectLow();
    1de6:	0e 94 bd 0b 	call	0x177a	; 0x177a <_ZN7Sd2Card13chipSelectLowEv>
  byte b = spiRec();
    1dea:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZL6spiRecv>
    1dee:	18 2f       	mov	r17, r24
  chipSelectHigh();
    1df0:	ce 01       	movw	r24, r28
    1df2:	0e 94 9f 0b 	call	0x173e	; 0x173e <_ZN7Sd2Card14chipSelectHighEv>

  return (b != 0XFF);
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	1f 3f       	cpi	r17, 0xFF	; 255
    1dfa:	09 f4       	brne	.+2      	; 0x1dfe <_ZN7Sd2Card6isBusyEv+0x20>
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
}
    1dfe:	df 91       	pop	r29
    1e00:	cf 91       	pop	r28
    1e02:	1f 91       	pop	r17
    1e04:	08 95       	ret

00001e06 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    1e06:	6f ef       	ldi	r22, 0xFF	; 255
    1e08:	7f ef       	ldi	r23, 0xFF	; 255
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	0e 94 94 0b 	call	0x1728	; 0x1728 <_Z41__static_initialization_and_destruction_0ii>
    1e12:	08 95       	ret

00001e14 <_ZN6SdFile10addClusterEv>:
  // don't try to delete root
  if (isRoot()) {
    return true;
  }
  return rmDir();
}
    1e14:	cf 93       	push	r28
    1e16:	df 93       	push	r29
    1e18:	ec 01       	movw	r28, r24
    1e1a:	9c 01       	movw	r18, r24
    1e1c:	2a 5f       	subi	r18, 0xFA	; 250
    1e1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e20:	41 e0       	ldi	r20, 0x01	; 1
    1e22:	50 e0       	ldi	r21, 0x00	; 0
    1e24:	60 e0       	ldi	r22, 0x00	; 0
    1e26:	70 e0       	ldi	r23, 0x00	; 0
    1e28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e2c:	0e 94 11 1a 	call	0x3422	; 0x3422 <_ZN8SdVolume15allocContiguousEmPm>
    1e30:	88 23       	and	r24, r24
    1e32:	b9 f0       	breq	.+46     	; 0x1e62 <_ZN6SdFile10addClusterEv+0x4e>
    1e34:	8f 89       	ldd	r24, Y+23	; 0x17
    1e36:	98 8d       	ldd	r25, Y+24	; 0x18
    1e38:	a9 8d       	ldd	r26, Y+25	; 0x19
    1e3a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1e3c:	89 2b       	or	r24, r25
    1e3e:	8a 2b       	or	r24, r26
    1e40:	8b 2b       	or	r24, r27
    1e42:	59 f4       	brne	.+22     	; 0x1e5a <_ZN6SdFile10addClusterEv+0x46>
    1e44:	8e 81       	ldd	r24, Y+6	; 0x06
    1e46:	9f 81       	ldd	r25, Y+7	; 0x07
    1e48:	a8 85       	ldd	r26, Y+8	; 0x08
    1e4a:	b9 85       	ldd	r27, Y+9	; 0x09
    1e4c:	8f 8b       	std	Y+23, r24	; 0x17
    1e4e:	98 8f       	std	Y+24, r25	; 0x18
    1e50:	a9 8f       	std	Y+25, r26	; 0x19
    1e52:	ba 8f       	std	Y+26, r27	; 0x1a
    1e54:	8c 81       	ldd	r24, Y+4	; 0x04
    1e56:	80 68       	ori	r24, 0x80	; 128
    1e58:	8c 83       	std	Y+4, r24	; 0x04
    1e5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5c:	80 62       	ori	r24, 0x20	; 32
    1e5e:	8c 83       	std	Y+4, r24	; 0x04
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	df 91       	pop	r29
    1e64:	cf 91       	pop	r28
    1e66:	08 95       	ret

00001e68 <_ZN6SdFile13addDirClusterEv>:
    1e68:	cf 92       	push	r12
    1e6a:	df 92       	push	r13
    1e6c:	ef 92       	push	r14
    1e6e:	ff 92       	push	r15
    1e70:	0f 93       	push	r16
    1e72:	1f 93       	push	r17
    1e74:	cf 93       	push	r28
    1e76:	8c 01       	movw	r16, r24
    1e78:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <_ZN6SdFile10addClusterEv>
    1e7c:	88 23       	and	r24, r24
    1e7e:	09 f4       	brne	.+2      	; 0x1e82 <_ZN6SdFile13addDirClusterEv+0x1a>
    1e80:	54 c0       	rjmp	.+168    	; 0x1f2a <_ZN6SdFile13addDirClusterEv+0xc2>
    1e82:	d8 01       	movw	r26, r16
    1e84:	16 96       	adiw	r26, 0x06	; 6
    1e86:	cd 90       	ld	r12, X+
    1e88:	dd 90       	ld	r13, X+
    1e8a:	ed 90       	ld	r14, X+
    1e8c:	fc 90       	ld	r15, X
    1e8e:	19 97       	sbiw	r26, 0x09	; 9
    1e90:	5b 96       	adiw	r26, 0x1b	; 27
    1e92:	ed 91       	ld	r30, X+
    1e94:	fc 91       	ld	r31, X
    1e96:	5c 97       	sbiw	r26, 0x1c	; 28
    1e98:	86 85       	ldd	r24, Z+14	; 0x0e
    1e9a:	97 85       	ldd	r25, Z+15	; 0x0f
    1e9c:	a0 89       	ldd	r26, Z+16	; 0x10
    1e9e:	b1 89       	ldd	r27, Z+17	; 0x11
    1ea0:	22 e0       	ldi	r18, 0x02	; 2
    1ea2:	c2 1a       	sub	r12, r18
    1ea4:	d1 08       	sbc	r13, r1
    1ea6:	e1 08       	sbc	r14, r1
    1ea8:	f1 08       	sbc	r15, r1
    1eaa:	05 84       	ldd	r0, Z+13	; 0x0d
    1eac:	04 c0       	rjmp	.+8      	; 0x1eb6 <_ZN6SdFile13addDirClusterEv+0x4e>
    1eae:	cc 0c       	add	r12, r12
    1eb0:	dd 1c       	adc	r13, r13
    1eb2:	ee 1c       	adc	r14, r14
    1eb4:	ff 1c       	adc	r15, r15
    1eb6:	0a 94       	dec	r0
    1eb8:	d2 f7       	brpl	.-12     	; 0x1eae <_ZN6SdFile13addDirClusterEv+0x46>
    1eba:	c8 0e       	add	r12, r24
    1ebc:	d9 1e       	adc	r13, r25
    1ebe:	ea 1e       	adc	r14, r26
    1ec0:	fb 1e       	adc	r15, r27
    1ec2:	c4 81       	ldd	r28, Z+4	; 0x04
    1ec4:	cc 23       	and	r28, r28
    1ec6:	91 f0       	breq	.+36     	; 0x1eec <_ZN6SdFile13addDirClusterEv+0x84>
    1ec8:	d7 01       	movw	r26, r14
    1eca:	c6 01       	movw	r24, r12
    1ecc:	8c 0f       	add	r24, r28
    1ece:	91 1d       	adc	r25, r1
    1ed0:	a1 1d       	adc	r26, r1
    1ed2:	b1 1d       	adc	r27, r1
    1ed4:	bc 01       	movw	r22, r24
    1ed6:	cd 01       	movw	r24, r26
    1ed8:	61 50       	subi	r22, 0x01	; 1
    1eda:	71 09       	sbc	r23, r1
    1edc:	81 09       	sbc	r24, r1
    1ede:	91 09       	sbc	r25, r1
    1ee0:	0e 94 33 18 	call	0x3066	; 0x3066 <_ZN8SdVolume14cacheZeroBlockEm>
    1ee4:	88 23       	and	r24, r24
    1ee6:	09 f1       	breq	.+66     	; 0x1f2a <_ZN6SdFile13addDirClusterEv+0xc2>
    1ee8:	c1 50       	subi	r28, 0x01	; 1
    1eea:	ec cf       	rjmp	.-40     	; 0x1ec4 <_ZN6SdFile13addDirClusterEv+0x5c>
    1eec:	d8 01       	movw	r26, r16
    1eee:	5b 96       	adiw	r26, 0x1b	; 27
    1ef0:	ed 91       	ld	r30, X+
    1ef2:	fc 91       	ld	r31, X
    1ef4:	5c 97       	sbiw	r26, 0x1c	; 28
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	92 e0       	ldi	r25, 0x02	; 2
    1efa:	a0 e0       	ldi	r26, 0x00	; 0
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	05 84       	ldd	r0, Z+13	; 0x0d
    1f00:	04 c0       	rjmp	.+8      	; 0x1f0a <_ZN6SdFile13addDirClusterEv+0xa2>
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	aa 1f       	adc	r26, r26
    1f08:	bb 1f       	adc	r27, r27
    1f0a:	0a 94       	dec	r0
    1f0c:	d2 f7       	brpl	.-12     	; 0x1f02 <_ZN6SdFile13addDirClusterEv+0x9a>
    1f0e:	f8 01       	movw	r30, r16
    1f10:	43 89       	ldd	r20, Z+19	; 0x13
    1f12:	54 89       	ldd	r21, Z+20	; 0x14
    1f14:	65 89       	ldd	r22, Z+21	; 0x15
    1f16:	76 89       	ldd	r23, Z+22	; 0x16
    1f18:	84 0f       	add	r24, r20
    1f1a:	95 1f       	adc	r25, r21
    1f1c:	a6 1f       	adc	r26, r22
    1f1e:	b7 1f       	adc	r27, r23
    1f20:	83 8b       	std	Z+19, r24	; 0x13
    1f22:	94 8b       	std	Z+20, r25	; 0x14
    1f24:	a5 8b       	std	Z+21, r26	; 0x15
    1f26:	b6 8b       	std	Z+22, r27	; 0x16
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	cf 91       	pop	r28
    1f2c:	1f 91       	pop	r17
    1f2e:	0f 91       	pop	r16
    1f30:	ff 90       	pop	r15
    1f32:	ef 90       	pop	r14
    1f34:	df 90       	pop	r13
    1f36:	cf 90       	pop	r12
    1f38:	08 95       	ret

00001f3a <_ZN6SdFile13cacheDirEntryEh>:
    1f3a:	cf 93       	push	r28
    1f3c:	df 93       	push	r29
    1f3e:	ec 01       	movw	r28, r24
    1f40:	46 2f       	mov	r20, r22
    1f42:	6e 85       	ldd	r22, Y+14	; 0x0e
    1f44:	7f 85       	ldd	r23, Y+15	; 0x0f
    1f46:	88 89       	ldd	r24, Y+16	; 0x10
    1f48:	99 89       	ldd	r25, Y+17	; 0x11
    1f4a:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <_ZN8SdVolume13cacheRawBlockEmh>
    1f4e:	88 23       	and	r24, r24
    1f50:	41 f0       	breq	.+16     	; 0x1f62 <_ZN6SdFile13cacheDirEntryEh+0x28>
    1f52:	8a 89       	ldd	r24, Y+18	; 0x12
    1f54:	20 e2       	ldi	r18, 0x20	; 32
    1f56:	82 9f       	mul	r24, r18
    1f58:	c0 01       	movw	r24, r0
    1f5a:	11 24       	eor	r1, r1
    1f5c:	81 5a       	subi	r24, 0xA1	; 161
    1f5e:	9c 4f       	sbci	r25, 0xFC	; 252
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <_ZN6SdFile13cacheDirEntryEh+0x2c>
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	df 91       	pop	r29
    1f68:	cf 91       	pop	r28
    1f6a:	08 95       	ret

00001f6c <_ZN6SdFile10make83NameEPKcPh>:
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	dc 01       	movw	r26, r24
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	9b 30       	cpi	r25, 0x0B	; 11
    1f76:	48 f4       	brcc	.+18     	; 0x1f8a <_ZN6SdFile10make83NameEPKcPh+0x1e>
    1f78:	fb 01       	movw	r30, r22
    1f7a:	e9 0f       	add	r30, r25
    1f7c:	f1 1d       	adc	r31, r1
    1f7e:	20 e2       	ldi	r18, 0x20	; 32
    1f80:	20 83       	st	Z, r18
    1f82:	9f 5f       	subi	r25, 0xFF	; 255
    1f84:	f7 cf       	rjmp	.-18     	; 0x1f74 <_ZN6SdFile10make83NameEPKcPh+0x8>
    1f86:	de 01       	movw	r26, r28
    1f88:	02 c0       	rjmp	.+4      	; 0x1f8e <_ZN6SdFile10make83NameEPKcPh+0x22>
    1f8a:	40 e0       	ldi	r20, 0x00	; 0
    1f8c:	57 e0       	ldi	r21, 0x07	; 7
    1f8e:	ed 01       	movw	r28, r26
    1f90:	21 96       	adiw	r28, 0x01	; 1
    1f92:	9c 91       	ld	r25, X
    1f94:	99 23       	and	r25, r25
    1f96:	31 f1       	breq	.+76     	; 0x1fe4 <_ZN6SdFile10make83NameEPKcPh+0x78>
    1f98:	9e 32       	cpi	r25, 0x2E	; 46
    1f9a:	29 f4       	brne	.+10     	; 0x1fa6 <_ZN6SdFile10make83NameEPKcPh+0x3a>
    1f9c:	5a 30       	cpi	r21, 0x0A	; 10
    1f9e:	49 f1       	breq	.+82     	; 0x1ff2 <_ZN6SdFile10make83NameEPKcPh+0x86>
    1fa0:	48 e0       	ldi	r20, 0x08	; 8
    1fa2:	5a e0       	ldi	r21, 0x0A	; 10
    1fa4:	f0 cf       	rjmp	.-32     	; 0x1f86 <_ZN6SdFile10make83NameEPKcPh+0x1a>
    1fa6:	ea e4       	ldi	r30, 0x4A	; 74
    1fa8:	f2 e0       	ldi	r31, 0x02	; 2
    1faa:	9f 01       	movw	r18, r30
    1fac:	2f 5f       	subi	r18, 0xFF	; 255
    1fae:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb0:	84 91       	lpm	r24, Z
    1fb2:	88 23       	and	r24, r24
    1fb4:	21 f0       	breq	.+8      	; 0x1fbe <_ZN6SdFile10make83NameEPKcPh+0x52>
    1fb6:	f9 01       	movw	r30, r18
    1fb8:	98 13       	cpse	r25, r24
    1fba:	f7 cf       	rjmp	.-18     	; 0x1faa <_ZN6SdFile10make83NameEPKcPh+0x3e>
    1fbc:	1c c0       	rjmp	.+56     	; 0x1ff6 <_ZN6SdFile10make83NameEPKcPh+0x8a>
    1fbe:	54 17       	cp	r21, r20
    1fc0:	e0 f0       	brcs	.+56     	; 0x1ffa <_ZN6SdFile10make83NameEPKcPh+0x8e>
    1fc2:	91 32       	cpi	r25, 0x21	; 33
    1fc4:	e0 f0       	brcs	.+56     	; 0x1ffe <_ZN6SdFile10make83NameEPKcPh+0x92>
    1fc6:	9f 37       	cpi	r25, 0x7F	; 127
    1fc8:	e0 f4       	brcc	.+56     	; 0x2002 <_ZN6SdFile10make83NameEPKcPh+0x96>
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	84 0f       	add	r24, r20
    1fce:	fb 01       	movw	r30, r22
    1fd0:	e4 0f       	add	r30, r20
    1fd2:	f1 1d       	adc	r31, r1
    1fd4:	2f e9       	ldi	r18, 0x9F	; 159
    1fd6:	29 0f       	add	r18, r25
    1fd8:	2a 31       	cpi	r18, 0x1A	; 26
    1fda:	08 f4       	brcc	.+2      	; 0x1fde <_ZN6SdFile10make83NameEPKcPh+0x72>
    1fdc:	90 52       	subi	r25, 0x20	; 32
    1fde:	90 83       	st	Z, r25
    1fe0:	48 2f       	mov	r20, r24
    1fe2:	d1 cf       	rjmp	.-94     	; 0x1f86 <_ZN6SdFile10make83NameEPKcPh+0x1a>
    1fe4:	fb 01       	movw	r30, r22
    1fe6:	90 81       	ld	r25, Z
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 32       	cpi	r25, 0x20	; 32
    1fec:	59 f4       	brne	.+22     	; 0x2004 <_ZN6SdFile10make83NameEPKcPh+0x98>
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	09 c0       	rjmp	.+18     	; 0x2004 <_ZN6SdFile10make83NameEPKcPh+0x98>
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	07 c0       	rjmp	.+14     	; 0x2004 <_ZN6SdFile10make83NameEPKcPh+0x98>
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	05 c0       	rjmp	.+10     	; 0x2004 <_ZN6SdFile10make83NameEPKcPh+0x98>
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	03 c0       	rjmp	.+6      	; 0x2004 <_ZN6SdFile10make83NameEPKcPh+0x98>
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	01 c0       	rjmp	.+2      	; 0x2004 <_ZN6SdFile10make83NameEPKcPh+0x98>
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	df 91       	pop	r29
    2006:	cf 91       	pop	r28
    2008:	08 95       	ret

0000200a <_ZN6SdFile8openRootEP8SdVolume>:
    200a:	0f 93       	push	r16
    200c:	1f 93       	push	r17
    200e:	cf 93       	push	r28
    2010:	df 93       	push	r29
    2012:	ec 01       	movw	r28, r24
    2014:	8d 81       	ldd	r24, Y+5	; 0x05
    2016:	81 11       	cpse	r24, r1
    2018:	4f c0       	rjmp	.+158    	; 0x20b8 <_ZN6SdFile8openRootEP8SdVolume+0xae>
    201a:	8b 01       	movw	r16, r22
    201c:	fb 01       	movw	r30, r22
    201e:	97 89       	ldd	r25, Z+23	; 0x17
    2020:	90 31       	cpi	r25, 0x10	; 16
    2022:	19 f5       	brne	.+70     	; 0x206a <_ZN6SdFile8openRootEP8SdVolume+0x60>
    2024:	82 e0       	ldi	r24, 0x02	; 2
    2026:	8d 83       	std	Y+5, r24	; 0x05
    2028:	1f 8a       	std	Y+23, r1	; 0x17
    202a:	18 8e       	std	Y+24, r1	; 0x18
    202c:	19 8e       	std	Y+25, r1	; 0x19
    202e:	1a 8e       	std	Y+26, r1	; 0x1a
    2030:	80 8d       	ldd	r24, Z+24	; 0x18
    2032:	91 8d       	ldd	r25, Z+25	; 0x19
    2034:	a0 e0       	ldi	r26, 0x00	; 0
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	aa 1f       	adc	r26, r26
    203e:	bb 1f       	adc	r27, r27
    2040:	88 0f       	add	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	aa 1f       	adc	r26, r26
    2046:	bb 1f       	adc	r27, r27
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	aa 1f       	adc	r26, r26
    204e:	bb 1f       	adc	r27, r27
    2050:	88 0f       	add	r24, r24
    2052:	99 1f       	adc	r25, r25
    2054:	aa 1f       	adc	r26, r26
    2056:	bb 1f       	adc	r27, r27
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	aa 1f       	adc	r26, r26
    205e:	bb 1f       	adc	r27, r27
    2060:	8b 8b       	std	Y+19, r24	; 0x13
    2062:	9c 8b       	std	Y+20, r25	; 0x14
    2064:	ad 8b       	std	Y+21, r26	; 0x15
    2066:	be 8b       	std	Y+22, r27	; 0x16
    2068:	15 c0       	rjmp	.+42     	; 0x2094 <_ZN6SdFile8openRootEP8SdVolume+0x8a>
    206a:	90 32       	cpi	r25, 0x20	; 32
    206c:	31 f5       	brne	.+76     	; 0x20ba <_ZN6SdFile8openRootEP8SdVolume+0xb0>
    206e:	83 e0       	ldi	r24, 0x03	; 3
    2070:	8d 83       	std	Y+5, r24	; 0x05
    2072:	fb 01       	movw	r30, r22
    2074:	42 8d       	ldd	r20, Z+26	; 0x1a
    2076:	53 8d       	ldd	r21, Z+27	; 0x1b
    2078:	64 8d       	ldd	r22, Z+28	; 0x1c
    207a:	75 8d       	ldd	r23, Z+29	; 0x1d
    207c:	4f 8b       	std	Y+23, r20	; 0x17
    207e:	58 8f       	std	Y+24, r21	; 0x18
    2080:	69 8f       	std	Y+25, r22	; 0x19
    2082:	7a 8f       	std	Y+26, r23	; 0x1a
    2084:	9e 01       	movw	r18, r28
    2086:	2d 5e       	subi	r18, 0xED	; 237
    2088:	3f 4f       	sbci	r19, 0xFF	; 255
    208a:	c8 01       	movw	r24, r16
    208c:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <_ZNK8SdVolume9chainSizeEmPm>
    2090:	88 23       	and	r24, r24
    2092:	99 f0       	breq	.+38     	; 0x20ba <_ZN6SdFile8openRootEP8SdVolume+0xb0>
    2094:	1c 8f       	std	Y+28, r17	; 0x1c
    2096:	0b 8f       	std	Y+27, r16	; 0x1b
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	8c 83       	std	Y+4, r24	; 0x04
    209c:	1e 82       	std	Y+6, r1	; 0x06
    209e:	1f 82       	std	Y+7, r1	; 0x07
    20a0:	18 86       	std	Y+8, r1	; 0x08
    20a2:	19 86       	std	Y+9, r1	; 0x09
    20a4:	1a 86       	std	Y+10, r1	; 0x0a
    20a6:	1b 86       	std	Y+11, r1	; 0x0b
    20a8:	1c 86       	std	Y+12, r1	; 0x0c
    20aa:	1d 86       	std	Y+13, r1	; 0x0d
    20ac:	1e 86       	std	Y+14, r1	; 0x0e
    20ae:	1f 86       	std	Y+15, r1	; 0x0f
    20b0:	18 8a       	std	Y+16, r1	; 0x10
    20b2:	19 8a       	std	Y+17, r1	; 0x11
    20b4:	1a 8a       	std	Y+18, r1	; 0x12
    20b6:	01 c0       	rjmp	.+2      	; 0x20ba <_ZN6SdFile8openRootEP8SdVolume+0xb0>
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	df 91       	pop	r29
    20bc:	cf 91       	pop	r28
    20be:	1f 91       	pop	r17
    20c0:	0f 91       	pop	r16
    20c2:	08 95       	ret

000020c4 <_ZN6SdFile4readEPvj>:
    20c4:	3f 92       	push	r3
    20c6:	4f 92       	push	r4
    20c8:	5f 92       	push	r5
    20ca:	6f 92       	push	r6
    20cc:	7f 92       	push	r7
    20ce:	8f 92       	push	r8
    20d0:	9f 92       	push	r9
    20d2:	af 92       	push	r10
    20d4:	bf 92       	push	r11
    20d6:	cf 92       	push	r12
    20d8:	df 92       	push	r13
    20da:	ef 92       	push	r14
    20dc:	ff 92       	push	r15
    20de:	0f 93       	push	r16
    20e0:	1f 93       	push	r17
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <_ZN6SdFile4readEPvj+0x24>
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <_ZN6SdFile4readEPvj+0x26>
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	4c 01       	movw	r8, r24
    20f0:	6b 01       	movw	r12, r22
    20f2:	5a 83       	std	Y+2, r21	; 0x02
    20f4:	49 83       	std	Y+1, r20	; 0x01
    20f6:	fc 01       	movw	r30, r24
    20f8:	85 81       	ldd	r24, Z+5	; 0x05
    20fa:	88 23       	and	r24, r24
    20fc:	31 f0       	breq	.+12     	; 0x210a <_ZN6SdFile4readEPvj+0x46>
    20fe:	84 81       	ldd	r24, Z+4	; 0x04
    2100:	80 fd       	sbrc	r24, 0
    2102:	06 c0       	rjmp	.+12     	; 0x2110 <_ZN6SdFile4readEPvj+0x4c>
    2104:	33 24       	eor	r3, r3
    2106:	33 94       	inc	r3
    2108:	04 c0       	rjmp	.+8      	; 0x2112 <_ZN6SdFile4readEPvj+0x4e>
    210a:	33 24       	eor	r3, r3
    210c:	33 94       	inc	r3
    210e:	01 c0       	rjmp	.+2      	; 0x2112 <_ZN6SdFile4readEPvj+0x4e>
    2110:	31 2c       	mov	r3, r1
    2112:	31 10       	cpse	r3, r1
    2114:	05 c1       	rjmp	.+522    	; 0x2320 <_ZN6SdFile4readEPvj+0x25c>
    2116:	09 81       	ldd	r16, Y+1	; 0x01
    2118:	1a 81       	ldd	r17, Y+2	; 0x02
    211a:	c8 01       	movw	r24, r16
    211c:	a0 e0       	ldi	r26, 0x00	; 0
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	f4 01       	movw	r30, r8
    2122:	03 89       	ldd	r16, Z+19	; 0x13
    2124:	14 89       	ldd	r17, Z+20	; 0x14
    2126:	25 89       	ldd	r18, Z+21	; 0x15
    2128:	36 89       	ldd	r19, Z+22	; 0x16
    212a:	42 85       	ldd	r20, Z+10	; 0x0a
    212c:	53 85       	ldd	r21, Z+11	; 0x0b
    212e:	64 85       	ldd	r22, Z+12	; 0x0c
    2130:	75 85       	ldd	r23, Z+13	; 0x0d
    2132:	28 01       	movw	r4, r16
    2134:	39 01       	movw	r6, r18
    2136:	44 1a       	sub	r4, r20
    2138:	55 0a       	sbc	r5, r21
    213a:	66 0a       	sbc	r6, r22
    213c:	77 0a       	sbc	r7, r23
    213e:	48 16       	cp	r4, r24
    2140:	59 06       	cpc	r5, r25
    2142:	6a 06       	cpc	r6, r26
    2144:	7b 06       	cpc	r7, r27
    2146:	28 f4       	brcc	.+10     	; 0x2152 <_ZN6SdFile4readEPvj+0x8e>
    2148:	c8 01       	movw	r24, r16
    214a:	84 1b       	sub	r24, r20
    214c:	95 0b       	sbc	r25, r21
    214e:	9a 83       	std	Y+2, r25	; 0x02
    2150:	89 83       	std	Y+1, r24	; 0x01
    2152:	69 80       	ldd	r6, Y+1	; 0x01
    2154:	7a 80       	ldd	r7, Y+2	; 0x02
    2156:	61 14       	cp	r6, r1
    2158:	71 04       	cpc	r7, r1
    215a:	09 f4       	brne	.+2      	; 0x215e <_ZN6SdFile4readEPvj+0x9a>
    215c:	de c0       	rjmp	.+444    	; 0x231a <_ZN6SdFile4readEPvj+0x256>
    215e:	f4 01       	movw	r30, r8
    2160:	82 85       	ldd	r24, Z+10	; 0x0a
    2162:	93 85       	ldd	r25, Z+11	; 0x0b
    2164:	a4 85       	ldd	r26, Z+12	; 0x0c
    2166:	b5 85       	ldd	r27, Z+13	; 0x0d
    2168:	2c 01       	movw	r4, r24
    216a:	f1 e0       	ldi	r31, 0x01	; 1
    216c:	5f 22       	and	r5, r31
    216e:	f4 01       	movw	r30, r8
    2170:	25 81       	ldd	r18, Z+5	; 0x05
    2172:	22 30       	cpi	r18, 0x02	; 2
    2174:	c9 f4       	brne	.+50     	; 0x21a8 <_ZN6SdFile4readEPvj+0xe4>
    2176:	23 8d       	ldd	r18, Z+27	; 0x1b
    2178:	34 8d       	ldd	r19, Z+28	; 0x1c
    217a:	f9 01       	movw	r30, r18
    217c:	42 8d       	ldd	r20, Z+26	; 0x1a
    217e:	53 8d       	ldd	r21, Z+27	; 0x1b
    2180:	64 8d       	ldd	r22, Z+28	; 0x1c
    2182:	75 8d       	ldd	r23, Z+29	; 0x1d
    2184:	07 2e       	mov	r0, r23
    2186:	79 e0       	ldi	r23, 0x09	; 9
    2188:	b6 95       	lsr	r27
    218a:	a7 95       	ror	r26
    218c:	97 95       	ror	r25
    218e:	87 95       	ror	r24
    2190:	7a 95       	dec	r23
    2192:	d1 f7       	brne	.-12     	; 0x2188 <_ZN6SdFile4readEPvj+0xc4>
    2194:	70 2d       	mov	r23, r0
    2196:	8a 01       	movw	r16, r20
    2198:	9b 01       	movw	r18, r22
    219a:	08 0f       	add	r16, r24
    219c:	19 1f       	adc	r17, r25
    219e:	2a 1f       	adc	r18, r26
    21a0:	3b 1f       	adc	r19, r27
    21a2:	c9 01       	movw	r24, r18
    21a4:	b8 01       	movw	r22, r16
    21a6:	54 c0       	rjmp	.+168    	; 0x2250 <_ZN6SdFile4readEPvj+0x18c>
    21a8:	f4 01       	movw	r30, r8
    21aa:	03 8d       	ldd	r16, Z+27	; 0x1b
    21ac:	14 8d       	ldd	r17, Z+28	; 0x1c
    21ae:	f8 01       	movw	r30, r16
    21b0:	b4 80       	ldd	r11, Z+4	; 0x04
    21b2:	ba 94       	dec	r11
    21b4:	ac 01       	movw	r20, r24
    21b6:	bd 01       	movw	r22, r26
    21b8:	03 2e       	mov	r0, r19
    21ba:	39 e0       	ldi	r19, 0x09	; 9
    21bc:	76 95       	lsr	r23
    21be:	67 95       	ror	r22
    21c0:	57 95       	ror	r21
    21c2:	47 95       	ror	r20
    21c4:	3a 95       	dec	r19
    21c6:	d1 f7       	brne	.-12     	; 0x21bc <_ZN6SdFile4readEPvj+0xf8>
    21c8:	30 2d       	mov	r19, r0
    21ca:	b4 22       	and	r11, r20
    21cc:	41 14       	cp	r4, r1
    21ce:	51 04       	cpc	r5, r1
    21d0:	f1 f4       	brne	.+60     	; 0x220e <_ZN6SdFile4readEPvj+0x14a>
    21d2:	b1 10       	cpse	r11, r1
    21d4:	1c c0       	rjmp	.+56     	; 0x220e <_ZN6SdFile4readEPvj+0x14a>
    21d6:	89 2b       	or	r24, r25
    21d8:	8a 2b       	or	r24, r26
    21da:	8b 2b       	or	r24, r27
    21dc:	51 f4       	brne	.+20     	; 0x21f2 <_ZN6SdFile4readEPvj+0x12e>
    21de:	f4 01       	movw	r30, r8
    21e0:	87 89       	ldd	r24, Z+23	; 0x17
    21e2:	90 8d       	ldd	r25, Z+24	; 0x18
    21e4:	a1 8d       	ldd	r26, Z+25	; 0x19
    21e6:	b2 8d       	ldd	r27, Z+26	; 0x1a
    21e8:	86 83       	std	Z+6, r24	; 0x06
    21ea:	97 83       	std	Z+7, r25	; 0x07
    21ec:	a0 87       	std	Z+8, r26	; 0x08
    21ee:	b1 87       	std	Z+9, r27	; 0x09
    21f0:	0e c0       	rjmp	.+28     	; 0x220e <_ZN6SdFile4readEPvj+0x14a>
    21f2:	f4 01       	movw	r30, r8
    21f4:	46 81       	ldd	r20, Z+6	; 0x06
    21f6:	57 81       	ldd	r21, Z+7	; 0x07
    21f8:	60 85       	ldd	r22, Z+8	; 0x08
    21fa:	71 85       	ldd	r23, Z+9	; 0x09
    21fc:	94 01       	movw	r18, r8
    21fe:	2a 5f       	subi	r18, 0xFA	; 250
    2200:	3f 4f       	sbci	r19, 0xFF	; 255
    2202:	c8 01       	movw	r24, r16
    2204:	0e 94 5d 18 	call	0x30ba	; 0x30ba <_ZNK8SdVolume6fatGetEmPm>
    2208:	88 23       	and	r24, r24
    220a:	09 f4       	brne	.+2      	; 0x220e <_ZN6SdFile4readEPvj+0x14a>
    220c:	8c c0       	rjmp	.+280    	; 0x2326 <_ZN6SdFile4readEPvj+0x262>
    220e:	f4 01       	movw	r30, r8
    2210:	86 81       	ldd	r24, Z+6	; 0x06
    2212:	97 81       	ldd	r25, Z+7	; 0x07
    2214:	a0 85       	ldd	r26, Z+8	; 0x08
    2216:	b1 85       	ldd	r27, Z+9	; 0x09
    2218:	23 8d       	ldd	r18, Z+27	; 0x1b
    221a:	34 8d       	ldd	r19, Z+28	; 0x1c
    221c:	f9 01       	movw	r30, r18
    221e:	46 85       	ldd	r20, Z+14	; 0x0e
    2220:	57 85       	ldd	r21, Z+15	; 0x0f
    2222:	60 89       	ldd	r22, Z+16	; 0x10
    2224:	71 89       	ldd	r23, Z+17	; 0x11
    2226:	02 97       	sbiw	r24, 0x02	; 2
    2228:	a1 09       	sbc	r26, r1
    222a:	b1 09       	sbc	r27, r1
    222c:	05 84       	ldd	r0, Z+13	; 0x0d
    222e:	04 c0       	rjmp	.+8      	; 0x2238 <_ZN6SdFile4readEPvj+0x174>
    2230:	88 0f       	add	r24, r24
    2232:	99 1f       	adc	r25, r25
    2234:	aa 1f       	adc	r26, r26
    2236:	bb 1f       	adc	r27, r27
    2238:	0a 94       	dec	r0
    223a:	d2 f7       	brpl	.-12     	; 0x2230 <_ZN6SdFile4readEPvj+0x16c>
    223c:	84 0f       	add	r24, r20
    223e:	95 1f       	adc	r25, r21
    2240:	a6 1f       	adc	r26, r22
    2242:	b7 1f       	adc	r27, r23
    2244:	bc 01       	movw	r22, r24
    2246:	cd 01       	movw	r24, r26
    2248:	6b 0d       	add	r22, r11
    224a:	71 1d       	adc	r23, r1
    224c:	81 1d       	adc	r24, r1
    224e:	91 1d       	adc	r25, r1
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	32 e0       	ldi	r19, 0x02	; 2
    2254:	59 01       	movw	r10, r18
    2256:	a4 18       	sub	r10, r4
    2258:	b5 08       	sbc	r11, r5
    225a:	a6 14       	cp	r10, r6
    225c:	b7 04       	cpc	r11, r7
    225e:	08 f0       	brcs	.+2      	; 0x2262 <_ZN6SdFile4readEPvj+0x19e>
    2260:	53 01       	movw	r10, r6
    2262:	f4 01       	movw	r30, r8
    2264:	24 81       	ldd	r18, Z+4	; 0x04
    2266:	26 fd       	sbrc	r18, 6
    2268:	04 c0       	rjmp	.+8      	; 0x2272 <_ZN6SdFile4readEPvj+0x1ae>
    226a:	a1 14       	cp	r10, r1
    226c:	f2 e0       	ldi	r31, 0x02	; 2
    226e:	bf 06       	cpc	r11, r31
    2270:	79 f4       	brne	.+30     	; 0x2290 <_ZN6SdFile4readEPvj+0x1cc>
    2272:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    2276:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    227a:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    227e:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2282:	60 17       	cp	r22, r16
    2284:	71 07       	cpc	r23, r17
    2286:	82 07       	cpc	r24, r18
    2288:	93 07       	cpc	r25, r19
    228a:	21 f4       	brne	.+8      	; 0x2294 <_ZN6SdFile4readEPvj+0x1d0>
    228c:	23 2d       	mov	r18, r3
    228e:	03 c0       	rjmp	.+6      	; 0x2296 <_ZN6SdFile4readEPvj+0x1d2>
    2290:	23 2d       	mov	r18, r3
    2292:	01 c0       	rjmp	.+2      	; 0x2296 <_ZN6SdFile4readEPvj+0x1d2>
    2294:	21 e0       	ldi	r18, 0x01	; 1
    2296:	22 23       	and	r18, r18
    2298:	81 f0       	breq	.+32     	; 0x22ba <_ZN6SdFile4readEPvj+0x1f6>
    229a:	76 01       	movw	r14, r12
    229c:	85 01       	movw	r16, r10
    229e:	92 01       	movw	r18, r4
    22a0:	ab 01       	movw	r20, r22
    22a2:	bc 01       	movw	r22, r24
    22a4:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <_ZN8SdVolume7sdCard_E>
    22a8:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <_ZN8SdVolume7sdCard_E+0x1>
    22ac:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <_ZN7Sd2Card8readDataEmjjPh>
    22b0:	88 23       	and	r24, r24
    22b2:	e1 f1       	breq	.+120    	; 0x232c <_ZN6SdFile4readEPvj+0x268>
    22b4:	ca 0c       	add	r12, r10
    22b6:	db 1c       	adc	r13, r11
    22b8:	20 c0       	rjmp	.+64     	; 0x22fa <_ZN6SdFile4readEPvj+0x236>
    22ba:	40 e0       	ldi	r20, 0x00	; 0
    22bc:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <_ZN8SdVolume13cacheRawBlockEmh>
    22c0:	88 23       	and	r24, r24
    22c2:	b9 f1       	breq	.+110    	; 0x2332 <_ZN6SdFile4readEPvj+0x26e>
    22c4:	82 01       	movw	r16, r4
    22c6:	01 5a       	subi	r16, 0xA1	; 161
    22c8:	1c 4f       	sbci	r17, 0xFC	; 252
    22ca:	1c 83       	std	Y+4, r17	; 0x04
    22cc:	0b 83       	std	Y+3, r16	; 0x03
    22ce:	98 01       	movw	r18, r16
    22d0:	2a 0d       	add	r18, r10
    22d2:	3b 1d       	adc	r19, r11
    22d4:	4b 81       	ldd	r20, Y+3	; 0x03
    22d6:	5c 81       	ldd	r21, Y+4	; 0x04
    22d8:	42 17       	cp	r20, r18
    22da:	53 07       	cpc	r21, r19
    22dc:	71 f0       	breq	.+28     	; 0x22fa <_ZN6SdFile4readEPvj+0x236>
    22de:	fa 01       	movw	r30, r20
    22e0:	80 81       	ld	r24, Z
    22e2:	f6 01       	movw	r30, r12
    22e4:	80 83       	st	Z, r24
    22e6:	8a 01       	movw	r16, r20
    22e8:	0f 5f       	subi	r16, 0xFF	; 255
    22ea:	1f 4f       	sbci	r17, 0xFF	; 255
    22ec:	1c 83       	std	Y+4, r17	; 0x04
    22ee:	0b 83       	std	Y+3, r16	; 0x03
    22f0:	a6 01       	movw	r20, r12
    22f2:	4f 5f       	subi	r20, 0xFF	; 255
    22f4:	5f 4f       	sbci	r21, 0xFF	; 255
    22f6:	6a 01       	movw	r12, r20
    22f8:	ed cf       	rjmp	.-38     	; 0x22d4 <_ZN6SdFile4readEPvj+0x210>
    22fa:	f4 01       	movw	r30, r8
    22fc:	82 85       	ldd	r24, Z+10	; 0x0a
    22fe:	93 85       	ldd	r25, Z+11	; 0x0b
    2300:	a4 85       	ldd	r26, Z+12	; 0x0c
    2302:	b5 85       	ldd	r27, Z+13	; 0x0d
    2304:	8a 0d       	add	r24, r10
    2306:	9b 1d       	adc	r25, r11
    2308:	a1 1d       	adc	r26, r1
    230a:	b1 1d       	adc	r27, r1
    230c:	82 87       	std	Z+10, r24	; 0x0a
    230e:	93 87       	std	Z+11, r25	; 0x0b
    2310:	a4 87       	std	Z+12, r26	; 0x0c
    2312:	b5 87       	std	Z+13, r27	; 0x0d
    2314:	6a 18       	sub	r6, r10
    2316:	7b 08       	sbc	r7, r11
    2318:	1e cf       	rjmp	.-452    	; 0x2156 <_ZN6SdFile4readEPvj+0x92>
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	9a 81       	ldd	r25, Y+2	; 0x02
    231e:	0b c0       	rjmp	.+22     	; 0x2336 <_ZN6SdFile4readEPvj+0x272>
    2320:	8f ef       	ldi	r24, 0xFF	; 255
    2322:	9f ef       	ldi	r25, 0xFF	; 255
    2324:	08 c0       	rjmp	.+16     	; 0x2336 <_ZN6SdFile4readEPvj+0x272>
    2326:	8f ef       	ldi	r24, 0xFF	; 255
    2328:	9f ef       	ldi	r25, 0xFF	; 255
    232a:	05 c0       	rjmp	.+10     	; 0x2336 <_ZN6SdFile4readEPvj+0x272>
    232c:	8f ef       	ldi	r24, 0xFF	; 255
    232e:	9f ef       	ldi	r25, 0xFF	; 255
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <_ZN6SdFile4readEPvj+0x272>
    2332:	8f ef       	ldi	r24, 0xFF	; 255
    2334:	9f ef       	ldi	r25, 0xFF	; 255
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	ff 90       	pop	r15
    2348:	ef 90       	pop	r14
    234a:	df 90       	pop	r13
    234c:	cf 90       	pop	r12
    234e:	bf 90       	pop	r11
    2350:	af 90       	pop	r10
    2352:	9f 90       	pop	r9
    2354:	8f 90       	pop	r8
    2356:	7f 90       	pop	r7
    2358:	6f 90       	pop	r6
    235a:	5f 90       	pop	r5
    235c:	4f 90       	pop	r4
    235e:	3f 90       	pop	r3
    2360:	08 95       	ret

00002362 <_ZN6SdFile12readDirCacheEv>:
    2362:	ff 92       	push	r15
    2364:	0f 93       	push	r16
    2366:	1f 93       	push	r17
    2368:	cf 93       	push	r28
    236a:	df 93       	push	r29
    236c:	1f 92       	push	r1
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	fc 01       	movw	r30, r24
    2374:	25 81       	ldd	r18, Z+5	; 0x05
    2376:	22 30       	cpi	r18, 0x02	; 2
    2378:	98 f1       	brcs	.+102    	; 0x23e0 <_ZN6SdFile12readDirCacheEv+0x7e>
    237a:	8c 01       	movw	r16, r24
    237c:	42 85       	ldd	r20, Z+10	; 0x0a
    237e:	53 85       	ldd	r21, Z+11	; 0x0b
    2380:	64 85       	ldd	r22, Z+12	; 0x0c
    2382:	75 85       	ldd	r23, Z+13	; 0x0d
    2384:	68 94       	set
    2386:	14 f8       	bld	r1, 4
    2388:	76 95       	lsr	r23
    238a:	67 95       	ror	r22
    238c:	57 95       	ror	r21
    238e:	47 95       	ror	r20
    2390:	16 94       	lsr	r1
    2392:	d1 f7       	brne	.-12     	; 0x2388 <_ZN6SdFile12readDirCacheEv+0x26>
    2394:	f4 2f       	mov	r31, r20
    2396:	ff 70       	andi	r31, 0x0F	; 15
    2398:	ff 2e       	mov	r15, r31
    239a:	41 e0       	ldi	r20, 0x01	; 1
    239c:	50 e0       	ldi	r21, 0x00	; 0
    239e:	be 01       	movw	r22, r28
    23a0:	6f 5f       	subi	r22, 0xFF	; 255
    23a2:	7f 4f       	sbci	r23, 0xFF	; 255
    23a4:	0e 94 62 10 	call	0x20c4	; 0x20c4 <_ZN6SdFile4readEPvj>
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	19 f4       	brne	.+6      	; 0x23b2 <_ZN6SdFile12readDirCacheEv+0x50>
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	02 c0       	rjmp	.+4      	; 0x23b6 <_ZN6SdFile12readDirCacheEv+0x54>
    23b2:	8f ef       	ldi	r24, 0xFF	; 255
    23b4:	9f ef       	ldi	r25, 0xFF	; 255
    23b6:	99 23       	and	r25, r25
    23b8:	b4 f0       	brlt	.+44     	; 0x23e6 <_ZN6SdFile12readDirCacheEv+0x84>
    23ba:	f8 01       	movw	r30, r16
    23bc:	82 85       	ldd	r24, Z+10	; 0x0a
    23be:	93 85       	ldd	r25, Z+11	; 0x0b
    23c0:	a4 85       	ldd	r26, Z+12	; 0x0c
    23c2:	b5 85       	ldd	r27, Z+13	; 0x0d
    23c4:	4f 96       	adiw	r24, 0x1f	; 31
    23c6:	a1 1d       	adc	r26, r1
    23c8:	b1 1d       	adc	r27, r1
    23ca:	82 87       	std	Z+10, r24	; 0x0a
    23cc:	93 87       	std	Z+11, r25	; 0x0b
    23ce:	a4 87       	std	Z+12, r26	; 0x0c
    23d0:	b5 87       	std	Z+13, r27	; 0x0d
    23d2:	f0 e2       	ldi	r31, 0x20	; 32
    23d4:	ff 9e       	mul	r15, r31
    23d6:	c0 01       	movw	r24, r0
    23d8:	11 24       	eor	r1, r1
    23da:	81 5a       	subi	r24, 0xA1	; 161
    23dc:	9c 4f       	sbci	r25, 0xFC	; 252
    23de:	05 c0       	rjmp	.+10     	; 0x23ea <_ZN6SdFile12readDirCacheEv+0x88>
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	02 c0       	rjmp	.+4      	; 0x23ea <_ZN6SdFile12readDirCacheEv+0x88>
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	0f 90       	pop	r0
    23ec:	df 91       	pop	r29
    23ee:	cf 91       	pop	r28
    23f0:	1f 91       	pop	r17
    23f2:	0f 91       	pop	r16
    23f4:	ff 90       	pop	r15
    23f6:	08 95       	ret

000023f8 <_ZN6SdFile7seekSetEm>:
    23f8:	8f 92       	push	r8
    23fa:	9f 92       	push	r9
    23fc:	af 92       	push	r10
    23fe:	bf 92       	push	r11
    2400:	cf 92       	push	r12
    2402:	df 92       	push	r13
    2404:	ef 92       	push	r14
    2406:	ff 92       	push	r15
    2408:	0f 93       	push	r16
    240a:	1f 93       	push	r17
    240c:	cf 93       	push	r28
    240e:	df 93       	push	r29
    2410:	ec 01       	movw	r28, r24
    2412:	8d 81       	ldd	r24, Y+5	; 0x05
    2414:	88 23       	and	r24, r24
    2416:	59 f0       	breq	.+22     	; 0x242e <_ZN6SdFile7seekSetEm+0x36>
    2418:	0b 89       	ldd	r16, Y+19	; 0x13
    241a:	1c 89       	ldd	r17, Y+20	; 0x14
    241c:	2d 89       	ldd	r18, Y+21	; 0x15
    241e:	3e 89       	ldd	r19, Y+22	; 0x16
    2420:	04 17       	cp	r16, r20
    2422:	15 07       	cpc	r17, r21
    2424:	26 07       	cpc	r18, r22
    2426:	37 07       	cpc	r19, r23
    2428:	20 f4       	brcc	.+8      	; 0x2432 <_ZN6SdFile7seekSetEm+0x3a>
    242a:	91 e0       	ldi	r25, 0x01	; 1
    242c:	03 c0       	rjmp	.+6      	; 0x2434 <_ZN6SdFile7seekSetEm+0x3c>
    242e:	91 e0       	ldi	r25, 0x01	; 1
    2430:	01 c0       	rjmp	.+2      	; 0x2434 <_ZN6SdFile7seekSetEm+0x3c>
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	91 11       	cpse	r25, r1
    2436:	73 c0       	rjmp	.+230    	; 0x251e <_ZN6SdFile7seekSetEm+0x126>
    2438:	82 30       	cpi	r24, 0x02	; 2
    243a:	31 f4       	brne	.+12     	; 0x2448 <_ZN6SdFile7seekSetEm+0x50>
    243c:	4a 87       	std	Y+10, r20	; 0x0a
    243e:	5b 87       	std	Y+11, r21	; 0x0b
    2440:	6c 87       	std	Y+12, r22	; 0x0c
    2442:	7d 87       	std	Y+13, r23	; 0x0d
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	6c c0       	rjmp	.+216    	; 0x2520 <_ZN6SdFile7seekSetEm+0x128>
    2448:	41 15       	cp	r20, r1
    244a:	51 05       	cpc	r21, r1
    244c:	61 05       	cpc	r22, r1
    244e:	71 05       	cpc	r23, r1
    2450:	51 f4       	brne	.+20     	; 0x2466 <_ZN6SdFile7seekSetEm+0x6e>
    2452:	1e 82       	std	Y+6, r1	; 0x06
    2454:	1f 82       	std	Y+7, r1	; 0x07
    2456:	18 86       	std	Y+8, r1	; 0x08
    2458:	19 86       	std	Y+9, r1	; 0x09
    245a:	1a 86       	std	Y+10, r1	; 0x0a
    245c:	1b 86       	std	Y+11, r1	; 0x0b
    245e:	1c 86       	std	Y+12, r1	; 0x0c
    2460:	1d 86       	std	Y+13, r1	; 0x0d
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	5d c0       	rjmp	.+186    	; 0x2520 <_ZN6SdFile7seekSetEm+0x128>
    2466:	4a 01       	movw	r8, r20
    2468:	5b 01       	movw	r10, r22
    246a:	0a 85       	ldd	r16, Y+10	; 0x0a
    246c:	1b 85       	ldd	r17, Y+11	; 0x0b
    246e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2470:	3d 85       	ldd	r19, Y+13	; 0x0d
    2472:	68 01       	movw	r12, r16
    2474:	79 01       	movw	r14, r18
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	c8 1a       	sub	r12, r24
    247a:	d1 08       	sbc	r13, r1
    247c:	e1 08       	sbc	r14, r1
    247e:	f1 08       	sbc	r15, r1
    2480:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2482:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2484:	85 85       	ldd	r24, Z+13	; 0x0d
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	09 96       	adiw	r24, 0x09	; 9
    248a:	08 2e       	mov	r0, r24
    248c:	04 c0       	rjmp	.+8      	; 0x2496 <_ZN6SdFile7seekSetEm+0x9e>
    248e:	f6 94       	lsr	r15
    2490:	e7 94       	ror	r14
    2492:	d7 94       	ror	r13
    2494:	c7 94       	ror	r12
    2496:	0a 94       	dec	r0
    2498:	d2 f7       	brpl	.-12     	; 0x248e <_ZN6SdFile7seekSetEm+0x96>
    249a:	41 50       	subi	r20, 0x01	; 1
    249c:	51 09       	sbc	r21, r1
    249e:	61 09       	sbc	r22, r1
    24a0:	71 09       	sbc	r23, r1
    24a2:	04 c0       	rjmp	.+8      	; 0x24ac <_ZN6SdFile7seekSetEm+0xb4>
    24a4:	76 95       	lsr	r23
    24a6:	67 95       	ror	r22
    24a8:	57 95       	ror	r21
    24aa:	47 95       	ror	r20
    24ac:	8a 95       	dec	r24
    24ae:	d2 f7       	brpl	.-12     	; 0x24a4 <_ZN6SdFile7seekSetEm+0xac>
    24b0:	4c 15       	cp	r20, r12
    24b2:	5d 05       	cpc	r21, r13
    24b4:	6e 05       	cpc	r22, r14
    24b6:	7f 05       	cpc	r23, r15
    24b8:	20 f0       	brcs	.+8      	; 0x24c2 <_ZN6SdFile7seekSetEm+0xca>
    24ba:	01 2b       	or	r16, r17
    24bc:	02 2b       	or	r16, r18
    24be:	03 2b       	or	r16, r19
    24c0:	49 f4       	brne	.+18     	; 0x24d4 <_ZN6SdFile7seekSetEm+0xdc>
    24c2:	8f 89       	ldd	r24, Y+23	; 0x17
    24c4:	98 8d       	ldd	r25, Y+24	; 0x18
    24c6:	a9 8d       	ldd	r26, Y+25	; 0x19
    24c8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    24ca:	8e 83       	std	Y+6, r24	; 0x06
    24cc:	9f 83       	std	Y+7, r25	; 0x07
    24ce:	a8 87       	std	Y+8, r26	; 0x08
    24d0:	b9 87       	std	Y+9, r27	; 0x09
    24d2:	04 c0       	rjmp	.+8      	; 0x24dc <_ZN6SdFile7seekSetEm+0xe4>
    24d4:	4c 19       	sub	r20, r12
    24d6:	5d 09       	sbc	r21, r13
    24d8:	6e 09       	sbc	r22, r14
    24da:	7f 09       	sbc	r23, r15
    24dc:	6a 01       	movw	r12, r20
    24de:	7b 01       	movw	r14, r22
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	c8 1a       	sub	r12, r24
    24e4:	d1 08       	sbc	r13, r1
    24e6:	e1 08       	sbc	r14, r1
    24e8:	f1 08       	sbc	r15, r1
    24ea:	45 2b       	or	r20, r21
    24ec:	46 2b       	or	r20, r22
    24ee:	47 2b       	or	r20, r23
    24f0:	81 f0       	breq	.+32     	; 0x2512 <_ZN6SdFile7seekSetEm+0x11a>
    24f2:	4e 81       	ldd	r20, Y+6	; 0x06
    24f4:	5f 81       	ldd	r21, Y+7	; 0x07
    24f6:	68 85       	ldd	r22, Y+8	; 0x08
    24f8:	79 85       	ldd	r23, Y+9	; 0x09
    24fa:	9e 01       	movw	r18, r28
    24fc:	2a 5f       	subi	r18, 0xFA	; 250
    24fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2500:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2502:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2504:	0e 94 5d 18 	call	0x30ba	; 0x30ba <_ZNK8SdVolume6fatGetEmPm>
    2508:	b7 01       	movw	r22, r14
    250a:	a6 01       	movw	r20, r12
    250c:	81 11       	cpse	r24, r1
    250e:	e6 cf       	rjmp	.-52     	; 0x24dc <_ZN6SdFile7seekSetEm+0xe4>
    2510:	07 c0       	rjmp	.+14     	; 0x2520 <_ZN6SdFile7seekSetEm+0x128>
    2512:	8a 86       	std	Y+10, r8	; 0x0a
    2514:	9b 86       	std	Y+11, r9	; 0x0b
    2516:	ac 86       	std	Y+12, r10	; 0x0c
    2518:	bd 86       	std	Y+13, r11	; 0x0d
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	01 c0       	rjmp	.+2      	; 0x2520 <_ZN6SdFile7seekSetEm+0x128>
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	df 91       	pop	r29
    2522:	cf 91       	pop	r28
    2524:	1f 91       	pop	r17
    2526:	0f 91       	pop	r16
    2528:	ff 90       	pop	r15
    252a:	ef 90       	pop	r14
    252c:	df 90       	pop	r13
    252e:	cf 90       	pop	r12
    2530:	bf 90       	pop	r11
    2532:	af 90       	pop	r10
    2534:	9f 90       	pop	r9
    2536:	8f 90       	pop	r8
    2538:	08 95       	ret

0000253a <_ZN6SdFile4syncEh>:
    253a:	ff 92       	push	r15
    253c:	0f 93       	push	r16
    253e:	1f 93       	push	r17
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
    2544:	fc 01       	movw	r30, r24
    2546:	85 81       	ldd	r24, Z+5	; 0x05
    2548:	88 23       	and	r24, r24
    254a:	09 f4       	brne	.+2      	; 0x254e <_ZN6SdFile4syncEh+0x14>
    254c:	43 c0       	rjmp	.+134    	; 0x25d4 <_ZN6SdFile4syncEh+0x9a>
    254e:	f6 2e       	mov	r15, r22
    2550:	ef 01       	movw	r28, r30
    2552:	84 81       	ldd	r24, Z+4	; 0x04
    2554:	88 23       	and	r24, r24
    2556:	a4 f5       	brge	.+104    	; 0x25c0 <_ZN6SdFile4syncEh+0x86>
    2558:	61 e0       	ldi	r22, 0x01	; 1
    255a:	cf 01       	movw	r24, r30
    255c:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_ZN6SdFile13cacheDirEntryEh>
    2560:	8c 01       	movw	r16, r24
    2562:	89 2b       	or	r24, r25
    2564:	b1 f1       	breq	.+108    	; 0x25d2 <_ZN6SdFile4syncEh+0x98>
    2566:	8d 81       	ldd	r24, Y+5	; 0x05
    2568:	82 30       	cpi	r24, 0x02	; 2
    256a:	48 f4       	brcc	.+18     	; 0x257e <_ZN6SdFile4syncEh+0x44>
    256c:	8b 89       	ldd	r24, Y+19	; 0x13
    256e:	9c 89       	ldd	r25, Y+20	; 0x14
    2570:	ad 89       	ldd	r26, Y+21	; 0x15
    2572:	be 89       	ldd	r27, Y+22	; 0x16
    2574:	f8 01       	movw	r30, r16
    2576:	84 8f       	std	Z+28, r24	; 0x1c
    2578:	95 8f       	std	Z+29, r25	; 0x1d
    257a:	a6 8f       	std	Z+30, r26	; 0x1e
    257c:	b7 8f       	std	Z+31, r27	; 0x1f
    257e:	8f 89       	ldd	r24, Y+23	; 0x17
    2580:	98 8d       	ldd	r25, Y+24	; 0x18
    2582:	a9 8d       	ldd	r26, Y+25	; 0x19
    2584:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2586:	f8 01       	movw	r30, r16
    2588:	93 8f       	std	Z+27, r25	; 0x1b
    258a:	82 8f       	std	Z+26, r24	; 0x1a
    258c:	8f 89       	ldd	r24, Y+23	; 0x17
    258e:	98 8d       	ldd	r25, Y+24	; 0x18
    2590:	a9 8d       	ldd	r26, Y+25	; 0x19
    2592:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2594:	b5 8b       	std	Z+21, r27	; 0x15
    2596:	a4 8b       	std	Z+20, r26	; 0x14
    2598:	e0 91 56 03 	lds	r30, 0x0356	; 0x800356 <_ZN6SdFile9dateTime_E>
    259c:	f0 91 57 03 	lds	r31, 0x0357	; 0x800357 <_ZN6SdFile9dateTime_E+0x1>
    25a0:	30 97       	sbiw	r30, 0x00	; 0
    25a2:	59 f0       	breq	.+22     	; 0x25ba <_ZN6SdFile4syncEh+0x80>
    25a4:	b8 01       	movw	r22, r16
    25a6:	6a 5e       	subi	r22, 0xEA	; 234
    25a8:	7f 4f       	sbci	r23, 0xFF	; 255
    25aa:	c8 01       	movw	r24, r16
    25ac:	48 96       	adiw	r24, 0x18	; 24
    25ae:	09 95       	icall
    25b0:	f8 01       	movw	r30, r16
    25b2:	80 8d       	ldd	r24, Z+24	; 0x18
    25b4:	91 8d       	ldd	r25, Z+25	; 0x19
    25b6:	93 8b       	std	Z+19, r25	; 0x13
    25b8:	82 8b       	std	Z+18, r24	; 0x12
    25ba:	8c 81       	ldd	r24, Y+4	; 0x04
    25bc:	8f 77       	andi	r24, 0x7F	; 127
    25be:	8c 83       	std	Y+4, r24	; 0x04
    25c0:	f1 10       	cpse	r15, r1
    25c2:	03 c0       	rjmp	.+6      	; 0x25ca <_ZN6SdFile4syncEh+0x90>
    25c4:	8c 81       	ldd	r24, Y+4	; 0x04
    25c6:	8f 7e       	andi	r24, 0xEF	; 239
    25c8:	8c 83       	std	Y+4, r24	; 0x04
    25ca:	8f 2d       	mov	r24, r15
    25cc:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN8SdVolume10cacheFlushEh>
    25d0:	01 c0       	rjmp	.+2      	; 0x25d4 <_ZN6SdFile4syncEh+0x9a>
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	df 91       	pop	r29
    25d6:	cf 91       	pop	r28
    25d8:	1f 91       	pop	r17
    25da:	0f 91       	pop	r16
    25dc:	ff 90       	pop	r15
    25de:	08 95       	ret

000025e0 <_ZN6SdFile5closeEv>:
    25e0:	cf 93       	push	r28
    25e2:	df 93       	push	r29
    25e4:	ec 01       	movw	r28, r24
    25e6:	61 e0       	ldi	r22, 0x01	; 1
    25e8:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZN6SdFile4syncEh>
    25ec:	88 23       	and	r24, r24
    25ee:	11 f0       	breq	.+4      	; 0x25f4 <_ZN6SdFile5closeEv+0x14>
    25f0:	1d 82       	std	Y+5, r1	; 0x05
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	df 91       	pop	r29
    25f6:	cf 91       	pop	r28
    25f8:	08 95       	ret

000025fa <_ZN6SdFile17availableForWriteEv>:
    25fa:	cf 93       	push	r28
    25fc:	df 93       	push	r29
    25fe:	fc 01       	movw	r30, r24
    2600:	25 81       	ldd	r18, Z+5	; 0x05
    2602:	21 30       	cpi	r18, 0x01	; 1
    2604:	29 f4       	brne	.+10     	; 0x2610 <_ZN6SdFile17availableForWriteEv+0x16>
    2606:	24 81       	ldd	r18, Z+4	; 0x04
    2608:	21 fd       	sbrc	r18, 1
    260a:	04 c0       	rjmp	.+8      	; 0x2614 <_ZN6SdFile17availableForWriteEv+0x1a>
    260c:	21 e0       	ldi	r18, 0x01	; 1
    260e:	03 c0       	rjmp	.+6      	; 0x2616 <_ZN6SdFile17availableForWriteEv+0x1c>
    2610:	21 e0       	ldi	r18, 0x01	; 1
    2612:	01 c0       	rjmp	.+2      	; 0x2616 <_ZN6SdFile17availableForWriteEv+0x1c>
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	21 11       	cpse	r18, r1
    2618:	4a c0       	rjmp	.+148    	; 0x26ae <_ZN6SdFile17availableForWriteEv+0xb4>
    261a:	ec 01       	movw	r28, r24
    261c:	8c 81       	ldd	r24, Y+4	; 0x04
    261e:	82 ff       	sbrs	r24, 2
    2620:	12 c0       	rjmp	.+36     	; 0x2646 <_ZN6SdFile17availableForWriteEv+0x4c>
    2622:	8a 85       	ldd	r24, Y+10	; 0x0a
    2624:	9b 85       	ldd	r25, Y+11	; 0x0b
    2626:	ac 85       	ldd	r26, Y+12	; 0x0c
    2628:	bd 85       	ldd	r27, Y+13	; 0x0d
    262a:	4b 89       	ldd	r20, Y+19	; 0x13
    262c:	5c 89       	ldd	r21, Y+20	; 0x14
    262e:	6d 89       	ldd	r22, Y+21	; 0x15
    2630:	7e 89       	ldd	r23, Y+22	; 0x16
    2632:	84 17       	cp	r24, r20
    2634:	95 07       	cpc	r25, r21
    2636:	a6 07       	cpc	r26, r22
    2638:	b7 07       	cpc	r27, r23
    263a:	29 f0       	breq	.+10     	; 0x2646 <_ZN6SdFile17availableForWriteEv+0x4c>
    263c:	ce 01       	movw	r24, r28
    263e:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <_ZN6SdFile7seekSetEm>
    2642:	88 23       	and	r24, r24
    2644:	b9 f1       	breq	.+110    	; 0x26b4 <_ZN6SdFile17availableForWriteEv+0xba>
    2646:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <_ZN8SdVolume7sdCard_E>
    264a:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <_ZN8SdVolume7sdCard_E+0x1>
    264e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <_ZN7Sd2Card6isBusyEv>
    2652:	81 11       	cpse	r24, r1
    2654:	32 c0       	rjmp	.+100    	; 0x26ba <_ZN6SdFile17availableForWriteEv+0xc0>
    2656:	8c 81       	ldd	r24, Y+4	; 0x04
    2658:	85 ff       	sbrs	r24, 5
    265a:	0a c0       	rjmp	.+20     	; 0x2670 <_ZN6SdFile17availableForWriteEv+0x76>
    265c:	60 e0       	ldi	r22, 0x00	; 0
    265e:	ce 01       	movw	r24, r28
    2660:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZN6SdFile4syncEh>
    2664:	8c 81       	ldd	r24, Y+4	; 0x04
    2666:	8f 7d       	andi	r24, 0xDF	; 223
    2668:	8c 83       	std	Y+4, r24	; 0x04
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	27 c0       	rjmp	.+78     	; 0x26be <_ZN6SdFile17availableForWriteEv+0xc4>
    2670:	40 91 58 03 	lds	r20, 0x0358	; 0x800358 <_ZN8SdVolume17cacheMirrorBlock_E>
    2674:	50 91 59 03 	lds	r21, 0x0359	; 0x800359 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2678:	60 91 5a 03 	lds	r22, 0x035A	; 0x80035a <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    267c:	70 91 5b 03 	lds	r23, 0x035B	; 0x80035b <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    2680:	45 2b       	or	r20, r21
    2682:	46 2b       	or	r20, r22
    2684:	47 2b       	or	r20, r23
    2686:	31 f0       	breq	.+12     	; 0x2694 <_ZN6SdFile17availableForWriteEv+0x9a>
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <_ZN8SdVolume21cacheMirrorBlockFlushEh>
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	15 c0       	rjmp	.+42     	; 0x26be <_ZN6SdFile17availableForWriteEv+0xc4>
    2694:	80 61       	ori	r24, 0x10	; 16
    2696:	8c 83       	std	Y+4, r24	; 0x04
    2698:	8a 85       	ldd	r24, Y+10	; 0x0a
    269a:	9b 85       	ldd	r25, Y+11	; 0x0b
    269c:	ac 85       	ldd	r26, Y+12	; 0x0c
    269e:	bd 85       	ldd	r27, Y+13	; 0x0d
    26a0:	9c 01       	movw	r18, r24
    26a2:	31 70       	andi	r19, 0x01	; 1
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	92 e0       	ldi	r25, 0x02	; 2
    26a8:	82 1b       	sub	r24, r18
    26aa:	93 0b       	sbc	r25, r19
    26ac:	08 c0       	rjmp	.+16     	; 0x26be <_ZN6SdFile17availableForWriteEv+0xc4>
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	05 c0       	rjmp	.+10     	; 0x26be <_ZN6SdFile17availableForWriteEv+0xc4>
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	02 c0       	rjmp	.+4      	; 0x26be <_ZN6SdFile17availableForWriteEv+0xc4>
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	df 91       	pop	r29
    26c0:	cf 91       	pop	r28
    26c2:	08 95       	ret

000026c4 <_ZN6SdFile8truncateEm>:
    26c4:	4f 92       	push	r4
    26c6:	5f 92       	push	r5
    26c8:	6f 92       	push	r6
    26ca:	7f 92       	push	r7
    26cc:	8f 92       	push	r8
    26ce:	9f 92       	push	r9
    26d0:	af 92       	push	r10
    26d2:	bf 92       	push	r11
    26d4:	ef 92       	push	r14
    26d6:	ff 92       	push	r15
    26d8:	0f 93       	push	r16
    26da:	1f 93       	push	r17
    26dc:	cf 93       	push	r28
    26de:	df 93       	push	r29
    26e0:	00 d0       	rcall	.+0      	; 0x26e2 <_ZN6SdFile8truncateEm+0x1e>
    26e2:	00 d0       	rcall	.+0      	; 0x26e4 <_ZN6SdFile8truncateEm+0x20>
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	fc 01       	movw	r30, r24
    26ea:	85 81       	ldd	r24, Z+5	; 0x05
    26ec:	81 30       	cpi	r24, 0x01	; 1
    26ee:	29 f4       	brne	.+10     	; 0x26fa <_ZN6SdFile8truncateEm+0x36>
    26f0:	84 81       	ldd	r24, Z+4	; 0x04
    26f2:	81 fd       	sbrc	r24, 1
    26f4:	04 c0       	rjmp	.+8      	; 0x26fe <_ZN6SdFile8truncateEm+0x3a>
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	03 c0       	rjmp	.+6      	; 0x2700 <_ZN6SdFile8truncateEm+0x3c>
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	01 c0       	rjmp	.+2      	; 0x2700 <_ZN6SdFile8truncateEm+0x3c>
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	81 11       	cpse	r24, r1
    2702:	99 c0       	rjmp	.+306    	; 0x2836 <_ZN6SdFile8truncateEm+0x172>
    2704:	83 89       	ldd	r24, Z+19	; 0x13
    2706:	94 89       	ldd	r25, Z+20	; 0x14
    2708:	a5 89       	ldd	r26, Z+21	; 0x15
    270a:	b6 89       	ldd	r27, Z+22	; 0x16
    270c:	84 17       	cp	r24, r20
    270e:	95 07       	cpc	r25, r21
    2710:	a6 07       	cpc	r26, r22
    2712:	b7 07       	cpc	r27, r23
    2714:	08 f4       	brcc	.+2      	; 0x2718 <_ZN6SdFile8truncateEm+0x54>
    2716:	91 c0       	rjmp	.+290    	; 0x283a <_ZN6SdFile8truncateEm+0x176>
    2718:	89 2b       	or	r24, r25
    271a:	8a 2b       	or	r24, r26
    271c:	8b 2b       	or	r24, r27
    271e:	09 f4       	brne	.+2      	; 0x2722 <_ZN6SdFile8truncateEm+0x5e>
    2720:	8e c0       	rjmp	.+284    	; 0x283e <_ZN6SdFile8truncateEm+0x17a>
    2722:	82 84       	ldd	r8, Z+10	; 0x0a
    2724:	93 84       	ldd	r9, Z+11	; 0x0b
    2726:	a4 84       	ldd	r10, Z+12	; 0x0c
    2728:	b5 84       	ldd	r11, Z+13	; 0x0d
    272a:	48 15       	cp	r20, r8
    272c:	59 05       	cpc	r21, r9
    272e:	6a 05       	cpc	r22, r10
    2730:	7b 05       	cpc	r23, r11
    2732:	10 f4       	brcc	.+4      	; 0x2738 <_ZN6SdFile8truncateEm+0x74>
    2734:	4a 01       	movw	r8, r20
    2736:	5b 01       	movw	r10, r22
    2738:	2a 01       	movw	r4, r20
    273a:	3b 01       	movw	r6, r22
    273c:	7f 01       	movw	r14, r30
    273e:	cf 01       	movw	r24, r30
    2740:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <_ZN6SdFile7seekSetEm>
    2744:	88 23       	and	r24, r24
    2746:	09 f4       	brne	.+2      	; 0x274a <_ZN6SdFile8truncateEm+0x86>
    2748:	7b c0       	rjmp	.+246    	; 0x2840 <_ZN6SdFile8truncateEm+0x17c>
    274a:	41 14       	cp	r4, r1
    274c:	51 04       	cpc	r5, r1
    274e:	61 04       	cpc	r6, r1
    2750:	71 04       	cpc	r7, r1
    2752:	b1 f4       	brne	.+44     	; 0x2780 <_ZN6SdFile8truncateEm+0xbc>
    2754:	d7 01       	movw	r26, r14
    2756:	57 96       	adiw	r26, 0x17	; 23
    2758:	4d 91       	ld	r20, X+
    275a:	5d 91       	ld	r21, X+
    275c:	6d 91       	ld	r22, X+
    275e:	7c 91       	ld	r23, X
    2760:	5a 97       	sbiw	r26, 0x1a	; 26
    2762:	5b 96       	adiw	r26, 0x1b	; 27
    2764:	8d 91       	ld	r24, X+
    2766:	9c 91       	ld	r25, X
    2768:	5c 97       	sbiw	r26, 0x1c	; 28
    276a:	0e 94 25 1b 	call	0x364a	; 0x364a <_ZN8SdVolume9freeChainEm>
    276e:	88 23       	and	r24, r24
    2770:	09 f4       	brne	.+2      	; 0x2774 <_ZN6SdFile8truncateEm+0xb0>
    2772:	66 c0       	rjmp	.+204    	; 0x2840 <_ZN6SdFile8truncateEm+0x17c>
    2774:	f7 01       	movw	r30, r14
    2776:	17 8a       	std	Z+23, r1	; 0x17
    2778:	10 8e       	std	Z+24, r1	; 0x18
    277a:	11 8e       	std	Z+25, r1	; 0x19
    277c:	12 8e       	std	Z+26, r1	; 0x1a
    277e:	42 c0       	rjmp	.+132    	; 0x2804 <_ZN6SdFile8truncateEm+0x140>
    2780:	d7 01       	movw	r26, r14
    2782:	16 96       	adiw	r26, 0x06	; 6
    2784:	4d 91       	ld	r20, X+
    2786:	5d 91       	ld	r21, X+
    2788:	6d 91       	ld	r22, X+
    278a:	7c 91       	ld	r23, X
    278c:	19 97       	sbiw	r26, 0x09	; 9
    278e:	9e 01       	movw	r18, r28
    2790:	2f 5f       	subi	r18, 0xFF	; 255
    2792:	3f 4f       	sbci	r19, 0xFF	; 255
    2794:	5b 96       	adiw	r26, 0x1b	; 27
    2796:	8d 91       	ld	r24, X+
    2798:	9c 91       	ld	r25, X
    279a:	5c 97       	sbiw	r26, 0x1c	; 28
    279c:	0e 94 5d 18 	call	0x30ba	; 0x30ba <_ZNK8SdVolume6fatGetEmPm>
    27a0:	88 23       	and	r24, r24
    27a2:	71 f1       	breq	.+92     	; 0x2800 <_ZN6SdFile8truncateEm+0x13c>
    27a4:	49 81       	ldd	r20, Y+1	; 0x01
    27a6:	5a 81       	ldd	r21, Y+2	; 0x02
    27a8:	6b 81       	ldd	r22, Y+3	; 0x03
    27aa:	7c 81       	ldd	r23, Y+4	; 0x04
    27ac:	d7 01       	movw	r26, r14
    27ae:	5b 96       	adiw	r26, 0x1b	; 27
    27b0:	ed 91       	ld	r30, X+
    27b2:	fc 91       	ld	r31, X
    27b4:	5c 97       	sbiw	r26, 0x1c	; 28
    27b6:	87 89       	ldd	r24, Z+23	; 0x17
    27b8:	80 31       	cpi	r24, 0x10	; 16
    27ba:	29 f4       	brne	.+10     	; 0x27c6 <_ZN6SdFile8truncateEm+0x102>
    27bc:	88 ef       	ldi	r24, 0xF8	; 248
    27be:	9f ef       	ldi	r25, 0xFF	; 255
    27c0:	a0 e0       	ldi	r26, 0x00	; 0
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	04 c0       	rjmp	.+8      	; 0x27ce <_ZN6SdFile8truncateEm+0x10a>
    27c6:	88 ef       	ldi	r24, 0xF8	; 248
    27c8:	9f ef       	ldi	r25, 0xFF	; 255
    27ca:	af ef       	ldi	r26, 0xFF	; 255
    27cc:	bf e0       	ldi	r27, 0x0F	; 15
    27ce:	48 17       	cp	r20, r24
    27d0:	59 07       	cpc	r21, r25
    27d2:	6a 07       	cpc	r22, r26
    27d4:	7b 07       	cpc	r23, r27
    27d6:	b0 f4       	brcc	.+44     	; 0x2804 <_ZN6SdFile8truncateEm+0x140>
    27d8:	cf 01       	movw	r24, r30
    27da:	0e 94 25 1b 	call	0x364a	; 0x364a <_ZN8SdVolume9freeChainEm>
    27de:	88 23       	and	r24, r24
    27e0:	79 f0       	breq	.+30     	; 0x2800 <_ZN6SdFile8truncateEm+0x13c>
    27e2:	f7 01       	movw	r30, r14
    27e4:	46 81       	ldd	r20, Z+6	; 0x06
    27e6:	57 81       	ldd	r21, Z+7	; 0x07
    27e8:	60 85       	ldd	r22, Z+8	; 0x08
    27ea:	71 85       	ldd	r23, Z+9	; 0x09
    27ec:	0f ef       	ldi	r16, 0xFF	; 255
    27ee:	1f ef       	ldi	r17, 0xFF	; 255
    27f0:	2f ef       	ldi	r18, 0xFF	; 255
    27f2:	3f e0       	ldi	r19, 0x0F	; 15
    27f4:	83 8d       	ldd	r24, Z+27	; 0x1b
    27f6:	94 8d       	ldd	r25, Z+28	; 0x1c
    27f8:	0e 94 46 19 	call	0x328c	; 0x328c <_ZN8SdVolume6fatPutEmm>
    27fc:	81 11       	cpse	r24, r1
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <_ZN6SdFile8truncateEm+0x140>
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	1e c0       	rjmp	.+60     	; 0x2840 <_ZN6SdFile8truncateEm+0x17c>
    2804:	d7 01       	movw	r26, r14
    2806:	53 96       	adiw	r26, 0x13	; 19
    2808:	4d 92       	st	X+, r4
    280a:	5d 92       	st	X+, r5
    280c:	6d 92       	st	X+, r6
    280e:	7c 92       	st	X, r7
    2810:	56 97       	sbiw	r26, 0x16	; 22
    2812:	14 96       	adiw	r26, 0x04	; 4
    2814:	8c 91       	ld	r24, X
    2816:	14 97       	sbiw	r26, 0x04	; 4
    2818:	80 68       	ori	r24, 0x80	; 128
    281a:	14 96       	adiw	r26, 0x04	; 4
    281c:	8c 93       	st	X, r24
    281e:	61 e0       	ldi	r22, 0x01	; 1
    2820:	c7 01       	movw	r24, r14
    2822:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZN6SdFile4syncEh>
    2826:	88 23       	and	r24, r24
    2828:	59 f0       	breq	.+22     	; 0x2840 <_ZN6SdFile8truncateEm+0x17c>
    282a:	b5 01       	movw	r22, r10
    282c:	a4 01       	movw	r20, r8
    282e:	c7 01       	movw	r24, r14
    2830:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <_ZN6SdFile7seekSetEm>
    2834:	05 c0       	rjmp	.+10     	; 0x2840 <_ZN6SdFile8truncateEm+0x17c>
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	03 c0       	rjmp	.+6      	; 0x2840 <_ZN6SdFile8truncateEm+0x17c>
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	01 c0       	rjmp	.+2      	; 0x2840 <_ZN6SdFile8truncateEm+0x17c>
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	0f 90       	pop	r0
    2842:	0f 90       	pop	r0
    2844:	0f 90       	pop	r0
    2846:	0f 90       	pop	r0
    2848:	df 91       	pop	r29
    284a:	cf 91       	pop	r28
    284c:	1f 91       	pop	r17
    284e:	0f 91       	pop	r16
    2850:	ff 90       	pop	r15
    2852:	ef 90       	pop	r14
    2854:	bf 90       	pop	r11
    2856:	af 90       	pop	r10
    2858:	9f 90       	pop	r9
    285a:	8f 90       	pop	r8
    285c:	7f 90       	pop	r7
    285e:	6f 90       	pop	r6
    2860:	5f 90       	pop	r5
    2862:	4f 90       	pop	r4
    2864:	08 95       	ret

00002866 <_ZN6SdFile15openCachedEntryEhh>:
    2866:	1f 93       	push	r17
    2868:	cf 93       	push	r28
    286a:	df 93       	push	r29
    286c:	ec 01       	movw	r28, r24
    286e:	80 e2       	ldi	r24, 0x20	; 32
    2870:	68 9f       	mul	r22, r24
    2872:	f0 01       	movw	r30, r0
    2874:	11 24       	eor	r1, r1
    2876:	e1 5a       	subi	r30, 0xA1	; 161
    2878:	fc 4f       	sbci	r31, 0xFC	; 252
    287a:	93 85       	ldd	r25, Z+11	; 0x0b
    287c:	91 71       	andi	r25, 0x11	; 17
    287e:	21 f0       	breq	.+8      	; 0x2888 <_ZN6SdFile15openCachedEntryEhh+0x22>
    2880:	84 2f       	mov	r24, r20
    2882:	82 74       	andi	r24, 0x42	; 66
    2884:	09 f0       	breq	.+2      	; 0x2888 <_ZN6SdFile15openCachedEntryEhh+0x22>
    2886:	54 c0       	rjmp	.+168    	; 0x2930 <_ZN6SdFile15openCachedEntryEhh+0xca>
    2888:	14 2f       	mov	r17, r20
    288a:	6a 8b       	std	Y+18, r22	; 0x12
    288c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    2890:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2894:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2898:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    289c:	8e 87       	std	Y+14, r24	; 0x0e
    289e:	9f 87       	std	Y+15, r25	; 0x0f
    28a0:	a8 8b       	std	Y+16, r26	; 0x10
    28a2:	b9 8b       	std	Y+17, r27	; 0x11
    28a4:	84 89       	ldd	r24, Z+20	; 0x14
    28a6:	95 89       	ldd	r25, Z+21	; 0x15
    28a8:	a0 e0       	ldi	r26, 0x00	; 0
    28aa:	b0 e0       	ldi	r27, 0x00	; 0
    28ac:	dc 01       	movw	r26, r24
    28ae:	99 27       	eor	r25, r25
    28b0:	88 27       	eor	r24, r24
    28b2:	8f 8b       	std	Y+23, r24	; 0x17
    28b4:	98 8f       	std	Y+24, r25	; 0x18
    28b6:	a9 8f       	std	Y+25, r26	; 0x19
    28b8:	ba 8f       	std	Y+26, r27	; 0x1a
    28ba:	42 8d       	ldd	r20, Z+26	; 0x1a
    28bc:	53 8d       	ldd	r21, Z+27	; 0x1b
    28be:	60 e0       	ldi	r22, 0x00	; 0
    28c0:	70 e0       	ldi	r23, 0x00	; 0
    28c2:	48 2b       	or	r20, r24
    28c4:	59 2b       	or	r21, r25
    28c6:	6a 2b       	or	r22, r26
    28c8:	7b 2b       	or	r23, r27
    28ca:	4f 8b       	std	Y+23, r20	; 0x17
    28cc:	58 8f       	std	Y+24, r21	; 0x18
    28ce:	69 8f       	std	Y+25, r22	; 0x19
    28d0:	7a 8f       	std	Y+26, r23	; 0x1a
    28d2:	23 85       	ldd	r18, Z+11	; 0x0b
    28d4:	28 71       	andi	r18, 0x18	; 24
    28d6:	59 f4       	brne	.+22     	; 0x28ee <_ZN6SdFile15openCachedEntryEhh+0x88>
    28d8:	84 8d       	ldd	r24, Z+28	; 0x1c
    28da:	95 8d       	ldd	r25, Z+29	; 0x1d
    28dc:	a6 8d       	ldd	r26, Z+30	; 0x1e
    28de:	b7 8d       	ldd	r27, Z+31	; 0x1f
    28e0:	8b 8b       	std	Y+19, r24	; 0x13
    28e2:	9c 8b       	std	Y+20, r25	; 0x14
    28e4:	ad 8b       	std	Y+21, r26	; 0x15
    28e6:	be 8b       	std	Y+22, r27	; 0x16
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	8d 83       	std	Y+5, r24	; 0x05
    28ec:	0d c0       	rjmp	.+26     	; 0x2908 <_ZN6SdFile15openCachedEntryEhh+0xa2>
    28ee:	20 31       	cpi	r18, 0x10	; 16
    28f0:	09 f5       	brne	.+66     	; 0x2934 <_ZN6SdFile15openCachedEntryEhh+0xce>
    28f2:	9e 01       	movw	r18, r28
    28f4:	2d 5e       	subi	r18, 0xED	; 237
    28f6:	3f 4f       	sbci	r19, 0xFF	; 255
    28f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28fc:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <_ZNK8SdVolume9chainSizeEmPm>
    2900:	88 23       	and	r24, r24
    2902:	d9 f0       	breq	.+54     	; 0x293a <_ZN6SdFile15openCachedEntryEhh+0xd4>
    2904:	84 e0       	ldi	r24, 0x04	; 4
    2906:	8d 83       	std	Y+5, r24	; 0x05
    2908:	81 2f       	mov	r24, r17
    290a:	8f 70       	andi	r24, 0x0F	; 15
    290c:	8c 83       	std	Y+4, r24	; 0x04
    290e:	1e 82       	std	Y+6, r1	; 0x06
    2910:	1f 82       	std	Y+7, r1	; 0x07
    2912:	18 86       	std	Y+8, r1	; 0x08
    2914:	19 86       	std	Y+9, r1	; 0x09
    2916:	1a 86       	std	Y+10, r1	; 0x0a
    2918:	1b 86       	std	Y+11, r1	; 0x0b
    291a:	1c 86       	std	Y+12, r1	; 0x0c
    291c:	1d 86       	std	Y+13, r1	; 0x0d
    291e:	16 ff       	sbrs	r17, 6
    2920:	0b c0       	rjmp	.+22     	; 0x2938 <_ZN6SdFile15openCachedEntryEhh+0xd2>
    2922:	40 e0       	ldi	r20, 0x00	; 0
    2924:	50 e0       	ldi	r21, 0x00	; 0
    2926:	ba 01       	movw	r22, r20
    2928:	ce 01       	movw	r24, r28
    292a:	0e 94 62 13 	call	0x26c4	; 0x26c4 <_ZN6SdFile8truncateEm>
    292e:	05 c0       	rjmp	.+10     	; 0x293a <_ZN6SdFile15openCachedEntryEhh+0xd4>
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	03 c0       	rjmp	.+6      	; 0x293a <_ZN6SdFile15openCachedEntryEhh+0xd4>
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	01 c0       	rjmp	.+2      	; 0x293a <_ZN6SdFile15openCachedEntryEhh+0xd4>
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	df 91       	pop	r29
    293c:	cf 91       	pop	r28
    293e:	1f 91       	pop	r17
    2940:	08 95       	ret

00002942 <_ZN6SdFile4openEPS_PKch>:
    2942:	af 92       	push	r10
    2944:	bf 92       	push	r11
    2946:	cf 92       	push	r12
    2948:	df 92       	push	r13
    294a:	ef 92       	push	r14
    294c:	ff 92       	push	r15
    294e:	0f 93       	push	r16
    2950:	1f 93       	push	r17
    2952:	cf 93       	push	r28
    2954:	df 93       	push	r29
    2956:	cd b7       	in	r28, 0x3d	; 61
    2958:	de b7       	in	r29, 0x3e	; 62
    295a:	2b 97       	sbiw	r28, 0x0b	; 11
    295c:	0f b6       	in	r0, 0x3f	; 63
    295e:	f8 94       	cli
    2960:	de bf       	out	0x3e, r29	; 62
    2962:	0f be       	out	0x3f, r0	; 63
    2964:	cd bf       	out	0x3d, r28	; 61
    2966:	fc 01       	movw	r30, r24
    2968:	c5 80       	ldd	r12, Z+5	; 0x05
    296a:	c1 10       	cpse	r12, r1
    296c:	ca c0       	rjmp	.+404    	; 0x2b02 <_ZN6SdFile4openEPS_PKch+0x1c0>
    296e:	a2 2e       	mov	r10, r18
    2970:	8b 01       	movw	r16, r22
    2972:	7c 01       	movw	r14, r24
    2974:	be 01       	movw	r22, r28
    2976:	6f 5f       	subi	r22, 0xFF	; 255
    2978:	7f 4f       	sbci	r23, 0xFF	; 255
    297a:	ca 01       	movw	r24, r20
    297c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <_ZN6SdFile10make83NameEPKcPh>
    2980:	88 23       	and	r24, r24
    2982:	09 f4       	brne	.+2      	; 0x2986 <_ZN6SdFile4openEPS_PKch+0x44>
    2984:	c0 c0       	rjmp	.+384    	; 0x2b06 <_ZN6SdFile4openEPS_PKch+0x1c4>
    2986:	f8 01       	movw	r30, r16
    2988:	83 8d       	ldd	r24, Z+27	; 0x1b
    298a:	94 8d       	ldd	r25, Z+28	; 0x1c
    298c:	f7 01       	movw	r30, r14
    298e:	94 8f       	std	Z+28, r25	; 0x1c
    2990:	83 8f       	std	Z+27, r24	; 0x1b
    2992:	f8 01       	movw	r30, r16
    2994:	16 82       	std	Z+6, r1	; 0x06
    2996:	17 82       	std	Z+7, r1	; 0x07
    2998:	10 86       	std	Z+8, r1	; 0x08
    299a:	11 86       	std	Z+9, r1	; 0x09
    299c:	12 86       	std	Z+10, r1	; 0x0a
    299e:	13 86       	std	Z+11, r1	; 0x0b
    29a0:	14 86       	std	Z+12, r1	; 0x0c
    29a2:	15 86       	std	Z+13, r1	; 0x0d
    29a4:	b1 2c       	mov	r11, r1
    29a6:	f8 01       	movw	r30, r16
    29a8:	42 85       	ldd	r20, Z+10	; 0x0a
    29aa:	53 85       	ldd	r21, Z+11	; 0x0b
    29ac:	64 85       	ldd	r22, Z+12	; 0x0c
    29ae:	75 85       	ldd	r23, Z+13	; 0x0d
    29b0:	83 89       	ldd	r24, Z+19	; 0x13
    29b2:	94 89       	ldd	r25, Z+20	; 0x14
    29b4:	a5 89       	ldd	r26, Z+21	; 0x15
    29b6:	b6 89       	ldd	r27, Z+22	; 0x16
    29b8:	48 17       	cp	r20, r24
    29ba:	59 07       	cpc	r21, r25
    29bc:	6a 07       	cpc	r22, r26
    29be:	7b 07       	cpc	r23, r27
    29c0:	08 f0       	brcs	.+2      	; 0x29c4 <_ZN6SdFile4openEPS_PKch+0x82>
    29c2:	44 c0       	rjmp	.+136    	; 0x2a4c <_ZN6SdFile4openEPS_PKch+0x10a>
    29c4:	68 94       	set
    29c6:	14 f8       	bld	r1, 4
    29c8:	76 95       	lsr	r23
    29ca:	67 95       	ror	r22
    29cc:	57 95       	ror	r21
    29ce:	47 95       	ror	r20
    29d0:	16 94       	lsr	r1
    29d2:	d1 f7       	brne	.-12     	; 0x29c8 <_ZN6SdFile4openEPS_PKch+0x86>
    29d4:	f4 2f       	mov	r31, r20
    29d6:	ff 70       	andi	r31, 0x0F	; 15
    29d8:	df 2e       	mov	r13, r31
    29da:	c8 01       	movw	r24, r16
    29dc:	0e 94 b1 11 	call	0x2362	; 0x2362 <_ZN6SdFile12readDirCacheEv>
    29e0:	00 97       	sbiw	r24, 0x00	; 0
    29e2:	09 f4       	brne	.+2      	; 0x29e6 <_ZN6SdFile4openEPS_PKch+0xa4>
    29e4:	91 c0       	rjmp	.+290    	; 0x2b08 <_ZN6SdFile4openEPS_PKch+0x1c6>
    29e6:	fc 01       	movw	r30, r24
    29e8:	20 81       	ld	r18, Z
    29ea:	22 23       	and	r18, r18
    29ec:	11 f0       	breq	.+4      	; 0x29f2 <_ZN6SdFile4openEPS_PKch+0xb0>
    29ee:	25 3e       	cpi	r18, 0xE5	; 229
    29f0:	b9 f4       	brne	.+46     	; 0x2a20 <_ZN6SdFile4openEPS_PKch+0xde>
    29f2:	b1 10       	cpse	r11, r1
    29f4:	10 c0       	rjmp	.+32     	; 0x2a16 <_ZN6SdFile4openEPS_PKch+0xd4>
    29f6:	f7 01       	movw	r30, r14
    29f8:	d2 8a       	std	Z+18, r13	; 0x12
    29fa:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    29fe:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2a02:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2a06:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2a0a:	46 87       	std	Z+14, r20	; 0x0e
    2a0c:	57 87       	std	Z+15, r21	; 0x0f
    2a0e:	60 8b       	std	Z+16, r22	; 0x10
    2a10:	71 8b       	std	Z+17, r23	; 0x11
    2a12:	bb 24       	eor	r11, r11
    2a14:	b3 94       	inc	r11
    2a16:	fc 01       	movw	r30, r24
    2a18:	80 81       	ld	r24, Z
    2a1a:	81 11       	cpse	r24, r1
    2a1c:	c4 cf       	rjmp	.-120    	; 0x29a6 <_ZN6SdFile4openEPS_PKch+0x64>
    2a1e:	16 c0       	rjmp	.+44     	; 0x2a4c <_ZN6SdFile4openEPS_PKch+0x10a>
    2a20:	4b e0       	ldi	r20, 0x0B	; 11
    2a22:	50 e0       	ldi	r21, 0x00	; 0
    2a24:	bc 01       	movw	r22, r24
    2a26:	ce 01       	movw	r24, r28
    2a28:	01 96       	adiw	r24, 0x01	; 1
    2a2a:	0e 94 09 29 	call	0x5212	; 0x5212 <memcmp>
    2a2e:	89 2b       	or	r24, r25
    2a30:	09 f0       	breq	.+2      	; 0x2a34 <_ZN6SdFile4openEPS_PKch+0xf2>
    2a32:	b9 cf       	rjmp	.-142    	; 0x29a6 <_ZN6SdFile4openEPS_PKch+0x64>
    2a34:	8a 2d       	mov	r24, r10
    2a36:	80 73       	andi	r24, 0x30	; 48
    2a38:	80 33       	cpi	r24, 0x30	; 48
    2a3a:	09 f4       	brne	.+2      	; 0x2a3e <_ZN6SdFile4openEPS_PKch+0xfc>
    2a3c:	65 c0       	rjmp	.+202    	; 0x2b08 <_ZN6SdFile4openEPS_PKch+0x1c6>
    2a3e:	4a 2d       	mov	r20, r10
    2a40:	6d 2d       	mov	r22, r13
    2a42:	c7 01       	movw	r24, r14
    2a44:	0e 94 33 14 	call	0x2866	; 0x2866 <_ZN6SdFile15openCachedEntryEhh>
    2a48:	c8 2e       	mov	r12, r24
    2a4a:	5e c0       	rjmp	.+188    	; 0x2b08 <_ZN6SdFile4openEPS_PKch+0x1c6>
    2a4c:	8a 2d       	mov	r24, r10
    2a4e:	82 71       	andi	r24, 0x12	; 18
    2a50:	82 31       	cpi	r24, 0x12	; 18
    2a52:	09 f0       	breq	.+2      	; 0x2a56 <_ZN6SdFile4openEPS_PKch+0x114>
    2a54:	59 c0       	rjmp	.+178    	; 0x2b08 <_ZN6SdFile4openEPS_PKch+0x1c6>
    2a56:	bb 20       	and	r11, r11
    2a58:	41 f0       	breq	.+16     	; 0x2a6a <_ZN6SdFile4openEPS_PKch+0x128>
    2a5a:	61 e0       	ldi	r22, 0x01	; 1
    2a5c:	c7 01       	movw	r24, r14
    2a5e:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_ZN6SdFile13cacheDirEntryEh>
    2a62:	8c 01       	movw	r16, r24
    2a64:	89 2b       	or	r24, r25
    2a66:	89 f4       	brne	.+34     	; 0x2a8a <_ZN6SdFile4openEPS_PKch+0x148>
    2a68:	4f c0       	rjmp	.+158    	; 0x2b08 <_ZN6SdFile4openEPS_PKch+0x1c6>
    2a6a:	f8 01       	movw	r30, r16
    2a6c:	85 81       	ldd	r24, Z+5	; 0x05
    2a6e:	82 30       	cpi	r24, 0x02	; 2
    2a70:	09 f4       	brne	.+2      	; 0x2a74 <_ZN6SdFile4openEPS_PKch+0x132>
    2a72:	4a c0       	rjmp	.+148    	; 0x2b08 <_ZN6SdFile4openEPS_PKch+0x1c6>
    2a74:	c8 01       	movw	r24, r16
    2a76:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <_ZN6SdFile13addDirClusterEv>
    2a7a:	c8 2e       	mov	r12, r24
    2a7c:	88 23       	and	r24, r24
    2a7e:	09 f4       	brne	.+2      	; 0x2a82 <_ZN6SdFile4openEPS_PKch+0x140>
    2a80:	43 c0       	rjmp	.+134    	; 0x2b08 <_ZN6SdFile4openEPS_PKch+0x1c6>
    2a82:	f7 01       	movw	r30, r14
    2a84:	12 8a       	std	Z+18, r1	; 0x12
    2a86:	0f e5       	ldi	r16, 0x5F	; 95
    2a88:	13 e0       	ldi	r17, 0x03	; 3
    2a8a:	80 e2       	ldi	r24, 0x20	; 32
    2a8c:	f8 01       	movw	r30, r16
    2a8e:	11 92       	st	Z+, r1
    2a90:	8a 95       	dec	r24
    2a92:	e9 f7       	brne	.-6      	; 0x2a8e <_ZN6SdFile4openEPS_PKch+0x14c>
    2a94:	8b e0       	ldi	r24, 0x0B	; 11
    2a96:	fe 01       	movw	r30, r28
    2a98:	31 96       	adiw	r30, 0x01	; 1
    2a9a:	d8 01       	movw	r26, r16
    2a9c:	01 90       	ld	r0, Z+
    2a9e:	0d 92       	st	X+, r0
    2aa0:	8a 95       	dec	r24
    2aa2:	e1 f7       	brne	.-8      	; 0x2a9c <_ZN6SdFile4openEPS_PKch+0x15a>
    2aa4:	e0 91 56 03 	lds	r30, 0x0356	; 0x800356 <_ZN6SdFile9dateTime_E>
    2aa8:	f0 91 57 03 	lds	r31, 0x0357	; 0x800357 <_ZN6SdFile9dateTime_E+0x1>
    2aac:	30 97       	sbiw	r30, 0x00	; 0
    2aae:	39 f0       	breq	.+14     	; 0x2abe <_ZN6SdFile4openEPS_PKch+0x17c>
    2ab0:	b8 01       	movw	r22, r16
    2ab2:	62 5f       	subi	r22, 0xF2	; 242
    2ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab6:	c8 01       	movw	r24, r16
    2ab8:	40 96       	adiw	r24, 0x10	; 16
    2aba:	09 95       	icall
    2abc:	09 c0       	rjmp	.+18     	; 0x2ad0 <_ZN6SdFile4openEPS_PKch+0x18e>
    2abe:	81 e2       	ldi	r24, 0x21	; 33
    2ac0:	98 e2       	ldi	r25, 0x28	; 40
    2ac2:	f8 01       	movw	r30, r16
    2ac4:	91 8b       	std	Z+17, r25	; 0x11
    2ac6:	80 8b       	std	Z+16, r24	; 0x10
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	98 e0       	ldi	r25, 0x08	; 8
    2acc:	97 87       	std	Z+15, r25	; 0x0f
    2ace:	86 87       	std	Z+14, r24	; 0x0e
    2ad0:	f8 01       	movw	r30, r16
    2ad2:	80 89       	ldd	r24, Z+16	; 0x10
    2ad4:	91 89       	ldd	r25, Z+17	; 0x11
    2ad6:	93 8b       	std	Z+19, r25	; 0x13
    2ad8:	82 8b       	std	Z+18, r24	; 0x12
    2ada:	91 8f       	std	Z+25, r25	; 0x19
    2adc:	80 8f       	std	Z+24, r24	; 0x18
    2ade:	86 85       	ldd	r24, Z+14	; 0x0e
    2ae0:	97 85       	ldd	r25, Z+15	; 0x0f
    2ae2:	97 8b       	std	Z+23, r25	; 0x17
    2ae4:	86 8b       	std	Z+22, r24	; 0x16
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN8SdVolume10cacheFlushEh>
    2aec:	c8 2e       	mov	r12, r24
    2aee:	88 23       	and	r24, r24
    2af0:	59 f0       	breq	.+22     	; 0x2b08 <_ZN6SdFile4openEPS_PKch+0x1c6>
    2af2:	f7 01       	movw	r30, r14
    2af4:	62 89       	ldd	r22, Z+18	; 0x12
    2af6:	4a 2d       	mov	r20, r10
    2af8:	c7 01       	movw	r24, r14
    2afa:	0e 94 33 14 	call	0x2866	; 0x2866 <_ZN6SdFile15openCachedEntryEhh>
    2afe:	c8 2e       	mov	r12, r24
    2b00:	03 c0       	rjmp	.+6      	; 0x2b08 <_ZN6SdFile4openEPS_PKch+0x1c6>
    2b02:	c1 2c       	mov	r12, r1
    2b04:	01 c0       	rjmp	.+2      	; 0x2b08 <_ZN6SdFile4openEPS_PKch+0x1c6>
    2b06:	c8 2e       	mov	r12, r24
    2b08:	8c 2d       	mov	r24, r12
    2b0a:	2b 96       	adiw	r28, 0x0b	; 11
    2b0c:	0f b6       	in	r0, 0x3f	; 63
    2b0e:	f8 94       	cli
    2b10:	de bf       	out	0x3e, r29	; 62
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	cd bf       	out	0x3d, r28	; 61
    2b16:	df 91       	pop	r29
    2b18:	cf 91       	pop	r28
    2b1a:	1f 91       	pop	r17
    2b1c:	0f 91       	pop	r16
    2b1e:	ff 90       	pop	r15
    2b20:	ef 90       	pop	r14
    2b22:	df 90       	pop	r13
    2b24:	cf 90       	pop	r12
    2b26:	bf 90       	pop	r11
    2b28:	af 90       	pop	r10
    2b2a:	08 95       	ret

00002b2c <_ZN6SdFile6removeEv>:
    2b2c:	cf 93       	push	r28
    2b2e:	df 93       	push	r29
    2b30:	ec 01       	movw	r28, r24
    2b32:	40 e0       	ldi	r20, 0x00	; 0
    2b34:	50 e0       	ldi	r21, 0x00	; 0
    2b36:	ba 01       	movw	r22, r20
    2b38:	0e 94 62 13 	call	0x26c4	; 0x26c4 <_ZN6SdFile8truncateEm>
    2b3c:	88 23       	and	r24, r24
    2b3e:	79 f0       	breq	.+30     	; 0x2b5e <_ZN6SdFile6removeEv+0x32>
    2b40:	61 e0       	ldi	r22, 0x01	; 1
    2b42:	ce 01       	movw	r24, r28
    2b44:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <_ZN6SdFile13cacheDirEntryEh>
    2b48:	00 97       	sbiw	r24, 0x00	; 0
    2b4a:	41 f0       	breq	.+16     	; 0x2b5c <_ZN6SdFile6removeEv+0x30>
    2b4c:	25 ee       	ldi	r18, 0xE5	; 229
    2b4e:	fc 01       	movw	r30, r24
    2b50:	20 83       	st	Z, r18
    2b52:	1d 82       	std	Y+5, r1	; 0x05
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN8SdVolume10cacheFlushEh>
    2b5a:	01 c0       	rjmp	.+2      	; 0x2b5e <_ZN6SdFile6removeEv+0x32>
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	df 91       	pop	r29
    2b60:	cf 91       	pop	r28
    2b62:	08 95       	ret

00002b64 <_ZN6SdFile6removeEPS_PKc>:
    2b64:	cf 93       	push	r28
    2b66:	df 93       	push	r29
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62
    2b6c:	6d 97       	sbiw	r28, 0x1d	; 29
    2b6e:	0f b6       	in	r0, 0x3f	; 63
    2b70:	f8 94       	cli
    2b72:	de bf       	out	0x3e, r29	; 62
    2b74:	0f be       	out	0x3f, r0	; 63
    2b76:	cd bf       	out	0x3d, r28	; 61
    2b78:	ab 01       	movw	r20, r22
    2b7a:	1c 82       	std	Y+4, r1	; 0x04
    2b7c:	1b 82       	std	Y+3, r1	; 0x03
    2b7e:	2d e9       	ldi	r18, 0x9D	; 157
    2b80:	31 e0       	ldi	r19, 0x01	; 1
    2b82:	3a 83       	std	Y+2, r19	; 0x02
    2b84:	29 83       	std	Y+1, r18	; 0x01
    2b86:	1e 82       	std	Y+6, r1	; 0x06
    2b88:	22 e0       	ldi	r18, 0x02	; 2
    2b8a:	bc 01       	movw	r22, r24
    2b8c:	ce 01       	movw	r24, r28
    2b8e:	01 96       	adiw	r24, 0x01	; 1
    2b90:	0e 94 a1 14 	call	0x2942	; 0x2942 <_ZN6SdFile4openEPS_PKch>
    2b94:	88 23       	and	r24, r24
    2b96:	21 f0       	breq	.+8      	; 0x2ba0 <_ZN6SdFile6removeEPS_PKc+0x3c>
    2b98:	ce 01       	movw	r24, r28
    2b9a:	01 96       	adiw	r24, 0x01	; 1
    2b9c:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <_ZN6SdFile6removeEv>
    2ba0:	6d 96       	adiw	r28, 0x1d	; 29
    2ba2:	0f b6       	in	r0, 0x3f	; 63
    2ba4:	f8 94       	cli
    2ba6:	de bf       	out	0x3e, r29	; 62
    2ba8:	0f be       	out	0x3f, r0	; 63
    2baa:	cd bf       	out	0x3d, r28	; 61
    2bac:	df 91       	pop	r29
    2bae:	cf 91       	pop	r28
    2bb0:	08 95       	ret

00002bb2 <_ZN6SdFile5writeEPKvj>:
   \a nbyte.  If an error occurs, write() returns 0.  Possible errors
   include write() is called before a file has been opened, write is called
   for a read-only file, device is full, a corrupt file system or an I/O error.

*/
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    2bb2:	3f 92       	push	r3
    2bb4:	4f 92       	push	r4
    2bb6:	5f 92       	push	r5
    2bb8:	6f 92       	push	r6
    2bba:	7f 92       	push	r7
    2bbc:	8f 92       	push	r8
    2bbe:	9f 92       	push	r9
    2bc0:	af 92       	push	r10
    2bc2:	bf 92       	push	r11
    2bc4:	cf 92       	push	r12
    2bc6:	df 92       	push	r13
    2bc8:	ef 92       	push	r14
    2bca:	ff 92       	push	r15
    2bcc:	0f 93       	push	r16
    2bce:	1f 93       	push	r17
    2bd0:	cf 93       	push	r28
    2bd2:	df 93       	push	r29
    2bd4:	00 d0       	rcall	.+0      	; 0x2bd6 <_ZN6SdFile5writeEPKvj+0x24>
    2bd6:	00 d0       	rcall	.+0      	; 0x2bd8 <_ZN6SdFile5writeEPKvj+0x26>
    2bd8:	00 d0       	rcall	.+0      	; 0x2bda <_ZN6SdFile5writeEPKvj+0x28>
    2bda:	cd b7       	in	r28, 0x3d	; 61
    2bdc:	de b7       	in	r29, 0x3e	; 62
    2bde:	6c 01       	movw	r12, r24
    2be0:	7b 01       	movw	r14, r22
    2be2:	5e 83       	std	Y+6, r21	; 0x06
    2be4:	4d 83       	std	Y+5, r20	; 0x05
  const uint8_t* src = reinterpret_cast<const uint8_t*>(buf);

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;
  // if blocking writes should be used
  uint8_t blocking = (flags_ & F_FILE_NON_BLOCKING_WRITE) == 0x00;
    2be6:	dc 01       	movw	r26, r24
    2be8:	14 96       	adiw	r26, 0x04	; 4
    2bea:	9c 91       	ld	r25, X
    2bec:	14 97       	sbiw	r26, 0x04	; 4
    2bee:	29 2f       	mov	r18, r25
    2bf0:	22 95       	swap	r18
    2bf2:	2f 70       	andi	r18, 0x0F	; 15
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	82 27       	eor	r24, r18
    2bf8:	81 70       	andi	r24, 0x01	; 1
    2bfa:	38 2e       	mov	r3, r24
    uint8_t isDir(void) const {
      return type_ >= FAT_FILE_TYPE_MIN_DIR;
    }
    /** \return True if this is a SdFile for a file else false. */
    uint8_t isFile(void) const {
      return type_ == FAT_FILE_TYPE_NORMAL;
    2bfc:	15 96       	adiw	r26, 0x05	; 5
    2bfe:	8c 91       	ld	r24, X

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) {
    2c00:	81 30       	cpi	r24, 0x01	; 1
    2c02:	19 f4       	brne	.+6      	; 0x2c0a <_ZN6SdFile5writeEPKvj+0x58>
    2c04:	91 fd       	sbrc	r25, 1
    2c06:	03 c0       	rjmp	.+6      	; 0x2c0e <_ZN6SdFile5writeEPKvj+0x5c>
    2c08:	03 c0       	rjmp	.+6      	; 0x2c10 <_ZN6SdFile5writeEPKvj+0x5e>
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	01 c0       	rjmp	.+2      	; 0x2c10 <_ZN6SdFile5writeEPKvj+0x5e>
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	81 11       	cpse	r24, r1
    2c12:	66 c1       	rjmp	.+716    	; 0x2ee0 <_ZN6SdFile5writeEPKvj+0x32e>
    goto writeErrorReturn;
  }

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    2c14:	92 fd       	sbrc	r25, 2
    2c16:	03 c0       	rjmp	.+6      	; 0x2c1e <_ZN6SdFile5writeEPKvj+0x6c>
  uint16_t nToWrite = nbyte;
  // if blocking writes should be used
  uint8_t blocking = (flags_ & F_FILE_NON_BLOCKING_WRITE) == 0x00;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) {
    2c18:	8d 80       	ldd	r8, Y+5	; 0x05
    2c1a:	9e 80       	ldd	r9, Y+6	; 0x06
    2c1c:	15 c0       	rjmp	.+42     	; 0x2c48 <_ZN6SdFile5writeEPKvj+0x96>
    goto writeErrorReturn;
  }

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    2c1e:	f6 01       	movw	r30, r12
    2c20:	82 85       	ldd	r24, Z+10	; 0x0a
    2c22:	93 85       	ldd	r25, Z+11	; 0x0b
    2c24:	a4 85       	ldd	r26, Z+12	; 0x0c
    2c26:	b5 85       	ldd	r27, Z+13	; 0x0d
    2c28:	43 89       	ldd	r20, Z+19	; 0x13
    2c2a:	54 89       	ldd	r21, Z+20	; 0x14
    2c2c:	65 89       	ldd	r22, Z+21	; 0x15
    2c2e:	76 89       	ldd	r23, Z+22	; 0x16
    2c30:	84 17       	cp	r24, r20
    2c32:	95 07       	cpc	r25, r21
    2c34:	a6 07       	cpc	r26, r22
    2c36:	b7 07       	cpc	r27, r23
    2c38:	79 f3       	breq	.-34     	; 0x2c18 <_ZN6SdFile5writeEPKvj+0x66>
    /**
        Set the files current position to end of file.  Useful to position
        a file for append. See seekSet().
    */
    uint8_t seekEnd(void) {
      return seekSet(fileSize_);
    2c3a:	c6 01       	movw	r24, r12
    2c3c:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) {
    2c40:	88 23       	and	r24, r24
    2c42:	09 f4       	brne	.+2      	; 0x2c46 <_ZN6SdFile5writeEPKvj+0x94>
    2c44:	4d c1       	rjmp	.+666    	; 0x2ee0 <_ZN6SdFile5writeEPKvj+0x32e>
    2c46:	e8 cf       	rjmp	.-48     	; 0x2c18 <_ZN6SdFile5writeEPKvj+0x66>
      goto writeErrorReturn;
    }
  }

  while (nToWrite > 0) {
    2c48:	81 14       	cp	r8, r1
    2c4a:	91 04       	cpc	r9, r1
    2c4c:	09 f4       	brne	.+2      	; 0x2c50 <_ZN6SdFile5writeEPKvj+0x9e>
    2c4e:	1b c1       	rjmp	.+566    	; 0x2e86 <_ZN6SdFile5writeEPKvj+0x2d4>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    2c50:	d6 01       	movw	r26, r12
    2c52:	1a 96       	adiw	r26, 0x0a	; 10
    2c54:	0d 91       	ld	r16, X+
    2c56:	1d 91       	ld	r17, X+
    2c58:	2d 91       	ld	r18, X+
    2c5a:	3c 91       	ld	r19, X
    2c5c:	1d 97       	sbiw	r26, 0x0d	; 13
    2c5e:	5b 96       	adiw	r26, 0x1b	; 27
    2c60:	ed 91       	ld	r30, X+
    2c62:	fc 91       	ld	r31, X
    2c64:	5c 97       	sbiw	r26, 0x1c	; 28
    uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
    uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
    //----------------------------------------------------------------------------
    uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
    uint8_t blockOfCluster(uint32_t position) const {
      return (position >> 9) & (blocksPerCluster_ - 1);
    2c66:	d9 01       	movw	r26, r18
    2c68:	c8 01       	movw	r24, r16
    2c6a:	07 2e       	mov	r0, r23
    2c6c:	79 e0       	ldi	r23, 0x09	; 9
    2c6e:	b6 95       	lsr	r27
    2c70:	a7 95       	ror	r26
    2c72:	97 95       	ror	r25
    2c74:	87 95       	ror	r24
    2c76:	7a 95       	dec	r23
    2c78:	d1 f7       	brne	.-12     	; 0x2c6e <_ZN6SdFile5writeEPKvj+0xbc>
    2c7a:	70 2d       	mov	r23, r0
    2c7c:	74 80       	ldd	r7, Z+4	; 0x04
    2c7e:	7a 94       	dec	r7
    2c80:	78 22       	and	r7, r24
    uint16_t blockOffset = curPosition_ & 0X1FF;
    2c82:	11 70       	andi	r17, 0x01	; 1
    if (blockOfCluster == 0 && blockOffset == 0) {
    2c84:	71 10       	cpse	r7, r1
    2c86:	54 c0       	rjmp	.+168    	; 0x2d30 <_ZN6SdFile5writeEPKvj+0x17e>
    2c88:	01 15       	cp	r16, r1
    2c8a:	11 05       	cpc	r17, r1
    2c8c:	09 f0       	breq	.+2      	; 0x2c90 <_ZN6SdFile5writeEPKvj+0xde>
    2c8e:	50 c0       	rjmp	.+160    	; 0x2d30 <_ZN6SdFile5writeEPKvj+0x17e>
      // start of new cluster
      if (curCluster_ == 0) {
    2c90:	d6 01       	movw	r26, r12
    2c92:	16 96       	adiw	r26, 0x06	; 6
    2c94:	4d 91       	ld	r20, X+
    2c96:	5d 91       	ld	r21, X+
    2c98:	6d 91       	ld	r22, X+
    2c9a:	7c 91       	ld	r23, X
    2c9c:	19 97       	sbiw	r26, 0x09	; 9
    2c9e:	41 15       	cp	r20, r1
    2ca0:	51 05       	cpc	r21, r1
    2ca2:	61 05       	cpc	r22, r1
    2ca4:	71 05       	cpc	r23, r1
    2ca6:	b1 f4       	brne	.+44     	; 0x2cd4 <_ZN6SdFile5writeEPKvj+0x122>
        if (firstCluster_ == 0) {
    2ca8:	57 96       	adiw	r26, 0x17	; 23
    2caa:	8d 91       	ld	r24, X+
    2cac:	9d 91       	ld	r25, X+
    2cae:	0d 90       	ld	r0, X+
    2cb0:	bc 91       	ld	r27, X
    2cb2:	a0 2d       	mov	r26, r0
    2cb4:	00 97       	sbiw	r24, 0x00	; 0
    2cb6:	a1 05       	cpc	r26, r1
    2cb8:	b1 05       	cpc	r27, r1
    2cba:	31 f4       	brne	.+12     	; 0x2cc8 <_ZN6SdFile5writeEPKvj+0x116>
          // allocate first cluster of file
          if (!addCluster()) {
    2cbc:	c6 01       	movw	r24, r12
    2cbe:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <_ZN6SdFile10addClusterEv>
    2cc2:	81 11       	cpse	r24, r1
    2cc4:	35 c0       	rjmp	.+106    	; 0x2d30 <_ZN6SdFile5writeEPKvj+0x17e>
    2cc6:	0c c1       	rjmp	.+536    	; 0x2ee0 <_ZN6SdFile5writeEPKvj+0x32e>
            goto writeErrorReturn;
          }
        } else {
          curCluster_ = firstCluster_;
    2cc8:	f6 01       	movw	r30, r12
    2cca:	86 83       	std	Z+6, r24	; 0x06
    2ccc:	97 83       	std	Z+7, r25	; 0x07
    2cce:	a0 87       	std	Z+8, r26	; 0x08
    2cd0:	b1 87       	std	Z+9, r27	; 0x09
    2cd2:	2e c0       	rjmp	.+92     	; 0x2d30 <_ZN6SdFile5writeEPKvj+0x17e>
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) {
    2cd4:	9e 01       	movw	r18, r28
    2cd6:	2f 5f       	subi	r18, 0xFF	; 255
    2cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cda:	cf 01       	movw	r24, r30
    2cdc:	0e 94 5d 18 	call	0x30ba	; 0x30ba <_ZNK8SdVolume6fatGetEmPm>
    2ce0:	81 11       	cpse	r24, r1
    2ce2:	02 c0       	rjmp	.+4      	; 0x2ce8 <_ZN6SdFile5writeEPKvj+0x136>
          return false;
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	0b c1       	rjmp	.+534    	; 0x2efe <_ZN6SdFile5writeEPKvj+0x34c>
        }
        if (vol_->isEOC(next)) {
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	9a 81       	ldd	r25, Y+2	; 0x02
    2cec:	ab 81       	ldd	r26, Y+3	; 0x03
    2cee:	bc 81       	ldd	r27, Y+4	; 0x04
    2cf0:	f6 01       	movw	r30, r12
    2cf2:	23 8d       	ldd	r18, Z+27	; 0x1b
    2cf4:	34 8d       	ldd	r19, Z+28	; 0x1c
    uint8_t fatPutEOC(uint32_t cluster) {
      return fatPut(cluster, 0x0FFFFFFF);
    }
    uint8_t freeChain(uint32_t cluster);
    uint8_t isEOC(uint32_t cluster) const {
      return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2cf6:	f9 01       	movw	r30, r18
    2cf8:	27 89       	ldd	r18, Z+23	; 0x17
    2cfa:	20 31       	cpi	r18, 0x10	; 16
    2cfc:	29 f4       	brne	.+10     	; 0x2d08 <_ZN6SdFile5writeEPKvj+0x156>
    2cfe:	48 ef       	ldi	r20, 0xF8	; 248
    2d00:	5f ef       	ldi	r21, 0xFF	; 255
    2d02:	60 e0       	ldi	r22, 0x00	; 0
    2d04:	70 e0       	ldi	r23, 0x00	; 0
    2d06:	04 c0       	rjmp	.+8      	; 0x2d10 <_ZN6SdFile5writeEPKvj+0x15e>
    2d08:	48 ef       	ldi	r20, 0xF8	; 248
    2d0a:	5f ef       	ldi	r21, 0xFF	; 255
    2d0c:	6f ef       	ldi	r22, 0xFF	; 255
    2d0e:	7f e0       	ldi	r23, 0x0F	; 15
    2d10:	84 17       	cp	r24, r20
    2d12:	95 07       	cpc	r25, r21
    2d14:	a6 07       	cpc	r26, r22
    2d16:	b7 07       	cpc	r27, r23
    2d18:	30 f0       	brcs	.+12     	; 0x2d26 <_ZN6SdFile5writeEPKvj+0x174>
          // add cluster if at end of chain
          if (!addCluster()) {
    2d1a:	c6 01       	movw	r24, r12
    2d1c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <_ZN6SdFile10addClusterEv>
    2d20:	81 11       	cpse	r24, r1
    2d22:	06 c0       	rjmp	.+12     	; 0x2d30 <_ZN6SdFile5writeEPKvj+0x17e>
    2d24:	dd c0       	rjmp	.+442    	; 0x2ee0 <_ZN6SdFile5writeEPKvj+0x32e>
            goto writeErrorReturn;
          }
        } else {
          curCluster_ = next;
    2d26:	f6 01       	movw	r30, r12
    2d28:	86 83       	std	Z+6, r24	; 0x06
    2d2a:	97 83       	std	Z+7, r25	; 0x07
    2d2c:	a0 87       	std	Z+8, r26	; 0x08
    2d2e:	b1 87       	std	Z+9, r27	; 0x09
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	92 e0       	ldi	r25, 0x02	; 2
    2d34:	5c 01       	movw	r10, r24
    2d36:	a0 1a       	sub	r10, r16
    2d38:	b1 0a       	sbc	r11, r17

    // lesser of space and amount to write
    if (n > nToWrite) {
    2d3a:	8a 14       	cp	r8, r10
    2d3c:	9b 04       	cpc	r9, r11
    2d3e:	08 f4       	brcc	.+2      	; 0x2d42 <_ZN6SdFile5writeEPKvj+0x190>
      n = nToWrite;
    2d40:	54 01       	movw	r10, r8
    }

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    2d42:	f6 01       	movw	r30, r12
    2d44:	86 81       	ldd	r24, Z+6	; 0x06
    2d46:	97 81       	ldd	r25, Z+7	; 0x07
    2d48:	a0 85       	ldd	r26, Z+8	; 0x08
    2d4a:	b1 85       	ldd	r27, Z+9	; 0x09
    2d4c:	23 8d       	ldd	r18, Z+27	; 0x1b
    2d4e:	34 8d       	ldd	r19, Z+28	; 0x1c
    uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
    uint8_t blockOfCluster(uint32_t position) const {
      return (position >> 9) & (blocksPerCluster_ - 1);
    }
    uint32_t clusterStartBlock(uint32_t cluster) const {
      return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);
    2d50:	f9 01       	movw	r30, r18
    2d52:	46 85       	ldd	r20, Z+14	; 0x0e
    2d54:	57 85       	ldd	r21, Z+15	; 0x0f
    2d56:	60 89       	ldd	r22, Z+16	; 0x10
    2d58:	71 89       	ldd	r23, Z+17	; 0x11
    2d5a:	02 97       	sbiw	r24, 0x02	; 2
    2d5c:	a1 09       	sbc	r26, r1
    2d5e:	b1 09       	sbc	r27, r1
    2d60:	05 84       	ldd	r0, Z+13	; 0x0d
    2d62:	04 c0       	rjmp	.+8      	; 0x2d6c <_ZN6SdFile5writeEPKvj+0x1ba>
    2d64:	88 0f       	add	r24, r24
    2d66:	99 1f       	adc	r25, r25
    2d68:	aa 1f       	adc	r26, r26
    2d6a:	bb 1f       	adc	r27, r27
    2d6c:	0a 94       	dec	r0
    2d6e:	d2 f7       	brpl	.-12     	; 0x2d64 <_ZN6SdFile5writeEPKvj+0x1b2>
    2d70:	84 0f       	add	r24, r20
    2d72:	95 1f       	adc	r25, r21
    2d74:	a6 1f       	adc	r26, r22
    2d76:	b7 1f       	adc	r27, r23
    2d78:	9c 01       	movw	r18, r24
    2d7a:	ad 01       	movw	r20, r26
    2d7c:	27 0d       	add	r18, r7
    2d7e:	31 1d       	adc	r19, r1
    2d80:	41 1d       	adc	r20, r1
    2d82:	51 1d       	adc	r21, r1
    2d84:	29 01       	movw	r4, r18
    2d86:	3a 01       	movw	r6, r20
    if (n == 512) {
    2d88:	a1 14       	cp	r10, r1
    2d8a:	32 e0       	ldi	r19, 0x02	; 2
    2d8c:	b3 06       	cpc	r11, r19
    2d8e:	41 f5       	brne	.+80     	; 0x2de0 <_ZN6SdFile5writeEPKvj+0x22e>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    2d90:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    2d94:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2d98:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2d9c:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2da0:	48 16       	cp	r4, r24
    2da2:	59 06       	cpc	r5, r25
    2da4:	6a 06       	cpc	r6, r26
    2da6:	7b 06       	cpc	r7, r27
    2da8:	59 f4       	brne	.+22     	; 0x2dc0 <_ZN6SdFile5writeEPKvj+0x20e>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    2daa:	8f ef       	ldi	r24, 0xFF	; 255
    2dac:	9f ef       	ldi	r25, 0xFF	; 255
    2dae:	dc 01       	movw	r26, r24
    2db0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    2db4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2db8:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2dbc:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    uint8_t readData(uint32_t block, uint16_t offset,
                     uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
    }
    uint8_t writeBlock(uint32_t block, const uint8_t* dst, uint8_t blocking = 1) {
      return sdCard_->writeBlock(block, dst, blocking);
    2dc0:	03 2d       	mov	r16, r3
    2dc2:	97 01       	movw	r18, r14
    2dc4:	b3 01       	movw	r22, r6
    2dc6:	a2 01       	movw	r20, r4
    2dc8:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <_ZN8SdVolume7sdCard_E>
    2dcc:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <_ZN8SdVolume7sdCard_E+0x1>
    2dd0:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <_ZN7Sd2Card10writeBlockEmPKhh>
      }
      if (!vol_->writeBlock(block, src, blocking)) {
    2dd4:	88 23       	and	r24, r24
    2dd6:	09 f4       	brne	.+2      	; 0x2dda <_ZN6SdFile5writeEPKvj+0x228>
    2dd8:	83 c0       	rjmp	.+262    	; 0x2ee0 <_ZN6SdFile5writeEPKvj+0x32e>
        goto writeErrorReturn;
      }
      src += 512;
    2dda:	4e ef       	ldi	r20, 0xFE	; 254
    2ddc:	f4 1a       	sub	r15, r20
    2dde:	43 c0       	rjmp	.+134    	; 0x2e66 <_ZN6SdFile5writeEPKvj+0x2b4>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    2de0:	01 15       	cp	r16, r1
    2de2:	11 05       	cpc	r17, r1
    2de4:	31 f5       	brne	.+76     	; 0x2e32 <_ZN6SdFile5writeEPKvj+0x280>
    2de6:	d6 01       	movw	r26, r12
    2de8:	1a 96       	adiw	r26, 0x0a	; 10
    2dea:	4d 91       	ld	r20, X+
    2dec:	5d 91       	ld	r21, X+
    2dee:	6d 91       	ld	r22, X+
    2df0:	7c 91       	ld	r23, X
    2df2:	1d 97       	sbiw	r26, 0x0d	; 13
    2df4:	53 96       	adiw	r26, 0x13	; 19
    2df6:	8d 91       	ld	r24, X+
    2df8:	9d 91       	ld	r25, X+
    2dfa:	0d 90       	ld	r0, X+
    2dfc:	bc 91       	ld	r27, X
    2dfe:	a0 2d       	mov	r26, r0
    2e00:	48 17       	cp	r20, r24
    2e02:	59 07       	cpc	r21, r25
    2e04:	6a 07       	cpc	r22, r26
    2e06:	7b 07       	cpc	r23, r27
    2e08:	a0 f0       	brcs	.+40     	; 0x2e32 <_ZN6SdFile5writeEPKvj+0x280>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) {
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN8SdVolume10cacheFlushEh>
    2e10:	88 23       	and	r24, r24
    2e12:	09 f4       	brne	.+2      	; 0x2e16 <_ZN6SdFile5writeEPKvj+0x264>
    2e14:	65 c0       	rjmp	.+202    	; 0x2ee0 <_ZN6SdFile5writeEPKvj+0x32e>
          goto writeErrorReturn;
        }
        SdVolume::cacheBlockNumber_ = block;
    2e16:	40 92 06 01 	sts	0x0106, r4	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    2e1a:	50 92 07 01 	sts	0x0107, r5	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2e1e:	60 92 08 01 	sts	0x0108, r6	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2e22:	70 92 09 01 	sts	0x0109, r7	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    }
    static uint8_t cacheFlush(uint8_t blocking = 1);
    static uint8_t cacheMirrorBlockFlush(uint8_t blocking);
    static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
    static void cacheSetDirty(void) {
      cacheDirty_ |= CACHE_FOR_WRITE;
    2e26:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <_ZN8SdVolume11cacheDirty_E>
    2e2a:	81 60       	ori	r24, 0x01	; 1
    2e2c:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <_ZN8SdVolume11cacheDirty_E>
    2e30:	08 c0       	rjmp	.+16     	; 0x2e42 <_ZN6SdFile5writeEPKvj+0x290>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    2e32:	41 e0       	ldi	r20, 0x01	; 1
    2e34:	c3 01       	movw	r24, r6
    2e36:	b2 01       	movw	r22, r4
    2e38:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <_ZN8SdVolume13cacheRawBlockEmh>
    2e3c:	88 23       	and	r24, r24
    2e3e:	09 f4       	brne	.+2      	; 0x2e42 <_ZN6SdFile5writeEPKvj+0x290>
    2e40:	4f c0       	rjmp	.+158    	; 0x2ee0 <_ZN6SdFile5writeEPKvj+0x32e>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    2e42:	f8 01       	movw	r30, r16
    2e44:	e1 5a       	subi	r30, 0xA1	; 161
    2e46:	fc 4f       	sbci	r31, 0xFC	; 252
      uint8_t* end = dst + n;
    2e48:	9f 01       	movw	r18, r30
    2e4a:	2a 0d       	add	r18, r10
    2e4c:	3b 1d       	adc	r19, r11
      while (dst != end) {
    2e4e:	e2 17       	cp	r30, r18
    2e50:	f3 07       	cpc	r31, r19
    2e52:	49 f0       	breq	.+18     	; 0x2e66 <_ZN6SdFile5writeEPKvj+0x2b4>
        *dst++ = *src++;
    2e54:	d7 01       	movw	r26, r14
    2e56:	8c 91       	ld	r24, X
    2e58:	80 83       	st	Z, r24
    2e5a:	31 96       	adiw	r30, 0x01	; 1
    2e5c:	a7 01       	movw	r20, r14
    2e5e:	4f 5f       	subi	r20, 0xFF	; 255
    2e60:	5f 4f       	sbci	r21, 0xFF	; 255
    2e62:	7a 01       	movw	r14, r20
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) {
    2e64:	f4 cf       	rjmp	.-24     	; 0x2e4e <_ZN6SdFile5writeEPKvj+0x29c>
        *dst++ = *src++;
      }
    }
    nToWrite -= n;
    2e66:	8a 18       	sub	r8, r10
    2e68:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    2e6a:	f6 01       	movw	r30, r12
    2e6c:	82 85       	ldd	r24, Z+10	; 0x0a
    2e6e:	93 85       	ldd	r25, Z+11	; 0x0b
    2e70:	a4 85       	ldd	r26, Z+12	; 0x0c
    2e72:	b5 85       	ldd	r27, Z+13	; 0x0d
    2e74:	8a 0d       	add	r24, r10
    2e76:	9b 1d       	adc	r25, r11
    2e78:	a1 1d       	adc	r26, r1
    2e7a:	b1 1d       	adc	r27, r1
    2e7c:	82 87       	std	Z+10, r24	; 0x0a
    2e7e:	93 87       	std	Z+11, r25	; 0x0b
    2e80:	a4 87       	std	Z+12, r26	; 0x0c
    2e82:	b5 87       	std	Z+13, r27	; 0x0d
    if (!seekEnd()) {
      goto writeErrorReturn;
    }
  }

  while (nToWrite > 0) {
    2e84:	e1 ce       	rjmp	.-574    	; 0x2c48 <_ZN6SdFile5writeEPKvj+0x96>
      }
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    2e86:	f6 01       	movw	r30, r12
    2e88:	82 85       	ldd	r24, Z+10	; 0x0a
    2e8a:	93 85       	ldd	r25, Z+11	; 0x0b
    2e8c:	a4 85       	ldd	r26, Z+12	; 0x0c
    2e8e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2e90:	43 89       	ldd	r20, Z+19	; 0x13
    2e92:	54 89       	ldd	r21, Z+20	; 0x14
    2e94:	65 89       	ldd	r22, Z+21	; 0x15
    2e96:	76 89       	ldd	r23, Z+22	; 0x16
    2e98:	48 17       	cp	r20, r24
    2e9a:	59 07       	cpc	r21, r25
    2e9c:	6a 07       	cpc	r22, r26
    2e9e:	7b 07       	cpc	r23, r27
    2ea0:	40 f4       	brcc	.+16     	; 0x2eb2 <_ZN6SdFile5writeEPKvj+0x300>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    2ea2:	83 8b       	std	Z+19, r24	; 0x13
    2ea4:	94 8b       	std	Z+20, r25	; 0x14
    2ea6:	a5 8b       	std	Z+21, r26	; 0x15
    2ea8:	b6 8b       	std	Z+22, r27	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    2eaa:	84 81       	ldd	r24, Z+4	; 0x04
    2eac:	80 68       	ori	r24, 0x80	; 128
    2eae:	84 83       	std	Z+4, r24	; 0x04
    2eb0:	0d c0       	rjmp	.+26     	; 0x2ecc <_ZN6SdFile5writeEPKvj+0x31a>
  } else if (dateTime_ && nbyte) {
    2eb2:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <_ZN6SdFile9dateTime_E>
    2eb6:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <_ZN6SdFile9dateTime_E+0x1>
    2eba:	89 2b       	or	r24, r25
    2ebc:	39 f0       	breq	.+14     	; 0x2ecc <_ZN6SdFile5writeEPKvj+0x31a>
    2ebe:	2d 81       	ldd	r18, Y+5	; 0x05
    2ec0:	3e 81       	ldd	r19, Y+6	; 0x06
    2ec2:	23 2b       	or	r18, r19
    2ec4:	19 f0       	breq	.+6      	; 0x2ecc <_ZN6SdFile5writeEPKvj+0x31a>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    2ec6:	84 81       	ldd	r24, Z+4	; 0x04
    2ec8:	80 68       	ori	r24, 0x80	; 128
    2eca:	84 83       	std	Z+4, r24	; 0x04
  }

  if (flags_ & O_SYNC) {
    2ecc:	f6 01       	movw	r30, r12
    2ece:	84 81       	ldd	r24, Z+4	; 0x04
    2ed0:	83 ff       	sbrs	r24, 3
    2ed2:	10 c0       	rjmp	.+32     	; 0x2ef4 <_ZN6SdFile5writeEPKvj+0x342>
    if (!sync()) {
    2ed4:	61 e0       	ldi	r22, 0x01	; 1
    2ed6:	c6 01       	movw	r24, r12
    2ed8:	0e 94 9d 12 	call	0x253a	; 0x253a <_ZN6SdFile4syncEh>
    2edc:	81 11       	cpse	r24, r1
    2ede:	0d c0       	rjmp	.+26     	; 0x2efa <_ZN6SdFile5writeEPKvj+0x348>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	d6 01       	movw	r26, r12
    2ee6:	13 96       	adiw	r26, 0x03	; 3
    2ee8:	9c 93       	st	X, r25
    2eea:	8e 93       	st	-X, r24
    2eec:	12 97       	sbiw	r26, 0x02	; 2

writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    2eee:	80 e0       	ldi	r24, 0x00	; 0
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	05 c0       	rjmp	.+10     	; 0x2efe <_ZN6SdFile5writeEPKvj+0x34c>
  if (flags_ & O_SYNC) {
    if (!sync()) {
      goto writeErrorReturn;
    }
  }
  return nbyte;
    2ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef8:	02 c0       	rjmp	.+4      	; 0x2efe <_ZN6SdFile5writeEPKvj+0x34c>
    2efa:	8d 81       	ldd	r24, Y+5	; 0x05
    2efc:	9e 81       	ldd	r25, Y+6	; 0x06
writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    2efe:	26 96       	adiw	r28, 0x06	; 6
    2f00:	0f b6       	in	r0, 0x3f	; 63
    2f02:	f8 94       	cli
    2f04:	de bf       	out	0x3e, r29	; 62
    2f06:	0f be       	out	0x3f, r0	; 63
    2f08:	cd bf       	out	0x3d, r28	; 61
    2f0a:	df 91       	pop	r29
    2f0c:	cf 91       	pop	r28
    2f0e:	1f 91       	pop	r17
    2f10:	0f 91       	pop	r16
    2f12:	ff 90       	pop	r15
    2f14:	ef 90       	pop	r14
    2f16:	df 90       	pop	r13
    2f18:	cf 90       	pop	r12
    2f1a:	bf 90       	pop	r11
    2f1c:	af 90       	pop	r10
    2f1e:	9f 90       	pop	r9
    2f20:	8f 90       	pop	r8
    2f22:	7f 90       	pop	r7
    2f24:	6f 90       	pop	r6
    2f26:	5f 90       	pop	r5
    2f28:	4f 90       	pop	r4
    2f2a:	3f 90       	pop	r3
    2f2c:	08 95       	ret

00002f2e <_ZN6SdFile5writeEh>:
/**
   Write a byte to a file. Required by the Arduino Print class.

   Use SdFile::writeError to check for errors.
*/
size_t SdFile::write(uint8_t b) {
    2f2e:	cf 93       	push	r28
    2f30:	df 93       	push	r29
    2f32:	1f 92       	push	r1
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
    2f38:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    2f3a:	41 e0       	ldi	r20, 0x01	; 1
    2f3c:	50 e0       	ldi	r21, 0x00	; 0
    2f3e:	be 01       	movw	r22, r28
    2f40:	6f 5f       	subi	r22, 0xFF	; 255
    2f42:	7f 4f       	sbci	r23, 0xFF	; 255
    2f44:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <_ZN6SdFile5writeEPKvj>
}
    2f48:	0f 90       	pop	r0
    2f4a:	df 91       	pop	r29
    2f4c:	cf 91       	pop	r28
    2f4e:	08 95       	ret

00002f50 <_ZN8SdVolume21cacheMirrorBlockFlushEh>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheMirrorBlockFlush(uint8_t blocking) {
    2f50:	0f 93       	push	r16
  if (cacheMirrorBlock_) {
    2f52:	40 91 58 03 	lds	r20, 0x0358	; 0x800358 <_ZN8SdVolume17cacheMirrorBlock_E>
    2f56:	50 91 59 03 	lds	r21, 0x0359	; 0x800359 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2f5a:	60 91 5a 03 	lds	r22, 0x035A	; 0x80035a <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2f5e:	70 91 5b 03 	lds	r23, 0x035B	; 0x80035b <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    2f62:	41 15       	cp	r20, r1
    2f64:	51 05       	cpc	r21, r1
    2f66:	61 05       	cpc	r22, r1
    2f68:	71 05       	cpc	r23, r1
    2f6a:	a9 f0       	breq	.+42     	; 0x2f96 <_ZN8SdVolume21cacheMirrorBlockFlushEh+0x46>
    2f6c:	08 2f       	mov	r16, r24
    if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data, blocking)) {
    2f6e:	2f e5       	ldi	r18, 0x5F	; 95
    2f70:	33 e0       	ldi	r19, 0x03	; 3
    2f72:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <_ZN8SdVolume7sdCard_E>
    2f76:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <_ZN8SdVolume7sdCard_E+0x1>
    2f7a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <_ZN7Sd2Card10writeBlockEmPKhh>
    2f7e:	88 23       	and	r24, r24
    2f80:	59 f0       	breq	.+22     	; 0x2f98 <_ZN8SdVolume21cacheMirrorBlockFlushEh+0x48>
      return false;
    }
    cacheMirrorBlock_ = 0;
    2f82:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <_ZN8SdVolume17cacheMirrorBlock_E>
    2f86:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2f8a:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2f8e:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  }
  return true;
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	01 c0       	rjmp	.+2      	; 0x2f98 <_ZN8SdVolume21cacheMirrorBlockFlushEh+0x48>
    2f96:	81 e0       	ldi	r24, 0x01	; 1
}
    2f98:	0f 91       	pop	r16
    2f9a:	08 95       	ret

00002f9c <_ZN8SdVolume10cacheFlushEh>:
  }

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(uint8_t blocking) {
    2f9c:	0f 93       	push	r16
    2f9e:	cf 93       	push	r28
  if (cacheDirty_) {
    2fa0:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <_ZN8SdVolume11cacheDirty_E>
    2fa4:	99 23       	and	r25, r25
    2fa6:	f9 f0       	breq	.+62     	; 0x2fe6 <_ZN8SdVolume10cacheFlushEh+0x4a>
    2fa8:	c8 2f       	mov	r28, r24
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data, blocking)) {
    2faa:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    2fae:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2fb2:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2fb6:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2fba:	08 2f       	mov	r16, r24
    2fbc:	2f e5       	ldi	r18, 0x5F	; 95
    2fbe:	33 e0       	ldi	r19, 0x03	; 3
    2fc0:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <_ZN8SdVolume7sdCard_E>
    2fc4:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <_ZN8SdVolume7sdCard_E+0x1>
    2fc8:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <_ZN7Sd2Card10writeBlockEmPKhh>
    2fcc:	88 23       	and	r24, r24
    2fce:	71 f0       	breq	.+28     	; 0x2fec <_ZN8SdVolume10cacheFlushEh+0x50>
      return false;
    }

    if (!blocking) {
    2fd0:	cc 23       	and	r28, r28
    2fd2:	59 f0       	breq	.+22     	; 0x2fea <_ZN8SdVolume10cacheFlushEh+0x4e>
      return true;
    }

    // mirror FAT tables
    if (!cacheMirrorBlockFlush(blocking)) {
    2fd4:	8c 2f       	mov	r24, r28
    2fd6:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <_ZN8SdVolume21cacheMirrorBlockFlushEh>
    2fda:	88 23       	and	r24, r24
    2fdc:	39 f0       	breq	.+14     	; 0x2fec <_ZN8SdVolume10cacheFlushEh+0x50>
      return false;
    }
    cacheDirty_ = 0;
    2fde:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <_ZN8SdVolume11cacheDirty_E>
  }
  return true;
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	03 c0       	rjmp	.+6      	; 0x2fec <_ZN8SdVolume10cacheFlushEh+0x50>
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	01 c0       	rjmp	.+2      	; 0x2fec <_ZN8SdVolume10cacheFlushEh+0x50>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data, blocking)) {
      return false;
    }

    if (!blocking) {
      return true;
    2fea:	81 e0       	ldi	r24, 0x01	; 1
      return false;
    }
    cacheDirty_ = 0;
  }
  return true;
}
    2fec:	cf 91       	pop	r28
    2fee:	0f 91       	pop	r16
    2ff0:	08 95       	ret

00002ff2 <_ZN8SdVolume13cacheRawBlockEmh>:
    cacheMirrorBlock_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    2ff2:	cf 92       	push	r12
    2ff4:	df 92       	push	r13
    2ff6:	ef 92       	push	r14
    2ff8:	ff 92       	push	r15
    2ffa:	cf 93       	push	r28
    2ffc:	6b 01       	movw	r12, r22
    2ffe:	7c 01       	movw	r14, r24
    3000:	c4 2f       	mov	r28, r20
  if (cacheBlockNumber_ != blockNumber) {
    3002:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    3006:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    300a:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    300e:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3012:	8c 15       	cp	r24, r12
    3014:	9d 05       	cpc	r25, r13
    3016:	ae 05       	cpc	r26, r14
    3018:	bf 05       	cpc	r27, r15
    301a:	c9 f0       	breq	.+50     	; 0x304e <_ZN8SdVolume13cacheRawBlockEmh+0x5c>
    if (!cacheFlush()) {
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN8SdVolume10cacheFlushEh>
    3022:	88 23       	and	r24, r24
    3024:	d1 f0       	breq	.+52     	; 0x305a <_ZN8SdVolume13cacheRawBlockEmh+0x68>
      return false;
    }
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) {
    3026:	2f e5       	ldi	r18, 0x5F	; 95
    3028:	33 e0       	ldi	r19, 0x03	; 3
    302a:	b7 01       	movw	r22, r14
    302c:	a6 01       	movw	r20, r12
    302e:	80 91 5d 03 	lds	r24, 0x035D	; 0x80035d <_ZN8SdVolume7sdCard_E>
    3032:	90 91 5e 03 	lds	r25, 0x035E	; 0x80035e <_ZN8SdVolume7sdCard_E+0x1>
    3036:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <_ZN7Sd2Card9readBlockEmPh>
    303a:	88 23       	and	r24, r24
    303c:	71 f0       	breq	.+28     	; 0x305a <_ZN8SdVolume13cacheRawBlockEmh+0x68>
      return false;
    }
    cacheBlockNumber_ = blockNumber;
    303e:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    3042:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3046:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    304a:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  }
  cacheDirty_ |= action;
    304e:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <_ZN8SdVolume11cacheDirty_E>
    3052:	c8 2b       	or	r28, r24
    3054:	c0 93 5c 03 	sts	0x035C, r28	; 0x80035c <_ZN8SdVolume11cacheDirty_E>
  return true;
    3058:	81 e0       	ldi	r24, 0x01	; 1
}
    305a:	cf 91       	pop	r28
    305c:	ff 90       	pop	r15
    305e:	ef 90       	pop	r14
    3060:	df 90       	pop	r13
    3062:	cf 90       	pop	r12
    3064:	08 95       	ret

00003066 <_ZN8SdVolume14cacheZeroBlockEm>:
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    3066:	cf 92       	push	r12
    3068:	df 92       	push	r13
    306a:	ef 92       	push	r14
    306c:	ff 92       	push	r15
    306e:	6b 01       	movw	r12, r22
    3070:	7c 01       	movw	r14, r24
  if (!cacheFlush()) {
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <_ZN8SdVolume10cacheFlushEh>
    3078:	88 23       	and	r24, r24
    307a:	d1 f0       	breq	.+52     	; 0x30b0 <_ZN8SdVolume14cacheZeroBlockEm+0x4a>
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	90 e0       	ldi	r25, 0x00	; 0
    return false;
  }

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    3080:	81 15       	cp	r24, r1
    3082:	22 e0       	ldi	r18, 0x02	; 2
    3084:	92 07       	cpc	r25, r18
    3086:	30 f4       	brcc	.+12     	; 0x3094 <_ZN8SdVolume14cacheZeroBlockEm+0x2e>
    cacheBuffer_.data[i] = 0;
    3088:	fc 01       	movw	r30, r24
    308a:	e1 5a       	subi	r30, 0xA1	; 161
    308c:	fc 4f       	sbci	r31, 0xFC	; 252
    308e:	10 82       	st	Z, r1
  if (!cacheFlush()) {
    return false;
  }

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    3090:	01 96       	adiw	r24, 0x01	; 1
    3092:	f6 cf       	rjmp	.-20     	; 0x3080 <_ZN8SdVolume14cacheZeroBlockEm+0x1a>
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    3094:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    3098:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    309c:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    30a0:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    30a4:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <_ZN8SdVolume11cacheDirty_E>
    30a8:	81 60       	ori	r24, 0x01	; 1
    30aa:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <_ZN8SdVolume11cacheDirty_E>
  cacheSetDirty();
  return true;
    30ae:	81 e0       	ldi	r24, 0x01	; 1
}
    30b0:	ff 90       	pop	r15
    30b2:	ef 90       	pop	r14
    30b4:	df 90       	pop	r13
    30b6:	cf 90       	pop	r12
    30b8:	08 95       	ret

000030ba <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    30ba:	8f 92       	push	r8
    30bc:	9f 92       	push	r9
    30be:	af 92       	push	r10
    30c0:	bf 92       	push	r11
    30c2:	cf 92       	push	r12
    30c4:	df 92       	push	r13
    30c6:	ef 92       	push	r14
    30c8:	ff 92       	push	r15
    30ca:	0f 93       	push	r16
    30cc:	1f 93       	push	r17
    30ce:	cf 93       	push	r28
    30d0:	df 93       	push	r29
    30d2:	fc 01       	movw	r30, r24
    30d4:	e9 01       	movw	r28, r18
  if (cluster > (clusterCount_ + 1)) {
    30d6:	01 85       	ldd	r16, Z+9	; 0x09
    30d8:	12 85       	ldd	r17, Z+10	; 0x0a
    30da:	23 85       	ldd	r18, Z+11	; 0x0b
    30dc:	34 85       	ldd	r19, Z+12	; 0x0c
    30de:	0f 5f       	subi	r16, 0xFF	; 255
    30e0:	1f 4f       	sbci	r17, 0xFF	; 255
    30e2:	2f 4f       	sbci	r18, 0xFF	; 255
    30e4:	3f 4f       	sbci	r19, 0xFF	; 255
    30e6:	04 17       	cp	r16, r20
    30e8:	15 07       	cpc	r17, r21
    30ea:	26 07       	cpc	r18, r22
    30ec:	37 07       	cpc	r19, r23
    30ee:	08 f4       	brcc	.+2      	; 0x30f2 <_ZNK8SdVolume6fatGetEmPm+0x38>
    30f0:	61 c0       	rjmp	.+194    	; 0x31b4 <_ZNK8SdVolume6fatGetEmPm+0xfa>
    return false;
  }
  uint32_t lba = fatStartBlock_;
    30f2:	83 89       	ldd	r24, Z+19	; 0x13
    30f4:	94 89       	ldd	r25, Z+20	; 0x14
    30f6:	a5 89       	ldd	r26, Z+21	; 0x15
    30f8:	b6 89       	ldd	r27, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    30fa:	27 89       	ldd	r18, Z+23	; 0x17
    30fc:	20 31       	cpi	r18, 0x10	; 16
    30fe:	29 f4       	brne	.+10     	; 0x310a <_ZNK8SdVolume6fatGetEmPm+0x50>
    3100:	85 2e       	mov	r8, r21
    3102:	96 2e       	mov	r9, r22
    3104:	a7 2e       	mov	r10, r23
    3106:	bb 24       	eor	r11, r11
    3108:	0a c0       	rjmp	.+20     	; 0x311e <_ZNK8SdVolume6fatGetEmPm+0x64>
    310a:	4a 01       	movw	r8, r20
    310c:	5b 01       	movw	r10, r22
    310e:	68 94       	set
    3110:	16 f8       	bld	r1, 6
    3112:	b6 94       	lsr	r11
    3114:	a7 94       	ror	r10
    3116:	97 94       	ror	r9
    3118:	87 94       	ror	r8
    311a:	16 94       	lsr	r1
    311c:	d1 f7       	brne	.-12     	; 0x3112 <_ZNK8SdVolume6fatGetEmPm+0x58>
    311e:	6a 01       	movw	r12, r20
    3120:	7b 01       	movw	r14, r22
    3122:	8f 01       	movw	r16, r30
    3124:	bc 01       	movw	r22, r24
    3126:	cd 01       	movw	r24, r26
    3128:	68 0d       	add	r22, r8
    312a:	79 1d       	adc	r23, r9
    312c:	8a 1d       	adc	r24, r10
    312e:	9b 1d       	adc	r25, r11
  if (lba != cacheBlockNumber_) {
    3130:	80 90 06 01 	lds	r8, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    3134:	90 90 07 01 	lds	r9, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3138:	a0 90 08 01 	lds	r10, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    313c:	b0 90 09 01 	lds	r11, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3140:	68 15       	cp	r22, r8
    3142:	79 05       	cpc	r23, r9
    3144:	8a 05       	cpc	r24, r10
    3146:	9b 05       	cpc	r25, r11
    3148:	29 f0       	breq	.+10     	; 0x3154 <_ZNK8SdVolume6fatGetEmPm+0x9a>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) {
    314a:	40 e0       	ldi	r20, 0x00	; 0
    314c:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <_ZN8SdVolume13cacheRawBlockEmh>
    3150:	88 23       	and	r24, r24
    3152:	89 f1       	breq	.+98     	; 0x31b6 <_ZNK8SdVolume6fatGetEmPm+0xfc>
      return false;
    }
  }
  if (fatType_ == 16) {
    3154:	f8 01       	movw	r30, r16
    3156:	87 89       	ldd	r24, Z+23	; 0x17
    3158:	80 31       	cpi	r24, 0x10	; 16
    315a:	a1 f4       	brne	.+40     	; 0x3184 <_ZNK8SdVolume6fatGetEmPm+0xca>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    315c:	b7 01       	movw	r22, r14
    315e:	a6 01       	movw	r20, r12
    3160:	55 27       	eor	r21, r21
    3162:	66 27       	eor	r22, r22
    3164:	77 27       	eor	r23, r23
    3166:	44 0f       	add	r20, r20
    3168:	55 1f       	adc	r21, r21
    316a:	fa 01       	movw	r30, r20
    316c:	e1 5a       	subi	r30, 0xA1	; 161
    316e:	fc 4f       	sbci	r31, 0xFC	; 252
    3170:	80 81       	ld	r24, Z
    3172:	91 81       	ldd	r25, Z+1	; 0x01
    3174:	a0 e0       	ldi	r26, 0x00	; 0
    3176:	b0 e0       	ldi	r27, 0x00	; 0
    3178:	88 83       	st	Y, r24
    317a:	99 83       	std	Y+1, r25	; 0x01
    317c:	aa 83       	std	Y+2, r26	; 0x02
    317e:	bb 83       	std	Y+3, r27	; 0x03
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	19 c0       	rjmp	.+50     	; 0x31b6 <_ZNK8SdVolume6fatGetEmPm+0xfc>
    }
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    3184:	b7 01       	movw	r22, r14
    3186:	a6 01       	movw	r20, r12
    3188:	4f 77       	andi	r20, 0x7F	; 127
    318a:	55 27       	eor	r21, r21
    318c:	66 27       	eor	r22, r22
    318e:	77 27       	eor	r23, r23
    3190:	44 0f       	add	r20, r20
    3192:	55 1f       	adc	r21, r21
    3194:	44 0f       	add	r20, r20
    3196:	55 1f       	adc	r21, r21
    3198:	fa 01       	movw	r30, r20
    319a:	e1 5a       	subi	r30, 0xA1	; 161
    319c:	fc 4f       	sbci	r31, 0xFC	; 252
    319e:	80 81       	ld	r24, Z
    31a0:	91 81       	ldd	r25, Z+1	; 0x01
    31a2:	a2 81       	ldd	r26, Z+2	; 0x02
    31a4:	b3 81       	ldd	r27, Z+3	; 0x03
    31a6:	bf 70       	andi	r27, 0x0F	; 15
    31a8:	88 83       	st	Y, r24
    31aa:	99 83       	std	Y+1, r25	; 0x01
    31ac:	aa 83       	std	Y+2, r26	; 0x02
    31ae:	bb 83       	std	Y+3, r27	; 0x03
  }
  return true;
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	01 c0       	rjmp	.+2      	; 0x31b6 <_ZNK8SdVolume6fatGetEmPm+0xfc>
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) {
    return false;
    31b4:	80 e0       	ldi	r24, 0x00	; 0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    31b6:	df 91       	pop	r29
    31b8:	cf 91       	pop	r28
    31ba:	1f 91       	pop	r17
    31bc:	0f 91       	pop	r16
    31be:	ff 90       	pop	r15
    31c0:	ef 90       	pop	r14
    31c2:	df 90       	pop	r13
    31c4:	cf 90       	pop	r12
    31c6:	bf 90       	pop	r11
    31c8:	af 90       	pop	r10
    31ca:	9f 90       	pop	r9
    31cc:	8f 90       	pop	r8
    31ce:	08 95       	ret

000031d0 <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    31d0:	8f 92       	push	r8
    31d2:	9f 92       	push	r9
    31d4:	af 92       	push	r10
    31d6:	bf 92       	push	r11
    31d8:	ef 92       	push	r14
    31da:	ff 92       	push	r15
    31dc:	0f 93       	push	r16
    31de:	1f 93       	push	r17
    31e0:	cf 93       	push	r28
    31e2:	df 93       	push	r29
    31e4:	00 d0       	rcall	.+0      	; 0x31e6 <_ZNK8SdVolume9chainSizeEmPm+0x16>
    31e6:	00 d0       	rcall	.+0      	; 0x31e8 <_ZNK8SdVolume9chainSizeEmPm+0x18>
    31e8:	cd b7       	in	r28, 0x3d	; 61
    31ea:	de b7       	in	r29, 0x3e	; 62
    31ec:	8c 01       	movw	r16, r24
    31ee:	49 83       	std	Y+1, r20	; 0x01
    31f0:	5a 83       	std	Y+2, r21	; 0x02
    31f2:	6b 83       	std	Y+3, r22	; 0x03
    31f4:	7c 83       	std	Y+4, r23	; 0x04
    31f6:	79 01       	movw	r14, r18
  uint32_t s = 0;
    31f8:	81 2c       	mov	r8, r1
    31fa:	91 2c       	mov	r9, r1
    31fc:	54 01       	movw	r10, r8
  do {
    if (!fatGet(cluster, &cluster)) {
    31fe:	49 81       	ldd	r20, Y+1	; 0x01
    3200:	5a 81       	ldd	r21, Y+2	; 0x02
    3202:	6b 81       	ldd	r22, Y+3	; 0x03
    3204:	7c 81       	ldd	r23, Y+4	; 0x04
    3206:	9e 01       	movw	r18, r28
    3208:	2f 5f       	subi	r18, 0xFF	; 255
    320a:	3f 4f       	sbci	r19, 0xFF	; 255
    320c:	c8 01       	movw	r24, r16
    320e:	0e 94 5d 18 	call	0x30ba	; 0x30ba <_ZNK8SdVolume6fatGetEmPm>
    3212:	88 23       	and	r24, r24
    3214:	61 f1       	breq	.+88     	; 0x326e <_ZNK8SdVolume9chainSizeEmPm+0x9e>
      return false;
    }
    s += 512UL << clusterSizeShift_;
    3216:	80 e0       	ldi	r24, 0x00	; 0
    3218:	92 e0       	ldi	r25, 0x02	; 2
    321a:	a0 e0       	ldi	r26, 0x00	; 0
    321c:	b0 e0       	ldi	r27, 0x00	; 0
    321e:	f8 01       	movw	r30, r16
    3220:	05 84       	ldd	r0, Z+13	; 0x0d
    3222:	04 c0       	rjmp	.+8      	; 0x322c <_ZNK8SdVolume9chainSizeEmPm+0x5c>
    3224:	88 0f       	add	r24, r24
    3226:	99 1f       	adc	r25, r25
    3228:	aa 1f       	adc	r26, r26
    322a:	bb 1f       	adc	r27, r27
    322c:	0a 94       	dec	r0
    322e:	d2 f7       	brpl	.-12     	; 0x3224 <_ZNK8SdVolume9chainSizeEmPm+0x54>
    3230:	88 0e       	add	r8, r24
    3232:	99 1e       	adc	r9, r25
    3234:	aa 1e       	adc	r10, r26
    3236:	bb 1e       	adc	r11, r27
  } while (!isEOC(cluster));
    3238:	89 81       	ldd	r24, Y+1	; 0x01
    323a:	9a 81       	ldd	r25, Y+2	; 0x02
    323c:	ab 81       	ldd	r26, Y+3	; 0x03
    323e:	bc 81       	ldd	r27, Y+4	; 0x04
    uint8_t fatPutEOC(uint32_t cluster) {
      return fatPut(cluster, 0x0FFFFFFF);
    }
    uint8_t freeChain(uint32_t cluster);
    uint8_t isEOC(uint32_t cluster) const {
      return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    3240:	27 89       	ldd	r18, Z+23	; 0x17
    3242:	20 31       	cpi	r18, 0x10	; 16
    3244:	29 f4       	brne	.+10     	; 0x3250 <_ZNK8SdVolume9chainSizeEmPm+0x80>
    3246:	48 ef       	ldi	r20, 0xF8	; 248
    3248:	5f ef       	ldi	r21, 0xFF	; 255
    324a:	60 e0       	ldi	r22, 0x00	; 0
    324c:	70 e0       	ldi	r23, 0x00	; 0
    324e:	04 c0       	rjmp	.+8      	; 0x3258 <_ZNK8SdVolume9chainSizeEmPm+0x88>
    3250:	48 ef       	ldi	r20, 0xF8	; 248
    3252:	5f ef       	ldi	r21, 0xFF	; 255
    3254:	6f ef       	ldi	r22, 0xFF	; 255
    3256:	7f e0       	ldi	r23, 0x0F	; 15
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    3258:	84 17       	cp	r24, r20
    325a:	95 07       	cpc	r25, r21
    325c:	a6 07       	cpc	r26, r22
    325e:	b7 07       	cpc	r27, r23
    3260:	70 f2       	brcs	.-100    	; 0x31fe <_ZNK8SdVolume9chainSizeEmPm+0x2e>
    if (!fatGet(cluster, &cluster)) {
      return false;
    }
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    3262:	f7 01       	movw	r30, r14
    3264:	80 82       	st	Z, r8
    3266:	91 82       	std	Z+1, r9	; 0x01
    3268:	a2 82       	std	Z+2, r10	; 0x02
    326a:	b3 82       	std	Z+3, r11	; 0x03
  return true;
    326c:	81 e0       	ldi	r24, 0x01	; 1
}
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	0f 90       	pop	r0
    3274:	0f 90       	pop	r0
    3276:	df 91       	pop	r29
    3278:	cf 91       	pop	r28
    327a:	1f 91       	pop	r17
    327c:	0f 91       	pop	r16
    327e:	ff 90       	pop	r15
    3280:	ef 90       	pop	r14
    3282:	bf 90       	pop	r11
    3284:	af 90       	pop	r10
    3286:	9f 90       	pop	r9
    3288:	8f 90       	pop	r8
    328a:	08 95       	ret

0000328c <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    328c:	4f 92       	push	r4
    328e:	5f 92       	push	r5
    3290:	6f 92       	push	r6
    3292:	7f 92       	push	r7
    3294:	8f 92       	push	r8
    3296:	9f 92       	push	r9
    3298:	af 92       	push	r10
    329a:	bf 92       	push	r11
    329c:	cf 92       	push	r12
    329e:	df 92       	push	r13
    32a0:	ef 92       	push	r14
    32a2:	ff 92       	push	r15
    32a4:	0f 93       	push	r16
    32a6:	1f 93       	push	r17
    32a8:	cf 93       	push	r28
    32aa:	df 93       	push	r29
    32ac:	00 d0       	rcall	.+0      	; 0x32ae <_ZN8SdVolume6fatPutEmm+0x22>
    32ae:	00 d0       	rcall	.+0      	; 0x32b0 <_ZN8SdVolume6fatPutEmm+0x24>
    32b0:	00 d0       	rcall	.+0      	; 0x32b2 <_ZN8SdVolume6fatPutEmm+0x26>
    32b2:	cd b7       	in	r28, 0x3d	; 61
    32b4:	de b7       	in	r29, 0x3e	; 62
  // error if reserved cluster
  if (cluster < 2) {
    32b6:	42 30       	cpi	r20, 0x02	; 2
    32b8:	51 05       	cpc	r21, r1
    32ba:	61 05       	cpc	r22, r1
    32bc:	71 05       	cpc	r23, r1
    32be:	08 f4       	brcc	.+2      	; 0x32c2 <_ZN8SdVolume6fatPutEmm+0x36>
    32c0:	94 c0       	rjmp	.+296    	; 0x33ea <_ZN8SdVolume6fatPutEmm+0x15e>
    return false;
  }

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) {
    32c2:	dc 01       	movw	r26, r24
    32c4:	19 96       	adiw	r26, 0x09	; 9
    32c6:	cd 90       	ld	r12, X+
    32c8:	dd 90       	ld	r13, X+
    32ca:	ed 90       	ld	r14, X+
    32cc:	fc 90       	ld	r15, X
    32ce:	1c 97       	sbiw	r26, 0x0c	; 12
    32d0:	bf ef       	ldi	r27, 0xFF	; 255
    32d2:	cb 1a       	sub	r12, r27
    32d4:	db 0a       	sbc	r13, r27
    32d6:	eb 0a       	sbc	r14, r27
    32d8:	fb 0a       	sbc	r15, r27
    32da:	c4 16       	cp	r12, r20
    32dc:	d5 06       	cpc	r13, r21
    32de:	e6 06       	cpc	r14, r22
    32e0:	f7 06       	cpc	r15, r23
    32e2:	08 f4       	brcc	.+2      	; 0x32e6 <_ZN8SdVolume6fatPutEmm+0x5a>
    32e4:	84 c0       	rjmp	.+264    	; 0x33ee <_ZN8SdVolume6fatPutEmm+0x162>
    return false;
  }

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    32e6:	fc 01       	movw	r30, r24
    32e8:	43 88       	ldd	r4, Z+19	; 0x13
    32ea:	54 88       	ldd	r5, Z+20	; 0x14
    32ec:	65 88       	ldd	r6, Z+21	; 0x15
    32ee:	76 88       	ldd	r7, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    32f0:	e7 89       	ldd	r30, Z+23	; 0x17
    32f2:	e0 31       	cpi	r30, 0x10	; 16
    32f4:	29 f4       	brne	.+10     	; 0x3300 <_ZN8SdVolume6fatPutEmm+0x74>
    32f6:	85 2e       	mov	r8, r21
    32f8:	96 2e       	mov	r9, r22
    32fa:	a7 2e       	mov	r10, r23
    32fc:	bb 24       	eor	r11, r11
    32fe:	0a c0       	rjmp	.+20     	; 0x3314 <_ZN8SdVolume6fatPutEmm+0x88>
    3300:	4a 01       	movw	r8, r20
    3302:	5b 01       	movw	r10, r22
    3304:	68 94       	set
    3306:	16 f8       	bld	r1, 6
    3308:	b6 94       	lsr	r11
    330a:	a7 94       	ror	r10
    330c:	97 94       	ror	r9
    330e:	87 94       	ror	r8
    3310:	16 94       	lsr	r1
    3312:	d1 f7       	brne	.-12     	; 0x3308 <_ZN8SdVolume6fatPutEmm+0x7c>
    3314:	09 83       	std	Y+1, r16	; 0x01
    3316:	1a 83       	std	Y+2, r17	; 0x02
    3318:	2b 83       	std	Y+3, r18	; 0x03
    331a:	3c 83       	std	Y+4, r19	; 0x04
    331c:	6a 01       	movw	r12, r20
    331e:	7b 01       	movw	r14, r22
    3320:	9e 83       	std	Y+6, r25	; 0x06
    3322:	8d 83       	std	Y+5, r24	; 0x05
    3324:	48 0c       	add	r4, r8
    3326:	59 1c       	adc	r5, r9
    3328:	6a 1c       	adc	r6, r10
    332a:	7b 1c       	adc	r7, r11

  if (lba != cacheBlockNumber_) {
    332c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    3330:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3334:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3338:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    333c:	48 16       	cp	r4, r24
    333e:	59 06       	cpc	r5, r25
    3340:	6a 06       	cpc	r6, r26
    3342:	7b 06       	cpc	r7, r27
    3344:	41 f0       	breq	.+16     	; 0x3356 <_ZN8SdVolume6fatPutEmm+0xca>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) {
    3346:	40 e0       	ldi	r20, 0x00	; 0
    3348:	c3 01       	movw	r24, r6
    334a:	b2 01       	movw	r22, r4
    334c:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <_ZN8SdVolume13cacheRawBlockEmh>
    3350:	88 23       	and	r24, r24
    3352:	09 f4       	brne	.+2      	; 0x3356 <_ZN8SdVolume6fatPutEmm+0xca>
    3354:	4f c0       	rjmp	.+158    	; 0x33f4 <_ZN8SdVolume6fatPutEmm+0x168>
      return false;
    }
  }
  // store entry
  if (fatType_ == 16) {
    3356:	ad 81       	ldd	r26, Y+5	; 0x05
    3358:	be 81       	ldd	r27, Y+6	; 0x06
    335a:	57 96       	adiw	r26, 0x17	; 23
    335c:	8c 91       	ld	r24, X
    335e:	80 31       	cpi	r24, 0x10	; 16
    3360:	79 f4       	brne	.+30     	; 0x3380 <_ZN8SdVolume6fatPutEmm+0xf4>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    3362:	b7 01       	movw	r22, r14
    3364:	a6 01       	movw	r20, r12
    3366:	55 27       	eor	r21, r21
    3368:	66 27       	eor	r22, r22
    336a:	77 27       	eor	r23, r23
    336c:	44 0f       	add	r20, r20
    336e:	55 1f       	adc	r21, r21
    3370:	fa 01       	movw	r30, r20
    3372:	e1 5a       	subi	r30, 0xA1	; 161
    3374:	fc 4f       	sbci	r31, 0xFC	; 252
    3376:	89 81       	ldd	r24, Y+1	; 0x01
    3378:	9a 81       	ldd	r25, Y+2	; 0x02
    337a:	91 83       	std	Z+1, r25	; 0x01
    337c:	80 83       	st	Z, r24
    337e:	15 c0       	rjmp	.+42     	; 0x33aa <_ZN8SdVolume6fatPutEmm+0x11e>
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    3380:	b7 01       	movw	r22, r14
    3382:	a6 01       	movw	r20, r12
    3384:	4f 77       	andi	r20, 0x7F	; 127
    3386:	55 27       	eor	r21, r21
    3388:	66 27       	eor	r22, r22
    338a:	77 27       	eor	r23, r23
    338c:	44 0f       	add	r20, r20
    338e:	55 1f       	adc	r21, r21
    3390:	44 0f       	add	r20, r20
    3392:	55 1f       	adc	r21, r21
    3394:	fa 01       	movw	r30, r20
    3396:	e1 5a       	subi	r30, 0xA1	; 161
    3398:	fc 4f       	sbci	r31, 0xFC	; 252
    339a:	89 81       	ldd	r24, Y+1	; 0x01
    339c:	9a 81       	ldd	r25, Y+2	; 0x02
    339e:	ab 81       	ldd	r26, Y+3	; 0x03
    33a0:	bc 81       	ldd	r27, Y+4	; 0x04
    33a2:	80 83       	st	Z, r24
    33a4:	91 83       	std	Z+1, r25	; 0x01
    33a6:	a2 83       	std	Z+2, r26	; 0x02
    33a8:	b3 83       	std	Z+3, r27	; 0x03
    }
    static uint8_t cacheFlush(uint8_t blocking = 1);
    static uint8_t cacheMirrorBlockFlush(uint8_t blocking);
    static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
    static void cacheSetDirty(void) {
      cacheDirty_ |= CACHE_FOR_WRITE;
    33aa:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <_ZN8SdVolume11cacheDirty_E>
    33ae:	81 60       	ori	r24, 0x01	; 1
    33b0:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <_ZN8SdVolume11cacheDirty_E>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) {
    33b4:	ad 81       	ldd	r26, Y+5	; 0x05
    33b6:	be 81       	ldd	r27, Y+6	; 0x06
    33b8:	52 96       	adiw	r26, 0x12	; 18
    33ba:	8c 91       	ld	r24, X
    33bc:	52 97       	sbiw	r26, 0x12	; 18
    33be:	82 30       	cpi	r24, 0x02	; 2
    33c0:	c0 f0       	brcs	.+48     	; 0x33f2 <_ZN8SdVolume6fatPutEmm+0x166>
    cacheMirrorBlock_ = lba + blocksPerFat_;
    33c2:	15 96       	adiw	r26, 0x05	; 5
    33c4:	8d 91       	ld	r24, X+
    33c6:	9d 91       	ld	r25, X+
    33c8:	0d 90       	ld	r0, X+
    33ca:	bc 91       	ld	r27, X
    33cc:	a0 2d       	mov	r26, r0
    33ce:	48 0e       	add	r4, r24
    33d0:	59 1e       	adc	r5, r25
    33d2:	6a 1e       	adc	r6, r26
    33d4:	7b 1e       	adc	r7, r27
    33d6:	40 92 58 03 	sts	0x0358, r4	; 0x800358 <_ZN8SdVolume17cacheMirrorBlock_E>
    33da:	50 92 59 03 	sts	0x0359, r5	; 0x800359 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    33de:	60 92 5a 03 	sts	0x035A, r6	; 0x80035a <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    33e2:	70 92 5b 03 	sts	0x035B, r7	; 0x80035b <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  }
  return true;
    33e6:	81 e0       	ldi	r24, 0x01	; 1
    33e8:	05 c0       	rjmp	.+10     	; 0x33f4 <_ZN8SdVolume6fatPutEmm+0x168>
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) {
    return false;
    33ea:	80 e0       	ldi	r24, 0x00	; 0
    33ec:	03 c0       	rjmp	.+6      	; 0x33f4 <_ZN8SdVolume6fatPutEmm+0x168>
  }

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) {
    return false;
    33ee:	80 e0       	ldi	r24, 0x00	; 0
    33f0:	01 c0       	rjmp	.+2      	; 0x33f4 <_ZN8SdVolume6fatPutEmm+0x168>

  // mirror second FAT
  if (fatCount_ > 1) {
    cacheMirrorBlock_ = lba + blocksPerFat_;
  }
  return true;
    33f2:	81 e0       	ldi	r24, 0x01	; 1
}
    33f4:	26 96       	adiw	r28, 0x06	; 6
    33f6:	0f b6       	in	r0, 0x3f	; 63
    33f8:	f8 94       	cli
    33fa:	de bf       	out	0x3e, r29	; 62
    33fc:	0f be       	out	0x3f, r0	; 63
    33fe:	cd bf       	out	0x3d, r28	; 61
    3400:	df 91       	pop	r29
    3402:	cf 91       	pop	r28
    3404:	1f 91       	pop	r17
    3406:	0f 91       	pop	r16
    3408:	ff 90       	pop	r15
    340a:	ef 90       	pop	r14
    340c:	df 90       	pop	r13
    340e:	cf 90       	pop	r12
    3410:	bf 90       	pop	r11
    3412:	af 90       	pop	r10
    3414:	9f 90       	pop	r9
    3416:	8f 90       	pop	r8
    3418:	7f 90       	pop	r7
    341a:	6f 90       	pop	r6
    341c:	5f 90       	pop	r5
    341e:	4f 90       	pop	r4
    3420:	08 95       	ret

00003422 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    3422:	2f 92       	push	r2
    3424:	3f 92       	push	r3
    3426:	4f 92       	push	r4
    3428:	5f 92       	push	r5
    342a:	6f 92       	push	r6
    342c:	7f 92       	push	r7
    342e:	8f 92       	push	r8
    3430:	9f 92       	push	r9
    3432:	af 92       	push	r10
    3434:	bf 92       	push	r11
    3436:	cf 92       	push	r12
    3438:	df 92       	push	r13
    343a:	ef 92       	push	r14
    343c:	ff 92       	push	r15
    343e:	0f 93       	push	r16
    3440:	1f 93       	push	r17
    3442:	cf 93       	push	r28
    3444:	df 93       	push	r29
    3446:	cd b7       	in	r28, 0x3d	; 61
    3448:	de b7       	in	r29, 0x3e	; 62
    344a:	2f 97       	sbiw	r28, 0x0f	; 15
    344c:	0f b6       	in	r0, 0x3f	; 63
    344e:	f8 94       	cli
    3450:	de bf       	out	0x3e, r29	; 62
    3452:	0f be       	out	0x3f, r0	; 63
    3454:	cd bf       	out	0x3d, r28	; 61
    3456:	1c 01       	movw	r2, r24
    3458:	49 87       	std	Y+9, r20	; 0x09
    345a:	5a 87       	std	Y+10, r21	; 0x0a
    345c:	6b 87       	std	Y+11, r22	; 0x0b
    345e:	7c 87       	std	Y+12, r23	; 0x0c
    3460:	3e 87       	std	Y+14, r19	; 0x0e
    3462:	2d 87       	std	Y+13, r18	; 0x0d

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    3464:	d9 01       	movw	r26, r18
    3466:	4d 90       	ld	r4, X+
    3468:	5d 90       	ld	r5, X+
    346a:	6d 90       	ld	r6, X+
    346c:	7c 90       	ld	r7, X
    346e:	41 14       	cp	r4, r1
    3470:	51 04       	cpc	r5, r1
    3472:	61 04       	cpc	r6, r1
    3474:	71 04       	cpc	r7, r1
    3476:	39 f0       	breq	.+14     	; 0x3486 <_ZN8SdVolume15allocContiguousEmPm+0x64>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    3478:	bf ef       	ldi	r27, 0xFF	; 255
    347a:	4b 1a       	sub	r4, r27
    347c:	5b 0a       	sbc	r5, r27
    347e:	6b 0a       	sbc	r6, r27
    3480:	7b 0a       	sbc	r7, r27

    // don't save new start location
    setStart = false;
    3482:	1f 86       	std	Y+15, r1	; 0x0f
    3484:	11 c0       	rjmp	.+34     	; 0x34a8 <_ZN8SdVolume15allocContiguousEmPm+0x86>
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    3486:	fc 01       	movw	r30, r24
    3488:	40 80       	ld	r4, Z
    348a:	51 80       	ldd	r5, Z+1	; 0x01
    348c:	62 80       	ldd	r6, Z+2	; 0x02
    348e:	73 80       	ldd	r7, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	29 85       	ldd	r18, Y+9	; 0x09
    3494:	3a 85       	ldd	r19, Y+10	; 0x0a
    3496:	4b 85       	ldd	r20, Y+11	; 0x0b
    3498:	5c 85       	ldd	r21, Y+12	; 0x0c
    349a:	21 30       	cpi	r18, 0x01	; 1
    349c:	31 05       	cpc	r19, r1
    349e:	41 05       	cpc	r20, r1
    34a0:	51 05       	cpc	r21, r1
    34a2:	09 f0       	breq	.+2      	; 0x34a6 <_ZN8SdVolume15allocContiguousEmPm+0x84>
    34a4:	80 e0       	ldi	r24, 0x00	; 0
    34a6:	8f 87       	std	Y+15, r24	; 0x0f
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    34a8:	f1 01       	movw	r30, r2
    34aa:	81 85       	ldd	r24, Z+9	; 0x09
    34ac:	92 85       	ldd	r25, Z+10	; 0x0a
    34ae:	a3 85       	ldd	r26, Z+11	; 0x0b
    34b0:	b4 85       	ldd	r27, Z+12	; 0x0c
    34b2:	9c 01       	movw	r18, r24
    34b4:	ad 01       	movw	r20, r26
    34b6:	2f 5f       	subi	r18, 0xFF	; 255
    34b8:	3f 4f       	sbci	r19, 0xFF	; 255
    34ba:	4f 4f       	sbci	r20, 0xFF	; 255
    34bc:	5f 4f       	sbci	r21, 0xFF	; 255
    34be:	2d 83       	std	Y+5, r18	; 0x05
    34c0:	3e 83       	std	Y+6, r19	; 0x06
    34c2:	4f 83       	std	Y+7, r20	; 0x07
    34c4:	58 87       	std	Y+8, r21	; 0x08

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    34c6:	73 01       	movw	r14, r6
    34c8:	62 01       	movw	r12, r4

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    34ca:	81 2c       	mov	r8, r1
    34cc:	91 2c       	mov	r9, r1
    34ce:	54 01       	movw	r10, r8
    // can't find space checked all clusters
    if (n >= clusterCount_) {
    34d0:	f1 01       	movw	r30, r2
    34d2:	81 85       	ldd	r24, Z+9	; 0x09
    34d4:	92 85       	ldd	r25, Z+10	; 0x0a
    34d6:	a3 85       	ldd	r26, Z+11	; 0x0b
    34d8:	b4 85       	ldd	r27, Z+12	; 0x0c
    34da:	88 16       	cp	r8, r24
    34dc:	99 06       	cpc	r9, r25
    34de:	aa 06       	cpc	r10, r26
    34e0:	bb 06       	cpc	r11, r27
    34e2:	08 f0       	brcs	.+2      	; 0x34e6 <_ZN8SdVolume15allocContiguousEmPm+0xc4>
    34e4:	4a c0       	rjmp	.+148    	; 0x357a <_ZN8SdVolume15allocContiguousEmPm+0x158>
      return false;
    }

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    34e6:	2d 81       	ldd	r18, Y+5	; 0x05
    34e8:	3e 81       	ldd	r19, Y+6	; 0x06
    34ea:	4f 81       	ldd	r20, Y+7	; 0x07
    34ec:	58 85       	ldd	r21, Y+8	; 0x08
    34ee:	2c 15       	cp	r18, r12
    34f0:	3d 05       	cpc	r19, r13
    34f2:	4e 05       	cpc	r20, r14
    34f4:	5f 05       	cpc	r21, r15
    34f6:	50 f4       	brcc	.+20     	; 0x350c <_ZN8SdVolume15allocContiguousEmPm+0xea>
      bgnCluster = endCluster = 2;
    34f8:	c1 2c       	mov	r12, r1
    34fa:	d1 2c       	mov	r13, r1
    34fc:	76 01       	movw	r14, r12
    34fe:	68 94       	set
    3500:	c1 f8       	bld	r12, 1
    3502:	41 2c       	mov	r4, r1
    3504:	51 2c       	mov	r5, r1
    3506:	32 01       	movw	r6, r4
    3508:	68 94       	set
    350a:	41 f8       	bld	r4, 1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) {
    350c:	9e 01       	movw	r18, r28
    350e:	2f 5f       	subi	r18, 0xFF	; 255
    3510:	3f 4f       	sbci	r19, 0xFF	; 255
    3512:	b7 01       	movw	r22, r14
    3514:	a6 01       	movw	r20, r12
    3516:	c1 01       	movw	r24, r2
    3518:	0e 94 5d 18 	call	0x30ba	; 0x30ba <_ZNK8SdVolume6fatGetEmPm>
    351c:	88 23       	and	r24, r24
    351e:	69 f1       	breq	.+90     	; 0x357a <_ZN8SdVolume15allocContiguousEmPm+0x158>
      return false;
    }

    if (f != 0) {
    3520:	89 81       	ldd	r24, Y+1	; 0x01
    3522:	9a 81       	ldd	r25, Y+2	; 0x02
    3524:	ab 81       	ldd	r26, Y+3	; 0x03
    3526:	bc 81       	ldd	r27, Y+4	; 0x04
    3528:	89 2b       	or	r24, r25
    352a:	8a 2b       	or	r24, r26
    352c:	8b 2b       	or	r24, r27
    352e:	41 f0       	breq	.+16     	; 0x3540 <_ZN8SdVolume15allocContiguousEmPm+0x11e>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    3530:	26 01       	movw	r4, r12
    3532:	37 01       	movw	r6, r14
    3534:	3f ef       	ldi	r19, 0xFF	; 255
    3536:	43 1a       	sub	r4, r19
    3538:	53 0a       	sbc	r5, r19
    353a:	63 0a       	sbc	r6, r19
    353c:	73 0a       	sbc	r7, r19
    353e:	12 c0       	rjmp	.+36     	; 0x3564 <_ZN8SdVolume15allocContiguousEmPm+0x142>
    } else if ((endCluster - bgnCluster + 1) == count) {
    3540:	d7 01       	movw	r26, r14
    3542:	c6 01       	movw	r24, r12
    3544:	84 19       	sub	r24, r4
    3546:	95 09       	sbc	r25, r5
    3548:	a6 09       	sbc	r26, r6
    354a:	b7 09       	sbc	r27, r7
    354c:	01 96       	adiw	r24, 0x01	; 1
    354e:	a1 1d       	adc	r26, r1
    3550:	b1 1d       	adc	r27, r1
    3552:	29 85       	ldd	r18, Y+9	; 0x09
    3554:	3a 85       	ldd	r19, Y+10	; 0x0a
    3556:	4b 85       	ldd	r20, Y+11	; 0x0b
    3558:	5c 85       	ldd	r21, Y+12	; 0x0c
    355a:	28 17       	cp	r18, r24
    355c:	39 07       	cpc	r19, r25
    355e:	4a 07       	cpc	r20, r26
    3560:	5b 07       	cpc	r21, r27
    3562:	69 f0       	breq	.+26     	; 0x357e <_ZN8SdVolume15allocContiguousEmPm+0x15c>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    3564:	3f ef       	ldi	r19, 0xFF	; 255
    3566:	83 1a       	sub	r8, r19
    3568:	93 0a       	sbc	r9, r19
    356a:	a3 0a       	sbc	r10, r19
    356c:	b3 0a       	sbc	r11, r19
    356e:	4f ef       	ldi	r20, 0xFF	; 255
    3570:	c4 1a       	sub	r12, r20
    3572:	d4 0a       	sbc	r13, r20
    3574:	e4 0a       	sbc	r14, r20
    3576:	f4 0a       	sbc	r15, r20
    3578:	ab cf       	rjmp	.-170    	; 0x34d0 <_ZN8SdVolume15allocContiguousEmPm+0xae>
    // can't find space checked all clusters
    if (n >= clusterCount_) {
      return false;
    357a:	80 e0       	ldi	r24, 0x00	; 0
    357c:	4d c0       	rjmp	.+154    	; 0x3618 <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
    static uint8_t cacheZeroBlock(uint32_t blockNumber);
    uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
    uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
    uint8_t fatPut(uint32_t cluster, uint32_t value);
    uint8_t fatPutEOC(uint32_t cluster) {
      return fatPut(cluster, 0x0FFFFFFF);
    357e:	0f ef       	ldi	r16, 0xFF	; 255
    3580:	1f ef       	ldi	r17, 0xFF	; 255
    3582:	2f ef       	ldi	r18, 0xFF	; 255
    3584:	3f e0       	ldi	r19, 0x0F	; 15
    3586:	b7 01       	movw	r22, r14
    3588:	a6 01       	movw	r20, r12
    358a:	c1 01       	movw	r24, r2
    358c:	0e 94 46 19 	call	0x328c	; 0x328c <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) {
    3590:	88 23       	and	r24, r24
    3592:	09 f4       	brne	.+2      	; 0x3596 <_ZN8SdVolume15allocContiguousEmPm+0x174>
    3594:	41 c0       	rjmp	.+130    	; 0x3618 <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
    return false;
  }

  // link clusters
  while (endCluster > bgnCluster) {
    3596:	4c 14       	cp	r4, r12
    3598:	5d 04       	cpc	r5, r13
    359a:	6e 04       	cpc	r6, r14
    359c:	7f 04       	cpc	r7, r15
    359e:	98 f4       	brcc	.+38     	; 0x35c6 <_ZN8SdVolume15allocContiguousEmPm+0x1a4>
    if (!fatPut(endCluster - 1, endCluster)) {
    35a0:	46 01       	movw	r8, r12
    35a2:	57 01       	movw	r10, r14
    35a4:	51 e0       	ldi	r21, 0x01	; 1
    35a6:	85 1a       	sub	r8, r21
    35a8:	91 08       	sbc	r9, r1
    35aa:	a1 08       	sbc	r10, r1
    35ac:	b1 08       	sbc	r11, r1
    35ae:	97 01       	movw	r18, r14
    35b0:	86 01       	movw	r16, r12
    35b2:	b5 01       	movw	r22, r10
    35b4:	a4 01       	movw	r20, r8
    35b6:	c1 01       	movw	r24, r2
    35b8:	0e 94 46 19 	call	0x328c	; 0x328c <_ZN8SdVolume6fatPutEmm>
    35bc:	88 23       	and	r24, r24
    35be:	61 f1       	breq	.+88     	; 0x3618 <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
      return false;
    }
    endCluster--;
    35c0:	75 01       	movw	r14, r10
    35c2:	64 01       	movw	r12, r8
    35c4:	e8 cf       	rjmp	.-48     	; 0x3596 <_ZN8SdVolume15allocContiguousEmPm+0x174>
  }
  if (*curCluster != 0) {
    35c6:	ad 85       	ldd	r26, Y+13	; 0x0d
    35c8:	be 85       	ldd	r27, Y+14	; 0x0e
    35ca:	4d 91       	ld	r20, X+
    35cc:	5d 91       	ld	r21, X+
    35ce:	6d 91       	ld	r22, X+
    35d0:	7c 91       	ld	r23, X
    35d2:	41 15       	cp	r20, r1
    35d4:	51 05       	cpc	r21, r1
    35d6:	61 05       	cpc	r22, r1
    35d8:	71 05       	cpc	r23, r1
    35da:	39 f0       	breq	.+14     	; 0x35ea <_ZN8SdVolume15allocContiguousEmPm+0x1c8>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) {
    35dc:	93 01       	movw	r18, r6
    35de:	82 01       	movw	r16, r4
    35e0:	c1 01       	movw	r24, r2
    35e2:	0e 94 46 19 	call	0x328c	; 0x328c <_ZN8SdVolume6fatPutEmm>
    35e6:	88 23       	and	r24, r24
    35e8:	b9 f0       	breq	.+46     	; 0x3618 <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
      return false;
    }
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    35ea:	ed 85       	ldd	r30, Y+13	; 0x0d
    35ec:	fe 85       	ldd	r31, Y+14	; 0x0e
    35ee:	40 82       	st	Z, r4
    35f0:	51 82       	std	Z+1, r5	; 0x01
    35f2:	62 82       	std	Z+2, r6	; 0x02
    35f4:	73 82       	std	Z+3, r7	; 0x03

  // remember possible next free cluster
  if (setStart) {
    35f6:	ff 85       	ldd	r31, Y+15	; 0x0f
    35f8:	ff 23       	and	r31, r31
    35fa:	69 f0       	breq	.+26     	; 0x3616 <_ZN8SdVolume15allocContiguousEmPm+0x1f4>
    allocSearchStart_ = bgnCluster + 1;
    35fc:	2f ef       	ldi	r18, 0xFF	; 255
    35fe:	42 1a       	sub	r4, r18
    3600:	52 0a       	sbc	r5, r18
    3602:	62 0a       	sbc	r6, r18
    3604:	72 0a       	sbc	r7, r18
    3606:	d1 01       	movw	r26, r2
    3608:	4d 92       	st	X+, r4
    360a:	5d 92       	st	X+, r5
    360c:	6d 92       	st	X+, r6
    360e:	7c 92       	st	X, r7
    3610:	13 97       	sbiw	r26, 0x03	; 3
  }

  return true;
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	01 c0       	rjmp	.+2      	; 0x3618 <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
    3616:	81 e0       	ldi	r24, 0x01	; 1
}
    3618:	2f 96       	adiw	r28, 0x0f	; 15
    361a:	0f b6       	in	r0, 0x3f	; 63
    361c:	f8 94       	cli
    361e:	de bf       	out	0x3e, r29	; 62
    3620:	0f be       	out	0x3f, r0	; 63
    3622:	cd bf       	out	0x3d, r28	; 61
    3624:	df 91       	pop	r29
    3626:	cf 91       	pop	r28
    3628:	1f 91       	pop	r17
    362a:	0f 91       	pop	r16
    362c:	ff 90       	pop	r15
    362e:	ef 90       	pop	r14
    3630:	df 90       	pop	r13
    3632:	cf 90       	pop	r12
    3634:	bf 90       	pop	r11
    3636:	af 90       	pop	r10
    3638:	9f 90       	pop	r9
    363a:	8f 90       	pop	r8
    363c:	7f 90       	pop	r7
    363e:	6f 90       	pop	r6
    3640:	5f 90       	pop	r5
    3642:	4f 90       	pop	r4
    3644:	3f 90       	pop	r3
    3646:	2f 90       	pop	r2
    3648:	08 95       	ret

0000364a <_ZN8SdVolume9freeChainEm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    364a:	af 92       	push	r10
    364c:	bf 92       	push	r11
    364e:	cf 92       	push	r12
    3650:	df 92       	push	r13
    3652:	ef 92       	push	r14
    3654:	ff 92       	push	r15
    3656:	0f 93       	push	r16
    3658:	1f 93       	push	r17
    365a:	cf 93       	push	r28
    365c:	df 93       	push	r29
    365e:	00 d0       	rcall	.+0      	; 0x3660 <_ZN8SdVolume9freeChainEm+0x16>
    3660:	00 d0       	rcall	.+0      	; 0x3662 <_ZN8SdVolume9freeChainEm+0x18>
    3662:	cd b7       	in	r28, 0x3d	; 61
    3664:	de b7       	in	r29, 0x3e	; 62
    3666:	5c 01       	movw	r10, r24
    3668:	6a 01       	movw	r12, r20
    366a:	7b 01       	movw	r14, r22
  // clear free cluster location
  allocSearchStart_ = 2;
    366c:	82 e0       	ldi	r24, 0x02	; 2
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	a0 e0       	ldi	r26, 0x00	; 0
    3672:	b0 e0       	ldi	r27, 0x00	; 0
    3674:	f5 01       	movw	r30, r10
    3676:	80 83       	st	Z, r24
    3678:	91 83       	std	Z+1, r25	; 0x01
    367a:	a2 83       	std	Z+2, r26	; 0x02
    367c:	b3 83       	std	Z+3, r27	; 0x03

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) {
    367e:	9e 01       	movw	r18, r28
    3680:	2f 5f       	subi	r18, 0xFF	; 255
    3682:	3f 4f       	sbci	r19, 0xFF	; 255
    3684:	b7 01       	movw	r22, r14
    3686:	a6 01       	movw	r20, r12
    3688:	c5 01       	movw	r24, r10
    368a:	0e 94 5d 18 	call	0x30ba	; 0x30ba <_ZNK8SdVolume6fatGetEmPm>
    368e:	88 23       	and	r24, r24
    3690:	11 f1       	breq	.+68     	; 0x36d6 <_ZN8SdVolume9freeChainEm+0x8c>
      return false;
    }

    // free cluster
    if (!fatPut(cluster, 0)) {
    3692:	00 e0       	ldi	r16, 0x00	; 0
    3694:	10 e0       	ldi	r17, 0x00	; 0
    3696:	98 01       	movw	r18, r16
    3698:	b7 01       	movw	r22, r14
    369a:	a6 01       	movw	r20, r12
    369c:	c5 01       	movw	r24, r10
    369e:	0e 94 46 19 	call	0x328c	; 0x328c <_ZN8SdVolume6fatPutEmm>
    36a2:	88 23       	and	r24, r24
    36a4:	c1 f0       	breq	.+48     	; 0x36d6 <_ZN8SdVolume9freeChainEm+0x8c>
      return false;
    }

    cluster = next;
    36a6:	c9 80       	ldd	r12, Y+1	; 0x01
    36a8:	da 80       	ldd	r13, Y+2	; 0x02
    36aa:	eb 80       	ldd	r14, Y+3	; 0x03
    36ac:	fc 80       	ldd	r15, Y+4	; 0x04
    }
    uint8_t freeChain(uint32_t cluster);
    uint8_t isEOC(uint32_t cluster) const {
      return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    36ae:	f5 01       	movw	r30, r10
    36b0:	87 89       	ldd	r24, Z+23	; 0x17
    36b2:	80 31       	cpi	r24, 0x10	; 16
    36b4:	29 f4       	brne	.+10     	; 0x36c0 <_ZN8SdVolume9freeChainEm+0x76>
    36b6:	88 ef       	ldi	r24, 0xF8	; 248
    36b8:	9f ef       	ldi	r25, 0xFF	; 255
    36ba:	a0 e0       	ldi	r26, 0x00	; 0
    36bc:	b0 e0       	ldi	r27, 0x00	; 0
    36be:	04 c0       	rjmp	.+8      	; 0x36c8 <_ZN8SdVolume9freeChainEm+0x7e>
    36c0:	88 ef       	ldi	r24, 0xF8	; 248
    36c2:	9f ef       	ldi	r25, 0xFF	; 255
    36c4:	af ef       	ldi	r26, 0xFF	; 255
    36c6:	bf e0       	ldi	r27, 0x0F	; 15
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    36c8:	c8 16       	cp	r12, r24
    36ca:	d9 06       	cpc	r13, r25
    36cc:	ea 06       	cpc	r14, r26
    36ce:	fb 06       	cpc	r15, r27
    36d0:	b0 f2       	brcs	.-84     	; 0x367e <_ZN8SdVolume9freeChainEm+0x34>
    }

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    36d2:	81 e0       	ldi	r24, 0x01	; 1
    36d4:	01 c0       	rjmp	.+2      	; 0x36d8 <_ZN8SdVolume9freeChainEm+0x8e>
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) {
      return false;
    36d6:	80 e0       	ldi	r24, 0x00	; 0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    36d8:	0f 90       	pop	r0
    36da:	0f 90       	pop	r0
    36dc:	0f 90       	pop	r0
    36de:	0f 90       	pop	r0
    36e0:	df 91       	pop	r29
    36e2:	cf 91       	pop	r28
    36e4:	1f 91       	pop	r17
    36e6:	0f 91       	pop	r16
    36e8:	ff 90       	pop	r15
    36ea:	ef 90       	pop	r14
    36ec:	df 90       	pop	r13
    36ee:	cf 90       	pop	r12
    36f0:	bf 90       	pop	r11
    36f2:	af 90       	pop	r10
    36f4:	08 95       	ret

000036f6 <_ZN8SdVolume4initEP7Sd2Cardh>:
   \return The value one, true, is returned for success and
   the value zero, false, is returned for failure.  Reasons for
   failure include not finding a valid partition, not finding a valid
   FAT file system in the specified partition or an I/O error.
*/
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    36f6:	4f 92       	push	r4
    36f8:	5f 92       	push	r5
    36fa:	6f 92       	push	r6
    36fc:	7f 92       	push	r7
    36fe:	8f 92       	push	r8
    3700:	9f 92       	push	r9
    3702:	af 92       	push	r10
    3704:	bf 92       	push	r11
    3706:	cf 92       	push	r12
    3708:	df 92       	push	r13
    370a:	ef 92       	push	r14
    370c:	ff 92       	push	r15
    370e:	0f 93       	push	r16
    3710:	1f 93       	push	r17
    3712:	cf 93       	push	r28
    3714:	df 93       	push	r29
    3716:	8c 01       	movw	r16, r24
    3718:	c4 2f       	mov	r28, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    371a:	70 93 5e 03 	sts	0x035E, r23	; 0x80035e <_ZN8SdVolume7sdCard_E+0x1>
    371e:	60 93 5d 03 	sts	0x035D, r22	; 0x80035d <_ZN8SdVolume7sdCard_E>
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    3722:	44 23       	and	r20, r20
    3724:	09 f4       	brne	.+2      	; 0x3728 <_ZN8SdVolume4initEP7Sd2Cardh+0x32>
    3726:	44 c0       	rjmp	.+136    	; 0x37b0 <_ZN8SdVolume4initEP7Sd2Cardh+0xba>
    if (part > 4) {
    3728:	45 30       	cpi	r20, 0x05	; 5
    372a:	08 f0       	brcs	.+2      	; 0x372e <_ZN8SdVolume4initEP7Sd2Cardh+0x38>
    372c:	29 c1       	rjmp	.+594    	; 0x3980 <_ZN8SdVolume4initEP7Sd2Cardh+0x28a>
      return false;
    }
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    372e:	40 e0       	ldi	r20, 0x00	; 0
    3730:	60 e0       	ldi	r22, 0x00	; 0
    3732:	70 e0       	ldi	r23, 0x00	; 0
    3734:	cb 01       	movw	r24, r22
    3736:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <_ZN8SdVolume13cacheRawBlockEmh>
    373a:	88 23       	and	r24, r24
    373c:	09 f4       	brne	.+2      	; 0x3740 <_ZN8SdVolume4initEP7Sd2Cardh+0x4a>
    373e:	2b c1       	rjmp	.+598    	; 0x3996 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
      return false;
    }
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    3740:	4c 2f       	mov	r20, r28
    3742:	50 e0       	ldi	r21, 0x00	; 0
    3744:	41 50       	subi	r20, 0x01	; 1
    3746:	51 09       	sbc	r21, r1
    if ((p->boot & 0X7F) != 0  ||
    3748:	fa 01       	movw	r30, r20
    374a:	e2 95       	swap	r30
    374c:	f2 95       	swap	r31
    374e:	f0 7f       	andi	r31, 0xF0	; 240
    3750:	fe 27       	eor	r31, r30
    3752:	e0 7f       	andi	r30, 0xF0	; 240
    3754:	fe 27       	eor	r31, r30
    3756:	e3 5e       	subi	r30, 0xE3	; 227
    3758:	fa 4f       	sbci	r31, 0xFA	; 250
    375a:	80 81       	ld	r24, Z
    375c:	8f 77       	andi	r24, 0x7F	; 127
    375e:	09 f0       	breq	.+2      	; 0x3762 <_ZN8SdVolume4initEP7Sd2Cardh+0x6c>
    3760:	11 c1       	rjmp	.+546    	; 0x3984 <_ZN8SdVolume4initEP7Sd2Cardh+0x28e>
        p->totalSectors < 100 ||
    3762:	fa 01       	movw	r30, r20
    3764:	e2 95       	swap	r30
    3766:	f2 95       	swap	r31
    3768:	f0 7f       	andi	r31, 0xF0	; 240
    376a:	fe 27       	eor	r31, r30
    376c:	e0 7f       	andi	r30, 0xF0	; 240
    376e:	fe 27       	eor	r31, r30
    3770:	e7 5d       	subi	r30, 0xD7	; 215
    3772:	fa 4f       	sbci	r31, 0xFA	; 250
    3774:	c0 80       	ld	r12, Z
    3776:	d1 80       	ldd	r13, Z+1	; 0x01
    3778:	e2 80       	ldd	r14, Z+2	; 0x02
    377a:	f3 80       	ldd	r15, Z+3	; 0x03
    }
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
      return false;
    }
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0  ||
    377c:	24 e6       	ldi	r18, 0x64	; 100
    377e:	c2 16       	cp	r12, r18
    3780:	d1 04       	cpc	r13, r1
    3782:	e1 04       	cpc	r14, r1
    3784:	f1 04       	cpc	r15, r1
    3786:	08 f4       	brcc	.+2      	; 0x378a <_ZN8SdVolume4initEP7Sd2Cardh+0x94>
    3788:	06 c1       	rjmp	.+524    	; 0x3996 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
        p->totalSectors < 100 ||
        p->firstSector == 0) {
    378a:	42 95       	swap	r20
    378c:	52 95       	swap	r21
    378e:	50 7f       	andi	r21, 0xF0	; 240
    3790:	54 27       	eor	r21, r20
    3792:	40 7f       	andi	r20, 0xF0	; 240
    3794:	54 27       	eor	r21, r20
    3796:	fa 01       	movw	r30, r20
    3798:	eb 5d       	subi	r30, 0xDB	; 219
    379a:	fa 4f       	sbci	r31, 0xFA	; 250
    379c:	c0 80       	ld	r12, Z
    379e:	d1 80       	ldd	r13, Z+1	; 0x01
    37a0:	e2 80       	ldd	r14, Z+2	; 0x02
    37a2:	f3 80       	ldd	r15, Z+3	; 0x03
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
      return false;
    }
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0  ||
        p->totalSectors < 100 ||
    37a4:	c1 14       	cp	r12, r1
    37a6:	d1 04       	cpc	r13, r1
    37a8:	e1 04       	cpc	r14, r1
    37aa:	f1 04       	cpc	r15, r1
    37ac:	21 f4       	brne	.+8      	; 0x37b6 <_ZN8SdVolume4initEP7Sd2Cardh+0xc0>
    37ae:	f3 c0       	rjmp	.+486    	; 0x3996 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
   the value zero, false, is returned for failure.  Reasons for
   failure include not finding a valid partition, not finding a valid
   FAT file system in the specified partition or an I/O error.
*/
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    37b0:	c1 2c       	mov	r12, r1
    37b2:	d1 2c       	mov	r13, r1
    37b4:	76 01       	movw	r14, r12
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    37b6:	40 e0       	ldi	r20, 0x00	; 0
    37b8:	c7 01       	movw	r24, r14
    37ba:	b6 01       	movw	r22, r12
    37bc:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <_ZN8SdVolume13cacheRawBlockEmh>
    37c0:	88 23       	and	r24, r24
    37c2:	09 f4       	brne	.+2      	; 0x37c6 <_ZN8SdVolume4initEP7Sd2Cardh+0xd0>
    37c4:	e8 c0       	rjmp	.+464    	; 0x3996 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    37c6:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <_ZN8SdVolume12cacheBuffer_E+0xb>
    37ca:	90 91 6b 03 	lds	r25, 0x036B	; 0x80036b <_ZN8SdVolume12cacheBuffer_E+0xc>
    37ce:	81 15       	cp	r24, r1
    37d0:	92 40       	sbci	r25, 0x02	; 2
    37d2:	09 f0       	breq	.+2      	; 0x37d6 <_ZN8SdVolume4initEP7Sd2Cardh+0xe0>
    37d4:	d9 c0       	rjmp	.+434    	; 0x3988 <_ZN8SdVolume4initEP7Sd2Cardh+0x292>
      bpb->fatCount == 0 ||
    37d6:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <_ZN8SdVolume12cacheBuffer_E+0x10>
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    37da:	88 23       	and	r24, r24
    37dc:	09 f4       	brne	.+2      	; 0x37e0 <_ZN8SdVolume4initEP7Sd2Cardh+0xea>
    37de:	db c0       	rjmp	.+438    	; 0x3996 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
      bpb->fatCount == 0 ||
      bpb->reservedSectorCount == 0 ||
    37e0:	20 91 6d 03 	lds	r18, 0x036D	; 0x80036d <_ZN8SdVolume12cacheBuffer_E+0xe>
    37e4:	30 91 6e 03 	lds	r19, 0x036E	; 0x80036e <_ZN8SdVolume12cacheBuffer_E+0xf>
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
      bpb->fatCount == 0 ||
    37e8:	23 2b       	or	r18, r19
    37ea:	09 f4       	brne	.+2      	; 0x37ee <_ZN8SdVolume4initEP7Sd2Cardh+0xf8>
    37ec:	cf c0       	rjmp	.+414    	; 0x398c <_ZN8SdVolume4initEP7Sd2Cardh+0x296>
      bpb->reservedSectorCount == 0 ||
      bpb->sectorsPerCluster == 0) {
    37ee:	60 91 6c 03 	lds	r22, 0x036C	; 0x80036c <_ZN8SdVolume12cacheBuffer_E+0xd>
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
      bpb->fatCount == 0 ||
      bpb->reservedSectorCount == 0 ||
    37f2:	66 23       	and	r22, r22
    37f4:	09 f4       	brne	.+2      	; 0x37f8 <_ZN8SdVolume4initEP7Sd2Cardh+0x102>
    37f6:	cc c0       	rjmp	.+408    	; 0x3990 <_ZN8SdVolume4initEP7Sd2Cardh+0x29a>
      bpb->sectorsPerCluster == 0) {
    // not valid FAT volume
    return false;
  }
  fatCount_ = bpb->fatCount;
    37f8:	e8 01       	movw	r28, r16
    37fa:	8a 8b       	std	Y+18, r24	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    37fc:	6c 83       	std	Y+4, r22	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    37fe:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    3800:	f8 01       	movw	r30, r16
    3802:	85 85       	ldd	r24, Z+13	; 0x0d
    3804:	e8 2f       	mov	r30, r24
    3806:	21 e0       	ldi	r18, 0x01	; 1
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	08 2e       	mov	r0, r24
    380c:	02 c0       	rjmp	.+4      	; 0x3812 <_ZN8SdVolume4initEP7Sd2Cardh+0x11c>
    380e:	22 0f       	add	r18, r18
    3810:	33 1f       	adc	r19, r19
    3812:	0a 94       	dec	r0
    3814:	e2 f7       	brpl	.-8      	; 0x380e <_ZN8SdVolume4initEP7Sd2Cardh+0x118>
    3816:	46 2f       	mov	r20, r22
    3818:	50 e0       	ldi	r21, 0x00	; 0
    381a:	42 17       	cp	r20, r18
    381c:	53 07       	cpc	r21, r19
    381e:	41 f0       	breq	.+16     	; 0x3830 <_ZN8SdVolume4initEP7Sd2Cardh+0x13a>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) {
    3820:	91 e0       	ldi	r25, 0x01	; 1
    3822:	98 0f       	add	r25, r24
    3824:	d8 01       	movw	r26, r16
    3826:	1d 96       	adiw	r26, 0x0d	; 13
    3828:	9c 93       	st	X, r25
    382a:	88 30       	cpi	r24, 0x08	; 8
    382c:	48 f3       	brcs	.-46     	; 0x3800 <_ZN8SdVolume4initEP7Sd2Cardh+0x10a>
    382e:	b2 c0       	rjmp	.+356    	; 0x3994 <_ZN8SdVolume4initEP7Sd2Cardh+0x29e>
      return false;
    }
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    3830:	20 91 75 03 	lds	r18, 0x0375	; 0x800375 <_ZN8SdVolume12cacheBuffer_E+0x16>
    3834:	30 91 76 03 	lds	r19, 0x0376	; 0x800376 <_ZN8SdVolume12cacheBuffer_E+0x17>
                  bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    3838:	21 15       	cp	r18, r1
    383a:	31 05       	cpc	r19, r1
    383c:	19 f0       	breq	.+6      	; 0x3844 <_ZN8SdVolume4initEP7Sd2Cardh+0x14e>
    383e:	40 e0       	ldi	r20, 0x00	; 0
    3840:	50 e0       	ldi	r21, 0x00	; 0
    3842:	08 c0       	rjmp	.+16     	; 0x3854 <_ZN8SdVolume4initEP7Sd2Cardh+0x15e>
    3844:	20 91 83 03 	lds	r18, 0x0383	; 0x800383 <_ZN8SdVolume12cacheBuffer_E+0x24>
    3848:	30 91 84 03 	lds	r19, 0x0384	; 0x800384 <_ZN8SdVolume12cacheBuffer_E+0x25>
    384c:	40 91 85 03 	lds	r20, 0x0385	; 0x800385 <_ZN8SdVolume12cacheBuffer_E+0x26>
    3850:	50 91 86 03 	lds	r21, 0x0386	; 0x800386 <_ZN8SdVolume12cacheBuffer_E+0x27>
    3854:	e8 01       	movw	r28, r16
    3856:	2d 83       	std	Y+5, r18	; 0x05
    3858:	3e 83       	std	Y+6, r19	; 0x06
    385a:	4f 83       	std	Y+7, r20	; 0x07
    385c:	58 87       	std	Y+8, r21	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    385e:	0f 2e       	mov	r0, r31
    3860:	ff e5       	ldi	r31, 0x5F	; 95
    3862:	af 2e       	mov	r10, r31
    3864:	f3 e0       	ldi	r31, 0x03	; 3
    3866:	bf 2e       	mov	r11, r31
    3868:	f0 2d       	mov	r31, r0
    386a:	d5 01       	movw	r26, r10
    386c:	1e 96       	adiw	r26, 0x0e	; 14
    386e:	8d 91       	ld	r24, X+
    3870:	9c 91       	ld	r25, X
    3872:	1f 97       	sbiw	r26, 0x0f	; 15
    3874:	26 01       	movw	r4, r12
    3876:	37 01       	movw	r6, r14
    3878:	48 0e       	add	r4, r24
    387a:	59 1e       	adc	r5, r25
    387c:	61 1c       	adc	r6, r1
    387e:	71 1c       	adc	r7, r1
    3880:	4b 8a       	std	Y+19, r4	; 0x13
    3882:	5c 8a       	std	Y+20, r5	; 0x14
    3884:	6d 8a       	std	Y+21, r6	; 0x15
    3886:	7e 8a       	std	Y+22, r7	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    3888:	51 96       	adiw	r26, 0x11	; 17
    388a:	8d 90       	ld	r8, X+
    388c:	9c 90       	ld	r9, X
    388e:	52 97       	sbiw	r26, 0x12	; 18
    3890:	99 8e       	std	Y+25, r9	; 0x19
    3892:	88 8e       	std	Y+24, r8	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    3894:	50 96       	adiw	r26, 0x10	; 16
    3896:	8c 91       	ld	r24, X
    3898:	a8 2f       	mov	r26, r24
    389a:	b0 e0       	ldi	r27, 0x00	; 0
    389c:	0e 94 b5 27 	call	0x4f6a	; 0x4f6a <__muluhisi3>
    38a0:	dc 01       	movw	r26, r24
    38a2:	cb 01       	movw	r24, r22
    38a4:	84 0d       	add	r24, r4
    38a6:	95 1d       	adc	r25, r5
    38a8:	a6 1d       	adc	r26, r6
    38aa:	b7 1d       	adc	r27, r7
    38ac:	8a 8f       	std	Y+26, r24	; 0x1a
    38ae:	9b 8f       	std	Y+27, r25	; 0x1b
    38b0:	ac 8f       	std	Y+28, r26	; 0x1c
    38b2:	bd 8f       	std	Y+29, r27	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511) / 512);
    38b4:	e4 01       	movw	r28, r8
    38b6:	cc 0f       	add	r28, r28
    38b8:	dd 1f       	adc	r29, r29
    38ba:	c2 95       	swap	r28
    38bc:	d2 95       	swap	r29
    38be:	d0 7f       	andi	r29, 0xF0	; 240
    38c0:	dc 27       	eor	r29, r28
    38c2:	c0 7f       	andi	r28, 0xF0	; 240
    38c4:	dc 27       	eor	r29, r28
    38c6:	c1 50       	subi	r28, 0x01	; 1
    38c8:	de 4f       	sbci	r29, 0xFE	; 254
    38ca:	cd 2f       	mov	r28, r29
    38cc:	dd 27       	eor	r29, r29
    38ce:	c6 95       	lsr	r28
    38d0:	8c 0f       	add	r24, r28
    38d2:	9d 1f       	adc	r25, r29
    38d4:	a1 1d       	adc	r26, r1
    38d6:	b1 1d       	adc	r27, r1
    38d8:	e8 01       	movw	r28, r16
    38da:	8e 87       	std	Y+14, r24	; 0x0e
    38dc:	9f 87       	std	Y+15, r25	; 0x0f
    38de:	a8 8b       	std	Y+16, r26	; 0x10
    38e0:	b9 8b       	std	Y+17, r27	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    38e2:	e5 01       	movw	r28, r10
    38e4:	4b 88       	ldd	r4, Y+19	; 0x13
    38e6:	5c 88       	ldd	r5, Y+20	; 0x14
                         bpb->totalSectors16 : bpb->totalSectors32;
    38e8:	41 14       	cp	r4, r1
    38ea:	51 04       	cpc	r5, r1
    38ec:	19 f0       	breq	.+6      	; 0x38f4 <_ZN8SdVolume4initEP7Sd2Cardh+0x1fe>
    38ee:	61 2c       	mov	r6, r1
    38f0:	71 2c       	mov	r7, r1
    38f2:	08 c0       	rjmp	.+16     	; 0x3904 <_ZN8SdVolume4initEP7Sd2Cardh+0x20e>
    38f4:	40 90 7f 03 	lds	r4, 0x037F	; 0x80037f <_ZN8SdVolume12cacheBuffer_E+0x20>
    38f8:	50 90 80 03 	lds	r5, 0x0380	; 0x800380 <_ZN8SdVolume12cacheBuffer_E+0x21>
    38fc:	60 90 81 03 	lds	r6, 0x0381	; 0x800381 <_ZN8SdVolume12cacheBuffer_E+0x22>
    3900:	70 90 82 03 	lds	r7, 0x0382	; 0x800382 <_ZN8SdVolume12cacheBuffer_E+0x23>
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
    3904:	c8 1a       	sub	r12, r24
    3906:	d9 0a       	sbc	r13, r25
    3908:	ea 0a       	sbc	r14, r26
    390a:	fb 0a       	sbc	r15, r27
    390c:	c4 0c       	add	r12, r4
    390e:	d5 1c       	adc	r13, r5
    3910:	e6 1c       	adc	r14, r6
    3912:	f7 1c       	adc	r15, r7

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    3914:	04 c0       	rjmp	.+8      	; 0x391e <_ZN8SdVolume4initEP7Sd2Cardh+0x228>
    3916:	f6 94       	lsr	r15
    3918:	e7 94       	ror	r14
    391a:	d7 94       	ror	r13
    391c:	c7 94       	ror	r12
    391e:	ea 95       	dec	r30
    3920:	d2 f7       	brpl	.-12     	; 0x3916 <_ZN8SdVolume4initEP7Sd2Cardh+0x220>
    3922:	f8 01       	movw	r30, r16
    3924:	c1 86       	std	Z+9, r12	; 0x09
    3926:	d2 86       	std	Z+10, r13	; 0x0a
    3928:	e3 86       	std	Z+11, r14	; 0x0b
    392a:	f4 86       	std	Z+12, r15	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    392c:	f5 ef       	ldi	r31, 0xF5	; 245
    392e:	cf 16       	cp	r12, r31
    3930:	ff e0       	ldi	r31, 0x0F	; 15
    3932:	df 06       	cpc	r13, r31
    3934:	e1 04       	cpc	r14, r1
    3936:	f1 04       	cpc	r15, r1
    3938:	30 f4       	brcc	.+12     	; 0x3946 <_ZN8SdVolume4initEP7Sd2Cardh+0x250>
    fatType_ = 12;
    393a:	8c e0       	ldi	r24, 0x0C	; 12
    393c:	d8 01       	movw	r26, r16
    393e:	57 96       	adiw	r26, 0x17	; 23
    3940:	8c 93       	st	X, r24
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    3942:	81 e0       	ldi	r24, 0x01	; 1
    3944:	28 c0       	rjmp	.+80     	; 0x3996 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  clusterCount_ >>= clusterSizeShift_;

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    3946:	b5 ef       	ldi	r27, 0xF5	; 245
    3948:	cb 16       	cp	r12, r27
    394a:	bf ef       	ldi	r27, 0xFF	; 255
    394c:	db 06       	cpc	r13, r27
    394e:	e1 04       	cpc	r14, r1
    3950:	f1 04       	cpc	r15, r1
    3952:	28 f4       	brcc	.+10     	; 0x395e <_ZN8SdVolume4initEP7Sd2Cardh+0x268>
    fatType_ = 16;
    3954:	80 e1       	ldi	r24, 0x10	; 16
    3956:	e8 01       	movw	r28, r16
    3958:	8f 8b       	std	Y+23, r24	; 0x17
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	1c c0       	rjmp	.+56     	; 0x3996 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    395e:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <_ZN8SdVolume12cacheBuffer_E+0x2c>
    3962:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <_ZN8SdVolume12cacheBuffer_E+0x2d>
    3966:	a0 91 8d 03 	lds	r26, 0x038D	; 0x80038d <_ZN8SdVolume12cacheBuffer_E+0x2e>
    396a:	b0 91 8e 03 	lds	r27, 0x038E	; 0x80038e <_ZN8SdVolume12cacheBuffer_E+0x2f>
    396e:	f8 01       	movw	r30, r16
    3970:	82 8f       	std	Z+26, r24	; 0x1a
    3972:	93 8f       	std	Z+27, r25	; 0x1b
    3974:	a4 8f       	std	Z+28, r26	; 0x1c
    3976:	b5 8f       	std	Z+29, r27	; 0x1d
    fatType_ = 32;
    3978:	80 e2       	ldi	r24, 0x20	; 32
    397a:	87 8b       	std	Z+23, r24	; 0x17
  }
  return true;
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	0b c0       	rjmp	.+22     	; 0x3996 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  sdCard_ = dev;
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4) {
      return false;
    3980:	80 e0       	ldi	r24, 0x00	; 0
    3982:	09 c0       	rjmp	.+18     	; 0x3996 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0  ||
        p->totalSectors < 100 ||
        p->firstSector == 0) {
      // not a valid partition
      return false;
    3984:	80 e0       	ldi	r24, 0x00	; 0
    3986:	07 c0       	rjmp	.+14     	; 0x3996 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  if (bpb->bytesPerSector != 512 ||
      bpb->fatCount == 0 ||
      bpb->reservedSectorCount == 0 ||
      bpb->sectorsPerCluster == 0) {
    // not valid FAT volume
    return false;
    3988:	80 e0       	ldi	r24, 0x00	; 0
    398a:	05 c0       	rjmp	.+10     	; 0x3996 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	03 c0       	rjmp	.+6      	; 0x3996 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    3990:	86 2f       	mov	r24, r22
    3992:	01 c0       	rjmp	.+2      	; 0x3996 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    // error if not power of 2
    if (clusterSizeShift_++ > 7) {
      return false;
    3994:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
}
    3996:	df 91       	pop	r29
    3998:	cf 91       	pop	r28
    399a:	1f 91       	pop	r17
    399c:	0f 91       	pop	r16
    399e:	ff 90       	pop	r15
    39a0:	ef 90       	pop	r14
    39a2:	df 90       	pop	r13
    39a4:	cf 90       	pop	r12
    39a6:	bf 90       	pop	r11
    39a8:	af 90       	pop	r10
    39aa:	9f 90       	pop	r9
    39ac:	8f 90       	pop	r8
    39ae:	7f 90       	pop	r7
    39b0:	6f 90       	pop	r6
    39b2:	5f 90       	pop	r5
    39b4:	4f 90       	pop	r4
    39b6:	08 95       	ret

000039b8 <_ZN9LCDScreenC1Eh>:
	_cols = lcd_cols;
	_rows = lcd_rows;
	_charsize = charsize;
	_backlightval = LCD_BACKLIGHT;
} */
LCDScreen::LCDScreen(uint8_t lcd_addr)
    39b8:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    39ba:	13 82       	std	Z+3, r1	; 0x03
    39bc:	12 82       	std	Z+2, r1	; 0x02
    39be:	89 ea       	ldi	r24, 0xA9	; 169
    39c0:	91 e0       	ldi	r25, 0x01	; 1
    39c2:	91 83       	std	Z+1, r25	; 0x01
    39c4:	80 83       	st	Z, r24
{
	_addr = lcd_addr;
    39c6:	64 83       	std	Z+4, r22	; 0x04
    39c8:	08 95       	ret

000039ca <_ZN9LCDScreen13expanderWriteEh>:
void LCDScreen::write4bits(uint8_t value) {
	expanderWrite(value);
	pulseEnable(value);
}

void LCDScreen::expanderWrite(uint8_t _data){
    39ca:	cf 93       	push	r28
    39cc:	c6 2f       	mov	r28, r22
	Wire.beginTransmission(_addr);
    39ce:	fc 01       	movw	r30, r24
    39d0:	64 81       	ldd	r22, Z+4	; 0x04
    39d2:	84 eb       	ldi	r24, 0xB4	; 180
    39d4:	92 e0       	ldi	r25, 0x02	; 2
    39d6:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((int)(_data) | 0x08);
    39da:	6c 2f       	mov	r22, r28
    39dc:	68 60       	ori	r22, 0x08	; 8
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    39de:	e0 91 b4 02 	lds	r30, 0x02B4	; 0x8002b4 <Wire>
    39e2:	f0 91 b5 02 	lds	r31, 0x02B5	; 0x8002b5 <Wire+0x1>
    39e6:	01 90       	ld	r0, Z+
    39e8:	f0 81       	ld	r31, Z
    39ea:	e0 2d       	mov	r30, r0
    39ec:	84 eb       	ldi	r24, 0xB4	; 180
    39ee:	92 e0       	ldi	r25, 0x02	; 2
    39f0:	09 95       	icall
	Wire.endTransmission();
    39f2:	84 eb       	ldi	r24, 0xB4	; 180
    39f4:	92 e0       	ldi	r25, 0x02	; 2
    39f6:	0e 94 79 06 	call	0xcf2	; 0xcf2 <_ZN7TwoWire15endTransmissionEv>
}
    39fa:	cf 91       	pop	r28
    39fc:	08 95       	ret

000039fe <_ZN9LCDScreen11pulseEnableEh>:

void LCDScreen::pulseEnable(uint8_t _data){
    39fe:	0f 93       	push	r16
    3a00:	1f 93       	push	r17
    3a02:	cf 93       	push	r28
    3a04:	8c 01       	movw	r16, r24
    3a06:	c6 2f       	mov	r28, r22
	expanderWrite(_data | En);	// En high
    3a08:	64 60       	ori	r22, 0x04	; 4
    3a0a:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <_ZN9LCDScreen13expanderWriteEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3a0e:	85 e0       	ldi	r24, 0x05	; 5
    3a10:	8a 95       	dec	r24
    3a12:	f1 f7       	brne	.-4      	; 0x3a10 <_ZN9LCDScreen11pulseEnableEh+0x12>
    3a14:	00 00       	nop
	_delay_us(1);		// enable pulse must be >450ns

	expanderWrite(_data & ~En);	// En low
    3a16:	6c 2f       	mov	r22, r28
    3a18:	6b 7f       	andi	r22, 0xFB	; 251
    3a1a:	c8 01       	movw	r24, r16
    3a1c:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <_ZN9LCDScreen13expanderWriteEh>
    3a20:	87 ec       	ldi	r24, 0xC7	; 199
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	01 97       	sbiw	r24, 0x01	; 1
    3a26:	f1 f7       	brne	.-4      	; 0x3a24 <_ZN9LCDScreen11pulseEnableEh+0x26>
    3a28:	00 c0       	rjmp	.+0      	; 0x3a2a <_ZN9LCDScreen11pulseEnableEh+0x2c>
    3a2a:	00 00       	nop
	_delay_us(50);		// commands need > 37us to settle
}
    3a2c:	cf 91       	pop	r28
    3a2e:	1f 91       	pop	r17
    3a30:	0f 91       	pop	r16
    3a32:	08 95       	ret

00003a34 <_ZN9LCDScreen10write4bitsEh>:
	uint8_t lownib=(value<<4)&0xf0;
	write4bits((highnib)|mode);
	write4bits((lownib)|mode);
}

void LCDScreen::write4bits(uint8_t value) {
    3a34:	1f 93       	push	r17
    3a36:	cf 93       	push	r28
    3a38:	df 93       	push	r29
    3a3a:	ec 01       	movw	r28, r24
    3a3c:	16 2f       	mov	r17, r22
	expanderWrite(value);
    3a3e:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <_ZN9LCDScreen13expanderWriteEh>
	pulseEnable(value);
    3a42:	61 2f       	mov	r22, r17
    3a44:	ce 01       	movw	r24, r28
    3a46:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <_ZN9LCDScreen11pulseEnableEh>
}
    3a4a:	df 91       	pop	r29
    3a4c:	cf 91       	pop	r28
    3a4e:	1f 91       	pop	r17
    3a50:	08 95       	ret

00003a52 <_ZN9LCDScreen4sendEhh>:


/************ low level data pushing commands **********/

// write either command or data
void LCDScreen::send(uint8_t value, uint8_t mode) {
    3a52:	ff 92       	push	r15
    3a54:	0f 93       	push	r16
    3a56:	1f 93       	push	r17
    3a58:	cf 93       	push	r28
    3a5a:	df 93       	push	r29
    3a5c:	8c 01       	movw	r16, r24
    3a5e:	f4 2e       	mov	r15, r20
	uint8_t highnib=value&0xf0;
    3a60:	86 2f       	mov	r24, r22
    3a62:	80 7f       	andi	r24, 0xF0	; 240
	uint8_t lownib=(value<<4)&0xf0;
    3a64:	90 e1       	ldi	r25, 0x10	; 16
    3a66:	69 9f       	mul	r22, r25
    3a68:	e0 01       	movw	r28, r0
    3a6a:	11 24       	eor	r1, r1
	write4bits((highnib)|mode);
    3a6c:	68 2f       	mov	r22, r24
    3a6e:	64 2b       	or	r22, r20
    3a70:	c8 01       	movw	r24, r16
    3a72:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <_ZN9LCDScreen10write4bitsEh>
	write4bits((lownib)|mode);
    3a76:	6c 2f       	mov	r22, r28
    3a78:	6f 29       	or	r22, r15
    3a7a:	c8 01       	movw	r24, r16
    3a7c:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <_ZN9LCDScreen10write4bitsEh>
}
    3a80:	df 91       	pop	r29
    3a82:	cf 91       	pop	r28
    3a84:	1f 91       	pop	r17
    3a86:	0f 91       	pop	r16
    3a88:	ff 90       	pop	r15
    3a8a:	08 95       	ret

00003a8c <_ZN9LCDScreen5clearEv>:
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
    3a8c:	40 e0       	ldi	r20, 0x00	; 0
    3a8e:	61 e0       	ldi	r22, 0x01	; 1
    3a90:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <_ZN9LCDScreen4sendEhh>
    3a94:	8f e3       	ldi	r24, 0x3F	; 63
    3a96:	9f e1       	ldi	r25, 0x1F	; 31
    3a98:	01 97       	sbiw	r24, 0x01	; 1
    3a9a:	f1 f7       	brne	.-4      	; 0x3a98 <_ZN9LCDScreen5clearEv+0xc>
    3a9c:	00 c0       	rjmp	.+0      	; 0x3a9e <_ZN9LCDScreen5clearEv+0x12>
    3a9e:	00 00       	nop
    3aa0:	08 95       	ret

00003aa2 <_ZN9LCDScreen4homeEv>:
    3aa2:	40 e0       	ldi	r20, 0x00	; 0
    3aa4:	62 e0       	ldi	r22, 0x02	; 2
    3aa6:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <_ZN9LCDScreen4sendEhh>
    3aaa:	8f e3       	ldi	r24, 0x3F	; 63
    3aac:	9f e1       	ldi	r25, 0x1F	; 31
    3aae:	01 97       	sbiw	r24, 0x01	; 1
    3ab0:	f1 f7       	brne	.-4      	; 0x3aae <_ZN9LCDScreen4homeEv+0xc>
    3ab2:	00 c0       	rjmp	.+0      	; 0x3ab4 <_ZN9LCDScreen4homeEv+0x12>
    3ab4:	00 00       	nop
    3ab6:	08 95       	ret

00003ab8 <_ZN9LCDScreen9setCursorEhh>:
void LCDScreen::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	_delay_us(2000);  // this command takes a long time!
} 

void LCDScreen::setCursor(uint8_t col, uint8_t row){
    3ab8:	cf 93       	push	r28
    3aba:	df 93       	push	r29
    3abc:	cd b7       	in	r28, 0x3d	; 61
    3abe:	de b7       	in	r29, 0x3e	; 62
    3ac0:	28 97       	sbiw	r28, 0x08	; 8
    3ac2:	0f b6       	in	r0, 0x3f	; 63
    3ac4:	f8 94       	cli
    3ac6:	de bf       	out	0x3e, r29	; 62
    3ac8:	0f be       	out	0x3f, r0	; 63
    3aca:	cd bf       	out	0x3d, r28	; 61
    3acc:	9c 01       	movw	r18, r24
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
    3ace:	98 e0       	ldi	r25, 0x08	; 8
    3ad0:	ed e0       	ldi	r30, 0x0D	; 13
    3ad2:	f1 e0       	ldi	r31, 0x01	; 1
    3ad4:	de 01       	movw	r26, r28
    3ad6:	11 96       	adiw	r26, 0x01	; 1
    3ad8:	01 90       	ld	r0, Z+
    3ada:	0d 92       	st	X+, r0
    3adc:	9a 95       	dec	r25
    3ade:	e1 f7       	brne	.-8      	; 0x3ad8 <_ZN9LCDScreen9setCursorEhh+0x20>
	if (row > 2) {
    3ae0:	43 30       	cpi	r20, 0x03	; 3
    3ae2:	08 f0       	brcs	.+2      	; 0x3ae6 <_ZN9LCDScreen9setCursorEhh+0x2e>
		row = 1;    // we count rows starting w/0
    3ae4:	41 e0       	ldi	r20, 0x01	; 1
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
    3ae6:	e4 2f       	mov	r30, r20
    3ae8:	f0 e0       	ldi	r31, 0x00	; 0
    3aea:	ee 0f       	add	r30, r30
    3aec:	ff 1f       	adc	r31, r31
    3aee:	81 e0       	ldi	r24, 0x01	; 1
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	8c 0f       	add	r24, r28
    3af4:	9d 1f       	adc	r25, r29
    3af6:	e8 0f       	add	r30, r24
    3af8:	f9 1f       	adc	r31, r25
    3afa:	90 81       	ld	r25, Z
    3afc:	69 0f       	add	r22, r25
    3afe:	60 68       	ori	r22, 0x80	; 128
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
    3b00:	40 e0       	ldi	r20, 0x00	; 0
    3b02:	c9 01       	movw	r24, r18
    3b04:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <_ZN9LCDScreen4sendEhh>
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (row > 2) {
		row = 1;    // we count rows starting w/0
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
}
    3b08:	28 96       	adiw	r28, 0x08	; 8
    3b0a:	0f b6       	in	r0, 0x3f	; 63
    3b0c:	f8 94       	cli
    3b0e:	de bf       	out	0x3e, r29	; 62
    3b10:	0f be       	out	0x3f, r0	; 63
    3b12:	cd bf       	out	0x3d, r28	; 61
    3b14:	df 91       	pop	r29
    3b16:	cf 91       	pop	r28
    3b18:	08 95       	ret

00003b1a <_ZN9LCDScreen7displayEv>:


void LCDScreen::display() {
	_displaycontrol |= LCD_DISPLAYON;
    3b1a:	fc 01       	movw	r30, r24
    3b1c:	66 81       	ldd	r22, Z+6	; 0x06
    3b1e:	26 2f       	mov	r18, r22
    3b20:	24 60       	ori	r18, 0x04	; 4
    3b22:	26 83       	std	Z+6, r18	; 0x06
	command(LCD_DISPLAYCONTROL | _displaycontrol);
    3b24:	6c 60       	ori	r22, 0x0C	; 12
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
    3b26:	40 e0       	ldi	r20, 0x00	; 0
    3b28:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <_ZN9LCDScreen4sendEhh>
    3b2c:	08 95       	ret

00003b2e <_ZN9LCDScreen5writeEh>:
}

inline size_t LCDScreen::write(uint8_t value) {
	send(value, Rs);
    3b2e:	41 e0       	ldi	r20, 0x01	; 1
    3b30:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <_ZN9LCDScreen4sendEhh>
	return 1;
}
    3b34:	81 e0       	ldi	r24, 0x01	; 1
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	08 95       	ret

00003b3a <_ZN9LCDScreen5beginEv>:
} */
LCDScreen::LCDScreen(uint8_t lcd_addr)
{
	_addr = lcd_addr;
}
void LCDScreen::begin() {
    3b3a:	cf 93       	push	r28
    3b3c:	df 93       	push	r29
    3b3e:	ec 01       	movw	r28, r24
	Wire.begin();
    3b40:	84 eb       	ldi	r24, 0xB4	; 180
    3b42:	92 e0       	ldi	r25, 0x02	; 2
    3b44:	0e 94 49 06 	call	0xc92	; 0xc92 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	_displayfunction |= LCD_2LINE;
    3b48:	88 e0       	ldi	r24, 0x08	; 8
    3b4a:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3b4c:	2f ef       	ldi	r18, 0xFF	; 255
    3b4e:	80 e7       	ldi	r24, 0x70	; 112
    3b50:	92 e0       	ldi	r25, 0x02	; 2
    3b52:	21 50       	subi	r18, 0x01	; 1
    3b54:	80 40       	sbci	r24, 0x00	; 0
    3b56:	90 40       	sbci	r25, 0x00	; 0
    3b58:	e1 f7       	brne	.-8      	; 0x3b52 <_ZN9LCDScreen5beginEv+0x18>
    3b5a:	00 c0       	rjmp	.+0      	; 0x3b5c <_ZN9LCDScreen5beginEv+0x22>
    3b5c:	00 00       	nop
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	_delay_ms(50);

	// Now we pull both RS and R/W low to begin commands
	expanderWrite(0x08);	// reset expanderand turn backlight off (Bit 8 =1)
    3b5e:	68 e0       	ldi	r22, 0x08	; 8
    3b60:	ce 01       	movw	r24, r28
    3b62:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <_ZN9LCDScreen13expanderWriteEh>
    3b66:	2f ef       	ldi	r18, 0xFF	; 255
    3b68:	83 ed       	ldi	r24, 0xD3	; 211
    3b6a:	90 e3       	ldi	r25, 0x30	; 48
    3b6c:	21 50       	subi	r18, 0x01	; 1
    3b6e:	80 40       	sbci	r24, 0x00	; 0
    3b70:	90 40       	sbci	r25, 0x00	; 0
    3b72:	e1 f7       	brne	.-8      	; 0x3b6c <_ZN9LCDScreen5beginEv+0x32>
    3b74:	00 c0       	rjmp	.+0      	; 0x3b76 <_ZN9LCDScreen5beginEv+0x3c>
    3b76:	00 00       	nop
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
	write4bits(0x03 << 4);
    3b78:	60 e3       	ldi	r22, 0x30	; 48
    3b7a:	ce 01       	movw	r24, r28
    3b7c:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <_ZN9LCDScreen10write4bitsEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3b80:	8f e4       	ldi	r24, 0x4F	; 79
    3b82:	96 e4       	ldi	r25, 0x46	; 70
    3b84:	01 97       	sbiw	r24, 0x01	; 1
    3b86:	f1 f7       	brne	.-4      	; 0x3b84 <_ZN9LCDScreen5beginEv+0x4a>
    3b88:	00 c0       	rjmp	.+0      	; 0x3b8a <_ZN9LCDScreen5beginEv+0x50>
    3b8a:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms

	// second try
	write4bits(0x03 << 4);
    3b8c:	60 e3       	ldi	r22, 0x30	; 48
    3b8e:	ce 01       	movw	r24, r28
    3b90:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <_ZN9LCDScreen10write4bitsEh>
    3b94:	8f e4       	ldi	r24, 0x4F	; 79
    3b96:	96 e4       	ldi	r25, 0x46	; 70
    3b98:	01 97       	sbiw	r24, 0x01	; 1
    3b9a:	f1 f7       	brne	.-4      	; 0x3b98 <_ZN9LCDScreen5beginEv+0x5e>
    3b9c:	00 c0       	rjmp	.+0      	; 0x3b9e <_ZN9LCDScreen5beginEv+0x64>
    3b9e:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms

	// third go!
	write4bits(0x03 << 4);
    3ba0:	60 e3       	ldi	r22, 0x30	; 48
    3ba2:	ce 01       	movw	r24, r28
    3ba4:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <_ZN9LCDScreen10write4bitsEh>
    3ba8:	87 e5       	ldi	r24, 0x57	; 87
    3baa:	92 e0       	ldi	r25, 0x02	; 2
    3bac:	01 97       	sbiw	r24, 0x01	; 1
    3bae:	f1 f7       	brne	.-4      	; 0x3bac <_ZN9LCDScreen5beginEv+0x72>
    3bb0:	00 c0       	rjmp	.+0      	; 0x3bb2 <_ZN9LCDScreen5beginEv+0x78>
    3bb2:	00 00       	nop
	_delay_us(150);

	// finally, set to 4-bit interface
	write4bits(0x02 << 4);
    3bb4:	60 e2       	ldi	r22, 0x20	; 32
    3bb6:	ce 01       	movw	r24, r28
    3bb8:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <_ZN9LCDScreen10write4bitsEh>

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);
    3bbc:	6d 81       	ldd	r22, Y+5	; 0x05
    3bbe:	60 62       	ori	r22, 0x20	; 32
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
    3bc0:	40 e0       	ldi	r20, 0x00	; 0
    3bc2:	ce 01       	movw	r24, r28
    3bc4:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <_ZN9LCDScreen4sendEhh>

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);

	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    3bc8:	84 e0       	ldi	r24, 0x04	; 4
    3bca:	8e 83       	std	Y+6, r24	; 0x06
	display();
    3bcc:	ce 01       	movw	r24, r28
    3bce:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <_ZN9LCDScreen7displayEv>

	// clear it off
	clear();
    3bd2:	ce 01       	movw	r24, r28
    3bd4:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <_ZN9LCDScreen5clearEv>

	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    3bd8:	82 e0       	ldi	r24, 0x02	; 2
    3bda:	8f 83       	std	Y+7, r24	; 0x07
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
    3bdc:	40 e0       	ldi	r20, 0x00	; 0
    3bde:	66 e0       	ldi	r22, 0x06	; 6
    3be0:	ce 01       	movw	r24, r28
    3be2:	0e 94 29 1d 	call	0x3a52	; 0x3a52 <_ZN9LCDScreen4sendEhh>
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;

	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);

	home();
    3be6:	ce 01       	movw	r24, r28
    3be8:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <_ZN9LCDScreen4homeEv>
}
    3bec:	df 91       	pop	r29
    3bee:	cf 91       	pop	r28
    3bf0:	08 95       	ret

00003bf2 <_Z41__static_initialization_and_destruction_0ii>:
//>--------------------------------< LCD DISPLAY FUNCTIONS >-----------------------------------<
void firstLine(const char *msg) {
  //Prints the string passed in the first line of the LCD display
  lcd.setCursor(0, 0);
  lcd.print(msg);
}
    3bf2:	01 97       	sbiw	r24, 0x01	; 1
    3bf4:	41 f4       	brne	.+16     	; 0x3c06 <_Z41__static_initialization_and_destruction_0ii+0x14>
    3bf6:	6f 3f       	cpi	r22, 0xFF	; 255
    3bf8:	7f 4f       	sbci	r23, 0xFF	; 255
    3bfa:	29 f4       	brne	.+10     	; 0x3c06 <_Z41__static_initialization_and_destruction_0ii+0x14>
    3bfc:	67 e2       	ldi	r22, 0x27	; 39
    3bfe:	8f e5       	ldi	r24, 0x5F	; 95
    3c00:	95 e0       	ldi	r25, 0x05	; 5
    3c02:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <_ZN9LCDScreenC1Eh>
    3c06:	08 95       	ret

00003c08 <_Z8keyInputv>:
    3c08:	89 b1       	in	r24, 0x09	; 9
    3c0a:	80 95       	com	r24
    3c0c:	61 f1       	breq	.+88     	; 0x3c66 <_Z8keyInputv+0x5e>
    3c0e:	88 30       	cpi	r24, 0x08	; 8
    3c10:	99 f0       	breq	.+38     	; 0x3c38 <_Z8keyInputv+0x30>
    3c12:	38 f4       	brcc	.+14     	; 0x3c22 <_Z8keyInputv+0x1a>
    3c14:	82 30       	cpi	r24, 0x02	; 2
    3c16:	d1 f0       	breq	.+52     	; 0x3c4c <_Z8keyInputv+0x44>
    3c18:	84 30       	cpi	r24, 0x04	; 4
    3c1a:	61 f0       	breq	.+24     	; 0x3c34 <_Z8keyInputv+0x2c>
    3c1c:	81 30       	cpi	r24, 0x01	; 1
    3c1e:	a1 f4       	brne	.+40     	; 0x3c48 <_Z8keyInputv+0x40>
    3c20:	07 c0       	rjmp	.+14     	; 0x3c30 <_Z8keyInputv+0x28>
    3c22:	80 34       	cpi	r24, 0x40	; 64
    3c24:	69 f0       	breq	.+26     	; 0x3c40 <_Z8keyInputv+0x38>
    3c26:	80 38       	cpi	r24, 0x80	; 128
    3c28:	69 f0       	breq	.+26     	; 0x3c44 <_Z8keyInputv+0x3c>
    3c2a:	80 32       	cpi	r24, 0x20	; 32
    3c2c:	69 f4       	brne	.+26     	; 0x3c48 <_Z8keyInputv+0x40>
    3c2e:	06 c0       	rjmp	.+12     	; 0x3c3c <_Z8keyInputv+0x34>
    3c30:	8f e5       	ldi	r24, 0x5F	; 95
    3c32:	0d c0       	rjmp	.+26     	; 0x3c4e <_Z8keyInputv+0x46>
    3c34:	83 e7       	ldi	r24, 0x73	; 115
    3c36:	0b c0       	rjmp	.+22     	; 0x3c4e <_Z8keyInputv+0x46>
    3c38:	8c e3       	ldi	r24, 0x3C	; 60
    3c3a:	09 c0       	rjmp	.+18     	; 0x3c4e <_Z8keyInputv+0x46>
    3c3c:	80 e7       	ldi	r24, 0x70	; 112
    3c3e:	07 c0       	rjmp	.+14     	; 0x3c4e <_Z8keyInputv+0x46>
    3c40:	8e e3       	ldi	r24, 0x3E	; 62
    3c42:	05 c0       	rjmp	.+10     	; 0x3c4e <_Z8keyInputv+0x46>
    3c44:	84 e6       	ldi	r24, 0x64	; 100
    3c46:	03 c0       	rjmp	.+6      	; 0x3c4e <_Z8keyInputv+0x46>
    3c48:	80 e0       	ldi	r24, 0x00	; 0
    3c4a:	01 c0       	rjmp	.+2      	; 0x3c4e <_Z8keyInputv+0x46>
    3c4c:	8a e2       	ldi	r24, 0x2A	; 42
    3c4e:	2f ef       	ldi	r18, 0xFF	; 255
    3c50:	35 ea       	ldi	r19, 0xA5	; 165
    3c52:	9e e0       	ldi	r25, 0x0E	; 14
    3c54:	21 50       	subi	r18, 0x01	; 1
    3c56:	30 40       	sbci	r19, 0x00	; 0
    3c58:	90 40       	sbci	r25, 0x00	; 0
    3c5a:	e1 f7       	brne	.-8      	; 0x3c54 <_Z8keyInputv+0x4c>
    3c5c:	00 c0       	rjmp	.+0      	; 0x3c5e <_Z8keyInputv+0x56>
    3c5e:	00 00       	nop
    3c60:	9f ef       	ldi	r25, 0xFF	; 255
    3c62:	9b b9       	out	0x0b, r25	; 11
    3c64:	08 95       	ret
    3c66:	80 e0       	ldi	r24, 0x00	; 0
    3c68:	08 95       	ret

00003c6a <_Z10clrDisplayPKc>:

void clrDisplay(const char *msg) {
    3c6a:	cf 93       	push	r28
    3c6c:	df 93       	push	r29
    3c6e:	ec 01       	movw	r28, r24
  //Clears the LCD and displays the msg in first line
  lcd.clear();
    3c70:	8f e5       	ldi	r24, 0x5F	; 95
    3c72:	95 e0       	ldi	r25, 0x05	; 5
    3c74:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <_ZN9LCDScreen5clearEv>
  lcd.setCursor(0, 0);
    3c78:	40 e0       	ldi	r20, 0x00	; 0
    3c7a:	60 e0       	ldi	r22, 0x00	; 0
    3c7c:	8f e5       	ldi	r24, 0x5F	; 95
    3c7e:	95 e0       	ldi	r25, 0x05	; 5
    3c80:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <_ZN9LCDScreen9setCursorEhh>
  lcd.print(msg);
    3c84:	be 01       	movw	r22, r28
    3c86:	8f e5       	ldi	r24, 0x5F	; 95
    3c88:	95 e0       	ldi	r25, 0x05	; 5
    3c8a:	0e 94 91 01 	call	0x322	; 0x322 <_ZN5Print5printEPKc>
}
    3c8e:	df 91       	pop	r29
    3c90:	cf 91       	pop	r28
    3c92:	08 95       	ret

00003c94 <_Z10secondLinePKc>:

void secondLine(const char *msg) {
    3c94:	cf 93       	push	r28
    3c96:	df 93       	push	r29
    3c98:	ec 01       	movw	r28, r24
  //Prints the string passed in the second line of the LCD display
  lcd.setCursor(0, 1);
    3c9a:	41 e0       	ldi	r20, 0x01	; 1
    3c9c:	60 e0       	ldi	r22, 0x00	; 0
    3c9e:	8f e5       	ldi	r24, 0x5F	; 95
    3ca0:	95 e0       	ldi	r25, 0x05	; 5
    3ca2:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <_ZN9LCDScreen9setCursorEhh>
  lcd.print(msg);
    3ca6:	be 01       	movw	r22, r28
    3ca8:	8f e5       	ldi	r24, 0x5F	; 95
    3caa:	95 e0       	ldi	r25, 0x05	; 5
    3cac:	0e 94 91 01 	call	0x322	; 0x322 <_ZN5Print5printEPKc>
}
    3cb0:	df 91       	pop	r29
    3cb2:	cf 91       	pop	r28
    3cb4:	08 95       	ret

00003cb6 <_Z12getTrackListv>:
}
//END OF RECORD AND PLAY FUNCTIONS

//>--------------------------------------< FILE HANDLING FUNCTIONS >--------------------------------------<

void getTrackList() {
    3cb6:	cf 93       	push	r28
    3cb8:	df 93       	push	r29
     This function checks for files and make a list of available files
     Program only accept 15 tracks
     counts the number of files
  */
  char ASCIIcount = 65;
  files = 0;
    3cba:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <files>
  
  //fname_temp = String(ASCIIcount) + ".WAV";
  //setFileName(ASCIIcount,"",".WAV");
  fname_temp[0] = ASCIIcount;
    3cbe:	81 e4       	ldi	r24, 0x41	; 65
    3cc0:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <fname_temp>
  
  uint8_t arrIndex = 0;
    3cc4:	c0 e0       	ldi	r28, 0x00	; 0
  /*
     This function checks for files and make a list of available files
     Program only accept 15 tracks
     counts the number of files
  */
  char ASCIIcount = 65;
    3cc6:	d1 e4       	ldi	r29, 0x41	; 65
  //setFileName(ASCIIcount,"",".WAV");
  fname_temp[0] = ASCIIcount;
  
  uint8_t arrIndex = 0;
  while (true) {
    if (arrIndex == maxFiles || ASCIIcount == 91) {
    3cc8:	cf 30       	cpi	r28, 0x0F	; 15
    3cca:	d9 f0       	breq	.+54     	; 0x3d02 <_Z12getTrackListv+0x4c>
    3ccc:	db 35       	cpi	r29, 0x5B	; 91
    3cce:	c9 f0       	breq	.+50     	; 0x3d02 <_Z12getTrackListv+0x4c>
      break;
    }
    if (SD.exists(fname_temp)) {
    3cd0:	67 e6       	ldi	r22, 0x67	; 103
    3cd2:	75 e0       	ldi	r23, 0x05	; 5
    3cd4:	8a e0       	ldi	r24, 0x0A	; 10
    3cd6:	93 e0       	ldi	r25, 0x03	; 3
    3cd8:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN5SDLib7SDClass6existsEPKc>
    3cdc:	88 23       	and	r24, r24
    3cde:	69 f0       	breq	.+26     	; 0x3cfa <_Z12getTrackListv+0x44>
      tracks[arrIndex++] = fname_temp[0];
    3ce0:	ec 2f       	mov	r30, r28
    3ce2:	f0 e0       	ldi	r31, 0x00	; 0
    3ce4:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <fname_temp>
    3ce8:	ed 58       	subi	r30, 0x8D	; 141
    3cea:	fa 4f       	sbci	r31, 0xFA	; 250
    3cec:	80 83       	st	Z, r24
      files++;
    3cee:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <files>
    3cf2:	8f 5f       	subi	r24, 0xFF	; 255
    3cf4:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <files>
  while (true) {
    if (arrIndex == maxFiles || ASCIIcount == 91) {
      break;
    }
    if (SD.exists(fname_temp)) {
      tracks[arrIndex++] = fname_temp[0];
    3cf8:	cf 5f       	subi	r28, 0xFF	; 255
      files++;
    }
    //fname_temp = String(++ASCIIcount) + ".WAV";
	//setFileName(++ASCIIcount,"",".WAV");
	fname_temp[0] = ++ASCIIcount;
    3cfa:	df 5f       	subi	r29, 0xFF	; 255
    3cfc:	d0 93 67 05 	sts	0x0567, r29	; 0x800567 <fname_temp>
  //fname_temp = String(ASCIIcount) + ".WAV";
  //setFileName(ASCIIcount,"",".WAV");
  fname_temp[0] = ASCIIcount;
  
  uint8_t arrIndex = 0;
  while (true) {
    3d00:	e3 cf       	rjmp	.-58     	; 0x3cc8 <_Z12getTrackListv+0x12>
    }
    //fname_temp = String(++ASCIIcount) + ".WAV";
	//setFileName(++ASCIIcount,"",".WAV");
	fname_temp[0] = ++ASCIIcount;
  }
  for (uint8_t i = arrIndex; i < maxFiles; i++) {
    3d02:	cf 30       	cpi	r28, 0x0F	; 15
    3d04:	40 f4       	brcc	.+16     	; 0x3d16 <_Z12getTrackListv+0x60>
    tracks[i] = '_';
    3d06:	ec 2f       	mov	r30, r28
    3d08:	f0 e0       	ldi	r31, 0x00	; 0
    3d0a:	ed 58       	subi	r30, 0x8D	; 141
    3d0c:	fa 4f       	sbci	r31, 0xFA	; 250
    3d0e:	8f e5       	ldi	r24, 0x5F	; 95
    3d10:	80 83       	st	Z, r24
    }
    //fname_temp = String(++ASCIIcount) + ".WAV";
	//setFileName(++ASCIIcount,"",".WAV");
	fname_temp[0] = ++ASCIIcount;
  }
  for (uint8_t i = arrIndex; i < maxFiles; i++) {
    3d12:	cf 5f       	subi	r28, 0xFF	; 255
    3d14:	f6 cf       	rjmp	.-20     	; 0x3d02 <_Z12getTrackListv+0x4c>
    tracks[i] = '_';
  }
}
    3d16:	df 91       	pop	r29
    3d18:	cf 91       	pop	r28
    3d1a:	08 95       	ret

00003d1c <_Z9nextTrackv>:

void nextTrack() {
  /*
     Checks tracks in order and returns the next track
  */
  fcount++;
    3d1c:	e0 91 71 05 	lds	r30, 0x0571	; 0x800571 <fcount>
    3d20:	ef 5f       	subi	r30, 0xFF	; 255
    3d22:	e0 93 71 05 	sts	0x0571, r30	; 0x800571 <fcount>
  if (tracks[fcount] == '_') {
    3d26:	f0 e0       	ldi	r31, 0x00	; 0
    3d28:	ed 58       	subi	r30, 0x8D	; 141
    3d2a:	fa 4f       	sbci	r31, 0xFA	; 250
    3d2c:	80 81       	ld	r24, Z
    3d2e:	8f 35       	cpi	r24, 0x5F	; 95
    3d30:	11 f4       	brne	.+4      	; 0x3d36 <_Z9nextTrackv+0x1a>
    fcount = 0;
    3d32:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <fcount>
  }
  //fname_temp = String(tracks[fcount]) + ".WAV";
  //setFileName(tracks[fcount],"",".WAV");
  fname_temp[0] = tracks[fcount];
    3d36:	e0 91 71 05 	lds	r30, 0x0571	; 0x800571 <fcount>
    3d3a:	f0 e0       	ldi	r31, 0x00	; 0
    3d3c:	ed 58       	subi	r30, 0x8D	; 141
    3d3e:	fa 4f       	sbci	r31, 0xFA	; 250
    3d40:	80 81       	ld	r24, Z
    3d42:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <fname_temp>
    3d46:	08 95       	ret

00003d48 <_Z13previousTrackv>:

void previousTrack() {
  /*
     Checks tracks in order and returns the previous track
  */
  if (fcount == 0) {
    3d48:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <fcount>
    3d4c:	81 11       	cpse	r24, r1
    3d4e:	06 c0       	rjmp	.+12     	; 0x3d5c <_Z13previousTrackv+0x14>
    fcount = files - 1;
    3d50:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <files>
    3d54:	81 50       	subi	r24, 0x01	; 1
    3d56:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <fcount>
    3d5a:	03 c0       	rjmp	.+6      	; 0x3d62 <_Z13previousTrackv+0x1a>
  }
  else
  {
    fcount--;
    3d5c:	81 50       	subi	r24, 0x01	; 1
    3d5e:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <fcount>
  }
  //fname_temp = String(tracks[fcount]) + ".WAV";
  //setFileName(tracks[fcount],"",".WAV");
  fname_temp[0] = tracks[fcount];
    3d62:	e0 91 71 05 	lds	r30, 0x0571	; 0x800571 <fcount>
    3d66:	f0 e0       	ldi	r31, 0x00	; 0
    3d68:	ed 58       	subi	r30, 0x8D	; 141
    3d6a:	fa 4f       	sbci	r31, 0xFA	; 250
    3d6c:	80 81       	ld	r24, Z
    3d6e:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <fname_temp>
    3d72:	08 95       	ret

00003d74 <_Z15checkDuplicatesv>:
  //secondLine(fname_temp);
  //Serial.println(count);
}

void checkDuplicates() {
    3d74:	cf 93       	push	r28
  /*This function checks if the new file to be made is existing,
    if does it generates a new name for the file*/
  char count = 65;
  //fname_temp = String(count) + ".wav";
  //setFileName(count);
  fname_temp[0] = count;
    3d76:	81 e4       	ldi	r24, 0x41	; 65
    3d78:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <fname_temp>

void checkDuplicates() {

  /*This function checks if the new file to be made is existing,
    if does it generates a new name for the file*/
  char count = 65;
    3d7c:	c1 e4       	ldi	r28, 0x41	; 65
  //fname_temp = String(count) + ".wav";
  //setFileName(count);
  fname_temp[0] = count;
  while (true) {
    if (SD.exists(fname_temp)) {
    3d7e:	67 e6       	ldi	r22, 0x67	; 103
    3d80:	75 e0       	ldi	r23, 0x05	; 5
    3d82:	8a e0       	ldi	r24, 0x0A	; 10
    3d84:	93 e0       	ldi	r25, 0x03	; 3
    3d86:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN5SDLib7SDClass6existsEPKc>
    3d8a:	88 23       	and	r24, r24
    3d8c:	21 f0       	breq	.+8      	; 0x3d96 <_Z15checkDuplicatesv+0x22>
      //fname_temp = String(++count) + ".wav";
	  //setFileName(++count);
	  fname_temp[0] = ++count;
    3d8e:	cf 5f       	subi	r28, 0xFF	; 255
    3d90:	c0 93 67 05 	sts	0x0567, r28	; 0x800567 <fname_temp>
    if does it generates a new name for the file*/
  char count = 65;
  //fname_temp = String(count) + ".wav";
  //setFileName(count);
  fname_temp[0] = count;
  while (true) {
    3d94:	f4 cf       	rjmp	.-24     	; 0x3d7e <_Z15checkDuplicatesv+0xa>
	  fname_temp[0] = ++count;
    } else {
      break;
    }
  }
}
    3d96:	cf 91       	pop	r28
    3d98:	08 95       	ret

00003d9a <_Z12makeWaveFileN5SDLib4FileE>:

//END OF FILE HANDLING FUNCTIONS

//>------------------------------< FUNCTIONS FOR WAVE FILE CREATION >---------------------------------<

void makeWaveFile(File sFile) {
    3d9a:	0f 93       	push	r16
    3d9c:	1f 93       	push	r17
    3d9e:	cf 93       	push	r28
    3da0:	df 93       	push	r29
    3da2:	cd b7       	in	r28, 0x3d	; 61
    3da4:	de b7       	in	r29, 0x3e	; 62
    3da6:	2a 97       	sbiw	r28, 0x0a	; 10
    3da8:	0f b6       	in	r0, 0x3f	; 63
    3daa:	f8 94       	cli
    3dac:	de bf       	out	0x3e, r29	; 62
    3dae:	0f be       	out	0x3f, r0	; 63
    3db0:	cd bf       	out	0x3d, r28	; 61
    3db2:	8c 01       	movw	r16, r24
  /*
     This function creates the wave header file required
     All bytes should be in little endian format, except String values
  */

  sFile.write((uint8_t*)"RIFF    WAVEfmt ", 16);//Starting bytes of the wave header file
    3db4:	40 e1       	ldi	r20, 0x10	; 16
    3db6:	50 e0       	ldi	r21, 0x00	; 0
    3db8:	61 eb       	ldi	r22, 0xB1	; 177
    3dba:	71 e0       	ldi	r23, 0x01	; 1
    3dbc:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN5SDLib4File5writeEPKhj>
  uint8_t chunk[] = {16, 0, 0, 0, 1, 0, 1, 0, lower_Byte(sampleRate), higher_Byte(sampleRate)};
    3dc0:	8a e0       	ldi	r24, 0x0A	; 10
    3dc2:	e5 e1       	ldi	r30, 0x15	; 21
    3dc4:	f1 e0       	ldi	r31, 0x01	; 1
    3dc6:	de 01       	movw	r26, r28
    3dc8:	11 96       	adiw	r26, 0x01	; 1
    3dca:	01 90       	ld	r0, Z+
    3dcc:	0d 92       	st	X+, r0
    3dce:	8a 95       	dec	r24
    3dd0:	e1 f7       	brne	.-8      	; 0x3dca <_Z12makeWaveFileN5SDLib4FileE+0x30>
     first 4 bytes: size of  previous data chunck
     next 2 bytes: Audio format (1 - PCM)
     next 2 byte: No of channels (Mono = 1, Stereo = 2) (in our case 1)
     last two are the first two bytes of sample rate
  */
  sFile.write((uint8_t*)chunk, 10);
    3dd2:	4a e0       	ldi	r20, 0x0A	; 10
    3dd4:	50 e0       	ldi	r21, 0x00	; 0
    3dd6:	be 01       	movw	r22, r28
    3dd8:	6f 5f       	subi	r22, 0xFF	; 255
    3dda:	7f 4f       	sbci	r23, 0xFF	; 255
    3ddc:	c8 01       	movw	r24, r16
    3dde:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN5SDLib4File5writeEPKhj>

  chunk[0] = 0; chunk[1] = 0; //end of sample rate bytes
    3de2:	19 82       	std	Y+1, r1	; 0x01
    3de4:	1a 82       	std	Y+2, r1	; 0x02

  //byteRate = (sampleRate/8)*monoStereo*8;
  chunk[2] = lower_Byte(byteRate); chunk[3] = higher_Byte(byteRate); chunk[4] = 0; chunk[5] = 0; // byteRate
    3de6:	80 ed       	ldi	r24, 0xD0	; 208
    3de8:	8b 83       	std	Y+3, r24	; 0x03
    3dea:	80 e3       	ldi	r24, 0x30	; 48
    3dec:	8c 83       	std	Y+4, r24	; 0x04
    3dee:	1d 82       	std	Y+5, r1	; 0x05
    3df0:	1e 82       	std	Y+6, r1	; 0x06

  //byte blockAlign = monoStereo * (bps/8);
  //this is always equal to 1 in 8bit PCM mono channel
  chunk[6] = 1; chunk[7] = 0; //BlockAlign
    3df2:	81 e0       	ldi	r24, 0x01	; 1
    3df4:	8f 83       	std	Y+7, r24	; 0x07
    3df6:	18 86       	std	Y+8, r1	; 0x08

  chunk[8] = 8; chunk[9] = 0; //bits per sample
    3df8:	88 e0       	ldi	r24, 0x08	; 8
    3dfa:	89 87       	std	Y+9, r24	; 0x09
    3dfc:	1a 86       	std	Y+10, r1	; 0x0a

  sFile.write((uint8_t*)chunk, 10);
    3dfe:	4a e0       	ldi	r20, 0x0A	; 10
    3e00:	50 e0       	ldi	r21, 0x00	; 0
    3e02:	be 01       	movw	r22, r28
    3e04:	6f 5f       	subi	r22, 0xFF	; 255
    3e06:	7f 4f       	sbci	r23, 0xFF	; 255
    3e08:	c8 01       	movw	r24, r16
    3e0a:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN5SDLib4File5writeEPKhj>
  sFile.write((uint8_t*)"data    ", 8);
    3e0e:	48 e0       	ldi	r20, 0x08	; 8
    3e10:	50 e0       	ldi	r21, 0x00	; 0
    3e12:	62 ec       	ldi	r22, 0xC2	; 194
    3e14:	71 e0       	ldi	r23, 0x01	; 1
    3e16:	c8 01       	movw	r24, r16
    3e18:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN5SDLib4File5writeEPKhj>

}
    3e1c:	2a 96       	adiw	r28, 0x0a	; 10
    3e1e:	0f b6       	in	r0, 0x3f	; 63
    3e20:	f8 94       	cli
    3e22:	de bf       	out	0x3e, r29	; 62
    3e24:	0f be       	out	0x3f, r0	; 63
    3e26:	cd bf       	out	0x3d, r28	; 61
    3e28:	df 91       	pop	r29
    3e2a:	cf 91       	pop	r28
    3e2c:	1f 91       	pop	r17
    3e2e:	0f 91       	pop	r16
    3e30:	08 95       	ret

00003e32 <_Z12finalizeWaveN5SDLib4FileE>:

void finalizeWave(File sFile) {
    3e32:	8f 92       	push	r8
    3e34:	9f 92       	push	r9
    3e36:	af 92       	push	r10
    3e38:	bf 92       	push	r11
    3e3a:	cf 92       	push	r12
    3e3c:	df 92       	push	r13
    3e3e:	ef 92       	push	r14
    3e40:	ff 92       	push	r15
    3e42:	0f 93       	push	r16
    3e44:	1f 93       	push	r17
    3e46:	cf 93       	push	r28
    3e48:	df 93       	push	r29
    3e4a:	00 d0       	rcall	.+0      	; 0x3e4c <_Z12finalizeWaveN5SDLib4FileE+0x1a>
    3e4c:	00 d0       	rcall	.+0      	; 0x3e4e <_Z12finalizeWaveN5SDLib4FileE+0x1c>
    3e4e:	cd b7       	in	r28, 0x3d	; 61
    3e50:	de b7       	in	r29, 0x3e	; 62
    3e52:	8c 01       	movw	r16, r24
  /*
     This function finalizes the wave file
  */
  unsigned long fSize = sFile.size();
    3e54:	0e 94 aa 07 	call	0xf54	; 0xf54 <_ZN5SDLib4File4sizeEv>
    3e58:	6b 01       	movw	r12, r22
    3e5a:	7c 01       	movw	r14, r24

  fSize -= 8;
    3e5c:	4b 01       	movw	r8, r22
    3e5e:	5c 01       	movw	r10, r24
    3e60:	88 e0       	ldi	r24, 0x08	; 8
    3e62:	88 1a       	sub	r8, r24
    3e64:	91 08       	sbc	r9, r1
    3e66:	a1 08       	sbc	r10, r1
    3e68:	b1 08       	sbc	r11, r1
  sFile.seek(4);
    3e6a:	44 e0       	ldi	r20, 0x04	; 4
    3e6c:	50 e0       	ldi	r21, 0x00	; 0
    3e6e:	60 e0       	ldi	r22, 0x00	; 0
    3e70:	70 e0       	ldi	r23, 0x00	; 0
    3e72:	c8 01       	movw	r24, r16
    3e74:	0e 94 8b 07 	call	0xf16	; 0xf16 <_ZN5SDLib4File4seekEm>
  uint8_t chunk2[4] = {lower_Byte(fSize), higher_Byte(fSize), fSize >> 16, fSize >> 24};
    3e78:	89 82       	std	Y+1, r8	; 0x01
    3e7a:	9a 82       	std	Y+2, r9	; 0x02
    3e7c:	ab 82       	std	Y+3, r10	; 0x03
    3e7e:	bc 82       	std	Y+4, r11	; 0x04
  sFile.write(chunk2, 4);//Writing chunksize to 5 - 8 bytes in wave file
    3e80:	44 e0       	ldi	r20, 0x04	; 4
    3e82:	50 e0       	ldi	r21, 0x00	; 0
    3e84:	be 01       	movw	r22, r28
    3e86:	6f 5f       	subi	r22, 0xFF	; 255
    3e88:	7f 4f       	sbci	r23, 0xFF	; 255
    3e8a:	c8 01       	movw	r24, r16
    3e8c:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN5SDLib4File5writeEPKhj>

  sFile.seek(40);
    3e90:	48 e2       	ldi	r20, 0x28	; 40
    3e92:	50 e0       	ldi	r21, 0x00	; 0
    3e94:	60 e0       	ldi	r22, 0x00	; 0
    3e96:	70 e0       	ldi	r23, 0x00	; 0
    3e98:	c8 01       	movw	r24, r16
    3e9a:	0e 94 8b 07 	call	0xf16	; 0xf16 <_ZN5SDLib4File4seekEm>
  fSize -= 36 ;
    3e9e:	d7 01       	movw	r26, r14
    3ea0:	c6 01       	movw	r24, r12
    3ea2:	8c 97       	sbiw	r24, 0x2c	; 44
    3ea4:	a1 09       	sbc	r26, r1
    3ea6:	b1 09       	sbc	r27, r1
  chunk2[0] = lower_Byte(fSize); chunk2[1] = higher_Byte(fSize); chunk2[2] = fSize >> 16; chunk2[3] = fSize >> 24;
    3ea8:	89 83       	std	Y+1, r24	; 0x01
    3eaa:	9a 83       	std	Y+2, r25	; 0x02
    3eac:	ab 83       	std	Y+3, r26	; 0x03
    3eae:	bc 83       	std	Y+4, r27	; 0x04
  sFile.write((uint8_t*)chunk2, 4);//Writting num of samples to 41-44 bytes in wave file
    3eb0:	44 e0       	ldi	r20, 0x04	; 4
    3eb2:	50 e0       	ldi	r21, 0x00	; 0
    3eb4:	be 01       	movw	r22, r28
    3eb6:	6f 5f       	subi	r22, 0xFF	; 255
    3eb8:	7f 4f       	sbci	r23, 0xFF	; 255
    3eba:	c8 01       	movw	r24, r16
    3ebc:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN5SDLib4File5writeEPKhj>
}
    3ec0:	0f 90       	pop	r0
    3ec2:	0f 90       	pop	r0
    3ec4:	0f 90       	pop	r0
    3ec6:	0f 90       	pop	r0
    3ec8:	df 91       	pop	r29
    3eca:	cf 91       	pop	r28
    3ecc:	1f 91       	pop	r17
    3ece:	0f 91       	pop	r16
    3ed0:	ff 90       	pop	r15
    3ed2:	ef 90       	pop	r14
    3ed4:	df 90       	pop	r13
    3ed6:	cf 90       	pop	r12
    3ed8:	bf 90       	pop	r11
    3eda:	af 90       	pop	r10
    3edc:	9f 90       	pop	r9
    3ede:	8f 90       	pop	r8
    3ee0:	08 95       	ret

00003ee2 <_Z8convolvePc>:
		convolve(tempName);
	}
}


void convolve(char inFile[]) {
    3ee2:	4f 92       	push	r4
    3ee4:	5f 92       	push	r5
    3ee6:	6f 92       	push	r6
    3ee8:	7f 92       	push	r7
    3eea:	8f 92       	push	r8
    3eec:	9f 92       	push	r9
    3eee:	af 92       	push	r10
    3ef0:	bf 92       	push	r11
    3ef2:	cf 92       	push	r12
    3ef4:	df 92       	push	r13
    3ef6:	ef 92       	push	r14
    3ef8:	ff 92       	push	r15
    3efa:	0f 93       	push	r16
    3efc:	1f 93       	push	r17
    3efe:	cf 93       	push	r28
    3f00:	df 93       	push	r29
    3f02:	cd b7       	in	r28, 0x3d	; 61
    3f04:	de b7       	in	r29, 0x3e	; 62
    3f06:	ca 5a       	subi	r28, 0xAA	; 170
    3f08:	d1 09       	sbc	r29, r1
    3f0a:	0f b6       	in	r0, 0x3f	; 63
    3f0c:	f8 94       	cli
    3f0e:	de bf       	out	0x3e, r29	; 62
    3f10:	0f be       	out	0x3f, r0	; 63
    3f12:	cd bf       	out	0x3d, r28	; 61
    3f14:	8c 01       	movw	r16, r24

	int filter[filterlen] = {0, 1, 5, -4, -48, 920, -48, -4, 5, 1, 0};
    3f16:	86 e1       	ldi	r24, 0x16	; 22
    3f18:	ef e1       	ldi	r30, 0x1F	; 31
    3f1a:	f1 e0       	ldi	r31, 0x01	; 1
    3f1c:	de 01       	movw	r26, r28
    3f1e:	d7 96       	adiw	r26, 0x37	; 55
    3f20:	01 90       	ld	r0, Z+
    3f22:	0d 92       	st	X+, r0
    3f24:	8a 95       	dec	r24
    3f26:	e1 f7       	brne	.-8      	; 0x3f20 <_Z8convolvePc+0x3e>
	uint8_t temp_buff[temp_buff_size];
	float temp = 0;
	uint8_t temp_count = 0;

	
	File out = SD.open(fname_temp, FILE_WRITE);
    3f28:	27 e1       	ldi	r18, 0x17	; 23
    3f2a:	47 e6       	ldi	r20, 0x67	; 103
    3f2c:	55 e0       	ldi	r21, 0x05	; 5
    3f2e:	6a e0       	ldi	r22, 0x0A	; 10
    3f30:	73 e0       	ldi	r23, 0x03	; 3
    3f32:	ce 01       	movw	r24, r28
    3f34:	8f 58       	subi	r24, 0x8F	; 143
    3f36:	9f 4f       	sbci	r25, 0xFF	; 255
    3f38:	0e 94 4f 0a 	call	0x149e	; 0x149e <_ZN5SDLib7SDClass4openEPKch>
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
    3f3c:	e5 96       	adiw	r28, 0x35	; 53
    3f3e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f40:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f42:	e5 97       	sbiw	r28, 0x35	; 53
    3f44:	9f 8f       	std	Y+31, r25	; 0x1f
    3f46:	8e 8f       	std	Y+30, r24	; 0x1e
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    3f48:	e9 96       	adiw	r28, 0x39	; 57
    3f4a:	8c ad       	ldd	r24, Y+60	; 0x3c
    3f4c:	9d ad       	ldd	r25, Y+61	; 0x3d
    3f4e:	ae ad       	ldd	r26, Y+62	; 0x3e
    3f50:	bf ad       	ldd	r27, Y+63	; 0x3f
    3f52:	e9 97       	sbiw	r28, 0x39	; 57
    3f54:	88 a3       	std	Y+32, r24	; 0x20
    3f56:	99 a3       	std	Y+33, r25	; 0x21
    3f58:	aa a3       	std	Y+34, r26	; 0x22
    3f5a:	bb a3       	std	Y+35, r27	; 0x23
    3f5c:	ed 96       	adiw	r28, 0x3d	; 61
    3f5e:	8c ad       	ldd	r24, Y+60	; 0x3c
    3f60:	9d ad       	ldd	r25, Y+61	; 0x3d
    3f62:	ae ad       	ldd	r26, Y+62	; 0x3e
    3f64:	bf ad       	ldd	r27, Y+63	; 0x3f
    3f66:	ed 97       	sbiw	r28, 0x3d	; 61
    3f68:	8c a3       	std	Y+36, r24	; 0x24
    3f6a:	9d a3       	std	Y+37, r25	; 0x25
    3f6c:	ae a3       	std	Y+38, r26	; 0x26
    3f6e:	bf a3       	std	Y+39, r27	; 0x27
#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT | O_APPEND)

namespace SDLib {

  class File : public Stream {
    3f70:	89 e8       	ldi	r24, 0x89	; 137
    3f72:	91 e0       	ldi	r25, 0x01	; 1
    3f74:	9d 8f       	std	Y+29, r25	; 0x1d
    3f76:	8c 8f       	std	Y+28, r24	; 0x1c
    3f78:	8d e0       	ldi	r24, 0x0D	; 13
    3f7a:	e1 e7       	ldi	r30, 0x71	; 113
    3f7c:	f0 e0       	ldi	r31, 0x00	; 0
    3f7e:	ec 0f       	add	r30, r28
    3f80:	fd 1f       	adc	r31, r29
    3f82:	3c 96       	adiw	r30, 0x0c	; 12
    3f84:	de 01       	movw	r26, r28
    3f86:	98 96       	adiw	r26, 0x28	; 40
    3f88:	01 90       	ld	r0, Z+
    3f8a:	0d 92       	st	X+, r0
    3f8c:	8a 95       	dec	r24
    3f8e:	e1 f7       	brne	.-8      	; 0x3f88 <_Z8convolvePc+0xa6>
    3f90:	c6 57       	subi	r28, 0x76	; 118
    3f92:	df 4f       	sbci	r29, 0xFF	; 255
    3f94:	88 81       	ld	r24, Y
    3f96:	99 81       	ldd	r25, Y+1	; 0x01
    3f98:	ca 58       	subi	r28, 0x8A	; 138
    3f9a:	d0 40       	sbci	r29, 0x00	; 0
    3f9c:	9e ab       	std	Y+54, r25	; 0x36
    3f9e:	8d ab       	std	Y+53, r24	; 0x35
	makeWaveFile(out);
    3fa0:	ce 01       	movw	r24, r28
    3fa2:	4c 96       	adiw	r24, 0x1c	; 28
    3fa4:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <_Z12makeWaveFileN5SDLib4FileE>
	File target = SD.open(inFile, FILE_READ);
    3fa8:	21 e0       	ldi	r18, 0x01	; 1
    3faa:	a8 01       	movw	r20, r16
    3fac:	6a e0       	ldi	r22, 0x0A	; 10
    3fae:	73 e0       	ldi	r23, 0x03	; 3
    3fb0:	ce 01       	movw	r24, r28
    3fb2:	84 57       	subi	r24, 0x74	; 116
    3fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    3fb6:	0e 94 4f 0a 	call	0x149e	; 0x149e <_ZN5SDLib7SDClass4openEPKch>

	unsigned long fSize = target.size();
    3fba:	ce 01       	movw	r24, r28
    3fbc:	84 57       	subi	r24, 0x74	; 116
    3fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    3fc0:	0e 94 aa 07 	call	0xf54	; 0xf54 <_ZN5SDLib4File4sizeEv>
    3fc4:	2b 01       	movw	r4, r22
    3fc6:	3c 01       	movw	r6, r24

	target.read(signal_in, filterlen);
    3fc8:	4b e0       	ldi	r20, 0x0B	; 11
    3fca:	50 e0       	ldi	r21, 0x00	; 0
    3fcc:	be 01       	movw	r22, r28
    3fce:	63 5b       	subi	r22, 0xB3	; 179
    3fd0:	7f 4f       	sbci	r23, 0xFF	; 255
    3fd2:	ce 01       	movw	r24, r28
    3fd4:	84 57       	subi	r24, 0x74	; 116
    3fd6:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd8:	0e 94 80 07 	call	0xf00	; 0xf00 <_ZN5SDLib4File4readEPvj>
	target.read(temp_buff, temp_buff_size);
    3fdc:	49 e1       	ldi	r20, 0x19	; 25
    3fde:	50 e0       	ldi	r21, 0x00	; 0
    3fe0:	be 01       	movw	r22, r28
    3fe2:	68 5a       	subi	r22, 0xA8	; 168
    3fe4:	7f 4f       	sbci	r23, 0xFF	; 255
    3fe6:	ce 01       	movw	r24, r28
    3fe8:	84 57       	subi	r24, 0x74	; 116
    3fea:	9f 4f       	sbci	r25, 0xFF	; 255
    3fec:	0e 94 80 07 	call	0xf00	; 0xf00 <_ZN5SDLib4File4readEPvj>

	int filter[filterlen] = {0, 1, 5, -4, -48, 920, -48, -4, 5, 1, 0};
	uint8_t signal_in[filterlen];
	uint8_t temp_buff[temp_buff_size];
	float temp = 0;
	uint8_t temp_count = 0;
    3ff0:	e1 2c       	mov	r14, r1
	unsigned long fSize = target.size();

	target.read(signal_in, filterlen);
	target.read(temp_buff, temp_buff_size);

	while (fSize) {
    3ff2:	41 14       	cp	r4, r1
    3ff4:	51 04       	cpc	r5, r1
    3ff6:	61 04       	cpc	r6, r1
    3ff8:	71 04       	cpc	r7, r1
    3ffa:	09 f4       	brne	.+2      	; 0x3ffe <_Z8convolvePc+0x11c>
    3ffc:	aa c0       	rjmp	.+340    	; 0x4152 <_Z8convolvePc+0x270>
		//t = micros();
		if (temp_count == temp_buff_size) {
    3ffe:	89 e1       	ldi	r24, 0x19	; 25
    4000:	e8 12       	cpse	r14, r24
    4002:	0b c0       	rjmp	.+22     	; 0x401a <_Z8convolvePc+0x138>
			target.read(temp_buff, temp_buff_size);
    4004:	49 e1       	ldi	r20, 0x19	; 25
    4006:	50 e0       	ldi	r21, 0x00	; 0
    4008:	be 01       	movw	r22, r28
    400a:	68 5a       	subi	r22, 0xA8	; 168
    400c:	7f 4f       	sbci	r23, 0xFF	; 255
    400e:	ce 01       	movw	r24, r28
    4010:	84 57       	subi	r24, 0x74	; 116
    4012:	9f 4f       	sbci	r25, 0xFF	; 255
    4014:	0e 94 80 07 	call	0xf00	; 0xf00 <_ZN5SDLib4File4readEPvj>
			temp_count = 0;
    4018:	e1 2c       	mov	r14, r1
		}
		temp = 127;
		//temp_ = 0;

		for (uint8_t i = 0; i < filterlen - 1; i++) {
    401a:	f1 2c       	mov	r15, r1
		//t = micros();
		if (temp_count == temp_buff_size) {
			target.read(temp_buff, temp_buff_size);
			temp_count = 0;
		}
		temp = 127;
    401c:	0f 2e       	mov	r0, r31
    401e:	81 2c       	mov	r8, r1
    4020:	91 2c       	mov	r9, r1
    4022:	fe ef       	ldi	r31, 0xFE	; 254
    4024:	af 2e       	mov	r10, r31
    4026:	f2 e4       	ldi	r31, 0x42	; 66
    4028:	bf 2e       	mov	r11, r31
    402a:	f0 2d       	mov	r31, r0
		//temp_ = 0;

		for (uint8_t i = 0; i < filterlen - 1; i++) {
    402c:	99 e0       	ldi	r25, 0x09	; 9
    402e:	9f 15       	cp	r25, r15
    4030:	08 f4       	brcc	.+2      	; 0x4034 <_Z8convolvePc+0x152>
    4032:	56 c0       	rjmp	.+172    	; 0x40e0 <_Z8convolvePc+0x1fe>
			temp += ((float(signal_in[i]) - 127) * filter[i] / 1000);//570
    4034:	0f 2d       	mov	r16, r15
    4036:	10 e0       	ldi	r17, 0x00	; 0
    4038:	0f 2e       	mov	r0, r31
    403a:	fd e4       	ldi	r31, 0x4D	; 77
    403c:	cf 2e       	mov	r12, r31
    403e:	d1 2c       	mov	r13, r1
    4040:	f0 2d       	mov	r31, r0
    4042:	cc 0e       	add	r12, r28
    4044:	dd 1e       	adc	r13, r29
    4046:	c0 0e       	add	r12, r16
    4048:	d1 1e       	adc	r13, r17
    404a:	f6 01       	movw	r30, r12
    404c:	60 81       	ld	r22, Z
    404e:	70 e0       	ldi	r23, 0x00	; 0
    4050:	80 e0       	ldi	r24, 0x00	; 0
    4052:	90 e0       	ldi	r25, 0x00	; 0
    4054:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <__floatunsisf>
    4058:	20 e0       	ldi	r18, 0x00	; 0
    405a:	30 e0       	ldi	r19, 0x00	; 0
    405c:	4e ef       	ldi	r20, 0xFE	; 254
    405e:	52 e4       	ldi	r21, 0x42	; 66
    4060:	0e 94 92 25 	call	0x4b24	; 0x4b24 <__subsf3>
    4064:	c9 55       	subi	r28, 0x59	; 89
    4066:	df 4f       	sbci	r29, 0xFF	; 255
    4068:	68 83       	st	Y, r22
    406a:	79 83       	std	Y+1, r23	; 0x01
    406c:	8a 83       	std	Y+2, r24	; 0x02
    406e:	9b 83       	std	Y+3, r25	; 0x03
    4070:	c7 5a       	subi	r28, 0xA7	; 167
    4072:	d0 40       	sbci	r29, 0x00	; 0
    4074:	f8 01       	movw	r30, r16
    4076:	ee 0f       	add	r30, r30
    4078:	ff 1f       	adc	r31, r31
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	90 e0       	ldi	r25, 0x00	; 0
    407e:	8c 0f       	add	r24, r28
    4080:	9d 1f       	adc	r25, r29
    4082:	e8 0f       	add	r30, r24
    4084:	f9 1f       	adc	r31, r25
    4086:	66 a9       	ldd	r22, Z+54	; 0x36
    4088:	77 a9       	ldd	r23, Z+55	; 0x37
    408a:	07 2e       	mov	r0, r23
    408c:	00 0c       	add	r0, r0
    408e:	88 0b       	sbc	r24, r24
    4090:	99 0b       	sbc	r25, r25
    4092:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <__floatsisf>
    4096:	c9 55       	subi	r28, 0x59	; 89
    4098:	df 4f       	sbci	r29, 0xFF	; 255
    409a:	28 81       	ld	r18, Y
    409c:	39 81       	ldd	r19, Y+1	; 0x01
    409e:	4a 81       	ldd	r20, Y+2	; 0x02
    40a0:	5b 81       	ldd	r21, Y+3	; 0x03
    40a2:	c7 5a       	subi	r28, 0xA7	; 167
    40a4:	d0 40       	sbci	r29, 0x00	; 0
    40a6:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <__mulsf3>
    40aa:	20 e0       	ldi	r18, 0x00	; 0
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	4a e7       	ldi	r20, 0x7A	; 122
    40b0:	54 e4       	ldi	r21, 0x44	; 68
    40b2:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__divsf3>
    40b6:	9b 01       	movw	r18, r22
    40b8:	ac 01       	movw	r20, r24
    40ba:	c5 01       	movw	r24, r10
    40bc:	b4 01       	movw	r22, r8
    40be:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__addsf3>
    40c2:	4b 01       	movw	r8, r22
    40c4:	5c 01       	movw	r10, r24
			signal_in[i] = signal_in[i + 1];
    40c6:	0f 5f       	subi	r16, 0xFF	; 255
    40c8:	1f 4f       	sbci	r17, 0xFF	; 255
    40ca:	ed e4       	ldi	r30, 0x4D	; 77
    40cc:	f0 e0       	ldi	r31, 0x00	; 0
    40ce:	ec 0f       	add	r30, r28
    40d0:	fd 1f       	adc	r31, r29
    40d2:	e0 0f       	add	r30, r16
    40d4:	f1 1f       	adc	r31, r17
    40d6:	80 81       	ld	r24, Z
    40d8:	f6 01       	movw	r30, r12
    40da:	80 83       	st	Z, r24
			temp_count = 0;
		}
		temp = 127;
		//temp_ = 0;

		for (uint8_t i = 0; i < filterlen - 1; i++) {
    40dc:	f3 94       	inc	r15
    40de:	a6 cf       	rjmp	.-180    	; 0x402c <_Z8convolvePc+0x14a>
			temp += ((float(signal_in[i]) - 127) * filter[i] / 1000);//570
			signal_in[i] = signal_in[i + 1];
		}
		temp += ((float(signal_in[filterlen - 1]) - 127) * filter[filterlen - 1] / 1000);//570
    40e0:	68 96       	adiw	r28, 0x18	; 24
    40e2:	6f ad       	ldd	r22, Y+63	; 0x3f
    40e4:	68 97       	sbiw	r28, 0x18	; 24
    40e6:	70 e0       	ldi	r23, 0x00	; 0
    40e8:	80 e0       	ldi	r24, 0x00	; 0
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	0e 94 a0 26 	call	0x4d40	; 0x4d40 <__floatunsisf>
    40f0:	20 e0       	ldi	r18, 0x00	; 0
    40f2:	30 e0       	ldi	r19, 0x00	; 0
    40f4:	4e ef       	ldi	r20, 0xFE	; 254
    40f6:	52 e4       	ldi	r21, 0x42	; 66
    40f8:	0e 94 92 25 	call	0x4b24	; 0x4b24 <__subsf3>
    40fc:	20 e0       	ldi	r18, 0x00	; 0
    40fe:	30 e0       	ldi	r19, 0x00	; 0
    4100:	a9 01       	movw	r20, r18
    4102:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <__mulsf3>
    4106:	20 e0       	ldi	r18, 0x00	; 0
    4108:	30 e0       	ldi	r19, 0x00	; 0
    410a:	4a e7       	ldi	r20, 0x7A	; 122
    410c:	54 e4       	ldi	r21, 0x44	; 68
    410e:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__divsf3>
    4112:	9b 01       	movw	r18, r22
    4114:	ac 01       	movw	r20, r24
    4116:	c5 01       	movw	r24, r10
    4118:	b4 01       	movw	r22, r8
    411a:	0e 94 93 25 	call	0x4b26	; 0x4b26 <__addsf3>
		signal_in[filterlen - 1] = temp_buff[temp_count++];
    411e:	11 e0       	ldi	r17, 0x01	; 1
    4120:	1e 0d       	add	r17, r14
    4122:	e8 e5       	ldi	r30, 0x58	; 88
    4124:	f0 e0       	ldi	r31, 0x00	; 0
    4126:	ec 0f       	add	r30, r28
    4128:	fd 1f       	adc	r31, r29
    412a:	ee 0d       	add	r30, r14
    412c:	f1 1d       	adc	r31, r1
    412e:	20 81       	ld	r18, Z
    4130:	68 96       	adiw	r28, 0x18	; 24
    4132:	2f af       	std	Y+63, r18	; 0x3f
    4134:	68 97       	sbiw	r28, 0x18	; 24


		//temp_ = byte(temp + 127) ;
		out.write(uint8_t(temp));
    4136:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <__fixunssfsi>
    413a:	ce 01       	movw	r24, r28
    413c:	8f 58       	subi	r24, 0x8F	; 143
    413e:	9f 4f       	sbci	r25, 0xFF	; 255
    4140:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN5SDLib4File5writeEh>
		//Serial.println(String(micros()-t));
		fSize --;
    4144:	f1 e0       	ldi	r31, 0x01	; 1
    4146:	4f 1a       	sub	r4, r31
    4148:	51 08       	sbc	r5, r1
    414a:	61 08       	sbc	r6, r1
    414c:	71 08       	sbc	r7, r1
		for (uint8_t i = 0; i < filterlen - 1; i++) {
			temp += ((float(signal_in[i]) - 127) * filter[i] / 1000);//570
			signal_in[i] = signal_in[i + 1];
		}
		temp += ((float(signal_in[filterlen - 1]) - 127) * filter[filterlen - 1] / 1000);//570
		signal_in[filterlen - 1] = temp_buff[temp_count++];
    414e:	e1 2e       	mov	r14, r17
	unsigned long fSize = target.size();

	target.read(signal_in, filterlen);
	target.read(temp_buff, temp_buff_size);

	while (fSize) {
    4150:	50 cf       	rjmp	.-352    	; 0x3ff2 <_Z8convolvePc+0x110>
    4152:	e5 96       	adiw	r28, 0x35	; 53
    4154:	8e ad       	ldd	r24, Y+62	; 0x3e
    4156:	9f ad       	ldd	r25, Y+63	; 0x3f
    4158:	e5 97       	sbiw	r28, 0x35	; 53
    415a:	9c 83       	std	Y+4, r25	; 0x04
    415c:	8b 83       	std	Y+3, r24	; 0x03
    415e:	e9 96       	adiw	r28, 0x39	; 57
    4160:	8c ad       	ldd	r24, Y+60	; 0x3c
    4162:	9d ad       	ldd	r25, Y+61	; 0x3d
    4164:	ae ad       	ldd	r26, Y+62	; 0x3e
    4166:	bf ad       	ldd	r27, Y+63	; 0x3f
    4168:	e9 97       	sbiw	r28, 0x39	; 57
    416a:	8d 83       	std	Y+5, r24	; 0x05
    416c:	9e 83       	std	Y+6, r25	; 0x06
    416e:	af 83       	std	Y+7, r26	; 0x07
    4170:	b8 87       	std	Y+8, r27	; 0x08
    4172:	ed 96       	adiw	r28, 0x3d	; 61
    4174:	8c ad       	ldd	r24, Y+60	; 0x3c
    4176:	9d ad       	ldd	r25, Y+61	; 0x3d
    4178:	ae ad       	ldd	r26, Y+62	; 0x3e
    417a:	bf ad       	ldd	r27, Y+63	; 0x3f
    417c:	ed 97       	sbiw	r28, 0x3d	; 61
    417e:	89 87       	std	Y+9, r24	; 0x09
    4180:	9a 87       	std	Y+10, r25	; 0x0a
    4182:	ab 87       	std	Y+11, r26	; 0x0b
    4184:	bc 87       	std	Y+12, r27	; 0x0c
    4186:	89 e8       	ldi	r24, 0x89	; 137
    4188:	91 e0       	ldi	r25, 0x01	; 1
    418a:	9a 83       	std	Y+2, r25	; 0x02
    418c:	89 83       	std	Y+1, r24	; 0x01
    418e:	8d e0       	ldi	r24, 0x0D	; 13
    4190:	e1 e7       	ldi	r30, 0x71	; 113
    4192:	f0 e0       	ldi	r31, 0x00	; 0
    4194:	ec 0f       	add	r30, r28
    4196:	fd 1f       	adc	r31, r29
    4198:	3c 96       	adiw	r30, 0x0c	; 12
    419a:	de 01       	movw	r26, r28
    419c:	1d 96       	adiw	r26, 0x0d	; 13
    419e:	01 90       	ld	r0, Z+
    41a0:	0d 92       	st	X+, r0
    41a2:	8a 95       	dec	r24
    41a4:	e1 f7       	brne	.-8      	; 0x419e <_Z8convolvePc+0x2bc>
    41a6:	c6 57       	subi	r28, 0x76	; 118
    41a8:	df 4f       	sbci	r29, 0xFF	; 255
    41aa:	88 81       	ld	r24, Y
    41ac:	99 81       	ldd	r25, Y+1	; 0x01
    41ae:	ca 58       	subi	r28, 0x8A	; 138
    41b0:	d0 40       	sbci	r29, 0x00	; 0
    41b2:	9b 8f       	std	Y+27, r25	; 0x1b
    41b4:	8a 8f       	std	Y+26, r24	; 0x1a
		//Serial.println(String(micros()-t));
		fSize --;


	}
	finalizeWave(out);
    41b6:	ce 01       	movw	r24, r28
    41b8:	01 96       	adiw	r24, 0x01	; 1
    41ba:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <_Z12finalizeWaveN5SDLib4FileE>
	out.close();
    41be:	ce 01       	movw	r24, r28
    41c0:	8f 58       	subi	r24, 0x8F	; 143
    41c2:	9f 4f       	sbci	r25, 0xFF	; 255
    41c4:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <_ZN5SDLib4File5closeEv>
	target.close();
    41c8:	ce 01       	movw	r24, r28
    41ca:	84 57       	subi	r24, 0x74	; 116
    41cc:	9f 4f       	sbci	r25, 0xFF	; 255
    41ce:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <_ZN5SDLib4File5closeEv>
	//Serial.println("stop");
}
    41d2:	c6 55       	subi	r28, 0x56	; 86
    41d4:	df 4f       	sbci	r29, 0xFF	; 255
    41d6:	0f b6       	in	r0, 0x3f	; 63
    41d8:	f8 94       	cli
    41da:	de bf       	out	0x3e, r29	; 62
    41dc:	0f be       	out	0x3f, r0	; 63
    41de:	cd bf       	out	0x3d, r28	; 61
    41e0:	df 91       	pop	r29
    41e2:	cf 91       	pop	r28
    41e4:	1f 91       	pop	r17
    41e6:	0f 91       	pop	r16
    41e8:	ff 90       	pop	r15
    41ea:	ef 90       	pop	r14
    41ec:	df 90       	pop	r13
    41ee:	cf 90       	pop	r12
    41f0:	bf 90       	pop	r11
    41f2:	af 90       	pop	r10
    41f4:	9f 90       	pop	r9
    41f6:	8f 90       	pop	r8
    41f8:	7f 90       	pop	r7
    41fa:	6f 90       	pop	r6
    41fc:	5f 90       	pop	r5
    41fe:	4f 90       	pop	r4
    4200:	08 95       	ret

00004202 <_Z13sig_freqShiftv>:
}
//END OF WAVE FILE CREATE FUNCTIONS


//>--------------------------------------< FREQUENCY SHIFTING >--------------------------------------<
void sig_freqShift() {
    4202:	ef 92       	push	r14
    4204:	ff 92       	push	r15
    4206:	0f 93       	push	r16
    4208:	1f 93       	push	r17
    420a:	cf 93       	push	r28
    420c:	df 93       	push	r29
    420e:	cd b7       	in	r28, 0x3d	; 61
    4210:	de b7       	in	r29, 0x3e	; 62
    4212:	c7 58       	subi	r28, 0x87	; 135
    4214:	d1 09       	sbc	r29, r1
    4216:	0f b6       	in	r0, 0x3f	; 63
    4218:	f8 94       	cli
    421a:	de bf       	out	0x3e, r29	; 62
    421c:	0f be       	out	0x3f, r0	; 63
    421e:	cd bf       	out	0x3d, r28	; 61
	char tempName[6] = {'S',tracks[fcount],'.','B','I','N'};
    4220:	be 01       	movw	r22, r28
    4222:	6f 5f       	subi	r22, 0xFF	; 255
    4224:	7f 4f       	sbci	r23, 0xFF	; 255
    4226:	86 e0       	ldi	r24, 0x06	; 6
    4228:	fb 01       	movw	r30, r22
    422a:	11 92       	st	Z+, r1
    422c:	8a 95       	dec	r24
    422e:	e9 f7       	brne	.-6      	; 0x422a <_Z13sig_freqShiftv+0x28>
    4230:	83 e5       	ldi	r24, 0x53	; 83
    4232:	89 83       	std	Y+1, r24	; 0x01
    4234:	8e e2       	ldi	r24, 0x2E	; 46
    4236:	8b 83       	std	Y+3, r24	; 0x03
    4238:	82 e4       	ldi	r24, 0x42	; 66
    423a:	8c 83       	std	Y+4, r24	; 0x04
    423c:	89 e4       	ldi	r24, 0x49	; 73
    423e:	8d 83       	std	Y+5, r24	; 0x05
    4240:	8e e4       	ldi	r24, 0x4E	; 78
    4242:	8e 83       	std	Y+6, r24	; 0x06
    4244:	e0 91 71 05 	lds	r30, 0x0571	; 0x800571 <fcount>
    4248:	f0 e0       	ldi	r31, 0x00	; 0
    424a:	ed 58       	subi	r30, 0x8D	; 141
    424c:	fa 4f       	sbci	r31, 0xFA	; 250
    424e:	80 81       	ld	r24, Z
    4250:	8a 83       	std	Y+2, r24	; 0x02
//"S" + String(fname_temp[0]) + ".bin"
	if (!SD.exists(tempName)) {
    4252:	8a e0       	ldi	r24, 0x0A	; 10
    4254:	93 e0       	ldi	r25, 0x03	; 3
    4256:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN5SDLib7SDClass6existsEPKc>
    425a:	81 11       	cpse	r24, r1
    425c:	7a c0       	rjmp	.+244    	; 0x4352 <_Z13sig_freqShiftv+0x150>

		secondLine("Processing");
    425e:	8b ec       	ldi	r24, 0xCB	; 203
    4260:	91 e0       	ldi	r25, 0x01	; 1
    4262:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <_Z10secondLinePKc>
		File out = SD.open(tempName, FILE_WRITE);
    4266:	27 e1       	ldi	r18, 0x17	; 23
    4268:	ae 01       	movw	r20, r28
    426a:	4f 5f       	subi	r20, 0xFF	; 255
    426c:	5f 4f       	sbci	r21, 0xFF	; 255
    426e:	6a e0       	ldi	r22, 0x0A	; 10
    4270:	73 e0       	ldi	r23, 0x03	; 3
    4272:	ce 01       	movw	r24, r28
    4274:	8c 5a       	subi	r24, 0xAC	; 172
    4276:	9f 4f       	sbci	r25, 0xFF	; 255
    4278:	0e 94 4f 0a 	call	0x149e	; 0x149e <_ZN5SDLib7SDClass4openEPKch>
		File target = SD.open(fname_temp, FILE_READ);
    427c:	21 e0       	ldi	r18, 0x01	; 1
    427e:	47 e6       	ldi	r20, 0x67	; 103
    4280:	55 e0       	ldi	r21, 0x05	; 5
    4282:	6a e0       	ldi	r22, 0x0A	; 10
    4284:	73 e0       	ldi	r23, 0x03	; 3
    4286:	ce 01       	movw	r24, r28
    4288:	c9 96       	adiw	r24, 0x39	; 57
    428a:	0e 94 4f 0a 	call	0x149e	; 0x149e <_ZN5SDLib7SDClass4openEPKch>
		target.seek(44);
    428e:	4c e2       	ldi	r20, 0x2C	; 44
    4290:	50 e0       	ldi	r21, 0x00	; 0
    4292:	60 e0       	ldi	r22, 0x00	; 0
    4294:	70 e0       	ldi	r23, 0x00	; 0
    4296:	ce 01       	movw	r24, r28
    4298:	c9 96       	adiw	r24, 0x39	; 57
    429a:	0e 94 8b 07 	call	0xf16	; 0xf16 <_ZN5SDLib4File4seekEm>

		uint8_t buff[bufflen];
		int cosWave12_5[25] = {10, 10, 9, 7, 5, 3, 1, -2, -4, -6, -8, -9, -10, -10, -9, -8, -6, -4, -2, 1, 3, 5, 7, 9, 10};
    429e:	82 e3       	ldi	r24, 0x32	; 50
    42a0:	e5 e3       	ldi	r30, 0x35	; 53
    42a2:	f1 e0       	ldi	r31, 0x01	; 1
    42a4:	de 01       	movw	r26, r28
    42a6:	17 96       	adiw	r26, 0x07	; 7
    42a8:	01 90       	ld	r0, Z+
    42aa:	0d 92       	st	X+, r0
    42ac:	8a 95       	dec	r24
    42ae:	e1 f7       	brne	.-8      	; 0x42a8 <_Z13sig_freqShiftv+0xa6>
		uint8_t count = 0;
		uint8_t buffCount = 0;
    42b0:	e1 2c       	mov	r14, r1
		File target = SD.open(fname_temp, FILE_READ);
		target.seek(44);

		uint8_t buff[bufflen];
		int cosWave12_5[25] = {10, 10, 9, 7, 5, 3, 1, -2, -4, -6, -8, -9, -10, -10, -9, -8, -6, -4, -2, 1, 3, 5, 7, 9, 10};
		uint8_t count = 0;
    42b2:	10 e0       	ldi	r17, 0x00	; 0
    42b4:	01 c0       	rjmp	.+2      	; 0x42b8 <_Z13sig_freqShiftv+0xb6>
			if (count == 25 )
			{
				count = 0;
			}
			if (buffCount == bufflen) {
				buffCount = 0;
    42b6:	e0 2e       	mov	r14, r16
		uint8_t buff[bufflen];
		int cosWave12_5[25] = {10, 10, 9, 7, 5, 3, 1, -2, -4, -6, -8, -9, -10, -10, -9, -8, -6, -4, -2, 1, 3, 5, 7, 9, 10};
		uint8_t count = 0;
		uint8_t buffCount = 0;

		while (target.available()) {
    42b8:	ce 01       	movw	r24, r28
    42ba:	c9 96       	adiw	r24, 0x39	; 57
    42bc:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZN5SDLib4File9availableEv>
    42c0:	89 2b       	or	r24, r25
    42c2:	f1 f1       	breq	.+124    	; 0x4340 <_Z13sig_freqShiftv+0x13e>

			buff[buffCount++] = (uint8_t)((int)(target.read() - 127) * cosWave12_5[count++] / 10 + 127);
    42c4:	01 e0       	ldi	r16, 0x01	; 1
    42c6:	0e 0d       	add	r16, r14
    42c8:	f1 2c       	mov	r15, r1
    42ca:	ce 01       	movw	r24, r28
    42cc:	c9 96       	adiw	r24, 0x39	; 57
    42ce:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN5SDLib4File4readEv>
    42d2:	bc 01       	movw	r22, r24
    42d4:	6f 57       	subi	r22, 0x7F	; 127
    42d6:	71 09       	sbc	r23, r1
    42d8:	21 e0       	ldi	r18, 0x01	; 1
    42da:	21 0f       	add	r18, r17
    42dc:	e1 2f       	mov	r30, r17
    42de:	f0 e0       	ldi	r31, 0x00	; 0
    42e0:	ee 0f       	add	r30, r30
    42e2:	ff 1f       	adc	r31, r31
    42e4:	81 e0       	ldi	r24, 0x01	; 1
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	8c 0f       	add	r24, r28
    42ea:	9d 1f       	adc	r25, r29
    42ec:	e8 0f       	add	r30, r24
    42ee:	f9 1f       	adc	r31, r25
    42f0:	46 81       	ldd	r20, Z+6	; 0x06
    42f2:	57 81       	ldd	r21, Z+7	; 0x07
    42f4:	64 9f       	mul	r22, r20
    42f6:	c0 01       	movw	r24, r0
    42f8:	65 9f       	mul	r22, r21
    42fa:	90 0d       	add	r25, r0
    42fc:	74 9f       	mul	r23, r20
    42fe:	90 0d       	add	r25, r0
    4300:	11 24       	eor	r1, r1
    4302:	6a e0       	ldi	r22, 0x0A	; 10
    4304:	70 e0       	ldi	r23, 0x00	; 0
    4306:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <__divmodhi4>
    430a:	ef e6       	ldi	r30, 0x6F	; 111
    430c:	f0 e0       	ldi	r31, 0x00	; 0
    430e:	ec 0f       	add	r30, r28
    4310:	fd 1f       	adc	r31, r29
    4312:	ee 0d       	add	r30, r14
    4314:	ff 1d       	adc	r31, r15
    4316:	61 58       	subi	r22, 0x81	; 129
    4318:	60 83       	st	Z, r22
			if (count == 25 )
    431a:	29 31       	cpi	r18, 0x19	; 25
    431c:	11 f0       	breq	.+4      	; 0x4322 <_Z13sig_freqShiftv+0x120>
		uint8_t count = 0;
		uint8_t buffCount = 0;

		while (target.available()) {

			buff[buffCount++] = (uint8_t)((int)(target.read() - 127) * cosWave12_5[count++] / 10 + 127);
    431e:	12 2f       	mov	r17, r18
    4320:	01 c0       	rjmp	.+2      	; 0x4324 <_Z13sig_freqShiftv+0x122>
			if (count == 25 )
			{
				count = 0;
    4322:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (buffCount == bufflen) {
    4324:	09 31       	cpi	r16, 0x19	; 25
    4326:	39 f6       	brne	.-114    	; 0x42b6 <_Z13sig_freqShiftv+0xb4>
				buffCount = 0;
				out.write((uint8_t*)buff, bufflen);
    4328:	49 e1       	ldi	r20, 0x19	; 25
    432a:	50 e0       	ldi	r21, 0x00	; 0
    432c:	be 01       	movw	r22, r28
    432e:	61 59       	subi	r22, 0x91	; 145
    4330:	7f 4f       	sbci	r23, 0xFF	; 255
    4332:	ce 01       	movw	r24, r28
    4334:	8c 5a       	subi	r24, 0xAC	; 172
    4336:	9f 4f       	sbci	r25, 0xFF	; 255
    4338:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN5SDLib4File5writeEPKhj>
			if (count == 25 )
			{
				count = 0;
			}
			if (buffCount == bufflen) {
				buffCount = 0;
    433c:	00 e0       	ldi	r16, 0x00	; 0
    433e:	bb cf       	rjmp	.-138    	; 0x42b6 <_Z13sig_freqShiftv+0xb4>
				out.write((uint8_t*)buff, bufflen);
			}

		}

		out.close();
    4340:	ce 01       	movw	r24, r28
    4342:	8c 5a       	subi	r24, 0xAC	; 172
    4344:	9f 4f       	sbci	r25, 0xFF	; 255
    4346:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <_ZN5SDLib4File5closeEv>
		target.close();
    434a:	ce 01       	movw	r24, r28
    434c:	c9 96       	adiw	r24, 0x39	; 57
    434e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <_ZN5SDLib4File5closeEv>
	}

	fname_temp[0] = 'S';fname_temp[1] = 'H';fname_temp[2] = 'I';fname_temp[3] = 'F';fname_temp[4] = 'T';
    4352:	e7 e6       	ldi	r30, 0x67	; 103
    4354:	f5 e0       	ldi	r31, 0x05	; 5
    4356:	83 e5       	ldi	r24, 0x53	; 83
    4358:	80 83       	st	Z, r24
    435a:	88 e4       	ldi	r24, 0x48	; 72
    435c:	81 83       	std	Z+1, r24	; 0x01
    435e:	89 e4       	ldi	r24, 0x49	; 73
    4360:	82 83       	std	Z+2, r24	; 0x02
    4362:	86 e4       	ldi	r24, 0x46	; 70
    4364:	83 83       	std	Z+3, r24	; 0x03
    4366:	84 e5       	ldi	r24, 0x54	; 84
    4368:	84 83       	std	Z+4, r24	; 0x04
	fname_temp[5] = tracks[fcount];fname_temp[6] = '.';fname_temp[7] = 'W';fname_temp[8] = 'A';fname_temp[9] = 'V';
    436a:	a0 91 71 05 	lds	r26, 0x0571	; 0x800571 <fcount>
    436e:	b0 e0       	ldi	r27, 0x00	; 0
    4370:	ad 58       	subi	r26, 0x8D	; 141
    4372:	ba 4f       	sbci	r27, 0xFA	; 250
    4374:	8c 91       	ld	r24, X
    4376:	85 83       	std	Z+5, r24	; 0x05
    4378:	8e e2       	ldi	r24, 0x2E	; 46
    437a:	86 83       	std	Z+6, r24	; 0x06
    437c:	87 e5       	ldi	r24, 0x57	; 87
    437e:	87 83       	std	Z+7, r24	; 0x07
    4380:	81 e4       	ldi	r24, 0x41	; 65
    4382:	80 87       	std	Z+8, r24	; 0x08
    4384:	86 e5       	ldi	r24, 0x56	; 86
    4386:	81 87       	std	Z+9, r24	; 0x09
	
	if (!SD.exists(fname_temp)) {
    4388:	bf 01       	movw	r22, r30
    438a:	8a e0       	ldi	r24, 0x0A	; 10
    438c:	93 e0       	ldi	r25, 0x03	; 3
    438e:	0e 94 66 0b 	call	0x16cc	; 0x16cc <_ZN5SDLib7SDClass6existsEPKc>
    4392:	81 11       	cpse	r24, r1
    4394:	04 c0       	rjmp	.+8      	; 0x439e <_Z13sig_freqShiftv+0x19c>
		convolve(tempName);
    4396:	ce 01       	movw	r24, r28
    4398:	01 96       	adiw	r24, 0x01	; 1
    439a:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <_Z8convolvePc>
	}
}
    439e:	c9 57       	subi	r28, 0x79	; 121
    43a0:	df 4f       	sbci	r29, 0xFF	; 255
    43a2:	0f b6       	in	r0, 0x3f	; 63
    43a4:	f8 94       	cli
    43a6:	de bf       	out	0x3e, r29	; 62
    43a8:	0f be       	out	0x3f, r0	; 63
    43aa:	cd bf       	out	0x3d, r28	; 61
    43ac:	df 91       	pop	r29
    43ae:	cf 91       	pop	r28
    43b0:	1f 91       	pop	r17
    43b2:	0f 91       	pop	r16
    43b4:	ff 90       	pop	r15
    43b6:	ef 90       	pop	r14
    43b8:	08 95       	ret

000043ba <_Z9analog_ini>:


//>--------------------------------------< IO FUNCTIONS >--------------------------------------<
uint8_t analog_in(int inputPin = 0000){
		
	ADMUX |= inputPin;
    43ba:	ec e7       	ldi	r30, 0x7C	; 124
    43bc:	f0 e0       	ldi	r31, 0x00	; 0
    43be:	90 81       	ld	r25, Z
    43c0:	89 2b       	or	r24, r25
    43c2:	80 83       	st	Z, r24
	
	ADCSRA = ADCSRA | (1 << ADSC);
    43c4:	ea e7       	ldi	r30, 0x7A	; 122
    43c6:	f0 e0       	ldi	r31, 0x00	; 0
    43c8:	80 81       	ld	r24, Z
    43ca:	80 64       	ori	r24, 0x40	; 64
    43cc:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC));
    43ce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    43d2:	86 fd       	sbrc	r24, 6
    43d4:	fc cf       	rjmp	.-8      	; 0x43ce <_Z9analog_ini+0x14>
	
	ADMUX &= 0b11110000;
    43d6:	ec e7       	ldi	r30, 0x7C	; 124
    43d8:	f0 e0       	ldi	r31, 0x00	; 0
    43da:	80 81       	ld	r24, Z
    43dc:	80 7f       	andi	r24, 0xF0	; 240
    43de:	80 83       	st	Z, r24
	
	return ADCH;
    43e0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
    43e4:	08 95       	ret

000043e6 <_Z6recordv>:

//END OF LCD DISPLAY FUNCTIONS

//>-----------------------------< RECORD AND PLAY FUNCTIONS >----------------------------------<

void record() {
    43e6:	1f 93       	push	r17
    43e8:	cf 93       	push	r28
    43ea:	df 93       	push	r29
    43ec:	cd b7       	in	r28, 0x3d	; 61
    43ee:	de b7       	in	r29, 0x3e	; 62
    43f0:	c1 55       	subi	r28, 0x51	; 81
    43f2:	d1 09       	sbc	r29, r1
    43f4:	0f b6       	in	r0, 0x3f	; 63
    43f6:	f8 94       	cli
    43f8:	de bf       	out	0x3e, r29	; 62
    43fa:	0f be       	out	0x3f, r0	; 63
    43fc:	cd bf       	out	0x3d, r28	; 61
	 /*Used to record the data got from input into a file*/
	  checkDuplicates();
    43fe:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <_Z15checkDuplicatesv>
	  File test_File = SD.open(fname_temp, FILE_WRITE);
    4402:	27 e1       	ldi	r18, 0x17	; 23
    4404:	47 e6       	ldi	r20, 0x67	; 103
    4406:	55 e0       	ldi	r21, 0x05	; 5
    4408:	6a e0       	ldi	r22, 0x0A	; 10
    440a:	73 e0       	ldi	r23, 0x03	; 3
    440c:	ce 01       	movw	r24, r28
    440e:	c7 96       	adiw	r24, 0x37	; 55
    4410:	0e 94 4f 0a 	call	0x149e	; 0x149e <_ZN5SDLib7SDClass4openEPKch>

	  if (!test_File) {
    4414:	ce 01       	movw	r24, r28
    4416:	c7 96       	adiw	r24, 0x37	; 55
    4418:	0e 94 fc 07 	call	0xff8	; 0xff8 <_ZN5SDLib4FilecvbEv>
    441c:	81 11       	cpse	r24, r1
    441e:	0e c0       	rjmp	.+28     	; 0x443c <_Z6recordv+0x56>
		clrDisplay("Error");
    4420:	86 ed       	ldi	r24, 0xD6	; 214
    4422:	91 e0       	ldi	r25, 0x01	; 1
    4424:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_Z10clrDisplayPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4428:	2f ef       	ldi	r18, 0xFF	; 255
    442a:	83 ed       	ldi	r24, 0xD3	; 211
    442c:	90 e3       	ldi	r25, 0x30	; 48
    442e:	21 50       	subi	r18, 0x01	; 1
    4430:	80 40       	sbci	r24, 0x00	; 0
    4432:	90 40       	sbci	r25, 0x00	; 0
    4434:	e1 f7       	brne	.-8      	; 0x442e <_Z6recordv+0x48>
    4436:	00 c0       	rjmp	.+0      	; 0x4438 <_Z6recordv+0x52>
    4438:	00 00       	nop
    443a:	80 c0       	rjmp	.+256    	; 0x453c <_Z6recordv+0x156>
		_delay_ms(1000);
	  }
	  else {
		clrDisplay("Recording");
    443c:	8c ed       	ldi	r24, 0xDC	; 220
    443e:	91 e0       	ldi	r25, 0x01	; 1
    4440:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_Z10clrDisplayPKc>
    4444:	89 ad       	ldd	r24, Y+57	; 0x39
    4446:	9a ad       	ldd	r25, Y+58	; 0x3a
    4448:	9f 8f       	std	Y+31, r25	; 0x1f
    444a:	8e 8f       	std	Y+30, r24	; 0x1e
    444c:	8b ad       	ldd	r24, Y+59	; 0x3b
    444e:	9c ad       	ldd	r25, Y+60	; 0x3c
    4450:	ad ad       	ldd	r26, Y+61	; 0x3d
    4452:	be ad       	ldd	r27, Y+62	; 0x3e
    4454:	88 a3       	std	Y+32, r24	; 0x20
    4456:	99 a3       	std	Y+33, r25	; 0x21
    4458:	aa a3       	std	Y+34, r26	; 0x22
    445a:	bb a3       	std	Y+35, r27	; 0x23
    445c:	23 96       	adiw	r28, 0x03	; 3
    445e:	8c ad       	ldd	r24, Y+60	; 0x3c
    4460:	9d ad       	ldd	r25, Y+61	; 0x3d
    4462:	ae ad       	ldd	r26, Y+62	; 0x3e
    4464:	bf ad       	ldd	r27, Y+63	; 0x3f
    4466:	23 97       	sbiw	r28, 0x03	; 3
    4468:	8c a3       	std	Y+36, r24	; 0x24
    446a:	9d a3       	std	Y+37, r25	; 0x25
    446c:	ae a3       	std	Y+38, r26	; 0x26
    446e:	bf a3       	std	Y+39, r27	; 0x27
    4470:	89 e8       	ldi	r24, 0x89	; 137
    4472:	91 e0       	ldi	r25, 0x01	; 1
    4474:	9d 8f       	std	Y+29, r25	; 0x1d
    4476:	8c 8f       	std	Y+28, r24	; 0x1c
    4478:	8d e0       	ldi	r24, 0x0D	; 13
    447a:	fe 01       	movw	r30, r28
    447c:	ed 5b       	subi	r30, 0xBD	; 189
    447e:	ff 4f       	sbci	r31, 0xFF	; 255
    4480:	de 01       	movw	r26, r28
    4482:	98 96       	adiw	r26, 0x28	; 40
    4484:	01 90       	ld	r0, Z+
    4486:	0d 92       	st	X+, r0
    4488:	8a 95       	dec	r24
    448a:	e1 f7       	brne	.-8      	; 0x4484 <_Z6recordv+0x9e>
    448c:	62 96       	adiw	r28, 0x12	; 18
    448e:	8e ad       	ldd	r24, Y+62	; 0x3e
    4490:	9f ad       	ldd	r25, Y+63	; 0x3f
    4492:	62 97       	sbiw	r28, 0x12	; 18
    4494:	9e ab       	std	Y+54, r25	; 0x36
    4496:	8d ab       	std	Y+53, r24	; 0x35
		makeWaveFile(test_File);
    4498:	ce 01       	movw	r24, r28
    449a:	4c 96       	adiw	r24, 0x1c	; 28
    449c:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <_Z12makeWaveFileN5SDLib4FileE>
		uint8_t pot_Read;

		while (true) {
		  //t = micros();
		
		  pot_Read = analog_in(mic);
    44a0:	80 e0       	ldi	r24, 0x00	; 0
    44a2:	90 e0       	ldi	r25, 0x00	; 0
    44a4:	0e 94 dd 21 	call	0x43ba	; 0x43ba <_Z9analog_ini>
    44a8:	18 2f       	mov	r17, r24
		
		  char key = keyInput();
    44aa:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <_Z8keyInputv>

		  if (key && key == 's') {
    44ae:	83 37       	cpi	r24, 0x73	; 115
    44b0:	51 f0       	breq	.+20     	; 0x44c6 <_Z6recordv+0xe0>
			break;
		  }

		  test_File.write(pot_Read);
    44b2:	61 2f       	mov	r22, r17
    44b4:	ce 01       	movw	r24, r28
    44b6:	c7 96       	adiw	r24, 0x37	; 55
    44b8:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN5SDLib4File5writeEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    44bc:	25 e5       	ldi	r18, 0x55	; 85
    44be:	2a 95       	dec	r18
    44c0:	f1 f7       	brne	.-4      	; 0x44be <_Z6recordv+0xd8>
    44c2:	00 00       	nop
    44c4:	ed cf       	rjmp	.-38     	; 0x44a0 <_Z6recordv+0xba>
    44c6:	89 ad       	ldd	r24, Y+57	; 0x39
    44c8:	9a ad       	ldd	r25, Y+58	; 0x3a
    44ca:	9c 83       	std	Y+4, r25	; 0x04
    44cc:	8b 83       	std	Y+3, r24	; 0x03
    44ce:	8b ad       	ldd	r24, Y+59	; 0x3b
    44d0:	9c ad       	ldd	r25, Y+60	; 0x3c
    44d2:	ad ad       	ldd	r26, Y+61	; 0x3d
    44d4:	be ad       	ldd	r27, Y+62	; 0x3e
    44d6:	8d 83       	std	Y+5, r24	; 0x05
    44d8:	9e 83       	std	Y+6, r25	; 0x06
    44da:	af 83       	std	Y+7, r26	; 0x07
    44dc:	b8 87       	std	Y+8, r27	; 0x08
    44de:	23 96       	adiw	r28, 0x03	; 3
    44e0:	8c ad       	ldd	r24, Y+60	; 0x3c
    44e2:	9d ad       	ldd	r25, Y+61	; 0x3d
    44e4:	ae ad       	ldd	r26, Y+62	; 0x3e
    44e6:	bf ad       	ldd	r27, Y+63	; 0x3f
    44e8:	23 97       	sbiw	r28, 0x03	; 3
    44ea:	89 87       	std	Y+9, r24	; 0x09
    44ec:	9a 87       	std	Y+10, r25	; 0x0a
    44ee:	ab 87       	std	Y+11, r26	; 0x0b
    44f0:	bc 87       	std	Y+12, r27	; 0x0c
    44f2:	89 e8       	ldi	r24, 0x89	; 137
    44f4:	91 e0       	ldi	r25, 0x01	; 1
    44f6:	9a 83       	std	Y+2, r25	; 0x02
    44f8:	89 83       	std	Y+1, r24	; 0x01
    44fa:	8d e0       	ldi	r24, 0x0D	; 13
    44fc:	fe 01       	movw	r30, r28
    44fe:	ed 5b       	subi	r30, 0xBD	; 189
    4500:	ff 4f       	sbci	r31, 0xFF	; 255
    4502:	de 01       	movw	r26, r28
    4504:	1d 96       	adiw	r26, 0x0d	; 13
    4506:	01 90       	ld	r0, Z+
    4508:	0d 92       	st	X+, r0
    450a:	8a 95       	dec	r24
    450c:	e1 f7       	brne	.-8      	; 0x4506 <_Z6recordv+0x120>
    450e:	62 96       	adiw	r28, 0x12	; 18
    4510:	8e ad       	ldd	r24, Y+62	; 0x3e
    4512:	9f ad       	ldd	r25, Y+63	; 0x3f
    4514:	62 97       	sbiw	r28, 0x12	; 18
    4516:	9b 8f       	std	Y+27, r25	; 0x1b
    4518:	8a 8f       	std	Y+26, r24	; 0x1a
		  _delay_us(16);
		  //t = micros() - t;
		  //clrDisplay(String(t));
		  //_delay_ms(1000);
		}
		finalizeWave(test_File);
    451a:	ce 01       	movw	r24, r28
    451c:	01 96       	adiw	r24, 0x01	; 1
    451e:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <_Z12finalizeWaveN5SDLib4FileE>
		clrDisplay("Saved");
    4522:	86 ee       	ldi	r24, 0xE6	; 230
    4524:	91 e0       	ldi	r25, 0x01	; 1
    4526:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_Z10clrDisplayPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    452a:	8f ef       	ldi	r24, 0xFF	; 255
    452c:	93 ed       	ldi	r25, 0xD3	; 211
    452e:	20 e3       	ldi	r18, 0x30	; 48
    4530:	81 50       	subi	r24, 0x01	; 1
    4532:	90 40       	sbci	r25, 0x00	; 0
    4534:	20 40       	sbci	r18, 0x00	; 0
    4536:	e1 f7       	brne	.-8      	; 0x4530 <_Z6recordv+0x14a>
    4538:	00 c0       	rjmp	.+0      	; 0x453a <_Z6recordv+0x154>
    453a:	00 00       	nop
		_delay_ms(1000);
	  }
	  test_File.close();
    453c:	ce 01       	movw	r24, r28
    453e:	c7 96       	adiw	r24, 0x37	; 55
    4540:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <_ZN5SDLib4File5closeEv>
}
    4544:	cf 5a       	subi	r28, 0xAF	; 175
    4546:	df 4f       	sbci	r29, 0xFF	; 255
    4548:	0f b6       	in	r0, 0x3f	; 63
    454a:	f8 94       	cli
    454c:	de bf       	out	0x3e, r29	; 62
    454e:	0f be       	out	0x3f, r0	; 63
    4550:	cd bf       	out	0x3d, r28	; 61
    4552:	df 91       	pop	r29
    4554:	cf 91       	pop	r28
    4556:	1f 91       	pop	r17
    4558:	08 95       	ret

0000455a <_Z12checkChangesv>:

    _delay_ms(1000);
  }
}

void checkChanges() {
    455a:	cf 93       	push	r28
  /*
     This function checks for frequency change requirements
  */

	uint8_t fsc = analog_in(ScalePOT);
    455c:	83 e0       	ldi	r24, 0x03	; 3
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	0e 94 dd 21 	call	0x43ba	; 0x43ba <_Z9analog_ini>
    4564:	c8 2f       	mov	r28, r24
	uint8_t fshift = analog_in(shiftEnhancePOT);
    4566:	81 e0       	ldi	r24, 0x01	; 1
    4568:	90 e0       	ldi	r25, 0x00	; 0
    456a:	0e 94 dd 21 	call	0x43ba	; 0x43ba <_Z9analog_ini>

  if (fsc < 90) {
    456e:	ca 35       	cpi	r28, 0x5A	; 90
    4570:	20 f4       	brcc	.+8      	; 0x457a <_Z12checkChangesv+0x20>
    freqScal = 1;
    4572:	91 e0       	ldi	r25, 0x01	; 1
    4574:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <freqScal>
    4578:	09 c0       	rjmp	.+18     	; 0x458c <_Z12checkChangesv+0x32>
  }
  else if (fsc < 180) {
    457a:	c4 3b       	cpi	r28, 0xB4	; 180
    457c:	20 f4       	brcc	.+8      	; 0x4586 <_Z12checkChangesv+0x2c>
    freqScal = 2;
    457e:	92 e0       	ldi	r25, 0x02	; 2
    4580:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <freqScal>
    4584:	03 c0       	rjmp	.+6      	; 0x458c <_Z12checkChangesv+0x32>
  }
  else {
    freqScal = 3;
    4586:	93 e0       	ldi	r25, 0x03	; 3
    4588:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <freqScal>
  }

  if (fshift < 90) {
    458c:	8a 35       	cpi	r24, 0x5A	; 90
    458e:	28 f4       	brcc	.+10     	; 0x459a <_Z12checkChangesv+0x40>
    shift = false;
    4590:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <shift>
    enhance = false;
    4594:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <enhance>
    4598:	0d c0       	rjmp	.+26     	; 0x45b4 <_Z12checkChangesv+0x5a>
  }
  else if (fshift < 180) {
    459a:	84 3b       	cpi	r24, 0xB4	; 180
    459c:	30 f4       	brcc	.+12     	; 0x45aa <_Z12checkChangesv+0x50>
    shift = true;
    459e:	81 e0       	ldi	r24, 0x01	; 1
    45a0:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <shift>
    enhance = false;
    45a4:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <enhance>
    45a8:	05 c0       	rjmp	.+10     	; 0x45b4 <_Z12checkChangesv+0x5a>
  }
  else {
    shift = false;
    45aa:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <shift>
    enhance = true;
    45ae:	81 e0       	ldi	r24, 0x01	; 1
    45b0:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <enhance>
  }
}
    45b4:	cf 91       	pop	r28
    45b6:	08 95       	ret

000045b8 <_Z9playTrackv>:
	  }
	  test_File.close();
}

void playTrack()
{
    45b8:	1f 93       	push	r17
    45ba:	cf 93       	push	r28
    45bc:	df 93       	push	r29
    45be:	cd b7       	in	r28, 0x3d	; 61
    45c0:	de b7       	in	r29, 0x3e	; 62
    45c2:	6b 97       	sbiw	r28, 0x1b	; 27
    45c4:	0f b6       	in	r0, 0x3f	; 63
    45c6:	f8 94       	cli
    45c8:	de bf       	out	0x3e, r29	; 62
    45ca:	0f be       	out	0x3f, r0	; 63
    45cc:	cd bf       	out	0x3d, r28	; 61
  /*This function reads data from the specified file and play*/

  checkChanges();//check for frequency change requirements
    45ce:	0e 94 ad 22 	call	0x455a	; 0x455a <_Z12checkChangesv>

  if (shift)
    45d2:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <shift>
    45d6:	88 23       	and	r24, r24
    45d8:	31 f0       	breq	.+12     	; 0x45e6 <_Z9playTrackv+0x2e>
  {
    secondLine("Processing");
    45da:	8b ec       	ldi	r24, 0xCB	; 203
    45dc:	91 e0       	ldi	r25, 0x01	; 1
    45de:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <_Z10secondLinePKc>
    sig_freqShift();
    45e2:	0e 94 01 21 	call	0x4202	; 0x4202 <_Z13sig_freqShiftv>
  }

  File test_File = SD.open(fname_temp);
    45e6:	21 e0       	ldi	r18, 0x01	; 1
    45e8:	47 e6       	ldi	r20, 0x67	; 103
    45ea:	55 e0       	ldi	r21, 0x05	; 5
    45ec:	6a e0       	ldi	r22, 0x0A	; 10
    45ee:	73 e0       	ldi	r23, 0x03	; 3
    45f0:	ce 01       	movw	r24, r28
    45f2:	01 96       	adiw	r24, 0x01	; 1
    45f4:	0e 94 4f 0a 	call	0x149e	; 0x149e <_ZN5SDLib7SDClass4openEPKch>

  if (!test_File) {
    45f8:	ce 01       	movw	r24, r28
    45fa:	01 96       	adiw	r24, 0x01	; 1
    45fc:	0e 94 fc 07 	call	0xff8	; 0xff8 <_ZN5SDLib4FilecvbEv>
    4600:	81 11       	cpse	r24, r1
    4602:	0e c0       	rjmp	.+28     	; 0x4620 <_Z9playTrackv+0x68>
    // if the file didn't open, print an error:
    secondLine("Error");
    4604:	86 ed       	ldi	r24, 0xD6	; 214
    4606:	91 e0       	ldi	r25, 0x01	; 1
    4608:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <_Z10secondLinePKc>
    460c:	2f ef       	ldi	r18, 0xFF	; 255
    460e:	83 ed       	ldi	r24, 0xD3	; 211
    4610:	90 e3       	ldi	r25, 0x30	; 48
    4612:	21 50       	subi	r18, 0x01	; 1
    4614:	80 40       	sbci	r24, 0x00	; 0
    4616:	90 40       	sbci	r25, 0x00	; 0
    4618:	e1 f7       	brne	.-8      	; 0x4612 <_Z9playTrackv+0x5a>
    461a:	00 c0       	rjmp	.+0      	; 0x461c <_Z9playTrackv+0x64>
    461c:	00 00       	nop
    461e:	8d c0       	rjmp	.+282    	; 0x473a <_Z9playTrackv+0x182>
    _delay_ms(1000);
  }
  else {
    test_File.seek(44);
    4620:	4c e2       	ldi	r20, 0x2C	; 44
    4622:	50 e0       	ldi	r21, 0x00	; 0
    4624:	60 e0       	ldi	r22, 0x00	; 0
    4626:	70 e0       	ldi	r23, 0x00	; 0
    4628:	ce 01       	movw	r24, r28
    462a:	01 96       	adiw	r24, 0x01	; 1
    462c:	0e 94 8b 07 	call	0xf16	; 0xf16 <_ZN5SDLib4File4seekEm>
    clrDisplay("Playing");
    4630:	8c ee       	ldi	r24, 0xEC	; 236
    4632:	91 e0       	ldi	r25, 0x01	; 1
    4634:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_Z10clrDisplayPKc>
    secondLine(fname_temp);
    4638:	87 e6       	ldi	r24, 0x67	; 103
    463a:	95 e0       	ldi	r25, 0x05	; 5
    463c:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <_Z10secondLinePKc>

    //Check whether a frequency scale is set
    //>---------------------------< NORMAL OUTPUT >----------------------------------<

    if (freqScal == 0 || freqScal == 1) {
    4640:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <freqScal>
    4644:	82 30       	cpi	r24, 0x02	; 2
    4646:	c8 f4       	brcc	.+50     	; 0x467a <_Z9playTrackv+0xc2>
      while (test_File.available()) {
    4648:	ce 01       	movw	r24, r28
    464a:	01 96       	adiw	r24, 0x01	; 1
    464c:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZN5SDLib4File9availableEv>
    4650:	89 2b       	or	r24, r25
    4652:	e1 f1       	breq	.+120    	; 0x46cc <_Z9playTrackv+0x114>
        //t = micros();
        OCR1A = test_File.read();
    4654:	ce 01       	movw	r24, r28
    4656:	01 96       	adiw	r24, 0x01	; 1
    4658:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN5SDLib4File4readEv>
    465c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    4660:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4664:	25 ed       	ldi	r18, 0xD5	; 213
    4666:	2a 95       	dec	r18
    4668:	f1 f7       	brne	.-4      	; 0x4666 <_Z9playTrackv+0xae>
    466a:	00 00       	nop
        _delay_us(40);  //Use this delay for 12.5KHz play
        //_delay_us(20);    //Use this delay for 16kHz play
        
		//****Comment both of delays for 24kHz play*******
        
        char key = keyInput();
    466c:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <_Z8keyInputv>
        if (key && key == 'p') {
    4670:	80 37       	cpi	r24, 0x70	; 112
    4672:	51 f7       	brne	.-44     	; 0x4648 <_Z9playTrackv+0x90>
    4674:	2b c0       	rjmp	.+86     	; 0x46cc <_Z9playTrackv+0x114>
        }

        count++;

        if (count == freqScal + 1) {//resetting the count
          count = 1;
    4676:	11 e0       	ldi	r17, 0x01	; 1
    4678:	01 c0       	rjmp	.+2      	; 0x467c <_Z9playTrackv+0xc4>
    467a:	11 e0       	ldi	r17, 0x01	; 1
    //Output for freaquency scaled track
    //Using down sampling

    else {
      uint8_t count = 1;
      while (test_File.available()) {
    467c:	ce 01       	movw	r24, r28
    467e:	01 96       	adiw	r24, 0x01	; 1
    4680:	0e 94 ba 07 	call	0xf74	; 0xf74 <_ZN5SDLib4File9availableEv>
    4684:	89 2b       	or	r24, r25
    4686:	11 f1       	breq	.+68     	; 0x46cc <_Z9playTrackv+0x114>
        //t = micros();
        char key = keyInput();
    4688:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <_Z8keyInputv>
        if (key && key == 'p') {
    468c:	80 37       	cpi	r24, 0x70	; 112
    468e:	f1 f0       	breq	.+60     	; 0x46cc <_Z9playTrackv+0x114>
          break;
        }

        if (count == 1) {
    4690:	11 30       	cpi	r17, 0x01	; 1
    4692:	69 f4       	brne	.+26     	; 0x46ae <_Z9playTrackv+0xf6>
          //Accept the first sample among (# of samples=freqScal)
		  OCR1A = test_File.read();
    4694:	ce 01       	movw	r24, r28
    4696:	01 96       	adiw	r24, 0x01	; 1
    4698:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN5SDLib4File4readEv>
    469c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    46a0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    46a4:	85 ed       	ldi	r24, 0xD5	; 213
    46a6:	8a 95       	dec	r24
    46a8:	f1 f7       	brne	.-4      	; 0x46a6 <_Z9playTrackv+0xee>
    46aa:	00 00       	nop
    46ac:	04 c0       	rjmp	.+8      	; 0x46b6 <_Z9playTrackv+0xfe>
          //Serial.println(micros() - t);
          //t = micros() - t;
          //clrDisplay(String(t));
          //delay(1000);
        } else {
          test_File.read();//This is to neglet samples in between
    46ae:	ce 01       	movw	r24, r28
    46b0:	01 96       	adiw	r24, 0x01	; 1
    46b2:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN5SDLib4File4readEv>
        }

        count++;
    46b6:	1f 5f       	subi	r17, 0xFF	; 255

        if (count == freqScal + 1) {//resetting the count
    46b8:	21 2f       	mov	r18, r17
    46ba:	30 e0       	ldi	r19, 0x00	; 0
    46bc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <freqScal>
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	01 96       	adiw	r24, 0x01	; 1
    46c4:	28 17       	cp	r18, r24
    46c6:	39 07       	cpc	r19, r25
    46c8:	c9 f6       	brne	.-78     	; 0x467c <_Z9playTrackv+0xc4>
    46ca:	d5 cf       	rjmp	.-86     	; 0x4676 <_Z9playTrackv+0xbe>
        //        delay(1000);
      }
    }
    // close the file:
    //analogWrite(speaker, 0);
	OCR1A = 0;
    46cc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    46d0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    secondLine("End of play");
    46d4:	84 ef       	ldi	r24, 0xF4	; 244
    46d6:	91 e0       	ldi	r25, 0x01	; 1
    46d8:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <_Z10secondLinePKc>
    test_File.close();
    46dc:	ce 01       	movw	r24, r28
    46de:	01 96       	adiw	r24, 0x01	; 1
    46e0:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <_ZN5SDLib4File5closeEv>

    if (shift || enhance) {
    46e4:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <shift>
    46e8:	81 11       	cpse	r24, r1
    46ea:	04 c0       	rjmp	.+8      	; 0x46f4 <_Z9playTrackv+0x13c>
    46ec:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <enhance>
    46f0:	88 23       	and	r24, r24
    46f2:	d1 f0       	breq	.+52     	; 0x4728 <_Z9playTrackv+0x170>
      //fname_temp = String(tracks[fcount]) + ".WAV";
	  //setFileName();

	  fname_temp[0] = tracks[fcount];fname_temp[1] = '.';fname_temp[2] = 'W';fname_temp[3] = 'A';fname_temp[4] = 'V';
    46f4:	e0 91 71 05 	lds	r30, 0x0571	; 0x800571 <fcount>
    46f8:	f0 e0       	ldi	r31, 0x00	; 0
    46fa:	ed 58       	subi	r30, 0x8D	; 141
    46fc:	fa 4f       	sbci	r31, 0xFA	; 250
    46fe:	80 81       	ld	r24, Z
    4700:	e7 e6       	ldi	r30, 0x67	; 103
    4702:	f5 e0       	ldi	r31, 0x05	; 5
    4704:	80 83       	st	Z, r24
    4706:	8e e2       	ldi	r24, 0x2E	; 46
    4708:	81 83       	std	Z+1, r24	; 0x01
    470a:	87 e5       	ldi	r24, 0x57	; 87
    470c:	82 83       	std	Z+2, r24	; 0x02
    470e:	81 e4       	ldi	r24, 0x41	; 65
    4710:	83 83       	std	Z+3, r24	; 0x03
    4712:	86 e5       	ldi	r24, 0x56	; 86
    4714:	84 83       	std	Z+4, r24	; 0x04
	  fname_temp[5] = '\0';fname_temp[6] = '\0';fname_temp[7] = '\0';fname_temp[8] = '\0';fname_temp[9] = '\0';
    4716:	15 82       	std	Z+5, r1	; 0x05
    4718:	16 82       	std	Z+6, r1	; 0x06
    471a:	17 82       	std	Z+7, r1	; 0x07
    471c:	10 86       	std	Z+8, r1	; 0x08
    471e:	11 86       	std	Z+9, r1	; 0x09
      shift = false;
    4720:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <shift>
      enhance = false;
    4724:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <enhance>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4728:	9f ef       	ldi	r25, 0xFF	; 255
    472a:	23 ed       	ldi	r18, 0xD3	; 211
    472c:	80 e3       	ldi	r24, 0x30	; 48
    472e:	91 50       	subi	r25, 0x01	; 1
    4730:	20 40       	sbci	r18, 0x00	; 0
    4732:	80 40       	sbci	r24, 0x00	; 0
    4734:	e1 f7       	brne	.-8      	; 0x472e <_Z9playTrackv+0x176>
    4736:	00 c0       	rjmp	.+0      	; 0x4738 <_Z9playTrackv+0x180>
    4738:	00 00       	nop
    }

    _delay_ms(1000);
  }
}
    473a:	6b 96       	adiw	r28, 0x1b	; 27
    473c:	0f b6       	in	r0, 0x3f	; 63
    473e:	f8 94       	cli
    4740:	de bf       	out	0x3e, r29	; 62
    4742:	0f be       	out	0x3f, r0	; 63
    4744:	cd bf       	out	0x3d, r28	; 61
    4746:	df 91       	pop	r29
    4748:	cf 91       	pop	r28
    474a:	1f 91       	pop	r17
    474c:	08 95       	ret

0000474e <_Z17initialize_Thingsv>:

void initialize_Things()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    474e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
	sbi(TCCR0A, WGM01);
    4750:	84 b5       	in	r24, 0x24	; 36
    4752:	82 60       	ori	r24, 0x02	; 2
    4754:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    4756:	84 b5       	in	r24, 0x24	; 36
    4758:	81 60       	ori	r24, 0x01	; 1
    475a:	84 bd       	out	0x24, r24	; 36
	
	// set timer 0 prescale factor to 64
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    475c:	85 b5       	in	r24, 0x25	; 37
    475e:	82 60       	ori	r24, 0x02	; 2
    4760:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    4762:	85 b5       	in	r24, 0x25	; 37
    4764:	81 60       	ori	r24, 0x01	; 1
    4766:	85 bd       	out	0x25, r24	; 37
	
	// enable timer 0 overflow interrupt
	sbi(TIMSK0, TOIE0);
    4768:	ee e6       	ldi	r30, 0x6E	; 110
    476a:	f0 e0       	ldi	r31, 0x00	; 0
    476c:	80 81       	ld	r24, Z
    476e:	81 60       	ori	r24, 0x01	; 1
    4770:	80 83       	st	Z, r24
	
	// timers 1 and 2 are used for phase-correct hardware pwm
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle
	TCCR1B = 0;
    4772:	e1 e8       	ldi	r30, 0x81	; 129
    4774:	f0 e0       	ldi	r31, 0x00	; 0
    4776:	10 82       	st	Z, r1
	
	//select no-prescaling
	//sbi(TCCR1B, CS11);
	sbi(TCCR1B, CS10);
    4778:	80 81       	ld	r24, Z
    477a:	81 60       	ori	r24, 0x01	; 1
    477c:	80 83       	st	Z, r24
	
	//select the Wave form generation mode as FAST PWM
	//select the non-inverting mode
	sbi(TCCR1A, WGM10);
    477e:	a0 e8       	ldi	r26, 0x80	; 128
    4780:	b0 e0       	ldi	r27, 0x00	; 0
    4782:	8c 91       	ld	r24, X
    4784:	81 60       	ori	r24, 0x01	; 1
    4786:	8c 93       	st	X, r24
	sbi(TCCR1A, COM1A1);
    4788:	8c 91       	ld	r24, X
    478a:	80 68       	ori	r24, 0x80	; 128
    478c:	8c 93       	st	X, r24
	sbi(TCCR1B, WGM12);
    478e:	80 81       	ld	r24, Z
    4790:	88 60       	ori	r24, 0x08	; 8
    4792:	80 83       	st	Z, r24
	
	// set timer 2 prescale factor to 64
	sbi(TCCR2B, CS22);
    4794:	e1 eb       	ldi	r30, 0xB1	; 177
    4796:	f0 e0       	ldi	r31, 0x00	; 0
    4798:	80 81       	ld	r24, Z
    479a:	84 60       	ori	r24, 0x04	; 4
    479c:	80 83       	st	Z, r24
	
	// configure timer 2 for phase correct pwm (8-bit)
	sbi(TCCR2A, WGM20);
    479e:	e0 eb       	ldi	r30, 0xB0	; 176
    47a0:	f0 e0       	ldi	r31, 0x00	; 0
    47a2:	80 81       	ld	r24, Z
    47a4:	81 60       	ori	r24, 0x01	; 1
    47a6:	80 83       	st	Z, r24
	
	// set a2d prescaler(16) so we are inside the desired 50-200 KHz range.
	sbi(ADCSRA, ADPS2);
    47a8:	ea e7       	ldi	r30, 0x7A	; 122
    47aa:	f0 e0       	ldi	r31, 0x00	; 0
    47ac:	80 81       	ld	r24, Z
    47ae:	84 60       	ori	r24, 0x04	; 4
    47b0:	80 83       	st	Z, r24
	//sbi(ADCSRA, ADPS1);
	//sbi(ADCSRA, ADPS0);
	
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    47b2:	80 81       	ld	r24, Z
    47b4:	80 68       	ori	r24, 0x80	; 128
    47b6:	80 83       	st	Z, r24
	
	//set the reference voltage as AVCC
	//set the Left adjust result
	//keeping last 3bits as 0, because for the default pin selection as ADC0
	ADMUX = 0b01100000;
    47b8:	80 e6       	ldi	r24, 0x60	; 96
    47ba:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	
	// the bootloader connects pins 0 and 1 to the USART; disconnect them
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
	UCSR0B = 0;
    47be:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    47c2:	08 95       	ret

000047c4 <main>:


int main(void)
{	
	//This function is from arduino...need to edit
	initialize_Things();
    47c4:	0e 94 a7 23 	call	0x474e	; 0x474e <_Z17initialize_Thingsv>
	//sei();
	
	fname_temp[1] = '.';fname_temp[2] = 'W';fname_temp[3] = 'A';fname_temp[4] = 'V';
    47c8:	e7 e6       	ldi	r30, 0x67	; 103
    47ca:	f5 e0       	ldi	r31, 0x05	; 5
    47cc:	8e e2       	ldi	r24, 0x2E	; 46
    47ce:	81 83       	std	Z+1, r24	; 0x01
    47d0:	87 e5       	ldi	r24, 0x57	; 87
    47d2:	82 83       	std	Z+2, r24	; 0x02
    47d4:	81 e4       	ldi	r24, 0x41	; 65
    47d6:	83 83       	std	Z+3, r24	; 0x03
    47d8:	86 e5       	ldi	r24, 0x56	; 86
    47da:	84 83       	std	Z+4, r24	; 0x04

	//PORTD FOR KEYS
	DDRD = 0b00000000;
    47dc:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0b11111111;
    47de:	8f ef       	ldi	r24, 0xFF	; 255
    47e0:	8b b9       	out	0x0b, r24	; 11
	
	//CONFIGURING PINS FOR ANALOG INPUT
	DDRC &= 0b11110100;	
    47e2:	87 b1       	in	r24, 0x07	; 7
    47e4:	84 7f       	andi	r24, 0xF4	; 244
    47e6:	87 b9       	out	0x07, r24	; 7
	//analogRead_config();
	
	//CONFIGURING SPEAKER FOR OUTPUT
	DDRB |= (1<<DDB1);
    47e8:	84 b1       	in	r24, 0x04	; 4
    47ea:	82 60       	ori	r24, 0x02	; 2
    47ec:	84 b9       	out	0x04, r24	; 4
	//analogWrite_config();
	OCR1A = 0;
    47ee:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    47f2:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	//BEGIN THE LCD
	lcd.begin();
    47f6:	8f e5       	ldi	r24, 0x5F	; 95
    47f8:	95 e0       	ldi	r25, 0x05	; 5
    47fa:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <_ZN9LCDScreen5beginEv>
	
	//INITIALIZING THE SD CARD
	if (!SD.begin(sdcard))
    47fe:	6a e0       	ldi	r22, 0x0A	; 10
    4800:	8a e0       	ldi	r24, 0x0A	; 10
    4802:	93 e0       	ldi	r25, 0x03	; 3
    4804:	0e 94 29 09 	call	0x1252	; 0x1252 <_ZN5SDLib7SDClass5beginEh>
    4808:	81 11       	cpse	r24, r1
    480a:	05 c0       	rjmp	.+10     	; 0x4816 <main+0x52>
	{
		clrDisplay("Error");
    480c:	86 ed       	ldi	r24, 0xD6	; 214
    480e:	91 e0       	ldi	r25, 0x01	; 1
    4810:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_Z10clrDisplayPKc>
    4814:	ff cf       	rjmp	.-2      	; 0x4814 <main+0x50>
		while (1);
	}
	
	getTrackList();
    4816:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <_Z12getTrackListv>
    481a:	2f ef       	ldi	r18, 0xFF	; 255
    481c:	83 ed       	ldi	r24, 0xD3	; 211
    481e:	90 e3       	ldi	r25, 0x30	; 48
    4820:	21 50       	subi	r18, 0x01	; 1
    4822:	80 40       	sbci	r24, 0x00	; 0
    4824:	90 40       	sbci	r25, 0x00	; 0
    4826:	e1 f7       	brne	.-8      	; 0x4820 <main+0x5c>
    4828:	00 c0       	rjmp	.+0      	; 0x482a <main+0x66>
    482a:	00 00       	nop

		  
		  

		  //>-------------------------------< RECORD MODE (LEVEL 1)>--------------------------------<
		  if (mode == 's' && mode_ == 'j')
    482c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <mode>
    4830:	83 37       	cpi	r24, 0x73	; 115
    4832:	59 f4       	brne	.+22     	; 0x484a <main+0x86>
    4834:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode_>
    4838:	8a 36       	cpi	r24, 0x6A	; 106
    483a:	39 f4       	brne	.+14     	; 0x484a <main+0x86>
		  {
			record();
    483c:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <_Z6recordv>
			getTrackList();
    4840:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <_Z12getTrackListv>
			mode = 'i';
    4844:	89 e6       	ldi	r24, 0x69	; 105
    4846:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <mode>
		  }

		  //>--------------------------< ENTERING PLAYER MODE (LEVEL 1)>----------------------------<

		  if (mode == 'p' && mode_ == 'j')
    484a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <mode>
    484e:	80 37       	cpi	r24, 0x70	; 112
    4850:	c1 f5       	brne	.+112    	; 0x48c2 <main+0xfe>
    4852:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode_>
    4856:	8a 36       	cpi	r24, 0x6A	; 106
    4858:	a1 f5       	brne	.+104    	; 0x48c2 <main+0xfe>
		  {
			mode_ = 'k';
    485a:	8b e6       	ldi	r24, 0x6B	; 107
    485c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <mode_>
			mode = 'i';
    4860:	89 e6       	ldi	r24, 0x69	; 105
    4862:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <mode>
			  Press 'Play/Stop' when a track is loaded to the player
			  Press 'Play/Stop' to stop playing
			  Press 'next' or 'previous' to toggle between tracks
			  Press 'record/stop' in track loaded mode to exit player mode
			*/
			if (files == 0)
    4866:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <files>
    486a:	81 11       	cpse	r24, r1
    486c:	11 c0       	rjmp	.+34     	; 0x4890 <main+0xcc>
			{
			  mode_ = 'j';
    486e:	8a e6       	ldi	r24, 0x6A	; 106
    4870:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <mode_>
			  clrDisplay("No Tracks");
    4874:	80 e0       	ldi	r24, 0x00	; 0
    4876:	92 e0       	ldi	r25, 0x02	; 2
    4878:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_Z10clrDisplayPKc>
    487c:	2f ef       	ldi	r18, 0xFF	; 255
    487e:	83 ed       	ldi	r24, 0xD3	; 211
    4880:	90 e3       	ldi	r25, 0x30	; 48
    4882:	21 50       	subi	r18, 0x01	; 1
    4884:	80 40       	sbci	r24, 0x00	; 0
    4886:	90 40       	sbci	r25, 0x00	; 0
    4888:	e1 f7       	brne	.-8      	; 0x4882 <main+0xbe>
    488a:	00 c0       	rjmp	.+0      	; 0x488c <main+0xc8>
    488c:	00 00       	nop
    488e:	19 c0       	rjmp	.+50     	; 0x48c2 <main+0xfe>
			  _delay_ms(1000);
			}
			else
			{
				clrDisplay("Ready to Play");
    4890:	8a e0       	ldi	r24, 0x0A	; 10
    4892:	92 e0       	ldi	r25, 0x02	; 2
    4894:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_Z10clrDisplayPKc>
    4898:	2f ef       	ldi	r18, 0xFF	; 255
    489a:	83 ed       	ldi	r24, 0xD3	; 211
    489c:	90 e3       	ldi	r25, 0x30	; 48
    489e:	21 50       	subi	r18, 0x01	; 1
    48a0:	80 40       	sbci	r24, 0x00	; 0
    48a2:	90 40       	sbci	r25, 0x00	; 0
    48a4:	e1 f7       	brne	.-8      	; 0x489e <main+0xda>
    48a6:	00 c0       	rjmp	.+0      	; 0x48a8 <main+0xe4>
    48a8:	00 00       	nop
			  
			  _delay_ms(1000);
			  
			  //fname_temp = String(tracks[fcount]) + ".WAV";
			  //setFileName(tracks[fcount],"",".WAV");
			  fname_temp[0] = tracks[fcount];
    48aa:	e0 91 71 05 	lds	r30, 0x0571	; 0x800571 <fcount>
    48ae:	f0 e0       	ldi	r31, 0x00	; 0
    48b0:	ed 58       	subi	r30, 0x8D	; 141
    48b2:	fa 4f       	sbci	r31, 0xFA	; 250
    48b4:	80 81       	ld	r24, Z
    48b6:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <fname_temp>
			  secondLine(fname_temp);
    48ba:	87 e6       	ldi	r24, 0x67	; 103
    48bc:	95 e0       	ldi	r25, 0x05	; 5
    48be:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <_Z10secondLinePKc>
			}
		  }
		  //>--------------------------< PLAYER MODE (LEVEL 2)>------------------------------------<
		  if (mode_ == 'k')
    48c2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode_>
    48c6:	8b 36       	cpi	r24, 0x6B	; 107
    48c8:	09 f0       	breq	.+2      	; 0x48cc <main+0x108>
    48ca:	83 c0       	rjmp	.+262    	; 0x49d2 <main+0x20e>
		  {
			  while (1)
			  {
				  char key_input = keyInput();
    48cc:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <_Z8keyInputv>
				  if (key_input)
    48d0:	88 23       	and	r24, r24
    48d2:	e1 f3       	breq	.-8      	; 0x48cc <main+0x108>
				  {
					  mode = key_input;
    48d4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <mode>
					  break;
				  }
			  }
			if (mode == 'p')
    48d8:	80 37       	cpi	r24, 0x70	; 112
    48da:	39 f4       	brne	.+14     	; 0x48ea <main+0x126>
			{
			  //Play the track
			  playTrack();
    48dc:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <_Z9playTrackv>
			  
			  clrDisplay("Ready to Play");
    48e0:	8a e0       	ldi	r24, 0x0A	; 10
    48e2:	92 e0       	ldi	r25, 0x02	; 2
    48e4:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_Z10clrDisplayPKc>
    48e8:	6d c0       	rjmp	.+218    	; 0x49c4 <main+0x200>
			  
			  //setFileName(tracks[fcount],"",".WAV");
			  //secondLine(fname_temp);
			}
			else if (mode == '>')
    48ea:	8e 33       	cpi	r24, 0x3E	; 62
    48ec:	19 f4       	brne	.+6      	; 0x48f4 <main+0x130>
			{
			  //Load the next track
			  nextTrack();
    48ee:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <_Z9nextTrackv>
    48f2:	68 c0       	rjmp	.+208    	; 0x49c4 <main+0x200>
			}
			else if (mode == '<')
    48f4:	8c 33       	cpi	r24, 0x3C	; 60
    48f6:	19 f4       	brne	.+6      	; 0x48fe <main+0x13a>
			{
			  //load the previous track
			  previousTrack();
    48f8:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <_Z13previousTrackv>
    48fc:	63 c0       	rjmp	.+198    	; 0x49c4 <main+0x200>
			}
			else if (mode == 's')
    48fe:	83 37       	cpi	r24, 0x73	; 115
    4900:	39 f4       	brne	.+14     	; 0x4910 <main+0x14c>
			{
			  //Exit from player mode
			  mode_ = 'j';
    4902:	8a e6       	ldi	r24, 0x6A	; 106
    4904:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <mode_>
			  mode = 'i';
    4908:	89 e6       	ldi	r24, 0x69	; 105
    490a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <mode>
    490e:	5a c0       	rjmp	.+180    	; 0x49c4 <main+0x200>
			}
			else if (mode == 'd')
    4910:	84 36       	cpi	r24, 0x64	; 100
    4912:	09 f0       	breq	.+2      	; 0x4916 <main+0x152>
    4914:	57 c0       	rjmp	.+174    	; 0x49c4 <main+0x200>
			{
			  //This mode deletes the track loaded in payer
			  clrDisplay("Delete?");
    4916:	88 e1       	ldi	r24, 0x18	; 24
    4918:	92 e0       	ldi	r25, 0x02	; 2
    491a:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_Z10clrDisplayPKc>
			  //secondLine("DELETE");
			  while (true)
			  {
				char key = keyInput();
    491e:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <_Z8keyInputv>
				if (key && key == 'd')
    4922:	84 36       	cpi	r24, 0x64	; 100
    4924:	f9 f4       	brne	.+62     	; 0x4964 <main+0x1a0>
				{
				  SD.remove(fname_temp);
    4926:	67 e6       	ldi	r22, 0x67	; 103
    4928:	75 e0       	ldi	r23, 0x05	; 5
    492a:	8a e0       	ldi	r24, 0x0A	; 10
    492c:	93 e0       	ldi	r25, 0x03	; 3
    492e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <_ZN5SDLib7SDClass6removeEPKc>
				  clrDisplay("Deleted");
    4932:	84 e2       	ldi	r24, 0x24	; 36
    4934:	92 e0       	ldi	r25, 0x02	; 2
    4936:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_Z10clrDisplayPKc>
				  getTrackList();
    493a:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <_Z12getTrackListv>
				  
				  if(fcount == files){
    493e:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <fcount>
    4942:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <files>
    4946:	89 13       	cpse	r24, r25
    4948:	03 c0       	rjmp	.+6      	; 0x4950 <main+0x18c>
					  fcount--;
    494a:	81 50       	subi	r24, 0x01	; 1
    494c:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <fcount>
    4950:	2f ef       	ldi	r18, 0xFF	; 255
    4952:	83 ed       	ldi	r24, 0xD3	; 211
    4954:	90 e3       	ldi	r25, 0x30	; 48
    4956:	21 50       	subi	r18, 0x01	; 1
    4958:	80 40       	sbci	r24, 0x00	; 0
    495a:	90 40       	sbci	r25, 0x00	; 0
    495c:	e1 f7       	brne	.-8      	; 0x4956 <main+0x192>
    495e:	00 c0       	rjmp	.+0      	; 0x4960 <main+0x19c>
    4960:	00 00       	nop
    4962:	0f c0       	rjmp	.+30     	; 0x4982 <main+0x1be>
				  }
				  
				  _delay_ms(1000);
				  break;
				}
				else if (key=='p')
    4964:	80 37       	cpi	r24, 0x70	; 112
    4966:	d9 f6       	brne	.-74     	; 0x491e <main+0x15a>
				{
				  clrDisplay("Not Deleted");
    4968:	80 e2       	ldi	r24, 0x20	; 32
    496a:	92 e0       	ldi	r25, 0x02	; 2
    496c:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_Z10clrDisplayPKc>
    4970:	2f ef       	ldi	r18, 0xFF	; 255
    4972:	83 ed       	ldi	r24, 0xD3	; 211
    4974:	90 e3       	ldi	r25, 0x30	; 48
    4976:	21 50       	subi	r18, 0x01	; 1
    4978:	80 40       	sbci	r24, 0x00	; 0
    497a:	90 40       	sbci	r25, 0x00	; 0
    497c:	e1 f7       	brne	.-8      	; 0x4976 <main+0x1b2>
    497e:	00 c0       	rjmp	.+0      	; 0x4980 <main+0x1bc>
    4980:	00 00       	nop
				  _delay_ms(1000);
				  break;
				}
			  }

			  if (files == 0)
    4982:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <files>
    4986:	81 11       	cpse	r24, r1
    4988:	11 c0       	rjmp	.+34     	; 0x49ac <main+0x1e8>
			  {
				clrDisplay("No Tracks");
    498a:	80 e0       	ldi	r24, 0x00	; 0
    498c:	92 e0       	ldi	r25, 0x02	; 2
    498e:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_Z10clrDisplayPKc>
    4992:	2f ef       	ldi	r18, 0xFF	; 255
    4994:	83 ed       	ldi	r24, 0xD3	; 211
    4996:	90 e3       	ldi	r25, 0x30	; 48
    4998:	21 50       	subi	r18, 0x01	; 1
    499a:	80 40       	sbci	r24, 0x00	; 0
    499c:	90 40       	sbci	r25, 0x00	; 0
    499e:	e1 f7       	brne	.-8      	; 0x4998 <main+0x1d4>
    49a0:	00 c0       	rjmp	.+0      	; 0x49a2 <main+0x1de>
    49a2:	00 00       	nop
				_delay_ms(1000);
				mode_ = 'j';
    49a4:	8a e6       	ldi	r24, 0x6A	; 106
    49a6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <mode_>
    49aa:	0c c0       	rjmp	.+24     	; 0x49c4 <main+0x200>
			  }
			  else{
				  clrDisplay("Ready to Play");
    49ac:	8a e0       	ldi	r24, 0x0A	; 10
    49ae:	92 e0       	ldi	r25, 0x02	; 2
    49b0:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_Z10clrDisplayPKc>
				  //fname_temp = String(tracks[fcount]) + ".WAV";
				  //setFileName(tracks[fcount],"",".WAV");
				  fname_temp[0] = tracks[fcount];
    49b4:	e0 91 71 05 	lds	r30, 0x0571	; 0x800571 <fcount>
    49b8:	f0 e0       	ldi	r31, 0x00	; 0
    49ba:	ed 58       	subi	r30, 0x8D	; 141
    49bc:	fa 4f       	sbci	r31, 0xFA	; 250
    49be:	80 81       	ld	r24, Z
    49c0:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <fname_temp>
				  //secondLine(fname_temp);
			  }
			}
			secondLine(fname_temp);
    49c4:	87 e6       	ldi	r24, 0x67	; 103
    49c6:	95 e0       	ldi	r25, 0x05	; 5
    49c8:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <_Z10secondLinePKc>
			mode = 'i';
    49cc:	89 e6       	ldi	r24, 0x69	; 105
    49ce:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <mode>
		  }
		  //>-------------------------< PAUSE MODE (LEVEL 1)>--------------------------------------<
		  if (mode == 'i' && mode_ == 'j')
    49d2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <mode>
    49d6:	89 36       	cpi	r24, 0x69	; 105
    49d8:	09 f0       	breq	.+2      	; 0x49dc <main+0x218>
    49da:	28 cf       	rjmp	.-432    	; 0x482c <main+0x68>
    49dc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode_>
    49e0:	8a 36       	cpi	r24, 0x6A	; 106
    49e2:	09 f0       	breq	.+2      	; 0x49e6 <main+0x222>
    49e4:	23 cf       	rjmp	.-442    	; 0x482c <main+0x68>
		  {
			clrDisplay("Voice Recorder");
    49e6:	8c e2       	ldi	r24, 0x2C	; 44
    49e8:	92 e0       	ldi	r25, 0x02	; 2
    49ea:	0e 94 35 1e 	call	0x3c6a	; 0x3c6a <_Z10clrDisplayPKc>
			while (1)
			{
				char key_input = keyInput();
    49ee:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <_Z8keyInputv>
				if (key_input)
    49f2:	88 23       	and	r24, r24
    49f4:	e1 f3       	breq	.-8      	; 0x49ee <main+0x22a>
				{
					mode = key_input;
    49f6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <mode>
    49fa:	18 cf       	rjmp	.-464    	; 0x482c <main+0x68>

000049fc <_GLOBAL__sub_I_mode>:
	
	// the bootloader connects pins 0 and 1 to the USART; disconnect them
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
	UCSR0B = 0;
    49fc:	6f ef       	ldi	r22, 0xFF	; 255
    49fe:	7f ef       	ldi	r23, 0xFF	; 255
    4a00:	81 e0       	ldi	r24, 0x01	; 1
    4a02:	90 e0       	ldi	r25, 0x00	; 0
    4a04:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <_Z41__static_initialization_and_destruction_0ii>
    4a08:	08 95       	ret

00004a0a <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    4a0a:	1f 92       	push	r1
    4a0c:	0f 92       	push	r0
    4a0e:	0f b6       	in	r0, 0x3f	; 63
    4a10:	0f 92       	push	r0
    4a12:	11 24       	eor	r1, r1
    4a14:	0f 93       	push	r16
    4a16:	1f 93       	push	r17
    4a18:	2f 93       	push	r18
    4a1a:	3f 93       	push	r19
    4a1c:	4f 93       	push	r20
    4a1e:	5f 93       	push	r21
    4a20:	6f 93       	push	r22
    4a22:	7f 93       	push	r23
    4a24:	8f 93       	push	r24
    4a26:	9f 93       	push	r25
    4a28:	af 93       	push	r26
    4a2a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    4a2c:	00 91 85 05 	lds	r16, 0x0585	; 0x800585 <timer0_millis>
    4a30:	10 91 86 05 	lds	r17, 0x0586	; 0x800586 <timer0_millis+0x1>
    4a34:	20 91 87 05 	lds	r18, 0x0587	; 0x800587 <timer0_millis+0x2>
    4a38:	30 91 88 05 	lds	r19, 0x0588	; 0x800588 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    4a3c:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <timer0_fract>

	m += MILLIS_INC;
    4a40:	b9 01       	movw	r22, r18
    4a42:	a8 01       	movw	r20, r16
    4a44:	4f 5f       	subi	r20, 0xFF	; 255
    4a46:	5f 4f       	sbci	r21, 0xFF	; 255
    4a48:	6f 4f       	sbci	r22, 0xFF	; 255
    4a4a:	7f 4f       	sbci	r23, 0xFF	; 255
	f += FRACT_INC;
    4a4c:	83 e0       	ldi	r24, 0x03	; 3
    4a4e:	89 0f       	add	r24, r25
	if (f >= FRACT_MAX) {
    4a50:	8d 37       	cpi	r24, 0x7D	; 125
    4a52:	40 f0       	brcs	.+16     	; 0x4a64 <__vector_16+0x5a>
		f -= FRACT_MAX;
    4a54:	86 e8       	ldi	r24, 0x86	; 134
    4a56:	89 0f       	add	r24, r25
		m += 1;
    4a58:	b9 01       	movw	r22, r18
    4a5a:	a8 01       	movw	r20, r16
    4a5c:	4e 5f       	subi	r20, 0xFE	; 254
    4a5e:	5f 4f       	sbci	r21, 0xFF	; 255
    4a60:	6f 4f       	sbci	r22, 0xFF	; 255
    4a62:	7f 4f       	sbci	r23, 0xFF	; 255
	}

	timer0_fract = f;
    4a64:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <timer0_fract>
	timer0_millis = m;
    4a68:	40 93 85 05 	sts	0x0585, r20	; 0x800585 <timer0_millis>
    4a6c:	50 93 86 05 	sts	0x0586, r21	; 0x800586 <timer0_millis+0x1>
    4a70:	60 93 87 05 	sts	0x0587, r22	; 0x800587 <timer0_millis+0x2>
    4a74:	70 93 88 05 	sts	0x0588, r23	; 0x800588 <timer0_millis+0x3>
	timer0_overflow_count++;
    4a78:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <timer0_overflow_count>
    4a7c:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <timer0_overflow_count+0x1>
    4a80:	a0 91 8b 05 	lds	r26, 0x058B	; 0x80058b <timer0_overflow_count+0x2>
    4a84:	b0 91 8c 05 	lds	r27, 0x058C	; 0x80058c <timer0_overflow_count+0x3>
    4a88:	01 96       	adiw	r24, 0x01	; 1
    4a8a:	a1 1d       	adc	r26, r1
    4a8c:	b1 1d       	adc	r27, r1
    4a8e:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <timer0_overflow_count>
    4a92:	90 93 8a 05 	sts	0x058A, r25	; 0x80058a <timer0_overflow_count+0x1>
    4a96:	a0 93 8b 05 	sts	0x058B, r26	; 0x80058b <timer0_overflow_count+0x2>
    4a9a:	b0 93 8c 05 	sts	0x058C, r27	; 0x80058c <timer0_overflow_count+0x3>
}
    4a9e:	bf 91       	pop	r27
    4aa0:	af 91       	pop	r26
    4aa2:	9f 91       	pop	r25
    4aa4:	8f 91       	pop	r24
    4aa6:	7f 91       	pop	r23
    4aa8:	6f 91       	pop	r22
    4aaa:	5f 91       	pop	r21
    4aac:	4f 91       	pop	r20
    4aae:	3f 91       	pop	r19
    4ab0:	2f 91       	pop	r18
    4ab2:	1f 91       	pop	r17
    4ab4:	0f 91       	pop	r16
    4ab6:	0f 90       	pop	r0
    4ab8:	0f be       	out	0x3f, r0	; 63
    4aba:	0f 90       	pop	r0
    4abc:	1f 90       	pop	r1
    4abe:	18 95       	reti

00004ac0 <millis>:
unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    4ac0:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    4ac2:	f8 94       	cli
	m = timer0_millis;
    4ac4:	60 91 85 05 	lds	r22, 0x0585	; 0x800585 <timer0_millis>
    4ac8:	70 91 86 05 	lds	r23, 0x0586	; 0x800586 <timer0_millis+0x1>
    4acc:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <timer0_millis+0x2>
    4ad0:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <timer0_millis+0x3>
	SREG = oldSREG;
    4ad4:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    4ad6:	08 95       	ret

00004ad8 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    4ad8:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    4ada:	f8 94       	cli
	m = timer0_overflow_count;
    4adc:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <timer0_overflow_count>
    4ae0:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <timer0_overflow_count+0x1>
    4ae4:	a0 91 8b 05 	lds	r26, 0x058B	; 0x80058b <timer0_overflow_count+0x2>
    4ae8:	b0 91 8c 05 	lds	r27, 0x058C	; 0x80058c <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    4aec:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    4aee:	a8 9b       	sbis	0x15, 0	; 21
    4af0:	05 c0       	rjmp	.+10     	; 0x4afc <micros+0x24>
    4af2:	2f 3f       	cpi	r18, 0xFF	; 255
    4af4:	19 f0       	breq	.+6      	; 0x4afc <micros+0x24>
		m++;
    4af6:	01 96       	adiw	r24, 0x01	; 1
    4af8:	a1 1d       	adc	r26, r1
    4afa:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    4afc:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    4afe:	ba 2f       	mov	r27, r26
    4b00:	a9 2f       	mov	r26, r25
    4b02:	98 2f       	mov	r25, r24
    4b04:	88 27       	eor	r24, r24
    4b06:	82 0f       	add	r24, r18
    4b08:	91 1d       	adc	r25, r1
    4b0a:	a1 1d       	adc	r26, r1
    4b0c:	b1 1d       	adc	r27, r1
    4b0e:	bc 01       	movw	r22, r24
    4b10:	cd 01       	movw	r24, r26
    4b12:	66 0f       	add	r22, r22
    4b14:	77 1f       	adc	r23, r23
    4b16:	88 1f       	adc	r24, r24
    4b18:	99 1f       	adc	r25, r25
    4b1a:	66 0f       	add	r22, r22
    4b1c:	77 1f       	adc	r23, r23
    4b1e:	88 1f       	adc	r24, r24
    4b20:	99 1f       	adc	r25, r25
    4b22:	08 95       	ret

00004b24 <__subsf3>:
    4b24:	50 58       	subi	r21, 0x80	; 128

00004b26 <__addsf3>:
    4b26:	bb 27       	eor	r27, r27
    4b28:	aa 27       	eor	r26, r26
    4b2a:	0e 94 aa 25 	call	0x4b54	; 0x4b54 <__addsf3x>
    4b2e:	0c 94 f4 26 	jmp	0x4de8	; 0x4de8 <__fp_round>
    4b32:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <__fp_pscA>
    4b36:	38 f0       	brcs	.+14     	; 0x4b46 <__addsf3+0x20>
    4b38:	0e 94 ed 26 	call	0x4dda	; 0x4dda <__fp_pscB>
    4b3c:	20 f0       	brcs	.+8      	; 0x4b46 <__addsf3+0x20>
    4b3e:	39 f4       	brne	.+14     	; 0x4b4e <__addsf3+0x28>
    4b40:	9f 3f       	cpi	r25, 0xFF	; 255
    4b42:	19 f4       	brne	.+6      	; 0x4b4a <__addsf3+0x24>
    4b44:	26 f4       	brtc	.+8      	; 0x4b4e <__addsf3+0x28>
    4b46:	0c 94 e3 26 	jmp	0x4dc6	; 0x4dc6 <__fp_nan>
    4b4a:	0e f4       	brtc	.+2      	; 0x4b4e <__addsf3+0x28>
    4b4c:	e0 95       	com	r30
    4b4e:	e7 fb       	bst	r30, 7
    4b50:	0c 94 dd 26 	jmp	0x4dba	; 0x4dba <__fp_inf>

00004b54 <__addsf3x>:
    4b54:	e9 2f       	mov	r30, r25
    4b56:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fp_split3>
    4b5a:	58 f3       	brcs	.-42     	; 0x4b32 <__addsf3+0xc>
    4b5c:	ba 17       	cp	r27, r26
    4b5e:	62 07       	cpc	r22, r18
    4b60:	73 07       	cpc	r23, r19
    4b62:	84 07       	cpc	r24, r20
    4b64:	95 07       	cpc	r25, r21
    4b66:	20 f0       	brcs	.+8      	; 0x4b70 <__addsf3x+0x1c>
    4b68:	79 f4       	brne	.+30     	; 0x4b88 <__addsf3x+0x34>
    4b6a:	a6 f5       	brtc	.+104    	; 0x4bd4 <__addsf3x+0x80>
    4b6c:	0c 94 27 27 	jmp	0x4e4e	; 0x4e4e <__fp_zero>
    4b70:	0e f4       	brtc	.+2      	; 0x4b74 <__addsf3x+0x20>
    4b72:	e0 95       	com	r30
    4b74:	0b 2e       	mov	r0, r27
    4b76:	ba 2f       	mov	r27, r26
    4b78:	a0 2d       	mov	r26, r0
    4b7a:	0b 01       	movw	r0, r22
    4b7c:	b9 01       	movw	r22, r18
    4b7e:	90 01       	movw	r18, r0
    4b80:	0c 01       	movw	r0, r24
    4b82:	ca 01       	movw	r24, r20
    4b84:	a0 01       	movw	r20, r0
    4b86:	11 24       	eor	r1, r1
    4b88:	ff 27       	eor	r31, r31
    4b8a:	59 1b       	sub	r21, r25
    4b8c:	99 f0       	breq	.+38     	; 0x4bb4 <__addsf3x+0x60>
    4b8e:	59 3f       	cpi	r21, 0xF9	; 249
    4b90:	50 f4       	brcc	.+20     	; 0x4ba6 <__addsf3x+0x52>
    4b92:	50 3e       	cpi	r21, 0xE0	; 224
    4b94:	68 f1       	brcs	.+90     	; 0x4bf0 <__addsf3x+0x9c>
    4b96:	1a 16       	cp	r1, r26
    4b98:	f0 40       	sbci	r31, 0x00	; 0
    4b9a:	a2 2f       	mov	r26, r18
    4b9c:	23 2f       	mov	r18, r19
    4b9e:	34 2f       	mov	r19, r20
    4ba0:	44 27       	eor	r20, r20
    4ba2:	58 5f       	subi	r21, 0xF8	; 248
    4ba4:	f3 cf       	rjmp	.-26     	; 0x4b8c <__addsf3x+0x38>
    4ba6:	46 95       	lsr	r20
    4ba8:	37 95       	ror	r19
    4baa:	27 95       	ror	r18
    4bac:	a7 95       	ror	r26
    4bae:	f0 40       	sbci	r31, 0x00	; 0
    4bb0:	53 95       	inc	r21
    4bb2:	c9 f7       	brne	.-14     	; 0x4ba6 <__addsf3x+0x52>
    4bb4:	7e f4       	brtc	.+30     	; 0x4bd4 <__addsf3x+0x80>
    4bb6:	1f 16       	cp	r1, r31
    4bb8:	ba 0b       	sbc	r27, r26
    4bba:	62 0b       	sbc	r22, r18
    4bbc:	73 0b       	sbc	r23, r19
    4bbe:	84 0b       	sbc	r24, r20
    4bc0:	ba f0       	brmi	.+46     	; 0x4bf0 <__addsf3x+0x9c>
    4bc2:	91 50       	subi	r25, 0x01	; 1
    4bc4:	a1 f0       	breq	.+40     	; 0x4bee <__addsf3x+0x9a>
    4bc6:	ff 0f       	add	r31, r31
    4bc8:	bb 1f       	adc	r27, r27
    4bca:	66 1f       	adc	r22, r22
    4bcc:	77 1f       	adc	r23, r23
    4bce:	88 1f       	adc	r24, r24
    4bd0:	c2 f7       	brpl	.-16     	; 0x4bc2 <__addsf3x+0x6e>
    4bd2:	0e c0       	rjmp	.+28     	; 0x4bf0 <__addsf3x+0x9c>
    4bd4:	ba 0f       	add	r27, r26
    4bd6:	62 1f       	adc	r22, r18
    4bd8:	73 1f       	adc	r23, r19
    4bda:	84 1f       	adc	r24, r20
    4bdc:	48 f4       	brcc	.+18     	; 0x4bf0 <__addsf3x+0x9c>
    4bde:	87 95       	ror	r24
    4be0:	77 95       	ror	r23
    4be2:	67 95       	ror	r22
    4be4:	b7 95       	ror	r27
    4be6:	f7 95       	ror	r31
    4be8:	9e 3f       	cpi	r25, 0xFE	; 254
    4bea:	08 f0       	brcs	.+2      	; 0x4bee <__addsf3x+0x9a>
    4bec:	b0 cf       	rjmp	.-160    	; 0x4b4e <__addsf3+0x28>
    4bee:	93 95       	inc	r25
    4bf0:	88 0f       	add	r24, r24
    4bf2:	08 f0       	brcs	.+2      	; 0x4bf6 <__addsf3x+0xa2>
    4bf4:	99 27       	eor	r25, r25
    4bf6:	ee 0f       	add	r30, r30
    4bf8:	97 95       	ror	r25
    4bfa:	87 95       	ror	r24
    4bfc:	08 95       	ret

00004bfe <__divsf3>:
    4bfe:	0e 94 13 26 	call	0x4c26	; 0x4c26 <__divsf3x>
    4c02:	0c 94 f4 26 	jmp	0x4de8	; 0x4de8 <__fp_round>
    4c06:	0e 94 ed 26 	call	0x4dda	; 0x4dda <__fp_pscB>
    4c0a:	58 f0       	brcs	.+22     	; 0x4c22 <__divsf3+0x24>
    4c0c:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <__fp_pscA>
    4c10:	40 f0       	brcs	.+16     	; 0x4c22 <__divsf3+0x24>
    4c12:	29 f4       	brne	.+10     	; 0x4c1e <__divsf3+0x20>
    4c14:	5f 3f       	cpi	r21, 0xFF	; 255
    4c16:	29 f0       	breq	.+10     	; 0x4c22 <__divsf3+0x24>
    4c18:	0c 94 dd 26 	jmp	0x4dba	; 0x4dba <__fp_inf>
    4c1c:	51 11       	cpse	r21, r1
    4c1e:	0c 94 28 27 	jmp	0x4e50	; 0x4e50 <__fp_szero>
    4c22:	0c 94 e3 26 	jmp	0x4dc6	; 0x4dc6 <__fp_nan>

00004c26 <__divsf3x>:
    4c26:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fp_split3>
    4c2a:	68 f3       	brcs	.-38     	; 0x4c06 <__divsf3+0x8>

00004c2c <__divsf3_pse>:
    4c2c:	99 23       	and	r25, r25
    4c2e:	b1 f3       	breq	.-20     	; 0x4c1c <__divsf3+0x1e>
    4c30:	55 23       	and	r21, r21
    4c32:	91 f3       	breq	.-28     	; 0x4c18 <__divsf3+0x1a>
    4c34:	95 1b       	sub	r25, r21
    4c36:	55 0b       	sbc	r21, r21
    4c38:	bb 27       	eor	r27, r27
    4c3a:	aa 27       	eor	r26, r26
    4c3c:	62 17       	cp	r22, r18
    4c3e:	73 07       	cpc	r23, r19
    4c40:	84 07       	cpc	r24, r20
    4c42:	38 f0       	brcs	.+14     	; 0x4c52 <__divsf3_pse+0x26>
    4c44:	9f 5f       	subi	r25, 0xFF	; 255
    4c46:	5f 4f       	sbci	r21, 0xFF	; 255
    4c48:	22 0f       	add	r18, r18
    4c4a:	33 1f       	adc	r19, r19
    4c4c:	44 1f       	adc	r20, r20
    4c4e:	aa 1f       	adc	r26, r26
    4c50:	a9 f3       	breq	.-22     	; 0x4c3c <__divsf3_pse+0x10>
    4c52:	35 d0       	rcall	.+106    	; 0x4cbe <__divsf3_pse+0x92>
    4c54:	0e 2e       	mov	r0, r30
    4c56:	3a f0       	brmi	.+14     	; 0x4c66 <__divsf3_pse+0x3a>
    4c58:	e0 e8       	ldi	r30, 0x80	; 128
    4c5a:	32 d0       	rcall	.+100    	; 0x4cc0 <__divsf3_pse+0x94>
    4c5c:	91 50       	subi	r25, 0x01	; 1
    4c5e:	50 40       	sbci	r21, 0x00	; 0
    4c60:	e6 95       	lsr	r30
    4c62:	00 1c       	adc	r0, r0
    4c64:	ca f7       	brpl	.-14     	; 0x4c58 <__divsf3_pse+0x2c>
    4c66:	2b d0       	rcall	.+86     	; 0x4cbe <__divsf3_pse+0x92>
    4c68:	fe 2f       	mov	r31, r30
    4c6a:	29 d0       	rcall	.+82     	; 0x4cbe <__divsf3_pse+0x92>
    4c6c:	66 0f       	add	r22, r22
    4c6e:	77 1f       	adc	r23, r23
    4c70:	88 1f       	adc	r24, r24
    4c72:	bb 1f       	adc	r27, r27
    4c74:	26 17       	cp	r18, r22
    4c76:	37 07       	cpc	r19, r23
    4c78:	48 07       	cpc	r20, r24
    4c7a:	ab 07       	cpc	r26, r27
    4c7c:	b0 e8       	ldi	r27, 0x80	; 128
    4c7e:	09 f0       	breq	.+2      	; 0x4c82 <__divsf3_pse+0x56>
    4c80:	bb 0b       	sbc	r27, r27
    4c82:	80 2d       	mov	r24, r0
    4c84:	bf 01       	movw	r22, r30
    4c86:	ff 27       	eor	r31, r31
    4c88:	93 58       	subi	r25, 0x83	; 131
    4c8a:	5f 4f       	sbci	r21, 0xFF	; 255
    4c8c:	3a f0       	brmi	.+14     	; 0x4c9c <__divsf3_pse+0x70>
    4c8e:	9e 3f       	cpi	r25, 0xFE	; 254
    4c90:	51 05       	cpc	r21, r1
    4c92:	78 f0       	brcs	.+30     	; 0x4cb2 <__divsf3_pse+0x86>
    4c94:	0c 94 dd 26 	jmp	0x4dba	; 0x4dba <__fp_inf>
    4c98:	0c 94 28 27 	jmp	0x4e50	; 0x4e50 <__fp_szero>
    4c9c:	5f 3f       	cpi	r21, 0xFF	; 255
    4c9e:	e4 f3       	brlt	.-8      	; 0x4c98 <__divsf3_pse+0x6c>
    4ca0:	98 3e       	cpi	r25, 0xE8	; 232
    4ca2:	d4 f3       	brlt	.-12     	; 0x4c98 <__divsf3_pse+0x6c>
    4ca4:	86 95       	lsr	r24
    4ca6:	77 95       	ror	r23
    4ca8:	67 95       	ror	r22
    4caa:	b7 95       	ror	r27
    4cac:	f7 95       	ror	r31
    4cae:	9f 5f       	subi	r25, 0xFF	; 255
    4cb0:	c9 f7       	brne	.-14     	; 0x4ca4 <__divsf3_pse+0x78>
    4cb2:	88 0f       	add	r24, r24
    4cb4:	91 1d       	adc	r25, r1
    4cb6:	96 95       	lsr	r25
    4cb8:	87 95       	ror	r24
    4cba:	97 f9       	bld	r25, 7
    4cbc:	08 95       	ret
    4cbe:	e1 e0       	ldi	r30, 0x01	; 1
    4cc0:	66 0f       	add	r22, r22
    4cc2:	77 1f       	adc	r23, r23
    4cc4:	88 1f       	adc	r24, r24
    4cc6:	bb 1f       	adc	r27, r27
    4cc8:	62 17       	cp	r22, r18
    4cca:	73 07       	cpc	r23, r19
    4ccc:	84 07       	cpc	r24, r20
    4cce:	ba 07       	cpc	r27, r26
    4cd0:	20 f0       	brcs	.+8      	; 0x4cda <__divsf3_pse+0xae>
    4cd2:	62 1b       	sub	r22, r18
    4cd4:	73 0b       	sbc	r23, r19
    4cd6:	84 0b       	sbc	r24, r20
    4cd8:	ba 0b       	sbc	r27, r26
    4cda:	ee 1f       	adc	r30, r30
    4cdc:	88 f7       	brcc	.-30     	; 0x4cc0 <__divsf3_pse+0x94>
    4cde:	e0 95       	com	r30
    4ce0:	08 95       	ret

00004ce2 <__fixunssfsi>:
    4ce2:	0e 94 0d 27 	call	0x4e1a	; 0x4e1a <__fp_splitA>
    4ce6:	88 f0       	brcs	.+34     	; 0x4d0a <__fixunssfsi+0x28>
    4ce8:	9f 57       	subi	r25, 0x7F	; 127
    4cea:	98 f0       	brcs	.+38     	; 0x4d12 <__fixunssfsi+0x30>
    4cec:	b9 2f       	mov	r27, r25
    4cee:	99 27       	eor	r25, r25
    4cf0:	b7 51       	subi	r27, 0x17	; 23
    4cf2:	b0 f0       	brcs	.+44     	; 0x4d20 <__fixunssfsi+0x3e>
    4cf4:	e1 f0       	breq	.+56     	; 0x4d2e <__fixunssfsi+0x4c>
    4cf6:	66 0f       	add	r22, r22
    4cf8:	77 1f       	adc	r23, r23
    4cfa:	88 1f       	adc	r24, r24
    4cfc:	99 1f       	adc	r25, r25
    4cfe:	1a f0       	brmi	.+6      	; 0x4d06 <__fixunssfsi+0x24>
    4d00:	ba 95       	dec	r27
    4d02:	c9 f7       	brne	.-14     	; 0x4cf6 <__fixunssfsi+0x14>
    4d04:	14 c0       	rjmp	.+40     	; 0x4d2e <__fixunssfsi+0x4c>
    4d06:	b1 30       	cpi	r27, 0x01	; 1
    4d08:	91 f0       	breq	.+36     	; 0x4d2e <__fixunssfsi+0x4c>
    4d0a:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <__fp_zero>
    4d0e:	b1 e0       	ldi	r27, 0x01	; 1
    4d10:	08 95       	ret
    4d12:	0c 94 27 27 	jmp	0x4e4e	; 0x4e4e <__fp_zero>
    4d16:	67 2f       	mov	r22, r23
    4d18:	78 2f       	mov	r23, r24
    4d1a:	88 27       	eor	r24, r24
    4d1c:	b8 5f       	subi	r27, 0xF8	; 248
    4d1e:	39 f0       	breq	.+14     	; 0x4d2e <__fixunssfsi+0x4c>
    4d20:	b9 3f       	cpi	r27, 0xF9	; 249
    4d22:	cc f3       	brlt	.-14     	; 0x4d16 <__fixunssfsi+0x34>
    4d24:	86 95       	lsr	r24
    4d26:	77 95       	ror	r23
    4d28:	67 95       	ror	r22
    4d2a:	b3 95       	inc	r27
    4d2c:	d9 f7       	brne	.-10     	; 0x4d24 <__fixunssfsi+0x42>
    4d2e:	3e f4       	brtc	.+14     	; 0x4d3e <__fixunssfsi+0x5c>
    4d30:	90 95       	com	r25
    4d32:	80 95       	com	r24
    4d34:	70 95       	com	r23
    4d36:	61 95       	neg	r22
    4d38:	7f 4f       	sbci	r23, 0xFF	; 255
    4d3a:	8f 4f       	sbci	r24, 0xFF	; 255
    4d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    4d3e:	08 95       	ret

00004d40 <__floatunsisf>:
    4d40:	e8 94       	clt
    4d42:	09 c0       	rjmp	.+18     	; 0x4d56 <__floatsisf+0x12>

00004d44 <__floatsisf>:
    4d44:	97 fb       	bst	r25, 7
    4d46:	3e f4       	brtc	.+14     	; 0x4d56 <__floatsisf+0x12>
    4d48:	90 95       	com	r25
    4d4a:	80 95       	com	r24
    4d4c:	70 95       	com	r23
    4d4e:	61 95       	neg	r22
    4d50:	7f 4f       	sbci	r23, 0xFF	; 255
    4d52:	8f 4f       	sbci	r24, 0xFF	; 255
    4d54:	9f 4f       	sbci	r25, 0xFF	; 255
    4d56:	99 23       	and	r25, r25
    4d58:	a9 f0       	breq	.+42     	; 0x4d84 <__floatsisf+0x40>
    4d5a:	f9 2f       	mov	r31, r25
    4d5c:	96 e9       	ldi	r25, 0x96	; 150
    4d5e:	bb 27       	eor	r27, r27
    4d60:	93 95       	inc	r25
    4d62:	f6 95       	lsr	r31
    4d64:	87 95       	ror	r24
    4d66:	77 95       	ror	r23
    4d68:	67 95       	ror	r22
    4d6a:	b7 95       	ror	r27
    4d6c:	f1 11       	cpse	r31, r1
    4d6e:	f8 cf       	rjmp	.-16     	; 0x4d60 <__floatsisf+0x1c>
    4d70:	fa f4       	brpl	.+62     	; 0x4db0 <__floatsisf+0x6c>
    4d72:	bb 0f       	add	r27, r27
    4d74:	11 f4       	brne	.+4      	; 0x4d7a <__floatsisf+0x36>
    4d76:	60 ff       	sbrs	r22, 0
    4d78:	1b c0       	rjmp	.+54     	; 0x4db0 <__floatsisf+0x6c>
    4d7a:	6f 5f       	subi	r22, 0xFF	; 255
    4d7c:	7f 4f       	sbci	r23, 0xFF	; 255
    4d7e:	8f 4f       	sbci	r24, 0xFF	; 255
    4d80:	9f 4f       	sbci	r25, 0xFF	; 255
    4d82:	16 c0       	rjmp	.+44     	; 0x4db0 <__floatsisf+0x6c>
    4d84:	88 23       	and	r24, r24
    4d86:	11 f0       	breq	.+4      	; 0x4d8c <__floatsisf+0x48>
    4d88:	96 e9       	ldi	r25, 0x96	; 150
    4d8a:	11 c0       	rjmp	.+34     	; 0x4dae <__floatsisf+0x6a>
    4d8c:	77 23       	and	r23, r23
    4d8e:	21 f0       	breq	.+8      	; 0x4d98 <__floatsisf+0x54>
    4d90:	9e e8       	ldi	r25, 0x8E	; 142
    4d92:	87 2f       	mov	r24, r23
    4d94:	76 2f       	mov	r23, r22
    4d96:	05 c0       	rjmp	.+10     	; 0x4da2 <__floatsisf+0x5e>
    4d98:	66 23       	and	r22, r22
    4d9a:	71 f0       	breq	.+28     	; 0x4db8 <__floatsisf+0x74>
    4d9c:	96 e8       	ldi	r25, 0x86	; 134
    4d9e:	86 2f       	mov	r24, r22
    4da0:	70 e0       	ldi	r23, 0x00	; 0
    4da2:	60 e0       	ldi	r22, 0x00	; 0
    4da4:	2a f0       	brmi	.+10     	; 0x4db0 <__floatsisf+0x6c>
    4da6:	9a 95       	dec	r25
    4da8:	66 0f       	add	r22, r22
    4daa:	77 1f       	adc	r23, r23
    4dac:	88 1f       	adc	r24, r24
    4dae:	da f7       	brpl	.-10     	; 0x4da6 <__floatsisf+0x62>
    4db0:	88 0f       	add	r24, r24
    4db2:	96 95       	lsr	r25
    4db4:	87 95       	ror	r24
    4db6:	97 f9       	bld	r25, 7
    4db8:	08 95       	ret

00004dba <__fp_inf>:
    4dba:	97 f9       	bld	r25, 7
    4dbc:	9f 67       	ori	r25, 0x7F	; 127
    4dbe:	80 e8       	ldi	r24, 0x80	; 128
    4dc0:	70 e0       	ldi	r23, 0x00	; 0
    4dc2:	60 e0       	ldi	r22, 0x00	; 0
    4dc4:	08 95       	ret

00004dc6 <__fp_nan>:
    4dc6:	9f ef       	ldi	r25, 0xFF	; 255
    4dc8:	80 ec       	ldi	r24, 0xC0	; 192
    4dca:	08 95       	ret

00004dcc <__fp_pscA>:
    4dcc:	00 24       	eor	r0, r0
    4dce:	0a 94       	dec	r0
    4dd0:	16 16       	cp	r1, r22
    4dd2:	17 06       	cpc	r1, r23
    4dd4:	18 06       	cpc	r1, r24
    4dd6:	09 06       	cpc	r0, r25
    4dd8:	08 95       	ret

00004dda <__fp_pscB>:
    4dda:	00 24       	eor	r0, r0
    4ddc:	0a 94       	dec	r0
    4dde:	12 16       	cp	r1, r18
    4de0:	13 06       	cpc	r1, r19
    4de2:	14 06       	cpc	r1, r20
    4de4:	05 06       	cpc	r0, r21
    4de6:	08 95       	ret

00004de8 <__fp_round>:
    4de8:	09 2e       	mov	r0, r25
    4dea:	03 94       	inc	r0
    4dec:	00 0c       	add	r0, r0
    4dee:	11 f4       	brne	.+4      	; 0x4df4 <__fp_round+0xc>
    4df0:	88 23       	and	r24, r24
    4df2:	52 f0       	brmi	.+20     	; 0x4e08 <__fp_round+0x20>
    4df4:	bb 0f       	add	r27, r27
    4df6:	40 f4       	brcc	.+16     	; 0x4e08 <__fp_round+0x20>
    4df8:	bf 2b       	or	r27, r31
    4dfa:	11 f4       	brne	.+4      	; 0x4e00 <__fp_round+0x18>
    4dfc:	60 ff       	sbrs	r22, 0
    4dfe:	04 c0       	rjmp	.+8      	; 0x4e08 <__fp_round+0x20>
    4e00:	6f 5f       	subi	r22, 0xFF	; 255
    4e02:	7f 4f       	sbci	r23, 0xFF	; 255
    4e04:	8f 4f       	sbci	r24, 0xFF	; 255
    4e06:	9f 4f       	sbci	r25, 0xFF	; 255
    4e08:	08 95       	ret

00004e0a <__fp_split3>:
    4e0a:	57 fd       	sbrc	r21, 7
    4e0c:	90 58       	subi	r25, 0x80	; 128
    4e0e:	44 0f       	add	r20, r20
    4e10:	55 1f       	adc	r21, r21
    4e12:	59 f0       	breq	.+22     	; 0x4e2a <__fp_splitA+0x10>
    4e14:	5f 3f       	cpi	r21, 0xFF	; 255
    4e16:	71 f0       	breq	.+28     	; 0x4e34 <__fp_splitA+0x1a>
    4e18:	47 95       	ror	r20

00004e1a <__fp_splitA>:
    4e1a:	88 0f       	add	r24, r24
    4e1c:	97 fb       	bst	r25, 7
    4e1e:	99 1f       	adc	r25, r25
    4e20:	61 f0       	breq	.+24     	; 0x4e3a <__fp_splitA+0x20>
    4e22:	9f 3f       	cpi	r25, 0xFF	; 255
    4e24:	79 f0       	breq	.+30     	; 0x4e44 <__fp_splitA+0x2a>
    4e26:	87 95       	ror	r24
    4e28:	08 95       	ret
    4e2a:	12 16       	cp	r1, r18
    4e2c:	13 06       	cpc	r1, r19
    4e2e:	14 06       	cpc	r1, r20
    4e30:	55 1f       	adc	r21, r21
    4e32:	f2 cf       	rjmp	.-28     	; 0x4e18 <__fp_split3+0xe>
    4e34:	46 95       	lsr	r20
    4e36:	f1 df       	rcall	.-30     	; 0x4e1a <__fp_splitA>
    4e38:	08 c0       	rjmp	.+16     	; 0x4e4a <__fp_splitA+0x30>
    4e3a:	16 16       	cp	r1, r22
    4e3c:	17 06       	cpc	r1, r23
    4e3e:	18 06       	cpc	r1, r24
    4e40:	99 1f       	adc	r25, r25
    4e42:	f1 cf       	rjmp	.-30     	; 0x4e26 <__fp_splitA+0xc>
    4e44:	86 95       	lsr	r24
    4e46:	71 05       	cpc	r23, r1
    4e48:	61 05       	cpc	r22, r1
    4e4a:	08 94       	sec
    4e4c:	08 95       	ret

00004e4e <__fp_zero>:
    4e4e:	e8 94       	clt

00004e50 <__fp_szero>:
    4e50:	bb 27       	eor	r27, r27
    4e52:	66 27       	eor	r22, r22
    4e54:	77 27       	eor	r23, r23
    4e56:	cb 01       	movw	r24, r22
    4e58:	97 f9       	bld	r25, 7
    4e5a:	08 95       	ret

00004e5c <__mulsf3>:
    4e5c:	0e 94 41 27 	call	0x4e82	; 0x4e82 <__mulsf3x>
    4e60:	0c 94 f4 26 	jmp	0x4de8	; 0x4de8 <__fp_round>
    4e64:	0e 94 e6 26 	call	0x4dcc	; 0x4dcc <__fp_pscA>
    4e68:	38 f0       	brcs	.+14     	; 0x4e78 <__mulsf3+0x1c>
    4e6a:	0e 94 ed 26 	call	0x4dda	; 0x4dda <__fp_pscB>
    4e6e:	20 f0       	brcs	.+8      	; 0x4e78 <__mulsf3+0x1c>
    4e70:	95 23       	and	r25, r21
    4e72:	11 f0       	breq	.+4      	; 0x4e78 <__mulsf3+0x1c>
    4e74:	0c 94 dd 26 	jmp	0x4dba	; 0x4dba <__fp_inf>
    4e78:	0c 94 e3 26 	jmp	0x4dc6	; 0x4dc6 <__fp_nan>
    4e7c:	11 24       	eor	r1, r1
    4e7e:	0c 94 28 27 	jmp	0x4e50	; 0x4e50 <__fp_szero>

00004e82 <__mulsf3x>:
    4e82:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <__fp_split3>
    4e86:	70 f3       	brcs	.-36     	; 0x4e64 <__mulsf3+0x8>

00004e88 <__mulsf3_pse>:
    4e88:	95 9f       	mul	r25, r21
    4e8a:	c1 f3       	breq	.-16     	; 0x4e7c <__mulsf3+0x20>
    4e8c:	95 0f       	add	r25, r21
    4e8e:	50 e0       	ldi	r21, 0x00	; 0
    4e90:	55 1f       	adc	r21, r21
    4e92:	62 9f       	mul	r22, r18
    4e94:	f0 01       	movw	r30, r0
    4e96:	72 9f       	mul	r23, r18
    4e98:	bb 27       	eor	r27, r27
    4e9a:	f0 0d       	add	r31, r0
    4e9c:	b1 1d       	adc	r27, r1
    4e9e:	63 9f       	mul	r22, r19
    4ea0:	aa 27       	eor	r26, r26
    4ea2:	f0 0d       	add	r31, r0
    4ea4:	b1 1d       	adc	r27, r1
    4ea6:	aa 1f       	adc	r26, r26
    4ea8:	64 9f       	mul	r22, r20
    4eaa:	66 27       	eor	r22, r22
    4eac:	b0 0d       	add	r27, r0
    4eae:	a1 1d       	adc	r26, r1
    4eb0:	66 1f       	adc	r22, r22
    4eb2:	82 9f       	mul	r24, r18
    4eb4:	22 27       	eor	r18, r18
    4eb6:	b0 0d       	add	r27, r0
    4eb8:	a1 1d       	adc	r26, r1
    4eba:	62 1f       	adc	r22, r18
    4ebc:	73 9f       	mul	r23, r19
    4ebe:	b0 0d       	add	r27, r0
    4ec0:	a1 1d       	adc	r26, r1
    4ec2:	62 1f       	adc	r22, r18
    4ec4:	83 9f       	mul	r24, r19
    4ec6:	a0 0d       	add	r26, r0
    4ec8:	61 1d       	adc	r22, r1
    4eca:	22 1f       	adc	r18, r18
    4ecc:	74 9f       	mul	r23, r20
    4ece:	33 27       	eor	r19, r19
    4ed0:	a0 0d       	add	r26, r0
    4ed2:	61 1d       	adc	r22, r1
    4ed4:	23 1f       	adc	r18, r19
    4ed6:	84 9f       	mul	r24, r20
    4ed8:	60 0d       	add	r22, r0
    4eda:	21 1d       	adc	r18, r1
    4edc:	82 2f       	mov	r24, r18
    4ede:	76 2f       	mov	r23, r22
    4ee0:	6a 2f       	mov	r22, r26
    4ee2:	11 24       	eor	r1, r1
    4ee4:	9f 57       	subi	r25, 0x7F	; 127
    4ee6:	50 40       	sbci	r21, 0x00	; 0
    4ee8:	9a f0       	brmi	.+38     	; 0x4f10 <__mulsf3_pse+0x88>
    4eea:	f1 f0       	breq	.+60     	; 0x4f28 <__mulsf3_pse+0xa0>
    4eec:	88 23       	and	r24, r24
    4eee:	4a f0       	brmi	.+18     	; 0x4f02 <__mulsf3_pse+0x7a>
    4ef0:	ee 0f       	add	r30, r30
    4ef2:	ff 1f       	adc	r31, r31
    4ef4:	bb 1f       	adc	r27, r27
    4ef6:	66 1f       	adc	r22, r22
    4ef8:	77 1f       	adc	r23, r23
    4efa:	88 1f       	adc	r24, r24
    4efc:	91 50       	subi	r25, 0x01	; 1
    4efe:	50 40       	sbci	r21, 0x00	; 0
    4f00:	a9 f7       	brne	.-22     	; 0x4eec <__mulsf3_pse+0x64>
    4f02:	9e 3f       	cpi	r25, 0xFE	; 254
    4f04:	51 05       	cpc	r21, r1
    4f06:	80 f0       	brcs	.+32     	; 0x4f28 <__mulsf3_pse+0xa0>
    4f08:	0c 94 dd 26 	jmp	0x4dba	; 0x4dba <__fp_inf>
    4f0c:	0c 94 28 27 	jmp	0x4e50	; 0x4e50 <__fp_szero>
    4f10:	5f 3f       	cpi	r21, 0xFF	; 255
    4f12:	e4 f3       	brlt	.-8      	; 0x4f0c <__mulsf3_pse+0x84>
    4f14:	98 3e       	cpi	r25, 0xE8	; 232
    4f16:	d4 f3       	brlt	.-12     	; 0x4f0c <__mulsf3_pse+0x84>
    4f18:	86 95       	lsr	r24
    4f1a:	77 95       	ror	r23
    4f1c:	67 95       	ror	r22
    4f1e:	b7 95       	ror	r27
    4f20:	f7 95       	ror	r31
    4f22:	e7 95       	ror	r30
    4f24:	9f 5f       	subi	r25, 0xFF	; 255
    4f26:	c1 f7       	brne	.-16     	; 0x4f18 <__mulsf3_pse+0x90>
    4f28:	fe 2b       	or	r31, r30
    4f2a:	88 0f       	add	r24, r24
    4f2c:	91 1d       	adc	r25, r1
    4f2e:	96 95       	lsr	r25
    4f30:	87 95       	ror	r24
    4f32:	97 f9       	bld	r25, 7
    4f34:	08 95       	ret

00004f36 <__divmodhi4>:
    4f36:	97 fb       	bst	r25, 7
    4f38:	07 2e       	mov	r0, r23
    4f3a:	16 f4       	brtc	.+4      	; 0x4f40 <__divmodhi4+0xa>
    4f3c:	00 94       	com	r0
    4f3e:	07 d0       	rcall	.+14     	; 0x4f4e <__divmodhi4_neg1>
    4f40:	77 fd       	sbrc	r23, 7
    4f42:	09 d0       	rcall	.+18     	; 0x4f56 <__divmodhi4_neg2>
    4f44:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <__udivmodhi4>
    4f48:	07 fc       	sbrc	r0, 7
    4f4a:	05 d0       	rcall	.+10     	; 0x4f56 <__divmodhi4_neg2>
    4f4c:	3e f4       	brtc	.+14     	; 0x4f5c <__divmodhi4_exit>

00004f4e <__divmodhi4_neg1>:
    4f4e:	90 95       	com	r25
    4f50:	81 95       	neg	r24
    4f52:	9f 4f       	sbci	r25, 0xFF	; 255
    4f54:	08 95       	ret

00004f56 <__divmodhi4_neg2>:
    4f56:	70 95       	com	r23
    4f58:	61 95       	neg	r22
    4f5a:	7f 4f       	sbci	r23, 0xFF	; 255

00004f5c <__divmodhi4_exit>:
    4f5c:	08 95       	ret

00004f5e <__tablejump2__>:
    4f5e:	ee 0f       	add	r30, r30
    4f60:	ff 1f       	adc	r31, r31
    4f62:	05 90       	lpm	r0, Z+
    4f64:	f4 91       	lpm	r31, Z
    4f66:	e0 2d       	mov	r30, r0
    4f68:	09 94       	ijmp

00004f6a <__muluhisi3>:
    4f6a:	0e 94 d4 27 	call	0x4fa8	; 0x4fa8 <__umulhisi3>
    4f6e:	a5 9f       	mul	r26, r21
    4f70:	90 0d       	add	r25, r0
    4f72:	b4 9f       	mul	r27, r20
    4f74:	90 0d       	add	r25, r0
    4f76:	a4 9f       	mul	r26, r20
    4f78:	80 0d       	add	r24, r0
    4f7a:	91 1d       	adc	r25, r1
    4f7c:	11 24       	eor	r1, r1
    4f7e:	08 95       	ret

00004f80 <__udivmodhi4>:
    4f80:	aa 1b       	sub	r26, r26
    4f82:	bb 1b       	sub	r27, r27
    4f84:	51 e1       	ldi	r21, 0x11	; 17
    4f86:	07 c0       	rjmp	.+14     	; 0x4f96 <__udivmodhi4_ep>

00004f88 <__udivmodhi4_loop>:
    4f88:	aa 1f       	adc	r26, r26
    4f8a:	bb 1f       	adc	r27, r27
    4f8c:	a6 17       	cp	r26, r22
    4f8e:	b7 07       	cpc	r27, r23
    4f90:	10 f0       	brcs	.+4      	; 0x4f96 <__udivmodhi4_ep>
    4f92:	a6 1b       	sub	r26, r22
    4f94:	b7 0b       	sbc	r27, r23

00004f96 <__udivmodhi4_ep>:
    4f96:	88 1f       	adc	r24, r24
    4f98:	99 1f       	adc	r25, r25
    4f9a:	5a 95       	dec	r21
    4f9c:	a9 f7       	brne	.-22     	; 0x4f88 <__udivmodhi4_loop>
    4f9e:	80 95       	com	r24
    4fa0:	90 95       	com	r25
    4fa2:	bc 01       	movw	r22, r24
    4fa4:	cd 01       	movw	r24, r26
    4fa6:	08 95       	ret

00004fa8 <__umulhisi3>:
    4fa8:	a2 9f       	mul	r26, r18
    4faa:	b0 01       	movw	r22, r0
    4fac:	b3 9f       	mul	r27, r19
    4fae:	c0 01       	movw	r24, r0
    4fb0:	a3 9f       	mul	r26, r19
    4fb2:	70 0d       	add	r23, r0
    4fb4:	81 1d       	adc	r24, r1
    4fb6:	11 24       	eor	r1, r1
    4fb8:	91 1d       	adc	r25, r1
    4fba:	b2 9f       	mul	r27, r18
    4fbc:	70 0d       	add	r23, r0
    4fbe:	81 1d       	adc	r24, r1
    4fc0:	11 24       	eor	r1, r1
    4fc2:	91 1d       	adc	r25, r1
    4fc4:	08 95       	ret

00004fc6 <malloc>:
    4fc6:	0f 93       	push	r16
    4fc8:	1f 93       	push	r17
    4fca:	cf 93       	push	r28
    4fcc:	df 93       	push	r29
    4fce:	82 30       	cpi	r24, 0x02	; 2
    4fd0:	91 05       	cpc	r25, r1
    4fd2:	10 f4       	brcc	.+4      	; 0x4fd8 <malloc+0x12>
    4fd4:	82 e0       	ldi	r24, 0x02	; 2
    4fd6:	90 e0       	ldi	r25, 0x00	; 0
    4fd8:	e0 91 8f 05 	lds	r30, 0x058F	; 0x80058f <__flp>
    4fdc:	f0 91 90 05 	lds	r31, 0x0590	; 0x800590 <__flp+0x1>
    4fe0:	20 e0       	ldi	r18, 0x00	; 0
    4fe2:	30 e0       	ldi	r19, 0x00	; 0
    4fe4:	a0 e0       	ldi	r26, 0x00	; 0
    4fe6:	b0 e0       	ldi	r27, 0x00	; 0
    4fe8:	30 97       	sbiw	r30, 0x00	; 0
    4fea:	19 f1       	breq	.+70     	; 0x5032 <malloc+0x6c>
    4fec:	40 81       	ld	r20, Z
    4fee:	51 81       	ldd	r21, Z+1	; 0x01
    4ff0:	02 81       	ldd	r16, Z+2	; 0x02
    4ff2:	13 81       	ldd	r17, Z+3	; 0x03
    4ff4:	48 17       	cp	r20, r24
    4ff6:	59 07       	cpc	r21, r25
    4ff8:	c8 f0       	brcs	.+50     	; 0x502c <malloc+0x66>
    4ffa:	84 17       	cp	r24, r20
    4ffc:	95 07       	cpc	r25, r21
    4ffe:	69 f4       	brne	.+26     	; 0x501a <malloc+0x54>
    5000:	10 97       	sbiw	r26, 0x00	; 0
    5002:	31 f0       	breq	.+12     	; 0x5010 <malloc+0x4a>
    5004:	12 96       	adiw	r26, 0x02	; 2
    5006:	0c 93       	st	X, r16
    5008:	12 97       	sbiw	r26, 0x02	; 2
    500a:	13 96       	adiw	r26, 0x03	; 3
    500c:	1c 93       	st	X, r17
    500e:	27 c0       	rjmp	.+78     	; 0x505e <malloc+0x98>
    5010:	00 93 8f 05 	sts	0x058F, r16	; 0x80058f <__flp>
    5014:	10 93 90 05 	sts	0x0590, r17	; 0x800590 <__flp+0x1>
    5018:	22 c0       	rjmp	.+68     	; 0x505e <malloc+0x98>
    501a:	21 15       	cp	r18, r1
    501c:	31 05       	cpc	r19, r1
    501e:	19 f0       	breq	.+6      	; 0x5026 <malloc+0x60>
    5020:	42 17       	cp	r20, r18
    5022:	53 07       	cpc	r21, r19
    5024:	18 f4       	brcc	.+6      	; 0x502c <malloc+0x66>
    5026:	9a 01       	movw	r18, r20
    5028:	bd 01       	movw	r22, r26
    502a:	ef 01       	movw	r28, r30
    502c:	df 01       	movw	r26, r30
    502e:	f8 01       	movw	r30, r16
    5030:	db cf       	rjmp	.-74     	; 0x4fe8 <malloc+0x22>
    5032:	21 15       	cp	r18, r1
    5034:	31 05       	cpc	r19, r1
    5036:	f9 f0       	breq	.+62     	; 0x5076 <malloc+0xb0>
    5038:	28 1b       	sub	r18, r24
    503a:	39 0b       	sbc	r19, r25
    503c:	24 30       	cpi	r18, 0x04	; 4
    503e:	31 05       	cpc	r19, r1
    5040:	80 f4       	brcc	.+32     	; 0x5062 <malloc+0x9c>
    5042:	8a 81       	ldd	r24, Y+2	; 0x02
    5044:	9b 81       	ldd	r25, Y+3	; 0x03
    5046:	61 15       	cp	r22, r1
    5048:	71 05       	cpc	r23, r1
    504a:	21 f0       	breq	.+8      	; 0x5054 <malloc+0x8e>
    504c:	fb 01       	movw	r30, r22
    504e:	93 83       	std	Z+3, r25	; 0x03
    5050:	82 83       	std	Z+2, r24	; 0x02
    5052:	04 c0       	rjmp	.+8      	; 0x505c <malloc+0x96>
    5054:	90 93 90 05 	sts	0x0590, r25	; 0x800590 <__flp+0x1>
    5058:	80 93 8f 05 	sts	0x058F, r24	; 0x80058f <__flp>
    505c:	fe 01       	movw	r30, r28
    505e:	32 96       	adiw	r30, 0x02	; 2
    5060:	44 c0       	rjmp	.+136    	; 0x50ea <malloc+0x124>
    5062:	fe 01       	movw	r30, r28
    5064:	e2 0f       	add	r30, r18
    5066:	f3 1f       	adc	r31, r19
    5068:	81 93       	st	Z+, r24
    506a:	91 93       	st	Z+, r25
    506c:	22 50       	subi	r18, 0x02	; 2
    506e:	31 09       	sbc	r19, r1
    5070:	39 83       	std	Y+1, r19	; 0x01
    5072:	28 83       	st	Y, r18
    5074:	3a c0       	rjmp	.+116    	; 0x50ea <malloc+0x124>
    5076:	20 91 8d 05 	lds	r18, 0x058D	; 0x80058d <__brkval>
    507a:	30 91 8e 05 	lds	r19, 0x058E	; 0x80058e <__brkval+0x1>
    507e:	23 2b       	or	r18, r19
    5080:	41 f4       	brne	.+16     	; 0x5092 <malloc+0xcc>
    5082:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    5086:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    508a:	30 93 8e 05 	sts	0x058E, r19	; 0x80058e <__brkval+0x1>
    508e:	20 93 8d 05 	sts	0x058D, r18	; 0x80058d <__brkval>
    5092:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    5096:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    509a:	21 15       	cp	r18, r1
    509c:	31 05       	cpc	r19, r1
    509e:	41 f4       	brne	.+16     	; 0x50b0 <malloc+0xea>
    50a0:	2d b7       	in	r18, 0x3d	; 61
    50a2:	3e b7       	in	r19, 0x3e	; 62
    50a4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    50a8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    50ac:	24 1b       	sub	r18, r20
    50ae:	35 0b       	sbc	r19, r21
    50b0:	e0 91 8d 05 	lds	r30, 0x058D	; 0x80058d <__brkval>
    50b4:	f0 91 8e 05 	lds	r31, 0x058E	; 0x80058e <__brkval+0x1>
    50b8:	e2 17       	cp	r30, r18
    50ba:	f3 07       	cpc	r31, r19
    50bc:	a0 f4       	brcc	.+40     	; 0x50e6 <malloc+0x120>
    50be:	2e 1b       	sub	r18, r30
    50c0:	3f 0b       	sbc	r19, r31
    50c2:	28 17       	cp	r18, r24
    50c4:	39 07       	cpc	r19, r25
    50c6:	78 f0       	brcs	.+30     	; 0x50e6 <malloc+0x120>
    50c8:	ac 01       	movw	r20, r24
    50ca:	4e 5f       	subi	r20, 0xFE	; 254
    50cc:	5f 4f       	sbci	r21, 0xFF	; 255
    50ce:	24 17       	cp	r18, r20
    50d0:	35 07       	cpc	r19, r21
    50d2:	48 f0       	brcs	.+18     	; 0x50e6 <malloc+0x120>
    50d4:	4e 0f       	add	r20, r30
    50d6:	5f 1f       	adc	r21, r31
    50d8:	50 93 8e 05 	sts	0x058E, r21	; 0x80058e <__brkval+0x1>
    50dc:	40 93 8d 05 	sts	0x058D, r20	; 0x80058d <__brkval>
    50e0:	81 93       	st	Z+, r24
    50e2:	91 93       	st	Z+, r25
    50e4:	02 c0       	rjmp	.+4      	; 0x50ea <malloc+0x124>
    50e6:	e0 e0       	ldi	r30, 0x00	; 0
    50e8:	f0 e0       	ldi	r31, 0x00	; 0
    50ea:	cf 01       	movw	r24, r30
    50ec:	df 91       	pop	r29
    50ee:	cf 91       	pop	r28
    50f0:	1f 91       	pop	r17
    50f2:	0f 91       	pop	r16
    50f4:	08 95       	ret

000050f6 <free>:
    50f6:	cf 93       	push	r28
    50f8:	df 93       	push	r29
    50fa:	00 97       	sbiw	r24, 0x00	; 0
    50fc:	09 f4       	brne	.+2      	; 0x5100 <free+0xa>
    50fe:	81 c0       	rjmp	.+258    	; 0x5202 <free+0x10c>
    5100:	fc 01       	movw	r30, r24
    5102:	32 97       	sbiw	r30, 0x02	; 2
    5104:	13 82       	std	Z+3, r1	; 0x03
    5106:	12 82       	std	Z+2, r1	; 0x02
    5108:	a0 91 8f 05 	lds	r26, 0x058F	; 0x80058f <__flp>
    510c:	b0 91 90 05 	lds	r27, 0x0590	; 0x800590 <__flp+0x1>
    5110:	10 97       	sbiw	r26, 0x00	; 0
    5112:	81 f4       	brne	.+32     	; 0x5134 <free+0x3e>
    5114:	20 81       	ld	r18, Z
    5116:	31 81       	ldd	r19, Z+1	; 0x01
    5118:	82 0f       	add	r24, r18
    511a:	93 1f       	adc	r25, r19
    511c:	20 91 8d 05 	lds	r18, 0x058D	; 0x80058d <__brkval>
    5120:	30 91 8e 05 	lds	r19, 0x058E	; 0x80058e <__brkval+0x1>
    5124:	28 17       	cp	r18, r24
    5126:	39 07       	cpc	r19, r25
    5128:	51 f5       	brne	.+84     	; 0x517e <free+0x88>
    512a:	f0 93 8e 05 	sts	0x058E, r31	; 0x80058e <__brkval+0x1>
    512e:	e0 93 8d 05 	sts	0x058D, r30	; 0x80058d <__brkval>
    5132:	67 c0       	rjmp	.+206    	; 0x5202 <free+0x10c>
    5134:	ed 01       	movw	r28, r26
    5136:	20 e0       	ldi	r18, 0x00	; 0
    5138:	30 e0       	ldi	r19, 0x00	; 0
    513a:	ce 17       	cp	r28, r30
    513c:	df 07       	cpc	r29, r31
    513e:	40 f4       	brcc	.+16     	; 0x5150 <free+0x5a>
    5140:	4a 81       	ldd	r20, Y+2	; 0x02
    5142:	5b 81       	ldd	r21, Y+3	; 0x03
    5144:	9e 01       	movw	r18, r28
    5146:	41 15       	cp	r20, r1
    5148:	51 05       	cpc	r21, r1
    514a:	f1 f0       	breq	.+60     	; 0x5188 <free+0x92>
    514c:	ea 01       	movw	r28, r20
    514e:	f5 cf       	rjmp	.-22     	; 0x513a <free+0x44>
    5150:	d3 83       	std	Z+3, r29	; 0x03
    5152:	c2 83       	std	Z+2, r28	; 0x02
    5154:	40 81       	ld	r20, Z
    5156:	51 81       	ldd	r21, Z+1	; 0x01
    5158:	84 0f       	add	r24, r20
    515a:	95 1f       	adc	r25, r21
    515c:	c8 17       	cp	r28, r24
    515e:	d9 07       	cpc	r29, r25
    5160:	59 f4       	brne	.+22     	; 0x5178 <free+0x82>
    5162:	88 81       	ld	r24, Y
    5164:	99 81       	ldd	r25, Y+1	; 0x01
    5166:	84 0f       	add	r24, r20
    5168:	95 1f       	adc	r25, r21
    516a:	02 96       	adiw	r24, 0x02	; 2
    516c:	91 83       	std	Z+1, r25	; 0x01
    516e:	80 83       	st	Z, r24
    5170:	8a 81       	ldd	r24, Y+2	; 0x02
    5172:	9b 81       	ldd	r25, Y+3	; 0x03
    5174:	93 83       	std	Z+3, r25	; 0x03
    5176:	82 83       	std	Z+2, r24	; 0x02
    5178:	21 15       	cp	r18, r1
    517a:	31 05       	cpc	r19, r1
    517c:	29 f4       	brne	.+10     	; 0x5188 <free+0x92>
    517e:	f0 93 90 05 	sts	0x0590, r31	; 0x800590 <__flp+0x1>
    5182:	e0 93 8f 05 	sts	0x058F, r30	; 0x80058f <__flp>
    5186:	3d c0       	rjmp	.+122    	; 0x5202 <free+0x10c>
    5188:	e9 01       	movw	r28, r18
    518a:	fb 83       	std	Y+3, r31	; 0x03
    518c:	ea 83       	std	Y+2, r30	; 0x02
    518e:	49 91       	ld	r20, Y+
    5190:	59 91       	ld	r21, Y+
    5192:	c4 0f       	add	r28, r20
    5194:	d5 1f       	adc	r29, r21
    5196:	ec 17       	cp	r30, r28
    5198:	fd 07       	cpc	r31, r29
    519a:	61 f4       	brne	.+24     	; 0x51b4 <free+0xbe>
    519c:	80 81       	ld	r24, Z
    519e:	91 81       	ldd	r25, Z+1	; 0x01
    51a0:	84 0f       	add	r24, r20
    51a2:	95 1f       	adc	r25, r21
    51a4:	02 96       	adiw	r24, 0x02	; 2
    51a6:	e9 01       	movw	r28, r18
    51a8:	99 83       	std	Y+1, r25	; 0x01
    51aa:	88 83       	st	Y, r24
    51ac:	82 81       	ldd	r24, Z+2	; 0x02
    51ae:	93 81       	ldd	r25, Z+3	; 0x03
    51b0:	9b 83       	std	Y+3, r25	; 0x03
    51b2:	8a 83       	std	Y+2, r24	; 0x02
    51b4:	e0 e0       	ldi	r30, 0x00	; 0
    51b6:	f0 e0       	ldi	r31, 0x00	; 0
    51b8:	12 96       	adiw	r26, 0x02	; 2
    51ba:	8d 91       	ld	r24, X+
    51bc:	9c 91       	ld	r25, X
    51be:	13 97       	sbiw	r26, 0x03	; 3
    51c0:	00 97       	sbiw	r24, 0x00	; 0
    51c2:	19 f0       	breq	.+6      	; 0x51ca <free+0xd4>
    51c4:	fd 01       	movw	r30, r26
    51c6:	dc 01       	movw	r26, r24
    51c8:	f7 cf       	rjmp	.-18     	; 0x51b8 <free+0xc2>
    51ca:	8d 91       	ld	r24, X+
    51cc:	9c 91       	ld	r25, X
    51ce:	11 97       	sbiw	r26, 0x01	; 1
    51d0:	9d 01       	movw	r18, r26
    51d2:	2e 5f       	subi	r18, 0xFE	; 254
    51d4:	3f 4f       	sbci	r19, 0xFF	; 255
    51d6:	82 0f       	add	r24, r18
    51d8:	93 1f       	adc	r25, r19
    51da:	20 91 8d 05 	lds	r18, 0x058D	; 0x80058d <__brkval>
    51de:	30 91 8e 05 	lds	r19, 0x058E	; 0x80058e <__brkval+0x1>
    51e2:	28 17       	cp	r18, r24
    51e4:	39 07       	cpc	r19, r25
    51e6:	69 f4       	brne	.+26     	; 0x5202 <free+0x10c>
    51e8:	30 97       	sbiw	r30, 0x00	; 0
    51ea:	29 f4       	brne	.+10     	; 0x51f6 <free+0x100>
    51ec:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <__flp+0x1>
    51f0:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <__flp>
    51f4:	02 c0       	rjmp	.+4      	; 0x51fa <free+0x104>
    51f6:	13 82       	std	Z+3, r1	; 0x03
    51f8:	12 82       	std	Z+2, r1	; 0x02
    51fa:	b0 93 8e 05 	sts	0x058E, r27	; 0x80058e <__brkval+0x1>
    51fe:	a0 93 8d 05 	sts	0x058D, r26	; 0x80058d <__brkval>
    5202:	df 91       	pop	r29
    5204:	cf 91       	pop	r28
    5206:	08 95       	ret

00005208 <abort>:
    5208:	81 e0       	ldi	r24, 0x01	; 1
    520a:	90 e0       	ldi	r25, 0x00	; 0
    520c:	f8 94       	cli
    520e:	0c 94 30 29 	jmp	0x5260	; 0x5260 <_exit>

00005212 <memcmp>:
    5212:	fb 01       	movw	r30, r22
    5214:	dc 01       	movw	r26, r24
    5216:	04 c0       	rjmp	.+8      	; 0x5220 <memcmp+0xe>
    5218:	8d 91       	ld	r24, X+
    521a:	01 90       	ld	r0, Z+
    521c:	80 19       	sub	r24, r0
    521e:	21 f4       	brne	.+8      	; 0x5228 <memcmp+0x16>
    5220:	41 50       	subi	r20, 0x01	; 1
    5222:	50 40       	sbci	r21, 0x00	; 0
    5224:	c8 f7       	brcc	.-14     	; 0x5218 <memcmp+0x6>
    5226:	88 1b       	sub	r24, r24
    5228:	99 0b       	sbc	r25, r25
    522a:	08 95       	ret

0000522c <strchr>:
    522c:	fc 01       	movw	r30, r24
    522e:	81 91       	ld	r24, Z+
    5230:	86 17       	cp	r24, r22
    5232:	21 f0       	breq	.+8      	; 0x523c <strchr+0x10>
    5234:	88 23       	and	r24, r24
    5236:	d9 f7       	brne	.-10     	; 0x522e <strchr+0x2>
    5238:	99 27       	eor	r25, r25
    523a:	08 95       	ret
    523c:	31 97       	sbiw	r30, 0x01	; 1
    523e:	cf 01       	movw	r24, r30
    5240:	08 95       	ret

00005242 <strncpy>:
    5242:	fb 01       	movw	r30, r22
    5244:	dc 01       	movw	r26, r24
    5246:	41 50       	subi	r20, 0x01	; 1
    5248:	50 40       	sbci	r21, 0x00	; 0
    524a:	48 f0       	brcs	.+18     	; 0x525e <strncpy+0x1c>
    524c:	01 90       	ld	r0, Z+
    524e:	0d 92       	st	X+, r0
    5250:	00 20       	and	r0, r0
    5252:	c9 f7       	brne	.-14     	; 0x5246 <strncpy+0x4>
    5254:	01 c0       	rjmp	.+2      	; 0x5258 <strncpy+0x16>
    5256:	1d 92       	st	X+, r1
    5258:	41 50       	subi	r20, 0x01	; 1
    525a:	50 40       	sbci	r21, 0x00	; 0
    525c:	e0 f7       	brcc	.-8      	; 0x5256 <strncpy+0x14>
    525e:	08 95       	ret

00005260 <_exit>:
    5260:	f8 94       	cli

00005262 <__stop_program>:
    5262:	ff cf       	rjmp	.-2      	; 0x5262 <__stop_program>
