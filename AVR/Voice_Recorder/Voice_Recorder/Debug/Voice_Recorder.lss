
Voice_Recorder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000170  00800100  00006584  00006618  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006584  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fc  00800270  00800270  00006788  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006788  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000067b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000d50  00000000  00000000  000067f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002ada6  00000000  00000000  00007548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000551e  00000000  00000000  000322ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009f18  00000000  00000000  0003780c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000030d8  00000000  00000000  00041724  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006b86  00000000  00000000  000447fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00013787  00000000  00000000  0004b382  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e40  00000000  00000000  0005eb09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 01 	jmp	0x26a	; 0x26a <__dtors_end>
       4:	0c 94 bb 04 	jmp	0x976	; 0x976 <__vector_1>
       8:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__vector_2>
       c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      10:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      14:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      18:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      1c:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <__vector_7>
      20:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      24:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      28:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      2c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      30:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      34:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      38:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      3c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      40:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__vector_16>
      44:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      48:	0c 94 97 02 	jmp	0x52e	; 0x52e <__vector_18>
      4c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__vector_19>
      50:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      54:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      58:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      5c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      60:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <__vector_24>
      64:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      68:	1a 0b       	sbc	r17, r26
      6a:	1e 0b       	sbc	r17, r30
      6c:	1e 0b       	sbc	r17, r30
      6e:	1e 0b       	sbc	r17, r30
      70:	1e 0b       	sbc	r17, r30
      72:	1e 0b       	sbc	r17, r30
      74:	1e 0b       	sbc	r17, r30
      76:	1e 0b       	sbc	r17, r30
      78:	2e 0a       	sbc	r2, r30
      7a:	1e 0b       	sbc	r17, r30
      7c:	1e 0b       	sbc	r17, r30
      7e:	1e 0b       	sbc	r17, r30
      80:	1e 0b       	sbc	r17, r30
      82:	1e 0b       	sbc	r17, r30
      84:	1e 0b       	sbc	r17, r30
      86:	1e 0b       	sbc	r17, r30
      88:	2e 0a       	sbc	r2, r30
      8a:	1e 0b       	sbc	r17, r30
      8c:	1e 0b       	sbc	r17, r30
      8e:	1e 0b       	sbc	r17, r30
      90:	1e 0b       	sbc	r17, r30
      92:	1e 0b       	sbc	r17, r30
      94:	1e 0b       	sbc	r17, r30
      96:	1e 0b       	sbc	r17, r30
      98:	36 0a       	sbc	r3, r22
      9a:	1e 0b       	sbc	r17, r30
      9c:	1e 0b       	sbc	r17, r30
      9e:	1e 0b       	sbc	r17, r30
      a0:	1e 0b       	sbc	r17, r30
      a2:	1e 0b       	sbc	r17, r30
      a4:	1e 0b       	sbc	r17, r30
      a6:	1e 0b       	sbc	r17, r30
      a8:	5c 0a       	sbc	r5, r28
      aa:	1e 0b       	sbc	r17, r30
      ac:	1e 0b       	sbc	r17, r30
      ae:	1e 0b       	sbc	r17, r30
      b0:	1e 0b       	sbc	r17, r30
      b2:	1e 0b       	sbc	r17, r30
      b4:	1e 0b       	sbc	r17, r30
      b6:	1e 0b       	sbc	r17, r30
      b8:	36 0a       	sbc	r3, r22
      ba:	1e 0b       	sbc	r17, r30
      bc:	1e 0b       	sbc	r17, r30
      be:	1e 0b       	sbc	r17, r30
      c0:	1e 0b       	sbc	r17, r30
      c2:	1e 0b       	sbc	r17, r30
      c4:	1e 0b       	sbc	r17, r30
      c6:	1e 0b       	sbc	r17, r30
      c8:	62 0a       	sbc	r6, r18
      ca:	1e 0b       	sbc	r17, r30
      cc:	1e 0b       	sbc	r17, r30
      ce:	1e 0b       	sbc	r17, r30
      d0:	1e 0b       	sbc	r17, r30
      d2:	1e 0b       	sbc	r17, r30
      d4:	1e 0b       	sbc	r17, r30
      d6:	1e 0b       	sbc	r17, r30
      d8:	68 0a       	sbc	r6, r24
      da:	1e 0b       	sbc	r17, r30
      dc:	1e 0b       	sbc	r17, r30
      de:	1e 0b       	sbc	r17, r30
      e0:	1e 0b       	sbc	r17, r30
      e2:	1e 0b       	sbc	r17, r30
      e4:	1e 0b       	sbc	r17, r30
      e6:	1e 0b       	sbc	r17, r30
      e8:	7a 0a       	sbc	r7, r26
      ea:	1e 0b       	sbc	r17, r30
      ec:	1e 0b       	sbc	r17, r30
      ee:	1e 0b       	sbc	r17, r30
      f0:	1e 0b       	sbc	r17, r30
      f2:	1e 0b       	sbc	r17, r30
      f4:	1e 0b       	sbc	r17, r30
      f6:	1e 0b       	sbc	r17, r30
      f8:	a4 0a       	sbc	r10, r20
      fa:	1e 0b       	sbc	r17, r30
      fc:	1e 0b       	sbc	r17, r30
      fe:	1e 0b       	sbc	r17, r30
     100:	1e 0b       	sbc	r17, r30
     102:	1e 0b       	sbc	r17, r30
     104:	1e 0b       	sbc	r17, r30
     106:	1e 0b       	sbc	r17, r30
     108:	6e 0a       	sbc	r6, r30
     10a:	1e 0b       	sbc	r17, r30
     10c:	1e 0b       	sbc	r17, r30
     10e:	1e 0b       	sbc	r17, r30
     110:	1e 0b       	sbc	r17, r30
     112:	1e 0b       	sbc	r17, r30
     114:	1e 0b       	sbc	r17, r30
     116:	1e 0b       	sbc	r17, r30
     118:	88 0a       	sbc	r8, r24
     11a:	1e 0b       	sbc	r17, r30
     11c:	1e 0b       	sbc	r17, r30
     11e:	1e 0b       	sbc	r17, r30
     120:	1e 0b       	sbc	r17, r30
     122:	1e 0b       	sbc	r17, r30
     124:	1e 0b       	sbc	r17, r30
     126:	1e 0b       	sbc	r17, r30
     128:	a7 0a       	sbc	r10, r23
     12a:	1e 0b       	sbc	r17, r30
     12c:	1e 0b       	sbc	r17, r30
     12e:	1e 0b       	sbc	r17, r30
     130:	1e 0b       	sbc	r17, r30
     132:	1e 0b       	sbc	r17, r30
     134:	1e 0b       	sbc	r17, r30
     136:	1e 0b       	sbc	r17, r30
     138:	a7 0a       	sbc	r10, r23
     13a:	1e 0b       	sbc	r17, r30
     13c:	1e 0b       	sbc	r17, r30
     13e:	1e 0b       	sbc	r17, r30
     140:	1e 0b       	sbc	r17, r30
     142:	1e 0b       	sbc	r17, r30
     144:	1e 0b       	sbc	r17, r30
     146:	1e 0b       	sbc	r17, r30
     148:	a7 0a       	sbc	r10, r23
     14a:	1e 0b       	sbc	r17, r30
     14c:	1e 0b       	sbc	r17, r30
     14e:	1e 0b       	sbc	r17, r30
     150:	1e 0b       	sbc	r17, r30
     152:	1e 0b       	sbc	r17, r30
     154:	1e 0b       	sbc	r17, r30
     156:	1e 0b       	sbc	r17, r30
     158:	a7 0a       	sbc	r10, r23
     15a:	1e 0b       	sbc	r17, r30
     15c:	1e 0b       	sbc	r17, r30
     15e:	1e 0b       	sbc	r17, r30
     160:	1e 0b       	sbc	r17, r30
     162:	1e 0b       	sbc	r17, r30
     164:	1e 0b       	sbc	r17, r30
     166:	1e 0b       	sbc	r17, r30
     168:	b0 0a       	sbc	r11, r16
     16a:	1e 0b       	sbc	r17, r30
     16c:	1e 0b       	sbc	r17, r30
     16e:	1e 0b       	sbc	r17, r30
     170:	1e 0b       	sbc	r17, r30
     172:	1e 0b       	sbc	r17, r30
     174:	1e 0b       	sbc	r17, r30
     176:	1e 0b       	sbc	r17, r30
     178:	e1 0a       	sbc	r14, r17
     17a:	1e 0b       	sbc	r17, r30
     17c:	1e 0b       	sbc	r17, r30
     17e:	1e 0b       	sbc	r17, r30
     180:	1e 0b       	sbc	r17, r30
     182:	1e 0b       	sbc	r17, r30
     184:	1e 0b       	sbc	r17, r30
     186:	1e 0b       	sbc	r17, r30
     188:	b0 0a       	sbc	r11, r16
     18a:	1e 0b       	sbc	r17, r30
     18c:	1e 0b       	sbc	r17, r30
     18e:	1e 0b       	sbc	r17, r30
     190:	1e 0b       	sbc	r17, r30
     192:	1e 0b       	sbc	r17, r30
     194:	1e 0b       	sbc	r17, r30
     196:	1e 0b       	sbc	r17, r30
     198:	e1 0a       	sbc	r14, r17
     19a:	1e 0b       	sbc	r17, r30
     19c:	1e 0b       	sbc	r17, r30
     19e:	1e 0b       	sbc	r17, r30
     1a0:	1e 0b       	sbc	r17, r30
     1a2:	1e 0b       	sbc	r17, r30
     1a4:	1e 0b       	sbc	r17, r30
     1a6:	1e 0b       	sbc	r17, r30
     1a8:	c8 0a       	sbc	r12, r24
     1aa:	1e 0b       	sbc	r17, r30
     1ac:	1e 0b       	sbc	r17, r30
     1ae:	1e 0b       	sbc	r17, r30
     1b0:	1e 0b       	sbc	r17, r30
     1b2:	1e 0b       	sbc	r17, r30
     1b4:	1e 0b       	sbc	r17, r30
     1b6:	1e 0b       	sbc	r17, r30
     1b8:	e5 0a       	sbc	r14, r21
     1ba:	1e 0b       	sbc	r17, r30
     1bc:	1e 0b       	sbc	r17, r30
     1be:	1e 0b       	sbc	r17, r30
     1c0:	1e 0b       	sbc	r17, r30
     1c2:	1e 0b       	sbc	r17, r30
     1c4:	1e 0b       	sbc	r17, r30
     1c6:	1e 0b       	sbc	r17, r30
     1c8:	e5 0a       	sbc	r14, r21
     1ca:	1e 0b       	sbc	r17, r30
     1cc:	1e 0b       	sbc	r17, r30
     1ce:	1e 0b       	sbc	r17, r30
     1d0:	1e 0b       	sbc	r17, r30
     1d2:	1e 0b       	sbc	r17, r30
     1d4:	1e 0b       	sbc	r17, r30
     1d6:	1e 0b       	sbc	r17, r30
     1d8:	fa 0a       	sbc	r15, r26
     1da:	1e 0b       	sbc	r17, r30
     1dc:	1e 0b       	sbc	r17, r30
     1de:	1e 0b       	sbc	r17, r30
     1e0:	1e 0b       	sbc	r17, r30
     1e2:	1e 0b       	sbc	r17, r30
     1e4:	1e 0b       	sbc	r17, r30
     1e6:	1e 0b       	sbc	r17, r30
     1e8:	14 0b       	sbc	r17, r20
     1ea:	1e 0b       	sbc	r17, r30
     1ec:	1e 0b       	sbc	r17, r30
     1ee:	1e 0b       	sbc	r17, r30
     1f0:	1e 0b       	sbc	r17, r30
     1f2:	1e 0b       	sbc	r17, r30
     1f4:	1e 0b       	sbc	r17, r30
     1f6:	1e 0b       	sbc	r17, r30
     1f8:	14 0b       	sbc	r17, r20

000001fa <__trampolines_end>:
     1fa:	02 00       	Address 0x000001fa is out of bounds.
.word	0xffff	; ????

000001fb <digital_pin_to_timer_PGM>:
     1fb:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     20b:	00 00 00 00                                         ....

0000020f <digital_pin_to_bit_mask_PGM>:
     20f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     21f:	04 08 10 20                                         ... 

00000223 <digital_pin_to_port_PGM>:
     223:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     233:	03 03 03 03                                         ....

00000237 <port_to_output_PGM>:
     237:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000241 <port_to_mode_PGM>:
     241:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000024b <_ZZN6SdFile10make83NameEPKcPhE3__c>:
     24b:	7c 3c 3e 5e 2b 3d 3f 2f 5b 5d 3b 2c 2a 22 5c 00     |<>^+=?/[];,*"\.
	...

0000025c <__ctors_start>:
     25c:	f5 02       	muls	r31, r21
     25e:	50 03       	mulsu	r21, r16
     260:	3e 0c       	add	r3, r14
     262:	3f 11       	cpse	r19, r15
     264:	c4 14       	cp	r12, r4
     266:	da 2d       	mov	r29, r10

00000268 <__ctors_end>:
     268:	e1 2d       	mov	r30, r1

0000026a <__dtors_end>:
     26a:	11 24       	eor	r1, r1
     26c:	1f be       	out	0x3f, r1	; 63
     26e:	cf ef       	ldi	r28, 0xFF	; 255
     270:	d8 e0       	ldi	r29, 0x08	; 8
     272:	de bf       	out	0x3e, r29	; 62
     274:	cd bf       	out	0x3d, r28	; 61

00000276 <__do_copy_data>:
     276:	12 e0       	ldi	r17, 0x02	; 2
     278:	a0 e0       	ldi	r26, 0x00	; 0
     27a:	b1 e0       	ldi	r27, 0x01	; 1
     27c:	e4 e8       	ldi	r30, 0x84	; 132
     27e:	f5 e6       	ldi	r31, 0x65	; 101
     280:	02 c0       	rjmp	.+4      	; 0x286 <__do_copy_data+0x10>
     282:	05 90       	lpm	r0, Z+
     284:	0d 92       	st	X+, r0
     286:	a0 37       	cpi	r26, 0x70	; 112
     288:	b1 07       	cpc	r27, r17
     28a:	d9 f7       	brne	.-10     	; 0x282 <__do_copy_data+0xc>

0000028c <__do_clear_bss>:
     28c:	26 e0       	ldi	r18, 0x06	; 6
     28e:	a0 e7       	ldi	r26, 0x70	; 112
     290:	b2 e0       	ldi	r27, 0x02	; 2
     292:	01 c0       	rjmp	.+2      	; 0x296 <.do_clear_bss_start>

00000294 <.do_clear_bss_loop>:
     294:	1d 92       	st	X+, r1

00000296 <.do_clear_bss_start>:
     296:	ac 36       	cpi	r26, 0x6C	; 108
     298:	b2 07       	cpc	r27, r18
     29a:	e1 f7       	brne	.-8      	; 0x294 <.do_clear_bss_loop>

0000029c <__do_global_ctors>:
     29c:	11 e0       	ldi	r17, 0x01	; 1
     29e:	c4 e3       	ldi	r28, 0x34	; 52
     2a0:	d1 e0       	ldi	r29, 0x01	; 1
     2a2:	04 c0       	rjmp	.+8      	; 0x2ac <__do_global_ctors+0x10>
     2a4:	21 97       	sbiw	r28, 0x01	; 1
     2a6:	fe 01       	movw	r30, r28
     2a8:	0e 94 27 30 	call	0x604e	; 0x604e <__tablejump2__>
     2ac:	ce 32       	cpi	r28, 0x2E	; 46
     2ae:	d1 07       	cpc	r29, r17
     2b0:	c9 f7       	brne	.-14     	; 0x2a4 <__do_global_ctors+0x8>
     2b2:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <main>
     2b6:	0c 94 b5 32 	jmp	0x656a	; 0x656a <__do_global_dtors>

000002ba <__bad_interrupt>:
     2ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002be <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
     2be:	0e 94 42 32 	call	0x6484	; 0x6484 <abort>

000002c2 <_ZN14HardwareSerial9availableEv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     2c2:	fc 01       	movw	r30, r24
     2c4:	21 8d       	ldd	r18, Z+25	; 0x19
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	20 5c       	subi	r18, 0xC0	; 192
     2ca:	3f 4f       	sbci	r19, 0xFF	; 255
     2cc:	82 8d       	ldd	r24, Z+26	; 0x1a
     2ce:	a9 01       	movw	r20, r18
     2d0:	48 1b       	sub	r20, r24
     2d2:	51 09       	sbc	r21, r1
     2d4:	ca 01       	movw	r24, r20
     2d6:	8f 73       	andi	r24, 0x3F	; 63
     2d8:	99 27       	eor	r25, r25
     2da:	08 95       	ret

000002dc <_ZN14HardwareSerial4peekEv>:
     2dc:	fc 01       	movw	r30, r24
     2de:	91 8d       	ldd	r25, Z+25	; 0x19
     2e0:	82 8d       	ldd	r24, Z+26	; 0x1a
     2e2:	98 17       	cp	r25, r24
     2e4:	31 f0       	breq	.+12     	; 0x2f2 <_ZN14HardwareSerial4peekEv+0x16>
     2e6:	82 8d       	ldd	r24, Z+26	; 0x1a
     2e8:	e8 0f       	add	r30, r24
     2ea:	f1 1d       	adc	r31, r1
     2ec:	85 8d       	ldd	r24, Z+29	; 0x1d
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	08 95       	ret
     2f2:	8f ef       	ldi	r24, 0xFF	; 255
     2f4:	9f ef       	ldi	r25, 0xFF	; 255
     2f6:	08 95       	ret

000002f8 <_ZN14HardwareSerial4readEv>:
     2f8:	fc 01       	movw	r30, r24
     2fa:	91 8d       	ldd	r25, Z+25	; 0x19
     2fc:	82 8d       	ldd	r24, Z+26	; 0x1a
     2fe:	98 17       	cp	r25, r24
     300:	61 f0       	breq	.+24     	; 0x31a <_ZN14HardwareSerial4readEv+0x22>
     302:	82 8d       	ldd	r24, Z+26	; 0x1a
     304:	df 01       	movw	r26, r30
     306:	a8 0f       	add	r26, r24
     308:	b1 1d       	adc	r27, r1
     30a:	5d 96       	adiw	r26, 0x1d	; 29
     30c:	8c 91       	ld	r24, X
     30e:	92 8d       	ldd	r25, Z+26	; 0x1a
     310:	9f 5f       	subi	r25, 0xFF	; 255
     312:	9f 73       	andi	r25, 0x3F	; 63
     314:	92 8f       	std	Z+26, r25	; 0x1a
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	08 95       	ret
     31a:	8f ef       	ldi	r24, 0xFF	; 255
     31c:	9f ef       	ldi	r25, 0xFF	; 255
     31e:	08 95       	ret

00000320 <_ZN14HardwareSerial17availableForWriteEv>:
     320:	fc 01       	movw	r30, r24
     322:	23 8d       	ldd	r18, Z+27	; 0x1b
     324:	34 8d       	ldd	r19, Z+28	; 0x1c
     326:	23 17       	cp	r18, r19
     328:	38 f0       	brcs	.+14     	; 0x338 <_ZN14HardwareSerial17availableForWriteEv+0x18>
     32a:	8f e3       	ldi	r24, 0x3F	; 63
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	82 1b       	sub	r24, r18
     330:	91 09       	sbc	r25, r1
     332:	83 0f       	add	r24, r19
     334:	91 1d       	adc	r25, r1
     336:	08 95       	ret
     338:	83 2f       	mov	r24, r19
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	82 1b       	sub	r24, r18
     33e:	91 09       	sbc	r25, r1
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	08 95       	ret

00000344 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     344:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     346:	84 8d       	ldd	r24, Z+28	; 0x1c
     348:	df 01       	movw	r26, r30
     34a:	a8 0f       	add	r26, r24
     34c:	b1 1d       	adc	r27, r1
     34e:	a3 5a       	subi	r26, 0xA3	; 163
     350:	bf 4f       	sbci	r27, 0xFF	; 255
     352:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     354:	24 8d       	ldd	r18, Z+28	; 0x1c
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	2f 5f       	subi	r18, 0xFF	; 255
     35a:	3f 4f       	sbci	r19, 0xFF	; 255
     35c:	2f 73       	andi	r18, 0x3F	; 63
     35e:	30 78       	andi	r19, 0x80	; 128
     360:	33 23       	and	r19, r19
     362:	34 f4       	brge	.+12     	; 0x370 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
     364:	21 50       	subi	r18, 0x01	; 1
     366:	31 09       	sbc	r19, r1
     368:	20 6c       	ori	r18, 0xC0	; 192
     36a:	3f 6f       	ori	r19, 0xFF	; 255
     36c:	2f 5f       	subi	r18, 0xFF	; 255
     36e:	3f 4f       	sbci	r19, 0xFF	; 255
     370:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     372:	a6 89       	ldd	r26, Z+22	; 0x16
     374:	b7 89       	ldd	r27, Z+23	; 0x17
     376:	8c 93       	st	X, r24
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     378:	a0 89       	ldd	r26, Z+16	; 0x10
     37a:	b1 89       	ldd	r27, Z+17	; 0x11
     37c:	8c 91       	ld	r24, X
     37e:	83 70       	andi	r24, 0x03	; 3
     380:	80 64       	ori	r24, 0x40	; 64
     382:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     384:	93 8d       	ldd	r25, Z+27	; 0x1b
     386:	84 8d       	ldd	r24, Z+28	; 0x1c
     388:	98 13       	cpse	r25, r24
     38a:	06 c0       	rjmp	.+12     	; 0x398 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     38c:	02 88       	ldd	r0, Z+18	; 0x12
     38e:	f3 89       	ldd	r31, Z+19	; 0x13
     390:	e0 2d       	mov	r30, r0
     392:	80 81       	ld	r24, Z
     394:	8f 7d       	andi	r24, 0xDF	; 223
     396:	80 83       	st	Z, r24
     398:	08 95       	ret

0000039a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     3a2:	18 8d       	ldd	r17, Y+24	; 0x18
     3a4:	11 23       	and	r17, r17
     3a6:	29 f1       	breq	.+74     	; 0x3f2 <_ZN14HardwareSerial5flushEv+0x58>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     3a8:	ea 89       	ldd	r30, Y+18	; 0x12
     3aa:	fb 89       	ldd	r31, Y+19	; 0x13
     3ac:	80 81       	ld	r24, Z
     3ae:	85 fd       	sbrc	r24, 5
     3b0:	07 c0       	rjmp	.+14     	; 0x3c0 <_ZN14HardwareSerial5flushEv+0x26>
     3b2:	a8 89       	ldd	r26, Y+16	; 0x10
     3b4:	b9 89       	ldd	r27, Y+17	; 0x11
     3b6:	8c 91       	ld	r24, X
     3b8:	86 fd       	sbrc	r24, 6
     3ba:	04 c0       	rjmp	.+8      	; 0x3c4 <_ZN14HardwareSerial5flushEv+0x2a>
     3bc:	81 2f       	mov	r24, r17
     3be:	03 c0       	rjmp	.+6      	; 0x3c6 <_ZN14HardwareSerial5flushEv+0x2c>
     3c0:	81 2f       	mov	r24, r17
     3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <_ZN14HardwareSerial5flushEv+0x2c>
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	88 23       	and	r24, r24
     3c8:	a1 f0       	breq	.+40     	; 0x3f2 <_ZN14HardwareSerial5flushEv+0x58>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	07 fc       	sbrc	r0, 7
     3ce:	05 c0       	rjmp	.+10     	; 0x3da <_ZN14HardwareSerial5flushEv+0x40>
     3d0:	90 81       	ld	r25, Z
     3d2:	95 fd       	sbrc	r25, 5
     3d4:	03 c0       	rjmp	.+6      	; 0x3dc <_ZN14HardwareSerial5flushEv+0x42>
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	01 c0       	rjmp	.+2      	; 0x3dc <_ZN14HardwareSerial5flushEv+0x42>
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	88 23       	and	r24, r24
     3de:	21 f3       	breq	.-56     	; 0x3a8 <_ZN14HardwareSerial5flushEv+0xe>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     3e0:	e8 89       	ldd	r30, Y+16	; 0x10
     3e2:	f9 89       	ldd	r31, Y+17	; 0x11
     3e4:	80 81       	ld	r24, Z
     3e6:	85 ff       	sbrs	r24, 5
     3e8:	df cf       	rjmp	.-66     	; 0x3a8 <_ZN14HardwareSerial5flushEv+0xe>
	  _tx_udr_empty_irq();
     3ea:	ce 01       	movw	r24, r28
     3ec:	0e 94 a2 01 	call	0x344	; 0x344 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     3f0:	db cf       	rjmp	.-74     	; 0x3a8 <_ZN14HardwareSerial5flushEv+0xe>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	1f 91       	pop	r17
     3f8:	08 95       	ret

000003fa <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     3fa:	0f 93       	push	r16
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	ec 01       	movw	r28, r24
  _written = true;
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     408:	9b 8d       	ldd	r25, Y+27	; 0x1b
     40a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     40c:	98 13       	cpse	r25, r24
     40e:	07 c0       	rjmp	.+14     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     410:	e8 89       	ldd	r30, Y+16	; 0x10
     412:	f9 89       	ldd	r31, Y+17	; 0x11
     414:	80 81       	ld	r24, Z
     416:	85 fd       	sbrc	r24, 5
     418:	04 c0       	rjmp	.+8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	03 c0       	rjmp	.+6      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	01 c0       	rjmp	.+2      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	88 23       	and	r24, r24
     426:	91 f0       	breq	.+36     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     428:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     42a:	f8 94       	cli
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	99 23       	and	r25, r25
     430:	59 f0       	breq	.+22     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
      *_udr = c;
     432:	ee 89       	ldd	r30, Y+22	; 0x16
     434:	ff 89       	ldd	r31, Y+23	; 0x17
     436:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     438:	e8 89       	ldd	r30, Y+16	; 0x10
     43a:	f9 89       	ldd	r31, Y+17	; 0x11
     43c:	90 81       	ld	r25, Z
     43e:	93 70       	andi	r25, 0x03	; 3
     440:	90 64       	ori	r25, 0x40	; 64
     442:	90 83       	st	Z, r25
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	f3 cf       	rjmp	.-26     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     448:	8f bf       	out	0x3f, r24	; 63
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
#else
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
     44a:	34 c0       	rjmp	.+104    	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     44c:	2b 8d       	ldd	r18, Y+27	; 0x1b
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	2f 5f       	subi	r18, 0xFF	; 255
     452:	3f 4f       	sbci	r19, 0xFF	; 255
     454:	2f 73       	andi	r18, 0x3F	; 63
     456:	30 78       	andi	r19, 0x80	; 128
     458:	33 23       	and	r19, r19
     45a:	34 f4       	brge	.+12     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     45c:	21 50       	subi	r18, 0x01	; 1
     45e:	31 09       	sbc	r19, r1
     460:	20 6c       	ori	r18, 0xC0	; 192
     462:	3f 6f       	ori	r19, 0xFF	; 255
     464:	2f 5f       	subi	r18, 0xFF	; 255
     466:	3f 4f       	sbci	r19, 0xFF	; 255
     468:	16 2f       	mov	r17, r22
     46a:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     46c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     46e:	08 13       	cpse	r16, r24
     470:	0c c0       	rjmp	.+24     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
    if (bit_is_clear(SREG, SREG_I)) {
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	07 fc       	sbrc	r0, 7
     476:	fa cf       	rjmp	.-12     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     478:	e8 89       	ldd	r30, Y+16	; 0x10
     47a:	f9 89       	ldd	r31, Y+17	; 0x11
     47c:	80 81       	ld	r24, Z
     47e:	85 ff       	sbrs	r24, 5
     480:	f5 cf       	rjmp	.-22     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
	_tx_udr_empty_irq();
     482:	ce 01       	movw	r24, r28
     484:	0e 94 a2 01 	call	0x344	; 0x344 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     488:	f1 cf       	rjmp	.-30     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     48a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     48c:	fe 01       	movw	r30, r28
     48e:	e8 0f       	add	r30, r24
     490:	f1 1d       	adc	r31, r1
     492:	e3 5a       	subi	r30, 0xA3	; 163
     494:	ff 4f       	sbci	r31, 0xFF	; 255
     496:	10 83       	st	Z, r17

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     498:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     49a:	f8 94       	cli
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	88 23       	and	r24, r24
     4a0:	41 f0       	breq	.+16     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
    _tx_buffer_head = i;
     4a2:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     4a4:	ea 89       	ldd	r30, Y+18	; 0x12
     4a6:	fb 89       	ldd	r31, Y+19	; 0x13
     4a8:	80 81       	ld	r24, Z
     4aa:	80 62       	ori	r24, 0x20	; 32
     4ac:	80 83       	st	Z, r24
  _tx_buffer[_tx_buffer_head] = c;

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	f6 cf       	rjmp	.-20     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4b2:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	08 95       	ret

000004c2 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	08 95       	ret

000004c8 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     4c8:	08 95       	ret

000004ca <_Z41__static_initialization_and_destruction_0ii>:

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
     4ca:	01 97       	sbiw	r24, 0x01	; 1
     4cc:	79 f5       	brne	.+94     	; 0x52c <_Z41__static_initialization_and_destruction_0ii+0x62>
     4ce:	6f 3f       	cpi	r22, 0xFF	; 255
     4d0:	7f 4f       	sbci	r23, 0xFF	; 255
     4d2:	61 f5       	brne	.+88     	; 0x52c <_Z41__static_initialization_and_destruction_0ii+0x62>
     4d4:	e0 e7       	ldi	r30, 0x70	; 112
     4d6:	f2 e0       	ldi	r31, 0x02	; 2
     4d8:	13 82       	std	Z+3, r1	; 0x03
     4da:	12 82       	std	Z+2, r1	; 0x02
     4dc:	88 ee       	ldi	r24, 0xE8	; 232
     4de:	93 e0       	ldi	r25, 0x03	; 3
     4e0:	a0 e0       	ldi	r26, 0x00	; 0
     4e2:	b0 e0       	ldi	r27, 0x00	; 0
     4e4:	84 83       	std	Z+4, r24	; 0x04
     4e6:	95 83       	std	Z+5, r25	; 0x05
     4e8:	a6 83       	std	Z+6, r26	; 0x06
     4ea:	b7 83       	std	Z+7, r27	; 0x07
     4ec:	80 e7       	ldi	r24, 0x70	; 112
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	91 83       	std	Z+1, r25	; 0x01
     4f2:	80 83       	st	Z, r24
     4f4:	85 ec       	ldi	r24, 0xC5	; 197
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	95 87       	std	Z+13, r25	; 0x0d
     4fa:	84 87       	std	Z+12, r24	; 0x0c
     4fc:	84 ec       	ldi	r24, 0xC4	; 196
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	97 87       	std	Z+15, r25	; 0x0f
     502:	86 87       	std	Z+14, r24	; 0x0e
     504:	80 ec       	ldi	r24, 0xC0	; 192
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	91 8b       	std	Z+17, r25	; 0x11
     50a:	80 8b       	std	Z+16, r24	; 0x10
     50c:	81 ec       	ldi	r24, 0xC1	; 193
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	93 8b       	std	Z+19, r25	; 0x13
     512:	82 8b       	std	Z+18, r24	; 0x12
     514:	82 ec       	ldi	r24, 0xC2	; 194
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	95 8b       	std	Z+21, r25	; 0x15
     51a:	84 8b       	std	Z+20, r24	; 0x14
     51c:	86 ec       	ldi	r24, 0xC6	; 198
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	97 8b       	std	Z+23, r25	; 0x17
     522:	86 8b       	std	Z+22, r24	; 0x16
     524:	11 8e       	std	Z+25, r1	; 0x19
     526:	12 8e       	std	Z+26, r1	; 0x1a
     528:	13 8e       	std	Z+27, r1	; 0x1b
     52a:	14 8e       	std	Z+28, r1	; 0x1c
     52c:	08 95       	ret

0000052e <__vector_18>:
     52e:	1f 92       	push	r1
     530:	0f 92       	push	r0
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	0f 92       	push	r0
     536:	11 24       	eor	r1, r1
     538:	2f 93       	push	r18
     53a:	8f 93       	push	r24
     53c:	9f 93       	push	r25
     53e:	af 93       	push	r26
     540:	bf 93       	push	r27
     542:	ef 93       	push	r30
     544:	ff 93       	push	r31
     546:	e0 91 80 02 	lds	r30, 0x0280	; 0x800280 <__data_end+0x10>
     54a:	f0 91 81 02 	lds	r31, 0x0281	; 0x800281 <__data_end+0x11>
     54e:	80 81       	ld	r24, Z
     550:	82 fd       	sbrc	r24, 2
     552:	14 c0       	rjmp	.+40     	; 0x57c <__vector_18+0x4e>
     554:	e0 e7       	ldi	r30, 0x70	; 112
     556:	f2 e0       	ldi	r31, 0x02	; 2
     558:	a6 89       	ldd	r26, Z+22	; 0x16
     55a:	b7 89       	ldd	r27, Z+23	; 0x17
     55c:	2c 91       	ld	r18, X
     55e:	81 8d       	ldd	r24, Z+25	; 0x19
     560:	8f 5f       	subi	r24, 0xFF	; 255
     562:	8f 73       	andi	r24, 0x3F	; 63
     564:	92 8d       	ldd	r25, Z+26	; 0x1a
     566:	89 17       	cp	r24, r25
     568:	71 f0       	breq	.+28     	; 0x586 <__vector_18+0x58>
     56a:	df 01       	movw	r26, r30
     56c:	e1 8d       	ldd	r30, Z+25	; 0x19
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	e0 59       	subi	r30, 0x90	; 144
     572:	fd 4f       	sbci	r31, 0xFD	; 253
     574:	25 8f       	std	Z+29, r18	; 0x1d
     576:	59 96       	adiw	r26, 0x19	; 25
     578:	8c 93       	st	X, r24
     57a:	05 c0       	rjmp	.+10     	; 0x586 <__vector_18+0x58>
     57c:	e0 91 86 02 	lds	r30, 0x0286	; 0x800286 <__data_end+0x16>
     580:	f0 91 87 02 	lds	r31, 0x0287	; 0x800287 <__data_end+0x17>
     584:	80 81       	ld	r24, Z
     586:	ff 91       	pop	r31
     588:	ef 91       	pop	r30
     58a:	bf 91       	pop	r27
     58c:	af 91       	pop	r26
     58e:	9f 91       	pop	r25
     590:	8f 91       	pop	r24
     592:	2f 91       	pop	r18
     594:	0f 90       	pop	r0
     596:	0f be       	out	0x3f, r0	; 63
     598:	0f 90       	pop	r0
     59a:	1f 90       	pop	r1
     59c:	18 95       	reti

0000059e <__vector_19>:
     59e:	1f 92       	push	r1
     5a0:	0f 92       	push	r0
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	0f 92       	push	r0
     5a6:	11 24       	eor	r1, r1
     5a8:	2f 93       	push	r18
     5aa:	3f 93       	push	r19
     5ac:	4f 93       	push	r20
     5ae:	5f 93       	push	r21
     5b0:	6f 93       	push	r22
     5b2:	7f 93       	push	r23
     5b4:	8f 93       	push	r24
     5b6:	9f 93       	push	r25
     5b8:	af 93       	push	r26
     5ba:	bf 93       	push	r27
     5bc:	ef 93       	push	r30
     5be:	ff 93       	push	r31
     5c0:	80 e7       	ldi	r24, 0x70	; 112
     5c2:	92 e0       	ldi	r25, 0x02	; 2
     5c4:	0e 94 a2 01 	call	0x344	; 0x344 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     5c8:	ff 91       	pop	r31
     5ca:	ef 91       	pop	r30
     5cc:	bf 91       	pop	r27
     5ce:	af 91       	pop	r26
     5d0:	9f 91       	pop	r25
     5d2:	8f 91       	pop	r24
     5d4:	7f 91       	pop	r23
     5d6:	6f 91       	pop	r22
     5d8:	5f 91       	pop	r21
     5da:	4f 91       	pop	r20
     5dc:	3f 91       	pop	r19
     5de:	2f 91       	pop	r18
     5e0:	0f 90       	pop	r0
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	0f 90       	pop	r0
     5e6:	1f 90       	pop	r1
     5e8:	18 95       	reti

000005ea <_GLOBAL__sub_I___vector_18>:
     5ea:	6f ef       	ldi	r22, 0xFF	; 255
     5ec:	7f ef       	ldi	r23, 0xFF	; 255
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 65 02 	call	0x4ca	; 0x4ca <_Z41__static_initialization_and_destruction_0ii>
     5f6:	08 95       	ret

000005f8 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
     5f8:	08 95       	ret

000005fa <_ZNK9IPAddress7printToER5Print>:
}

bool IPAddress::operator==(const uint8_t* addr) const
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}
     5fa:	cf 92       	push	r12
     5fc:	df 92       	push	r13
     5fe:	ef 92       	push	r14
     600:	ff 92       	push	r15
     602:	0f 93       	push	r16
     604:	1f 93       	push	r17
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	6c 01       	movw	r12, r24
     60c:	7b 01       	movw	r14, r22
     60e:	00 e0       	ldi	r16, 0x00	; 0
     610:	10 e0       	ldi	r17, 0x00	; 0
     612:	c0 e0       	ldi	r28, 0x00	; 0
     614:	d0 e0       	ldi	r29, 0x00	; 0
     616:	03 30       	cpi	r16, 0x03	; 3
     618:	11 05       	cpc	r17, r1
     61a:	a4 f4       	brge	.+40     	; 0x644 <_ZNK9IPAddress7printToER5Print+0x4a>
     61c:	f6 01       	movw	r30, r12
     61e:	e0 0f       	add	r30, r16
     620:	f1 1f       	adc	r31, r17
     622:	62 81       	ldd	r22, Z+2	; 0x02
     624:	4a e0       	ldi	r20, 0x0A	; 10
     626:	50 e0       	ldi	r21, 0x00	; 0
     628:	c7 01       	movw	r24, r14
     62a:	0e 94 13 04 	call	0x826	; 0x826 <_ZN5Print5printEhi>
     62e:	c8 0f       	add	r28, r24
     630:	d9 1f       	adc	r29, r25
     632:	6e e2       	ldi	r22, 0x2E	; 46
     634:	c7 01       	movw	r24, r14
     636:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Print5printEc>
     63a:	c8 0f       	add	r28, r24
     63c:	d9 1f       	adc	r29, r25
     63e:	0f 5f       	subi	r16, 0xFF	; 255
     640:	1f 4f       	sbci	r17, 0xFF	; 255
     642:	e9 cf       	rjmp	.-46     	; 0x616 <_ZNK9IPAddress7printToER5Print+0x1c>
     644:	f6 01       	movw	r30, r12
     646:	65 81       	ldd	r22, Z+5	; 0x05
     648:	4a e0       	ldi	r20, 0x0A	; 10
     64a:	50 e0       	ldi	r21, 0x00	; 0
     64c:	c7 01       	movw	r24, r14
     64e:	0e 94 13 04 	call	0x826	; 0x826 <_ZN5Print5printEhi>
     652:	8c 0f       	add	r24, r28
     654:	9d 1f       	adc	r25, r29
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	1f 91       	pop	r17
     65c:	0f 91       	pop	r16
     65e:	ff 90       	pop	r15
     660:	ef 90       	pop	r14
     662:	df 90       	pop	r13
     664:	cf 90       	pop	r12
     666:	08 95       	ret

00000668 <_ZN9IPAddressC1Ehhhh>:
     668:	0f 93       	push	r16
     66a:	fc 01       	movw	r30, r24
     66c:	82 e8       	ldi	r24, 0x82	; 130
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	91 83       	std	Z+1, r25	; 0x01
     672:	80 83       	st	Z, r24
     674:	62 83       	std	Z+2, r22	; 0x02
     676:	43 83       	std	Z+3, r20	; 0x03
     678:	24 83       	std	Z+4, r18	; 0x04
     67a:	05 83       	std	Z+5, r16	; 0x05
     67c:	0f 91       	pop	r16
     67e:	08 95       	ret

00000680 <_Z41__static_initialization_and_destruction_0ii>:
     680:	0f 93       	push	r16
     682:	01 97       	sbiw	r24, 0x01	; 1
     684:	59 f4       	brne	.+22     	; 0x69c <_Z41__static_initialization_and_destruction_0ii+0x1c>
     686:	6f 3f       	cpi	r22, 0xFF	; 255
     688:	7f 4f       	sbci	r23, 0xFF	; 255
     68a:	41 f4       	brne	.+16     	; 0x69c <_Z41__static_initialization_and_destruction_0ii+0x1c>
     68c:	00 e0       	ldi	r16, 0x00	; 0
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	8d e0       	ldi	r24, 0x0D	; 13
     696:	93 e0       	ldi	r25, 0x03	; 3
     698:	0e 94 34 03 	call	0x668	; 0x668 <_ZN9IPAddressC1Ehhhh>
     69c:	0f 91       	pop	r16
     69e:	08 95       	ret

000006a0 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    return n;
}
     6a0:	6f ef       	ldi	r22, 0xFF	; 255
     6a2:	7f ef       	ldi	r23, 0xFF	; 255
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 40 03 	call	0x680	; 0x680 <_Z41__static_initialization_and_destruction_0ii>
     6ac:	08 95       	ret

000006ae <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     6ae:	cf 92       	push	r12
     6b0:	df 92       	push	r13
     6b2:	ef 92       	push	r14
     6b4:	ff 92       	push	r15
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	8c 01       	movw	r16, r24
     6c0:	db 01       	movw	r26, r22
     6c2:	c0 e0       	ldi	r28, 0x00	; 0
     6c4:	d0 e0       	ldi	r29, 0x00	; 0
     6c6:	7a 01       	movw	r14, r20
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	e8 1a       	sub	r14, r24
     6cc:	f1 08       	sbc	r15, r1
     6ce:	45 2b       	or	r20, r21
     6d0:	a1 f0       	breq	.+40     	; 0x6fa <_ZN5Print5writeEPKhj+0x4c>
     6d2:	f8 01       	movw	r30, r16
     6d4:	80 81       	ld	r24, Z
     6d6:	91 81       	ldd	r25, Z+1	; 0x01
     6d8:	fc 01       	movw	r30, r24
     6da:	20 81       	ld	r18, Z
     6dc:	31 81       	ldd	r19, Z+1	; 0x01
     6de:	6d 01       	movw	r12, r26
     6e0:	ff ef       	ldi	r31, 0xFF	; 255
     6e2:	cf 1a       	sub	r12, r31
     6e4:	df 0a       	sbc	r13, r31
     6e6:	6c 91       	ld	r22, X
     6e8:	c8 01       	movw	r24, r16
     6ea:	f9 01       	movw	r30, r18
     6ec:	09 95       	icall
     6ee:	89 2b       	or	r24, r25
     6f0:	21 f0       	breq	.+8      	; 0x6fa <_ZN5Print5writeEPKhj+0x4c>
     6f2:	21 96       	adiw	r28, 0x01	; 1
     6f4:	a7 01       	movw	r20, r14
     6f6:	d6 01       	movw	r26, r12
     6f8:	e6 cf       	rjmp	.-52     	; 0x6c6 <_ZN5Print5writeEPKhj+0x18>
     6fa:	ce 01       	movw	r24, r28
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	ff 90       	pop	r15
     706:	ef 90       	pop	r14
     708:	df 90       	pop	r13
     70a:	cf 90       	pop	r12
     70c:	08 95       	ret

0000070e <_ZN5Print5printERK6String>:
     70e:	db 01       	movw	r26, r22
     710:	14 96       	adiw	r26, 0x04	; 4
     712:	4d 91       	ld	r20, X+
     714:	5c 91       	ld	r21, X
     716:	15 97       	sbiw	r26, 0x05	; 5
     718:	6d 91       	ld	r22, X+
     71a:	7c 91       	ld	r23, X
     71c:	dc 01       	movw	r26, r24
     71e:	ed 91       	ld	r30, X+
     720:	fc 91       	ld	r31, X
     722:	02 80       	ldd	r0, Z+2	; 0x02
     724:	f3 81       	ldd	r31, Z+3	; 0x03
     726:	e0 2d       	mov	r30, r0
     728:	09 95       	icall
     72a:	08 95       	ret

0000072c <_ZN5Print5printEc>:
     72c:	dc 01       	movw	r26, r24
     72e:	ed 91       	ld	r30, X+
     730:	fc 91       	ld	r31, X
     732:	01 90       	ld	r0, Z+
     734:	f0 81       	ld	r31, Z
     736:	e0 2d       	mov	r30, r0
     738:	09 95       	icall
     73a:	08 95       	ret

0000073c <_ZN5Print11printNumberEmh>:
     73c:	8f 92       	push	r8
     73e:	9f 92       	push	r9
     740:	af 92       	push	r10
     742:	bf 92       	push	r11
     744:	df 92       	push	r13
     746:	ef 92       	push	r14
     748:	ff 92       	push	r15
     74a:	0f 93       	push	r16
     74c:	1f 93       	push	r17
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
     756:	a1 97       	sbiw	r28, 0x21	; 33
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	cd bf       	out	0x3d, r28	; 61
     762:	7c 01       	movw	r14, r24
     764:	cb 01       	movw	r24, r22
     766:	ba 01       	movw	r22, r20
     768:	d2 2e       	mov	r13, r18
     76a:	19 a2       	std	Y+33, r1	; 0x21
     76c:	21 e0       	ldi	r18, 0x01	; 1
     76e:	2d 15       	cp	r18, r13
     770:	20 f0       	brcs	.+8      	; 0x77a <_ZN5Print11printNumberEmh+0x3e>
     772:	0f 2e       	mov	r0, r31
     774:	fa e0       	ldi	r31, 0x0A	; 10
     776:	df 2e       	mov	r13, r31
     778:	f0 2d       	mov	r31, r0
     77a:	8e 01       	movw	r16, r28
     77c:	0f 5d       	subi	r16, 0xDF	; 223
     77e:	1f 4f       	sbci	r17, 0xFF	; 255
     780:	8d 2c       	mov	r8, r13
     782:	91 2c       	mov	r9, r1
     784:	a1 2c       	mov	r10, r1
     786:	b1 2c       	mov	r11, r1
     788:	a5 01       	movw	r20, r10
     78a:	94 01       	movw	r18, r8
     78c:	0e 94 05 30 	call	0x600a	; 0x600a <__udivmodsi4>
     790:	e6 2f       	mov	r30, r22
     792:	62 2f       	mov	r22, r18
     794:	73 2f       	mov	r23, r19
     796:	84 2f       	mov	r24, r20
     798:	95 2f       	mov	r25, r21
     79a:	01 50       	subi	r16, 0x01	; 1
     79c:	11 09       	sbc	r17, r1
     79e:	ea 30       	cpi	r30, 0x0A	; 10
     7a0:	10 f4       	brcc	.+4      	; 0x7a6 <_ZN5Print11printNumberEmh+0x6a>
     7a2:	e0 5d       	subi	r30, 0xD0	; 208
     7a4:	01 c0       	rjmp	.+2      	; 0x7a8 <_ZN5Print11printNumberEmh+0x6c>
     7a6:	e9 5c       	subi	r30, 0xC9	; 201
     7a8:	d8 01       	movw	r26, r16
     7aa:	ec 93       	st	X, r30
     7ac:	61 15       	cp	r22, r1
     7ae:	71 05       	cpc	r23, r1
     7b0:	81 05       	cpc	r24, r1
     7b2:	91 05       	cpc	r25, r1
     7b4:	29 f7       	brne	.-54     	; 0x780 <_ZN5Print11printNumberEmh+0x44>
     7b6:	01 15       	cp	r16, r1
     7b8:	11 05       	cpc	r17, r1
     7ba:	91 f0       	breq	.+36     	; 0x7e0 <_ZN5Print11printNumberEmh+0xa4>
     7bc:	f8 01       	movw	r30, r16
     7be:	01 90       	ld	r0, Z+
     7c0:	00 20       	and	r0, r0
     7c2:	e9 f7       	brne	.-6      	; 0x7be <_ZN5Print11printNumberEmh+0x82>
     7c4:	31 97       	sbiw	r30, 0x01	; 1
     7c6:	af 01       	movw	r20, r30
     7c8:	40 1b       	sub	r20, r16
     7ca:	51 0b       	sbc	r21, r17
     7cc:	d7 01       	movw	r26, r14
     7ce:	ed 91       	ld	r30, X+
     7d0:	fc 91       	ld	r31, X
     7d2:	02 80       	ldd	r0, Z+2	; 0x02
     7d4:	f3 81       	ldd	r31, Z+3	; 0x03
     7d6:	e0 2d       	mov	r30, r0
     7d8:	b8 01       	movw	r22, r16
     7da:	c7 01       	movw	r24, r14
     7dc:	09 95       	icall
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <_ZN5Print11printNumberEmh+0xa8>
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	a1 96       	adiw	r28, 0x21	; 33
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	de bf       	out	0x3e, r29	; 62
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	cd bf       	out	0x3d, r28	; 61
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	1f 91       	pop	r17
     7f6:	0f 91       	pop	r16
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	df 90       	pop	r13
     7fe:	bf 90       	pop	r11
     800:	af 90       	pop	r10
     802:	9f 90       	pop	r9
     804:	8f 90       	pop	r8
     806:	08 95       	ret

00000808 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     808:	21 15       	cp	r18, r1
     80a:	31 05       	cpc	r19, r1
     80c:	49 f4       	brne	.+18     	; 0x820 <_ZN5Print5printEmi+0x18>
     80e:	dc 01       	movw	r26, r24
     810:	ed 91       	ld	r30, X+
     812:	fc 91       	ld	r31, X
     814:	01 90       	ld	r0, Z+
     816:	f0 81       	ld	r31, Z
     818:	e0 2d       	mov	r30, r0
     81a:	64 2f       	mov	r22, r20
     81c:	09 95       	icall
     81e:	08 95       	ret
  else return printNumber(n, base);
     820:	0e 94 9e 03 	call	0x73c	; 0x73c <_ZN5Print11printNumberEmh>
}
     824:	08 95       	ret

00000826 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     826:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     828:	46 2f       	mov	r20, r22
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	0e 94 04 04 	call	0x808	; 0x808 <_ZN5Print5printEmi>
}
     834:	08 95       	ret

00000836 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
     836:	81 30       	cpi	r24, 0x01	; 1
     838:	39 f0       	breq	.+14     	; 0x848 <_Z12disableTimerh+0x12>
     83a:	18 f0       	brcs	.+6      	; 0x842 <_Z12disableTimerh+0xc>
     83c:	82 30       	cpi	r24, 0x02	; 2
     83e:	51 f0       	breq	.+20     	; 0x854 <_Z12disableTimerh+0x1e>
     840:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
     842:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
     846:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     848:	ef e6       	ldi	r30, 0x6F	; 111
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	80 81       	ld	r24, Z
     84e:	8d 7f       	andi	r24, 0xFD	; 253
     850:	80 83       	st	Z, r24
      break;
     852:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     854:	e0 e7       	ldi	r30, 0x70	; 112
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	80 81       	ld	r24, Z
     85a:	8d 7f       	andi	r24, 0xFD	; 253
     85c:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     864:	e1 eb       	ldi	r30, 0xB1	; 177
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	80 81       	ld	r24, Z
     86a:	88 7f       	andi	r24, 0xF8	; 248
     86c:	84 60       	ori	r24, 0x04	; 4
     86e:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     870:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     874:	08 95       	ret

00000876 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
     876:	cf 93       	push	r28
     878:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	12 16       	cp	r1, r18
     880:	13 06       	cpc	r1, r19
     882:	9c f0       	brlt	.+38     	; 0x8aa <_Z6noToneh+0x34>
    if (tone_pins[i] == _pin) {
     884:	f9 01       	movw	r30, r18
     886:	ea 5f       	subi	r30, 0xFA	; 250
     888:	fe 4f       	sbci	r31, 0xFE	; 254
     88a:	80 81       	ld	r24, Z
     88c:	8c 13       	cpse	r24, r28
     88e:	0a c0       	rjmp	.+20     	; 0x8a4 <_Z6noToneh+0x2e>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     890:	f9 01       	movw	r30, r18
     892:	e6 50       	subi	r30, 0x06	; 6
     894:	fe 4f       	sbci	r31, 0xFE	; 254
     896:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
     898:	f9 01       	movw	r30, r18
     89a:	ea 5f       	subi	r30, 0xFA	; 250
     89c:	fe 4f       	sbci	r31, 0xFE	; 254
     89e:	9f ef       	ldi	r25, 0xFF	; 255
     8a0:	90 83       	st	Z, r25
      break;
     8a2:	04 c0       	rjmp	.+8      	; 0x8ac <_Z6noToneh+0x36>

void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
     8a4:	2f 5f       	subi	r18, 0xFF	; 255
     8a6:	3f 4f       	sbci	r19, 0xFF	; 255
     8a8:	ea cf       	rjmp	.-44     	; 0x87e <_Z6noToneh+0x8>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
     8aa:	8f ef       	ldi	r24, 0xFF	; 255
      tone_pins[i] = 255;
      break;
    }
  }
  
  disableTimer(_timer);
     8ac:	0e 94 1b 04 	call	0x836	; 0x836 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	8c 2f       	mov	r24, r28
     8b4:	0e 94 87 06 	call	0xd0e	; 0xd0e <digitalWrite>
}
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
     8bc:	1f 92       	push	r1
     8be:	0f 92       	push	r0
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	0f 92       	push	r0
     8c4:	11 24       	eor	r1, r1
     8c6:	2f 93       	push	r18
     8c8:	3f 93       	push	r19
     8ca:	4f 93       	push	r20
     8cc:	5f 93       	push	r21
     8ce:	6f 93       	push	r22
     8d0:	7f 93       	push	r23
     8d2:	8f 93       	push	r24
     8d4:	9f 93       	push	r25
     8d6:	af 93       	push	r26
     8d8:	bf 93       	push	r27
     8da:	ef 93       	push	r30
     8dc:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
     8de:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <timer2_toggle_count>
     8e2:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <timer2_toggle_count+0x1>
     8e6:	a0 91 18 03 	lds	r26, 0x0318	; 0x800318 <timer2_toggle_count+0x2>
     8ea:	b0 91 19 03 	lds	r27, 0x0319	; 0x800319 <timer2_toggle_count+0x3>
     8ee:	89 2b       	or	r24, r25
     8f0:	8a 2b       	or	r24, r26
     8f2:	8b 2b       	or	r24, r27
     8f4:	51 f1       	breq	.+84     	; 0x94a <__stack+0x4b>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     8f6:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <timer2_pin_mask>
     8fa:	e0 91 14 03 	lds	r30, 0x0314	; 0x800314 <timer2_pin_port>
     8fe:	f0 91 15 03 	lds	r31, 0x0315	; 0x800315 <timer2_pin_port+0x1>
     902:	80 81       	ld	r24, Z
     904:	89 27       	eor	r24, r25
     906:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
     908:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <timer2_toggle_count>
     90c:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <timer2_toggle_count+0x1>
     910:	a0 91 18 03 	lds	r26, 0x0318	; 0x800318 <timer2_toggle_count+0x2>
     914:	b0 91 19 03 	lds	r27, 0x0319	; 0x800319 <timer2_toggle_count+0x3>
     918:	18 16       	cp	r1, r24
     91a:	19 06       	cpc	r1, r25
     91c:	1a 06       	cpc	r1, r26
     91e:	1b 06       	cpc	r1, r27
     920:	c4 f4       	brge	.+48     	; 0x952 <__stack+0x53>
      timer2_toggle_count--;
     922:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <timer2_toggle_count>
     926:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <timer2_toggle_count+0x1>
     92a:	a0 91 18 03 	lds	r26, 0x0318	; 0x800318 <timer2_toggle_count+0x2>
     92e:	b0 91 19 03 	lds	r27, 0x0319	; 0x800319 <timer2_toggle_count+0x3>
     932:	01 97       	sbiw	r24, 0x01	; 1
     934:	a1 09       	sbc	r26, r1
     936:	b1 09       	sbc	r27, r1
     938:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <timer2_toggle_count>
     93c:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <timer2_toggle_count+0x1>
     940:	a0 93 18 03 	sts	0x0318, r26	; 0x800318 <timer2_toggle_count+0x2>
     944:	b0 93 19 03 	sts	0x0319, r27	; 0x800319 <timer2_toggle_count+0x3>
     948:	04 c0       	rjmp	.+8      	; 0x952 <__stack+0x53>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
     94a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL9tone_pins>
     94e:	0e 94 3b 04 	call	0x876	; 0x876 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
     952:	ff 91       	pop	r31
     954:	ef 91       	pop	r30
     956:	bf 91       	pop	r27
     958:	af 91       	pop	r26
     95a:	9f 91       	pop	r25
     95c:	8f 91       	pop	r24
     95e:	7f 91       	pop	r23
     960:	6f 91       	pop	r22
     962:	5f 91       	pop	r21
     964:	4f 91       	pop	r20
     966:	3f 91       	pop	r19
     968:	2f 91       	pop	r18
     96a:	0f 90       	pop	r0
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	0f 90       	pop	r0
     970:	1f 90       	pop	r1
     972:	18 95       	reti

00000974 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     974:	08 95       	ret

00000976 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     976:	1f 92       	push	r1
     978:	0f 92       	push	r0
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	0f 92       	push	r0
     97e:	11 24       	eor	r1, r1
     980:	2f 93       	push	r18
     982:	3f 93       	push	r19
     984:	4f 93       	push	r20
     986:	5f 93       	push	r21
     988:	6f 93       	push	r22
     98a:	7f 93       	push	r23
     98c:	8f 93       	push	r24
     98e:	9f 93       	push	r25
     990:	af 93       	push	r26
     992:	bf 93       	push	r27
     994:	ef 93       	push	r30
     996:	ff 93       	push	r31
     998:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <intFunc>
     99c:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <intFunc+0x1>
     9a0:	09 95       	icall
     9a2:	ff 91       	pop	r31
     9a4:	ef 91       	pop	r30
     9a6:	bf 91       	pop	r27
     9a8:	af 91       	pop	r26
     9aa:	9f 91       	pop	r25
     9ac:	8f 91       	pop	r24
     9ae:	7f 91       	pop	r23
     9b0:	6f 91       	pop	r22
     9b2:	5f 91       	pop	r21
     9b4:	4f 91       	pop	r20
     9b6:	3f 91       	pop	r19
     9b8:	2f 91       	pop	r18
     9ba:	0f 90       	pop	r0
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	0f 90       	pop	r0
     9c0:	1f 90       	pop	r1
     9c2:	18 95       	reti

000009c4 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     9c4:	1f 92       	push	r1
     9c6:	0f 92       	push	r0
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	0f 92       	push	r0
     9cc:	11 24       	eor	r1, r1
     9ce:	2f 93       	push	r18
     9d0:	3f 93       	push	r19
     9d2:	4f 93       	push	r20
     9d4:	5f 93       	push	r21
     9d6:	6f 93       	push	r22
     9d8:	7f 93       	push	r23
     9da:	8f 93       	push	r24
     9dc:	9f 93       	push	r25
     9de:	af 93       	push	r26
     9e0:	bf 93       	push	r27
     9e2:	ef 93       	push	r30
     9e4:	ff 93       	push	r31
     9e6:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <intFunc+0x2>
     9ea:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <intFunc+0x3>
     9ee:	09 95       	icall
     9f0:	ff 91       	pop	r31
     9f2:	ef 91       	pop	r30
     9f4:	bf 91       	pop	r27
     9f6:	af 91       	pop	r26
     9f8:	9f 91       	pop	r25
     9fa:	8f 91       	pop	r24
     9fc:	7f 91       	pop	r23
     9fe:	6f 91       	pop	r22
     a00:	5f 91       	pop	r21
     a02:	4f 91       	pop	r20
     a04:	3f 91       	pop	r19
     a06:	2f 91       	pop	r18
     a08:	0f 90       	pop	r0
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	0f 90       	pop	r0
     a0e:	1f 90       	pop	r1
     a10:	18 95       	reti

00000a12 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     a12:	1f 92       	push	r1
     a14:	0f 92       	push	r0
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	0f 92       	push	r0
     a1a:	11 24       	eor	r1, r1
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	2f 93       	push	r18
     a22:	3f 93       	push	r19
     a24:	4f 93       	push	r20
     a26:	5f 93       	push	r21
     a28:	6f 93       	push	r22
     a2a:	7f 93       	push	r23
     a2c:	8f 93       	push	r24
     a2e:	9f 93       	push	r25
     a30:	af 93       	push	r26
     a32:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     a34:	00 91 1b 03 	lds	r16, 0x031B	; 0x80031b <timer0_millis>
     a38:	10 91 1c 03 	lds	r17, 0x031C	; 0x80031c <timer0_millis+0x1>
     a3c:	20 91 1d 03 	lds	r18, 0x031D	; 0x80031d <timer0_millis+0x2>
     a40:	30 91 1e 03 	lds	r19, 0x031E	; 0x80031e <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     a44:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <timer0_fract>

	m += MILLIS_INC;
     a48:	b9 01       	movw	r22, r18
     a4a:	a8 01       	movw	r20, r16
     a4c:	4f 5f       	subi	r20, 0xFF	; 255
     a4e:	5f 4f       	sbci	r21, 0xFF	; 255
     a50:	6f 4f       	sbci	r22, 0xFF	; 255
     a52:	7f 4f       	sbci	r23, 0xFF	; 255
	f += FRACT_INC;
     a54:	83 e0       	ldi	r24, 0x03	; 3
     a56:	89 0f       	add	r24, r25
	if (f >= FRACT_MAX) {
     a58:	8d 37       	cpi	r24, 0x7D	; 125
     a5a:	40 f0       	brcs	.+16     	; 0xa6c <__vector_16+0x5a>
		f -= FRACT_MAX;
     a5c:	86 e8       	ldi	r24, 0x86	; 134
     a5e:	89 0f       	add	r24, r25
		m += 1;
     a60:	b9 01       	movw	r22, r18
     a62:	a8 01       	movw	r20, r16
     a64:	4e 5f       	subi	r20, 0xFE	; 254
     a66:	5f 4f       	sbci	r21, 0xFF	; 255
     a68:	6f 4f       	sbci	r22, 0xFF	; 255
     a6a:	7f 4f       	sbci	r23, 0xFF	; 255
	}

	timer0_fract = f;
     a6c:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <timer0_fract>
	timer0_millis = m;
     a70:	40 93 1b 03 	sts	0x031B, r20	; 0x80031b <timer0_millis>
     a74:	50 93 1c 03 	sts	0x031C, r21	; 0x80031c <timer0_millis+0x1>
     a78:	60 93 1d 03 	sts	0x031D, r22	; 0x80031d <timer0_millis+0x2>
     a7c:	70 93 1e 03 	sts	0x031E, r23	; 0x80031e <timer0_millis+0x3>
	timer0_overflow_count++;
     a80:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <timer0_overflow_count>
     a84:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <timer0_overflow_count+0x1>
     a88:	a0 91 21 03 	lds	r26, 0x0321	; 0x800321 <timer0_overflow_count+0x2>
     a8c:	b0 91 22 03 	lds	r27, 0x0322	; 0x800322 <timer0_overflow_count+0x3>
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	a1 1d       	adc	r26, r1
     a94:	b1 1d       	adc	r27, r1
     a96:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <timer0_overflow_count>
     a9a:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <timer0_overflow_count+0x1>
     a9e:	a0 93 21 03 	sts	0x0321, r26	; 0x800321 <timer0_overflow_count+0x2>
     aa2:	b0 93 22 03 	sts	0x0322, r27	; 0x800322 <timer0_overflow_count+0x3>
}
     aa6:	bf 91       	pop	r27
     aa8:	af 91       	pop	r26
     aaa:	9f 91       	pop	r25
     aac:	8f 91       	pop	r24
     aae:	7f 91       	pop	r23
     ab0:	6f 91       	pop	r22
     ab2:	5f 91       	pop	r21
     ab4:	4f 91       	pop	r20
     ab6:	3f 91       	pop	r19
     ab8:	2f 91       	pop	r18
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	0f 90       	pop	r0
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	0f 90       	pop	r0
     ac4:	1f 90       	pop	r1
     ac6:	18 95       	reti

00000ac8 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     ac8:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     aca:	f8 94       	cli
	m = timer0_millis;
     acc:	60 91 1b 03 	lds	r22, 0x031B	; 0x80031b <timer0_millis>
     ad0:	70 91 1c 03 	lds	r23, 0x031C	; 0x80031c <timer0_millis+0x1>
     ad4:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <timer0_millis+0x2>
     ad8:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <timer0_millis+0x3>
	SREG = oldSREG;
     adc:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     ade:	08 95       	ret

00000ae0 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     ae0:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     ae2:	f8 94       	cli
	m = timer0_overflow_count;
     ae4:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <timer0_overflow_count>
     ae8:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <timer0_overflow_count+0x1>
     aec:	a0 91 21 03 	lds	r26, 0x0321	; 0x800321 <timer0_overflow_count+0x2>
     af0:	b0 91 22 03 	lds	r27, 0x0322	; 0x800322 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     af4:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     af6:	a8 9b       	sbis	0x15, 0	; 21
     af8:	05 c0       	rjmp	.+10     	; 0xb04 <micros+0x24>
     afa:	2f 3f       	cpi	r18, 0xFF	; 255
     afc:	19 f0       	breq	.+6      	; 0xb04 <micros+0x24>
		m++;
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	a1 1d       	adc	r26, r1
     b02:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     b04:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     b06:	ba 2f       	mov	r27, r26
     b08:	a9 2f       	mov	r26, r25
     b0a:	98 2f       	mov	r25, r24
     b0c:	88 27       	eor	r24, r24
     b0e:	82 0f       	add	r24, r18
     b10:	91 1d       	adc	r25, r1
     b12:	a1 1d       	adc	r26, r1
     b14:	b1 1d       	adc	r27, r1
     b16:	bc 01       	movw	r22, r24
     b18:	cd 01       	movw	r24, r26
     b1a:	66 0f       	add	r22, r22
     b1c:	77 1f       	adc	r23, r23
     b1e:	88 1f       	adc	r24, r24
     b20:	99 1f       	adc	r25, r25
     b22:	66 0f       	add	r22, r22
     b24:	77 1f       	adc	r23, r23
     b26:	88 1f       	adc	r24, r24
     b28:	99 1f       	adc	r25, r25
}
     b2a:	08 95       	ret

00000b2c <delay>:

void delay(unsigned long ms)
{
     b2c:	8f 92       	push	r8
     b2e:	9f 92       	push	r9
     b30:	af 92       	push	r10
     b32:	bf 92       	push	r11
     b34:	cf 92       	push	r12
     b36:	df 92       	push	r13
     b38:	ef 92       	push	r14
     b3a:	ff 92       	push	r15
     b3c:	6b 01       	movw	r12, r22
     b3e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     b40:	0e 94 70 05 	call	0xae0	; 0xae0 <micros>
     b44:	4b 01       	movw	r8, r22
     b46:	5c 01       	movw	r10, r24

	while (ms > 0) {
     b48:	20 c0       	rjmp	.+64     	; 0xb8a <delay+0x5e>
		yield();
     b4a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     b4e:	0b c0       	rjmp	.+22     	; 0xb66 <delay+0x3a>
			ms--;
     b50:	21 e0       	ldi	r18, 0x01	; 1
     b52:	c2 1a       	sub	r12, r18
     b54:	d1 08       	sbc	r13, r1
     b56:	e1 08       	sbc	r14, r1
     b58:	f1 08       	sbc	r15, r1
			start += 1000;
     b5a:	88 ee       	ldi	r24, 0xE8	; 232
     b5c:	88 0e       	add	r8, r24
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	98 1e       	adc	r9, r24
     b62:	a1 1c       	adc	r10, r1
     b64:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     b66:	c1 14       	cp	r12, r1
     b68:	d1 04       	cpc	r13, r1
     b6a:	e1 04       	cpc	r14, r1
     b6c:	f1 04       	cpc	r15, r1
     b6e:	69 f0       	breq	.+26     	; 0xb8a <delay+0x5e>
     b70:	0e 94 70 05 	call	0xae0	; 0xae0 <micros>
     b74:	dc 01       	movw	r26, r24
     b76:	cb 01       	movw	r24, r22
     b78:	88 19       	sub	r24, r8
     b7a:	99 09       	sbc	r25, r9
     b7c:	aa 09       	sbc	r26, r10
     b7e:	bb 09       	sbc	r27, r11
     b80:	88 3e       	cpi	r24, 0xE8	; 232
     b82:	93 40       	sbci	r25, 0x03	; 3
     b84:	a1 05       	cpc	r26, r1
     b86:	b1 05       	cpc	r27, r1
     b88:	18 f7       	brcc	.-58     	; 0xb50 <delay+0x24>

void delay(unsigned long ms)
{
	uint32_t start = micros();

	while (ms > 0) {
     b8a:	c1 14       	cp	r12, r1
     b8c:	d1 04       	cpc	r13, r1
     b8e:	e1 04       	cpc	r14, r1
     b90:	f1 04       	cpc	r15, r1
     b92:	d9 f6       	brne	.-74     	; 0xb4a <delay+0x1e>
		while ( ms > 0 && (micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     b94:	ff 90       	pop	r15
     b96:	ef 90       	pop	r14
     b98:	df 90       	pop	r13
     b9a:	cf 90       	pop	r12
     b9c:	bf 90       	pop	r11
     b9e:	af 90       	pop	r10
     ba0:	9f 90       	pop	r9
     ba2:	8f 90       	pop	r8
     ba4:	08 95       	ret

00000ba6 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	91 05       	cpc	r25, r1
     baa:	38 f0       	brcs	.+14     	; 0xbba <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     bb4:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	f1 f7       	brne	.-4      	; 0xbb6 <delayMicroseconds+0x10>
     bba:	08 95       	ret

00000bbc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     bbc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     bbe:	84 b5       	in	r24, 0x24	; 36
     bc0:	82 60       	ori	r24, 0x02	; 2
     bc2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     bc4:	84 b5       	in	r24, 0x24	; 36
     bc6:	81 60       	ori	r24, 0x01	; 1
     bc8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     bca:	85 b5       	in	r24, 0x25	; 37
     bcc:	82 60       	ori	r24, 0x02	; 2
     bce:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     bd0:	85 b5       	in	r24, 0x25	; 37
     bd2:	81 60       	ori	r24, 0x01	; 1
     bd4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     bd6:	ee e6       	ldi	r30, 0x6E	; 110
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	81 60       	ori	r24, 0x01	; 1
     bde:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     be0:	e1 e8       	ldi	r30, 0x81	; 129
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     be6:	80 81       	ld	r24, Z
     be8:	82 60       	ori	r24, 0x02	; 2
     bea:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     bec:	80 81       	ld	r24, Z
     bee:	81 60       	ori	r24, 0x01	; 1
     bf0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     bf2:	e0 e8       	ldi	r30, 0x80	; 128
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	81 60       	ori	r24, 0x01	; 1
     bfa:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     bfc:	e1 eb       	ldi	r30, 0xB1	; 177
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	84 60       	ori	r24, 0x04	; 4
     c04:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     c06:	e0 eb       	ldi	r30, 0xB0	; 176
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	81 60       	ori	r24, 0x01	; 1
     c0e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     c10:	ea e7       	ldi	r30, 0x7A	; 122
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	84 60       	ori	r24, 0x04	; 4
     c18:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     c1a:	80 81       	ld	r24, Z
     c1c:	82 60       	ori	r24, 0x02	; 2
     c1e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     c20:	80 81       	ld	r24, Z
     c22:	81 60       	ori	r24, 0x01	; 1
     c24:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     c26:	80 81       	ld	r24, Z
     c28:	80 68       	ori	r24, 0x80	; 128
     c2a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     c2c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     c30:	08 95       	ret

00000c32 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     c32:	83 30       	cpi	r24, 0x03	; 3
     c34:	69 f0       	breq	.+26     	; 0xc50 <turnOffPWM+0x1e>
     c36:	28 f4       	brcc	.+10     	; 0xc42 <turnOffPWM+0x10>
     c38:	81 30       	cpi	r24, 0x01	; 1
     c3a:	b1 f0       	breq	.+44     	; 0xc68 <turnOffPWM+0x36>
     c3c:	82 30       	cpi	r24, 0x02	; 2
     c3e:	c1 f0       	breq	.+48     	; 0xc70 <turnOffPWM+0x3e>
     c40:	08 95       	ret
     c42:	87 30       	cpi	r24, 0x07	; 7
     c44:	c9 f0       	breq	.+50     	; 0xc78 <turnOffPWM+0x46>
     c46:	88 30       	cpi	r24, 0x08	; 8
     c48:	e9 f0       	breq	.+58     	; 0xc84 <turnOffPWM+0x52>
     c4a:	84 30       	cpi	r24, 0x04	; 4
     c4c:	01 f5       	brne	.+64     	; 0xc8e <turnOffPWM+0x5c>
     c4e:	06 c0       	rjmp	.+12     	; 0xc5c <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     c50:	e0 e8       	ldi	r30, 0x80	; 128
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	8f 77       	andi	r24, 0x7F	; 127
     c58:	80 83       	st	Z, r24
     c5a:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     c5c:	e0 e8       	ldi	r30, 0x80	; 128
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	8f 7d       	andi	r24, 0xDF	; 223
     c64:	80 83       	st	Z, r24
     c66:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     c68:	84 b5       	in	r24, 0x24	; 36
     c6a:	8f 77       	andi	r24, 0x7F	; 127
     c6c:	84 bd       	out	0x24, r24	; 36
     c6e:	08 95       	ret
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     c70:	84 b5       	in	r24, 0x24	; 36
     c72:	8f 7d       	andi	r24, 0xDF	; 223
     c74:	84 bd       	out	0x24, r24	; 36
     c76:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     c78:	e0 eb       	ldi	r30, 0xB0	; 176
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	8f 77       	andi	r24, 0x7F	; 127
     c80:	80 83       	st	Z, r24
     c82:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     c84:	e0 eb       	ldi	r30, 0xB0	; 176
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	8f 7d       	andi	r24, 0xDF	; 223
     c8c:	80 83       	st	Z, r24
     c8e:	08 95       	ret

00000c90 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	fc 01       	movw	r30, r24
     c98:	e1 5f       	subi	r30, 0xF1	; 241
     c9a:	fd 4f       	sbci	r31, 0xFD	; 253
     c9c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     c9e:	fc 01       	movw	r30, r24
     ca0:	ed 5d       	subi	r30, 0xDD	; 221
     ca2:	fd 4f       	sbci	r31, 0xFD	; 253
     ca4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     ca6:	88 23       	and	r24, r24
     ca8:	79 f1       	breq	.+94     	; 0xd08 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	fc 01       	movw	r30, r24
     cb2:	ef 5b       	subi	r30, 0xBF	; 191
     cb4:	fd 4f       	sbci	r31, 0xFD	; 253
     cb6:	a5 91       	lpm	r26, Z+
     cb8:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     cba:	fc 01       	movw	r30, r24
     cbc:	e9 5c       	subi	r30, 0xC9	; 201
     cbe:	fd 4f       	sbci	r31, 0xFD	; 253
     cc0:	c5 91       	lpm	r28, Z+
     cc2:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     cc4:	61 11       	cpse	r22, r1
     cc6:	0c c0       	rjmp	.+24     	; 0xce0 <pinMode+0x50>
		uint8_t oldSREG = SREG;
     cc8:	9f b7       	in	r25, 0x3f	; 63
                cli();
     cca:	f8 94       	cli
		*reg &= ~bit;
     ccc:	8c 91       	ld	r24, X
     cce:	e2 2f       	mov	r30, r18
     cd0:	e0 95       	com	r30
     cd2:	8e 23       	and	r24, r30
     cd4:	8c 93       	st	X, r24
		*out &= ~bit;
     cd6:	28 81       	ld	r18, Y
     cd8:	e2 23       	and	r30, r18
     cda:	e8 83       	st	Y, r30
		SREG = oldSREG;
     cdc:	9f bf       	out	0x3f, r25	; 63
     cde:	14 c0       	rjmp	.+40     	; 0xd08 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
     ce0:	62 30       	cpi	r22, 0x02	; 2
     ce2:	61 f4       	brne	.+24     	; 0xcfc <pinMode+0x6c>
		uint8_t oldSREG = SREG;
     ce4:	9f b7       	in	r25, 0x3f	; 63
                cli();
     ce6:	f8 94       	cli
		*reg &= ~bit;
     ce8:	8c 91       	ld	r24, X
     cea:	32 2f       	mov	r19, r18
     cec:	30 95       	com	r19
     cee:	83 23       	and	r24, r19
     cf0:	8c 93       	st	X, r24
		*out |= bit;
     cf2:	e8 81       	ld	r30, Y
     cf4:	e2 2b       	or	r30, r18
     cf6:	e8 83       	st	Y, r30
		SREG = oldSREG;
     cf8:	9f bf       	out	0x3f, r25	; 63
     cfa:	06 c0       	rjmp	.+12     	; 0xd08 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
     cfc:	8f b7       	in	r24, 0x3f	; 63
                cli();
     cfe:	f8 94       	cli
		*reg |= bit;
     d00:	ec 91       	ld	r30, X
     d02:	e2 2b       	or	r30, r18
     d04:	ec 93       	st	X, r30
		SREG = oldSREG;
     d06:	8f bf       	out	0x3f, r24	; 63
	}
}
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	08 95       	ret

00000d0e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	f9 01       	movw	r30, r18
     d1a:	e5 50       	subi	r30, 0x05	; 5
     d1c:	fe 4f       	sbci	r31, 0xFE	; 254
     d1e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     d20:	f9 01       	movw	r30, r18
     d22:	e1 5f       	subi	r30, 0xF1	; 241
     d24:	fd 4f       	sbci	r31, 0xFD	; 253
     d26:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     d28:	f9 01       	movw	r30, r18
     d2a:	ed 5d       	subi	r30, 0xDD	; 221
     d2c:	fd 4f       	sbci	r31, 0xFD	; 253
     d2e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     d30:	cc 23       	and	r28, r28
     d32:	d1 f0       	breq	.+52     	; 0xd68 <digitalWrite+0x5a>
     d34:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     d36:	81 11       	cpse	r24, r1
     d38:	0e 94 19 06 	call	0xc32	; 0xc32 <turnOffPWM>

	out = portOutputRegister(port);
     d3c:	ec 2f       	mov	r30, r28
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	ee 0f       	add	r30, r30
     d42:	ff 1f       	adc	r31, r31
     d44:	e9 5c       	subi	r30, 0xC9	; 201
     d46:	fd 4f       	sbci	r31, 0xFD	; 253
     d48:	a5 91       	lpm	r26, Z+
     d4a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     d4c:	8f b7       	in	r24, 0x3f	; 63
	cli();
     d4e:	f8 94       	cli

	if (val == LOW) {
     d50:	d1 11       	cpse	r29, r1
     d52:	06 c0       	rjmp	.+12     	; 0xd60 <digitalWrite+0x52>
		*out &= ~bit;
     d54:	9c 91       	ld	r25, X
     d56:	e1 2f       	mov	r30, r17
     d58:	e0 95       	com	r30
     d5a:	e9 23       	and	r30, r25
     d5c:	ec 93       	st	X, r30
     d5e:	03 c0       	rjmp	.+6      	; 0xd66 <digitalWrite+0x58>
	} else {
		*out |= bit;
     d60:	ec 91       	ld	r30, X
     d62:	e1 2b       	or	r30, r17
     d64:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
     d66:	8f bf       	out	0x3f, r24	; 63
}
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	08 95       	ret

00000d70 <_ZN6StringD1Ev>:
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
{
	if (loc < len) buffer[loc] = c;
     d70:	fc 01       	movw	r30, r24
     d72:	80 81       	ld	r24, Z
     d74:	91 81       	ldd	r25, Z+1	; 0x01
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	11 f0       	breq	.+4      	; 0xd7e <_ZN6StringD1Ev+0xe>
     d7a:	0e 94 f3 30 	call	0x61e6	; 0x61e6 <free>
     d7e:	08 95       	ret

00000d80 <_ZN6String10invalidateEv>:
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	ec 01       	movw	r28, r24
     d86:	88 81       	ld	r24, Y
     d88:	99 81       	ldd	r25, Y+1	; 0x01
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	11 f0       	breq	.+4      	; 0xd92 <_ZN6String10invalidateEv+0x12>
     d8e:	0e 94 f3 30 	call	0x61e6	; 0x61e6 <free>
     d92:	19 82       	std	Y+1, r1	; 0x01
     d94:	18 82       	st	Y, r1
     d96:	1d 82       	std	Y+5, r1	; 0x05
     d98:	1c 82       	std	Y+4, r1	; 0x04
     d9a:	1b 82       	std	Y+3, r1	; 0x03
     d9c:	1a 82       	std	Y+2, r1	; 0x02
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	08 95       	ret

00000da4 <_ZN6String12changeBufferEj>:
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	ec 01       	movw	r28, r24
     dae:	8b 01       	movw	r16, r22
     db0:	6f 5f       	subi	r22, 0xFF	; 255
     db2:	7f 4f       	sbci	r23, 0xFF	; 255
     db4:	88 81       	ld	r24, Y
     db6:	99 81       	ldd	r25, Y+1	; 0x01
     db8:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <realloc>
     dbc:	00 97       	sbiw	r24, 0x00	; 0
     dbe:	31 f0       	breq	.+12     	; 0xdcc <_ZN6String12changeBufferEj+0x28>
     dc0:	99 83       	std	Y+1, r25	; 0x01
     dc2:	88 83       	st	Y, r24
     dc4:	1b 83       	std	Y+3, r17	; 0x03
     dc6:	0a 83       	std	Y+2, r16	; 0x02
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	01 c0       	rjmp	.+2      	; 0xdce <_ZN6String12changeBufferEj+0x2a>
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	08 95       	ret

00000dd8 <_ZN6String7reserveEj>:
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	fc 01       	movw	r30, r24
     dde:	20 81       	ld	r18, Z
     de0:	31 81       	ldd	r19, Z+1	; 0x01
     de2:	23 2b       	or	r18, r19
     de4:	29 f0       	breq	.+10     	; 0xdf0 <_ZN6String7reserveEj+0x18>
     de6:	22 81       	ldd	r18, Z+2	; 0x02
     de8:	33 81       	ldd	r19, Z+3	; 0x03
     dea:	26 17       	cp	r18, r22
     dec:	37 07       	cpc	r19, r23
     dee:	70 f4       	brcc	.+28     	; 0xe0c <_ZN6String7reserveEj+0x34>
     df0:	ec 01       	movw	r28, r24
     df2:	0e 94 d2 06 	call	0xda4	; 0xda4 <_ZN6String12changeBufferEj>
     df6:	88 23       	and	r24, r24
     df8:	61 f0       	breq	.+24     	; 0xe12 <_ZN6String7reserveEj+0x3a>
     dfa:	8c 81       	ldd	r24, Y+4	; 0x04
     dfc:	9d 81       	ldd	r25, Y+5	; 0x05
     dfe:	89 2b       	or	r24, r25
     e00:	39 f4       	brne	.+14     	; 0xe10 <_ZN6String7reserveEj+0x38>
     e02:	e8 81       	ld	r30, Y
     e04:	f9 81       	ldd	r31, Y+1	; 0x01
     e06:	10 82       	st	Z, r1
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	03 c0       	rjmp	.+6      	; 0xe12 <_ZN6String7reserveEj+0x3a>
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	01 c0       	rjmp	.+2      	; 0xe12 <_ZN6String7reserveEj+0x3a>
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	08 95       	ret

00000e18 <_ZN6String4copyEPKcj>:
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	ec 01       	movw	r28, r24
     e26:	7b 01       	movw	r14, r22
     e28:	8a 01       	movw	r16, r20
     e2a:	ba 01       	movw	r22, r20
     e2c:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN6String7reserveEj>
     e30:	81 11       	cpse	r24, r1
     e32:	04 c0       	rjmp	.+8      	; 0xe3c <_ZN6String4copyEPKcj+0x24>
     e34:	ce 01       	movw	r24, r28
     e36:	0e 94 c0 06 	call	0xd80	; 0xd80 <_ZN6String10invalidateEv>
     e3a:	07 c0       	rjmp	.+14     	; 0xe4a <_ZN6String4copyEPKcj+0x32>
     e3c:	1d 83       	std	Y+5, r17	; 0x05
     e3e:	0c 83       	std	Y+4, r16	; 0x04
     e40:	b7 01       	movw	r22, r14
     e42:	88 81       	ld	r24, Y
     e44:	99 81       	ldd	r25, Y+1	; 0x01
     e46:	0e 94 68 32 	call	0x64d0	; 0x64d0 <strcpy>
     e4a:	ce 01       	movw	r24, r28
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	ff 90       	pop	r15
     e56:	ef 90       	pop	r14
     e58:	08 95       	ret

00000e5a <_ZN6StringC1EPKc>:
     e5a:	fc 01       	movw	r30, r24
     e5c:	11 82       	std	Z+1, r1	; 0x01
     e5e:	10 82       	st	Z, r1
     e60:	13 82       	std	Z+3, r1	; 0x03
     e62:	12 82       	std	Z+2, r1	; 0x02
     e64:	15 82       	std	Z+5, r1	; 0x05
     e66:	14 82       	std	Z+4, r1	; 0x04
     e68:	61 15       	cp	r22, r1
     e6a:	71 05       	cpc	r23, r1
     e6c:	51 f0       	breq	.+20     	; 0xe82 <_ZN6StringC1EPKc+0x28>
     e6e:	fb 01       	movw	r30, r22
     e70:	01 90       	ld	r0, Z+
     e72:	00 20       	and	r0, r0
     e74:	e9 f7       	brne	.-6      	; 0xe70 <_ZN6StringC1EPKc+0x16>
     e76:	31 97       	sbiw	r30, 0x01	; 1
     e78:	af 01       	movw	r20, r30
     e7a:	46 1b       	sub	r20, r22
     e7c:	57 0b       	sbc	r21, r23
     e7e:	0e 94 0c 07 	call	0xe18	; 0xe18 <_ZN6String4copyEPKcj>
     e82:	08 95       	ret

00000e84 <_ZN6StringaSERKS_>:
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	ec 01       	movw	r28, r24
     e8a:	fb 01       	movw	r30, r22
     e8c:	86 17       	cp	r24, r22
     e8e:	97 07       	cpc	r25, r23
     e90:	61 f0       	breq	.+24     	; 0xeaa <_ZN6StringaSERKS_+0x26>
     e92:	60 81       	ld	r22, Z
     e94:	71 81       	ldd	r23, Z+1	; 0x01
     e96:	61 15       	cp	r22, r1
     e98:	71 05       	cpc	r23, r1
     e9a:	29 f0       	breq	.+10     	; 0xea6 <_ZN6StringaSERKS_+0x22>
     e9c:	44 81       	ldd	r20, Z+4	; 0x04
     e9e:	55 81       	ldd	r21, Z+5	; 0x05
     ea0:	0e 94 0c 07 	call	0xe18	; 0xe18 <_ZN6String4copyEPKcj>
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <_ZN6StringaSERKS_+0x26>
     ea6:	0e 94 c0 06 	call	0xd80	; 0xd80 <_ZN6String10invalidateEv>
     eaa:	ce 01       	movw	r24, r28
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	08 95       	ret

00000eb2 <_ZN6StringC1ERKS_>:
     eb2:	fc 01       	movw	r30, r24
     eb4:	11 82       	std	Z+1, r1	; 0x01
     eb6:	10 82       	st	Z, r1
     eb8:	13 82       	std	Z+3, r1	; 0x03
     eba:	12 82       	std	Z+2, r1	; 0x02
     ebc:	15 82       	std	Z+5, r1	; 0x05
     ebe:	14 82       	std	Z+4, r1	; 0x04
     ec0:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZN6StringaSERKS_>
     ec4:	08 95       	ret

00000ec6 <_ZN6StringaSEPKc>:
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	ec 01       	movw	r28, r24
     ecc:	61 15       	cp	r22, r1
     ece:	71 05       	cpc	r23, r1
     ed0:	59 f0       	breq	.+22     	; 0xee8 <_ZN6StringaSEPKc+0x22>
     ed2:	fb 01       	movw	r30, r22
     ed4:	01 90       	ld	r0, Z+
     ed6:	00 20       	and	r0, r0
     ed8:	e9 f7       	brne	.-6      	; 0xed4 <_ZN6StringaSEPKc+0xe>
     eda:	31 97       	sbiw	r30, 0x01	; 1
     edc:	af 01       	movw	r20, r30
     ede:	46 1b       	sub	r20, r22
     ee0:	57 0b       	sbc	r21, r23
     ee2:	0e 94 0c 07 	call	0xe18	; 0xe18 <_ZN6String4copyEPKcj>
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <_ZN6StringaSEPKc+0x26>
     ee8:	0e 94 c0 06 	call	0xd80	; 0xd80 <_ZN6String10invalidateEv>
     eec:	ce 01       	movw	r24, r28
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	08 95       	ret

00000ef4 <_ZN6StringC1Ec>:
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	00 d0       	rcall	.+0      	; 0xefa <_ZN6StringC1Ec+0x6>
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	fc 01       	movw	r30, r24
     f00:	11 82       	std	Z+1, r1	; 0x01
     f02:	10 82       	st	Z, r1
     f04:	13 82       	std	Z+3, r1	; 0x03
     f06:	12 82       	std	Z+2, r1	; 0x02
     f08:	15 82       	std	Z+5, r1	; 0x05
     f0a:	14 82       	std	Z+4, r1	; 0x04
     f0c:	69 83       	std	Y+1, r22	; 0x01
     f0e:	1a 82       	std	Y+2, r1	; 0x02
     f10:	be 01       	movw	r22, r28
     f12:	6f 5f       	subi	r22, 0xFF	; 255
     f14:	7f 4f       	sbci	r23, 0xFF	; 255
     f16:	0e 94 63 07 	call	0xec6	; 0xec6 <_ZN6StringaSEPKc>
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	08 95       	ret

00000f24 <_ZN6String6concatEPKcj>:
     f24:	ef 92       	push	r14
     f26:	ff 92       	push	r15
     f28:	0f 93       	push	r16
     f2a:	1f 93       	push	r17
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	fc 01       	movw	r30, r24
     f32:	c4 81       	ldd	r28, Z+4	; 0x04
     f34:	d5 81       	ldd	r29, Z+5	; 0x05
     f36:	c4 0f       	add	r28, r20
     f38:	d5 1f       	adc	r29, r21
     f3a:	61 15       	cp	r22, r1
     f3c:	71 05       	cpc	r23, r1
     f3e:	c1 f0       	breq	.+48     	; 0xf70 <_ZN6String6concatEPKcj+0x4c>
     f40:	45 2b       	or	r20, r21
     f42:	c1 f0       	breq	.+48     	; 0xf74 <_ZN6String6concatEPKcj+0x50>
     f44:	7b 01       	movw	r14, r22
     f46:	8c 01       	movw	r16, r24
     f48:	be 01       	movw	r22, r28
     f4a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN6String7reserveEj>
     f4e:	88 23       	and	r24, r24
     f50:	91 f0       	breq	.+36     	; 0xf76 <_ZN6String6concatEPKcj+0x52>
     f52:	f8 01       	movw	r30, r16
     f54:	20 81       	ld	r18, Z
     f56:	31 81       	ldd	r19, Z+1	; 0x01
     f58:	84 81       	ldd	r24, Z+4	; 0x04
     f5a:	95 81       	ldd	r25, Z+5	; 0x05
     f5c:	b7 01       	movw	r22, r14
     f5e:	82 0f       	add	r24, r18
     f60:	93 1f       	adc	r25, r19
     f62:	0e 94 68 32 	call	0x64d0	; 0x64d0 <strcpy>
     f66:	f8 01       	movw	r30, r16
     f68:	d5 83       	std	Z+5, r29	; 0x05
     f6a:	c4 83       	std	Z+4, r28	; 0x04
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	03 c0       	rjmp	.+6      	; 0xf76 <_ZN6String6concatEPKcj+0x52>
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	01 c0       	rjmp	.+2      	; 0xf76 <_ZN6String6concatEPKcj+0x52>
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	08 95       	ret

00000f84 <_ZplRK15StringSumHelperRK6String>:
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	ec 01       	movw	r28, r24
     f8a:	fb 01       	movw	r30, r22
     f8c:	44 81       	ldd	r20, Z+4	; 0x04
     f8e:	55 81       	ldd	r21, Z+5	; 0x05
     f90:	60 81       	ld	r22, Z
     f92:	71 81       	ldd	r23, Z+1	; 0x01
     f94:	0e 94 92 07 	call	0xf24	; 0xf24 <_ZN6String6concatEPKcj>
     f98:	81 11       	cpse	r24, r1
     f9a:	03 c0       	rjmp	.+6      	; 0xfa2 <_ZplRK15StringSumHelperRK6String+0x1e>
     f9c:	ce 01       	movw	r24, r28
     f9e:	0e 94 c0 06 	call	0xd80	; 0xd80 <_ZN6String10invalidateEv>
     fa2:	ce 01       	movw	r24, r28
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	08 95       	ret

00000faa <_ZplRK15StringSumHelperPKc>:
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	ec 01       	movw	r28, r24
     fb0:	61 15       	cp	r22, r1
     fb2:	71 05       	cpc	r23, r1
     fb4:	71 f0       	breq	.+28     	; 0xfd2 <_ZplRK15StringSumHelperPKc+0x28>
     fb6:	fb 01       	movw	r30, r22
     fb8:	01 90       	ld	r0, Z+
     fba:	00 20       	and	r0, r0
     fbc:	e9 f7       	brne	.-6      	; 0xfb8 <_ZplRK15StringSumHelperPKc+0xe>
     fbe:	31 97       	sbiw	r30, 0x01	; 1
     fc0:	af 01       	movw	r20, r30
     fc2:	46 1b       	sub	r20, r22
     fc4:	57 0b       	sbc	r21, r23
     fc6:	0e 94 92 07 	call	0xf24	; 0xf24 <_ZN6String6concatEPKcj>
     fca:	88 23       	and	r24, r24
     fcc:	21 f0       	breq	.+8      	; 0xfd6 <_ZplRK15StringSumHelperPKc+0x2c>
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	03 c0       	rjmp	.+6      	; 0xfd8 <_ZplRK15StringSumHelperPKc+0x2e>
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	01 c0       	rjmp	.+2      	; 0xfd8 <_ZplRK15StringSumHelperPKc+0x2e>
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	88 23       	and	r24, r24
     fda:	19 f0       	breq	.+6      	; 0xfe2 <_ZplRK15StringSumHelperPKc+0x38>
     fdc:	ce 01       	movw	r24, r28
     fde:	0e 94 c0 06 	call	0xd80	; 0xd80 <_ZN6String10invalidateEv>
     fe2:	ce 01       	movw	r24, r28
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	08 95       	ret

00000fea <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
     fea:	fc 01       	movw	r30, r24
     fec:	24 81       	ldd	r18, Z+4	; 0x04
     fee:	35 81       	ldd	r19, Z+5	; 0x05
     ff0:	62 17       	cp	r22, r18
     ff2:	73 07       	cpc	r23, r19
     ff4:	20 f4       	brcc	.+8      	; 0xffe <_ZN6StringixEj+0x14>
     ff6:	80 81       	ld	r24, Z
     ff8:	91 81       	ldd	r25, Z+1	; 0x01
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	29 f4       	brne	.+10     	; 0x1008 <_ZN6StringixEj+0x1e>
		dummy_writable_char = 0;
     ffe:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <_ZZN6StringixEjE19dummy_writable_char>
		return dummy_writable_char;
    1002:	83 e2       	ldi	r24, 0x23	; 35
    1004:	93 e0       	ldi	r25, 0x03	; 3
    1006:	08 95       	ret
	}
	return buffer[index];
    1008:	86 0f       	add	r24, r22
    100a:	97 1f       	adc	r25, r23
}
    100c:	08 95       	ret

0000100e <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    100e:	cf 93       	push	r28
  uint8_t sreg = SREG;
    1010:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    1012:	f8 94       	cli
  if (!initialized) {
    1014:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <_ZN8SPIClass11initializedE>
    1018:	81 11       	cpse	r24, r1
    101a:	27 c0       	rjmp	.+78     	; 0x106a <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    101c:	ed e2       	ldi	r30, 0x2D	; 45
    101e:	f2 e0       	ldi	r31, 0x02	; 2
    1020:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    1022:	e9 e1       	ldi	r30, 0x19	; 25
    1024:	f2 e0       	ldi	r31, 0x02	; 2
    1026:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    1028:	e8 2f       	mov	r30, r24
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	ee 0f       	add	r30, r30
    102e:	ff 1f       	adc	r31, r31
    1030:	ef 5b       	subi	r30, 0xBF	; 191
    1032:	fd 4f       	sbci	r31, 0xFD	; 253
    1034:	a5 91       	lpm	r26, Z+
    1036:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    1038:	ec 91       	ld	r30, X
    103a:	e9 23       	and	r30, r25
    103c:	21 f4       	brne	.+8      	; 0x1046 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    103e:	61 e0       	ldi	r22, 0x01	; 1
    1040:	8a e0       	ldi	r24, 0x0A	; 10
    1042:	0e 94 87 06 	call	0xd0e	; 0xd0e <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    1046:	61 e0       	ldi	r22, 0x01	; 1
    1048:	8a e0       	ldi	r24, 0x0A	; 10
    104a:	0e 94 48 06 	call	0xc90	; 0xc90 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    104e:	8c b5       	in	r24, 0x2c	; 44
    1050:	80 61       	ori	r24, 0x10	; 16
    1052:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    1054:	8c b5       	in	r24, 0x2c	; 44
    1056:	80 64       	ori	r24, 0x40	; 64
    1058:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    105a:	61 e0       	ldi	r22, 0x01	; 1
    105c:	8d e0       	ldi	r24, 0x0D	; 13
    105e:	0e 94 48 06 	call	0xc90	; 0xc90 <pinMode>
    pinMode(MOSI, OUTPUT);
    1062:	61 e0       	ldi	r22, 0x01	; 1
    1064:	8b e0       	ldi	r24, 0x0B	; 11
    1066:	0e 94 48 06 	call	0xc90	; 0xc90 <pinMode>
  }
  initialized++; // reference count
    106a:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <_ZN8SPIClass11initializedE>
    106e:	8f 5f       	subi	r24, 0xFF	; 255
    1070:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    1074:	cf bf       	out	0x3f, r28	; 63
}
    1076:	cf 91       	pop	r28
    1078:	08 95       	ret

0000107a <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    107a:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <twi_state>
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <twi_sendStop>
    1084:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <twi_inRepStart>
    1088:	61 e0       	ldi	r22, 0x01	; 1
    108a:	82 e1       	ldi	r24, 0x12	; 18
    108c:	0e 94 87 06 	call	0xd0e	; 0xd0e <digitalWrite>
    1090:	61 e0       	ldi	r22, 0x01	; 1
    1092:	83 e1       	ldi	r24, 0x13	; 19
    1094:	0e 94 87 06 	call	0xd0e	; 0xd0e <digitalWrite>
    1098:	e9 eb       	ldi	r30, 0xB9	; 185
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	8e 7f       	andi	r24, 0xFE	; 254
    10a0:	80 83       	st	Z, r24
    10a2:	80 81       	ld	r24, Z
    10a4:	8d 7f       	andi	r24, 0xFD	; 253
    10a6:	80 83       	st	Z, r24
    10a8:	88 e4       	ldi	r24, 0x48	; 72
    10aa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    10ae:	85 e4       	ldi	r24, 0x45	; 69
    10b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    10b4:	08 95       	ret

000010b6 <twi_disable>:
    10b6:	ec eb       	ldi	r30, 0xBC	; 188
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	8a 7b       	andi	r24, 0xBA	; 186
    10be:	80 83       	st	Z, r24
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	82 e1       	ldi	r24, 0x12	; 18
    10c4:	0e 94 87 06 	call	0xd0e	; 0xd0e <digitalWrite>
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	83 e1       	ldi	r24, 0x13	; 19
    10cc:	0e 94 87 06 	call	0xd0e	; 0xd0e <digitalWrite>
    10d0:	08 95       	ret

000010d2 <twi_transmit>:
    10d2:	ac 01       	movw	r20, r24
    10d4:	90 91 4a 03 	lds	r25, 0x034A	; 0x80034a <twi_txBufferLength>
    10d8:	26 2f       	mov	r18, r22
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	29 0f       	add	r18, r25
    10de:	31 1d       	adc	r19, r1
    10e0:	21 32       	cpi	r18, 0x21	; 33
    10e2:	31 05       	cpc	r19, r1
    10e4:	f4 f4       	brge	.+60     	; 0x1122 <twi_transmit+0x50>
    10e6:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <twi_state>
    10ea:	84 30       	cpi	r24, 0x04	; 4
    10ec:	e1 f4       	brne	.+56     	; 0x1126 <twi_transmit+0x54>
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	0f c0       	rjmp	.+30     	; 0x1110 <twi_transmit+0x3e>
    10f2:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <twi_txBufferLength>
    10f6:	29 2f       	mov	r18, r25
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	f9 01       	movw	r30, r18
    10fc:	e8 0f       	add	r30, r24
    10fe:	f1 1d       	adc	r31, r1
    1100:	da 01       	movw	r26, r20
    1102:	a2 0f       	add	r26, r18
    1104:	b3 1f       	adc	r27, r19
    1106:	8c 91       	ld	r24, X
    1108:	e4 5b       	subi	r30, 0xB4	; 180
    110a:	fc 4f       	sbci	r31, 0xFC	; 252
    110c:	80 83       	st	Z, r24
    110e:	9f 5f       	subi	r25, 0xFF	; 255
    1110:	96 17       	cp	r25, r22
    1112:	78 f3       	brcs	.-34     	; 0x10f2 <twi_transmit+0x20>
    1114:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <twi_txBufferLength>
    1118:	68 0f       	add	r22, r24
    111a:	60 93 4a 03 	sts	0x034A, r22	; 0x80034a <twi_txBufferLength>
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	08 95       	ret
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	08 95       	ret
    1126:	82 e0       	ldi	r24, 0x02	; 2
    1128:	08 95       	ret

0000112a <twi_attachSlaveRxEvent>:
    112a:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <twi_onSlaveReceive+0x1>
    112e:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <twi_onSlaveReceive>
    1132:	08 95       	ret

00001134 <twi_attachSlaveTxEvent>:
    1134:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <twi_onSlaveTransmit+0x1>
    1138:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <twi_onSlaveTransmit>
    113c:	08 95       	ret

0000113e <twi_reply>:
    113e:	88 23       	and	r24, r24
    1140:	21 f0       	breq	.+8      	; 0x114a <twi_reply+0xc>
    1142:	85 ec       	ldi	r24, 0xC5	; 197
    1144:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1148:	08 95       	ret
    114a:	85 e8       	ldi	r24, 0x85	; 133
    114c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1150:	08 95       	ret

00001152 <twi_releaseBus>:
    1152:	85 ec       	ldi	r24, 0xC5	; 197
    1154:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1158:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <twi_state>
    115c:	08 95       	ret

0000115e <twi_handleTimeout>:
    115e:	ef 92       	push	r14
    1160:	ff 92       	push	r15
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <twi_timed_out_flag>
    1170:	88 23       	and	r24, r24
    1172:	71 f0       	breq	.+28     	; 0x1190 <twi_handleTimeout+0x32>
    1174:	c8 eb       	ldi	r28, 0xB8	; 184
    1176:	d0 e0       	ldi	r29, 0x00	; 0
    1178:	f8 80       	ld	r15, Y
    117a:	0a eb       	ldi	r16, 0xBA	; 186
    117c:	10 e0       	ldi	r17, 0x00	; 0
    117e:	f8 01       	movw	r30, r16
    1180:	e0 80       	ld	r14, Z
    1182:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <twi_disable>
    1186:	0e 94 3d 08 	call	0x107a	; 0x107a <twi_init>
    118a:	f8 01       	movw	r30, r16
    118c:	e0 82       	st	Z, r14
    118e:	f8 82       	st	Y, r15
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	ff 90       	pop	r15
    119a:	ef 90       	pop	r14
    119c:	08 95       	ret

0000119e <twi_writeTo>:
    119e:	4f 92       	push	r4
    11a0:	5f 92       	push	r5
    11a2:	6f 92       	push	r6
    11a4:	7f 92       	push	r7
    11a6:	8f 92       	push	r8
    11a8:	9f 92       	push	r9
    11aa:	af 92       	push	r10
    11ac:	bf 92       	push	r11
    11ae:	df 92       	push	r13
    11b0:	ef 92       	push	r14
    11b2:	ff 92       	push	r15
    11b4:	0f 93       	push	r16
    11b6:	1f 93       	push	r17
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	41 32       	cpi	r20, 0x21	; 33
    11be:	08 f0       	brcs	.+2      	; 0x11c2 <twi_writeTo+0x24>
    11c0:	d9 c0       	rjmp	.+434    	; 0x1374 <twi_writeTo+0x1d6>
    11c2:	12 2f       	mov	r17, r18
    11c4:	d4 2f       	mov	r29, r20
    11c6:	7b 01       	movw	r14, r22
    11c8:	d8 2e       	mov	r13, r24
    11ca:	0e 94 70 05 	call	0xae0	; 0xae0 <micros>
    11ce:	4b 01       	movw	r8, r22
    11d0:	5c 01       	movw	r10, r24
    11d2:	27 c0       	rjmp	.+78     	; 0x1222 <twi_writeTo+0x84>
    11d4:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <twi_timeout_us>
    11d8:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <twi_timeout_us+0x1>
    11dc:	a0 91 96 03 	lds	r26, 0x0396	; 0x800396 <twi_timeout_us+0x2>
    11e0:	b0 91 97 03 	lds	r27, 0x0397	; 0x800397 <twi_timeout_us+0x3>
    11e4:	89 2b       	or	r24, r25
    11e6:	8a 2b       	or	r24, r26
    11e8:	8b 2b       	or	r24, r27
    11ea:	d9 f0       	breq	.+54     	; 0x1222 <twi_writeTo+0x84>
    11ec:	0e 94 70 05 	call	0xae0	; 0xae0 <micros>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	88 19       	sub	r24, r8
    11f6:	99 09       	sbc	r25, r9
    11f8:	aa 09       	sbc	r26, r10
    11fa:	bb 09       	sbc	r27, r11
    11fc:	40 90 94 03 	lds	r4, 0x0394	; 0x800394 <twi_timeout_us>
    1200:	50 90 95 03 	lds	r5, 0x0395	; 0x800395 <twi_timeout_us+0x1>
    1204:	60 90 96 03 	lds	r6, 0x0396	; 0x800396 <twi_timeout_us+0x2>
    1208:	70 90 97 03 	lds	r7, 0x0397	; 0x800397 <twi_timeout_us+0x3>
    120c:	48 16       	cp	r4, r24
    120e:	59 06       	cpc	r5, r25
    1210:	6a 06       	cpc	r6, r26
    1212:	7b 06       	cpc	r7, r27
    1214:	30 f4       	brcc	.+12     	; 0x1222 <twi_writeTo+0x84>
    1216:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <twi_do_reset_on_timeout>
    121a:	0e 94 af 08 	call	0x115e	; 0x115e <twi_handleTimeout>
    121e:	c5 e0       	ldi	r28, 0x05	; 5
    1220:	ae c0       	rjmp	.+348    	; 0x137e <twi_writeTo+0x1e0>
    1222:	c0 91 9b 03 	lds	r28, 0x039B	; 0x80039b <twi_state>
    1226:	c1 11       	cpse	r28, r1
    1228:	d5 cf       	rjmp	.-86     	; 0x11d4 <twi_writeTo+0x36>
    122a:	82 e0       	ldi	r24, 0x02	; 2
    122c:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <twi_state>
    1230:	00 93 99 03 	sts	0x0399, r16	; 0x800399 <twi_sendStop>
    1234:	8f ef       	ldi	r24, 0xFF	; 255
    1236:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <twi_error>
    123a:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <twi_masterBufferIndex>
    123e:	d0 93 6c 03 	sts	0x036C, r29	; 0x80036c <twi_masterBufferLength>
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0a c0       	rjmp	.+20     	; 0x125a <twi_writeTo+0xbc>
    1246:	e9 2f       	mov	r30, r25
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	d7 01       	movw	r26, r14
    124c:	ae 0f       	add	r26, r30
    124e:	bf 1f       	adc	r27, r31
    1250:	3c 91       	ld	r19, X
    1252:	e2 59       	subi	r30, 0x92	; 146
    1254:	fc 4f       	sbci	r31, 0xFC	; 252
    1256:	30 83       	st	Z, r19
    1258:	9f 5f       	subi	r25, 0xFF	; 255
    125a:	9d 17       	cp	r25, r29
    125c:	a0 f3       	brcs	.-24     	; 0x1246 <twi_writeTo+0xa8>
    125e:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <twi_slarw>
    1262:	8d 2d       	mov	r24, r13
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	d0 90 9a 03 	lds	r13, 0x039A	; 0x80039a <twi_slarw>
    126e:	8d 29       	or	r24, r13
    1270:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <twi_slarw>
    1274:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <twi_inRepStart>
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	c9 f5       	brne	.+114    	; 0x12ee <twi_writeTo+0x150>
    127c:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <twi_inRepStart>
    1280:	0e 94 70 05 	call	0xae0	; 0xae0 <micros>
    1284:	4b 01       	movw	r8, r22
    1286:	5c 01       	movw	r10, r24
    1288:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <twi_slarw>
    128c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    1290:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <twi_timeout_us>
    1294:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <twi_timeout_us+0x1>
    1298:	a0 91 96 03 	lds	r26, 0x0396	; 0x800396 <twi_timeout_us+0x2>
    129c:	b0 91 97 03 	lds	r27, 0x0397	; 0x800397 <twi_timeout_us+0x3>
    12a0:	89 2b       	or	r24, r25
    12a2:	8a 2b       	or	r24, r26
    12a4:	8b 2b       	or	r24, r27
    12a6:	d9 f0       	breq	.+54     	; 0x12de <twi_writeTo+0x140>
    12a8:	0e 94 70 05 	call	0xae0	; 0xae0 <micros>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	88 19       	sub	r24, r8
    12b2:	99 09       	sbc	r25, r9
    12b4:	aa 09       	sbc	r26, r10
    12b6:	bb 09       	sbc	r27, r11
    12b8:	40 90 94 03 	lds	r4, 0x0394	; 0x800394 <twi_timeout_us>
    12bc:	50 90 95 03 	lds	r5, 0x0395	; 0x800395 <twi_timeout_us+0x1>
    12c0:	60 90 96 03 	lds	r6, 0x0396	; 0x800396 <twi_timeout_us+0x2>
    12c4:	70 90 97 03 	lds	r7, 0x0397	; 0x800397 <twi_timeout_us+0x3>
    12c8:	48 16       	cp	r4, r24
    12ca:	59 06       	cpc	r5, r25
    12cc:	6a 06       	cpc	r6, r26
    12ce:	7b 06       	cpc	r7, r27
    12d0:	30 f4       	brcc	.+12     	; 0x12de <twi_writeTo+0x140>
    12d2:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <twi_do_reset_on_timeout>
    12d6:	0e 94 af 08 	call	0x115e	; 0x115e <twi_handleTimeout>
    12da:	c5 e0       	ldi	r28, 0x05	; 5
    12dc:	50 c0       	rjmp	.+160    	; 0x137e <twi_writeTo+0x1e0>
    12de:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    12e2:	83 fd       	sbrc	r24, 3
    12e4:	d1 cf       	rjmp	.-94     	; 0x1288 <twi_writeTo+0xea>
    12e6:	85 ec       	ldi	r24, 0xC5	; 197
    12e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    12ec:	03 c0       	rjmp	.+6      	; 0x12f4 <twi_writeTo+0x156>
    12ee:	85 ee       	ldi	r24, 0xE5	; 229
    12f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    12f4:	0e 94 70 05 	call	0xae0	; 0xae0 <micros>
    12f8:	4b 01       	movw	r8, r22
    12fa:	5c 01       	movw	r10, r24
    12fc:	27 c0       	rjmp	.+78     	; 0x134c <twi_writeTo+0x1ae>
    12fe:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <twi_timeout_us>
    1302:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <twi_timeout_us+0x1>
    1306:	a0 91 96 03 	lds	r26, 0x0396	; 0x800396 <twi_timeout_us+0x2>
    130a:	b0 91 97 03 	lds	r27, 0x0397	; 0x800397 <twi_timeout_us+0x3>
    130e:	89 2b       	or	r24, r25
    1310:	8a 2b       	or	r24, r26
    1312:	8b 2b       	or	r24, r27
    1314:	d9 f0       	breq	.+54     	; 0x134c <twi_writeTo+0x1ae>
    1316:	0e 94 70 05 	call	0xae0	; 0xae0 <micros>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	88 19       	sub	r24, r8
    1320:	99 09       	sbc	r25, r9
    1322:	aa 09       	sbc	r26, r10
    1324:	bb 09       	sbc	r27, r11
    1326:	40 90 94 03 	lds	r4, 0x0394	; 0x800394 <twi_timeout_us>
    132a:	50 90 95 03 	lds	r5, 0x0395	; 0x800395 <twi_timeout_us+0x1>
    132e:	60 90 96 03 	lds	r6, 0x0396	; 0x800396 <twi_timeout_us+0x2>
    1332:	70 90 97 03 	lds	r7, 0x0397	; 0x800397 <twi_timeout_us+0x3>
    1336:	48 16       	cp	r4, r24
    1338:	59 06       	cpc	r5, r25
    133a:	6a 06       	cpc	r6, r26
    133c:	7b 06       	cpc	r7, r27
    133e:	30 f4       	brcc	.+12     	; 0x134c <twi_writeTo+0x1ae>
    1340:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <twi_do_reset_on_timeout>
    1344:	0e 94 af 08 	call	0x115e	; 0x115e <twi_handleTimeout>
    1348:	c5 e0       	ldi	r28, 0x05	; 5
    134a:	19 c0       	rjmp	.+50     	; 0x137e <twi_writeTo+0x1e0>
    134c:	11 23       	and	r17, r17
    134e:	21 f0       	breq	.+8      	; 0x1358 <twi_writeTo+0x1ba>
    1350:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <twi_state>
    1354:	82 30       	cpi	r24, 0x02	; 2
    1356:	99 f2       	breq	.-90     	; 0x12fe <twi_writeTo+0x160>
    1358:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <twi_error>
    135c:	8f 3f       	cpi	r24, 0xFF	; 255
    135e:	79 f0       	breq	.+30     	; 0x137e <twi_writeTo+0x1e0>
    1360:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <twi_error>
    1364:	80 32       	cpi	r24, 0x20	; 32
    1366:	41 f0       	breq	.+16     	; 0x1378 <twi_writeTo+0x1da>
    1368:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <twi_error>
    136c:	80 33       	cpi	r24, 0x30	; 48
    136e:	31 f4       	brne	.+12     	; 0x137c <twi_writeTo+0x1de>
    1370:	c3 e0       	ldi	r28, 0x03	; 3
    1372:	05 c0       	rjmp	.+10     	; 0x137e <twi_writeTo+0x1e0>
    1374:	c1 e0       	ldi	r28, 0x01	; 1
    1376:	03 c0       	rjmp	.+6      	; 0x137e <twi_writeTo+0x1e0>
    1378:	c2 e0       	ldi	r28, 0x02	; 2
    137a:	01 c0       	rjmp	.+2      	; 0x137e <twi_writeTo+0x1e0>
    137c:	c4 e0       	ldi	r28, 0x04	; 4
    137e:	8c 2f       	mov	r24, r28
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	1f 91       	pop	r17
    1386:	0f 91       	pop	r16
    1388:	ff 90       	pop	r15
    138a:	ef 90       	pop	r14
    138c:	df 90       	pop	r13
    138e:	bf 90       	pop	r11
    1390:	af 90       	pop	r10
    1392:	9f 90       	pop	r9
    1394:	8f 90       	pop	r8
    1396:	7f 90       	pop	r7
    1398:	6f 90       	pop	r6
    139a:	5f 90       	pop	r5
    139c:	4f 90       	pop	r4
    139e:	08 95       	ret

000013a0 <twi_stop>:
    13a0:	85 ed       	ldi	r24, 0xD5	; 213
    13a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    13a6:	40 91 94 03 	lds	r20, 0x0394	; 0x800394 <twi_timeout_us>
    13aa:	50 91 95 03 	lds	r21, 0x0395	; 0x800395 <twi_timeout_us+0x1>
    13ae:	60 91 96 03 	lds	r22, 0x0396	; 0x800396 <twi_timeout_us+0x2>
    13b2:	70 91 97 03 	lds	r23, 0x0397	; 0x800397 <twi_timeout_us+0x3>
    13b6:	49 5f       	subi	r20, 0xF9	; 249
    13b8:	5f 4f       	sbci	r21, 0xFF	; 255
    13ba:	6f 4f       	sbci	r22, 0xFF	; 255
    13bc:	7f 4f       	sbci	r23, 0xFF	; 255
    13be:	68 94       	set
    13c0:	12 f8       	bld	r1, 2
    13c2:	76 95       	lsr	r23
    13c4:	67 95       	ror	r22
    13c6:	57 95       	ror	r21
    13c8:	47 95       	ror	r20
    13ca:	16 94       	lsr	r1
    13cc:	d1 f7       	brne	.-12     	; 0x13c2 <twi_stop+0x22>
    13ce:	1f c0       	rjmp	.+62     	; 0x140e <twi_stop+0x6e>
    13d0:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <twi_timeout_us>
    13d4:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <twi_timeout_us+0x1>
    13d8:	a0 91 96 03 	lds	r26, 0x0396	; 0x800396 <twi_timeout_us+0x2>
    13dc:	b0 91 97 03 	lds	r27, 0x0397	; 0x800397 <twi_timeout_us+0x3>
    13e0:	89 2b       	or	r24, r25
    13e2:	8a 2b       	or	r24, r26
    13e4:	8b 2b       	or	r24, r27
    13e6:	99 f0       	breq	.+38     	; 0x140e <twi_stop+0x6e>
    13e8:	41 15       	cp	r20, r1
    13ea:	51 05       	cpc	r21, r1
    13ec:	61 05       	cpc	r22, r1
    13ee:	71 05       	cpc	r23, r1
    13f0:	49 f0       	breq	.+18     	; 0x1404 <twi_stop+0x64>
    13f2:	85 e3       	ldi	r24, 0x35	; 53
    13f4:	8a 95       	dec	r24
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <twi_stop+0x54>
    13f8:	00 00       	nop
    13fa:	41 50       	subi	r20, 0x01	; 1
    13fc:	51 09       	sbc	r21, r1
    13fe:	61 09       	sbc	r22, r1
    1400:	71 09       	sbc	r23, r1
    1402:	05 c0       	rjmp	.+10     	; 0x140e <twi_stop+0x6e>
    1404:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <twi_do_reset_on_timeout>
    1408:	0e 94 af 08 	call	0x115e	; 0x115e <twi_handleTimeout>
    140c:	08 95       	ret
    140e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1412:	84 fd       	sbrc	r24, 4
    1414:	dd cf       	rjmp	.-70     	; 0x13d0 <twi_stop+0x30>
    1416:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <twi_state>
    141a:	08 95       	ret

0000141c <__vector_24>:

ISR(TWI_vect)
{
    141c:	1f 92       	push	r1
    141e:	0f 92       	push	r0
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	0f 92       	push	r0
    1424:	11 24       	eor	r1, r1
    1426:	2f 93       	push	r18
    1428:	3f 93       	push	r19
    142a:	4f 93       	push	r20
    142c:	5f 93       	push	r21
    142e:	6f 93       	push	r22
    1430:	7f 93       	push	r23
    1432:	8f 93       	push	r24
    1434:	9f 93       	push	r25
    1436:	af 93       	push	r26
    1438:	bf 93       	push	r27
    143a:	ef 93       	push	r30
    143c:	ff 93       	push	r31
  switch(TW_STATUS){
    143e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    1442:	e8 2f       	mov	r30, r24
    1444:	e8 7f       	andi	r30, 0xF8	; 248
    1446:	8e 2f       	mov	r24, r30
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	89 3c       	cpi	r24, 0xC9	; 201
    144c:	91 05       	cpc	r25, r1
    144e:	08 f0       	brcs	.+2      	; 0x1452 <__vector_24+0x36>
    1450:	f5 c0       	rjmp	.+490    	; 0x163c <__vector_24+0x220>
    1452:	fc 01       	movw	r30, r24
    1454:	ec 5c       	subi	r30, 0xCC	; 204
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	0c 94 27 30 	jmp	0x604e	; 0x604e <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    145c:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <twi_slarw>
    1460:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      twi_reply(1);
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	0e 94 9f 08 	call	0x113e	; 0x113e <twi_reply>
      break;
    146a:	e8 c0       	rjmp	.+464    	; 0x163c <__vector_24+0x220>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    146c:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <twi_masterBufferIndex>
    1470:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <twi_masterBufferLength>
    1474:	98 17       	cp	r25, r24
    1476:	80 f4       	brcc	.+32     	; 0x1498 <__vector_24+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1478:	e0 91 6d 03 	lds	r30, 0x036D	; 0x80036d <twi_masterBufferIndex>
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	8e 0f       	add	r24, r30
    1480:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <twi_masterBufferIndex>
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	e2 59       	subi	r30, 0x92	; 146
    1488:	fc 4f       	sbci	r31, 0xFC	; 252
    148a:	80 81       	ld	r24, Z
    148c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
        twi_reply(1);
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	0e 94 9f 08 	call	0x113e	; 0x113e <twi_reply>
    1496:	d2 c0       	rjmp	.+420    	; 0x163c <__vector_24+0x220>
      }else{
        if (twi_sendStop){
    1498:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <twi_sendStop>
    149c:	88 23       	and	r24, r24
    149e:	19 f0       	breq	.+6      	; 0x14a6 <__vector_24+0x8a>
          twi_stop();
    14a0:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <twi_stop>
    14a4:	cb c0       	rjmp	.+406    	; 0x163c <__vector_24+0x220>
       } else {
         twi_inRepStart = true;	// we're gonna send the START
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <twi_inRepStart>
         // don't enable the interrupt. We'll generate the start, but we
         // avoid handling the interrupt until we're in the next transaction,
         // at the point where we would normally issue the start.
         TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    14ac:	84 ea       	ldi	r24, 0xA4	; 164
    14ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
         twi_state = TWI_READY;
    14b2:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <twi_state>
    14b6:	c2 c0       	rjmp	.+388    	; 0x163c <__vector_24+0x220>
        }
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    14b8:	80 e2       	ldi	r24, 0x20	; 32
    14ba:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <twi_error>
      twi_stop();
    14be:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <twi_stop>
      break;
    14c2:	bc c0       	rjmp	.+376    	; 0x163c <__vector_24+0x220>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    14c4:	80 e3       	ldi	r24, 0x30	; 48
    14c6:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <twi_error>
      twi_stop();
    14ca:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <twi_stop>
      break;
    14ce:	b6 c0       	rjmp	.+364    	; 0x163c <__vector_24+0x220>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    14d0:	88 e3       	ldi	r24, 0x38	; 56
    14d2:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <twi_error>
      twi_releaseBus();
    14d6:	0e 94 a9 08 	call	0x1152	; 0x1152 <twi_releaseBus>
      break;
    14da:	b0 c0       	rjmp	.+352    	; 0x163c <__vector_24+0x220>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    14dc:	e0 91 6d 03 	lds	r30, 0x036D	; 0x80036d <twi_masterBufferIndex>
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	8e 0f       	add	r24, r30
    14e4:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <twi_masterBufferIndex>
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    14ee:	e2 59       	subi	r30, 0x92	; 146
    14f0:	fc 4f       	sbci	r31, 0xFC	; 252
    14f2:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    14f4:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <twi_masterBufferIndex>
    14f8:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <twi_masterBufferLength>
    14fc:	98 17       	cp	r25, r24
    14fe:	20 f4       	brcc	.+8      	; 0x1508 <__vector_24+0xec>
        twi_reply(1);
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	0e 94 9f 08 	call	0x113e	; 0x113e <twi_reply>
    1506:	9a c0       	rjmp	.+308    	; 0x163c <__vector_24+0x220>
      }else{
        twi_reply(0);
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	0e 94 9f 08 	call	0x113e	; 0x113e <twi_reply>
    150e:	96 c0       	rjmp	.+300    	; 0x163c <__vector_24+0x220>
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1510:	e0 91 6d 03 	lds	r30, 0x036D	; 0x80036d <twi_masterBufferIndex>
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	8e 0f       	add	r24, r30
    1518:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <twi_masterBufferIndex>
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    1522:	e2 59       	subi	r30, 0x92	; 146
    1524:	fc 4f       	sbci	r31, 0xFC	; 252
    1526:	80 83       	st	Z, r24
      if (twi_sendStop){
    1528:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <twi_sendStop>
    152c:	88 23       	and	r24, r24
    152e:	19 f0       	breq	.+6      	; 0x1536 <__vector_24+0x11a>
        twi_stop();
    1530:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <twi_stop>
    1534:	83 c0       	rjmp	.+262    	; 0x163c <__vector_24+0x220>
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    153c:	84 ea       	ldi	r24, 0xA4	; 164
    153e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
        twi_state = TWI_READY;
    1542:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <twi_state>
    1546:	7a c0       	rjmp	.+244    	; 0x163c <__vector_24+0x220>
      }
      break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    1548:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <twi_stop>
      break;
    154c:	77 c0       	rjmp	.+238    	; 0x163c <__vector_24+0x220>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    154e:	83 e0       	ldi	r24, 0x03	; 3
    1550:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1554:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <twi_rxBufferIndex>
      twi_reply(1);
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	0e 94 9f 08 	call	0x113e	; 0x113e <twi_reply>
      break;
    155e:	6e c0       	rjmp	.+220    	; 0x163c <__vector_24+0x220>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1560:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <twi_rxBufferIndex>
    1564:	80 32       	cpi	r24, 0x20	; 32
    1566:	80 f4       	brcc	.+32     	; 0x1588 <__vector_24+0x16c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1568:	e0 91 29 03 	lds	r30, 0x0329	; 0x800329 <twi_rxBufferIndex>
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	8e 0f       	add	r24, r30
    1570:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <twi_rxBufferIndex>
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    157a:	e6 5d       	subi	r30, 0xD6	; 214
    157c:	fc 4f       	sbci	r31, 0xFC	; 252
    157e:	80 83       	st	Z, r24
        twi_reply(1);
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	0e 94 9f 08 	call	0x113e	; 0x113e <twi_reply>
    1586:	5a c0       	rjmp	.+180    	; 0x163c <__vector_24+0x220>
      }else{
        // otherwise nack
        twi_reply(0);
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	0e 94 9f 08 	call	0x113e	; 0x113e <twi_reply>
    158e:	56 c0       	rjmp	.+172    	; 0x163c <__vector_24+0x220>
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1590:	0e 94 a9 08 	call	0x1152	; 0x1152 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1594:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <twi_rxBufferIndex>
    1598:	80 32       	cpi	r24, 0x20	; 32
    159a:	30 f4       	brcc	.+12     	; 0x15a8 <__vector_24+0x18c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    159c:	e0 91 29 03 	lds	r30, 0x0329	; 0x800329 <twi_rxBufferIndex>
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	e6 5d       	subi	r30, 0xD6	; 214
    15a4:	fc 4f       	sbci	r31, 0xFC	; 252
    15a6:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    15a8:	60 91 29 03 	lds	r22, 0x0329	; 0x800329 <twi_rxBufferIndex>
    15ac:	70 e0       	ldi	r23, 0x00	; 0
    15ae:	e0 91 8e 03 	lds	r30, 0x038E	; 0x80038e <twi_onSlaveReceive>
    15b2:	f0 91 8f 03 	lds	r31, 0x038F	; 0x80038f <twi_onSlaveReceive+0x1>
    15b6:	8a e2       	ldi	r24, 0x2A	; 42
    15b8:	93 e0       	ldi	r25, 0x03	; 3
    15ba:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    15bc:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <twi_rxBufferIndex>
      break;
    15c0:	3d c0       	rjmp	.+122    	; 0x163c <__vector_24+0x220>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	0e 94 9f 08 	call	0x113e	; 0x113e <twi_reply>
      break;
    15c8:	39 c0       	rjmp	.+114    	; 0x163c <__vector_24+0x220>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    15ca:	84 e0       	ldi	r24, 0x04	; 4
    15cc:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    15d0:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    15d4:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    15d8:	e0 91 90 03 	lds	r30, 0x0390	; 0x800390 <twi_onSlaveTransmit>
    15dc:	f0 91 91 03 	lds	r31, 0x0391	; 0x800391 <twi_onSlaveTransmit+0x1>
    15e0:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    15e2:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <twi_txBufferLength>
    15e6:	81 11       	cpse	r24, r1
    15e8:	05 c0       	rjmp	.+10     	; 0x15f4 <__vector_24+0x1d8>
        twi_txBufferLength = 1;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    15f0:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    15f4:	e0 91 4b 03 	lds	r30, 0x034B	; 0x80034b <twi_txBufferIndex>
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	8e 0f       	add	r24, r30
    15fc:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <twi_txBufferIndex>
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	e4 5b       	subi	r30, 0xB4	; 180
    1604:	fc 4f       	sbci	r31, 0xFC	; 252
    1606:	80 81       	ld	r24, Z
    1608:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    160c:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <twi_txBufferIndex>
    1610:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <twi_txBufferLength>
    1614:	98 17       	cp	r25, r24
    1616:	20 f4       	brcc	.+8      	; 0x1620 <__vector_24+0x204>
        twi_reply(1);
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	0e 94 9f 08 	call	0x113e	; 0x113e <twi_reply>
    161e:	0e c0       	rjmp	.+28     	; 0x163c <__vector_24+0x220>
      }else{
        twi_reply(0);
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	0e 94 9f 08 	call	0x113e	; 0x113e <twi_reply>
    1626:	0a c0       	rjmp	.+20     	; 0x163c <__vector_24+0x220>
      }
      break;
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	0e 94 9f 08 	call	0x113e	; 0x113e <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
    162e:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <twi_state>
      break;
    1632:	04 c0       	rjmp	.+8      	; 0x163c <__vector_24+0x220>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1634:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <twi_error>
      twi_stop();
    1638:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <twi_stop>
      break;
  }
}
    163c:	ff 91       	pop	r31
    163e:	ef 91       	pop	r30
    1640:	bf 91       	pop	r27
    1642:	af 91       	pop	r26
    1644:	9f 91       	pop	r25
    1646:	8f 91       	pop	r24
    1648:	7f 91       	pop	r23
    164a:	6f 91       	pop	r22
    164c:	5f 91       	pop	r21
    164e:	4f 91       	pop	r20
    1650:	3f 91       	pop	r19
    1652:	2f 91       	pop	r18
    1654:	0f 90       	pop	r0
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	0f 90       	pop	r0
    165a:	1f 90       	pop	r1
    165c:	18 95       	reti

0000165e <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    165e:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <_ZN7TwoWire14rxBufferLengthE>
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	20 91 d1 03 	lds	r18, 0x03D1	; 0x8003d1 <_ZN7TwoWire13rxBufferIndexE>
    1668:	82 1b       	sub	r24, r18
    166a:	91 09       	sbc	r25, r1
    166c:	08 95       	ret

0000166e <_ZN7TwoWire4readEv>:
    166e:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <_ZN7TwoWire13rxBufferIndexE>
    1672:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <_ZN7TwoWire14rxBufferLengthE>
    1676:	98 17       	cp	r25, r24
    1678:	50 f4       	brcc	.+20     	; 0x168e <_ZN7TwoWire4readEv+0x20>
    167a:	e9 2f       	mov	r30, r25
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	ee 52       	subi	r30, 0x2E	; 46
    1680:	fc 4f       	sbci	r31, 0xFC	; 252
    1682:	20 81       	ld	r18, Z
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	9f 5f       	subi	r25, 0xFF	; 255
    1688:	90 93 d1 03 	sts	0x03D1, r25	; 0x8003d1 <_ZN7TwoWire13rxBufferIndexE>
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <_ZN7TwoWire4readEv+0x24>
    168e:	2f ef       	ldi	r18, 0xFF	; 255
    1690:	3f ef       	ldi	r19, 0xFF	; 255
    1692:	c9 01       	movw	r24, r18
    1694:	08 95       	ret

00001696 <_ZN7TwoWire4peekEv>:
    1696:	e0 91 d1 03 	lds	r30, 0x03D1	; 0x8003d1 <_ZN7TwoWire13rxBufferIndexE>
    169a:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <_ZN7TwoWire14rxBufferLengthE>
    169e:	e8 17       	cp	r30, r24
    16a0:	30 f4       	brcc	.+12     	; 0x16ae <_ZN7TwoWire4peekEv+0x18>
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	ee 52       	subi	r30, 0x2E	; 46
    16a6:	fc 4f       	sbci	r31, 0xFC	; 252
    16a8:	80 81       	ld	r24, Z
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	08 95       	ret
    16ae:	8f ef       	ldi	r24, 0xFF	; 255
    16b0:	9f ef       	ldi	r25, 0xFF	; 255
    16b2:	08 95       	ret

000016b4 <_ZN7TwoWire5flushEv>:
    16b4:	08 95       	ret

000016b6 <_ZN7TwoWire16onReceiveServiceEPhi>:
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	ec 01       	movw	r28, r24
    16bc:	e0 91 a8 03 	lds	r30, 0x03A8	; 0x8003a8 <_ZN7TwoWire14user_onReceiveE>
    16c0:	f0 91 a9 03 	lds	r31, 0x03A9	; 0x8003a9 <_ZN7TwoWire14user_onReceiveE+0x1>
    16c4:	30 97       	sbiw	r30, 0x00	; 0
    16c6:	e1 f0       	breq	.+56     	; 0x1700 <_ZN7TwoWire16onReceiveServiceEPhi+0x4a>
    16c8:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <_ZN7TwoWire13rxBufferIndexE>
    16cc:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <_ZN7TwoWire14rxBufferLengthE>
    16d0:	98 17       	cp	r25, r24
    16d2:	b0 f0       	brcs	.+44     	; 0x1700 <_ZN7TwoWire16onReceiveServiceEPhi+0x4a>
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	29 2f       	mov	r18, r25
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	26 17       	cp	r18, r22
    16dc:	37 07       	cpc	r19, r23
    16de:	54 f4       	brge	.+20     	; 0x16f4 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    16e0:	de 01       	movw	r26, r28
    16e2:	a9 0f       	add	r26, r25
    16e4:	b1 1d       	adc	r27, r1
    16e6:	4c 91       	ld	r20, X
    16e8:	d9 01       	movw	r26, r18
    16ea:	ae 52       	subi	r26, 0x2E	; 46
    16ec:	bc 4f       	sbci	r27, 0xFC	; 252
    16ee:	4c 93       	st	X, r20
    16f0:	9f 5f       	subi	r25, 0xFF	; 255
    16f2:	f1 cf       	rjmp	.-30     	; 0x16d6 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    16f4:	cb 01       	movw	r24, r22
    16f6:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <_ZN7TwoWire13rxBufferIndexE>
    16fa:	60 93 d0 03 	sts	0x03D0, r22	; 0x8003d0 <_ZN7TwoWire14rxBufferLengthE>
    16fe:	09 95       	icall
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	08 95       	ret

00001706 <_ZN7TwoWire16onRequestServiceEv>:
    1706:	e0 91 aa 03 	lds	r30, 0x03AA	; 0x8003aa <_ZN7TwoWire14user_onRequestE>
    170a:	f0 91 ab 03 	lds	r31, 0x03AB	; 0x8003ab <_ZN7TwoWire14user_onRequestE+0x1>
    170e:	30 97       	sbiw	r30, 0x00	; 0
    1710:	29 f0       	breq	.+10     	; 0x171c <_ZN7TwoWire16onRequestServiceEv+0x16>
    1712:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <_ZN7TwoWire13txBufferIndexE>
    1716:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <_ZN7TwoWire14txBufferLengthE>
    171a:	09 95       	icall
    171c:	08 95       	ret

0000171e <_ZN7TwoWire5writeEPKhj>:
    171e:	cf 92       	push	r12
    1720:	df 92       	push	r13
    1722:	ef 92       	push	r14
    1724:	ff 92       	push	r15
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	8c 01       	movw	r16, r24
    1730:	6b 01       	movw	r12, r22
    1732:	7a 01       	movw	r14, r20
    1734:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <_ZN7TwoWire12transmittingE>
    1738:	88 23       	and	r24, r24
    173a:	99 f0       	breq	.+38     	; 0x1762 <_ZN7TwoWire5writeEPKhj+0x44>
    173c:	c0 e0       	ldi	r28, 0x00	; 0
    173e:	d0 e0       	ldi	r29, 0x00	; 0
    1740:	ce 15       	cp	r28, r14
    1742:	df 05       	cpc	r29, r15
    1744:	90 f4       	brcc	.+36     	; 0x176a <_ZN7TwoWire5writeEPKhj+0x4c>
    1746:	d8 01       	movw	r26, r16
    1748:	ed 91       	ld	r30, X+
    174a:	fc 91       	ld	r31, X
    174c:	01 90       	ld	r0, Z+
    174e:	f0 81       	ld	r31, Z
    1750:	e0 2d       	mov	r30, r0
    1752:	d6 01       	movw	r26, r12
    1754:	ac 0f       	add	r26, r28
    1756:	bd 1f       	adc	r27, r29
    1758:	6c 91       	ld	r22, X
    175a:	c8 01       	movw	r24, r16
    175c:	09 95       	icall
    175e:	21 96       	adiw	r28, 0x01	; 1
    1760:	ef cf       	rjmp	.-34     	; 0x1740 <_ZN7TwoWire5writeEPKhj+0x22>
    1762:	64 2f       	mov	r22, r20
    1764:	c6 01       	movw	r24, r12
    1766:	0e 94 69 08 	call	0x10d2	; 0x10d2 <twi_transmit>
    176a:	c7 01       	movw	r24, r14
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	1f 91       	pop	r17
    1772:	0f 91       	pop	r16
    1774:	ff 90       	pop	r15
    1776:	ef 90       	pop	r14
    1778:	df 90       	pop	r13
    177a:	cf 90       	pop	r12
    177c:	08 95       	ret

0000177e <_ZN7TwoWire5writeEh>:
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	1f 92       	push	r1
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	fc 01       	movw	r30, r24
    178a:	69 83       	std	Y+1, r22	; 0x01
    178c:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <_ZN7TwoWire12transmittingE>
    1790:	99 23       	and	r25, r25
    1792:	d9 f0       	breq	.+54     	; 0x17ca <_ZN7TwoWire5writeEh+0x4c>
    1794:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <_ZN7TwoWire14txBufferLengthE>
    1798:	90 32       	cpi	r25, 0x20	; 32
    179a:	38 f0       	brcs	.+14     	; 0x17aa <_ZN7TwoWire5writeEh+0x2c>
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	93 83       	std	Z+3, r25	; 0x03
    17a2:	82 83       	std	Z+2, r24	; 0x02
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	17 c0       	rjmp	.+46     	; 0x17d8 <_ZN7TwoWire5writeEh+0x5a>
    17aa:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <_ZN7TwoWire13txBufferIndexE>
    17ae:	e8 2f       	mov	r30, r24
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	e1 55       	subi	r30, 0x51	; 81
    17b4:	fc 4f       	sbci	r31, 0xFC	; 252
    17b6:	99 81       	ldd	r25, Y+1	; 0x01
    17b8:	90 83       	st	Z, r25
    17ba:	8f 5f       	subi	r24, 0xFF	; 255
    17bc:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <_ZN7TwoWire13txBufferIndexE>
    17c0:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <_ZN7TwoWire14txBufferLengthE>
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	07 c0       	rjmp	.+14     	; 0x17d8 <_ZN7TwoWire5writeEh+0x5a>
    17ca:	61 e0       	ldi	r22, 0x01	; 1
    17cc:	ce 01       	movw	r24, r28
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	0e 94 69 08 	call	0x10d2	; 0x10d2 <twi_transmit>
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	0f 90       	pop	r0
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	08 95       	ret

000017e0 <_ZN7TwoWireC1Ev>:
    17e0:	fc 01       	movw	r30, r24
    17e2:	13 82       	std	Z+3, r1	; 0x03
    17e4:	12 82       	std	Z+2, r1	; 0x02
    17e6:	88 ee       	ldi	r24, 0xE8	; 232
    17e8:	93 e0       	ldi	r25, 0x03	; 3
    17ea:	a0 e0       	ldi	r26, 0x00	; 0
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	84 83       	std	Z+4, r24	; 0x04
    17f0:	95 83       	std	Z+5, r25	; 0x05
    17f2:	a6 83       	std	Z+6, r26	; 0x06
    17f4:	b7 83       	std	Z+7, r27	; 0x07
    17f6:	84 e9       	ldi	r24, 0x94	; 148
    17f8:	91 e0       	ldi	r25, 0x01	; 1
    17fa:	91 83       	std	Z+1, r25	; 0x01
    17fc:	80 83       	st	Z, r24
    17fe:	08 95       	ret

00001800 <_Z41__static_initialization_and_destruction_0ii>:
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	39 f4       	brne	.+14     	; 0x1812 <_Z41__static_initialization_and_destruction_0ii+0x12>
    1804:	6f 3f       	cpi	r22, 0xFF	; 255
    1806:	7f 4f       	sbci	r23, 0xFF	; 255
    1808:	21 f4       	brne	.+8      	; 0x1812 <_Z41__static_initialization_and_destruction_0ii+0x12>
    180a:	8c e9       	ldi	r24, 0x9C	; 156
    180c:	93 e0       	ldi	r25, 0x03	; 3
    180e:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <_ZN7TwoWireC1Ev>
    1812:	08 95       	ret

00001814 <_ZN7TwoWire5beginEv>:
    1814:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <_ZN7TwoWire13rxBufferIndexE>
    1818:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <_ZN7TwoWire14rxBufferLengthE>
    181c:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <_ZN7TwoWire13txBufferIndexE>
    1820:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <_ZN7TwoWire14txBufferLengthE>
    1824:	0e 94 3d 08 	call	0x107a	; 0x107a <twi_init>
    1828:	83 e8       	ldi	r24, 0x83	; 131
    182a:	9b e0       	ldi	r25, 0x0B	; 11
    182c:	0e 94 9a 08 	call	0x1134	; 0x1134 <twi_attachSlaveTxEvent>
    1830:	8b e5       	ldi	r24, 0x5B	; 91
    1832:	9b e0       	ldi	r25, 0x0B	; 11
    1834:	0e 94 95 08 	call	0x112a	; 0x112a <twi_attachSlaveRxEvent>
    1838:	08 95       	ret

0000183a <_ZN7TwoWire17beginTransmissionEh>:
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <_ZN7TwoWire12transmittingE>
    1840:	60 93 cf 03 	sts	0x03CF, r22	; 0x8003cf <_ZN7TwoWire9txAddressE>
    1844:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <_ZN7TwoWire13txBufferIndexE>
    1848:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <_ZN7TwoWire14txBufferLengthE>
    184c:	08 95       	ret

0000184e <_ZN7TwoWire15endTransmissionEh>:
    184e:	0f 93       	push	r16
    1850:	40 91 ad 03 	lds	r20, 0x03AD	; 0x8003ad <_ZN7TwoWire14txBufferLengthE>
    1854:	06 2f       	mov	r16, r22
    1856:	21 e0       	ldi	r18, 0x01	; 1
    1858:	6f ea       	ldi	r22, 0xAF	; 175
    185a:	73 e0       	ldi	r23, 0x03	; 3
    185c:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <_ZN7TwoWire9txAddressE>
    1860:	0e 94 cf 08 	call	0x119e	; 0x119e <twi_writeTo>
    1864:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <_ZN7TwoWire13txBufferIndexE>
    1868:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <_ZN7TwoWire14txBufferLengthE>
    186c:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <_ZN7TwoWire12transmittingE>
    1870:	0f 91       	pop	r16
    1872:	08 95       	ret

00001874 <_ZN7TwoWire15endTransmissionEv>:
    1874:	61 e0       	ldi	r22, 0x01	; 1
    1876:	0e 94 27 0c 	call	0x184e	; 0x184e <_ZN7TwoWire15endTransmissionEh>
    187a:	08 95       	ret

0000187c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    187c:	6f ef       	ldi	r22, 0xFF	; 255
    187e:	7f ef       	ldi	r23, 0xFF	; 255
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	0e 94 00 0c 	call	0x1800	; 0x1800 <_Z41__static_initialization_and_destruction_0ii>
    1888:	08 95       	ret

0000188a <_ZN5SDLib4File5writeEh>:
}

// a directory is a special type of file
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	1f 92       	push	r1
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	69 83       	std	Y+1, r22	; 0x01
    1896:	dc 01       	movw	r26, r24
    1898:	ed 91       	ld	r30, X+
    189a:	fc 91       	ld	r31, X
    189c:	02 80       	ldd	r0, Z+2	; 0x02
    189e:	f3 81       	ldd	r31, Z+3	; 0x03
    18a0:	e0 2d       	mov	r30, r0
    18a2:	41 e0       	ldi	r20, 0x01	; 1
    18a4:	50 e0       	ldi	r21, 0x00	; 0
    18a6:	be 01       	movw	r22, r28
    18a8:	6f 5f       	subi	r22, 0xFF	; 255
    18aa:	7f 4f       	sbci	r23, 0xFF	; 255
    18ac:	09 95       	icall
    18ae:	0f 90       	pop	r0
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	08 95       	ret

000018b6 <_ZN5SDLib4File17availableForWriteEv>:
    18b6:	dc 01       	movw	r26, r24
    18b8:	59 96       	adiw	r26, 0x19	; 25
    18ba:	8d 91       	ld	r24, X+
    18bc:	9c 91       	ld	r25, X
    18be:	5a 97       	sbiw	r26, 0x1a	; 26
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	41 f0       	breq	.+16     	; 0x18d4 <_ZN5SDLib4File17availableForWriteEv+0x1e>
    18c4:	dc 01       	movw	r26, r24
    18c6:	ed 91       	ld	r30, X+
    18c8:	fc 91       	ld	r31, X
    18ca:	04 80       	ldd	r0, Z+4	; 0x04
    18cc:	f5 81       	ldd	r31, Z+5	; 0x05
    18ce:	e0 2d       	mov	r30, r0
    18d0:	09 95       	icall
    18d2:	08 95       	ret
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	08 95       	ret

000018da <_ZN5SDLib4File5writeEPKhj>:
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	dc 01       	movw	r26, r24
    18e0:	59 96       	adiw	r26, 0x19	; 25
    18e2:	ed 91       	ld	r30, X+
    18e4:	fc 91       	ld	r31, X
    18e6:	5a 97       	sbiw	r26, 0x1a	; 26
    18e8:	30 97       	sbiw	r30, 0x00	; 0
    18ea:	49 f4       	brne	.+18     	; 0x18fe <_ZN5SDLib4File5writeEPKhj+0x24>
    18ec:	21 e0       	ldi	r18, 0x01	; 1
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	13 96       	adiw	r26, 0x03	; 3
    18f2:	3c 93       	st	X, r19
    18f4:	2e 93       	st	-X, r18
    18f6:	12 97       	sbiw	r26, 0x02	; 2
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	13 c0       	rjmp	.+38     	; 0x1924 <_ZN5SDLib4File5writeEPKhj+0x4a>
    18fe:	ec 01       	movw	r28, r24
    1900:	13 82       	std	Z+3, r1	; 0x03
    1902:	12 82       	std	Z+2, r1	; 0x02
    1904:	89 8d       	ldd	r24, Y+25	; 0x19
    1906:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1908:	0e 94 9a 1b 	call	0x3734	; 0x3734 <_ZN6SdFile5writeEPKvj>
    190c:	e9 8d       	ldd	r30, Y+25	; 0x19
    190e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1910:	22 81       	ldd	r18, Z+2	; 0x02
    1912:	33 81       	ldd	r19, Z+3	; 0x03
    1914:	23 2b       	or	r18, r19
    1916:	31 f0       	breq	.+12     	; 0x1924 <_ZN5SDLib4File5writeEPKhj+0x4a>
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	9b 83       	std	Y+3, r25	; 0x03
    191e:	8a 83       	std	Y+2, r24	; 0x02
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	08 95       	ret

0000192a <_ZN5SDLib4File4readEv>:
    192a:	cf 93       	push	r28
    192c:	df 93       	push	r29
    192e:	1f 92       	push	r1
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	fc 01       	movw	r30, r24
    1936:	81 8d       	ldd	r24, Z+25	; 0x19
    1938:	92 8d       	ldd	r25, Z+26	; 0x1a
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	79 f0       	breq	.+30     	; 0x195c <_ZN5SDLib4File4readEv+0x32>
    193e:	41 e0       	ldi	r20, 0x01	; 1
    1940:	50 e0       	ldi	r21, 0x00	; 0
    1942:	be 01       	movw	r22, r28
    1944:	6f 5f       	subi	r22, 0xFF	; 255
    1946:	7f 4f       	sbci	r23, 0xFF	; 255
    1948:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN6SdFile4readEPvj>
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	19 f4       	brne	.+6      	; 0x1956 <_ZN5SDLib4File4readEv+0x2c>
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	05 c0       	rjmp	.+10     	; 0x1960 <_ZN5SDLib4File4readEv+0x36>
    1956:	8f ef       	ldi	r24, 0xFF	; 255
    1958:	9f ef       	ldi	r25, 0xFF	; 255
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <_ZN5SDLib4File4readEv+0x36>
    195c:	8f ef       	ldi	r24, 0xFF	; 255
    195e:	9f ef       	ldi	r25, 0xFF	; 255
    1960:	0f 90       	pop	r0
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	08 95       	ret

00001968 <_ZN5SDLib4File4peekEv>:
    1968:	ef 92       	push	r14
    196a:	ff 92       	push	r15
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	1f 92       	push	r1
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	fc 01       	movw	r30, r24
    197c:	81 8d       	ldd	r24, Z+25	; 0x19
    197e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	19 f1       	breq	.+70     	; 0x19ca <_ZN5SDLib4File4peekEv+0x62>
    1984:	8f 01       	movw	r16, r30
    1986:	41 e0       	ldi	r20, 0x01	; 1
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	be 01       	movw	r22, r28
    198c:	6f 5f       	subi	r22, 0xFF	; 255
    198e:	7f 4f       	sbci	r23, 0xFF	; 255
    1990:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN6SdFile4readEPvj>
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	19 f4       	brne	.+6      	; 0x199e <_ZN5SDLib4File4peekEv+0x36>
    1998:	e9 80       	ldd	r14, Y+1	; 0x01
    199a:	f1 2c       	mov	r15, r1
    199c:	03 c0       	rjmp	.+6      	; 0x19a4 <_ZN5SDLib4File4peekEv+0x3c>
    199e:	ee 24       	eor	r14, r14
    19a0:	ea 94       	dec	r14
    19a2:	fe 2c       	mov	r15, r14
    19a4:	8f ef       	ldi	r24, 0xFF	; 255
    19a6:	e8 16       	cp	r14, r24
    19a8:	f8 06       	cpc	r15, r24
    19aa:	89 f0       	breq	.+34     	; 0x19ce <_ZN5SDLib4File4peekEv+0x66>
    19ac:	f8 01       	movw	r30, r16
    19ae:	81 8d       	ldd	r24, Z+25	; 0x19
    19b0:	92 8d       	ldd	r25, Z+26	; 0x1a
    19b2:	fc 01       	movw	r30, r24
    19b4:	42 85       	ldd	r20, Z+10	; 0x0a
    19b6:	53 85       	ldd	r21, Z+11	; 0x0b
    19b8:	64 85       	ldd	r22, Z+12	; 0x0c
    19ba:	75 85       	ldd	r23, Z+13	; 0x0d
    19bc:	41 50       	subi	r20, 0x01	; 1
    19be:	51 09       	sbc	r21, r1
    19c0:	61 09       	sbc	r22, r1
    19c2:	71 09       	sbc	r23, r1
    19c4:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_ZN6SdFile7seekSetEm>
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <_ZN5SDLib4File4peekEv+0x66>
    19ca:	e1 2c       	mov	r14, r1
    19cc:	f1 2c       	mov	r15, r1
    19ce:	c7 01       	movw	r24, r14
    19d0:	0f 90       	pop	r0
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	1f 91       	pop	r17
    19d8:	0f 91       	pop	r16
    19da:	ff 90       	pop	r15
    19dc:	ef 90       	pop	r14
    19de:	08 95       	ret

000019e0 <_ZN5SDLib4File5flushEv>:
    19e0:	fc 01       	movw	r30, r24
    19e2:	81 8d       	ldd	r24, Z+25	; 0x19
    19e4:	92 8d       	ldd	r25, Z+26	; 0x1a
    19e6:	00 97       	sbiw	r24, 0x00	; 0
    19e8:	19 f0       	breq	.+6      	; 0x19f0 <_ZN5SDLib4File5flushEv+0x10>
    19ea:	61 e0       	ldi	r22, 0x01	; 1
    19ec:	0e 94 5e 18 	call	0x30bc	; 0x30bc <_ZN6SdFile4syncEh>
    19f0:	08 95       	ret

000019f2 <_ZN5SDLib4FileC1E6SdFilePKc>:
    19f2:	ef 92       	push	r14
    19f4:	ff 92       	push	r15
    19f6:	0f 93       	push	r16
    19f8:	1f 93       	push	r17
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    19fe:	ec 01       	movw	r28, r24
    1a00:	7b 01       	movw	r14, r22
    1a02:	8a 01       	movw	r16, r20
    1a04:	1b 82       	std	Y+3, r1	; 0x03
    1a06:	1a 82       	std	Y+2, r1	; 0x02
    1a08:	88 ee       	ldi	r24, 0xE8	; 232
    1a0a:	93 e0       	ldi	r25, 0x03	; 3
    1a0c:	a0 e0       	ldi	r26, 0x00	; 0
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	8c 83       	std	Y+4, r24	; 0x04
    1a12:	9d 83       	std	Y+5, r25	; 0x05
    1a14:	ae 83       	std	Y+6, r26	; 0x06
    1a16:	bf 83       	std	Y+7, r27	; 0x07
    1a18:	86 ea       	ldi	r24, 0xA6	; 166
    1a1a:	91 e0       	ldi	r25, 0x01	; 1
    1a1c:	99 83       	std	Y+1, r25	; 0x01
    1a1e:	88 83       	st	Y, r24
    1a20:	8d e1       	ldi	r24, 0x1D	; 29
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <malloc>
    1a28:	9a 8f       	std	Y+26, r25	; 0x1a
    1a2a:	89 8f       	std	Y+25, r24	; 0x19
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	79 f0       	breq	.+30     	; 0x1a4e <_ZN5SDLib4FileC1E6SdFilePKc+0x5c>
    1a30:	2d e1       	ldi	r18, 0x1D	; 29
    1a32:	f7 01       	movw	r30, r14
    1a34:	dc 01       	movw	r26, r24
    1a36:	01 90       	ld	r0, Z+
    1a38:	0d 92       	st	X+, r0
    1a3a:	2a 95       	dec	r18
    1a3c:	e1 f7       	brne	.-8      	; 0x1a36 <_ZN5SDLib4FileC1E6SdFilePKc+0x44>
    1a3e:	4c e0       	ldi	r20, 0x0C	; 12
    1a40:	50 e0       	ldi	r21, 0x00	; 0
    1a42:	b8 01       	movw	r22, r16
    1a44:	ce 01       	movw	r24, r28
    1a46:	0c 96       	adiw	r24, 0x0c	; 12
    1a48:	0e 94 6f 32 	call	0x64de	; 0x64de <strncpy>
    1a4c:	18 8e       	std	Y+24, r1	; 0x18
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	1f 91       	pop	r17
    1a54:	0f 91       	pop	r16
    1a56:	ff 90       	pop	r15
    1a58:	ef 90       	pop	r14
    1a5a:	08 95       	ret

00001a5c <_ZN5SDLib4FileC1Ev>:
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	13 82       	std	Z+3, r1	; 0x03
    1a60:	12 82       	std	Z+2, r1	; 0x02
    1a62:	88 ee       	ldi	r24, 0xE8	; 232
    1a64:	93 e0       	ldi	r25, 0x03	; 3
    1a66:	a0 e0       	ldi	r26, 0x00	; 0
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	84 83       	std	Z+4, r24	; 0x04
    1a6c:	95 83       	std	Z+5, r25	; 0x05
    1a6e:	a6 83       	std	Z+6, r26	; 0x06
    1a70:	b7 83       	std	Z+7, r27	; 0x07
    1a72:	86 ea       	ldi	r24, 0xA6	; 166
    1a74:	91 e0       	ldi	r25, 0x01	; 1
    1a76:	91 83       	std	Z+1, r25	; 0x01
    1a78:	80 83       	st	Z, r24
    1a7a:	12 8e       	std	Z+26, r1	; 0x1a
    1a7c:	11 8e       	std	Z+25, r1	; 0x19
    1a7e:	14 86       	std	Z+12, r1	; 0x0c
    1a80:	08 95       	ret

00001a82 <_ZN5SDLib4File4readEPvj>:
  return -1;
}

// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
  if (_file) {
    1a82:	fc 01       	movw	r30, r24
    1a84:	81 8d       	ldd	r24, Z+25	; 0x19
    1a86:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	19 f0       	breq	.+6      	; 0x1a92 <_ZN5SDLib4File4readEPvj+0x10>
    return _file->read(buf, nbyte);
    1a8c:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN6SdFile4readEPvj>
    1a90:	08 95       	ret
  }
  return 0;
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
}
    1a96:	08 95       	ret

00001a98 <_ZN5SDLib4File4seekEm>:
    _file->sync();
  }
}

boolean File::seek(uint32_t pos) {
  if (! _file) {
    1a98:	fc 01       	movw	r30, r24
    1a9a:	81 8d       	ldd	r24, Z+25	; 0x19
    1a9c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	39 f0       	breq	.+14     	; 0x1ab0 <_ZN5SDLib4File4seekEm+0x18>
    return false;
  }

  return _file->seekSet(pos);
    1aa2:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_ZN6SdFile7seekSetEm>
    1aa6:	91 e0       	ldi	r25, 0x01	; 1
    1aa8:	81 11       	cpse	r24, r1
    1aaa:	03 c0       	rjmp	.+6      	; 0x1ab2 <_ZN5SDLib4File4seekEm+0x1a>
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	01 c0       	rjmp	.+2      	; 0x1ab2 <_ZN5SDLib4File4seekEm+0x1a>
  }
}

boolean File::seek(uint32_t pos) {
  if (! _file) {
    return false;
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
  }

  return _file->seekSet(pos);
}
    1ab2:	89 2f       	mov	r24, r25
    1ab4:	08 95       	ret

00001ab6 <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) {
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	59 96       	adiw	r26, 0x19	; 25
    1aba:	ed 91       	ld	r30, X+
    1abc:	fc 91       	ld	r31, X
    1abe:	5a 97       	sbiw	r26, 0x1a	; 26
    1ac0:	30 97       	sbiw	r30, 0x00	; 0
    1ac2:	29 f0       	breq	.+10     	; 0x1ace <_ZN5SDLib4File8positionEv+0x18>
    uint32_t curCluster(void) const {
      return curCluster_;
    }
    /** \return The current position for a file or directory. */
    uint32_t curPosition(void) const {
      return curPosition_;
    1ac4:	62 85       	ldd	r22, Z+10	; 0x0a
    1ac6:	73 85       	ldd	r23, Z+11	; 0x0b
    1ac8:	84 85       	ldd	r24, Z+12	; 0x0c
    1aca:	95 85       	ldd	r25, Z+13	; 0x0d
    return -1;
  }
  return _file->curPosition();
    1acc:	08 95       	ret
  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) {
    return -1;
    1ace:	6f ef       	ldi	r22, 0xFF	; 255
    1ad0:	7f ef       	ldi	r23, 0xFF	; 255
    1ad2:	cb 01       	movw	r24, r22
  }
  return _file->curPosition();
}
    1ad4:	08 95       	ret

00001ad6 <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) {
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	59 96       	adiw	r26, 0x19	; 25
    1ada:	ed 91       	ld	r30, X+
    1adc:	fc 91       	ld	r31, X
    1ade:	5a 97       	sbiw	r26, 0x1a	; 26
    1ae0:	30 97       	sbiw	r30, 0x00	; 0
    1ae2:	29 f0       	breq	.+10     	; 0x1aee <_ZN5SDLib4File4sizeEv+0x18>
      return dirIndex_;
    }
    static void dirName(const dir_t& dir, char* name);
    /** \return The total number of bytes in a file or directory. */
    uint32_t fileSize(void) const {
      return fileSize_;
    1ae4:	63 89       	ldd	r22, Z+19	; 0x13
    1ae6:	74 89       	ldd	r23, Z+20	; 0x14
    1ae8:	85 89       	ldd	r24, Z+21	; 0x15
    1aea:	96 89       	ldd	r25, Z+22	; 0x16
    return 0;
  }
  return _file->fileSize();
    1aec:	08 95       	ret
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) {
    return 0;
    1aee:	60 e0       	ldi	r22, 0x00	; 0
    1af0:	70 e0       	ldi	r23, 0x00	; 0
    1af2:	cb 01       	movw	r24, r22
  }
  return _file->fileSize();
}
    1af4:	08 95       	ret

00001af6 <_ZN5SDLib4File9availableEv>:
    return _file->read(buf, nbyte);
  }
  return 0;
}

int File::available() {
    1af6:	cf 92       	push	r12
    1af8:	df 92       	push	r13
    1afa:	ef 92       	push	r14
    1afc:	ff 92       	push	r15
    1afe:	cf 93       	push	r28
    1b00:	df 93       	push	r29
  if (! _file) {
    1b02:	fc 01       	movw	r30, r24
    1b04:	21 8d       	ldd	r18, Z+25	; 0x19
    1b06:	32 8d       	ldd	r19, Z+26	; 0x1a
    1b08:	23 2b       	or	r18, r19
    1b0a:	d9 f0       	breq	.+54     	; 0x1b42 <_ZN5SDLib4File9availableEv+0x4c>
    1b0c:	ec 01       	movw	r28, r24
    return 0;
  }

  uint32_t n = size() - position();
    1b0e:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN5SDLib4File4sizeEv>
    1b12:	6b 01       	movw	r12, r22
    1b14:	7c 01       	movw	r14, r24
    1b16:	ce 01       	movw	r24, r28
    1b18:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <_ZN5SDLib4File8positionEv>

  return n > 0X7FFF ? 0X7FFF : n;
    1b1c:	a7 01       	movw	r20, r14
    1b1e:	96 01       	movw	r18, r12
    1b20:	26 1b       	sub	r18, r22
    1b22:	37 0b       	sbc	r19, r23
    1b24:	48 0b       	sbc	r20, r24
    1b26:	59 0b       	sbc	r21, r25
    1b28:	da 01       	movw	r26, r20
    1b2a:	c9 01       	movw	r24, r18
    1b2c:	81 15       	cp	r24, r1
    1b2e:	30 e8       	ldi	r19, 0x80	; 128
    1b30:	93 07       	cpc	r25, r19
    1b32:	a1 05       	cpc	r26, r1
    1b34:	b1 05       	cpc	r27, r1
    1b36:	38 f0       	brcs	.+14     	; 0x1b46 <_ZN5SDLib4File9availableEv+0x50>
    1b38:	8f ef       	ldi	r24, 0xFF	; 255
    1b3a:	9f e7       	ldi	r25, 0x7F	; 127
    1b3c:	a0 e0       	ldi	r26, 0x00	; 0
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	02 c0       	rjmp	.+4      	; 0x1b46 <_ZN5SDLib4File9availableEv+0x50>
  return 0;
}

int File::available() {
  if (! _file) {
    return 0;
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	90 e0       	ldi	r25, 0x00	; 0
  }

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
    1b46:	df 91       	pop	r29
    1b48:	cf 91       	pop	r28
    1b4a:	ff 90       	pop	r15
    1b4c:	ef 90       	pop	r14
    1b4e:	df 90       	pop	r13
    1b50:	cf 90       	pop	r12
    1b52:	08 95       	ret

00001b54 <_ZN5SDLib4File5closeEv>:
    return 0;
  }
  return _file->fileSize();
}

void File::close() {
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	fc 01       	movw	r30, r24
  if (_file) {
    1b5a:	81 8d       	ldd	r24, Z+25	; 0x19
    1b5c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	49 f0       	breq	.+18     	; 0x1b74 <_ZN5SDLib4File5closeEv+0x20>
    1b62:	ef 01       	movw	r28, r30
    _file->close();
    1b64:	0e 94 b1 18 	call	0x3162	; 0x3162 <_ZN6SdFile5closeEv>
    free(_file);
    1b68:	89 8d       	ldd	r24, Y+25	; 0x19
    1b6a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b6c:	0e 94 f3 30 	call	0x61e6	; 0x61e6 <free>
    _file = 0;
    1b70:	1a 8e       	std	Y+26, r1	; 0x1a
    1b72:	19 8e       	std	Y+25, r1	; 0x19
      nfilecount--;
      Serial.print("Deleted ");
      Serial.println(nfilecount, DEC);
    */
  }
}
    1b74:	df 91       	pop	r29
    1b76:	cf 91       	pop	r28
    1b78:	08 95       	ret

00001b7a <_ZN5SDLib4FilecvbEv>:

File::operator bool() {
  if (_file) {
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	59 96       	adiw	r26, 0x19	; 25
    1b7e:	ed 91       	ld	r30, X+
    1b80:	fc 91       	ld	r31, X
    1b82:	5a 97       	sbiw	r26, 0x1a	; 26
    1b84:	30 97       	sbiw	r30, 0x00	; 0
    1b86:	31 f0       	breq	.+12     	; 0x1b94 <_ZN5SDLib4FilecvbEv+0x1a>
    uint8_t isFile(void) const {
      return type_ == FAT_FILE_TYPE_NORMAL;
    }
    /** \return True if this is a SdFile for an open file/directory else false. */
    uint8_t isOpen(void) const {
      return type_ != FAT_FILE_TYPE_CLOSED;
    1b88:	95 81       	ldd	r25, Z+5	; 0x05
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	91 11       	cpse	r25, r1
    1b8e:	03 c0       	rjmp	.+6      	; 0x1b96 <_ZN5SDLib4FilecvbEv+0x1c>
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    return  _file->isOpen();
    1b92:	08 95       	ret
  }
  return false;
    1b94:	80 e0       	ldi	r24, 0x00	; 0
}
    1b96:	08 95       	ret

00001b98 <_Z41__static_initialization_and_destruction_0ii>:

  void File::rewindDirectory(void) {
    if (isDirectory()) {
      _file->rewind();
    }
  }
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	c9 f4       	brne	.+50     	; 0x1bce <_Z41__static_initialization_and_destruction_0ii+0x36>
    1b9c:	6f 3f       	cpi	r22, 0xFF	; 255
    1b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba0:	b1 f4       	brne	.+44     	; 0x1bce <_Z41__static_initialization_and_destruction_0ii+0x36>
    1ba2:	e2 ef       	ldi	r30, 0xF2	; 242
    1ba4:	f3 e0       	ldi	r31, 0x03	; 3
    1ba6:	15 82       	std	Z+5, r1	; 0x05
    1ba8:	16 82       	std	Z+6, r1	; 0x06
    1baa:	11 86       	std	Z+9, r1	; 0x09
    1bac:	13 86       	std	Z+11, r1	; 0x0b
    1bae:	82 e0       	ldi	r24, 0x02	; 2
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	a0 e0       	ldi	r26, 0x00	; 0
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	84 87       	std	Z+12, r24	; 0x0c
    1bb8:	95 87       	std	Z+13, r25	; 0x0d
    1bba:	a6 87       	std	Z+14, r26	; 0x0e
    1bbc:	b7 87       	std	Z+15, r27	; 0x0f
    1bbe:	13 a2       	std	Z+35, r1	; 0x23
    1bc0:	15 a6       	std	Z+45, r1	; 0x2d
    1bc2:	14 a6       	std	Z+44, r1	; 0x2c
    1bc4:	8a eb       	ldi	r24, 0xBA	; 186
    1bc6:	91 e0       	ldi	r25, 0x01	; 1
    1bc8:	93 a7       	std	Z+43, r25	; 0x2b
    1bca:	82 a7       	std	Z+42, r24	; 0x2a
    1bcc:	17 a6       	std	Z+47, r1	; 0x2f
    1bce:	08 95       	ret

00001bd0 <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv>:
    1bd0:	1f 93       	push	r17
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
    1bda:	6d 97       	sbiw	r28, 0x1d	; 29
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	f8 94       	cli
    1be0:	de bf       	out	0x3e, r29	; 62
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	cd bf       	out	0x3d, r28	; 61
    1be6:	ab 01       	movw	r20, r22
    1be8:	1c 82       	std	Y+4, r1	; 0x04
    1bea:	1b 82       	std	Y+3, r1	; 0x03
    1bec:	2a eb       	ldi	r18, 0xBA	; 186
    1bee:	31 e0       	ldi	r19, 0x01	; 1
    1bf0:	3a 83       	std	Y+2, r19	; 0x02
    1bf2:	29 83       	std	Y+1, r18	; 0x01
    1bf4:	1e 82       	std	Y+6, r1	; 0x06
    1bf6:	21 e0       	ldi	r18, 0x01	; 1
    1bf8:	bc 01       	movw	r22, r24
    1bfa:	ce 01       	movw	r24, r28
    1bfc:	01 96       	adiw	r24, 0x01	; 1
    1bfe:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <_ZN6SdFile4openEPS_PKch>
    1c02:	11 e0       	ldi	r17, 0x01	; 1
    1c04:	81 11       	cpse	r24, r1
    1c06:	01 c0       	rjmp	.+2      	; 0x1c0a <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv+0x3a>
    1c08:	10 e0       	ldi	r17, 0x00	; 0
    1c0a:	88 23       	and	r24, r24
    1c0c:	21 f0       	breq	.+8      	; 0x1c16 <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv+0x46>
    1c0e:	ce 01       	movw	r24, r28
    1c10:	01 96       	adiw	r24, 0x01	; 1
    1c12:	0e 94 b1 18 	call	0x3162	; 0x3162 <_ZN6SdFile5closeEv>
    1c16:	81 2f       	mov	r24, r17
    1c18:	6d 96       	adiw	r28, 0x1d	; 29
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	cd bf       	out	0x3d, r28	; 61
    1c24:	df 91       	pop	r29
    1c26:	cf 91       	pop	r28
    1c28:	1f 91       	pop	r17
    1c2a:	08 95       	ret

00001c2c <_ZN5SDLib15callback_removeER6SdFilePKcbPv>:
    1c2c:	44 23       	and	r20, r20
    1c2e:	39 f0       	breq	.+14     	; 0x1c3e <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x12>
    1c30:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <_ZN6SdFile6removeEPS_PKc>
    1c34:	91 e0       	ldi	r25, 0x01	; 1
    1c36:	81 11       	cpse	r24, r1
    1c38:	03 c0       	rjmp	.+6      	; 0x1c40 <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x14>
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	01 c0       	rjmp	.+2      	; 0x1c40 <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x14>
    1c3e:	91 e0       	ldi	r25, 0x01	; 1
    1c40:	89 2f       	mov	r24, r25
    1c42:	08 95       	ret

00001c44 <_ZN5SDLib20getNextPathComponentEPKcPjPc>:
    1c44:	cf 93       	push	r28
    1c46:	df 93       	push	r29
    1c48:	ec 01       	movw	r28, r24
    1c4a:	db 01       	movw	r26, r22
    1c4c:	ed 91       	ld	r30, X+
    1c4e:	fc 91       	ld	r31, X
    1c50:	dc 01       	movw	r26, r24
    1c52:	ae 0f       	add	r26, r30
    1c54:	bf 1f       	adc	r27, r31
    1c56:	8c 91       	ld	r24, X
    1c58:	8f 32       	cpi	r24, 0x2F	; 47
    1c5a:	09 f4       	brne	.+2      	; 0x1c5e <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x1a>
    1c5c:	31 96       	adiw	r30, 0x01	; 1
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	2c 30       	cpi	r18, 0x0C	; 12
    1c64:	31 05       	cpc	r19, r1
    1c66:	84 f4       	brge	.+32     	; 0x1c88 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x44>
    1c68:	de 01       	movw	r26, r28
    1c6a:	ae 0f       	add	r26, r30
    1c6c:	bf 1f       	adc	r27, r31
    1c6e:	9c 91       	ld	r25, X
    1c70:	9f 32       	cpi	r25, 0x2F	; 47
    1c72:	51 f0       	breq	.+20     	; 0x1c88 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x44>
    1c74:	99 23       	and	r25, r25
    1c76:	41 f0       	breq	.+16     	; 0x1c88 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x44>
    1c78:	da 01       	movw	r26, r20
    1c7a:	a2 0f       	add	r26, r18
    1c7c:	b3 1f       	adc	r27, r19
    1c7e:	31 96       	adiw	r30, 0x01	; 1
    1c80:	9c 93       	st	X, r25
    1c82:	2f 5f       	subi	r18, 0xFF	; 255
    1c84:	3f 4f       	sbci	r19, 0xFF	; 255
    1c86:	ed cf       	rjmp	.-38     	; 0x1c62 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x1e>
    1c88:	da 01       	movw	r26, r20
    1c8a:	a2 0f       	add	r26, r18
    1c8c:	b3 1f       	adc	r27, r19
    1c8e:	1c 92       	st	X, r1
    1c90:	de 01       	movw	r26, r28
    1c92:	ae 0f       	add	r26, r30
    1c94:	bf 1f       	adc	r27, r31
    1c96:	8c 91       	ld	r24, X
    1c98:	8f 32       	cpi	r24, 0x2F	; 47
    1c9a:	09 f4       	brne	.+2      	; 0x1c9e <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x5a>
    1c9c:	31 96       	adiw	r30, 0x01	; 1
    1c9e:	db 01       	movw	r26, r22
    1ca0:	ed 93       	st	X+, r30
    1ca2:	fc 93       	st	X, r31
    1ca4:	ec 0f       	add	r30, r28
    1ca6:	fd 1f       	adc	r31, r29
    1ca8:	90 81       	ld	r25, Z
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	91 11       	cpse	r25, r1
    1cae:	01 c0       	rjmp	.+2      	; 0x1cb2 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x6e>
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	08 95       	ret

00001cb8 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>:
    1cb8:	5f 92       	push	r5
    1cba:	6f 92       	push	r6
    1cbc:	7f 92       	push	r7
    1cbe:	8f 92       	push	r8
    1cc0:	9f 92       	push	r9
    1cc2:	af 92       	push	r10
    1cc4:	bf 92       	push	r11
    1cc6:	cf 92       	push	r12
    1cc8:	df 92       	push	r13
    1cca:	ef 92       	push	r14
    1ccc:	ff 92       	push	r15
    1cce:	0f 93       	push	r16
    1cd0:	1f 93       	push	r17
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	c9 54       	subi	r28, 0x49	; 73
    1cdc:	d1 09       	sbc	r29, r1
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	4c 01       	movw	r8, r24
    1cea:	6b 01       	movw	r12, r22
    1cec:	3a 01       	movw	r6, r20
    1cee:	59 01       	movw	r10, r18
    1cf0:	1c 82       	std	Y+4, r1	; 0x04
    1cf2:	1b 82       	std	Y+3, r1	; 0x03
    1cf4:	8a eb       	ldi	r24, 0xBA	; 186
    1cf6:	91 e0       	ldi	r25, 0x01	; 1
    1cf8:	9a 83       	std	Y+2, r25	; 0x02
    1cfa:	89 83       	std	Y+1, r24	; 0x01
    1cfc:	1e 82       	std	Y+6, r1	; 0x06
    1cfe:	19 a2       	std	Y+33, r1	; 0x21
    1d00:	18 a2       	std	Y+32, r1	; 0x20
    1d02:	9f 8f       	std	Y+31, r25	; 0x1f
    1d04:	8e 8f       	std	Y+30, r24	; 0x1e
    1d06:	1b a2       	std	Y+35, r1	; 0x23
    1d08:	2a 96       	adiw	r28, 0x0a	; 10
    1d0a:	1f ae       	std	Y+63, r1	; 0x3f
    1d0c:	1e ae       	std	Y+62, r1	; 0x3e
    1d0e:	2a 97       	sbiw	r28, 0x0a	; 10
    1d10:	8b 01       	movw	r16, r22
    1d12:	ce 01       	movw	r24, r28
    1d14:	01 96       	adiw	r24, 0x01	; 1
    1d16:	7c 01       	movw	r14, r24
    1d18:	ae 01       	movw	r20, r28
    1d1a:	45 5c       	subi	r20, 0xC5	; 197
    1d1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d1e:	be 01       	movw	r22, r28
    1d20:	68 5b       	subi	r22, 0xB8	; 184
    1d22:	7f 4f       	sbci	r23, 0xFF	; 255
    1d24:	c4 01       	movw	r24, r8
    1d26:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <_ZN5SDLib20getNextPathComponentEPKcPjPc>
    1d2a:	58 2e       	mov	r5, r24
    1d2c:	41 e0       	ldi	r20, 0x01	; 1
    1d2e:	48 27       	eor	r20, r24
    1d30:	95 01       	movw	r18, r10
    1d32:	be 01       	movw	r22, r28
    1d34:	65 5c       	subi	r22, 0xC5	; 197
    1d36:	7f 4f       	sbci	r23, 0xFF	; 255
    1d38:	c8 01       	movw	r24, r16
    1d3a:	f3 01       	movw	r30, r6
    1d3c:	09 95       	icall
    1d3e:	81 11       	cpse	r24, r1
    1d40:	08 c0       	rjmp	.+16     	; 0x1d52 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x9a>
    1d42:	0c 15       	cp	r16, r12
    1d44:	1d 05       	cpc	r17, r13
    1d46:	51 f1       	breq	.+84     	; 0x1d9c <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xe4>
    1d48:	c8 01       	movw	r24, r16
    1d4a:	0e 94 b1 18 	call	0x3162	; 0x3162 <_ZN6SdFile5closeEv>
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	2a c0       	rjmp	.+84     	; 0x1da6 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    1d52:	55 20       	and	r5, r5
    1d54:	d9 f0       	breq	.+54     	; 0x1d8c <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xd4>
    1d56:	21 e0       	ldi	r18, 0x01	; 1
    1d58:	ae 01       	movw	r20, r28
    1d5a:	45 5c       	subi	r20, 0xC5	; 197
    1d5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d5e:	b8 01       	movw	r22, r16
    1d60:	c7 01       	movw	r24, r14
    1d62:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <_ZN6SdFile4openEPS_PKch>
    1d66:	58 2e       	mov	r5, r24
    1d68:	0c 15       	cp	r16, r12
    1d6a:	1d 05       	cpc	r17, r13
    1d6c:	19 f0       	breq	.+6      	; 0x1d74 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xbc>
    1d6e:	c8 01       	movw	r24, r16
    1d70:	0e 94 b1 18 	call	0x3162	; 0x3162 <_ZN6SdFile5closeEv>
    1d74:	55 20       	and	r5, r5
    1d76:	a1 f0       	breq	.+40     	; 0x1da0 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xe8>
    1d78:	0c 15       	cp	r16, r12
    1d7a:	1d 05       	cpc	r17, r13
    1d7c:	11 f0       	breq	.+4      	; 0x1d82 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xca>
    1d7e:	c8 01       	movw	r24, r16
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xce>
    1d82:	ce 01       	movw	r24, r28
    1d84:	4e 96       	adiw	r24, 0x1e	; 30
    1d86:	87 01       	movw	r16, r14
    1d88:	7c 01       	movw	r14, r24
    1d8a:	c6 cf       	rjmp	.-116    	; 0x1d18 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x60>
    1d8c:	0c 15       	cp	r16, r12
    1d8e:	1d 05       	cpc	r17, r13
    1d90:	49 f0       	breq	.+18     	; 0x1da4 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xec>
    1d92:	c8 01       	movw	r24, r16
    1d94:	0e 94 b1 18 	call	0x3162	; 0x3162 <_ZN6SdFile5closeEv>
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	05 c0       	rjmp	.+10     	; 0x1da6 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	03 c0       	rjmp	.+6      	; 0x1da6 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	01 c0       	rjmp	.+2      	; 0x1da6 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	c7 5b       	subi	r28, 0xB7	; 183
    1da8:	df 4f       	sbci	r29, 0xFF	; 255
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	cd bf       	out	0x3d, r28	; 61
    1db4:	df 91       	pop	r29
    1db6:	cf 91       	pop	r28
    1db8:	1f 91       	pop	r17
    1dba:	0f 91       	pop	r16
    1dbc:	ff 90       	pop	r15
    1dbe:	ef 90       	pop	r14
    1dc0:	df 90       	pop	r13
    1dc2:	cf 90       	pop	r12
    1dc4:	bf 90       	pop	r11
    1dc6:	af 90       	pop	r10
    1dc8:	9f 90       	pop	r9
    1dca:	8f 90       	pop	r8
    1dcc:	7f 90       	pop	r7
    1dce:	6f 90       	pop	r6
    1dd0:	5f 90       	pop	r5
    1dd2:	08 95       	ret

00001dd4 <_ZN5SDLib7SDClass5beginEh>:
    1dd4:	0f 93       	push	r16
    1dd6:	1f 93       	push	r17
    1dd8:	cf 93       	push	r28
    1dda:	df 93       	push	r29
    1ddc:	ec 01       	movw	r28, r24
    1dde:	16 2f       	mov	r17, r22
    1de0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1de2:	88 23       	and	r24, r24
    1de4:	21 f0       	breq	.+8      	; 0x1dee <_ZN5SDLib7SDClass5beginEh+0x1a>
    1de6:	ce 01       	movw	r24, r28
    1de8:	8a 96       	adiw	r24, 0x2a	; 42
    1dea:	0e 94 b1 18 	call	0x3162	; 0x3162 <_ZN6SdFile5closeEv>
    1dee:	41 2f       	mov	r20, r17
    1df0:	61 e0       	ldi	r22, 0x01	; 1
    1df2:	ce 01       	movw	r24, r28
    1df4:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN7Sd2Card4initEhh>
    1df8:	88 23       	and	r24, r24
    1dfa:	e1 f0       	breq	.+56     	; 0x1e34 <_ZN5SDLib7SDClass5beginEh+0x60>
    1dfc:	8e 01       	movw	r16, r28
    1dfe:	04 5f       	subi	r16, 0xF4	; 244
    1e00:	1f 4f       	sbci	r17, 0xFF	; 255
    1e02:	41 e0       	ldi	r20, 0x01	; 1
    1e04:	be 01       	movw	r22, r28
    1e06:	c8 01       	movw	r24, r16
    1e08:	0e 94 3c 21 	call	0x4278	; 0x4278 <_ZN8SdVolume4initEP7Sd2Cardh>
    1e0c:	81 11       	cpse	r24, r1
    1e0e:	06 c0       	rjmp	.+12     	; 0x1e1c <_ZN5SDLib7SDClass5beginEh+0x48>
    1e10:	40 e0       	ldi	r20, 0x00	; 0
    1e12:	be 01       	movw	r22, r28
    1e14:	c8 01       	movw	r24, r16
    1e16:	0e 94 3c 21 	call	0x4278	; 0x4278 <_ZN8SdVolume4initEP7Sd2Cardh>
    1e1a:	01 c0       	rjmp	.+2      	; 0x1e1e <_ZN5SDLib7SDClass5beginEh+0x4a>
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	88 23       	and	r24, r24
    1e20:	59 f0       	breq	.+22     	; 0x1e38 <_ZN5SDLib7SDClass5beginEh+0x64>
    1e22:	b8 01       	movw	r22, r16
    1e24:	ce 01       	movw	r24, r28
    1e26:	8a 96       	adiw	r24, 0x2a	; 42
    1e28:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <_ZN6SdFile8openRootEP8SdVolume>
    1e2c:	88 23       	and	r24, r24
    1e2e:	31 f0       	breq	.+12     	; 0x1e3c <_ZN5SDLib7SDClass5beginEh+0x68>
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	05 c0       	rjmp	.+10     	; 0x1e3e <_ZN5SDLib7SDClass5beginEh+0x6a>
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	03 c0       	rjmp	.+6      	; 0x1e3e <_ZN5SDLib7SDClass5beginEh+0x6a>
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	01 c0       	rjmp	.+2      	; 0x1e3e <_ZN5SDLib7SDClass5beginEh+0x6a>
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	df 91       	pop	r29
    1e40:	cf 91       	pop	r28
    1e42:	1f 91       	pop	r17
    1e44:	0f 91       	pop	r16
    1e46:	08 95       	ret

00001e48 <_ZN5SDLib7SDClass12getParentDirEPKcPi>:
    1e48:	4f 92       	push	r4
    1e4a:	5f 92       	push	r5
    1e4c:	6f 92       	push	r6
    1e4e:	7f 92       	push	r7
    1e50:	8f 92       	push	r8
    1e52:	9f 92       	push	r9
    1e54:	af 92       	push	r10
    1e56:	bf 92       	push	r11
    1e58:	cf 92       	push	r12
    1e5a:	df 92       	push	r13
    1e5c:	ef 92       	push	r14
    1e5e:	ff 92       	push	r15
    1e60:	0f 93       	push	r16
    1e62:	1f 93       	push	r17
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	c7 54       	subi	r28, 0x47	; 71
    1e6e:	d1 09       	sbc	r29, r1
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	de bf       	out	0x3e, r29	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	cd bf       	out	0x3d, r28	; 61
    1e7a:	4c 01       	movw	r8, r24
    1e7c:	3a 01       	movw	r6, r20
    1e7e:	29 01       	movw	r4, r18
    1e80:	1c 82       	std	Y+4, r1	; 0x04
    1e82:	1b 82       	std	Y+3, r1	; 0x03
    1e84:	8a eb       	ldi	r24, 0xBA	; 186
    1e86:	91 e0       	ldi	r25, 0x01	; 1
    1e88:	9a 83       	std	Y+2, r25	; 0x02
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	1e 82       	std	Y+6, r1	; 0x06
    1e8e:	19 a2       	std	Y+33, r1	; 0x21
    1e90:	18 a2       	std	Y+32, r1	; 0x20
    1e92:	9f 8f       	std	Y+31, r25	; 0x1f
    1e94:	8e 8f       	std	Y+30, r24	; 0x1e
    1e96:	1b a2       	std	Y+35, r1	; 0x23
    1e98:	64 5f       	subi	r22, 0xF4	; 244
    1e9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9c:	ce 01       	movw	r24, r28
    1e9e:	01 96       	adiw	r24, 0x01	; 1
    1ea0:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <_ZN6SdFile8openRootEP8SdVolume>
    1ea4:	73 01       	movw	r14, r6
    1ea6:	6e 01       	movw	r12, r28
    1ea8:	8e e1       	ldi	r24, 0x1E	; 30
    1eaa:	c8 0e       	add	r12, r24
    1eac:	d1 1c       	adc	r13, r1
    1eae:	fe 01       	movw	r30, r28
    1eb0:	31 96       	adiw	r30, 0x01	; 1
    1eb2:	5f 01       	movw	r10, r30
    1eb4:	6f e2       	ldi	r22, 0x2F	; 47
    1eb6:	70 e0       	ldi	r23, 0x00	; 0
    1eb8:	c7 01       	movw	r24, r14
    1eba:	0e 94 5d 32 	call	0x64ba	; 0x64ba <strchr>
    1ebe:	00 97       	sbiw	r24, 0x00	; 0
    1ec0:	f1 f1       	breq	.+124    	; 0x1f3e <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xf6>
    1ec2:	f7 01       	movw	r30, r14
    1ec4:	20 81       	ld	r18, Z
    1ec6:	2f 32       	cpi	r18, 0x2F	; 47
    1ec8:	21 f4       	brne	.+8      	; 0x1ed2 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x8a>
    1eca:	ff ef       	ldi	r31, 0xFF	; 255
    1ecc:	ef 1a       	sub	r14, r31
    1ece:	ff 0a       	sbc	r15, r31
    1ed0:	f1 cf       	rjmp	.-30     	; 0x1eb4 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x6c>
    1ed2:	00 97       	sbiw	r24, 0x00	; 0
    1ed4:	a1 f1       	breq	.+104    	; 0x1f3e <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xf6>
    1ed6:	8e 19       	sub	r24, r14
    1ed8:	8d 30       	cpi	r24, 0x0D	; 13
    1eda:	08 f0       	brcs	.+2      	; 0x1ede <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x96>
    1edc:	8c e0       	ldi	r24, 0x0C	; 12
    1ede:	08 2f       	mov	r16, r24
    1ee0:	10 e0       	ldi	r17, 0x00	; 0
    1ee2:	a8 01       	movw	r20, r16
    1ee4:	b7 01       	movw	r22, r14
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	cb 96       	adiw	r24, 0x3b	; 59
    1eea:	0e 94 6f 32 	call	0x64de	; 0x64de <strncpy>
    1eee:	eb e3       	ldi	r30, 0x3B	; 59
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	ec 0f       	add	r30, r28
    1ef4:	fd 1f       	adc	r31, r29
    1ef6:	e0 0f       	add	r30, r16
    1ef8:	f1 1f       	adc	r31, r17
    1efa:	10 82       	st	Z, r1
    1efc:	c6 01       	movw	r24, r12
    1efe:	0e 94 b1 18 	call	0x3162	; 0x3162 <_ZN6SdFile5closeEv>
    1f02:	21 e0       	ldi	r18, 0x01	; 1
    1f04:	ae 01       	movw	r20, r28
    1f06:	45 5c       	subi	r20, 0xC5	; 197
    1f08:	5f 4f       	sbci	r21, 0xFF	; 255
    1f0a:	b5 01       	movw	r22, r10
    1f0c:	c6 01       	movw	r24, r12
    1f0e:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <_ZN6SdFile4openEPS_PKch>
    1f12:	81 11       	cpse	r24, r1
    1f14:	09 c0       	rjmp	.+18     	; 0x1f28 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xe0>
    1f16:	f4 01       	movw	r30, r8
    1f18:	13 82       	std	Z+3, r1	; 0x03
    1f1a:	12 82       	std	Z+2, r1	; 0x02
    1f1c:	8a eb       	ldi	r24, 0xBA	; 186
    1f1e:	91 e0       	ldi	r25, 0x01	; 1
    1f20:	91 83       	std	Z+1, r25	; 0x01
    1f22:	80 83       	st	Z, r24
    1f24:	15 82       	std	Z+5, r1	; 0x05
    1f26:	63 c0       	rjmp	.+198    	; 0x1fee <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x1a6>
    1f28:	e0 0e       	add	r14, r16
    1f2a:	f1 1e       	adc	r15, r17
    1f2c:	c5 01       	movw	r24, r10
    1f2e:	0e 94 b1 18 	call	0x3162	; 0x3162 <_ZN6SdFile5closeEv>
    1f32:	9a 2d       	mov	r25, r10
    1f34:	8b 2d       	mov	r24, r11
    1f36:	56 01       	movw	r10, r12
    1f38:	c9 2e       	mov	r12, r25
    1f3a:	d8 2e       	mov	r13, r24
    1f3c:	bb cf       	rjmp	.-138    	; 0x1eb4 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x6c>
    1f3e:	e6 18       	sub	r14, r6
    1f40:	f7 08       	sbc	r15, r7
    1f42:	f2 01       	movw	r30, r4
    1f44:	f1 82       	std	Z+1, r15	; 0x01
    1f46:	e0 82       	st	Z, r14
    1f48:	88 e8       	ldi	r24, 0x88	; 136
    1f4a:	91 e0       	ldi	r25, 0x01	; 1
    1f4c:	f4 01       	movw	r30, r8
    1f4e:	91 83       	std	Z+1, r25	; 0x01
    1f50:	80 83       	st	Z, r24
    1f52:	f5 01       	movw	r30, r10
    1f54:	82 81       	ldd	r24, Z+2	; 0x02
    1f56:	93 81       	ldd	r25, Z+3	; 0x03
    1f58:	f4 01       	movw	r30, r8
    1f5a:	93 83       	std	Z+3, r25	; 0x03
    1f5c:	82 83       	std	Z+2, r24	; 0x02
    1f5e:	8a eb       	ldi	r24, 0xBA	; 186
    1f60:	91 e0       	ldi	r25, 0x01	; 1
    1f62:	91 83       	std	Z+1, r25	; 0x01
    1f64:	80 83       	st	Z, r24
    1f66:	f5 01       	movw	r30, r10
    1f68:	84 81       	ldd	r24, Z+4	; 0x04
    1f6a:	f4 01       	movw	r30, r8
    1f6c:	84 83       	std	Z+4, r24	; 0x04
    1f6e:	f5 01       	movw	r30, r10
    1f70:	85 81       	ldd	r24, Z+5	; 0x05
    1f72:	f4 01       	movw	r30, r8
    1f74:	85 83       	std	Z+5, r24	; 0x05
    1f76:	f5 01       	movw	r30, r10
    1f78:	86 81       	ldd	r24, Z+6	; 0x06
    1f7a:	97 81       	ldd	r25, Z+7	; 0x07
    1f7c:	a0 85       	ldd	r26, Z+8	; 0x08
    1f7e:	b1 85       	ldd	r27, Z+9	; 0x09
    1f80:	f4 01       	movw	r30, r8
    1f82:	86 83       	std	Z+6, r24	; 0x06
    1f84:	97 83       	std	Z+7, r25	; 0x07
    1f86:	a0 87       	std	Z+8, r26	; 0x08
    1f88:	b1 87       	std	Z+9, r27	; 0x09
    1f8a:	f5 01       	movw	r30, r10
    1f8c:	82 85       	ldd	r24, Z+10	; 0x0a
    1f8e:	93 85       	ldd	r25, Z+11	; 0x0b
    1f90:	a4 85       	ldd	r26, Z+12	; 0x0c
    1f92:	b5 85       	ldd	r27, Z+13	; 0x0d
    1f94:	f4 01       	movw	r30, r8
    1f96:	82 87       	std	Z+10, r24	; 0x0a
    1f98:	93 87       	std	Z+11, r25	; 0x0b
    1f9a:	a4 87       	std	Z+12, r26	; 0x0c
    1f9c:	b5 87       	std	Z+13, r27	; 0x0d
    1f9e:	f5 01       	movw	r30, r10
    1fa0:	86 85       	ldd	r24, Z+14	; 0x0e
    1fa2:	97 85       	ldd	r25, Z+15	; 0x0f
    1fa4:	a0 89       	ldd	r26, Z+16	; 0x10
    1fa6:	b1 89       	ldd	r27, Z+17	; 0x11
    1fa8:	f4 01       	movw	r30, r8
    1faa:	86 87       	std	Z+14, r24	; 0x0e
    1fac:	97 87       	std	Z+15, r25	; 0x0f
    1fae:	a0 8b       	std	Z+16, r26	; 0x10
    1fb0:	b1 8b       	std	Z+17, r27	; 0x11
    1fb2:	f5 01       	movw	r30, r10
    1fb4:	82 89       	ldd	r24, Z+18	; 0x12
    1fb6:	f4 01       	movw	r30, r8
    1fb8:	82 8b       	std	Z+18, r24	; 0x12
    1fba:	f5 01       	movw	r30, r10
    1fbc:	83 89       	ldd	r24, Z+19	; 0x13
    1fbe:	94 89       	ldd	r25, Z+20	; 0x14
    1fc0:	a5 89       	ldd	r26, Z+21	; 0x15
    1fc2:	b6 89       	ldd	r27, Z+22	; 0x16
    1fc4:	f4 01       	movw	r30, r8
    1fc6:	83 8b       	std	Z+19, r24	; 0x13
    1fc8:	94 8b       	std	Z+20, r25	; 0x14
    1fca:	a5 8b       	std	Z+21, r26	; 0x15
    1fcc:	b6 8b       	std	Z+22, r27	; 0x16
    1fce:	f5 01       	movw	r30, r10
    1fd0:	87 89       	ldd	r24, Z+23	; 0x17
    1fd2:	90 8d       	ldd	r25, Z+24	; 0x18
    1fd4:	a1 8d       	ldd	r26, Z+25	; 0x19
    1fd6:	b2 8d       	ldd	r27, Z+26	; 0x1a
    1fd8:	f4 01       	movw	r30, r8
    1fda:	87 8b       	std	Z+23, r24	; 0x17
    1fdc:	90 8f       	std	Z+24, r25	; 0x18
    1fde:	a1 8f       	std	Z+25, r26	; 0x19
    1fe0:	b2 8f       	std	Z+26, r27	; 0x1a
    1fe2:	f5 01       	movw	r30, r10
    1fe4:	83 8d       	ldd	r24, Z+27	; 0x1b
    1fe6:	94 8d       	ldd	r25, Z+28	; 0x1c
    1fe8:	f4 01       	movw	r30, r8
    1fea:	94 8f       	std	Z+28, r25	; 0x1c
    1fec:	83 8f       	std	Z+27, r24	; 0x1b
    1fee:	c4 01       	movw	r24, r8
    1ff0:	c9 5b       	subi	r28, 0xB9	; 185
    1ff2:	df 4f       	sbci	r29, 0xFF	; 255
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	df 91       	pop	r29
    2000:	cf 91       	pop	r28
    2002:	1f 91       	pop	r17
    2004:	0f 91       	pop	r16
    2006:	ff 90       	pop	r15
    2008:	ef 90       	pop	r14
    200a:	df 90       	pop	r13
    200c:	cf 90       	pop	r12
    200e:	bf 90       	pop	r11
    2010:	af 90       	pop	r10
    2012:	9f 90       	pop	r9
    2014:	8f 90       	pop	r8
    2016:	7f 90       	pop	r7
    2018:	6f 90       	pop	r6
    201a:	5f 90       	pop	r5
    201c:	4f 90       	pop	r4
    201e:	08 95       	ret

00002020 <_ZN5SDLib7SDClass4openEPKch>:
    2020:	df 92       	push	r13
    2022:	ef 92       	push	r14
    2024:	ff 92       	push	r15
    2026:	0f 93       	push	r16
    2028:	1f 93       	push	r17
    202a:	cf 93       	push	r28
    202c:	df 93       	push	r29
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	c6 57       	subi	r28, 0x76	; 118
    2034:	d1 09       	sbc	r29, r1
    2036:	0f b6       	in	r0, 0x3f	; 63
    2038:	f8 94       	cli
    203a:	de bf       	out	0x3e, r29	; 62
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	cd bf       	out	0x3d, r28	; 61
    2040:	7c 01       	movw	r14, r24
    2042:	8a 01       	movw	r16, r20
    2044:	d2 2e       	mov	r13, r18
    2046:	9e 01       	movw	r18, r28
    2048:	25 5c       	subi	r18, 0xC5	; 197
    204a:	3f 4f       	sbci	r19, 0xFF	; 255
    204c:	ce 01       	movw	r24, r28
    204e:	cd 96       	adiw	r24, 0x3d	; 61
    2050:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <_ZN5SDLib7SDClass12getParentDirEPKcPi>
    2054:	8b ad       	ldd	r24, Y+59	; 0x3b
    2056:	9c ad       	ldd	r25, Y+60	; 0x3c
    2058:	08 0f       	add	r16, r24
    205a:	19 1f       	adc	r17, r25
    205c:	f8 01       	movw	r30, r16
    205e:	80 81       	ld	r24, Z
    2060:	81 11       	cpse	r24, r1
    2062:	57 c0       	rjmp	.+174    	; 0x2112 <_ZN5SDLib7SDClass4openEPKch+0xf2>
    2064:	21 96       	adiw	r28, 0x01	; 1
    2066:	8e ad       	ldd	r24, Y+62	; 0x3e
    2068:	9f ad       	ldd	r25, Y+63	; 0x3f
    206a:	21 97       	sbiw	r28, 0x01	; 1
    206c:	99 a3       	std	Y+33, r25	; 0x21
    206e:	88 a3       	std	Y+32, r24	; 0x20
    2070:	8a eb       	ldi	r24, 0xBA	; 186
    2072:	91 e0       	ldi	r25, 0x01	; 1
    2074:	9f 8f       	std	Y+31, r25	; 0x1f
    2076:	8e 8f       	std	Y+30, r24	; 0x1e
    2078:	22 96       	adiw	r28, 0x02	; 2
    207a:	8f ad       	ldd	r24, Y+63	; 0x3f
    207c:	22 97       	sbiw	r28, 0x02	; 2
    207e:	8a a3       	std	Y+34, r24	; 0x22
    2080:	23 96       	adiw	r28, 0x03	; 3
    2082:	8f ad       	ldd	r24, Y+63	; 0x3f
    2084:	23 97       	sbiw	r28, 0x03	; 3
    2086:	8b a3       	std	Y+35, r24	; 0x23
    2088:	27 96       	adiw	r28, 0x07	; 7
    208a:	8c ad       	ldd	r24, Y+60	; 0x3c
    208c:	9d ad       	ldd	r25, Y+61	; 0x3d
    208e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2090:	bf ad       	ldd	r27, Y+63	; 0x3f
    2092:	27 97       	sbiw	r28, 0x07	; 7
    2094:	8c a3       	std	Y+36, r24	; 0x24
    2096:	9d a3       	std	Y+37, r25	; 0x25
    2098:	ae a3       	std	Y+38, r26	; 0x26
    209a:	bf a3       	std	Y+39, r27	; 0x27
    209c:	2b 96       	adiw	r28, 0x0b	; 11
    209e:	8c ad       	ldd	r24, Y+60	; 0x3c
    20a0:	9d ad       	ldd	r25, Y+61	; 0x3d
    20a2:	ae ad       	ldd	r26, Y+62	; 0x3e
    20a4:	bf ad       	ldd	r27, Y+63	; 0x3f
    20a6:	2b 97       	sbiw	r28, 0x0b	; 11
    20a8:	88 a7       	std	Y+40, r24	; 0x28
    20aa:	99 a7       	std	Y+41, r25	; 0x29
    20ac:	aa a7       	std	Y+42, r26	; 0x2a
    20ae:	bb a7       	std	Y+43, r27	; 0x2b
    20b0:	2f 96       	adiw	r28, 0x0f	; 15
    20b2:	8c ad       	ldd	r24, Y+60	; 0x3c
    20b4:	9d ad       	ldd	r25, Y+61	; 0x3d
    20b6:	ae ad       	ldd	r26, Y+62	; 0x3e
    20b8:	bf ad       	ldd	r27, Y+63	; 0x3f
    20ba:	2f 97       	sbiw	r28, 0x0f	; 15
    20bc:	8c a7       	std	Y+44, r24	; 0x2c
    20be:	9d a7       	std	Y+45, r25	; 0x2d
    20c0:	ae a7       	std	Y+46, r26	; 0x2e
    20c2:	bf a7       	std	Y+47, r27	; 0x2f
    20c4:	60 96       	adiw	r28, 0x10	; 16
    20c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    20c8:	60 97       	sbiw	r28, 0x10	; 16
    20ca:	88 ab       	std	Y+48, r24	; 0x30
    20cc:	64 96       	adiw	r28, 0x14	; 20
    20ce:	8c ad       	ldd	r24, Y+60	; 0x3c
    20d0:	9d ad       	ldd	r25, Y+61	; 0x3d
    20d2:	ae ad       	ldd	r26, Y+62	; 0x3e
    20d4:	bf ad       	ldd	r27, Y+63	; 0x3f
    20d6:	64 97       	sbiw	r28, 0x14	; 20
    20d8:	89 ab       	std	Y+49, r24	; 0x31
    20da:	9a ab       	std	Y+50, r25	; 0x32
    20dc:	ab ab       	std	Y+51, r26	; 0x33
    20de:	bc ab       	std	Y+52, r27	; 0x34
    20e0:	68 96       	adiw	r28, 0x18	; 24
    20e2:	8c ad       	ldd	r24, Y+60	; 0x3c
    20e4:	9d ad       	ldd	r25, Y+61	; 0x3d
    20e6:	ae ad       	ldd	r26, Y+62	; 0x3e
    20e8:	bf ad       	ldd	r27, Y+63	; 0x3f
    20ea:	68 97       	sbiw	r28, 0x18	; 24
    20ec:	8d ab       	std	Y+53, r24	; 0x35
    20ee:	9e ab       	std	Y+54, r25	; 0x36
    20f0:	af ab       	std	Y+55, r26	; 0x37
    20f2:	b8 af       	std	Y+56, r27	; 0x38
    20f4:	6a 96       	adiw	r28, 0x1a	; 26
    20f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    20f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    20fa:	6a 97       	sbiw	r28, 0x1a	; 26
    20fc:	9a af       	std	Y+58, r25	; 0x3a
    20fe:	89 af       	std	Y+57, r24	; 0x39
    2100:	44 eb       	ldi	r20, 0xB4	; 180
    2102:	51 e0       	ldi	r21, 0x01	; 1
    2104:	be 01       	movw	r22, r28
    2106:	62 5e       	subi	r22, 0xE2	; 226
    2108:	7f 4f       	sbci	r23, 0xFF	; 255
    210a:	c7 01       	movw	r24, r14
    210c:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <_ZN5SDLib4FileC1E6SdFilePKc>
    2110:	8e c0       	rjmp	.+284    	; 0x222e <_ZN5SDLib7SDClass4openEPKch+0x20e>
    2112:	6e 96       	adiw	r28, 0x1e	; 30
    2114:	1f ae       	std	Y+63, r1	; 0x3f
    2116:	1e ae       	std	Y+62, r1	; 0x3e
    2118:	6e 97       	sbiw	r28, 0x1e	; 30
    211a:	8a eb       	ldi	r24, 0xBA	; 186
    211c:	91 e0       	ldi	r25, 0x01	; 1
    211e:	6c 96       	adiw	r28, 0x1c	; 28
    2120:	9f af       	std	Y+63, r25	; 0x3f
    2122:	8e af       	std	Y+62, r24	; 0x3e
    2124:	6c 97       	sbiw	r28, 0x1c	; 28
    2126:	a0 96       	adiw	r28, 0x20	; 32
    2128:	1f ae       	std	Y+63, r1	; 0x3f
    212a:	a0 97       	sbiw	r28, 0x20	; 32
    212c:	23 96       	adiw	r28, 0x03	; 3
    212e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2130:	23 97       	sbiw	r28, 0x03	; 3
    2132:	81 11       	cpse	r24, r1
    2134:	04 c0       	rjmp	.+8      	; 0x213e <_ZN5SDLib7SDClass4openEPKch+0x11e>
    2136:	c7 01       	movw	r24, r14
    2138:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN5SDLib4FileC1Ev>
    213c:	78 c0       	rjmp	.+240    	; 0x222e <_ZN5SDLib7SDClass4openEPKch+0x20e>
    213e:	2d 2d       	mov	r18, r13
    2140:	a8 01       	movw	r20, r16
    2142:	be 01       	movw	r22, r28
    2144:	63 5c       	subi	r22, 0xC3	; 195
    2146:	7f 4f       	sbci	r23, 0xFF	; 255
    2148:	ce 01       	movw	r24, r28
    214a:	86 5a       	subi	r24, 0xA6	; 166
    214c:	9f 4f       	sbci	r25, 0xFF	; 255
    214e:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <_ZN6SdFile4openEPS_PKch>
    2152:	81 11       	cpse	r24, r1
    2154:	04 c0       	rjmp	.+8      	; 0x215e <_ZN5SDLib7SDClass4openEPKch+0x13e>
    2156:	c7 01       	movw	r24, r14
    2158:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <_ZN5SDLib4FileC1Ev>
    215c:	68 c0       	rjmp	.+208    	; 0x222e <_ZN5SDLib7SDClass4openEPKch+0x20e>
    215e:	ce 01       	movw	r24, r28
    2160:	cd 96       	adiw	r24, 0x3d	; 61
    2162:	0e 94 b1 18 	call	0x3162	; 0x3162 <_ZN6SdFile5closeEv>
    2166:	8d 2d       	mov	r24, r13
    2168:	86 70       	andi	r24, 0x06	; 6
    216a:	86 30       	cpi	r24, 0x06	; 6
    216c:	59 f4       	brne	.+22     	; 0x2184 <_ZN5SDLib7SDClass4openEPKch+0x164>
    216e:	e1 96       	adiw	r28, 0x31	; 49
    2170:	4c ad       	ldd	r20, Y+60	; 0x3c
    2172:	5d ad       	ldd	r21, Y+61	; 0x3d
    2174:	6e ad       	ldd	r22, Y+62	; 0x3e
    2176:	7f ad       	ldd	r23, Y+63	; 0x3f
    2178:	e1 97       	sbiw	r28, 0x31	; 49
    217a:	ce 01       	movw	r24, r28
    217c:	86 5a       	subi	r24, 0xA6	; 166
    217e:	9f 4f       	sbci	r25, 0xFF	; 255
    2180:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_ZN6SdFile7seekSetEm>
    2184:	6e 96       	adiw	r28, 0x1e	; 30
    2186:	8e ad       	ldd	r24, Y+62	; 0x3e
    2188:	9f ad       	ldd	r25, Y+63	; 0x3f
    218a:	6e 97       	sbiw	r28, 0x1e	; 30
    218c:	9c 83       	std	Y+4, r25	; 0x04
    218e:	8b 83       	std	Y+3, r24	; 0x03
    2190:	8a eb       	ldi	r24, 0xBA	; 186
    2192:	91 e0       	ldi	r25, 0x01	; 1
    2194:	9a 83       	std	Y+2, r25	; 0x02
    2196:	89 83       	std	Y+1, r24	; 0x01
    2198:	6f 96       	adiw	r28, 0x1f	; 31
    219a:	8f ad       	ldd	r24, Y+63	; 0x3f
    219c:	6f 97       	sbiw	r28, 0x1f	; 31
    219e:	8d 83       	std	Y+5, r24	; 0x05
    21a0:	a0 96       	adiw	r28, 0x20	; 32
    21a2:	8f ad       	ldd	r24, Y+63	; 0x3f
    21a4:	a0 97       	sbiw	r28, 0x20	; 32
    21a6:	8e 83       	std	Y+6, r24	; 0x06
    21a8:	a4 96       	adiw	r28, 0x24	; 36
    21aa:	8c ad       	ldd	r24, Y+60	; 0x3c
    21ac:	9d ad       	ldd	r25, Y+61	; 0x3d
    21ae:	ae ad       	ldd	r26, Y+62	; 0x3e
    21b0:	bf ad       	ldd	r27, Y+63	; 0x3f
    21b2:	a4 97       	sbiw	r28, 0x24	; 36
    21b4:	8f 83       	std	Y+7, r24	; 0x07
    21b6:	98 87       	std	Y+8, r25	; 0x08
    21b8:	a9 87       	std	Y+9, r26	; 0x09
    21ba:	ba 87       	std	Y+10, r27	; 0x0a
    21bc:	a8 96       	adiw	r28, 0x28	; 40
    21be:	8c ad       	ldd	r24, Y+60	; 0x3c
    21c0:	9d ad       	ldd	r25, Y+61	; 0x3d
    21c2:	ae ad       	ldd	r26, Y+62	; 0x3e
    21c4:	bf ad       	ldd	r27, Y+63	; 0x3f
    21c6:	a8 97       	sbiw	r28, 0x28	; 40
    21c8:	8b 87       	std	Y+11, r24	; 0x0b
    21ca:	9c 87       	std	Y+12, r25	; 0x0c
    21cc:	ad 87       	std	Y+13, r26	; 0x0d
    21ce:	be 87       	std	Y+14, r27	; 0x0e
    21d0:	ac 96       	adiw	r28, 0x2c	; 44
    21d2:	8c ad       	ldd	r24, Y+60	; 0x3c
    21d4:	9d ad       	ldd	r25, Y+61	; 0x3d
    21d6:	ae ad       	ldd	r26, Y+62	; 0x3e
    21d8:	bf ad       	ldd	r27, Y+63	; 0x3f
    21da:	ac 97       	sbiw	r28, 0x2c	; 44
    21dc:	8f 87       	std	Y+15, r24	; 0x0f
    21de:	98 8b       	std	Y+16, r25	; 0x10
    21e0:	a9 8b       	std	Y+17, r26	; 0x11
    21e2:	ba 8b       	std	Y+18, r27	; 0x12
    21e4:	ad 96       	adiw	r28, 0x2d	; 45
    21e6:	8f ad       	ldd	r24, Y+63	; 0x3f
    21e8:	ad 97       	sbiw	r28, 0x2d	; 45
    21ea:	8b 8b       	std	Y+19, r24	; 0x13
    21ec:	e1 96       	adiw	r28, 0x31	; 49
    21ee:	8c ad       	ldd	r24, Y+60	; 0x3c
    21f0:	9d ad       	ldd	r25, Y+61	; 0x3d
    21f2:	ae ad       	ldd	r26, Y+62	; 0x3e
    21f4:	bf ad       	ldd	r27, Y+63	; 0x3f
    21f6:	e1 97       	sbiw	r28, 0x31	; 49
    21f8:	8c 8b       	std	Y+20, r24	; 0x14
    21fa:	9d 8b       	std	Y+21, r25	; 0x15
    21fc:	ae 8b       	std	Y+22, r26	; 0x16
    21fe:	bf 8b       	std	Y+23, r27	; 0x17
    2200:	e5 96       	adiw	r28, 0x35	; 53
    2202:	8c ad       	ldd	r24, Y+60	; 0x3c
    2204:	9d ad       	ldd	r25, Y+61	; 0x3d
    2206:	ae ad       	ldd	r26, Y+62	; 0x3e
    2208:	bf ad       	ldd	r27, Y+63	; 0x3f
    220a:	e5 97       	sbiw	r28, 0x35	; 53
    220c:	88 8f       	std	Y+24, r24	; 0x18
    220e:	99 8f       	std	Y+25, r25	; 0x19
    2210:	aa 8f       	std	Y+26, r26	; 0x1a
    2212:	bb 8f       	std	Y+27, r27	; 0x1b
    2214:	e7 96       	adiw	r28, 0x37	; 55
    2216:	8e ad       	ldd	r24, Y+62	; 0x3e
    2218:	9f ad       	ldd	r25, Y+63	; 0x3f
    221a:	e7 97       	sbiw	r28, 0x37	; 55
    221c:	9d 8f       	std	Y+29, r25	; 0x1d
    221e:	8c 8f       	std	Y+28, r24	; 0x1c
    2220:	a8 01       	movw	r20, r16
    2222:	be 01       	movw	r22, r28
    2224:	6f 5f       	subi	r22, 0xFF	; 255
    2226:	7f 4f       	sbci	r23, 0xFF	; 255
    2228:	c7 01       	movw	r24, r14
    222a:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <_ZN5SDLib4FileC1E6SdFilePKc>
    222e:	c7 01       	movw	r24, r14
    2230:	ca 58       	subi	r28, 0x8A	; 138
    2232:	df 4f       	sbci	r29, 0xFF	; 255
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	df 91       	pop	r29
    2240:	cf 91       	pop	r28
    2242:	1f 91       	pop	r17
    2244:	0f 91       	pop	r16
    2246:	ff 90       	pop	r15
    2248:	ef 90       	pop	r14
    224a:	df 90       	pop	r13
    224c:	08 95       	ret

0000224e <_ZN5SDLib7SDClass6existsEPKc>:
    224e:	fb 01       	movw	r30, r22
    2250:	bc 01       	movw	r22, r24
    2252:	66 5d       	subi	r22, 0xD6	; 214
    2254:	7f 4f       	sbci	r23, 0xFF	; 255
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	48 ee       	ldi	r20, 0xE8	; 232
    225c:	5d e0       	ldi	r21, 0x0D	; 13
    225e:	cf 01       	movw	r24, r30
    2260:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>
    2264:	08 95       	ret

00002266 <_ZN5SDLib7SDClass6removeEPKc>:
    2266:	fb 01       	movw	r30, r22
    2268:	bc 01       	movw	r22, r24
    226a:	66 5d       	subi	r22, 0xD6	; 214
    226c:	7f 4f       	sbci	r23, 0xFF	; 255
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	46 e1       	ldi	r20, 0x16	; 22
    2274:	5e e0       	ldi	r21, 0x0E	; 14
    2276:	cf 01       	movw	r24, r30
    2278:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>
    227c:	08 95       	ret

0000227e <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:

  SDClass SD;

};
    227e:	6f ef       	ldi	r22, 0xFF	; 255
    2280:	7f ef       	ldi	r23, 0xFF	; 255
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <_Z41__static_initialization_and_destruction_0ii>
    228a:	08 95       	ret

0000228c <_ZL7spiSendh>:

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    228c:	8e bd       	out	0x2e, r24	; 46
    228e:	00 00       	nop
    2290:	0d b4       	in	r0, 0x2d	; 45
    2292:	07 fe       	sbrs	r0, 7
    2294:	fd cf       	rjmp	.-6      	; 0x2290 <_ZL7spiSendh+0x4>
    2296:	8e b5       	in	r24, 0x2e	; 46
    2298:	08 95       	ret

0000229a <_ZL6spiRecv>:
    229a:	8f ef       	ldi	r24, 0xFF	; 255
    229c:	8e bd       	out	0x2e, r24	; 46
    229e:	00 00       	nop
    22a0:	0d b4       	in	r0, 0x2d	; 45
    22a2:	07 fe       	sbrs	r0, 7
    22a4:	fd cf       	rjmp	.-6      	; 0x22a0 <_ZL6spiRecv+0x6>
    22a6:	8e b5       	in	r24, 0x2e	; 46
    22a8:	08 95       	ret

000022aa <_Z41__static_initialization_and_destruction_0ii>:
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	41 f4       	brne	.+16     	; 0x22be <_Z41__static_initialization_and_destruction_0ii+0x14>
    22ae:	6f 3f       	cpi	r22, 0xFF	; 255
    22b0:	7f 4f       	sbci	r23, 0xFF	; 255
    22b2:	29 f4       	brne	.+10     	; 0x22be <_Z41__static_initialization_and_destruction_0ii+0x14>
    22b4:	ec e3       	ldi	r30, 0x3C	; 60
    22b6:	f4 e0       	ldi	r31, 0x04	; 4
    22b8:	80 e5       	ldi	r24, 0x50	; 80
    22ba:	80 83       	st	Z, r24
    22bc:	11 82       	std	Z+1, r1	; 0x01
    22be:	08 95       	ret

000022c0 <_ZN7Sd2Card14chipSelectHighEv>:
    22c0:	61 e0       	ldi	r22, 0x01	; 1
    22c2:	fc 01       	movw	r30, r24
    22c4:	84 81       	ldd	r24, Z+4	; 0x04
    22c6:	0e 94 87 06 	call	0xd0e	; 0xd0e <digitalWrite>
    22ca:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <_ZL20chip_select_asserted>
    22ce:	88 23       	and	r24, r24
    22d0:	a1 f0       	breq	.+40     	; 0x22fa <_ZN7Sd2Card14chipSelectHighEv+0x3a>
    22d2:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <_ZL20chip_select_asserted>
    22d6:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <_ZN8SPIClass13interruptModeE>
    22da:	88 23       	and	r24, r24
    22dc:	71 f0       	breq	.+28     	; 0x22fa <_ZN7Sd2Card14chipSelectHighEv+0x3a>
    22de:	9f b7       	in	r25, 0x3f	; 63
    22e0:	f8 94       	cli
    22e2:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <_ZN8SPIClass13interruptModeE>
    22e6:	81 30       	cpi	r24, 0x01	; 1
    22e8:	29 f4       	brne	.+10     	; 0x22f4 <_ZN7Sd2Card14chipSelectHighEv+0x34>
    22ea:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <_ZN8SPIClass13interruptSaveE>
    22ee:	8d bb       	out	0x1d, r24	; 29
    22f0:	9f bf       	out	0x3f, r25	; 63
    22f2:	08 95       	ret
    22f4:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <_ZN8SPIClass13interruptSaveE>
    22f8:	8f bf       	out	0x3f, r24	; 63
    22fa:	08 95       	ret

000022fc <_ZN7Sd2Card13chipSelectLowEv>:
    22fc:	20 91 3b 04 	lds	r18, 0x043B	; 0x80043b <_ZL20chip_select_asserted>
    2300:	21 11       	cpse	r18, r1
    2302:	20 c0       	rjmp	.+64     	; 0x2344 <_ZN7Sd2Card13chipSelectLowEv+0x48>
    2304:	21 e0       	ldi	r18, 0x01	; 1
    2306:	20 93 3b 04 	sts	0x043B, r18	; 0x80043b <_ZL20chip_select_asserted>
    230a:	30 91 3c 04 	lds	r19, 0x043C	; 0x80043c <_ZL8settings>
    230e:	20 91 3d 04 	lds	r18, 0x043D	; 0x80043d <_ZL8settings+0x1>
    2312:	40 91 26 03 	lds	r20, 0x0326	; 0x800326 <_ZN8SPIClass13interruptModeE>
    2316:	44 23       	and	r20, r20
    2318:	99 f0       	breq	.+38     	; 0x2340 <_ZN7Sd2Card13chipSelectLowEv+0x44>
    231a:	4f b7       	in	r20, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	50 91 26 03 	lds	r21, 0x0326	; 0x800326 <_ZN8SPIClass13interruptModeE>
    2322:	51 30       	cpi	r21, 0x01	; 1
    2324:	59 f4       	brne	.+22     	; 0x233c <_ZN7Sd2Card13chipSelectLowEv+0x40>
    2326:	5d b3       	in	r21, 0x1d	; 29
    2328:	50 93 24 03 	sts	0x0324, r21	; 0x800324 <_ZN8SPIClass13interruptSaveE>
    232c:	6d b3       	in	r22, 0x1d	; 29
    232e:	50 91 25 03 	lds	r21, 0x0325	; 0x800325 <_ZN8SPIClass13interruptMaskE>
    2332:	50 95       	com	r21
    2334:	56 23       	and	r21, r22
    2336:	5d bb       	out	0x1d, r21	; 29
    2338:	4f bf       	out	0x3f, r20	; 63
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <_ZN7Sd2Card13chipSelectLowEv+0x44>
    233c:	40 93 24 03 	sts	0x0324, r20	; 0x800324 <_ZN8SPIClass13interruptSaveE>
    2340:	3c bd       	out	0x2c, r19	; 44
    2342:	2d bd       	out	0x2d, r18	; 45
    2344:	60 e0       	ldi	r22, 0x00	; 0
    2346:	fc 01       	movw	r30, r24
    2348:	84 81       	ldd	r24, Z+4	; 0x04
    234a:	0e 94 87 06 	call	0xd0e	; 0xd0e <digitalWrite>
    234e:	08 95       	ret

00002350 <_ZN7Sd2Card7readEndEv>:
    2350:	cf 93       	push	r28
    2352:	df 93       	push	r29
    2354:	ec 01       	movw	r28, r24
    2356:	8e 81       	ldd	r24, Y+6	; 0x06
    2358:	88 23       	and	r24, r24
    235a:	89 f0       	breq	.+34     	; 0x237e <_ZN7Sd2Card7readEndEv+0x2e>
    235c:	8f 81       	ldd	r24, Y+7	; 0x07
    235e:	98 85       	ldd	r25, Y+8	; 0x08
    2360:	9c 01       	movw	r18, r24
    2362:	2f 5f       	subi	r18, 0xFF	; 255
    2364:	3f 4f       	sbci	r19, 0xFF	; 255
    2366:	38 87       	std	Y+8, r19	; 0x08
    2368:	2f 83       	std	Y+7, r18	; 0x07
    236a:	82 30       	cpi	r24, 0x02	; 2
    236c:	92 40       	sbci	r25, 0x02	; 2
    236e:	18 f4       	brcc	.+6      	; 0x2376 <_ZN7Sd2Card7readEndEv+0x26>
    2370:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZL6spiRecv>
    2374:	f3 cf       	rjmp	.-26     	; 0x235c <_ZN7Sd2Card7readEndEv+0xc>
    2376:	ce 01       	movw	r24, r28
    2378:	0e 94 60 11 	call	0x22c0	; 0x22c0 <_ZN7Sd2Card14chipSelectHighEv>
    237c:	1e 82       	std	Y+6, r1	; 0x06
    237e:	df 91       	pop	r29
    2380:	cf 91       	pop	r28
    2382:	08 95       	ret

00002384 <_ZN7Sd2Card10setSckRateEh>:
    2384:	67 30       	cpi	r22, 0x07	; 7
    2386:	28 f0       	brcs	.+10     	; 0x2392 <_ZN7Sd2Card10setSckRateEh+0xe>
    2388:	26 e1       	ldi	r18, 0x16	; 22
    238a:	fc 01       	movw	r30, r24
    238c:	25 83       	std	Z+5, r18	; 0x05
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	08 95       	ret
    2392:	62 30       	cpi	r22, 0x02	; 2
    2394:	d1 f0       	breq	.+52     	; 0x23ca <_ZN7Sd2Card10setSckRateEh+0x46>
    2396:	28 f4       	brcc	.+10     	; 0x23a2 <_ZN7Sd2Card10setSckRateEh+0x1e>
    2398:	66 23       	and	r22, r22
    239a:	49 f0       	breq	.+18     	; 0x23ae <_ZN7Sd2Card10setSckRateEh+0x2a>
    239c:	61 30       	cpi	r22, 0x01	; 1
    239e:	71 f0       	breq	.+28     	; 0x23bc <_ZN7Sd2Card10setSckRateEh+0x38>
    23a0:	30 c0       	rjmp	.+96     	; 0x2402 <_ZN7Sd2Card10setSckRateEh+0x7e>
    23a2:	64 30       	cpi	r22, 0x04	; 4
    23a4:	01 f1       	breq	.+64     	; 0x23e6 <_ZN7Sd2Card10setSckRateEh+0x62>
    23a6:	c0 f0       	brcs	.+48     	; 0x23d8 <_ZN7Sd2Card10setSckRateEh+0x54>
    23a8:	65 30       	cpi	r22, 0x05	; 5
    23aa:	21 f1       	breq	.+72     	; 0x23f4 <_ZN7Sd2Card10setSckRateEh+0x70>
    23ac:	2a c0       	rjmp	.+84     	; 0x2402 <_ZN7Sd2Card10setSckRateEh+0x7e>
    23ae:	80 e5       	ldi	r24, 0x50	; 80
    23b0:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <_ZL8settings>
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <_ZL8settings+0x1>
    23ba:	08 95       	ret
    23bc:	80 e5       	ldi	r24, 0x50	; 80
    23be:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <_ZL8settings>
    23c2:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_ZL8settings+0x1>
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	08 95       	ret
    23ca:	81 e5       	ldi	r24, 0x51	; 81
    23cc:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <_ZL8settings>
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <_ZL8settings+0x1>
    23d6:	08 95       	ret
    23d8:	81 e5       	ldi	r24, 0x51	; 81
    23da:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <_ZL8settings>
    23de:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_ZL8settings+0x1>
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	08 95       	ret
    23e6:	82 e5       	ldi	r24, 0x52	; 82
    23e8:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <_ZL8settings>
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <_ZL8settings+0x1>
    23f2:	08 95       	ret
    23f4:	82 e5       	ldi	r24, 0x52	; 82
    23f6:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <_ZL8settings>
    23fa:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_ZL8settings+0x1>
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	08 95       	ret
    2402:	83 e5       	ldi	r24, 0x53	; 83
    2404:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <_ZL8settings>
    2408:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_ZL8settings+0x1>
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	08 95       	ret

00002410 <_ZN7Sd2Card11waitNotBusyEj>:
    2410:	0f 93       	push	r16
    2412:	1f 93       	push	r17
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	eb 01       	movw	r28, r22
    241a:	0e 94 64 05 	call	0xac8	; 0xac8 <millis>
    241e:	8b 01       	movw	r16, r22
    2420:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZL6spiRecv>
    2424:	8f 3f       	cpi	r24, 0xFF	; 255
    2426:	49 f0       	breq	.+18     	; 0x243a <_ZN7Sd2Card11waitNotBusyEj+0x2a>
    2428:	0e 94 64 05 	call	0xac8	; 0xac8 <millis>
    242c:	60 1b       	sub	r22, r16
    242e:	71 0b       	sbc	r23, r17
    2430:	6c 17       	cp	r22, r28
    2432:	7d 07       	cpc	r23, r29
    2434:	a8 f3       	brcs	.-22     	; 0x2420 <_ZN7Sd2Card11waitNotBusyEj+0x10>
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	01 c0       	rjmp	.+2      	; 0x243c <_ZN7Sd2Card11waitNotBusyEj+0x2c>
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	df 91       	pop	r29
    243e:	cf 91       	pop	r28
    2440:	1f 91       	pop	r17
    2442:	0f 91       	pop	r16
    2444:	08 95       	ret

00002446 <_ZN7Sd2Card11cardCommandEhm>:
    2446:	cf 92       	push	r12
    2448:	df 92       	push	r13
    244a:	ef 92       	push	r14
    244c:	ff 92       	push	r15
    244e:	0f 93       	push	r16
    2450:	1f 93       	push	r17
    2452:	cf 93       	push	r28
    2454:	df 93       	push	r29
    2456:	8c 01       	movw	r16, r24
    2458:	d6 2f       	mov	r29, r22
    245a:	69 01       	movw	r12, r18
    245c:	7a 01       	movw	r14, r20
    245e:	0e 94 a8 11 	call	0x2350	; 0x2350 <_ZN7Sd2Card7readEndEv>
    2462:	c8 01       	movw	r24, r16
    2464:	0e 94 7e 11 	call	0x22fc	; 0x22fc <_ZN7Sd2Card13chipSelectLowEv>
    2468:	6c e2       	ldi	r22, 0x2C	; 44
    246a:	71 e0       	ldi	r23, 0x01	; 1
    246c:	c8 01       	movw	r24, r16
    246e:	0e 94 08 12 	call	0x2410	; 0x2410 <_ZN7Sd2Card11waitNotBusyEj>
    2472:	8d 2f       	mov	r24, r29
    2474:	80 64       	ori	r24, 0x40	; 64
    2476:	0e 94 46 11 	call	0x228c	; 0x228c <_ZL7spiSendh>
    247a:	c8 e1       	ldi	r28, 0x18	; 24
    247c:	cc 23       	and	r28, r28
    247e:	74 f0       	brlt	.+28     	; 0x249c <_ZN7Sd2Card11cardCommandEhm+0x56>
    2480:	d7 01       	movw	r26, r14
    2482:	c6 01       	movw	r24, r12
    2484:	0c 2e       	mov	r0, r28
    2486:	04 c0       	rjmp	.+8      	; 0x2490 <_ZN7Sd2Card11cardCommandEhm+0x4a>
    2488:	b6 95       	lsr	r27
    248a:	a7 95       	ror	r26
    248c:	97 95       	ror	r25
    248e:	87 95       	ror	r24
    2490:	0a 94       	dec	r0
    2492:	d2 f7       	brpl	.-12     	; 0x2488 <_ZN7Sd2Card11cardCommandEhm+0x42>
    2494:	0e 94 46 11 	call	0x228c	; 0x228c <_ZL7spiSendh>
    2498:	c8 50       	subi	r28, 0x08	; 8
    249a:	f0 cf       	rjmp	.-32     	; 0x247c <_ZN7Sd2Card11cardCommandEhm+0x36>
    249c:	dd 23       	and	r29, r29
    249e:	11 f0       	breq	.+4      	; 0x24a4 <_ZN7Sd2Card11cardCommandEhm+0x5e>
    24a0:	8f ef       	ldi	r24, 0xFF	; 255
    24a2:	01 c0       	rjmp	.+2      	; 0x24a6 <_ZN7Sd2Card11cardCommandEhm+0x60>
    24a4:	85 e9       	ldi	r24, 0x95	; 149
    24a6:	d8 30       	cpi	r29, 0x08	; 8
    24a8:	09 f4       	brne	.+2      	; 0x24ac <_ZN7Sd2Card11cardCommandEhm+0x66>
    24aa:	87 e8       	ldi	r24, 0x87	; 135
    24ac:	0e 94 46 11 	call	0x228c	; 0x228c <_ZL7spiSendh>
    24b0:	c0 e0       	ldi	r28, 0x00	; 0
    24b2:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZL6spiRecv>
    24b6:	f8 01       	movw	r30, r16
    24b8:	82 87       	std	Z+10, r24	; 0x0a
    24ba:	88 23       	and	r24, r24
    24bc:	24 f4       	brge	.+8      	; 0x24c6 <_ZN7Sd2Card11cardCommandEhm+0x80>
    24be:	cf 3f       	cpi	r28, 0xFF	; 255
    24c0:	21 f4       	brne	.+8      	; 0x24ca <_ZN7Sd2Card11cardCommandEhm+0x84>
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	03 c0       	rjmp	.+6      	; 0x24cc <_ZN7Sd2Card11cardCommandEhm+0x86>
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	01 c0       	rjmp	.+2      	; 0x24cc <_ZN7Sd2Card11cardCommandEhm+0x86>
    24ca:	91 e0       	ldi	r25, 0x01	; 1
    24cc:	99 23       	and	r25, r25
    24ce:	11 f0       	breq	.+4      	; 0x24d4 <_ZN7Sd2Card11cardCommandEhm+0x8e>
    24d0:	cf 5f       	subi	r28, 0xFF	; 255
    24d2:	ef cf       	rjmp	.-34     	; 0x24b2 <_ZN7Sd2Card11cardCommandEhm+0x6c>
    24d4:	df 91       	pop	r29
    24d6:	cf 91       	pop	r28
    24d8:	1f 91       	pop	r17
    24da:	0f 91       	pop	r16
    24dc:	ff 90       	pop	r15
    24de:	ef 90       	pop	r14
    24e0:	df 90       	pop	r13
    24e2:	cf 90       	pop	r12
    24e4:	08 95       	ret

000024e6 <_ZN7Sd2Card4initEhh>:
    24e6:	8f 92       	push	r8
    24e8:	9f 92       	push	r9
    24ea:	af 92       	push	r10
    24ec:	bf 92       	push	r11
    24ee:	ef 92       	push	r14
    24f0:	ff 92       	push	r15
    24f2:	0f 93       	push	r16
    24f4:	1f 93       	push	r17
    24f6:	cf 93       	push	r28
    24f8:	df 93       	push	r29
    24fa:	ec 01       	movw	r28, r24
    24fc:	e6 2e       	mov	r14, r22
    24fe:	1b 86       	std	Y+11, r1	; 0x0b
    2500:	19 86       	std	Y+9, r1	; 0x09
    2502:	1e 82       	std	Y+6, r1	; 0x06
    2504:	1d 82       	std	Y+5, r1	; 0x05
    2506:	4c 83       	std	Y+4, r20	; 0x04
    2508:	0e 94 64 05 	call	0xac8	; 0xac8 <millis>
    250c:	8b 01       	movw	r16, r22
    250e:	61 e0       	ldi	r22, 0x01	; 1
    2510:	8c 81       	ldd	r24, Y+4	; 0x04
    2512:	0e 94 48 06 	call	0xc90	; 0xc90 <pinMode>
    2516:	61 e0       	ldi	r22, 0x01	; 1
    2518:	8c 81       	ldd	r24, Y+4	; 0x04
    251a:	0e 94 87 06 	call	0xd0e	; 0xd0e <digitalWrite>
    251e:	0e 94 07 08 	call	0x100e	; 0x100e <_ZN8SPIClass5beginEv>
    2522:	82 e5       	ldi	r24, 0x52	; 82
    2524:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <_ZL8settings>
    2528:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_ZL8settings+0x1>
    252c:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <_ZN8SPIClass13interruptModeE>
    2530:	88 23       	and	r24, r24
    2532:	99 f0       	breq	.+38     	; 0x255a <_ZN7Sd2Card4initEhh+0x74>
    2534:	8f b7       	in	r24, 0x3f	; 63
    2536:	f8 94       	cli
    2538:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <_ZN8SPIClass13interruptModeE>
    253c:	91 30       	cpi	r25, 0x01	; 1
    253e:	59 f4       	brne	.+22     	; 0x2556 <_ZN7Sd2Card4initEhh+0x70>
    2540:	9d b3       	in	r25, 0x1d	; 29
    2542:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <_ZN8SPIClass13interruptSaveE>
    2546:	2d b3       	in	r18, 0x1d	; 29
    2548:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <_ZN8SPIClass13interruptMaskE>
    254c:	90 95       	com	r25
    254e:	92 23       	and	r25, r18
    2550:	9d bb       	out	0x1d, r25	; 29
    2552:	8f bf       	out	0x3f, r24	; 63
    2554:	02 c0       	rjmp	.+4      	; 0x255a <_ZN7Sd2Card4initEhh+0x74>
    2556:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <_ZN8SPIClass13interruptSaveE>
    255a:	82 e5       	ldi	r24, 0x52	; 82
    255c:	8c bd       	out	0x2c, r24	; 44
    255e:	1d bc       	out	0x2d, r1	; 45
    2560:	f1 2c       	mov	r15, r1
    2562:	89 e0       	ldi	r24, 0x09	; 9
    2564:	8f 15       	cp	r24, r15
    2566:	28 f0       	brcs	.+10     	; 0x2572 <_ZN7Sd2Card4initEhh+0x8c>
    2568:	8f ef       	ldi	r24, 0xFF	; 255
    256a:	0e 94 46 11 	call	0x228c	; 0x228c <_ZL7spiSendh>
    256e:	f3 94       	inc	r15
    2570:	f8 cf       	rjmp	.-16     	; 0x2562 <_ZN7Sd2Card4initEhh+0x7c>
    2572:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <_ZN8SPIClass13interruptModeE>
    2576:	88 23       	and	r24, r24
    2578:	71 f0       	breq	.+28     	; 0x2596 <_ZN7Sd2Card4initEhh+0xb0>
    257a:	9f b7       	in	r25, 0x3f	; 63
    257c:	f8 94       	cli
    257e:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <_ZN8SPIClass13interruptModeE>
    2582:	81 30       	cpi	r24, 0x01	; 1
    2584:	29 f4       	brne	.+10     	; 0x2590 <_ZN7Sd2Card4initEhh+0xaa>
    2586:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <_ZN8SPIClass13interruptSaveE>
    258a:	8d bb       	out	0x1d, r24	; 29
    258c:	9f bf       	out	0x3f, r25	; 63
    258e:	03 c0       	rjmp	.+6      	; 0x2596 <_ZN7Sd2Card4initEhh+0xb0>
    2590:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <_ZN8SPIClass13interruptSaveE>
    2594:	8f bf       	out	0x3f, r24	; 63
    2596:	ce 01       	movw	r24, r28
    2598:	0e 94 7e 11 	call	0x22fc	; 0x22fc <_ZN7Sd2Card13chipSelectLowEv>
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	a9 01       	movw	r20, r18
    25a2:	60 e0       	ldi	r22, 0x00	; 0
    25a4:	ce 01       	movw	r24, r28
    25a6:	0e 94 23 12 	call	0x2446	; 0x2446 <_ZN7Sd2Card11cardCommandEhm>
    25aa:	8a 87       	std	Y+10, r24	; 0x0a
    25ac:	81 30       	cpi	r24, 0x01	; 1
    25ae:	51 f0       	breq	.+20     	; 0x25c4 <_ZN7Sd2Card4initEhh+0xde>
    25b0:	0e 94 64 05 	call	0xac8	; 0xac8 <millis>
    25b4:	60 1b       	sub	r22, r16
    25b6:	71 0b       	sbc	r23, r17
    25b8:	61 3d       	cpi	r22, 0xD1	; 209
    25ba:	77 40       	sbci	r23, 0x07	; 7
    25bc:	78 f3       	brcs	.-34     	; 0x259c <_ZN7Sd2Card4initEhh+0xb6>
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	8d 83       	std	Y+5, r24	; 0x05
    25c2:	69 c0       	rjmp	.+210    	; 0x2696 <_ZN7Sd2Card4initEhh+0x1b0>
    25c4:	2a ea       	ldi	r18, 0xAA	; 170
    25c6:	31 e0       	ldi	r19, 0x01	; 1
    25c8:	40 e0       	ldi	r20, 0x00	; 0
    25ca:	50 e0       	ldi	r21, 0x00	; 0
    25cc:	68 e0       	ldi	r22, 0x08	; 8
    25ce:	ce 01       	movw	r24, r28
    25d0:	0e 94 23 12 	call	0x2446	; 0x2446 <_ZN7Sd2Card11cardCommandEhm>
    25d4:	82 ff       	sbrs	r24, 2
    25d6:	03 c0       	rjmp	.+6      	; 0x25de <_ZN7Sd2Card4initEhh+0xf8>
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	8b 87       	std	Y+11, r24	; 0x0b
    25dc:	11 c0       	rjmp	.+34     	; 0x2600 <_ZN7Sd2Card4initEhh+0x11a>
    25de:	f1 2c       	mov	r15, r1
    25e0:	83 e0       	ldi	r24, 0x03	; 3
    25e2:	8f 15       	cp	r24, r15
    25e4:	28 f0       	brcs	.+10     	; 0x25f0 <_ZN7Sd2Card4initEhh+0x10a>
    25e6:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZL6spiRecv>
    25ea:	8a 87       	std	Y+10, r24	; 0x0a
    25ec:	f3 94       	inc	r15
    25ee:	f8 cf       	rjmp	.-16     	; 0x25e0 <_ZN7Sd2Card4initEhh+0xfa>
    25f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    25f2:	8a 3a       	cpi	r24, 0xAA	; 170
    25f4:	19 f0       	breq	.+6      	; 0x25fc <_ZN7Sd2Card4initEhh+0x116>
    25f6:	82 e0       	ldi	r24, 0x02	; 2
    25f8:	8d 83       	std	Y+5, r24	; 0x05
    25fa:	4d c0       	rjmp	.+154    	; 0x2696 <_ZN7Sd2Card4initEhh+0x1b0>
    25fc:	82 e0       	ldi	r24, 0x02	; 2
    25fe:	8b 87       	std	Y+11, r24	; 0x0b
    2600:	8b 85       	ldd	r24, Y+11	; 0x0b
    2602:	82 30       	cpi	r24, 0x02	; 2
    2604:	31 f4       	brne	.+12     	; 0x2612 <_ZN7Sd2Card4initEhh+0x12c>
    2606:	81 2c       	mov	r8, r1
    2608:	91 2c       	mov	r9, r1
    260a:	54 01       	movw	r10, r8
    260c:	68 94       	set
    260e:	b6 f8       	bld	r11, 6
    2610:	03 c0       	rjmp	.+6      	; 0x2618 <_ZN7Sd2Card4initEhh+0x132>
    2612:	81 2c       	mov	r8, r1
    2614:	91 2c       	mov	r9, r1
    2616:	54 01       	movw	r10, r8
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	a9 01       	movw	r20, r18
    261e:	67 e3       	ldi	r22, 0x37	; 55
    2620:	ce 01       	movw	r24, r28
    2622:	0e 94 23 12 	call	0x2446	; 0x2446 <_ZN7Sd2Card11cardCommandEhm>
    2626:	a5 01       	movw	r20, r10
    2628:	94 01       	movw	r18, r8
    262a:	69 e2       	ldi	r22, 0x29	; 41
    262c:	ce 01       	movw	r24, r28
    262e:	0e 94 23 12 	call	0x2446	; 0x2446 <_ZN7Sd2Card11cardCommandEhm>
    2632:	8a 87       	std	Y+10, r24	; 0x0a
    2634:	88 23       	and	r24, r24
    2636:	51 f0       	breq	.+20     	; 0x264c <_ZN7Sd2Card4initEhh+0x166>
    2638:	0e 94 64 05 	call	0xac8	; 0xac8 <millis>
    263c:	60 1b       	sub	r22, r16
    263e:	71 0b       	sbc	r23, r17
    2640:	61 3d       	cpi	r22, 0xD1	; 209
    2642:	77 40       	sbci	r23, 0x07	; 7
    2644:	48 f3       	brcs	.-46     	; 0x2618 <_ZN7Sd2Card4initEhh+0x132>
    2646:	88 e0       	ldi	r24, 0x08	; 8
    2648:	8d 83       	std	Y+5, r24	; 0x05
    264a:	25 c0       	rjmp	.+74     	; 0x2696 <_ZN7Sd2Card4initEhh+0x1b0>
    264c:	8b 85       	ldd	r24, Y+11	; 0x0b
    264e:	82 30       	cpi	r24, 0x02	; 2
    2650:	d1 f4       	brne	.+52     	; 0x2686 <_ZN7Sd2Card4initEhh+0x1a0>
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	a9 01       	movw	r20, r18
    2658:	6a e3       	ldi	r22, 0x3A	; 58
    265a:	ce 01       	movw	r24, r28
    265c:	0e 94 23 12 	call	0x2446	; 0x2446 <_ZN7Sd2Card11cardCommandEhm>
    2660:	88 23       	and	r24, r24
    2662:	19 f0       	breq	.+6      	; 0x266a <_ZN7Sd2Card4initEhh+0x184>
    2664:	86 e0       	ldi	r24, 0x06	; 6
    2666:	8d 83       	std	Y+5, r24	; 0x05
    2668:	16 c0       	rjmp	.+44     	; 0x2696 <_ZN7Sd2Card4initEhh+0x1b0>
    266a:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZL6spiRecv>
    266e:	80 7c       	andi	r24, 0xC0	; 192
    2670:	80 3c       	cpi	r24, 0xC0	; 192
    2672:	11 f4       	brne	.+4      	; 0x2678 <_ZN7Sd2Card4initEhh+0x192>
    2674:	83 e0       	ldi	r24, 0x03	; 3
    2676:	8b 87       	std	Y+11, r24	; 0x0b
    2678:	10 e0       	ldi	r17, 0x00	; 0
    267a:	13 30       	cpi	r17, 0x03	; 3
    267c:	20 f4       	brcc	.+8      	; 0x2686 <_ZN7Sd2Card4initEhh+0x1a0>
    267e:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZL6spiRecv>
    2682:	1f 5f       	subi	r17, 0xFF	; 255
    2684:	fa cf       	rjmp	.-12     	; 0x267a <_ZN7Sd2Card4initEhh+0x194>
    2686:	ce 01       	movw	r24, r28
    2688:	0e 94 60 11 	call	0x22c0	; 0x22c0 <_ZN7Sd2Card14chipSelectHighEv>
    268c:	6e 2d       	mov	r22, r14
    268e:	ce 01       	movw	r24, r28
    2690:	0e 94 c2 11 	call	0x2384	; 0x2384 <_ZN7Sd2Card10setSckRateEh>
    2694:	04 c0       	rjmp	.+8      	; 0x269e <_ZN7Sd2Card4initEhh+0x1b8>
    2696:	ce 01       	movw	r24, r28
    2698:	0e 94 60 11 	call	0x22c0	; 0x22c0 <_ZN7Sd2Card14chipSelectHighEv>
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	df 91       	pop	r29
    26a0:	cf 91       	pop	r28
    26a2:	1f 91       	pop	r17
    26a4:	0f 91       	pop	r16
    26a6:	ff 90       	pop	r15
    26a8:	ef 90       	pop	r14
    26aa:	bf 90       	pop	r11
    26ac:	af 90       	pop	r10
    26ae:	9f 90       	pop	r9
    26b0:	8f 90       	pop	r8
    26b2:	08 95       	ret

000026b4 <_ZN7Sd2Card14waitStartBlockEv>:
    26b4:	0f 93       	push	r16
    26b6:	1f 93       	push	r17
    26b8:	cf 93       	push	r28
    26ba:	df 93       	push	r29
    26bc:	ec 01       	movw	r28, r24
    26be:	0e 94 64 05 	call	0xac8	; 0xac8 <millis>
    26c2:	8b 01       	movw	r16, r22
    26c4:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZL6spiRecv>
    26c8:	8a 87       	std	Y+10, r24	; 0x0a
    26ca:	8f 3f       	cpi	r24, 0xFF	; 255
    26cc:	51 f4       	brne	.+20     	; 0x26e2 <_ZN7Sd2Card14waitStartBlockEv+0x2e>
    26ce:	0e 94 64 05 	call	0xac8	; 0xac8 <millis>
    26d2:	60 1b       	sub	r22, r16
    26d4:	71 0b       	sbc	r23, r17
    26d6:	6d 32       	cpi	r22, 0x2D	; 45
    26d8:	71 40       	sbci	r23, 0x01	; 1
    26da:	a0 f3       	brcs	.-24     	; 0x26c4 <_ZN7Sd2Card14waitStartBlockEv+0x10>
    26dc:	8f e0       	ldi	r24, 0x0F	; 15
    26de:	8d 83       	std	Y+5, r24	; 0x05
    26e0:	04 c0       	rjmp	.+8      	; 0x26ea <_ZN7Sd2Card14waitStartBlockEv+0x36>
    26e2:	8e 3f       	cpi	r24, 0xFE	; 254
    26e4:	39 f0       	breq	.+14     	; 0x26f4 <_ZN7Sd2Card14waitStartBlockEv+0x40>
    26e6:	8d e0       	ldi	r24, 0x0D	; 13
    26e8:	8d 83       	std	Y+5, r24	; 0x05
    26ea:	ce 01       	movw	r24, r28
    26ec:	0e 94 60 11 	call	0x22c0	; 0x22c0 <_ZN7Sd2Card14chipSelectHighEv>
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	01 c0       	rjmp	.+2      	; 0x26f6 <_ZN7Sd2Card14waitStartBlockEv+0x42>
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	df 91       	pop	r29
    26f8:	cf 91       	pop	r28
    26fa:	1f 91       	pop	r17
    26fc:	0f 91       	pop	r16
    26fe:	08 95       	ret

00002700 <_ZN7Sd2Card8readDataEmjjPh>:
    2700:	af 92       	push	r10
    2702:	bf 92       	push	r11
    2704:	cf 92       	push	r12
    2706:	df 92       	push	r13
    2708:	ef 92       	push	r14
    270a:	ff 92       	push	r15
    270c:	0f 93       	push	r16
    270e:	1f 93       	push	r17
    2710:	cf 93       	push	r28
    2712:	df 93       	push	r29
    2714:	ec 01       	movw	r28, r24
    2716:	69 01       	movw	r12, r18
    2718:	01 15       	cp	r16, r1
    271a:	11 05       	cpc	r17, r1
    271c:	09 f4       	brne	.+2      	; 0x2720 <_ZN7Sd2Card8readDataEmjjPh+0x20>
    271e:	6f c0       	rjmp	.+222    	; 0x27fe <_ZN7Sd2Card8readDataEmjjPh+0xfe>
    2720:	c8 01       	movw	r24, r16
    2722:	82 0f       	add	r24, r18
    2724:	93 1f       	adc	r25, r19
    2726:	81 30       	cpi	r24, 0x01	; 1
    2728:	92 40       	sbci	r25, 0x02	; 2
    272a:	08 f0       	brcs	.+2      	; 0x272e <_ZN7Sd2Card8readDataEmjjPh+0x2e>
    272c:	63 c0       	rjmp	.+198    	; 0x27f4 <_ZN7Sd2Card8readDataEmjjPh+0xf4>
    272e:	8e 81       	ldd	r24, Y+6	; 0x06
    2730:	88 23       	and	r24, r24
    2732:	71 f0       	breq	.+28     	; 0x2750 <_ZN7Sd2Card8readDataEmjjPh+0x50>
    2734:	88 81       	ld	r24, Y
    2736:	99 81       	ldd	r25, Y+1	; 0x01
    2738:	aa 81       	ldd	r26, Y+2	; 0x02
    273a:	bb 81       	ldd	r27, Y+3	; 0x03
    273c:	84 17       	cp	r24, r20
    273e:	95 07       	cpc	r25, r21
    2740:	a6 07       	cpc	r26, r22
    2742:	b7 07       	cpc	r27, r23
    2744:	29 f4       	brne	.+10     	; 0x2750 <_ZN7Sd2Card8readDataEmjjPh+0x50>
    2746:	8f 81       	ldd	r24, Y+7	; 0x07
    2748:	98 85       	ldd	r25, Y+8	; 0x08
    274a:	c8 16       	cp	r12, r24
    274c:	d9 06       	cpc	r13, r25
    274e:	20 f5       	brcc	.+72     	; 0x2798 <_ZN7Sd2Card8readDataEmjjPh+0x98>
    2750:	48 83       	st	Y, r20
    2752:	59 83       	std	Y+1, r21	; 0x01
    2754:	6a 83       	std	Y+2, r22	; 0x02
    2756:	7b 83       	std	Y+3, r23	; 0x03
    2758:	8b 85       	ldd	r24, Y+11	; 0x0b
    275a:	83 30       	cpi	r24, 0x03	; 3
    275c:	49 f0       	breq	.+18     	; 0x2770 <_ZN7Sd2Card8readDataEmjjPh+0x70>
    275e:	03 2e       	mov	r0, r19
    2760:	39 e0       	ldi	r19, 0x09	; 9
    2762:	44 0f       	add	r20, r20
    2764:	55 1f       	adc	r21, r21
    2766:	66 1f       	adc	r22, r22
    2768:	77 1f       	adc	r23, r23
    276a:	3a 95       	dec	r19
    276c:	d1 f7       	brne	.-12     	; 0x2762 <_ZN7Sd2Card8readDataEmjjPh+0x62>
    276e:	30 2d       	mov	r19, r0
    2770:	9a 01       	movw	r18, r20
    2772:	ab 01       	movw	r20, r22
    2774:	61 e1       	ldi	r22, 0x11	; 17
    2776:	ce 01       	movw	r24, r28
    2778:	0e 94 23 12 	call	0x2446	; 0x2446 <_ZN7Sd2Card11cardCommandEhm>
    277c:	88 23       	and	r24, r24
    277e:	19 f0       	breq	.+6      	; 0x2786 <_ZN7Sd2Card8readDataEmjjPh+0x86>
    2780:	83 e0       	ldi	r24, 0x03	; 3
    2782:	8d 83       	std	Y+5, r24	; 0x05
    2784:	37 c0       	rjmp	.+110    	; 0x27f4 <_ZN7Sd2Card8readDataEmjjPh+0xf4>
    2786:	ce 01       	movw	r24, r28
    2788:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <_ZN7Sd2Card14waitStartBlockEv>
    278c:	88 23       	and	r24, r24
    278e:	91 f1       	breq	.+100    	; 0x27f4 <_ZN7Sd2Card8readDataEmjjPh+0xf4>
    2790:	18 86       	std	Y+8, r1	; 0x08
    2792:	1f 82       	std	Y+7, r1	; 0x07
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	8e 83       	std	Y+6, r24	; 0x06
    2798:	8f 81       	ldd	r24, Y+7	; 0x07
    279a:	98 85       	ldd	r25, Y+8	; 0x08
    279c:	8c 15       	cp	r24, r12
    279e:	9d 05       	cpc	r25, r13
    27a0:	40 f4       	brcc	.+16     	; 0x27b2 <_ZN7Sd2Card8readDataEmjjPh+0xb2>
    27a2:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZL6spiRecv>
    27a6:	8f 81       	ldd	r24, Y+7	; 0x07
    27a8:	98 85       	ldd	r25, Y+8	; 0x08
    27aa:	01 96       	adiw	r24, 0x01	; 1
    27ac:	98 87       	std	Y+8, r25	; 0x08
    27ae:	8f 83       	std	Y+7, r24	; 0x07
    27b0:	f3 cf       	rjmp	.-26     	; 0x2798 <_ZN7Sd2Card8readDataEmjjPh+0x98>
    27b2:	c1 2c       	mov	r12, r1
    27b4:	d1 2c       	mov	r13, r1
    27b6:	c0 16       	cp	r12, r16
    27b8:	d1 06       	cpc	r13, r17
    27ba:	58 f4       	brcc	.+22     	; 0x27d2 <_ZN7Sd2Card8readDataEmjjPh+0xd2>
    27bc:	57 01       	movw	r10, r14
    27be:	ac 0c       	add	r10, r12
    27c0:	bd 1c       	adc	r11, r13
    27c2:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZL6spiRecv>
    27c6:	f5 01       	movw	r30, r10
    27c8:	80 83       	st	Z, r24
    27ca:	ff ef       	ldi	r31, 0xFF	; 255
    27cc:	cf 1a       	sub	r12, r31
    27ce:	df 0a       	sbc	r13, r31
    27d0:	f2 cf       	rjmp	.-28     	; 0x27b6 <_ZN7Sd2Card8readDataEmjjPh+0xb6>
    27d2:	8f 81       	ldd	r24, Y+7	; 0x07
    27d4:	98 85       	ldd	r25, Y+8	; 0x08
    27d6:	08 0f       	add	r16, r24
    27d8:	19 1f       	adc	r17, r25
    27da:	18 87       	std	Y+8, r17	; 0x08
    27dc:	0f 83       	std	Y+7, r16	; 0x07
    27de:	89 85       	ldd	r24, Y+9	; 0x09
    27e0:	88 23       	and	r24, r24
    27e2:	19 f0       	breq	.+6      	; 0x27ea <_ZN7Sd2Card8readDataEmjjPh+0xea>
    27e4:	01 15       	cp	r16, r1
    27e6:	12 40       	sbci	r17, 0x02	; 2
    27e8:	60 f0       	brcs	.+24     	; 0x2802 <_ZN7Sd2Card8readDataEmjjPh+0x102>
    27ea:	ce 01       	movw	r24, r28
    27ec:	0e 94 a8 11 	call	0x2350	; 0x2350 <_ZN7Sd2Card7readEndEv>
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	08 c0       	rjmp	.+16     	; 0x2804 <_ZN7Sd2Card8readDataEmjjPh+0x104>
    27f4:	ce 01       	movw	r24, r28
    27f6:	0e 94 60 11 	call	0x22c0	; 0x22c0 <_ZN7Sd2Card14chipSelectHighEv>
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	03 c0       	rjmp	.+6      	; 0x2804 <_ZN7Sd2Card8readDataEmjjPh+0x104>
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	01 c0       	rjmp	.+2      	; 0x2804 <_ZN7Sd2Card8readDataEmjjPh+0x104>
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	df 91       	pop	r29
    2806:	cf 91       	pop	r28
    2808:	1f 91       	pop	r17
    280a:	0f 91       	pop	r16
    280c:	ff 90       	pop	r15
    280e:	ef 90       	pop	r14
    2810:	df 90       	pop	r13
    2812:	cf 90       	pop	r12
    2814:	bf 90       	pop	r11
    2816:	af 90       	pop	r10
    2818:	08 95       	ret

0000281a <_ZN7Sd2Card9readBlockEmPh>:
    281a:	ef 92       	push	r14
    281c:	ff 92       	push	r15
    281e:	0f 93       	push	r16
    2820:	1f 93       	push	r17
    2822:	79 01       	movw	r14, r18
    2824:	00 e0       	ldi	r16, 0x00	; 0
    2826:	12 e0       	ldi	r17, 0x02	; 2
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	0e 94 80 13 	call	0x2700	; 0x2700 <_ZN7Sd2Card8readDataEmjjPh>
    2830:	1f 91       	pop	r17
    2832:	0f 91       	pop	r16
    2834:	ff 90       	pop	r15
    2836:	ef 90       	pop	r14
    2838:	08 95       	ret

0000283a <_ZN7Sd2Card9writeDataEhPKh>:
    283a:	ef 92       	push	r14
    283c:	ff 92       	push	r15
    283e:	0f 93       	push	r16
    2840:	1f 93       	push	r17
    2842:	cf 93       	push	r28
    2844:	df 93       	push	r29
    2846:	7c 01       	movw	r14, r24
    2848:	86 2f       	mov	r24, r22
    284a:	8a 01       	movw	r16, r20
    284c:	0e 94 46 11 	call	0x228c	; 0x228c <_ZL7spiSendh>
    2850:	c0 e0       	ldi	r28, 0x00	; 0
    2852:	d0 e0       	ldi	r29, 0x00	; 0
    2854:	c1 15       	cp	r28, r1
    2856:	82 e0       	ldi	r24, 0x02	; 2
    2858:	d8 07       	cpc	r29, r24
    285a:	40 f4       	brcc	.+16     	; 0x286c <_ZN7Sd2Card9writeDataEhPKh+0x32>
    285c:	f8 01       	movw	r30, r16
    285e:	ec 0f       	add	r30, r28
    2860:	fd 1f       	adc	r31, r29
    2862:	80 81       	ld	r24, Z
    2864:	0e 94 46 11 	call	0x228c	; 0x228c <_ZL7spiSendh>
    2868:	21 96       	adiw	r28, 0x01	; 1
    286a:	f4 cf       	rjmp	.-24     	; 0x2854 <_ZN7Sd2Card9writeDataEhPKh+0x1a>
    286c:	8f ef       	ldi	r24, 0xFF	; 255
    286e:	0e 94 46 11 	call	0x228c	; 0x228c <_ZL7spiSendh>
    2872:	8f ef       	ldi	r24, 0xFF	; 255
    2874:	0e 94 46 11 	call	0x228c	; 0x228c <_ZL7spiSendh>
    2878:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZL6spiRecv>
    287c:	f7 01       	movw	r30, r14
    287e:	82 87       	std	Z+10, r24	; 0x0a
    2880:	8f 71       	andi	r24, 0x1F	; 31
    2882:	85 30       	cpi	r24, 0x05	; 5
    2884:	39 f0       	breq	.+14     	; 0x2894 <_ZN7Sd2Card9writeDataEhPKh+0x5a>
    2886:	81 e1       	ldi	r24, 0x11	; 17
    2888:	85 83       	std	Z+5, r24	; 0x05
    288a:	c7 01       	movw	r24, r14
    288c:	0e 94 60 11 	call	0x22c0	; 0x22c0 <_ZN7Sd2Card14chipSelectHighEv>
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	01 c0       	rjmp	.+2      	; 0x2896 <_ZN7Sd2Card9writeDataEhPKh+0x5c>
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	df 91       	pop	r29
    2898:	cf 91       	pop	r28
    289a:	1f 91       	pop	r17
    289c:	0f 91       	pop	r16
    289e:	ff 90       	pop	r15
    28a0:	ef 90       	pop	r14
    28a2:	08 95       	ret

000028a4 <_ZN7Sd2Card10writeBlockEmPKhh>:
    28a4:	ef 92       	push	r14
    28a6:	ff 92       	push	r15
    28a8:	0f 93       	push	r16
    28aa:	cf 93       	push	r28
    28ac:	df 93       	push	r29
    28ae:	ec 01       	movw	r28, r24
    28b0:	79 01       	movw	r14, r18
    28b2:	41 15       	cp	r20, r1
    28b4:	51 05       	cpc	r21, r1
    28b6:	61 05       	cpc	r22, r1
    28b8:	71 05       	cpc	r23, r1
    28ba:	19 f4       	brne	.+6      	; 0x28c2 <_ZN7Sd2Card10writeBlockEmPKhh+0x1e>
    28bc:	82 e1       	ldi	r24, 0x12	; 18
    28be:	8d 83       	std	Y+5, r24	; 0x05
    28c0:	45 c0       	rjmp	.+138    	; 0x294c <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    28c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    28c4:	83 30       	cpi	r24, 0x03	; 3
    28c6:	49 f0       	breq	.+18     	; 0x28da <_ZN7Sd2Card10writeBlockEmPKhh+0x36>
    28c8:	03 2e       	mov	r0, r19
    28ca:	39 e0       	ldi	r19, 0x09	; 9
    28cc:	44 0f       	add	r20, r20
    28ce:	55 1f       	adc	r21, r21
    28d0:	66 1f       	adc	r22, r22
    28d2:	77 1f       	adc	r23, r23
    28d4:	3a 95       	dec	r19
    28d6:	d1 f7       	brne	.-12     	; 0x28cc <_ZN7Sd2Card10writeBlockEmPKhh+0x28>
    28d8:	30 2d       	mov	r19, r0
    28da:	9a 01       	movw	r18, r20
    28dc:	ab 01       	movw	r20, r22
    28de:	68 e1       	ldi	r22, 0x18	; 24
    28e0:	ce 01       	movw	r24, r28
    28e2:	0e 94 23 12 	call	0x2446	; 0x2446 <_ZN7Sd2Card11cardCommandEhm>
    28e6:	88 23       	and	r24, r24
    28e8:	19 f0       	breq	.+6      	; 0x28f0 <_ZN7Sd2Card10writeBlockEmPKhh+0x4c>
    28ea:	84 e0       	ldi	r24, 0x04	; 4
    28ec:	8d 83       	std	Y+5, r24	; 0x05
    28ee:	2e c0       	rjmp	.+92     	; 0x294c <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    28f0:	a7 01       	movw	r20, r14
    28f2:	6e ef       	ldi	r22, 0xFE	; 254
    28f4:	ce 01       	movw	r24, r28
    28f6:	0e 94 1d 14 	call	0x283a	; 0x283a <_ZN7Sd2Card9writeDataEhPKh>
    28fa:	88 23       	and	r24, r24
    28fc:	39 f1       	breq	.+78     	; 0x294c <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    28fe:	00 23       	and	r16, r16
    2900:	01 f1       	breq	.+64     	; 0x2942 <_ZN7Sd2Card10writeBlockEmPKhh+0x9e>
    2902:	68 e5       	ldi	r22, 0x58	; 88
    2904:	72 e0       	ldi	r23, 0x02	; 2
    2906:	ce 01       	movw	r24, r28
    2908:	0e 94 08 12 	call	0x2410	; 0x2410 <_ZN7Sd2Card11waitNotBusyEj>
    290c:	81 11       	cpse	r24, r1
    290e:	03 c0       	rjmp	.+6      	; 0x2916 <_ZN7Sd2Card10writeBlockEmPKhh+0x72>
    2910:	85 e1       	ldi	r24, 0x15	; 21
    2912:	8d 83       	std	Y+5, r24	; 0x05
    2914:	1b c0       	rjmp	.+54     	; 0x294c <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	a9 01       	movw	r20, r18
    291c:	6d e0       	ldi	r22, 0x0D	; 13
    291e:	ce 01       	movw	r24, r28
    2920:	0e 94 23 12 	call	0x2446	; 0x2446 <_ZN7Sd2Card11cardCommandEhm>
    2924:	81 11       	cpse	r24, r1
    2926:	05 c0       	rjmp	.+10     	; 0x2932 <_ZN7Sd2Card10writeBlockEmPKhh+0x8e>
    2928:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZL6spiRecv>
    292c:	81 11       	cpse	r24, r1
    292e:	03 c0       	rjmp	.+6      	; 0x2936 <_ZN7Sd2Card10writeBlockEmPKhh+0x92>
    2930:	03 c0       	rjmp	.+6      	; 0x2938 <_ZN7Sd2Card10writeBlockEmPKhh+0x94>
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	01 c0       	rjmp	.+2      	; 0x2938 <_ZN7Sd2Card10writeBlockEmPKhh+0x94>
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	88 23       	and	r24, r24
    293a:	19 f0       	breq	.+6      	; 0x2942 <_ZN7Sd2Card10writeBlockEmPKhh+0x9e>
    293c:	84 e1       	ldi	r24, 0x14	; 20
    293e:	8d 83       	std	Y+5, r24	; 0x05
    2940:	05 c0       	rjmp	.+10     	; 0x294c <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    2942:	ce 01       	movw	r24, r28
    2944:	0e 94 60 11 	call	0x22c0	; 0x22c0 <_ZN7Sd2Card14chipSelectHighEv>
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	04 c0       	rjmp	.+8      	; 0x2954 <_ZN7Sd2Card10writeBlockEmPKhh+0xb0>
    294c:	ce 01       	movw	r24, r28
    294e:	0e 94 60 11 	call	0x22c0	; 0x22c0 <_ZN7Sd2Card14chipSelectHighEv>
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	df 91       	pop	r29
    2956:	cf 91       	pop	r28
    2958:	0f 91       	pop	r16
    295a:	ff 90       	pop	r15
    295c:	ef 90       	pop	r14
    295e:	08 95       	ret

00002960 <_ZN7Sd2Card6isBusyEv>:
/** Check if the SD card is busy

  \return The value one, true, is returned when is busy and
   the value zero, false, is returned for when is NOT busy.
*/
uint8_t Sd2Card::isBusy(void) {
    2960:	1f 93       	push	r17
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
    2966:	ec 01       	movw	r28, r24
  chipSelectLow();
    2968:	0e 94 7e 11 	call	0x22fc	; 0x22fc <_ZN7Sd2Card13chipSelectLowEv>
  byte b = spiRec();
    296c:	0e 94 4d 11 	call	0x229a	; 0x229a <_ZL6spiRecv>
    2970:	18 2f       	mov	r17, r24
  chipSelectHigh();
    2972:	ce 01       	movw	r24, r28
    2974:	0e 94 60 11 	call	0x22c0	; 0x22c0 <_ZN7Sd2Card14chipSelectHighEv>

  return (b != 0XFF);
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	1f 3f       	cpi	r17, 0xFF	; 255
    297c:	09 f4       	brne	.+2      	; 0x2980 <_ZN7Sd2Card6isBusyEv+0x20>
    297e:	80 e0       	ldi	r24, 0x00	; 0
}
    2980:	df 91       	pop	r29
    2982:	cf 91       	pop	r28
    2984:	1f 91       	pop	r17
    2986:	08 95       	ret

00002988 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    2988:	6f ef       	ldi	r22, 0xFF	; 255
    298a:	7f ef       	ldi	r23, 0xFF	; 255
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	0e 94 55 11 	call	0x22aa	; 0x22aa <_Z41__static_initialization_and_destruction_0ii>
    2994:	08 95       	ret

00002996 <_ZN6SdFile10addClusterEv>:
  // don't try to delete root
  if (isRoot()) {
    return true;
  }
  return rmDir();
}
    2996:	cf 93       	push	r28
    2998:	df 93       	push	r29
    299a:	ec 01       	movw	r28, r24
    299c:	9c 01       	movw	r18, r24
    299e:	2a 5f       	subi	r18, 0xFA	; 250
    29a0:	3f 4f       	sbci	r19, 0xFF	; 255
    29a2:	41 e0       	ldi	r20, 0x01	; 1
    29a4:	50 e0       	ldi	r21, 0x00	; 0
    29a6:	60 e0       	ldi	r22, 0x00	; 0
    29a8:	70 e0       	ldi	r23, 0x00	; 0
    29aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29ae:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <_ZN8SdVolume15allocContiguousEmPm>
    29b2:	88 23       	and	r24, r24
    29b4:	b9 f0       	breq	.+46     	; 0x29e4 <_ZN6SdFile10addClusterEv+0x4e>
    29b6:	8f 89       	ldd	r24, Y+23	; 0x17
    29b8:	98 8d       	ldd	r25, Y+24	; 0x18
    29ba:	a9 8d       	ldd	r26, Y+25	; 0x19
    29bc:	ba 8d       	ldd	r27, Y+26	; 0x1a
    29be:	89 2b       	or	r24, r25
    29c0:	8a 2b       	or	r24, r26
    29c2:	8b 2b       	or	r24, r27
    29c4:	59 f4       	brne	.+22     	; 0x29dc <_ZN6SdFile10addClusterEv+0x46>
    29c6:	8e 81       	ldd	r24, Y+6	; 0x06
    29c8:	9f 81       	ldd	r25, Y+7	; 0x07
    29ca:	a8 85       	ldd	r26, Y+8	; 0x08
    29cc:	b9 85       	ldd	r27, Y+9	; 0x09
    29ce:	8f 8b       	std	Y+23, r24	; 0x17
    29d0:	98 8f       	std	Y+24, r25	; 0x18
    29d2:	a9 8f       	std	Y+25, r26	; 0x19
    29d4:	ba 8f       	std	Y+26, r27	; 0x1a
    29d6:	8c 81       	ldd	r24, Y+4	; 0x04
    29d8:	80 68       	ori	r24, 0x80	; 128
    29da:	8c 83       	std	Y+4, r24	; 0x04
    29dc:	8c 81       	ldd	r24, Y+4	; 0x04
    29de:	80 62       	ori	r24, 0x20	; 32
    29e0:	8c 83       	std	Y+4, r24	; 0x04
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	df 91       	pop	r29
    29e6:	cf 91       	pop	r28
    29e8:	08 95       	ret

000029ea <_ZN6SdFile13addDirClusterEv>:
    29ea:	cf 92       	push	r12
    29ec:	df 92       	push	r13
    29ee:	ef 92       	push	r14
    29f0:	ff 92       	push	r15
    29f2:	0f 93       	push	r16
    29f4:	1f 93       	push	r17
    29f6:	cf 93       	push	r28
    29f8:	8c 01       	movw	r16, r24
    29fa:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN6SdFile10addClusterEv>
    29fe:	88 23       	and	r24, r24
    2a00:	09 f4       	brne	.+2      	; 0x2a04 <_ZN6SdFile13addDirClusterEv+0x1a>
    2a02:	54 c0       	rjmp	.+168    	; 0x2aac <_ZN6SdFile13addDirClusterEv+0xc2>
    2a04:	d8 01       	movw	r26, r16
    2a06:	16 96       	adiw	r26, 0x06	; 6
    2a08:	cd 90       	ld	r12, X+
    2a0a:	dd 90       	ld	r13, X+
    2a0c:	ed 90       	ld	r14, X+
    2a0e:	fc 90       	ld	r15, X
    2a10:	19 97       	sbiw	r26, 0x09	; 9
    2a12:	5b 96       	adiw	r26, 0x1b	; 27
    2a14:	ed 91       	ld	r30, X+
    2a16:	fc 91       	ld	r31, X
    2a18:	5c 97       	sbiw	r26, 0x1c	; 28
    2a1a:	86 85       	ldd	r24, Z+14	; 0x0e
    2a1c:	97 85       	ldd	r25, Z+15	; 0x0f
    2a1e:	a0 89       	ldd	r26, Z+16	; 0x10
    2a20:	b1 89       	ldd	r27, Z+17	; 0x11
    2a22:	22 e0       	ldi	r18, 0x02	; 2
    2a24:	c2 1a       	sub	r12, r18
    2a26:	d1 08       	sbc	r13, r1
    2a28:	e1 08       	sbc	r14, r1
    2a2a:	f1 08       	sbc	r15, r1
    2a2c:	05 84       	ldd	r0, Z+13	; 0x0d
    2a2e:	04 c0       	rjmp	.+8      	; 0x2a38 <_ZN6SdFile13addDirClusterEv+0x4e>
    2a30:	cc 0c       	add	r12, r12
    2a32:	dd 1c       	adc	r13, r13
    2a34:	ee 1c       	adc	r14, r14
    2a36:	ff 1c       	adc	r15, r15
    2a38:	0a 94       	dec	r0
    2a3a:	d2 f7       	brpl	.-12     	; 0x2a30 <_ZN6SdFile13addDirClusterEv+0x46>
    2a3c:	c8 0e       	add	r12, r24
    2a3e:	d9 1e       	adc	r13, r25
    2a40:	ea 1e       	adc	r14, r26
    2a42:	fb 1e       	adc	r15, r27
    2a44:	c4 81       	ldd	r28, Z+4	; 0x04
    2a46:	cc 23       	and	r28, r28
    2a48:	91 f0       	breq	.+36     	; 0x2a6e <_ZN6SdFile13addDirClusterEv+0x84>
    2a4a:	d7 01       	movw	r26, r14
    2a4c:	c6 01       	movw	r24, r12
    2a4e:	8c 0f       	add	r24, r28
    2a50:	91 1d       	adc	r25, r1
    2a52:	a1 1d       	adc	r26, r1
    2a54:	b1 1d       	adc	r27, r1
    2a56:	bc 01       	movw	r22, r24
    2a58:	cd 01       	movw	r24, r26
    2a5a:	61 50       	subi	r22, 0x01	; 1
    2a5c:	71 09       	sbc	r23, r1
    2a5e:	81 09       	sbc	r24, r1
    2a60:	91 09       	sbc	r25, r1
    2a62:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <_ZN8SdVolume14cacheZeroBlockEm>
    2a66:	88 23       	and	r24, r24
    2a68:	09 f1       	breq	.+66     	; 0x2aac <_ZN6SdFile13addDirClusterEv+0xc2>
    2a6a:	c1 50       	subi	r28, 0x01	; 1
    2a6c:	ec cf       	rjmp	.-40     	; 0x2a46 <_ZN6SdFile13addDirClusterEv+0x5c>
    2a6e:	d8 01       	movw	r26, r16
    2a70:	5b 96       	adiw	r26, 0x1b	; 27
    2a72:	ed 91       	ld	r30, X+
    2a74:	fc 91       	ld	r31, X
    2a76:	5c 97       	sbiw	r26, 0x1c	; 28
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	92 e0       	ldi	r25, 0x02	; 2
    2a7c:	a0 e0       	ldi	r26, 0x00	; 0
    2a7e:	b0 e0       	ldi	r27, 0x00	; 0
    2a80:	05 84       	ldd	r0, Z+13	; 0x0d
    2a82:	04 c0       	rjmp	.+8      	; 0x2a8c <_ZN6SdFile13addDirClusterEv+0xa2>
    2a84:	88 0f       	add	r24, r24
    2a86:	99 1f       	adc	r25, r25
    2a88:	aa 1f       	adc	r26, r26
    2a8a:	bb 1f       	adc	r27, r27
    2a8c:	0a 94       	dec	r0
    2a8e:	d2 f7       	brpl	.-12     	; 0x2a84 <_ZN6SdFile13addDirClusterEv+0x9a>
    2a90:	f8 01       	movw	r30, r16
    2a92:	43 89       	ldd	r20, Z+19	; 0x13
    2a94:	54 89       	ldd	r21, Z+20	; 0x14
    2a96:	65 89       	ldd	r22, Z+21	; 0x15
    2a98:	76 89       	ldd	r23, Z+22	; 0x16
    2a9a:	84 0f       	add	r24, r20
    2a9c:	95 1f       	adc	r25, r21
    2a9e:	a6 1f       	adc	r26, r22
    2aa0:	b7 1f       	adc	r27, r23
    2aa2:	83 8b       	std	Z+19, r24	; 0x13
    2aa4:	94 8b       	std	Z+20, r25	; 0x14
    2aa6:	a5 8b       	std	Z+21, r26	; 0x15
    2aa8:	b6 8b       	std	Z+22, r27	; 0x16
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	cf 91       	pop	r28
    2aae:	1f 91       	pop	r17
    2ab0:	0f 91       	pop	r16
    2ab2:	ff 90       	pop	r15
    2ab4:	ef 90       	pop	r14
    2ab6:	df 90       	pop	r13
    2ab8:	cf 90       	pop	r12
    2aba:	08 95       	ret

00002abc <_ZN6SdFile13cacheDirEntryEh>:
    2abc:	cf 93       	push	r28
    2abe:	df 93       	push	r29
    2ac0:	ec 01       	movw	r28, r24
    2ac2:	46 2f       	mov	r20, r22
    2ac4:	6e 85       	ldd	r22, Y+14	; 0x0e
    2ac6:	7f 85       	ldd	r23, Y+15	; 0x0f
    2ac8:	88 89       	ldd	r24, Y+16	; 0x10
    2aca:	99 89       	ldd	r25, Y+17	; 0x11
    2acc:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <_ZN8SdVolume13cacheRawBlockEmh>
    2ad0:	88 23       	and	r24, r24
    2ad2:	41 f0       	breq	.+16     	; 0x2ae4 <_ZN6SdFile13cacheDirEntryEh+0x28>
    2ad4:	8a 89       	ldd	r24, Y+18	; 0x12
    2ad6:	20 e2       	ldi	r18, 0x20	; 32
    2ad8:	82 9f       	mul	r24, r18
    2ada:	c0 01       	movw	r24, r0
    2adc:	11 24       	eor	r1, r1
    2ade:	89 5b       	subi	r24, 0xB9	; 185
    2ae0:	9b 4f       	sbci	r25, 0xFB	; 251
    2ae2:	02 c0       	rjmp	.+4      	; 0x2ae8 <_ZN6SdFile13cacheDirEntryEh+0x2c>
    2ae4:	80 e0       	ldi	r24, 0x00	; 0
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	df 91       	pop	r29
    2aea:	cf 91       	pop	r28
    2aec:	08 95       	ret

00002aee <_ZN6SdFile10make83NameEPKcPh>:
    2aee:	cf 93       	push	r28
    2af0:	df 93       	push	r29
    2af2:	dc 01       	movw	r26, r24
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	9b 30       	cpi	r25, 0x0B	; 11
    2af8:	48 f4       	brcc	.+18     	; 0x2b0c <_ZN6SdFile10make83NameEPKcPh+0x1e>
    2afa:	fb 01       	movw	r30, r22
    2afc:	e9 0f       	add	r30, r25
    2afe:	f1 1d       	adc	r31, r1
    2b00:	20 e2       	ldi	r18, 0x20	; 32
    2b02:	20 83       	st	Z, r18
    2b04:	9f 5f       	subi	r25, 0xFF	; 255
    2b06:	f7 cf       	rjmp	.-18     	; 0x2af6 <_ZN6SdFile10make83NameEPKcPh+0x8>
    2b08:	de 01       	movw	r26, r28
    2b0a:	02 c0       	rjmp	.+4      	; 0x2b10 <_ZN6SdFile10make83NameEPKcPh+0x22>
    2b0c:	40 e0       	ldi	r20, 0x00	; 0
    2b0e:	57 e0       	ldi	r21, 0x07	; 7
    2b10:	ed 01       	movw	r28, r26
    2b12:	21 96       	adiw	r28, 0x01	; 1
    2b14:	9c 91       	ld	r25, X
    2b16:	99 23       	and	r25, r25
    2b18:	31 f1       	breq	.+76     	; 0x2b66 <_ZN6SdFile10make83NameEPKcPh+0x78>
    2b1a:	9e 32       	cpi	r25, 0x2E	; 46
    2b1c:	29 f4       	brne	.+10     	; 0x2b28 <_ZN6SdFile10make83NameEPKcPh+0x3a>
    2b1e:	5a 30       	cpi	r21, 0x0A	; 10
    2b20:	49 f1       	breq	.+82     	; 0x2b74 <_ZN6SdFile10make83NameEPKcPh+0x86>
    2b22:	48 e0       	ldi	r20, 0x08	; 8
    2b24:	5a e0       	ldi	r21, 0x0A	; 10
    2b26:	f0 cf       	rjmp	.-32     	; 0x2b08 <_ZN6SdFile10make83NameEPKcPh+0x1a>
    2b28:	eb e4       	ldi	r30, 0x4B	; 75
    2b2a:	f2 e0       	ldi	r31, 0x02	; 2
    2b2c:	9f 01       	movw	r18, r30
    2b2e:	2f 5f       	subi	r18, 0xFF	; 255
    2b30:	3f 4f       	sbci	r19, 0xFF	; 255
    2b32:	84 91       	lpm	r24, Z
    2b34:	88 23       	and	r24, r24
    2b36:	21 f0       	breq	.+8      	; 0x2b40 <_ZN6SdFile10make83NameEPKcPh+0x52>
    2b38:	f9 01       	movw	r30, r18
    2b3a:	98 13       	cpse	r25, r24
    2b3c:	f7 cf       	rjmp	.-18     	; 0x2b2c <_ZN6SdFile10make83NameEPKcPh+0x3e>
    2b3e:	1c c0       	rjmp	.+56     	; 0x2b78 <_ZN6SdFile10make83NameEPKcPh+0x8a>
    2b40:	54 17       	cp	r21, r20
    2b42:	e0 f0       	brcs	.+56     	; 0x2b7c <_ZN6SdFile10make83NameEPKcPh+0x8e>
    2b44:	91 32       	cpi	r25, 0x21	; 33
    2b46:	e0 f0       	brcs	.+56     	; 0x2b80 <_ZN6SdFile10make83NameEPKcPh+0x92>
    2b48:	9f 37       	cpi	r25, 0x7F	; 127
    2b4a:	e0 f4       	brcc	.+56     	; 0x2b84 <_ZN6SdFile10make83NameEPKcPh+0x96>
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	84 0f       	add	r24, r20
    2b50:	fb 01       	movw	r30, r22
    2b52:	e4 0f       	add	r30, r20
    2b54:	f1 1d       	adc	r31, r1
    2b56:	2f e9       	ldi	r18, 0x9F	; 159
    2b58:	29 0f       	add	r18, r25
    2b5a:	2a 31       	cpi	r18, 0x1A	; 26
    2b5c:	08 f4       	brcc	.+2      	; 0x2b60 <_ZN6SdFile10make83NameEPKcPh+0x72>
    2b5e:	90 52       	subi	r25, 0x20	; 32
    2b60:	90 83       	st	Z, r25
    2b62:	48 2f       	mov	r20, r24
    2b64:	d1 cf       	rjmp	.-94     	; 0x2b08 <_ZN6SdFile10make83NameEPKcPh+0x1a>
    2b66:	fb 01       	movw	r30, r22
    2b68:	90 81       	ld	r25, Z
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	90 32       	cpi	r25, 0x20	; 32
    2b6e:	59 f4       	brne	.+22     	; 0x2b86 <_ZN6SdFile10make83NameEPKcPh+0x98>
    2b70:	80 e0       	ldi	r24, 0x00	; 0
    2b72:	09 c0       	rjmp	.+18     	; 0x2b86 <_ZN6SdFile10make83NameEPKcPh+0x98>
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	07 c0       	rjmp	.+14     	; 0x2b86 <_ZN6SdFile10make83NameEPKcPh+0x98>
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	05 c0       	rjmp	.+10     	; 0x2b86 <_ZN6SdFile10make83NameEPKcPh+0x98>
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	03 c0       	rjmp	.+6      	; 0x2b86 <_ZN6SdFile10make83NameEPKcPh+0x98>
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	01 c0       	rjmp	.+2      	; 0x2b86 <_ZN6SdFile10make83NameEPKcPh+0x98>
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	df 91       	pop	r29
    2b88:	cf 91       	pop	r28
    2b8a:	08 95       	ret

00002b8c <_ZN6SdFile8openRootEP8SdVolume>:
    2b8c:	0f 93       	push	r16
    2b8e:	1f 93       	push	r17
    2b90:	cf 93       	push	r28
    2b92:	df 93       	push	r29
    2b94:	ec 01       	movw	r28, r24
    2b96:	8d 81       	ldd	r24, Y+5	; 0x05
    2b98:	81 11       	cpse	r24, r1
    2b9a:	4f c0       	rjmp	.+158    	; 0x2c3a <_ZN6SdFile8openRootEP8SdVolume+0xae>
    2b9c:	8b 01       	movw	r16, r22
    2b9e:	fb 01       	movw	r30, r22
    2ba0:	97 89       	ldd	r25, Z+23	; 0x17
    2ba2:	90 31       	cpi	r25, 0x10	; 16
    2ba4:	19 f5       	brne	.+70     	; 0x2bec <_ZN6SdFile8openRootEP8SdVolume+0x60>
    2ba6:	82 e0       	ldi	r24, 0x02	; 2
    2ba8:	8d 83       	std	Y+5, r24	; 0x05
    2baa:	1f 8a       	std	Y+23, r1	; 0x17
    2bac:	18 8e       	std	Y+24, r1	; 0x18
    2bae:	19 8e       	std	Y+25, r1	; 0x19
    2bb0:	1a 8e       	std	Y+26, r1	; 0x1a
    2bb2:	80 8d       	ldd	r24, Z+24	; 0x18
    2bb4:	91 8d       	ldd	r25, Z+25	; 0x19
    2bb6:	a0 e0       	ldi	r26, 0x00	; 0
    2bb8:	b0 e0       	ldi	r27, 0x00	; 0
    2bba:	88 0f       	add	r24, r24
    2bbc:	99 1f       	adc	r25, r25
    2bbe:	aa 1f       	adc	r26, r26
    2bc0:	bb 1f       	adc	r27, r27
    2bc2:	88 0f       	add	r24, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	aa 1f       	adc	r26, r26
    2bc8:	bb 1f       	adc	r27, r27
    2bca:	88 0f       	add	r24, r24
    2bcc:	99 1f       	adc	r25, r25
    2bce:	aa 1f       	adc	r26, r26
    2bd0:	bb 1f       	adc	r27, r27
    2bd2:	88 0f       	add	r24, r24
    2bd4:	99 1f       	adc	r25, r25
    2bd6:	aa 1f       	adc	r26, r26
    2bd8:	bb 1f       	adc	r27, r27
    2bda:	88 0f       	add	r24, r24
    2bdc:	99 1f       	adc	r25, r25
    2bde:	aa 1f       	adc	r26, r26
    2be0:	bb 1f       	adc	r27, r27
    2be2:	8b 8b       	std	Y+19, r24	; 0x13
    2be4:	9c 8b       	std	Y+20, r25	; 0x14
    2be6:	ad 8b       	std	Y+21, r26	; 0x15
    2be8:	be 8b       	std	Y+22, r27	; 0x16
    2bea:	15 c0       	rjmp	.+42     	; 0x2c16 <_ZN6SdFile8openRootEP8SdVolume+0x8a>
    2bec:	90 32       	cpi	r25, 0x20	; 32
    2bee:	31 f5       	brne	.+76     	; 0x2c3c <_ZN6SdFile8openRootEP8SdVolume+0xb0>
    2bf0:	83 e0       	ldi	r24, 0x03	; 3
    2bf2:	8d 83       	std	Y+5, r24	; 0x05
    2bf4:	fb 01       	movw	r30, r22
    2bf6:	42 8d       	ldd	r20, Z+26	; 0x1a
    2bf8:	53 8d       	ldd	r21, Z+27	; 0x1b
    2bfa:	64 8d       	ldd	r22, Z+28	; 0x1c
    2bfc:	75 8d       	ldd	r23, Z+29	; 0x1d
    2bfe:	4f 8b       	std	Y+23, r20	; 0x17
    2c00:	58 8f       	std	Y+24, r21	; 0x18
    2c02:	69 8f       	std	Y+25, r22	; 0x19
    2c04:	7a 8f       	std	Y+26, r23	; 0x1a
    2c06:	9e 01       	movw	r18, r28
    2c08:	2d 5e       	subi	r18, 0xED	; 237
    2c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c0c:	c8 01       	movw	r24, r16
    2c0e:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <_ZNK8SdVolume9chainSizeEmPm>
    2c12:	88 23       	and	r24, r24
    2c14:	99 f0       	breq	.+38     	; 0x2c3c <_ZN6SdFile8openRootEP8SdVolume+0xb0>
    2c16:	1c 8f       	std	Y+28, r17	; 0x1c
    2c18:	0b 8f       	std	Y+27, r16	; 0x1b
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	8c 83       	std	Y+4, r24	; 0x04
    2c1e:	1e 82       	std	Y+6, r1	; 0x06
    2c20:	1f 82       	std	Y+7, r1	; 0x07
    2c22:	18 86       	std	Y+8, r1	; 0x08
    2c24:	19 86       	std	Y+9, r1	; 0x09
    2c26:	1a 86       	std	Y+10, r1	; 0x0a
    2c28:	1b 86       	std	Y+11, r1	; 0x0b
    2c2a:	1c 86       	std	Y+12, r1	; 0x0c
    2c2c:	1d 86       	std	Y+13, r1	; 0x0d
    2c2e:	1e 86       	std	Y+14, r1	; 0x0e
    2c30:	1f 86       	std	Y+15, r1	; 0x0f
    2c32:	18 8a       	std	Y+16, r1	; 0x10
    2c34:	19 8a       	std	Y+17, r1	; 0x11
    2c36:	1a 8a       	std	Y+18, r1	; 0x12
    2c38:	01 c0       	rjmp	.+2      	; 0x2c3c <_ZN6SdFile8openRootEP8SdVolume+0xb0>
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	df 91       	pop	r29
    2c3e:	cf 91       	pop	r28
    2c40:	1f 91       	pop	r17
    2c42:	0f 91       	pop	r16
    2c44:	08 95       	ret

00002c46 <_ZN6SdFile4readEPvj>:
    2c46:	3f 92       	push	r3
    2c48:	4f 92       	push	r4
    2c4a:	5f 92       	push	r5
    2c4c:	6f 92       	push	r6
    2c4e:	7f 92       	push	r7
    2c50:	8f 92       	push	r8
    2c52:	9f 92       	push	r9
    2c54:	af 92       	push	r10
    2c56:	bf 92       	push	r11
    2c58:	cf 92       	push	r12
    2c5a:	df 92       	push	r13
    2c5c:	ef 92       	push	r14
    2c5e:	ff 92       	push	r15
    2c60:	0f 93       	push	r16
    2c62:	1f 93       	push	r17
    2c64:	cf 93       	push	r28
    2c66:	df 93       	push	r29
    2c68:	00 d0       	rcall	.+0      	; 0x2c6a <_ZN6SdFile4readEPvj+0x24>
    2c6a:	00 d0       	rcall	.+0      	; 0x2c6c <_ZN6SdFile4readEPvj+0x26>
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
    2c70:	4c 01       	movw	r8, r24
    2c72:	6b 01       	movw	r12, r22
    2c74:	5a 83       	std	Y+2, r21	; 0x02
    2c76:	49 83       	std	Y+1, r20	; 0x01
    2c78:	fc 01       	movw	r30, r24
    2c7a:	85 81       	ldd	r24, Z+5	; 0x05
    2c7c:	88 23       	and	r24, r24
    2c7e:	31 f0       	breq	.+12     	; 0x2c8c <_ZN6SdFile4readEPvj+0x46>
    2c80:	84 81       	ldd	r24, Z+4	; 0x04
    2c82:	80 fd       	sbrc	r24, 0
    2c84:	06 c0       	rjmp	.+12     	; 0x2c92 <_ZN6SdFile4readEPvj+0x4c>
    2c86:	33 24       	eor	r3, r3
    2c88:	33 94       	inc	r3
    2c8a:	04 c0       	rjmp	.+8      	; 0x2c94 <_ZN6SdFile4readEPvj+0x4e>
    2c8c:	33 24       	eor	r3, r3
    2c8e:	33 94       	inc	r3
    2c90:	01 c0       	rjmp	.+2      	; 0x2c94 <_ZN6SdFile4readEPvj+0x4e>
    2c92:	31 2c       	mov	r3, r1
    2c94:	31 10       	cpse	r3, r1
    2c96:	05 c1       	rjmp	.+522    	; 0x2ea2 <_ZN6SdFile4readEPvj+0x25c>
    2c98:	09 81       	ldd	r16, Y+1	; 0x01
    2c9a:	1a 81       	ldd	r17, Y+2	; 0x02
    2c9c:	c8 01       	movw	r24, r16
    2c9e:	a0 e0       	ldi	r26, 0x00	; 0
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	f4 01       	movw	r30, r8
    2ca4:	03 89       	ldd	r16, Z+19	; 0x13
    2ca6:	14 89       	ldd	r17, Z+20	; 0x14
    2ca8:	25 89       	ldd	r18, Z+21	; 0x15
    2caa:	36 89       	ldd	r19, Z+22	; 0x16
    2cac:	42 85       	ldd	r20, Z+10	; 0x0a
    2cae:	53 85       	ldd	r21, Z+11	; 0x0b
    2cb0:	64 85       	ldd	r22, Z+12	; 0x0c
    2cb2:	75 85       	ldd	r23, Z+13	; 0x0d
    2cb4:	28 01       	movw	r4, r16
    2cb6:	39 01       	movw	r6, r18
    2cb8:	44 1a       	sub	r4, r20
    2cba:	55 0a       	sbc	r5, r21
    2cbc:	66 0a       	sbc	r6, r22
    2cbe:	77 0a       	sbc	r7, r23
    2cc0:	48 16       	cp	r4, r24
    2cc2:	59 06       	cpc	r5, r25
    2cc4:	6a 06       	cpc	r6, r26
    2cc6:	7b 06       	cpc	r7, r27
    2cc8:	28 f4       	brcc	.+10     	; 0x2cd4 <_ZN6SdFile4readEPvj+0x8e>
    2cca:	c8 01       	movw	r24, r16
    2ccc:	84 1b       	sub	r24, r20
    2cce:	95 0b       	sbc	r25, r21
    2cd0:	9a 83       	std	Y+2, r25	; 0x02
    2cd2:	89 83       	std	Y+1, r24	; 0x01
    2cd4:	69 80       	ldd	r6, Y+1	; 0x01
    2cd6:	7a 80       	ldd	r7, Y+2	; 0x02
    2cd8:	61 14       	cp	r6, r1
    2cda:	71 04       	cpc	r7, r1
    2cdc:	09 f4       	brne	.+2      	; 0x2ce0 <_ZN6SdFile4readEPvj+0x9a>
    2cde:	de c0       	rjmp	.+444    	; 0x2e9c <_ZN6SdFile4readEPvj+0x256>
    2ce0:	f4 01       	movw	r30, r8
    2ce2:	82 85       	ldd	r24, Z+10	; 0x0a
    2ce4:	93 85       	ldd	r25, Z+11	; 0x0b
    2ce6:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ce8:	b5 85       	ldd	r27, Z+13	; 0x0d
    2cea:	2c 01       	movw	r4, r24
    2cec:	f1 e0       	ldi	r31, 0x01	; 1
    2cee:	5f 22       	and	r5, r31
    2cf0:	f4 01       	movw	r30, r8
    2cf2:	25 81       	ldd	r18, Z+5	; 0x05
    2cf4:	22 30       	cpi	r18, 0x02	; 2
    2cf6:	c9 f4       	brne	.+50     	; 0x2d2a <_ZN6SdFile4readEPvj+0xe4>
    2cf8:	23 8d       	ldd	r18, Z+27	; 0x1b
    2cfa:	34 8d       	ldd	r19, Z+28	; 0x1c
    2cfc:	f9 01       	movw	r30, r18
    2cfe:	42 8d       	ldd	r20, Z+26	; 0x1a
    2d00:	53 8d       	ldd	r21, Z+27	; 0x1b
    2d02:	64 8d       	ldd	r22, Z+28	; 0x1c
    2d04:	75 8d       	ldd	r23, Z+29	; 0x1d
    2d06:	07 2e       	mov	r0, r23
    2d08:	79 e0       	ldi	r23, 0x09	; 9
    2d0a:	b6 95       	lsr	r27
    2d0c:	a7 95       	ror	r26
    2d0e:	97 95       	ror	r25
    2d10:	87 95       	ror	r24
    2d12:	7a 95       	dec	r23
    2d14:	d1 f7       	brne	.-12     	; 0x2d0a <_ZN6SdFile4readEPvj+0xc4>
    2d16:	70 2d       	mov	r23, r0
    2d18:	8a 01       	movw	r16, r20
    2d1a:	9b 01       	movw	r18, r22
    2d1c:	08 0f       	add	r16, r24
    2d1e:	19 1f       	adc	r17, r25
    2d20:	2a 1f       	adc	r18, r26
    2d22:	3b 1f       	adc	r19, r27
    2d24:	c9 01       	movw	r24, r18
    2d26:	b8 01       	movw	r22, r16
    2d28:	54 c0       	rjmp	.+168    	; 0x2dd2 <_ZN6SdFile4readEPvj+0x18c>
    2d2a:	f4 01       	movw	r30, r8
    2d2c:	03 8d       	ldd	r16, Z+27	; 0x1b
    2d2e:	14 8d       	ldd	r17, Z+28	; 0x1c
    2d30:	f8 01       	movw	r30, r16
    2d32:	b4 80       	ldd	r11, Z+4	; 0x04
    2d34:	ba 94       	dec	r11
    2d36:	ac 01       	movw	r20, r24
    2d38:	bd 01       	movw	r22, r26
    2d3a:	03 2e       	mov	r0, r19
    2d3c:	39 e0       	ldi	r19, 0x09	; 9
    2d3e:	76 95       	lsr	r23
    2d40:	67 95       	ror	r22
    2d42:	57 95       	ror	r21
    2d44:	47 95       	ror	r20
    2d46:	3a 95       	dec	r19
    2d48:	d1 f7       	brne	.-12     	; 0x2d3e <_ZN6SdFile4readEPvj+0xf8>
    2d4a:	30 2d       	mov	r19, r0
    2d4c:	b4 22       	and	r11, r20
    2d4e:	41 14       	cp	r4, r1
    2d50:	51 04       	cpc	r5, r1
    2d52:	f1 f4       	brne	.+60     	; 0x2d90 <_ZN6SdFile4readEPvj+0x14a>
    2d54:	b1 10       	cpse	r11, r1
    2d56:	1c c0       	rjmp	.+56     	; 0x2d90 <_ZN6SdFile4readEPvj+0x14a>
    2d58:	89 2b       	or	r24, r25
    2d5a:	8a 2b       	or	r24, r26
    2d5c:	8b 2b       	or	r24, r27
    2d5e:	51 f4       	brne	.+20     	; 0x2d74 <_ZN6SdFile4readEPvj+0x12e>
    2d60:	f4 01       	movw	r30, r8
    2d62:	87 89       	ldd	r24, Z+23	; 0x17
    2d64:	90 8d       	ldd	r25, Z+24	; 0x18
    2d66:	a1 8d       	ldd	r26, Z+25	; 0x19
    2d68:	b2 8d       	ldd	r27, Z+26	; 0x1a
    2d6a:	86 83       	std	Z+6, r24	; 0x06
    2d6c:	97 83       	std	Z+7, r25	; 0x07
    2d6e:	a0 87       	std	Z+8, r26	; 0x08
    2d70:	b1 87       	std	Z+9, r27	; 0x09
    2d72:	0e c0       	rjmp	.+28     	; 0x2d90 <_ZN6SdFile4readEPvj+0x14a>
    2d74:	f4 01       	movw	r30, r8
    2d76:	46 81       	ldd	r20, Z+6	; 0x06
    2d78:	57 81       	ldd	r21, Z+7	; 0x07
    2d7a:	60 85       	ldd	r22, Z+8	; 0x08
    2d7c:	71 85       	ldd	r23, Z+9	; 0x09
    2d7e:	94 01       	movw	r18, r8
    2d80:	2a 5f       	subi	r18, 0xFA	; 250
    2d82:	3f 4f       	sbci	r19, 0xFF	; 255
    2d84:	c8 01       	movw	r24, r16
    2d86:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <_ZNK8SdVolume6fatGetEmPm>
    2d8a:	88 23       	and	r24, r24
    2d8c:	09 f4       	brne	.+2      	; 0x2d90 <_ZN6SdFile4readEPvj+0x14a>
    2d8e:	8c c0       	rjmp	.+280    	; 0x2ea8 <_ZN6SdFile4readEPvj+0x262>
    2d90:	f4 01       	movw	r30, r8
    2d92:	86 81       	ldd	r24, Z+6	; 0x06
    2d94:	97 81       	ldd	r25, Z+7	; 0x07
    2d96:	a0 85       	ldd	r26, Z+8	; 0x08
    2d98:	b1 85       	ldd	r27, Z+9	; 0x09
    2d9a:	23 8d       	ldd	r18, Z+27	; 0x1b
    2d9c:	34 8d       	ldd	r19, Z+28	; 0x1c
    2d9e:	f9 01       	movw	r30, r18
    2da0:	46 85       	ldd	r20, Z+14	; 0x0e
    2da2:	57 85       	ldd	r21, Z+15	; 0x0f
    2da4:	60 89       	ldd	r22, Z+16	; 0x10
    2da6:	71 89       	ldd	r23, Z+17	; 0x11
    2da8:	02 97       	sbiw	r24, 0x02	; 2
    2daa:	a1 09       	sbc	r26, r1
    2dac:	b1 09       	sbc	r27, r1
    2dae:	05 84       	ldd	r0, Z+13	; 0x0d
    2db0:	04 c0       	rjmp	.+8      	; 0x2dba <_ZN6SdFile4readEPvj+0x174>
    2db2:	88 0f       	add	r24, r24
    2db4:	99 1f       	adc	r25, r25
    2db6:	aa 1f       	adc	r26, r26
    2db8:	bb 1f       	adc	r27, r27
    2dba:	0a 94       	dec	r0
    2dbc:	d2 f7       	brpl	.-12     	; 0x2db2 <_ZN6SdFile4readEPvj+0x16c>
    2dbe:	84 0f       	add	r24, r20
    2dc0:	95 1f       	adc	r25, r21
    2dc2:	a6 1f       	adc	r26, r22
    2dc4:	b7 1f       	adc	r27, r23
    2dc6:	bc 01       	movw	r22, r24
    2dc8:	cd 01       	movw	r24, r26
    2dca:	6b 0d       	add	r22, r11
    2dcc:	71 1d       	adc	r23, r1
    2dce:	81 1d       	adc	r24, r1
    2dd0:	91 1d       	adc	r25, r1
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	32 e0       	ldi	r19, 0x02	; 2
    2dd6:	59 01       	movw	r10, r18
    2dd8:	a4 18       	sub	r10, r4
    2dda:	b5 08       	sbc	r11, r5
    2ddc:	a6 14       	cp	r10, r6
    2dde:	b7 04       	cpc	r11, r7
    2de0:	08 f0       	brcs	.+2      	; 0x2de4 <_ZN6SdFile4readEPvj+0x19e>
    2de2:	53 01       	movw	r10, r6
    2de4:	f4 01       	movw	r30, r8
    2de6:	24 81       	ldd	r18, Z+4	; 0x04
    2de8:	26 fd       	sbrc	r18, 6
    2dea:	04 c0       	rjmp	.+8      	; 0x2df4 <_ZN6SdFile4readEPvj+0x1ae>
    2dec:	a1 14       	cp	r10, r1
    2dee:	f2 e0       	ldi	r31, 0x02	; 2
    2df0:	bf 06       	cpc	r11, r31
    2df2:	79 f4       	brne	.+30     	; 0x2e12 <_ZN6SdFile4readEPvj+0x1cc>
    2df4:	00 91 0b 01 	lds	r16, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E>
    2df8:	10 91 0c 01 	lds	r17, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2dfc:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2e00:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2e04:	60 17       	cp	r22, r16
    2e06:	71 07       	cpc	r23, r17
    2e08:	82 07       	cpc	r24, r18
    2e0a:	93 07       	cpc	r25, r19
    2e0c:	21 f4       	brne	.+8      	; 0x2e16 <_ZN6SdFile4readEPvj+0x1d0>
    2e0e:	23 2d       	mov	r18, r3
    2e10:	03 c0       	rjmp	.+6      	; 0x2e18 <_ZN6SdFile4readEPvj+0x1d2>
    2e12:	23 2d       	mov	r18, r3
    2e14:	01 c0       	rjmp	.+2      	; 0x2e18 <_ZN6SdFile4readEPvj+0x1d2>
    2e16:	21 e0       	ldi	r18, 0x01	; 1
    2e18:	22 23       	and	r18, r18
    2e1a:	81 f0       	breq	.+32     	; 0x2e3c <_ZN6SdFile4readEPvj+0x1f6>
    2e1c:	76 01       	movw	r14, r12
    2e1e:	85 01       	movw	r16, r10
    2e20:	92 01       	movw	r18, r4
    2e22:	ab 01       	movw	r20, r22
    2e24:	bc 01       	movw	r22, r24
    2e26:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <_ZN8SdVolume7sdCard_E>
    2e2a:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <_ZN8SdVolume7sdCard_E+0x1>
    2e2e:	0e 94 80 13 	call	0x2700	; 0x2700 <_ZN7Sd2Card8readDataEmjjPh>
    2e32:	88 23       	and	r24, r24
    2e34:	e1 f1       	breq	.+120    	; 0x2eae <_ZN6SdFile4readEPvj+0x268>
    2e36:	ca 0c       	add	r12, r10
    2e38:	db 1c       	adc	r13, r11
    2e3a:	20 c0       	rjmp	.+64     	; 0x2e7c <_ZN6SdFile4readEPvj+0x236>
    2e3c:	40 e0       	ldi	r20, 0x00	; 0
    2e3e:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <_ZN8SdVolume13cacheRawBlockEmh>
    2e42:	88 23       	and	r24, r24
    2e44:	b9 f1       	breq	.+110    	; 0x2eb4 <_ZN6SdFile4readEPvj+0x26e>
    2e46:	82 01       	movw	r16, r4
    2e48:	09 5b       	subi	r16, 0xB9	; 185
    2e4a:	1b 4f       	sbci	r17, 0xFB	; 251
    2e4c:	1c 83       	std	Y+4, r17	; 0x04
    2e4e:	0b 83       	std	Y+3, r16	; 0x03
    2e50:	98 01       	movw	r18, r16
    2e52:	2a 0d       	add	r18, r10
    2e54:	3b 1d       	adc	r19, r11
    2e56:	4b 81       	ldd	r20, Y+3	; 0x03
    2e58:	5c 81       	ldd	r21, Y+4	; 0x04
    2e5a:	42 17       	cp	r20, r18
    2e5c:	53 07       	cpc	r21, r19
    2e5e:	71 f0       	breq	.+28     	; 0x2e7c <_ZN6SdFile4readEPvj+0x236>
    2e60:	fa 01       	movw	r30, r20
    2e62:	80 81       	ld	r24, Z
    2e64:	f6 01       	movw	r30, r12
    2e66:	80 83       	st	Z, r24
    2e68:	8a 01       	movw	r16, r20
    2e6a:	0f 5f       	subi	r16, 0xFF	; 255
    2e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e6e:	1c 83       	std	Y+4, r17	; 0x04
    2e70:	0b 83       	std	Y+3, r16	; 0x03
    2e72:	a6 01       	movw	r20, r12
    2e74:	4f 5f       	subi	r20, 0xFF	; 255
    2e76:	5f 4f       	sbci	r21, 0xFF	; 255
    2e78:	6a 01       	movw	r12, r20
    2e7a:	ed cf       	rjmp	.-38     	; 0x2e56 <_ZN6SdFile4readEPvj+0x210>
    2e7c:	f4 01       	movw	r30, r8
    2e7e:	82 85       	ldd	r24, Z+10	; 0x0a
    2e80:	93 85       	ldd	r25, Z+11	; 0x0b
    2e82:	a4 85       	ldd	r26, Z+12	; 0x0c
    2e84:	b5 85       	ldd	r27, Z+13	; 0x0d
    2e86:	8a 0d       	add	r24, r10
    2e88:	9b 1d       	adc	r25, r11
    2e8a:	a1 1d       	adc	r26, r1
    2e8c:	b1 1d       	adc	r27, r1
    2e8e:	82 87       	std	Z+10, r24	; 0x0a
    2e90:	93 87       	std	Z+11, r25	; 0x0b
    2e92:	a4 87       	std	Z+12, r26	; 0x0c
    2e94:	b5 87       	std	Z+13, r27	; 0x0d
    2e96:	6a 18       	sub	r6, r10
    2e98:	7b 08       	sbc	r7, r11
    2e9a:	1e cf       	rjmp	.-452    	; 0x2cd8 <_ZN6SdFile4readEPvj+0x92>
    2e9c:	89 81       	ldd	r24, Y+1	; 0x01
    2e9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea0:	0b c0       	rjmp	.+22     	; 0x2eb8 <_ZN6SdFile4readEPvj+0x272>
    2ea2:	8f ef       	ldi	r24, 0xFF	; 255
    2ea4:	9f ef       	ldi	r25, 0xFF	; 255
    2ea6:	08 c0       	rjmp	.+16     	; 0x2eb8 <_ZN6SdFile4readEPvj+0x272>
    2ea8:	8f ef       	ldi	r24, 0xFF	; 255
    2eaa:	9f ef       	ldi	r25, 0xFF	; 255
    2eac:	05 c0       	rjmp	.+10     	; 0x2eb8 <_ZN6SdFile4readEPvj+0x272>
    2eae:	8f ef       	ldi	r24, 0xFF	; 255
    2eb0:	9f ef       	ldi	r25, 0xFF	; 255
    2eb2:	02 c0       	rjmp	.+4      	; 0x2eb8 <_ZN6SdFile4readEPvj+0x272>
    2eb4:	8f ef       	ldi	r24, 0xFF	; 255
    2eb6:	9f ef       	ldi	r25, 0xFF	; 255
    2eb8:	0f 90       	pop	r0
    2eba:	0f 90       	pop	r0
    2ebc:	0f 90       	pop	r0
    2ebe:	0f 90       	pop	r0
    2ec0:	df 91       	pop	r29
    2ec2:	cf 91       	pop	r28
    2ec4:	1f 91       	pop	r17
    2ec6:	0f 91       	pop	r16
    2ec8:	ff 90       	pop	r15
    2eca:	ef 90       	pop	r14
    2ecc:	df 90       	pop	r13
    2ece:	cf 90       	pop	r12
    2ed0:	bf 90       	pop	r11
    2ed2:	af 90       	pop	r10
    2ed4:	9f 90       	pop	r9
    2ed6:	8f 90       	pop	r8
    2ed8:	7f 90       	pop	r7
    2eda:	6f 90       	pop	r6
    2edc:	5f 90       	pop	r5
    2ede:	4f 90       	pop	r4
    2ee0:	3f 90       	pop	r3
    2ee2:	08 95       	ret

00002ee4 <_ZN6SdFile12readDirCacheEv>:
    2ee4:	ff 92       	push	r15
    2ee6:	0f 93       	push	r16
    2ee8:	1f 93       	push	r17
    2eea:	cf 93       	push	r28
    2eec:	df 93       	push	r29
    2eee:	1f 92       	push	r1
    2ef0:	cd b7       	in	r28, 0x3d	; 61
    2ef2:	de b7       	in	r29, 0x3e	; 62
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	25 81       	ldd	r18, Z+5	; 0x05
    2ef8:	22 30       	cpi	r18, 0x02	; 2
    2efa:	98 f1       	brcs	.+102    	; 0x2f62 <_ZN6SdFile12readDirCacheEv+0x7e>
    2efc:	8c 01       	movw	r16, r24
    2efe:	42 85       	ldd	r20, Z+10	; 0x0a
    2f00:	53 85       	ldd	r21, Z+11	; 0x0b
    2f02:	64 85       	ldd	r22, Z+12	; 0x0c
    2f04:	75 85       	ldd	r23, Z+13	; 0x0d
    2f06:	68 94       	set
    2f08:	14 f8       	bld	r1, 4
    2f0a:	76 95       	lsr	r23
    2f0c:	67 95       	ror	r22
    2f0e:	57 95       	ror	r21
    2f10:	47 95       	ror	r20
    2f12:	16 94       	lsr	r1
    2f14:	d1 f7       	brne	.-12     	; 0x2f0a <_ZN6SdFile12readDirCacheEv+0x26>
    2f16:	f4 2f       	mov	r31, r20
    2f18:	ff 70       	andi	r31, 0x0F	; 15
    2f1a:	ff 2e       	mov	r15, r31
    2f1c:	41 e0       	ldi	r20, 0x01	; 1
    2f1e:	50 e0       	ldi	r21, 0x00	; 0
    2f20:	be 01       	movw	r22, r28
    2f22:	6f 5f       	subi	r22, 0xFF	; 255
    2f24:	7f 4f       	sbci	r23, 0xFF	; 255
    2f26:	0e 94 23 16 	call	0x2c46	; 0x2c46 <_ZN6SdFile4readEPvj>
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	19 f4       	brne	.+6      	; 0x2f34 <_ZN6SdFile12readDirCacheEv+0x50>
    2f2e:	89 81       	ldd	r24, Y+1	; 0x01
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	02 c0       	rjmp	.+4      	; 0x2f38 <_ZN6SdFile12readDirCacheEv+0x54>
    2f34:	8f ef       	ldi	r24, 0xFF	; 255
    2f36:	9f ef       	ldi	r25, 0xFF	; 255
    2f38:	99 23       	and	r25, r25
    2f3a:	b4 f0       	brlt	.+44     	; 0x2f68 <_ZN6SdFile12readDirCacheEv+0x84>
    2f3c:	f8 01       	movw	r30, r16
    2f3e:	82 85       	ldd	r24, Z+10	; 0x0a
    2f40:	93 85       	ldd	r25, Z+11	; 0x0b
    2f42:	a4 85       	ldd	r26, Z+12	; 0x0c
    2f44:	b5 85       	ldd	r27, Z+13	; 0x0d
    2f46:	4f 96       	adiw	r24, 0x1f	; 31
    2f48:	a1 1d       	adc	r26, r1
    2f4a:	b1 1d       	adc	r27, r1
    2f4c:	82 87       	std	Z+10, r24	; 0x0a
    2f4e:	93 87       	std	Z+11, r25	; 0x0b
    2f50:	a4 87       	std	Z+12, r26	; 0x0c
    2f52:	b5 87       	std	Z+13, r27	; 0x0d
    2f54:	f0 e2       	ldi	r31, 0x20	; 32
    2f56:	ff 9e       	mul	r15, r31
    2f58:	c0 01       	movw	r24, r0
    2f5a:	11 24       	eor	r1, r1
    2f5c:	89 5b       	subi	r24, 0xB9	; 185
    2f5e:	9b 4f       	sbci	r25, 0xFB	; 251
    2f60:	05 c0       	rjmp	.+10     	; 0x2f6c <_ZN6SdFile12readDirCacheEv+0x88>
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	02 c0       	rjmp	.+4      	; 0x2f6c <_ZN6SdFile12readDirCacheEv+0x88>
    2f68:	80 e0       	ldi	r24, 0x00	; 0
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	0f 90       	pop	r0
    2f6e:	df 91       	pop	r29
    2f70:	cf 91       	pop	r28
    2f72:	1f 91       	pop	r17
    2f74:	0f 91       	pop	r16
    2f76:	ff 90       	pop	r15
    2f78:	08 95       	ret

00002f7a <_ZN6SdFile7seekSetEm>:
    2f7a:	8f 92       	push	r8
    2f7c:	9f 92       	push	r9
    2f7e:	af 92       	push	r10
    2f80:	bf 92       	push	r11
    2f82:	cf 92       	push	r12
    2f84:	df 92       	push	r13
    2f86:	ef 92       	push	r14
    2f88:	ff 92       	push	r15
    2f8a:	0f 93       	push	r16
    2f8c:	1f 93       	push	r17
    2f8e:	cf 93       	push	r28
    2f90:	df 93       	push	r29
    2f92:	ec 01       	movw	r28, r24
    2f94:	8d 81       	ldd	r24, Y+5	; 0x05
    2f96:	88 23       	and	r24, r24
    2f98:	59 f0       	breq	.+22     	; 0x2fb0 <_ZN6SdFile7seekSetEm+0x36>
    2f9a:	0b 89       	ldd	r16, Y+19	; 0x13
    2f9c:	1c 89       	ldd	r17, Y+20	; 0x14
    2f9e:	2d 89       	ldd	r18, Y+21	; 0x15
    2fa0:	3e 89       	ldd	r19, Y+22	; 0x16
    2fa2:	04 17       	cp	r16, r20
    2fa4:	15 07       	cpc	r17, r21
    2fa6:	26 07       	cpc	r18, r22
    2fa8:	37 07       	cpc	r19, r23
    2faa:	20 f4       	brcc	.+8      	; 0x2fb4 <_ZN6SdFile7seekSetEm+0x3a>
    2fac:	91 e0       	ldi	r25, 0x01	; 1
    2fae:	03 c0       	rjmp	.+6      	; 0x2fb6 <_ZN6SdFile7seekSetEm+0x3c>
    2fb0:	91 e0       	ldi	r25, 0x01	; 1
    2fb2:	01 c0       	rjmp	.+2      	; 0x2fb6 <_ZN6SdFile7seekSetEm+0x3c>
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	91 11       	cpse	r25, r1
    2fb8:	73 c0       	rjmp	.+230    	; 0x30a0 <_ZN6SdFile7seekSetEm+0x126>
    2fba:	82 30       	cpi	r24, 0x02	; 2
    2fbc:	31 f4       	brne	.+12     	; 0x2fca <_ZN6SdFile7seekSetEm+0x50>
    2fbe:	4a 87       	std	Y+10, r20	; 0x0a
    2fc0:	5b 87       	std	Y+11, r21	; 0x0b
    2fc2:	6c 87       	std	Y+12, r22	; 0x0c
    2fc4:	7d 87       	std	Y+13, r23	; 0x0d
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	6c c0       	rjmp	.+216    	; 0x30a2 <_ZN6SdFile7seekSetEm+0x128>
    2fca:	41 15       	cp	r20, r1
    2fcc:	51 05       	cpc	r21, r1
    2fce:	61 05       	cpc	r22, r1
    2fd0:	71 05       	cpc	r23, r1
    2fd2:	51 f4       	brne	.+20     	; 0x2fe8 <_ZN6SdFile7seekSetEm+0x6e>
    2fd4:	1e 82       	std	Y+6, r1	; 0x06
    2fd6:	1f 82       	std	Y+7, r1	; 0x07
    2fd8:	18 86       	std	Y+8, r1	; 0x08
    2fda:	19 86       	std	Y+9, r1	; 0x09
    2fdc:	1a 86       	std	Y+10, r1	; 0x0a
    2fde:	1b 86       	std	Y+11, r1	; 0x0b
    2fe0:	1c 86       	std	Y+12, r1	; 0x0c
    2fe2:	1d 86       	std	Y+13, r1	; 0x0d
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	5d c0       	rjmp	.+186    	; 0x30a2 <_ZN6SdFile7seekSetEm+0x128>
    2fe8:	4a 01       	movw	r8, r20
    2fea:	5b 01       	movw	r10, r22
    2fec:	0a 85       	ldd	r16, Y+10	; 0x0a
    2fee:	1b 85       	ldd	r17, Y+11	; 0x0b
    2ff0:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ff2:	3d 85       	ldd	r19, Y+13	; 0x0d
    2ff4:	68 01       	movw	r12, r16
    2ff6:	79 01       	movw	r14, r18
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	c8 1a       	sub	r12, r24
    2ffc:	d1 08       	sbc	r13, r1
    2ffe:	e1 08       	sbc	r14, r1
    3000:	f1 08       	sbc	r15, r1
    3002:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3004:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3006:	85 85       	ldd	r24, Z+13	; 0x0d
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	09 96       	adiw	r24, 0x09	; 9
    300c:	08 2e       	mov	r0, r24
    300e:	04 c0       	rjmp	.+8      	; 0x3018 <_ZN6SdFile7seekSetEm+0x9e>
    3010:	f6 94       	lsr	r15
    3012:	e7 94       	ror	r14
    3014:	d7 94       	ror	r13
    3016:	c7 94       	ror	r12
    3018:	0a 94       	dec	r0
    301a:	d2 f7       	brpl	.-12     	; 0x3010 <_ZN6SdFile7seekSetEm+0x96>
    301c:	41 50       	subi	r20, 0x01	; 1
    301e:	51 09       	sbc	r21, r1
    3020:	61 09       	sbc	r22, r1
    3022:	71 09       	sbc	r23, r1
    3024:	04 c0       	rjmp	.+8      	; 0x302e <_ZN6SdFile7seekSetEm+0xb4>
    3026:	76 95       	lsr	r23
    3028:	67 95       	ror	r22
    302a:	57 95       	ror	r21
    302c:	47 95       	ror	r20
    302e:	8a 95       	dec	r24
    3030:	d2 f7       	brpl	.-12     	; 0x3026 <_ZN6SdFile7seekSetEm+0xac>
    3032:	4c 15       	cp	r20, r12
    3034:	5d 05       	cpc	r21, r13
    3036:	6e 05       	cpc	r22, r14
    3038:	7f 05       	cpc	r23, r15
    303a:	20 f0       	brcs	.+8      	; 0x3044 <_ZN6SdFile7seekSetEm+0xca>
    303c:	01 2b       	or	r16, r17
    303e:	02 2b       	or	r16, r18
    3040:	03 2b       	or	r16, r19
    3042:	49 f4       	brne	.+18     	; 0x3056 <_ZN6SdFile7seekSetEm+0xdc>
    3044:	8f 89       	ldd	r24, Y+23	; 0x17
    3046:	98 8d       	ldd	r25, Y+24	; 0x18
    3048:	a9 8d       	ldd	r26, Y+25	; 0x19
    304a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    304c:	8e 83       	std	Y+6, r24	; 0x06
    304e:	9f 83       	std	Y+7, r25	; 0x07
    3050:	a8 87       	std	Y+8, r26	; 0x08
    3052:	b9 87       	std	Y+9, r27	; 0x09
    3054:	04 c0       	rjmp	.+8      	; 0x305e <_ZN6SdFile7seekSetEm+0xe4>
    3056:	4c 19       	sub	r20, r12
    3058:	5d 09       	sbc	r21, r13
    305a:	6e 09       	sbc	r22, r14
    305c:	7f 09       	sbc	r23, r15
    305e:	6a 01       	movw	r12, r20
    3060:	7b 01       	movw	r14, r22
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	c8 1a       	sub	r12, r24
    3066:	d1 08       	sbc	r13, r1
    3068:	e1 08       	sbc	r14, r1
    306a:	f1 08       	sbc	r15, r1
    306c:	45 2b       	or	r20, r21
    306e:	46 2b       	or	r20, r22
    3070:	47 2b       	or	r20, r23
    3072:	81 f0       	breq	.+32     	; 0x3094 <_ZN6SdFile7seekSetEm+0x11a>
    3074:	4e 81       	ldd	r20, Y+6	; 0x06
    3076:	5f 81       	ldd	r21, Y+7	; 0x07
    3078:	68 85       	ldd	r22, Y+8	; 0x08
    307a:	79 85       	ldd	r23, Y+9	; 0x09
    307c:	9e 01       	movw	r18, r28
    307e:	2a 5f       	subi	r18, 0xFA	; 250
    3080:	3f 4f       	sbci	r19, 0xFF	; 255
    3082:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3084:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3086:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <_ZNK8SdVolume6fatGetEmPm>
    308a:	b7 01       	movw	r22, r14
    308c:	a6 01       	movw	r20, r12
    308e:	81 11       	cpse	r24, r1
    3090:	e6 cf       	rjmp	.-52     	; 0x305e <_ZN6SdFile7seekSetEm+0xe4>
    3092:	07 c0       	rjmp	.+14     	; 0x30a2 <_ZN6SdFile7seekSetEm+0x128>
    3094:	8a 86       	std	Y+10, r8	; 0x0a
    3096:	9b 86       	std	Y+11, r9	; 0x0b
    3098:	ac 86       	std	Y+12, r10	; 0x0c
    309a:	bd 86       	std	Y+13, r11	; 0x0d
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	01 c0       	rjmp	.+2      	; 0x30a2 <_ZN6SdFile7seekSetEm+0x128>
    30a0:	80 e0       	ldi	r24, 0x00	; 0
    30a2:	df 91       	pop	r29
    30a4:	cf 91       	pop	r28
    30a6:	1f 91       	pop	r17
    30a8:	0f 91       	pop	r16
    30aa:	ff 90       	pop	r15
    30ac:	ef 90       	pop	r14
    30ae:	df 90       	pop	r13
    30b0:	cf 90       	pop	r12
    30b2:	bf 90       	pop	r11
    30b4:	af 90       	pop	r10
    30b6:	9f 90       	pop	r9
    30b8:	8f 90       	pop	r8
    30ba:	08 95       	ret

000030bc <_ZN6SdFile4syncEh>:
    30bc:	ff 92       	push	r15
    30be:	0f 93       	push	r16
    30c0:	1f 93       	push	r17
    30c2:	cf 93       	push	r28
    30c4:	df 93       	push	r29
    30c6:	fc 01       	movw	r30, r24
    30c8:	85 81       	ldd	r24, Z+5	; 0x05
    30ca:	88 23       	and	r24, r24
    30cc:	09 f4       	brne	.+2      	; 0x30d0 <_ZN6SdFile4syncEh+0x14>
    30ce:	43 c0       	rjmp	.+134    	; 0x3156 <_ZN6SdFile4syncEh+0x9a>
    30d0:	f6 2e       	mov	r15, r22
    30d2:	ef 01       	movw	r28, r30
    30d4:	84 81       	ldd	r24, Z+4	; 0x04
    30d6:	88 23       	and	r24, r24
    30d8:	a4 f5       	brge	.+104    	; 0x3142 <_ZN6SdFile4syncEh+0x86>
    30da:	61 e0       	ldi	r22, 0x01	; 1
    30dc:	cf 01       	movw	r24, r30
    30de:	0e 94 5e 15 	call	0x2abc	; 0x2abc <_ZN6SdFile13cacheDirEntryEh>
    30e2:	8c 01       	movw	r16, r24
    30e4:	89 2b       	or	r24, r25
    30e6:	b1 f1       	breq	.+108    	; 0x3154 <_ZN6SdFile4syncEh+0x98>
    30e8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ea:	82 30       	cpi	r24, 0x02	; 2
    30ec:	48 f4       	brcc	.+18     	; 0x3100 <_ZN6SdFile4syncEh+0x44>
    30ee:	8b 89       	ldd	r24, Y+19	; 0x13
    30f0:	9c 89       	ldd	r25, Y+20	; 0x14
    30f2:	ad 89       	ldd	r26, Y+21	; 0x15
    30f4:	be 89       	ldd	r27, Y+22	; 0x16
    30f6:	f8 01       	movw	r30, r16
    30f8:	84 8f       	std	Z+28, r24	; 0x1c
    30fa:	95 8f       	std	Z+29, r25	; 0x1d
    30fc:	a6 8f       	std	Z+30, r26	; 0x1e
    30fe:	b7 8f       	std	Z+31, r27	; 0x1f
    3100:	8f 89       	ldd	r24, Y+23	; 0x17
    3102:	98 8d       	ldd	r25, Y+24	; 0x18
    3104:	a9 8d       	ldd	r26, Y+25	; 0x19
    3106:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3108:	f8 01       	movw	r30, r16
    310a:	93 8f       	std	Z+27, r25	; 0x1b
    310c:	82 8f       	std	Z+26, r24	; 0x1a
    310e:	8f 89       	ldd	r24, Y+23	; 0x17
    3110:	98 8d       	ldd	r25, Y+24	; 0x18
    3112:	a9 8d       	ldd	r26, Y+25	; 0x19
    3114:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3116:	b5 8b       	std	Z+21, r27	; 0x15
    3118:	a4 8b       	std	Z+20, r26	; 0x14
    311a:	e0 91 3e 04 	lds	r30, 0x043E	; 0x80043e <_ZN6SdFile9dateTime_E>
    311e:	f0 91 3f 04 	lds	r31, 0x043F	; 0x80043f <_ZN6SdFile9dateTime_E+0x1>
    3122:	30 97       	sbiw	r30, 0x00	; 0
    3124:	59 f0       	breq	.+22     	; 0x313c <_ZN6SdFile4syncEh+0x80>
    3126:	b8 01       	movw	r22, r16
    3128:	6a 5e       	subi	r22, 0xEA	; 234
    312a:	7f 4f       	sbci	r23, 0xFF	; 255
    312c:	c8 01       	movw	r24, r16
    312e:	48 96       	adiw	r24, 0x18	; 24
    3130:	09 95       	icall
    3132:	f8 01       	movw	r30, r16
    3134:	80 8d       	ldd	r24, Z+24	; 0x18
    3136:	91 8d       	ldd	r25, Z+25	; 0x19
    3138:	93 8b       	std	Z+19, r25	; 0x13
    313a:	82 8b       	std	Z+18, r24	; 0x12
    313c:	8c 81       	ldd	r24, Y+4	; 0x04
    313e:	8f 77       	andi	r24, 0x7F	; 127
    3140:	8c 83       	std	Y+4, r24	; 0x04
    3142:	f1 10       	cpse	r15, r1
    3144:	03 c0       	rjmp	.+6      	; 0x314c <_ZN6SdFile4syncEh+0x90>
    3146:	8c 81       	ldd	r24, Y+4	; 0x04
    3148:	8f 7e       	andi	r24, 0xEF	; 239
    314a:	8c 83       	std	Y+4, r24	; 0x04
    314c:	8f 2d       	mov	r24, r15
    314e:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <_ZN8SdVolume10cacheFlushEh>
    3152:	01 c0       	rjmp	.+2      	; 0x3156 <_ZN6SdFile4syncEh+0x9a>
    3154:	80 e0       	ldi	r24, 0x00	; 0
    3156:	df 91       	pop	r29
    3158:	cf 91       	pop	r28
    315a:	1f 91       	pop	r17
    315c:	0f 91       	pop	r16
    315e:	ff 90       	pop	r15
    3160:	08 95       	ret

00003162 <_ZN6SdFile5closeEv>:
    3162:	cf 93       	push	r28
    3164:	df 93       	push	r29
    3166:	ec 01       	movw	r28, r24
    3168:	61 e0       	ldi	r22, 0x01	; 1
    316a:	0e 94 5e 18 	call	0x30bc	; 0x30bc <_ZN6SdFile4syncEh>
    316e:	88 23       	and	r24, r24
    3170:	11 f0       	breq	.+4      	; 0x3176 <_ZN6SdFile5closeEv+0x14>
    3172:	1d 82       	std	Y+5, r1	; 0x05
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	df 91       	pop	r29
    3178:	cf 91       	pop	r28
    317a:	08 95       	ret

0000317c <_ZN6SdFile17availableForWriteEv>:
    317c:	cf 93       	push	r28
    317e:	df 93       	push	r29
    3180:	fc 01       	movw	r30, r24
    3182:	25 81       	ldd	r18, Z+5	; 0x05
    3184:	21 30       	cpi	r18, 0x01	; 1
    3186:	29 f4       	brne	.+10     	; 0x3192 <_ZN6SdFile17availableForWriteEv+0x16>
    3188:	24 81       	ldd	r18, Z+4	; 0x04
    318a:	21 fd       	sbrc	r18, 1
    318c:	04 c0       	rjmp	.+8      	; 0x3196 <_ZN6SdFile17availableForWriteEv+0x1a>
    318e:	21 e0       	ldi	r18, 0x01	; 1
    3190:	03 c0       	rjmp	.+6      	; 0x3198 <_ZN6SdFile17availableForWriteEv+0x1c>
    3192:	21 e0       	ldi	r18, 0x01	; 1
    3194:	01 c0       	rjmp	.+2      	; 0x3198 <_ZN6SdFile17availableForWriteEv+0x1c>
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	21 11       	cpse	r18, r1
    319a:	4a c0       	rjmp	.+148    	; 0x3230 <_ZN6SdFile17availableForWriteEv+0xb4>
    319c:	ec 01       	movw	r28, r24
    319e:	8c 81       	ldd	r24, Y+4	; 0x04
    31a0:	82 ff       	sbrs	r24, 2
    31a2:	12 c0       	rjmp	.+36     	; 0x31c8 <_ZN6SdFile17availableForWriteEv+0x4c>
    31a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    31a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    31a8:	ac 85       	ldd	r26, Y+12	; 0x0c
    31aa:	bd 85       	ldd	r27, Y+13	; 0x0d
    31ac:	4b 89       	ldd	r20, Y+19	; 0x13
    31ae:	5c 89       	ldd	r21, Y+20	; 0x14
    31b0:	6d 89       	ldd	r22, Y+21	; 0x15
    31b2:	7e 89       	ldd	r23, Y+22	; 0x16
    31b4:	84 17       	cp	r24, r20
    31b6:	95 07       	cpc	r25, r21
    31b8:	a6 07       	cpc	r26, r22
    31ba:	b7 07       	cpc	r27, r23
    31bc:	29 f0       	breq	.+10     	; 0x31c8 <_ZN6SdFile17availableForWriteEv+0x4c>
    31be:	ce 01       	movw	r24, r28
    31c0:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_ZN6SdFile7seekSetEm>
    31c4:	88 23       	and	r24, r24
    31c6:	b9 f1       	breq	.+110    	; 0x3236 <_ZN6SdFile17availableForWriteEv+0xba>
    31c8:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <_ZN8SdVolume7sdCard_E>
    31cc:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <_ZN8SdVolume7sdCard_E+0x1>
    31d0:	0e 94 b0 14 	call	0x2960	; 0x2960 <_ZN7Sd2Card6isBusyEv>
    31d4:	81 11       	cpse	r24, r1
    31d6:	32 c0       	rjmp	.+100    	; 0x323c <_ZN6SdFile17availableForWriteEv+0xc0>
    31d8:	8c 81       	ldd	r24, Y+4	; 0x04
    31da:	85 ff       	sbrs	r24, 5
    31dc:	0a c0       	rjmp	.+20     	; 0x31f2 <_ZN6SdFile17availableForWriteEv+0x76>
    31de:	60 e0       	ldi	r22, 0x00	; 0
    31e0:	ce 01       	movw	r24, r28
    31e2:	0e 94 5e 18 	call	0x30bc	; 0x30bc <_ZN6SdFile4syncEh>
    31e6:	8c 81       	ldd	r24, Y+4	; 0x04
    31e8:	8f 7d       	andi	r24, 0xDF	; 223
    31ea:	8c 83       	std	Y+4, r24	; 0x04
    31ec:	80 e0       	ldi	r24, 0x00	; 0
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	27 c0       	rjmp	.+78     	; 0x3240 <_ZN6SdFile17availableForWriteEv+0xc4>
    31f2:	40 91 40 04 	lds	r20, 0x0440	; 0x800440 <_ZN8SdVolume17cacheMirrorBlock_E>
    31f6:	50 91 41 04 	lds	r21, 0x0441	; 0x800441 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    31fa:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    31fe:	70 91 43 04 	lds	r23, 0x0443	; 0x800443 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    3202:	45 2b       	or	r20, r21
    3204:	46 2b       	or	r20, r22
    3206:	47 2b       	or	r20, r23
    3208:	31 f0       	breq	.+12     	; 0x3216 <_ZN6SdFile17availableForWriteEv+0x9a>
    320a:	80 e0       	ldi	r24, 0x00	; 0
    320c:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <_ZN8SdVolume21cacheMirrorBlockFlushEh>
    3210:	80 e0       	ldi	r24, 0x00	; 0
    3212:	90 e0       	ldi	r25, 0x00	; 0
    3214:	15 c0       	rjmp	.+42     	; 0x3240 <_ZN6SdFile17availableForWriteEv+0xc4>
    3216:	80 61       	ori	r24, 0x10	; 16
    3218:	8c 83       	std	Y+4, r24	; 0x04
    321a:	8a 85       	ldd	r24, Y+10	; 0x0a
    321c:	9b 85       	ldd	r25, Y+11	; 0x0b
    321e:	ac 85       	ldd	r26, Y+12	; 0x0c
    3220:	bd 85       	ldd	r27, Y+13	; 0x0d
    3222:	9c 01       	movw	r18, r24
    3224:	31 70       	andi	r19, 0x01	; 1
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	92 e0       	ldi	r25, 0x02	; 2
    322a:	82 1b       	sub	r24, r18
    322c:	93 0b       	sbc	r25, r19
    322e:	08 c0       	rjmp	.+16     	; 0x3240 <_ZN6SdFile17availableForWriteEv+0xc4>
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	05 c0       	rjmp	.+10     	; 0x3240 <_ZN6SdFile17availableForWriteEv+0xc4>
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	02 c0       	rjmp	.+4      	; 0x3240 <_ZN6SdFile17availableForWriteEv+0xc4>
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	df 91       	pop	r29
    3242:	cf 91       	pop	r28
    3244:	08 95       	ret

00003246 <_ZN6SdFile8truncateEm>:
    3246:	4f 92       	push	r4
    3248:	5f 92       	push	r5
    324a:	6f 92       	push	r6
    324c:	7f 92       	push	r7
    324e:	8f 92       	push	r8
    3250:	9f 92       	push	r9
    3252:	af 92       	push	r10
    3254:	bf 92       	push	r11
    3256:	ef 92       	push	r14
    3258:	ff 92       	push	r15
    325a:	0f 93       	push	r16
    325c:	1f 93       	push	r17
    325e:	cf 93       	push	r28
    3260:	df 93       	push	r29
    3262:	00 d0       	rcall	.+0      	; 0x3264 <_ZN6SdFile8truncateEm+0x1e>
    3264:	00 d0       	rcall	.+0      	; 0x3266 <_ZN6SdFile8truncateEm+0x20>
    3266:	cd b7       	in	r28, 0x3d	; 61
    3268:	de b7       	in	r29, 0x3e	; 62
    326a:	fc 01       	movw	r30, r24
    326c:	85 81       	ldd	r24, Z+5	; 0x05
    326e:	81 30       	cpi	r24, 0x01	; 1
    3270:	29 f4       	brne	.+10     	; 0x327c <_ZN6SdFile8truncateEm+0x36>
    3272:	84 81       	ldd	r24, Z+4	; 0x04
    3274:	81 fd       	sbrc	r24, 1
    3276:	04 c0       	rjmp	.+8      	; 0x3280 <_ZN6SdFile8truncateEm+0x3a>
    3278:	81 e0       	ldi	r24, 0x01	; 1
    327a:	03 c0       	rjmp	.+6      	; 0x3282 <_ZN6SdFile8truncateEm+0x3c>
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	01 c0       	rjmp	.+2      	; 0x3282 <_ZN6SdFile8truncateEm+0x3c>
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	81 11       	cpse	r24, r1
    3284:	99 c0       	rjmp	.+306    	; 0x33b8 <_ZN6SdFile8truncateEm+0x172>
    3286:	83 89       	ldd	r24, Z+19	; 0x13
    3288:	94 89       	ldd	r25, Z+20	; 0x14
    328a:	a5 89       	ldd	r26, Z+21	; 0x15
    328c:	b6 89       	ldd	r27, Z+22	; 0x16
    328e:	84 17       	cp	r24, r20
    3290:	95 07       	cpc	r25, r21
    3292:	a6 07       	cpc	r26, r22
    3294:	b7 07       	cpc	r27, r23
    3296:	08 f4       	brcc	.+2      	; 0x329a <_ZN6SdFile8truncateEm+0x54>
    3298:	91 c0       	rjmp	.+290    	; 0x33bc <_ZN6SdFile8truncateEm+0x176>
    329a:	89 2b       	or	r24, r25
    329c:	8a 2b       	or	r24, r26
    329e:	8b 2b       	or	r24, r27
    32a0:	09 f4       	brne	.+2      	; 0x32a4 <_ZN6SdFile8truncateEm+0x5e>
    32a2:	8e c0       	rjmp	.+284    	; 0x33c0 <_ZN6SdFile8truncateEm+0x17a>
    32a4:	82 84       	ldd	r8, Z+10	; 0x0a
    32a6:	93 84       	ldd	r9, Z+11	; 0x0b
    32a8:	a4 84       	ldd	r10, Z+12	; 0x0c
    32aa:	b5 84       	ldd	r11, Z+13	; 0x0d
    32ac:	48 15       	cp	r20, r8
    32ae:	59 05       	cpc	r21, r9
    32b0:	6a 05       	cpc	r22, r10
    32b2:	7b 05       	cpc	r23, r11
    32b4:	10 f4       	brcc	.+4      	; 0x32ba <_ZN6SdFile8truncateEm+0x74>
    32b6:	4a 01       	movw	r8, r20
    32b8:	5b 01       	movw	r10, r22
    32ba:	2a 01       	movw	r4, r20
    32bc:	3b 01       	movw	r6, r22
    32be:	7f 01       	movw	r14, r30
    32c0:	cf 01       	movw	r24, r30
    32c2:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_ZN6SdFile7seekSetEm>
    32c6:	88 23       	and	r24, r24
    32c8:	09 f4       	brne	.+2      	; 0x32cc <_ZN6SdFile8truncateEm+0x86>
    32ca:	7b c0       	rjmp	.+246    	; 0x33c2 <_ZN6SdFile8truncateEm+0x17c>
    32cc:	41 14       	cp	r4, r1
    32ce:	51 04       	cpc	r5, r1
    32d0:	61 04       	cpc	r6, r1
    32d2:	71 04       	cpc	r7, r1
    32d4:	b1 f4       	brne	.+44     	; 0x3302 <_ZN6SdFile8truncateEm+0xbc>
    32d6:	d7 01       	movw	r26, r14
    32d8:	57 96       	adiw	r26, 0x17	; 23
    32da:	4d 91       	ld	r20, X+
    32dc:	5d 91       	ld	r21, X+
    32de:	6d 91       	ld	r22, X+
    32e0:	7c 91       	ld	r23, X
    32e2:	5a 97       	sbiw	r26, 0x1a	; 26
    32e4:	5b 96       	adiw	r26, 0x1b	; 27
    32e6:	8d 91       	ld	r24, X+
    32e8:	9c 91       	ld	r25, X
    32ea:	5c 97       	sbiw	r26, 0x1c	; 28
    32ec:	0e 94 e6 20 	call	0x41cc	; 0x41cc <_ZN8SdVolume9freeChainEm>
    32f0:	88 23       	and	r24, r24
    32f2:	09 f4       	brne	.+2      	; 0x32f6 <_ZN6SdFile8truncateEm+0xb0>
    32f4:	66 c0       	rjmp	.+204    	; 0x33c2 <_ZN6SdFile8truncateEm+0x17c>
    32f6:	f7 01       	movw	r30, r14
    32f8:	17 8a       	std	Z+23, r1	; 0x17
    32fa:	10 8e       	std	Z+24, r1	; 0x18
    32fc:	11 8e       	std	Z+25, r1	; 0x19
    32fe:	12 8e       	std	Z+26, r1	; 0x1a
    3300:	42 c0       	rjmp	.+132    	; 0x3386 <_ZN6SdFile8truncateEm+0x140>
    3302:	d7 01       	movw	r26, r14
    3304:	16 96       	adiw	r26, 0x06	; 6
    3306:	4d 91       	ld	r20, X+
    3308:	5d 91       	ld	r21, X+
    330a:	6d 91       	ld	r22, X+
    330c:	7c 91       	ld	r23, X
    330e:	19 97       	sbiw	r26, 0x09	; 9
    3310:	9e 01       	movw	r18, r28
    3312:	2f 5f       	subi	r18, 0xFF	; 255
    3314:	3f 4f       	sbci	r19, 0xFF	; 255
    3316:	5b 96       	adiw	r26, 0x1b	; 27
    3318:	8d 91       	ld	r24, X+
    331a:	9c 91       	ld	r25, X
    331c:	5c 97       	sbiw	r26, 0x1c	; 28
    331e:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <_ZNK8SdVolume6fatGetEmPm>
    3322:	88 23       	and	r24, r24
    3324:	71 f1       	breq	.+92     	; 0x3382 <_ZN6SdFile8truncateEm+0x13c>
    3326:	49 81       	ldd	r20, Y+1	; 0x01
    3328:	5a 81       	ldd	r21, Y+2	; 0x02
    332a:	6b 81       	ldd	r22, Y+3	; 0x03
    332c:	7c 81       	ldd	r23, Y+4	; 0x04
    332e:	d7 01       	movw	r26, r14
    3330:	5b 96       	adiw	r26, 0x1b	; 27
    3332:	ed 91       	ld	r30, X+
    3334:	fc 91       	ld	r31, X
    3336:	5c 97       	sbiw	r26, 0x1c	; 28
    3338:	87 89       	ldd	r24, Z+23	; 0x17
    333a:	80 31       	cpi	r24, 0x10	; 16
    333c:	29 f4       	brne	.+10     	; 0x3348 <_ZN6SdFile8truncateEm+0x102>
    333e:	88 ef       	ldi	r24, 0xF8	; 248
    3340:	9f ef       	ldi	r25, 0xFF	; 255
    3342:	a0 e0       	ldi	r26, 0x00	; 0
    3344:	b0 e0       	ldi	r27, 0x00	; 0
    3346:	04 c0       	rjmp	.+8      	; 0x3350 <_ZN6SdFile8truncateEm+0x10a>
    3348:	88 ef       	ldi	r24, 0xF8	; 248
    334a:	9f ef       	ldi	r25, 0xFF	; 255
    334c:	af ef       	ldi	r26, 0xFF	; 255
    334e:	bf e0       	ldi	r27, 0x0F	; 15
    3350:	48 17       	cp	r20, r24
    3352:	59 07       	cpc	r21, r25
    3354:	6a 07       	cpc	r22, r26
    3356:	7b 07       	cpc	r23, r27
    3358:	b0 f4       	brcc	.+44     	; 0x3386 <_ZN6SdFile8truncateEm+0x140>
    335a:	cf 01       	movw	r24, r30
    335c:	0e 94 e6 20 	call	0x41cc	; 0x41cc <_ZN8SdVolume9freeChainEm>
    3360:	88 23       	and	r24, r24
    3362:	79 f0       	breq	.+30     	; 0x3382 <_ZN6SdFile8truncateEm+0x13c>
    3364:	f7 01       	movw	r30, r14
    3366:	46 81       	ldd	r20, Z+6	; 0x06
    3368:	57 81       	ldd	r21, Z+7	; 0x07
    336a:	60 85       	ldd	r22, Z+8	; 0x08
    336c:	71 85       	ldd	r23, Z+9	; 0x09
    336e:	0f ef       	ldi	r16, 0xFF	; 255
    3370:	1f ef       	ldi	r17, 0xFF	; 255
    3372:	2f ef       	ldi	r18, 0xFF	; 255
    3374:	3f e0       	ldi	r19, 0x0F	; 15
    3376:	83 8d       	ldd	r24, Z+27	; 0x1b
    3378:	94 8d       	ldd	r25, Z+28	; 0x1c
    337a:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <_ZN8SdVolume6fatPutEmm>
    337e:	81 11       	cpse	r24, r1
    3380:	02 c0       	rjmp	.+4      	; 0x3386 <_ZN6SdFile8truncateEm+0x140>
    3382:	80 e0       	ldi	r24, 0x00	; 0
    3384:	1e c0       	rjmp	.+60     	; 0x33c2 <_ZN6SdFile8truncateEm+0x17c>
    3386:	d7 01       	movw	r26, r14
    3388:	53 96       	adiw	r26, 0x13	; 19
    338a:	4d 92       	st	X+, r4
    338c:	5d 92       	st	X+, r5
    338e:	6d 92       	st	X+, r6
    3390:	7c 92       	st	X, r7
    3392:	56 97       	sbiw	r26, 0x16	; 22
    3394:	14 96       	adiw	r26, 0x04	; 4
    3396:	8c 91       	ld	r24, X
    3398:	14 97       	sbiw	r26, 0x04	; 4
    339a:	80 68       	ori	r24, 0x80	; 128
    339c:	14 96       	adiw	r26, 0x04	; 4
    339e:	8c 93       	st	X, r24
    33a0:	61 e0       	ldi	r22, 0x01	; 1
    33a2:	c7 01       	movw	r24, r14
    33a4:	0e 94 5e 18 	call	0x30bc	; 0x30bc <_ZN6SdFile4syncEh>
    33a8:	88 23       	and	r24, r24
    33aa:	59 f0       	breq	.+22     	; 0x33c2 <_ZN6SdFile8truncateEm+0x17c>
    33ac:	b5 01       	movw	r22, r10
    33ae:	a4 01       	movw	r20, r8
    33b0:	c7 01       	movw	r24, r14
    33b2:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_ZN6SdFile7seekSetEm>
    33b6:	05 c0       	rjmp	.+10     	; 0x33c2 <_ZN6SdFile8truncateEm+0x17c>
    33b8:	80 e0       	ldi	r24, 0x00	; 0
    33ba:	03 c0       	rjmp	.+6      	; 0x33c2 <_ZN6SdFile8truncateEm+0x17c>
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	01 c0       	rjmp	.+2      	; 0x33c2 <_ZN6SdFile8truncateEm+0x17c>
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	0f 90       	pop	r0
    33c4:	0f 90       	pop	r0
    33c6:	0f 90       	pop	r0
    33c8:	0f 90       	pop	r0
    33ca:	df 91       	pop	r29
    33cc:	cf 91       	pop	r28
    33ce:	1f 91       	pop	r17
    33d0:	0f 91       	pop	r16
    33d2:	ff 90       	pop	r15
    33d4:	ef 90       	pop	r14
    33d6:	bf 90       	pop	r11
    33d8:	af 90       	pop	r10
    33da:	9f 90       	pop	r9
    33dc:	8f 90       	pop	r8
    33de:	7f 90       	pop	r7
    33e0:	6f 90       	pop	r6
    33e2:	5f 90       	pop	r5
    33e4:	4f 90       	pop	r4
    33e6:	08 95       	ret

000033e8 <_ZN6SdFile15openCachedEntryEhh>:
    33e8:	1f 93       	push	r17
    33ea:	cf 93       	push	r28
    33ec:	df 93       	push	r29
    33ee:	ec 01       	movw	r28, r24
    33f0:	80 e2       	ldi	r24, 0x20	; 32
    33f2:	68 9f       	mul	r22, r24
    33f4:	f0 01       	movw	r30, r0
    33f6:	11 24       	eor	r1, r1
    33f8:	e9 5b       	subi	r30, 0xB9	; 185
    33fa:	fb 4f       	sbci	r31, 0xFB	; 251
    33fc:	93 85       	ldd	r25, Z+11	; 0x0b
    33fe:	91 71       	andi	r25, 0x11	; 17
    3400:	21 f0       	breq	.+8      	; 0x340a <_ZN6SdFile15openCachedEntryEhh+0x22>
    3402:	84 2f       	mov	r24, r20
    3404:	82 74       	andi	r24, 0x42	; 66
    3406:	09 f0       	breq	.+2      	; 0x340a <_ZN6SdFile15openCachedEntryEhh+0x22>
    3408:	54 c0       	rjmp	.+168    	; 0x34b2 <_ZN6SdFile15openCachedEntryEhh+0xca>
    340a:	14 2f       	mov	r17, r20
    340c:	6a 8b       	std	Y+18, r22	; 0x12
    340e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E>
    3412:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3416:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    341a:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    341e:	8e 87       	std	Y+14, r24	; 0x0e
    3420:	9f 87       	std	Y+15, r25	; 0x0f
    3422:	a8 8b       	std	Y+16, r26	; 0x10
    3424:	b9 8b       	std	Y+17, r27	; 0x11
    3426:	84 89       	ldd	r24, Z+20	; 0x14
    3428:	95 89       	ldd	r25, Z+21	; 0x15
    342a:	a0 e0       	ldi	r26, 0x00	; 0
    342c:	b0 e0       	ldi	r27, 0x00	; 0
    342e:	dc 01       	movw	r26, r24
    3430:	99 27       	eor	r25, r25
    3432:	88 27       	eor	r24, r24
    3434:	8f 8b       	std	Y+23, r24	; 0x17
    3436:	98 8f       	std	Y+24, r25	; 0x18
    3438:	a9 8f       	std	Y+25, r26	; 0x19
    343a:	ba 8f       	std	Y+26, r27	; 0x1a
    343c:	42 8d       	ldd	r20, Z+26	; 0x1a
    343e:	53 8d       	ldd	r21, Z+27	; 0x1b
    3440:	60 e0       	ldi	r22, 0x00	; 0
    3442:	70 e0       	ldi	r23, 0x00	; 0
    3444:	48 2b       	or	r20, r24
    3446:	59 2b       	or	r21, r25
    3448:	6a 2b       	or	r22, r26
    344a:	7b 2b       	or	r23, r27
    344c:	4f 8b       	std	Y+23, r20	; 0x17
    344e:	58 8f       	std	Y+24, r21	; 0x18
    3450:	69 8f       	std	Y+25, r22	; 0x19
    3452:	7a 8f       	std	Y+26, r23	; 0x1a
    3454:	23 85       	ldd	r18, Z+11	; 0x0b
    3456:	28 71       	andi	r18, 0x18	; 24
    3458:	59 f4       	brne	.+22     	; 0x3470 <_ZN6SdFile15openCachedEntryEhh+0x88>
    345a:	84 8d       	ldd	r24, Z+28	; 0x1c
    345c:	95 8d       	ldd	r25, Z+29	; 0x1d
    345e:	a6 8d       	ldd	r26, Z+30	; 0x1e
    3460:	b7 8d       	ldd	r27, Z+31	; 0x1f
    3462:	8b 8b       	std	Y+19, r24	; 0x13
    3464:	9c 8b       	std	Y+20, r25	; 0x14
    3466:	ad 8b       	std	Y+21, r26	; 0x15
    3468:	be 8b       	std	Y+22, r27	; 0x16
    346a:	81 e0       	ldi	r24, 0x01	; 1
    346c:	8d 83       	std	Y+5, r24	; 0x05
    346e:	0d c0       	rjmp	.+26     	; 0x348a <_ZN6SdFile15openCachedEntryEhh+0xa2>
    3470:	20 31       	cpi	r18, 0x10	; 16
    3472:	09 f5       	brne	.+66     	; 0x34b6 <_ZN6SdFile15openCachedEntryEhh+0xce>
    3474:	9e 01       	movw	r18, r28
    3476:	2d 5e       	subi	r18, 0xED	; 237
    3478:	3f 4f       	sbci	r19, 0xFF	; 255
    347a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    347c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    347e:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <_ZNK8SdVolume9chainSizeEmPm>
    3482:	88 23       	and	r24, r24
    3484:	d9 f0       	breq	.+54     	; 0x34bc <_ZN6SdFile15openCachedEntryEhh+0xd4>
    3486:	84 e0       	ldi	r24, 0x04	; 4
    3488:	8d 83       	std	Y+5, r24	; 0x05
    348a:	81 2f       	mov	r24, r17
    348c:	8f 70       	andi	r24, 0x0F	; 15
    348e:	8c 83       	std	Y+4, r24	; 0x04
    3490:	1e 82       	std	Y+6, r1	; 0x06
    3492:	1f 82       	std	Y+7, r1	; 0x07
    3494:	18 86       	std	Y+8, r1	; 0x08
    3496:	19 86       	std	Y+9, r1	; 0x09
    3498:	1a 86       	std	Y+10, r1	; 0x0a
    349a:	1b 86       	std	Y+11, r1	; 0x0b
    349c:	1c 86       	std	Y+12, r1	; 0x0c
    349e:	1d 86       	std	Y+13, r1	; 0x0d
    34a0:	16 ff       	sbrs	r17, 6
    34a2:	0b c0       	rjmp	.+22     	; 0x34ba <_ZN6SdFile15openCachedEntryEhh+0xd2>
    34a4:	40 e0       	ldi	r20, 0x00	; 0
    34a6:	50 e0       	ldi	r21, 0x00	; 0
    34a8:	ba 01       	movw	r22, r20
    34aa:	ce 01       	movw	r24, r28
    34ac:	0e 94 23 19 	call	0x3246	; 0x3246 <_ZN6SdFile8truncateEm>
    34b0:	05 c0       	rjmp	.+10     	; 0x34bc <_ZN6SdFile15openCachedEntryEhh+0xd4>
    34b2:	80 e0       	ldi	r24, 0x00	; 0
    34b4:	03 c0       	rjmp	.+6      	; 0x34bc <_ZN6SdFile15openCachedEntryEhh+0xd4>
    34b6:	80 e0       	ldi	r24, 0x00	; 0
    34b8:	01 c0       	rjmp	.+2      	; 0x34bc <_ZN6SdFile15openCachedEntryEhh+0xd4>
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	df 91       	pop	r29
    34be:	cf 91       	pop	r28
    34c0:	1f 91       	pop	r17
    34c2:	08 95       	ret

000034c4 <_ZN6SdFile4openEPS_PKch>:
    34c4:	af 92       	push	r10
    34c6:	bf 92       	push	r11
    34c8:	cf 92       	push	r12
    34ca:	df 92       	push	r13
    34cc:	ef 92       	push	r14
    34ce:	ff 92       	push	r15
    34d0:	0f 93       	push	r16
    34d2:	1f 93       	push	r17
    34d4:	cf 93       	push	r28
    34d6:	df 93       	push	r29
    34d8:	cd b7       	in	r28, 0x3d	; 61
    34da:	de b7       	in	r29, 0x3e	; 62
    34dc:	2b 97       	sbiw	r28, 0x0b	; 11
    34de:	0f b6       	in	r0, 0x3f	; 63
    34e0:	f8 94       	cli
    34e2:	de bf       	out	0x3e, r29	; 62
    34e4:	0f be       	out	0x3f, r0	; 63
    34e6:	cd bf       	out	0x3d, r28	; 61
    34e8:	fc 01       	movw	r30, r24
    34ea:	c5 80       	ldd	r12, Z+5	; 0x05
    34ec:	c1 10       	cpse	r12, r1
    34ee:	ca c0       	rjmp	.+404    	; 0x3684 <_ZN6SdFile4openEPS_PKch+0x1c0>
    34f0:	a2 2e       	mov	r10, r18
    34f2:	8b 01       	movw	r16, r22
    34f4:	7c 01       	movw	r14, r24
    34f6:	be 01       	movw	r22, r28
    34f8:	6f 5f       	subi	r22, 0xFF	; 255
    34fa:	7f 4f       	sbci	r23, 0xFF	; 255
    34fc:	ca 01       	movw	r24, r20
    34fe:	0e 94 77 15 	call	0x2aee	; 0x2aee <_ZN6SdFile10make83NameEPKcPh>
    3502:	88 23       	and	r24, r24
    3504:	09 f4       	brne	.+2      	; 0x3508 <_ZN6SdFile4openEPS_PKch+0x44>
    3506:	c0 c0       	rjmp	.+384    	; 0x3688 <_ZN6SdFile4openEPS_PKch+0x1c4>
    3508:	f8 01       	movw	r30, r16
    350a:	83 8d       	ldd	r24, Z+27	; 0x1b
    350c:	94 8d       	ldd	r25, Z+28	; 0x1c
    350e:	f7 01       	movw	r30, r14
    3510:	94 8f       	std	Z+28, r25	; 0x1c
    3512:	83 8f       	std	Z+27, r24	; 0x1b
    3514:	f8 01       	movw	r30, r16
    3516:	16 82       	std	Z+6, r1	; 0x06
    3518:	17 82       	std	Z+7, r1	; 0x07
    351a:	10 86       	std	Z+8, r1	; 0x08
    351c:	11 86       	std	Z+9, r1	; 0x09
    351e:	12 86       	std	Z+10, r1	; 0x0a
    3520:	13 86       	std	Z+11, r1	; 0x0b
    3522:	14 86       	std	Z+12, r1	; 0x0c
    3524:	15 86       	std	Z+13, r1	; 0x0d
    3526:	b1 2c       	mov	r11, r1
    3528:	f8 01       	movw	r30, r16
    352a:	42 85       	ldd	r20, Z+10	; 0x0a
    352c:	53 85       	ldd	r21, Z+11	; 0x0b
    352e:	64 85       	ldd	r22, Z+12	; 0x0c
    3530:	75 85       	ldd	r23, Z+13	; 0x0d
    3532:	83 89       	ldd	r24, Z+19	; 0x13
    3534:	94 89       	ldd	r25, Z+20	; 0x14
    3536:	a5 89       	ldd	r26, Z+21	; 0x15
    3538:	b6 89       	ldd	r27, Z+22	; 0x16
    353a:	48 17       	cp	r20, r24
    353c:	59 07       	cpc	r21, r25
    353e:	6a 07       	cpc	r22, r26
    3540:	7b 07       	cpc	r23, r27
    3542:	08 f0       	brcs	.+2      	; 0x3546 <_ZN6SdFile4openEPS_PKch+0x82>
    3544:	44 c0       	rjmp	.+136    	; 0x35ce <_ZN6SdFile4openEPS_PKch+0x10a>
    3546:	68 94       	set
    3548:	14 f8       	bld	r1, 4
    354a:	76 95       	lsr	r23
    354c:	67 95       	ror	r22
    354e:	57 95       	ror	r21
    3550:	47 95       	ror	r20
    3552:	16 94       	lsr	r1
    3554:	d1 f7       	brne	.-12     	; 0x354a <_ZN6SdFile4openEPS_PKch+0x86>
    3556:	f4 2f       	mov	r31, r20
    3558:	ff 70       	andi	r31, 0x0F	; 15
    355a:	df 2e       	mov	r13, r31
    355c:	c8 01       	movw	r24, r16
    355e:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <_ZN6SdFile12readDirCacheEv>
    3562:	00 97       	sbiw	r24, 0x00	; 0
    3564:	09 f4       	brne	.+2      	; 0x3568 <_ZN6SdFile4openEPS_PKch+0xa4>
    3566:	91 c0       	rjmp	.+290    	; 0x368a <_ZN6SdFile4openEPS_PKch+0x1c6>
    3568:	fc 01       	movw	r30, r24
    356a:	20 81       	ld	r18, Z
    356c:	22 23       	and	r18, r18
    356e:	11 f0       	breq	.+4      	; 0x3574 <_ZN6SdFile4openEPS_PKch+0xb0>
    3570:	25 3e       	cpi	r18, 0xE5	; 229
    3572:	b9 f4       	brne	.+46     	; 0x35a2 <_ZN6SdFile4openEPS_PKch+0xde>
    3574:	b1 10       	cpse	r11, r1
    3576:	10 c0       	rjmp	.+32     	; 0x3598 <_ZN6SdFile4openEPS_PKch+0xd4>
    3578:	f7 01       	movw	r30, r14
    357a:	d2 8a       	std	Z+18, r13	; 0x12
    357c:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E>
    3580:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3584:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3588:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    358c:	46 87       	std	Z+14, r20	; 0x0e
    358e:	57 87       	std	Z+15, r21	; 0x0f
    3590:	60 8b       	std	Z+16, r22	; 0x10
    3592:	71 8b       	std	Z+17, r23	; 0x11
    3594:	bb 24       	eor	r11, r11
    3596:	b3 94       	inc	r11
    3598:	fc 01       	movw	r30, r24
    359a:	80 81       	ld	r24, Z
    359c:	81 11       	cpse	r24, r1
    359e:	c4 cf       	rjmp	.-120    	; 0x3528 <_ZN6SdFile4openEPS_PKch+0x64>
    35a0:	16 c0       	rjmp	.+44     	; 0x35ce <_ZN6SdFile4openEPS_PKch+0x10a>
    35a2:	4b e0       	ldi	r20, 0x0B	; 11
    35a4:	50 e0       	ldi	r21, 0x00	; 0
    35a6:	bc 01       	movw	r22, r24
    35a8:	ce 01       	movw	r24, r28
    35aa:	01 96       	adiw	r24, 0x01	; 1
    35ac:	0e 94 47 32 	call	0x648e	; 0x648e <memcmp>
    35b0:	89 2b       	or	r24, r25
    35b2:	09 f0       	breq	.+2      	; 0x35b6 <_ZN6SdFile4openEPS_PKch+0xf2>
    35b4:	b9 cf       	rjmp	.-142    	; 0x3528 <_ZN6SdFile4openEPS_PKch+0x64>
    35b6:	8a 2d       	mov	r24, r10
    35b8:	80 73       	andi	r24, 0x30	; 48
    35ba:	80 33       	cpi	r24, 0x30	; 48
    35bc:	09 f4       	brne	.+2      	; 0x35c0 <_ZN6SdFile4openEPS_PKch+0xfc>
    35be:	65 c0       	rjmp	.+202    	; 0x368a <_ZN6SdFile4openEPS_PKch+0x1c6>
    35c0:	4a 2d       	mov	r20, r10
    35c2:	6d 2d       	mov	r22, r13
    35c4:	c7 01       	movw	r24, r14
    35c6:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <_ZN6SdFile15openCachedEntryEhh>
    35ca:	c8 2e       	mov	r12, r24
    35cc:	5e c0       	rjmp	.+188    	; 0x368a <_ZN6SdFile4openEPS_PKch+0x1c6>
    35ce:	8a 2d       	mov	r24, r10
    35d0:	82 71       	andi	r24, 0x12	; 18
    35d2:	82 31       	cpi	r24, 0x12	; 18
    35d4:	09 f0       	breq	.+2      	; 0x35d8 <_ZN6SdFile4openEPS_PKch+0x114>
    35d6:	59 c0       	rjmp	.+178    	; 0x368a <_ZN6SdFile4openEPS_PKch+0x1c6>
    35d8:	bb 20       	and	r11, r11
    35da:	41 f0       	breq	.+16     	; 0x35ec <_ZN6SdFile4openEPS_PKch+0x128>
    35dc:	61 e0       	ldi	r22, 0x01	; 1
    35de:	c7 01       	movw	r24, r14
    35e0:	0e 94 5e 15 	call	0x2abc	; 0x2abc <_ZN6SdFile13cacheDirEntryEh>
    35e4:	8c 01       	movw	r16, r24
    35e6:	89 2b       	or	r24, r25
    35e8:	89 f4       	brne	.+34     	; 0x360c <_ZN6SdFile4openEPS_PKch+0x148>
    35ea:	4f c0       	rjmp	.+158    	; 0x368a <_ZN6SdFile4openEPS_PKch+0x1c6>
    35ec:	f8 01       	movw	r30, r16
    35ee:	85 81       	ldd	r24, Z+5	; 0x05
    35f0:	82 30       	cpi	r24, 0x02	; 2
    35f2:	09 f4       	brne	.+2      	; 0x35f6 <_ZN6SdFile4openEPS_PKch+0x132>
    35f4:	4a c0       	rjmp	.+148    	; 0x368a <_ZN6SdFile4openEPS_PKch+0x1c6>
    35f6:	c8 01       	movw	r24, r16
    35f8:	0e 94 f5 14 	call	0x29ea	; 0x29ea <_ZN6SdFile13addDirClusterEv>
    35fc:	c8 2e       	mov	r12, r24
    35fe:	88 23       	and	r24, r24
    3600:	09 f4       	brne	.+2      	; 0x3604 <_ZN6SdFile4openEPS_PKch+0x140>
    3602:	43 c0       	rjmp	.+134    	; 0x368a <_ZN6SdFile4openEPS_PKch+0x1c6>
    3604:	f7 01       	movw	r30, r14
    3606:	12 8a       	std	Z+18, r1	; 0x12
    3608:	07 e4       	ldi	r16, 0x47	; 71
    360a:	14 e0       	ldi	r17, 0x04	; 4
    360c:	80 e2       	ldi	r24, 0x20	; 32
    360e:	f8 01       	movw	r30, r16
    3610:	11 92       	st	Z+, r1
    3612:	8a 95       	dec	r24
    3614:	e9 f7       	brne	.-6      	; 0x3610 <_ZN6SdFile4openEPS_PKch+0x14c>
    3616:	8b e0       	ldi	r24, 0x0B	; 11
    3618:	fe 01       	movw	r30, r28
    361a:	31 96       	adiw	r30, 0x01	; 1
    361c:	d8 01       	movw	r26, r16
    361e:	01 90       	ld	r0, Z+
    3620:	0d 92       	st	X+, r0
    3622:	8a 95       	dec	r24
    3624:	e1 f7       	brne	.-8      	; 0x361e <_ZN6SdFile4openEPS_PKch+0x15a>
    3626:	e0 91 3e 04 	lds	r30, 0x043E	; 0x80043e <_ZN6SdFile9dateTime_E>
    362a:	f0 91 3f 04 	lds	r31, 0x043F	; 0x80043f <_ZN6SdFile9dateTime_E+0x1>
    362e:	30 97       	sbiw	r30, 0x00	; 0
    3630:	39 f0       	breq	.+14     	; 0x3640 <_ZN6SdFile4openEPS_PKch+0x17c>
    3632:	b8 01       	movw	r22, r16
    3634:	62 5f       	subi	r22, 0xF2	; 242
    3636:	7f 4f       	sbci	r23, 0xFF	; 255
    3638:	c8 01       	movw	r24, r16
    363a:	40 96       	adiw	r24, 0x10	; 16
    363c:	09 95       	icall
    363e:	09 c0       	rjmp	.+18     	; 0x3652 <_ZN6SdFile4openEPS_PKch+0x18e>
    3640:	81 e2       	ldi	r24, 0x21	; 33
    3642:	98 e2       	ldi	r25, 0x28	; 40
    3644:	f8 01       	movw	r30, r16
    3646:	91 8b       	std	Z+17, r25	; 0x11
    3648:	80 8b       	std	Z+16, r24	; 0x10
    364a:	80 e0       	ldi	r24, 0x00	; 0
    364c:	98 e0       	ldi	r25, 0x08	; 8
    364e:	97 87       	std	Z+15, r25	; 0x0f
    3650:	86 87       	std	Z+14, r24	; 0x0e
    3652:	f8 01       	movw	r30, r16
    3654:	80 89       	ldd	r24, Z+16	; 0x10
    3656:	91 89       	ldd	r25, Z+17	; 0x11
    3658:	93 8b       	std	Z+19, r25	; 0x13
    365a:	82 8b       	std	Z+18, r24	; 0x12
    365c:	91 8f       	std	Z+25, r25	; 0x19
    365e:	80 8f       	std	Z+24, r24	; 0x18
    3660:	86 85       	ldd	r24, Z+14	; 0x0e
    3662:	97 85       	ldd	r25, Z+15	; 0x0f
    3664:	97 8b       	std	Z+23, r25	; 0x17
    3666:	86 8b       	std	Z+22, r24	; 0x16
    3668:	81 e0       	ldi	r24, 0x01	; 1
    366a:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <_ZN8SdVolume10cacheFlushEh>
    366e:	c8 2e       	mov	r12, r24
    3670:	88 23       	and	r24, r24
    3672:	59 f0       	breq	.+22     	; 0x368a <_ZN6SdFile4openEPS_PKch+0x1c6>
    3674:	f7 01       	movw	r30, r14
    3676:	62 89       	ldd	r22, Z+18	; 0x12
    3678:	4a 2d       	mov	r20, r10
    367a:	c7 01       	movw	r24, r14
    367c:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <_ZN6SdFile15openCachedEntryEhh>
    3680:	c8 2e       	mov	r12, r24
    3682:	03 c0       	rjmp	.+6      	; 0x368a <_ZN6SdFile4openEPS_PKch+0x1c6>
    3684:	c1 2c       	mov	r12, r1
    3686:	01 c0       	rjmp	.+2      	; 0x368a <_ZN6SdFile4openEPS_PKch+0x1c6>
    3688:	c8 2e       	mov	r12, r24
    368a:	8c 2d       	mov	r24, r12
    368c:	2b 96       	adiw	r28, 0x0b	; 11
    368e:	0f b6       	in	r0, 0x3f	; 63
    3690:	f8 94       	cli
    3692:	de bf       	out	0x3e, r29	; 62
    3694:	0f be       	out	0x3f, r0	; 63
    3696:	cd bf       	out	0x3d, r28	; 61
    3698:	df 91       	pop	r29
    369a:	cf 91       	pop	r28
    369c:	1f 91       	pop	r17
    369e:	0f 91       	pop	r16
    36a0:	ff 90       	pop	r15
    36a2:	ef 90       	pop	r14
    36a4:	df 90       	pop	r13
    36a6:	cf 90       	pop	r12
    36a8:	bf 90       	pop	r11
    36aa:	af 90       	pop	r10
    36ac:	08 95       	ret

000036ae <_ZN6SdFile6removeEv>:
    36ae:	cf 93       	push	r28
    36b0:	df 93       	push	r29
    36b2:	ec 01       	movw	r28, r24
    36b4:	40 e0       	ldi	r20, 0x00	; 0
    36b6:	50 e0       	ldi	r21, 0x00	; 0
    36b8:	ba 01       	movw	r22, r20
    36ba:	0e 94 23 19 	call	0x3246	; 0x3246 <_ZN6SdFile8truncateEm>
    36be:	88 23       	and	r24, r24
    36c0:	79 f0       	breq	.+30     	; 0x36e0 <_ZN6SdFile6removeEv+0x32>
    36c2:	61 e0       	ldi	r22, 0x01	; 1
    36c4:	ce 01       	movw	r24, r28
    36c6:	0e 94 5e 15 	call	0x2abc	; 0x2abc <_ZN6SdFile13cacheDirEntryEh>
    36ca:	00 97       	sbiw	r24, 0x00	; 0
    36cc:	41 f0       	breq	.+16     	; 0x36de <_ZN6SdFile6removeEv+0x30>
    36ce:	25 ee       	ldi	r18, 0xE5	; 229
    36d0:	fc 01       	movw	r30, r24
    36d2:	20 83       	st	Z, r18
    36d4:	1d 82       	std	Y+5, r1	; 0x05
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <_ZN8SdVolume10cacheFlushEh>
    36dc:	01 c0       	rjmp	.+2      	; 0x36e0 <_ZN6SdFile6removeEv+0x32>
    36de:	80 e0       	ldi	r24, 0x00	; 0
    36e0:	df 91       	pop	r29
    36e2:	cf 91       	pop	r28
    36e4:	08 95       	ret

000036e6 <_ZN6SdFile6removeEPS_PKc>:
    36e6:	cf 93       	push	r28
    36e8:	df 93       	push	r29
    36ea:	cd b7       	in	r28, 0x3d	; 61
    36ec:	de b7       	in	r29, 0x3e	; 62
    36ee:	6d 97       	sbiw	r28, 0x1d	; 29
    36f0:	0f b6       	in	r0, 0x3f	; 63
    36f2:	f8 94       	cli
    36f4:	de bf       	out	0x3e, r29	; 62
    36f6:	0f be       	out	0x3f, r0	; 63
    36f8:	cd bf       	out	0x3d, r28	; 61
    36fa:	ab 01       	movw	r20, r22
    36fc:	1c 82       	std	Y+4, r1	; 0x04
    36fe:	1b 82       	std	Y+3, r1	; 0x03
    3700:	2a eb       	ldi	r18, 0xBA	; 186
    3702:	31 e0       	ldi	r19, 0x01	; 1
    3704:	3a 83       	std	Y+2, r19	; 0x02
    3706:	29 83       	std	Y+1, r18	; 0x01
    3708:	1e 82       	std	Y+6, r1	; 0x06
    370a:	22 e0       	ldi	r18, 0x02	; 2
    370c:	bc 01       	movw	r22, r24
    370e:	ce 01       	movw	r24, r28
    3710:	01 96       	adiw	r24, 0x01	; 1
    3712:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <_ZN6SdFile4openEPS_PKch>
    3716:	88 23       	and	r24, r24
    3718:	21 f0       	breq	.+8      	; 0x3722 <_ZN6SdFile6removeEPS_PKc+0x3c>
    371a:	ce 01       	movw	r24, r28
    371c:	01 96       	adiw	r24, 0x01	; 1
    371e:	0e 94 57 1b 	call	0x36ae	; 0x36ae <_ZN6SdFile6removeEv>
    3722:	6d 96       	adiw	r28, 0x1d	; 29
    3724:	0f b6       	in	r0, 0x3f	; 63
    3726:	f8 94       	cli
    3728:	de bf       	out	0x3e, r29	; 62
    372a:	0f be       	out	0x3f, r0	; 63
    372c:	cd bf       	out	0x3d, r28	; 61
    372e:	df 91       	pop	r29
    3730:	cf 91       	pop	r28
    3732:	08 95       	ret

00003734 <_ZN6SdFile5writeEPKvj>:
   \a nbyte.  If an error occurs, write() returns 0.  Possible errors
   include write() is called before a file has been opened, write is called
   for a read-only file, device is full, a corrupt file system or an I/O error.

*/
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    3734:	3f 92       	push	r3
    3736:	4f 92       	push	r4
    3738:	5f 92       	push	r5
    373a:	6f 92       	push	r6
    373c:	7f 92       	push	r7
    373e:	8f 92       	push	r8
    3740:	9f 92       	push	r9
    3742:	af 92       	push	r10
    3744:	bf 92       	push	r11
    3746:	cf 92       	push	r12
    3748:	df 92       	push	r13
    374a:	ef 92       	push	r14
    374c:	ff 92       	push	r15
    374e:	0f 93       	push	r16
    3750:	1f 93       	push	r17
    3752:	cf 93       	push	r28
    3754:	df 93       	push	r29
    3756:	00 d0       	rcall	.+0      	; 0x3758 <_ZN6SdFile5writeEPKvj+0x24>
    3758:	00 d0       	rcall	.+0      	; 0x375a <_ZN6SdFile5writeEPKvj+0x26>
    375a:	00 d0       	rcall	.+0      	; 0x375c <_ZN6SdFile5writeEPKvj+0x28>
    375c:	cd b7       	in	r28, 0x3d	; 61
    375e:	de b7       	in	r29, 0x3e	; 62
    3760:	6c 01       	movw	r12, r24
    3762:	7b 01       	movw	r14, r22
    3764:	5e 83       	std	Y+6, r21	; 0x06
    3766:	4d 83       	std	Y+5, r20	; 0x05
  const uint8_t* src = reinterpret_cast<const uint8_t*>(buf);

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;
  // if blocking writes should be used
  uint8_t blocking = (flags_ & F_FILE_NON_BLOCKING_WRITE) == 0x00;
    3768:	dc 01       	movw	r26, r24
    376a:	14 96       	adiw	r26, 0x04	; 4
    376c:	9c 91       	ld	r25, X
    376e:	14 97       	sbiw	r26, 0x04	; 4
    3770:	29 2f       	mov	r18, r25
    3772:	22 95       	swap	r18
    3774:	2f 70       	andi	r18, 0x0F	; 15
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	82 27       	eor	r24, r18
    377a:	81 70       	andi	r24, 0x01	; 1
    377c:	38 2e       	mov	r3, r24
    uint8_t isDir(void) const {
      return type_ >= FAT_FILE_TYPE_MIN_DIR;
    }
    /** \return True if this is a SdFile for a file else false. */
    uint8_t isFile(void) const {
      return type_ == FAT_FILE_TYPE_NORMAL;
    377e:	15 96       	adiw	r26, 0x05	; 5
    3780:	8c 91       	ld	r24, X

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) {
    3782:	81 30       	cpi	r24, 0x01	; 1
    3784:	19 f4       	brne	.+6      	; 0x378c <_ZN6SdFile5writeEPKvj+0x58>
    3786:	91 fd       	sbrc	r25, 1
    3788:	03 c0       	rjmp	.+6      	; 0x3790 <_ZN6SdFile5writeEPKvj+0x5c>
    378a:	03 c0       	rjmp	.+6      	; 0x3792 <_ZN6SdFile5writeEPKvj+0x5e>
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	01 c0       	rjmp	.+2      	; 0x3792 <_ZN6SdFile5writeEPKvj+0x5e>
    3790:	80 e0       	ldi	r24, 0x00	; 0
    3792:	81 11       	cpse	r24, r1
    3794:	66 c1       	rjmp	.+716    	; 0x3a62 <_ZN6SdFile5writeEPKvj+0x32e>
    goto writeErrorReturn;
  }

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    3796:	92 fd       	sbrc	r25, 2
    3798:	03 c0       	rjmp	.+6      	; 0x37a0 <_ZN6SdFile5writeEPKvj+0x6c>
  uint16_t nToWrite = nbyte;
  // if blocking writes should be used
  uint8_t blocking = (flags_ & F_FILE_NON_BLOCKING_WRITE) == 0x00;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) {
    379a:	8d 80       	ldd	r8, Y+5	; 0x05
    379c:	9e 80       	ldd	r9, Y+6	; 0x06
    379e:	15 c0       	rjmp	.+42     	; 0x37ca <_ZN6SdFile5writeEPKvj+0x96>
    goto writeErrorReturn;
  }

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    37a0:	f6 01       	movw	r30, r12
    37a2:	82 85       	ldd	r24, Z+10	; 0x0a
    37a4:	93 85       	ldd	r25, Z+11	; 0x0b
    37a6:	a4 85       	ldd	r26, Z+12	; 0x0c
    37a8:	b5 85       	ldd	r27, Z+13	; 0x0d
    37aa:	43 89       	ldd	r20, Z+19	; 0x13
    37ac:	54 89       	ldd	r21, Z+20	; 0x14
    37ae:	65 89       	ldd	r22, Z+21	; 0x15
    37b0:	76 89       	ldd	r23, Z+22	; 0x16
    37b2:	84 17       	cp	r24, r20
    37b4:	95 07       	cpc	r25, r21
    37b6:	a6 07       	cpc	r26, r22
    37b8:	b7 07       	cpc	r27, r23
    37ba:	79 f3       	breq	.-34     	; 0x379a <_ZN6SdFile5writeEPKvj+0x66>
    /**
        Set the files current position to end of file.  Useful to position
        a file for append. See seekSet().
    */
    uint8_t seekEnd(void) {
      return seekSet(fileSize_);
    37bc:	c6 01       	movw	r24, r12
    37be:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) {
    37c2:	88 23       	and	r24, r24
    37c4:	09 f4       	brne	.+2      	; 0x37c8 <_ZN6SdFile5writeEPKvj+0x94>
    37c6:	4d c1       	rjmp	.+666    	; 0x3a62 <_ZN6SdFile5writeEPKvj+0x32e>
    37c8:	e8 cf       	rjmp	.-48     	; 0x379a <_ZN6SdFile5writeEPKvj+0x66>
      goto writeErrorReturn;
    }
  }

  while (nToWrite > 0) {
    37ca:	81 14       	cp	r8, r1
    37cc:	91 04       	cpc	r9, r1
    37ce:	09 f4       	brne	.+2      	; 0x37d2 <_ZN6SdFile5writeEPKvj+0x9e>
    37d0:	1b c1       	rjmp	.+566    	; 0x3a08 <_ZN6SdFile5writeEPKvj+0x2d4>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    37d2:	d6 01       	movw	r26, r12
    37d4:	1a 96       	adiw	r26, 0x0a	; 10
    37d6:	0d 91       	ld	r16, X+
    37d8:	1d 91       	ld	r17, X+
    37da:	2d 91       	ld	r18, X+
    37dc:	3c 91       	ld	r19, X
    37de:	1d 97       	sbiw	r26, 0x0d	; 13
    37e0:	5b 96       	adiw	r26, 0x1b	; 27
    37e2:	ed 91       	ld	r30, X+
    37e4:	fc 91       	ld	r31, X
    37e6:	5c 97       	sbiw	r26, 0x1c	; 28
    uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
    uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
    //----------------------------------------------------------------------------
    uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
    uint8_t blockOfCluster(uint32_t position) const {
      return (position >> 9) & (blocksPerCluster_ - 1);
    37e8:	d9 01       	movw	r26, r18
    37ea:	c8 01       	movw	r24, r16
    37ec:	07 2e       	mov	r0, r23
    37ee:	79 e0       	ldi	r23, 0x09	; 9
    37f0:	b6 95       	lsr	r27
    37f2:	a7 95       	ror	r26
    37f4:	97 95       	ror	r25
    37f6:	87 95       	ror	r24
    37f8:	7a 95       	dec	r23
    37fa:	d1 f7       	brne	.-12     	; 0x37f0 <_ZN6SdFile5writeEPKvj+0xbc>
    37fc:	70 2d       	mov	r23, r0
    37fe:	74 80       	ldd	r7, Z+4	; 0x04
    3800:	7a 94       	dec	r7
    3802:	78 22       	and	r7, r24
    uint16_t blockOffset = curPosition_ & 0X1FF;
    3804:	11 70       	andi	r17, 0x01	; 1
    if (blockOfCluster == 0 && blockOffset == 0) {
    3806:	71 10       	cpse	r7, r1
    3808:	54 c0       	rjmp	.+168    	; 0x38b2 <_ZN6SdFile5writeEPKvj+0x17e>
    380a:	01 15       	cp	r16, r1
    380c:	11 05       	cpc	r17, r1
    380e:	09 f0       	breq	.+2      	; 0x3812 <_ZN6SdFile5writeEPKvj+0xde>
    3810:	50 c0       	rjmp	.+160    	; 0x38b2 <_ZN6SdFile5writeEPKvj+0x17e>
      // start of new cluster
      if (curCluster_ == 0) {
    3812:	d6 01       	movw	r26, r12
    3814:	16 96       	adiw	r26, 0x06	; 6
    3816:	4d 91       	ld	r20, X+
    3818:	5d 91       	ld	r21, X+
    381a:	6d 91       	ld	r22, X+
    381c:	7c 91       	ld	r23, X
    381e:	19 97       	sbiw	r26, 0x09	; 9
    3820:	41 15       	cp	r20, r1
    3822:	51 05       	cpc	r21, r1
    3824:	61 05       	cpc	r22, r1
    3826:	71 05       	cpc	r23, r1
    3828:	b1 f4       	brne	.+44     	; 0x3856 <_ZN6SdFile5writeEPKvj+0x122>
        if (firstCluster_ == 0) {
    382a:	57 96       	adiw	r26, 0x17	; 23
    382c:	8d 91       	ld	r24, X+
    382e:	9d 91       	ld	r25, X+
    3830:	0d 90       	ld	r0, X+
    3832:	bc 91       	ld	r27, X
    3834:	a0 2d       	mov	r26, r0
    3836:	00 97       	sbiw	r24, 0x00	; 0
    3838:	a1 05       	cpc	r26, r1
    383a:	b1 05       	cpc	r27, r1
    383c:	31 f4       	brne	.+12     	; 0x384a <_ZN6SdFile5writeEPKvj+0x116>
          // allocate first cluster of file
          if (!addCluster()) {
    383e:	c6 01       	movw	r24, r12
    3840:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN6SdFile10addClusterEv>
    3844:	81 11       	cpse	r24, r1
    3846:	35 c0       	rjmp	.+106    	; 0x38b2 <_ZN6SdFile5writeEPKvj+0x17e>
    3848:	0c c1       	rjmp	.+536    	; 0x3a62 <_ZN6SdFile5writeEPKvj+0x32e>
            goto writeErrorReturn;
          }
        } else {
          curCluster_ = firstCluster_;
    384a:	f6 01       	movw	r30, r12
    384c:	86 83       	std	Z+6, r24	; 0x06
    384e:	97 83       	std	Z+7, r25	; 0x07
    3850:	a0 87       	std	Z+8, r26	; 0x08
    3852:	b1 87       	std	Z+9, r27	; 0x09
    3854:	2e c0       	rjmp	.+92     	; 0x38b2 <_ZN6SdFile5writeEPKvj+0x17e>
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) {
    3856:	9e 01       	movw	r18, r28
    3858:	2f 5f       	subi	r18, 0xFF	; 255
    385a:	3f 4f       	sbci	r19, 0xFF	; 255
    385c:	cf 01       	movw	r24, r30
    385e:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <_ZNK8SdVolume6fatGetEmPm>
    3862:	81 11       	cpse	r24, r1
    3864:	02 c0       	rjmp	.+4      	; 0x386a <_ZN6SdFile5writeEPKvj+0x136>
          return false;
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	0b c1       	rjmp	.+534    	; 0x3a80 <_ZN6SdFile5writeEPKvj+0x34c>
        }
        if (vol_->isEOC(next)) {
    386a:	89 81       	ldd	r24, Y+1	; 0x01
    386c:	9a 81       	ldd	r25, Y+2	; 0x02
    386e:	ab 81       	ldd	r26, Y+3	; 0x03
    3870:	bc 81       	ldd	r27, Y+4	; 0x04
    3872:	f6 01       	movw	r30, r12
    3874:	23 8d       	ldd	r18, Z+27	; 0x1b
    3876:	34 8d       	ldd	r19, Z+28	; 0x1c
    uint8_t fatPutEOC(uint32_t cluster) {
      return fatPut(cluster, 0x0FFFFFFF);
    }
    uint8_t freeChain(uint32_t cluster);
    uint8_t isEOC(uint32_t cluster) const {
      return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    3878:	f9 01       	movw	r30, r18
    387a:	27 89       	ldd	r18, Z+23	; 0x17
    387c:	20 31       	cpi	r18, 0x10	; 16
    387e:	29 f4       	brne	.+10     	; 0x388a <_ZN6SdFile5writeEPKvj+0x156>
    3880:	48 ef       	ldi	r20, 0xF8	; 248
    3882:	5f ef       	ldi	r21, 0xFF	; 255
    3884:	60 e0       	ldi	r22, 0x00	; 0
    3886:	70 e0       	ldi	r23, 0x00	; 0
    3888:	04 c0       	rjmp	.+8      	; 0x3892 <_ZN6SdFile5writeEPKvj+0x15e>
    388a:	48 ef       	ldi	r20, 0xF8	; 248
    388c:	5f ef       	ldi	r21, 0xFF	; 255
    388e:	6f ef       	ldi	r22, 0xFF	; 255
    3890:	7f e0       	ldi	r23, 0x0F	; 15
    3892:	84 17       	cp	r24, r20
    3894:	95 07       	cpc	r25, r21
    3896:	a6 07       	cpc	r26, r22
    3898:	b7 07       	cpc	r27, r23
    389a:	30 f0       	brcs	.+12     	; 0x38a8 <_ZN6SdFile5writeEPKvj+0x174>
          // add cluster if at end of chain
          if (!addCluster()) {
    389c:	c6 01       	movw	r24, r12
    389e:	0e 94 cb 14 	call	0x2996	; 0x2996 <_ZN6SdFile10addClusterEv>
    38a2:	81 11       	cpse	r24, r1
    38a4:	06 c0       	rjmp	.+12     	; 0x38b2 <_ZN6SdFile5writeEPKvj+0x17e>
    38a6:	dd c0       	rjmp	.+442    	; 0x3a62 <_ZN6SdFile5writeEPKvj+0x32e>
            goto writeErrorReturn;
          }
        } else {
          curCluster_ = next;
    38a8:	f6 01       	movw	r30, r12
    38aa:	86 83       	std	Z+6, r24	; 0x06
    38ac:	97 83       	std	Z+7, r25	; 0x07
    38ae:	a0 87       	std	Z+8, r26	; 0x08
    38b0:	b1 87       	std	Z+9, r27	; 0x09
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    38b2:	80 e0       	ldi	r24, 0x00	; 0
    38b4:	92 e0       	ldi	r25, 0x02	; 2
    38b6:	5c 01       	movw	r10, r24
    38b8:	a0 1a       	sub	r10, r16
    38ba:	b1 0a       	sbc	r11, r17

    // lesser of space and amount to write
    if (n > nToWrite) {
    38bc:	8a 14       	cp	r8, r10
    38be:	9b 04       	cpc	r9, r11
    38c0:	08 f4       	brcc	.+2      	; 0x38c4 <_ZN6SdFile5writeEPKvj+0x190>
      n = nToWrite;
    38c2:	54 01       	movw	r10, r8
    }

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    38c4:	f6 01       	movw	r30, r12
    38c6:	86 81       	ldd	r24, Z+6	; 0x06
    38c8:	97 81       	ldd	r25, Z+7	; 0x07
    38ca:	a0 85       	ldd	r26, Z+8	; 0x08
    38cc:	b1 85       	ldd	r27, Z+9	; 0x09
    38ce:	23 8d       	ldd	r18, Z+27	; 0x1b
    38d0:	34 8d       	ldd	r19, Z+28	; 0x1c
    uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
    uint8_t blockOfCluster(uint32_t position) const {
      return (position >> 9) & (blocksPerCluster_ - 1);
    }
    uint32_t clusterStartBlock(uint32_t cluster) const {
      return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);
    38d2:	f9 01       	movw	r30, r18
    38d4:	46 85       	ldd	r20, Z+14	; 0x0e
    38d6:	57 85       	ldd	r21, Z+15	; 0x0f
    38d8:	60 89       	ldd	r22, Z+16	; 0x10
    38da:	71 89       	ldd	r23, Z+17	; 0x11
    38dc:	02 97       	sbiw	r24, 0x02	; 2
    38de:	a1 09       	sbc	r26, r1
    38e0:	b1 09       	sbc	r27, r1
    38e2:	05 84       	ldd	r0, Z+13	; 0x0d
    38e4:	04 c0       	rjmp	.+8      	; 0x38ee <_ZN6SdFile5writeEPKvj+0x1ba>
    38e6:	88 0f       	add	r24, r24
    38e8:	99 1f       	adc	r25, r25
    38ea:	aa 1f       	adc	r26, r26
    38ec:	bb 1f       	adc	r27, r27
    38ee:	0a 94       	dec	r0
    38f0:	d2 f7       	brpl	.-12     	; 0x38e6 <_ZN6SdFile5writeEPKvj+0x1b2>
    38f2:	84 0f       	add	r24, r20
    38f4:	95 1f       	adc	r25, r21
    38f6:	a6 1f       	adc	r26, r22
    38f8:	b7 1f       	adc	r27, r23
    38fa:	9c 01       	movw	r18, r24
    38fc:	ad 01       	movw	r20, r26
    38fe:	27 0d       	add	r18, r7
    3900:	31 1d       	adc	r19, r1
    3902:	41 1d       	adc	r20, r1
    3904:	51 1d       	adc	r21, r1
    3906:	29 01       	movw	r4, r18
    3908:	3a 01       	movw	r6, r20
    if (n == 512) {
    390a:	a1 14       	cp	r10, r1
    390c:	32 e0       	ldi	r19, 0x02	; 2
    390e:	b3 06       	cpc	r11, r19
    3910:	41 f5       	brne	.+80     	; 0x3962 <_ZN6SdFile5writeEPKvj+0x22e>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    3912:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E>
    3916:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    391a:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    391e:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3922:	48 16       	cp	r4, r24
    3924:	59 06       	cpc	r5, r25
    3926:	6a 06       	cpc	r6, r26
    3928:	7b 06       	cpc	r7, r27
    392a:	59 f4       	brne	.+22     	; 0x3942 <_ZN6SdFile5writeEPKvj+0x20e>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    392c:	8f ef       	ldi	r24, 0xFF	; 255
    392e:	9f ef       	ldi	r25, 0xFF	; 255
    3930:	dc 01       	movw	r26, r24
    3932:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E>
    3936:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    393a:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    393e:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    uint8_t readData(uint32_t block, uint16_t offset,
                     uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
    }
    uint8_t writeBlock(uint32_t block, const uint8_t* dst, uint8_t blocking = 1) {
      return sdCard_->writeBlock(block, dst, blocking);
    3942:	03 2d       	mov	r16, r3
    3944:	97 01       	movw	r18, r14
    3946:	b3 01       	movw	r22, r6
    3948:	a2 01       	movw	r20, r4
    394a:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <_ZN8SdVolume7sdCard_E>
    394e:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <_ZN8SdVolume7sdCard_E+0x1>
    3952:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN7Sd2Card10writeBlockEmPKhh>
      }
      if (!vol_->writeBlock(block, src, blocking)) {
    3956:	88 23       	and	r24, r24
    3958:	09 f4       	brne	.+2      	; 0x395c <_ZN6SdFile5writeEPKvj+0x228>
    395a:	83 c0       	rjmp	.+262    	; 0x3a62 <_ZN6SdFile5writeEPKvj+0x32e>
        goto writeErrorReturn;
      }
      src += 512;
    395c:	4e ef       	ldi	r20, 0xFE	; 254
    395e:	f4 1a       	sub	r15, r20
    3960:	43 c0       	rjmp	.+134    	; 0x39e8 <_ZN6SdFile5writeEPKvj+0x2b4>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    3962:	01 15       	cp	r16, r1
    3964:	11 05       	cpc	r17, r1
    3966:	31 f5       	brne	.+76     	; 0x39b4 <_ZN6SdFile5writeEPKvj+0x280>
    3968:	d6 01       	movw	r26, r12
    396a:	1a 96       	adiw	r26, 0x0a	; 10
    396c:	4d 91       	ld	r20, X+
    396e:	5d 91       	ld	r21, X+
    3970:	6d 91       	ld	r22, X+
    3972:	7c 91       	ld	r23, X
    3974:	1d 97       	sbiw	r26, 0x0d	; 13
    3976:	53 96       	adiw	r26, 0x13	; 19
    3978:	8d 91       	ld	r24, X+
    397a:	9d 91       	ld	r25, X+
    397c:	0d 90       	ld	r0, X+
    397e:	bc 91       	ld	r27, X
    3980:	a0 2d       	mov	r26, r0
    3982:	48 17       	cp	r20, r24
    3984:	59 07       	cpc	r21, r25
    3986:	6a 07       	cpc	r22, r26
    3988:	7b 07       	cpc	r23, r27
    398a:	a0 f0       	brcs	.+40     	; 0x39b4 <_ZN6SdFile5writeEPKvj+0x280>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) {
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <_ZN8SdVolume10cacheFlushEh>
    3992:	88 23       	and	r24, r24
    3994:	09 f4       	brne	.+2      	; 0x3998 <_ZN6SdFile5writeEPKvj+0x264>
    3996:	65 c0       	rjmp	.+202    	; 0x3a62 <_ZN6SdFile5writeEPKvj+0x32e>
          goto writeErrorReturn;
        }
        SdVolume::cacheBlockNumber_ = block;
    3998:	40 92 0b 01 	sts	0x010B, r4	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E>
    399c:	50 92 0c 01 	sts	0x010C, r5	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    39a0:	60 92 0d 01 	sts	0x010D, r6	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    39a4:	70 92 0e 01 	sts	0x010E, r7	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    }
    static uint8_t cacheFlush(uint8_t blocking = 1);
    static uint8_t cacheMirrorBlockFlush(uint8_t blocking);
    static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
    static void cacheSetDirty(void) {
      cacheDirty_ |= CACHE_FOR_WRITE;
    39a8:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <_ZN8SdVolume11cacheDirty_E>
    39ac:	81 60       	ori	r24, 0x01	; 1
    39ae:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <_ZN8SdVolume11cacheDirty_E>
    39b2:	08 c0       	rjmp	.+16     	; 0x39c4 <_ZN6SdFile5writeEPKvj+0x290>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    39b4:	41 e0       	ldi	r20, 0x01	; 1
    39b6:	c3 01       	movw	r24, r6
    39b8:	b2 01       	movw	r22, r4
    39ba:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <_ZN8SdVolume13cacheRawBlockEmh>
    39be:	88 23       	and	r24, r24
    39c0:	09 f4       	brne	.+2      	; 0x39c4 <_ZN6SdFile5writeEPKvj+0x290>
    39c2:	4f c0       	rjmp	.+158    	; 0x3a62 <_ZN6SdFile5writeEPKvj+0x32e>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    39c4:	f8 01       	movw	r30, r16
    39c6:	e9 5b       	subi	r30, 0xB9	; 185
    39c8:	fb 4f       	sbci	r31, 0xFB	; 251
      uint8_t* end = dst + n;
    39ca:	9f 01       	movw	r18, r30
    39cc:	2a 0d       	add	r18, r10
    39ce:	3b 1d       	adc	r19, r11
      while (dst != end) {
    39d0:	e2 17       	cp	r30, r18
    39d2:	f3 07       	cpc	r31, r19
    39d4:	49 f0       	breq	.+18     	; 0x39e8 <_ZN6SdFile5writeEPKvj+0x2b4>
        *dst++ = *src++;
    39d6:	d7 01       	movw	r26, r14
    39d8:	8c 91       	ld	r24, X
    39da:	80 83       	st	Z, r24
    39dc:	31 96       	adiw	r30, 0x01	; 1
    39de:	a7 01       	movw	r20, r14
    39e0:	4f 5f       	subi	r20, 0xFF	; 255
    39e2:	5f 4f       	sbci	r21, 0xFF	; 255
    39e4:	7a 01       	movw	r14, r20
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) {
    39e6:	f4 cf       	rjmp	.-24     	; 0x39d0 <_ZN6SdFile5writeEPKvj+0x29c>
        *dst++ = *src++;
      }
    }
    nToWrite -= n;
    39e8:	8a 18       	sub	r8, r10
    39ea:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    39ec:	f6 01       	movw	r30, r12
    39ee:	82 85       	ldd	r24, Z+10	; 0x0a
    39f0:	93 85       	ldd	r25, Z+11	; 0x0b
    39f2:	a4 85       	ldd	r26, Z+12	; 0x0c
    39f4:	b5 85       	ldd	r27, Z+13	; 0x0d
    39f6:	8a 0d       	add	r24, r10
    39f8:	9b 1d       	adc	r25, r11
    39fa:	a1 1d       	adc	r26, r1
    39fc:	b1 1d       	adc	r27, r1
    39fe:	82 87       	std	Z+10, r24	; 0x0a
    3a00:	93 87       	std	Z+11, r25	; 0x0b
    3a02:	a4 87       	std	Z+12, r26	; 0x0c
    3a04:	b5 87       	std	Z+13, r27	; 0x0d
    if (!seekEnd()) {
      goto writeErrorReturn;
    }
  }

  while (nToWrite > 0) {
    3a06:	e1 ce       	rjmp	.-574    	; 0x37ca <_ZN6SdFile5writeEPKvj+0x96>
      }
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    3a08:	f6 01       	movw	r30, r12
    3a0a:	82 85       	ldd	r24, Z+10	; 0x0a
    3a0c:	93 85       	ldd	r25, Z+11	; 0x0b
    3a0e:	a4 85       	ldd	r26, Z+12	; 0x0c
    3a10:	b5 85       	ldd	r27, Z+13	; 0x0d
    3a12:	43 89       	ldd	r20, Z+19	; 0x13
    3a14:	54 89       	ldd	r21, Z+20	; 0x14
    3a16:	65 89       	ldd	r22, Z+21	; 0x15
    3a18:	76 89       	ldd	r23, Z+22	; 0x16
    3a1a:	48 17       	cp	r20, r24
    3a1c:	59 07       	cpc	r21, r25
    3a1e:	6a 07       	cpc	r22, r26
    3a20:	7b 07       	cpc	r23, r27
    3a22:	40 f4       	brcc	.+16     	; 0x3a34 <_ZN6SdFile5writeEPKvj+0x300>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    3a24:	83 8b       	std	Z+19, r24	; 0x13
    3a26:	94 8b       	std	Z+20, r25	; 0x14
    3a28:	a5 8b       	std	Z+21, r26	; 0x15
    3a2a:	b6 8b       	std	Z+22, r27	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    3a2c:	84 81       	ldd	r24, Z+4	; 0x04
    3a2e:	80 68       	ori	r24, 0x80	; 128
    3a30:	84 83       	std	Z+4, r24	; 0x04
    3a32:	0d c0       	rjmp	.+26     	; 0x3a4e <_ZN6SdFile5writeEPKvj+0x31a>
  } else if (dateTime_ && nbyte) {
    3a34:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <_ZN6SdFile9dateTime_E>
    3a38:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <_ZN6SdFile9dateTime_E+0x1>
    3a3c:	89 2b       	or	r24, r25
    3a3e:	39 f0       	breq	.+14     	; 0x3a4e <_ZN6SdFile5writeEPKvj+0x31a>
    3a40:	2d 81       	ldd	r18, Y+5	; 0x05
    3a42:	3e 81       	ldd	r19, Y+6	; 0x06
    3a44:	23 2b       	or	r18, r19
    3a46:	19 f0       	breq	.+6      	; 0x3a4e <_ZN6SdFile5writeEPKvj+0x31a>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    3a48:	84 81       	ldd	r24, Z+4	; 0x04
    3a4a:	80 68       	ori	r24, 0x80	; 128
    3a4c:	84 83       	std	Z+4, r24	; 0x04
  }

  if (flags_ & O_SYNC) {
    3a4e:	f6 01       	movw	r30, r12
    3a50:	84 81       	ldd	r24, Z+4	; 0x04
    3a52:	83 ff       	sbrs	r24, 3
    3a54:	10 c0       	rjmp	.+32     	; 0x3a76 <_ZN6SdFile5writeEPKvj+0x342>
    if (!sync()) {
    3a56:	61 e0       	ldi	r22, 0x01	; 1
    3a58:	c6 01       	movw	r24, r12
    3a5a:	0e 94 5e 18 	call	0x30bc	; 0x30bc <_ZN6SdFile4syncEh>
    3a5e:	81 11       	cpse	r24, r1
    3a60:	0d c0       	rjmp	.+26     	; 0x3a7c <_ZN6SdFile5writeEPKvj+0x348>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    3a62:	81 e0       	ldi	r24, 0x01	; 1
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	d6 01       	movw	r26, r12
    3a68:	13 96       	adiw	r26, 0x03	; 3
    3a6a:	9c 93       	st	X, r25
    3a6c:	8e 93       	st	-X, r24
    3a6e:	12 97       	sbiw	r26, 0x02	; 2

writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    3a70:	80 e0       	ldi	r24, 0x00	; 0
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	05 c0       	rjmp	.+10     	; 0x3a80 <_ZN6SdFile5writeEPKvj+0x34c>
  if (flags_ & O_SYNC) {
    if (!sync()) {
      goto writeErrorReturn;
    }
  }
  return nbyte;
    3a76:	8d 81       	ldd	r24, Y+5	; 0x05
    3a78:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7a:	02 c0       	rjmp	.+4      	; 0x3a80 <_ZN6SdFile5writeEPKvj+0x34c>
    3a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a7e:	9e 81       	ldd	r25, Y+6	; 0x06
writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    3a80:	26 96       	adiw	r28, 0x06	; 6
    3a82:	0f b6       	in	r0, 0x3f	; 63
    3a84:	f8 94       	cli
    3a86:	de bf       	out	0x3e, r29	; 62
    3a88:	0f be       	out	0x3f, r0	; 63
    3a8a:	cd bf       	out	0x3d, r28	; 61
    3a8c:	df 91       	pop	r29
    3a8e:	cf 91       	pop	r28
    3a90:	1f 91       	pop	r17
    3a92:	0f 91       	pop	r16
    3a94:	ff 90       	pop	r15
    3a96:	ef 90       	pop	r14
    3a98:	df 90       	pop	r13
    3a9a:	cf 90       	pop	r12
    3a9c:	bf 90       	pop	r11
    3a9e:	af 90       	pop	r10
    3aa0:	9f 90       	pop	r9
    3aa2:	8f 90       	pop	r8
    3aa4:	7f 90       	pop	r7
    3aa6:	6f 90       	pop	r6
    3aa8:	5f 90       	pop	r5
    3aaa:	4f 90       	pop	r4
    3aac:	3f 90       	pop	r3
    3aae:	08 95       	ret

00003ab0 <_ZN6SdFile5writeEh>:
/**
   Write a byte to a file. Required by the Arduino Print class.

   Use SdFile::writeError to check for errors.
*/
size_t SdFile::write(uint8_t b) {
    3ab0:	cf 93       	push	r28
    3ab2:	df 93       	push	r29
    3ab4:	1f 92       	push	r1
    3ab6:	cd b7       	in	r28, 0x3d	; 61
    3ab8:	de b7       	in	r29, 0x3e	; 62
    3aba:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    3abc:	41 e0       	ldi	r20, 0x01	; 1
    3abe:	50 e0       	ldi	r21, 0x00	; 0
    3ac0:	be 01       	movw	r22, r28
    3ac2:	6f 5f       	subi	r22, 0xFF	; 255
    3ac4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ac6:	0e 94 9a 1b 	call	0x3734	; 0x3734 <_ZN6SdFile5writeEPKvj>
}
    3aca:	0f 90       	pop	r0
    3acc:	df 91       	pop	r29
    3ace:	cf 91       	pop	r28
    3ad0:	08 95       	ret

00003ad2 <_ZN8SdVolume21cacheMirrorBlockFlushEh>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheMirrorBlockFlush(uint8_t blocking) {
    3ad2:	0f 93       	push	r16
  if (cacheMirrorBlock_) {
    3ad4:	40 91 40 04 	lds	r20, 0x0440	; 0x800440 <_ZN8SdVolume17cacheMirrorBlock_E>
    3ad8:	50 91 41 04 	lds	r21, 0x0441	; 0x800441 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    3adc:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    3ae0:	70 91 43 04 	lds	r23, 0x0443	; 0x800443 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    3ae4:	41 15       	cp	r20, r1
    3ae6:	51 05       	cpc	r21, r1
    3ae8:	61 05       	cpc	r22, r1
    3aea:	71 05       	cpc	r23, r1
    3aec:	a9 f0       	breq	.+42     	; 0x3b18 <_ZN8SdVolume21cacheMirrorBlockFlushEh+0x46>
    3aee:	08 2f       	mov	r16, r24
    if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data, blocking)) {
    3af0:	27 e4       	ldi	r18, 0x47	; 71
    3af2:	34 e0       	ldi	r19, 0x04	; 4
    3af4:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <_ZN8SdVolume7sdCard_E>
    3af8:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <_ZN8SdVolume7sdCard_E+0x1>
    3afc:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN7Sd2Card10writeBlockEmPKhh>
    3b00:	88 23       	and	r24, r24
    3b02:	59 f0       	breq	.+22     	; 0x3b1a <_ZN8SdVolume21cacheMirrorBlockFlushEh+0x48>
      return false;
    }
    cacheMirrorBlock_ = 0;
    3b04:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <_ZN8SdVolume17cacheMirrorBlock_E>
    3b08:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    3b0c:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    3b10:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  }
  return true;
    3b14:	81 e0       	ldi	r24, 0x01	; 1
    3b16:	01 c0       	rjmp	.+2      	; 0x3b1a <_ZN8SdVolume21cacheMirrorBlockFlushEh+0x48>
    3b18:	81 e0       	ldi	r24, 0x01	; 1
}
    3b1a:	0f 91       	pop	r16
    3b1c:	08 95       	ret

00003b1e <_ZN8SdVolume10cacheFlushEh>:
  }

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(uint8_t blocking) {
    3b1e:	0f 93       	push	r16
    3b20:	cf 93       	push	r28
  if (cacheDirty_) {
    3b22:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <_ZN8SdVolume11cacheDirty_E>
    3b26:	99 23       	and	r25, r25
    3b28:	f9 f0       	breq	.+62     	; 0x3b68 <_ZN8SdVolume10cacheFlushEh+0x4a>
    3b2a:	c8 2f       	mov	r28, r24
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data, blocking)) {
    3b2c:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E>
    3b30:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3b34:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3b38:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3b3c:	08 2f       	mov	r16, r24
    3b3e:	27 e4       	ldi	r18, 0x47	; 71
    3b40:	34 e0       	ldi	r19, 0x04	; 4
    3b42:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <_ZN8SdVolume7sdCard_E>
    3b46:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <_ZN8SdVolume7sdCard_E+0x1>
    3b4a:	0e 94 52 14 	call	0x28a4	; 0x28a4 <_ZN7Sd2Card10writeBlockEmPKhh>
    3b4e:	88 23       	and	r24, r24
    3b50:	71 f0       	breq	.+28     	; 0x3b6e <_ZN8SdVolume10cacheFlushEh+0x50>
      return false;
    }

    if (!blocking) {
    3b52:	cc 23       	and	r28, r28
    3b54:	59 f0       	breq	.+22     	; 0x3b6c <_ZN8SdVolume10cacheFlushEh+0x4e>
      return true;
    }

    // mirror FAT tables
    if (!cacheMirrorBlockFlush(blocking)) {
    3b56:	8c 2f       	mov	r24, r28
    3b58:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <_ZN8SdVolume21cacheMirrorBlockFlushEh>
    3b5c:	88 23       	and	r24, r24
    3b5e:	39 f0       	breq	.+14     	; 0x3b6e <_ZN8SdVolume10cacheFlushEh+0x50>
      return false;
    }
    cacheDirty_ = 0;
    3b60:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <_ZN8SdVolume11cacheDirty_E>
  }
  return true;
    3b64:	81 e0       	ldi	r24, 0x01	; 1
    3b66:	03 c0       	rjmp	.+6      	; 0x3b6e <_ZN8SdVolume10cacheFlushEh+0x50>
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	01 c0       	rjmp	.+2      	; 0x3b6e <_ZN8SdVolume10cacheFlushEh+0x50>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data, blocking)) {
      return false;
    }

    if (!blocking) {
      return true;
    3b6c:	81 e0       	ldi	r24, 0x01	; 1
      return false;
    }
    cacheDirty_ = 0;
  }
  return true;
}
    3b6e:	cf 91       	pop	r28
    3b70:	0f 91       	pop	r16
    3b72:	08 95       	ret

00003b74 <_ZN8SdVolume13cacheRawBlockEmh>:
    cacheMirrorBlock_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    3b74:	cf 92       	push	r12
    3b76:	df 92       	push	r13
    3b78:	ef 92       	push	r14
    3b7a:	ff 92       	push	r15
    3b7c:	cf 93       	push	r28
    3b7e:	6b 01       	movw	r12, r22
    3b80:	7c 01       	movw	r14, r24
    3b82:	c4 2f       	mov	r28, r20
  if (cacheBlockNumber_ != blockNumber) {
    3b84:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E>
    3b88:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3b8c:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3b90:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3b94:	8c 15       	cp	r24, r12
    3b96:	9d 05       	cpc	r25, r13
    3b98:	ae 05       	cpc	r26, r14
    3b9a:	bf 05       	cpc	r27, r15
    3b9c:	c9 f0       	breq	.+50     	; 0x3bd0 <_ZN8SdVolume13cacheRawBlockEmh+0x5c>
    if (!cacheFlush()) {
    3b9e:	81 e0       	ldi	r24, 0x01	; 1
    3ba0:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <_ZN8SdVolume10cacheFlushEh>
    3ba4:	88 23       	and	r24, r24
    3ba6:	d1 f0       	breq	.+52     	; 0x3bdc <_ZN8SdVolume13cacheRawBlockEmh+0x68>
      return false;
    }
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) {
    3ba8:	27 e4       	ldi	r18, 0x47	; 71
    3baa:	34 e0       	ldi	r19, 0x04	; 4
    3bac:	b7 01       	movw	r22, r14
    3bae:	a6 01       	movw	r20, r12
    3bb0:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <_ZN8SdVolume7sdCard_E>
    3bb4:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <_ZN8SdVolume7sdCard_E+0x1>
    3bb8:	0e 94 0d 14 	call	0x281a	; 0x281a <_ZN7Sd2Card9readBlockEmPh>
    3bbc:	88 23       	and	r24, r24
    3bbe:	71 f0       	breq	.+28     	; 0x3bdc <_ZN8SdVolume13cacheRawBlockEmh+0x68>
      return false;
    }
    cacheBlockNumber_ = blockNumber;
    3bc0:	c0 92 0b 01 	sts	0x010B, r12	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E>
    3bc4:	d0 92 0c 01 	sts	0x010C, r13	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3bc8:	e0 92 0d 01 	sts	0x010D, r14	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3bcc:	f0 92 0e 01 	sts	0x010E, r15	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  }
  cacheDirty_ |= action;
    3bd0:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <_ZN8SdVolume11cacheDirty_E>
    3bd4:	c8 2b       	or	r28, r24
    3bd6:	c0 93 44 04 	sts	0x0444, r28	; 0x800444 <_ZN8SdVolume11cacheDirty_E>
  return true;
    3bda:	81 e0       	ldi	r24, 0x01	; 1
}
    3bdc:	cf 91       	pop	r28
    3bde:	ff 90       	pop	r15
    3be0:	ef 90       	pop	r14
    3be2:	df 90       	pop	r13
    3be4:	cf 90       	pop	r12
    3be6:	08 95       	ret

00003be8 <_ZN8SdVolume14cacheZeroBlockEm>:
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    3be8:	cf 92       	push	r12
    3bea:	df 92       	push	r13
    3bec:	ef 92       	push	r14
    3bee:	ff 92       	push	r15
    3bf0:	6b 01       	movw	r12, r22
    3bf2:	7c 01       	movw	r14, r24
  if (!cacheFlush()) {
    3bf4:	81 e0       	ldi	r24, 0x01	; 1
    3bf6:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <_ZN8SdVolume10cacheFlushEh>
    3bfa:	88 23       	and	r24, r24
    3bfc:	d1 f0       	breq	.+52     	; 0x3c32 <_ZN8SdVolume14cacheZeroBlockEm+0x4a>
    3bfe:	80 e0       	ldi	r24, 0x00	; 0
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    return false;
  }

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    3c02:	81 15       	cp	r24, r1
    3c04:	22 e0       	ldi	r18, 0x02	; 2
    3c06:	92 07       	cpc	r25, r18
    3c08:	30 f4       	brcc	.+12     	; 0x3c16 <_ZN8SdVolume14cacheZeroBlockEm+0x2e>
    cacheBuffer_.data[i] = 0;
    3c0a:	fc 01       	movw	r30, r24
    3c0c:	e9 5b       	subi	r30, 0xB9	; 185
    3c0e:	fb 4f       	sbci	r31, 0xFB	; 251
    3c10:	10 82       	st	Z, r1
  if (!cacheFlush()) {
    return false;
  }

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    3c12:	01 96       	adiw	r24, 0x01	; 1
    3c14:	f6 cf       	rjmp	.-20     	; 0x3c02 <_ZN8SdVolume14cacheZeroBlockEm+0x1a>
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    3c16:	c0 92 0b 01 	sts	0x010B, r12	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E>
    3c1a:	d0 92 0c 01 	sts	0x010C, r13	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3c1e:	e0 92 0d 01 	sts	0x010D, r14	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3c22:	f0 92 0e 01 	sts	0x010E, r15	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3c26:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <_ZN8SdVolume11cacheDirty_E>
    3c2a:	81 60       	ori	r24, 0x01	; 1
    3c2c:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <_ZN8SdVolume11cacheDirty_E>
  cacheSetDirty();
  return true;
    3c30:	81 e0       	ldi	r24, 0x01	; 1
}
    3c32:	ff 90       	pop	r15
    3c34:	ef 90       	pop	r14
    3c36:	df 90       	pop	r13
    3c38:	cf 90       	pop	r12
    3c3a:	08 95       	ret

00003c3c <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    3c3c:	8f 92       	push	r8
    3c3e:	9f 92       	push	r9
    3c40:	af 92       	push	r10
    3c42:	bf 92       	push	r11
    3c44:	cf 92       	push	r12
    3c46:	df 92       	push	r13
    3c48:	ef 92       	push	r14
    3c4a:	ff 92       	push	r15
    3c4c:	0f 93       	push	r16
    3c4e:	1f 93       	push	r17
    3c50:	cf 93       	push	r28
    3c52:	df 93       	push	r29
    3c54:	fc 01       	movw	r30, r24
    3c56:	e9 01       	movw	r28, r18
  if (cluster > (clusterCount_ + 1)) {
    3c58:	01 85       	ldd	r16, Z+9	; 0x09
    3c5a:	12 85       	ldd	r17, Z+10	; 0x0a
    3c5c:	23 85       	ldd	r18, Z+11	; 0x0b
    3c5e:	34 85       	ldd	r19, Z+12	; 0x0c
    3c60:	0f 5f       	subi	r16, 0xFF	; 255
    3c62:	1f 4f       	sbci	r17, 0xFF	; 255
    3c64:	2f 4f       	sbci	r18, 0xFF	; 255
    3c66:	3f 4f       	sbci	r19, 0xFF	; 255
    3c68:	04 17       	cp	r16, r20
    3c6a:	15 07       	cpc	r17, r21
    3c6c:	26 07       	cpc	r18, r22
    3c6e:	37 07       	cpc	r19, r23
    3c70:	08 f4       	brcc	.+2      	; 0x3c74 <_ZNK8SdVolume6fatGetEmPm+0x38>
    3c72:	61 c0       	rjmp	.+194    	; 0x3d36 <_ZNK8SdVolume6fatGetEmPm+0xfa>
    return false;
  }
  uint32_t lba = fatStartBlock_;
    3c74:	83 89       	ldd	r24, Z+19	; 0x13
    3c76:	94 89       	ldd	r25, Z+20	; 0x14
    3c78:	a5 89       	ldd	r26, Z+21	; 0x15
    3c7a:	b6 89       	ldd	r27, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3c7c:	27 89       	ldd	r18, Z+23	; 0x17
    3c7e:	20 31       	cpi	r18, 0x10	; 16
    3c80:	29 f4       	brne	.+10     	; 0x3c8c <_ZNK8SdVolume6fatGetEmPm+0x50>
    3c82:	85 2e       	mov	r8, r21
    3c84:	96 2e       	mov	r9, r22
    3c86:	a7 2e       	mov	r10, r23
    3c88:	bb 24       	eor	r11, r11
    3c8a:	0a c0       	rjmp	.+20     	; 0x3ca0 <_ZNK8SdVolume6fatGetEmPm+0x64>
    3c8c:	4a 01       	movw	r8, r20
    3c8e:	5b 01       	movw	r10, r22
    3c90:	68 94       	set
    3c92:	16 f8       	bld	r1, 6
    3c94:	b6 94       	lsr	r11
    3c96:	a7 94       	ror	r10
    3c98:	97 94       	ror	r9
    3c9a:	87 94       	ror	r8
    3c9c:	16 94       	lsr	r1
    3c9e:	d1 f7       	brne	.-12     	; 0x3c94 <_ZNK8SdVolume6fatGetEmPm+0x58>
    3ca0:	6a 01       	movw	r12, r20
    3ca2:	7b 01       	movw	r14, r22
    3ca4:	8f 01       	movw	r16, r30
    3ca6:	bc 01       	movw	r22, r24
    3ca8:	cd 01       	movw	r24, r26
    3caa:	68 0d       	add	r22, r8
    3cac:	79 1d       	adc	r23, r9
    3cae:	8a 1d       	adc	r24, r10
    3cb0:	9b 1d       	adc	r25, r11
  if (lba != cacheBlockNumber_) {
    3cb2:	80 90 0b 01 	lds	r8, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E>
    3cb6:	90 90 0c 01 	lds	r9, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3cba:	a0 90 0d 01 	lds	r10, 0x010D	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3cbe:	b0 90 0e 01 	lds	r11, 0x010E	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3cc2:	68 15       	cp	r22, r8
    3cc4:	79 05       	cpc	r23, r9
    3cc6:	8a 05       	cpc	r24, r10
    3cc8:	9b 05       	cpc	r25, r11
    3cca:	29 f0       	breq	.+10     	; 0x3cd6 <_ZNK8SdVolume6fatGetEmPm+0x9a>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) {
    3ccc:	40 e0       	ldi	r20, 0x00	; 0
    3cce:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <_ZN8SdVolume13cacheRawBlockEmh>
    3cd2:	88 23       	and	r24, r24
    3cd4:	89 f1       	breq	.+98     	; 0x3d38 <_ZNK8SdVolume6fatGetEmPm+0xfc>
      return false;
    }
  }
  if (fatType_ == 16) {
    3cd6:	f8 01       	movw	r30, r16
    3cd8:	87 89       	ldd	r24, Z+23	; 0x17
    3cda:	80 31       	cpi	r24, 0x10	; 16
    3cdc:	a1 f4       	brne	.+40     	; 0x3d06 <_ZNK8SdVolume6fatGetEmPm+0xca>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    3cde:	b7 01       	movw	r22, r14
    3ce0:	a6 01       	movw	r20, r12
    3ce2:	55 27       	eor	r21, r21
    3ce4:	66 27       	eor	r22, r22
    3ce6:	77 27       	eor	r23, r23
    3ce8:	44 0f       	add	r20, r20
    3cea:	55 1f       	adc	r21, r21
    3cec:	fa 01       	movw	r30, r20
    3cee:	e9 5b       	subi	r30, 0xB9	; 185
    3cf0:	fb 4f       	sbci	r31, 0xFB	; 251
    3cf2:	80 81       	ld	r24, Z
    3cf4:	91 81       	ldd	r25, Z+1	; 0x01
    3cf6:	a0 e0       	ldi	r26, 0x00	; 0
    3cf8:	b0 e0       	ldi	r27, 0x00	; 0
    3cfa:	88 83       	st	Y, r24
    3cfc:	99 83       	std	Y+1, r25	; 0x01
    3cfe:	aa 83       	std	Y+2, r26	; 0x02
    3d00:	bb 83       	std	Y+3, r27	; 0x03
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
    3d02:	81 e0       	ldi	r24, 0x01	; 1
    3d04:	19 c0       	rjmp	.+50     	; 0x3d38 <_ZNK8SdVolume6fatGetEmPm+0xfc>
    }
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    3d06:	b7 01       	movw	r22, r14
    3d08:	a6 01       	movw	r20, r12
    3d0a:	4f 77       	andi	r20, 0x7F	; 127
    3d0c:	55 27       	eor	r21, r21
    3d0e:	66 27       	eor	r22, r22
    3d10:	77 27       	eor	r23, r23
    3d12:	44 0f       	add	r20, r20
    3d14:	55 1f       	adc	r21, r21
    3d16:	44 0f       	add	r20, r20
    3d18:	55 1f       	adc	r21, r21
    3d1a:	fa 01       	movw	r30, r20
    3d1c:	e9 5b       	subi	r30, 0xB9	; 185
    3d1e:	fb 4f       	sbci	r31, 0xFB	; 251
    3d20:	80 81       	ld	r24, Z
    3d22:	91 81       	ldd	r25, Z+1	; 0x01
    3d24:	a2 81       	ldd	r26, Z+2	; 0x02
    3d26:	b3 81       	ldd	r27, Z+3	; 0x03
    3d28:	bf 70       	andi	r27, 0x0F	; 15
    3d2a:	88 83       	st	Y, r24
    3d2c:	99 83       	std	Y+1, r25	; 0x01
    3d2e:	aa 83       	std	Y+2, r26	; 0x02
    3d30:	bb 83       	std	Y+3, r27	; 0x03
  }
  return true;
    3d32:	81 e0       	ldi	r24, 0x01	; 1
    3d34:	01 c0       	rjmp	.+2      	; 0x3d38 <_ZNK8SdVolume6fatGetEmPm+0xfc>
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) {
    return false;
    3d36:	80 e0       	ldi	r24, 0x00	; 0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    3d38:	df 91       	pop	r29
    3d3a:	cf 91       	pop	r28
    3d3c:	1f 91       	pop	r17
    3d3e:	0f 91       	pop	r16
    3d40:	ff 90       	pop	r15
    3d42:	ef 90       	pop	r14
    3d44:	df 90       	pop	r13
    3d46:	cf 90       	pop	r12
    3d48:	bf 90       	pop	r11
    3d4a:	af 90       	pop	r10
    3d4c:	9f 90       	pop	r9
    3d4e:	8f 90       	pop	r8
    3d50:	08 95       	ret

00003d52 <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    3d52:	8f 92       	push	r8
    3d54:	9f 92       	push	r9
    3d56:	af 92       	push	r10
    3d58:	bf 92       	push	r11
    3d5a:	ef 92       	push	r14
    3d5c:	ff 92       	push	r15
    3d5e:	0f 93       	push	r16
    3d60:	1f 93       	push	r17
    3d62:	cf 93       	push	r28
    3d64:	df 93       	push	r29
    3d66:	00 d0       	rcall	.+0      	; 0x3d68 <_ZNK8SdVolume9chainSizeEmPm+0x16>
    3d68:	00 d0       	rcall	.+0      	; 0x3d6a <_ZNK8SdVolume9chainSizeEmPm+0x18>
    3d6a:	cd b7       	in	r28, 0x3d	; 61
    3d6c:	de b7       	in	r29, 0x3e	; 62
    3d6e:	8c 01       	movw	r16, r24
    3d70:	49 83       	std	Y+1, r20	; 0x01
    3d72:	5a 83       	std	Y+2, r21	; 0x02
    3d74:	6b 83       	std	Y+3, r22	; 0x03
    3d76:	7c 83       	std	Y+4, r23	; 0x04
    3d78:	79 01       	movw	r14, r18
  uint32_t s = 0;
    3d7a:	81 2c       	mov	r8, r1
    3d7c:	91 2c       	mov	r9, r1
    3d7e:	54 01       	movw	r10, r8
  do {
    if (!fatGet(cluster, &cluster)) {
    3d80:	49 81       	ldd	r20, Y+1	; 0x01
    3d82:	5a 81       	ldd	r21, Y+2	; 0x02
    3d84:	6b 81       	ldd	r22, Y+3	; 0x03
    3d86:	7c 81       	ldd	r23, Y+4	; 0x04
    3d88:	9e 01       	movw	r18, r28
    3d8a:	2f 5f       	subi	r18, 0xFF	; 255
    3d8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d8e:	c8 01       	movw	r24, r16
    3d90:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <_ZNK8SdVolume6fatGetEmPm>
    3d94:	88 23       	and	r24, r24
    3d96:	61 f1       	breq	.+88     	; 0x3df0 <_ZNK8SdVolume9chainSizeEmPm+0x9e>
      return false;
    }
    s += 512UL << clusterSizeShift_;
    3d98:	80 e0       	ldi	r24, 0x00	; 0
    3d9a:	92 e0       	ldi	r25, 0x02	; 2
    3d9c:	a0 e0       	ldi	r26, 0x00	; 0
    3d9e:	b0 e0       	ldi	r27, 0x00	; 0
    3da0:	f8 01       	movw	r30, r16
    3da2:	05 84       	ldd	r0, Z+13	; 0x0d
    3da4:	04 c0       	rjmp	.+8      	; 0x3dae <_ZNK8SdVolume9chainSizeEmPm+0x5c>
    3da6:	88 0f       	add	r24, r24
    3da8:	99 1f       	adc	r25, r25
    3daa:	aa 1f       	adc	r26, r26
    3dac:	bb 1f       	adc	r27, r27
    3dae:	0a 94       	dec	r0
    3db0:	d2 f7       	brpl	.-12     	; 0x3da6 <_ZNK8SdVolume9chainSizeEmPm+0x54>
    3db2:	88 0e       	add	r8, r24
    3db4:	99 1e       	adc	r9, r25
    3db6:	aa 1e       	adc	r10, r26
    3db8:	bb 1e       	adc	r11, r27
  } while (!isEOC(cluster));
    3dba:	89 81       	ldd	r24, Y+1	; 0x01
    3dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    3dbe:	ab 81       	ldd	r26, Y+3	; 0x03
    3dc0:	bc 81       	ldd	r27, Y+4	; 0x04
    uint8_t fatPutEOC(uint32_t cluster) {
      return fatPut(cluster, 0x0FFFFFFF);
    }
    uint8_t freeChain(uint32_t cluster);
    uint8_t isEOC(uint32_t cluster) const {
      return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    3dc2:	27 89       	ldd	r18, Z+23	; 0x17
    3dc4:	20 31       	cpi	r18, 0x10	; 16
    3dc6:	29 f4       	brne	.+10     	; 0x3dd2 <_ZNK8SdVolume9chainSizeEmPm+0x80>
    3dc8:	48 ef       	ldi	r20, 0xF8	; 248
    3dca:	5f ef       	ldi	r21, 0xFF	; 255
    3dcc:	60 e0       	ldi	r22, 0x00	; 0
    3dce:	70 e0       	ldi	r23, 0x00	; 0
    3dd0:	04 c0       	rjmp	.+8      	; 0x3dda <_ZNK8SdVolume9chainSizeEmPm+0x88>
    3dd2:	48 ef       	ldi	r20, 0xF8	; 248
    3dd4:	5f ef       	ldi	r21, 0xFF	; 255
    3dd6:	6f ef       	ldi	r22, 0xFF	; 255
    3dd8:	7f e0       	ldi	r23, 0x0F	; 15
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    3dda:	84 17       	cp	r24, r20
    3ddc:	95 07       	cpc	r25, r21
    3dde:	a6 07       	cpc	r26, r22
    3de0:	b7 07       	cpc	r27, r23
    3de2:	70 f2       	brcs	.-100    	; 0x3d80 <_ZNK8SdVolume9chainSizeEmPm+0x2e>
    if (!fatGet(cluster, &cluster)) {
      return false;
    }
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    3de4:	f7 01       	movw	r30, r14
    3de6:	80 82       	st	Z, r8
    3de8:	91 82       	std	Z+1, r9	; 0x01
    3dea:	a2 82       	std	Z+2, r10	; 0x02
    3dec:	b3 82       	std	Z+3, r11	; 0x03
  return true;
    3dee:	81 e0       	ldi	r24, 0x01	; 1
}
    3df0:	0f 90       	pop	r0
    3df2:	0f 90       	pop	r0
    3df4:	0f 90       	pop	r0
    3df6:	0f 90       	pop	r0
    3df8:	df 91       	pop	r29
    3dfa:	cf 91       	pop	r28
    3dfc:	1f 91       	pop	r17
    3dfe:	0f 91       	pop	r16
    3e00:	ff 90       	pop	r15
    3e02:	ef 90       	pop	r14
    3e04:	bf 90       	pop	r11
    3e06:	af 90       	pop	r10
    3e08:	9f 90       	pop	r9
    3e0a:	8f 90       	pop	r8
    3e0c:	08 95       	ret

00003e0e <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    3e0e:	4f 92       	push	r4
    3e10:	5f 92       	push	r5
    3e12:	6f 92       	push	r6
    3e14:	7f 92       	push	r7
    3e16:	8f 92       	push	r8
    3e18:	9f 92       	push	r9
    3e1a:	af 92       	push	r10
    3e1c:	bf 92       	push	r11
    3e1e:	cf 92       	push	r12
    3e20:	df 92       	push	r13
    3e22:	ef 92       	push	r14
    3e24:	ff 92       	push	r15
    3e26:	0f 93       	push	r16
    3e28:	1f 93       	push	r17
    3e2a:	cf 93       	push	r28
    3e2c:	df 93       	push	r29
    3e2e:	00 d0       	rcall	.+0      	; 0x3e30 <_ZN8SdVolume6fatPutEmm+0x22>
    3e30:	00 d0       	rcall	.+0      	; 0x3e32 <_ZN8SdVolume6fatPutEmm+0x24>
    3e32:	00 d0       	rcall	.+0      	; 0x3e34 <_ZN8SdVolume6fatPutEmm+0x26>
    3e34:	cd b7       	in	r28, 0x3d	; 61
    3e36:	de b7       	in	r29, 0x3e	; 62
  // error if reserved cluster
  if (cluster < 2) {
    3e38:	42 30       	cpi	r20, 0x02	; 2
    3e3a:	51 05       	cpc	r21, r1
    3e3c:	61 05       	cpc	r22, r1
    3e3e:	71 05       	cpc	r23, r1
    3e40:	08 f4       	brcc	.+2      	; 0x3e44 <_ZN8SdVolume6fatPutEmm+0x36>
    3e42:	94 c0       	rjmp	.+296    	; 0x3f6c <_ZN8SdVolume6fatPutEmm+0x15e>
    return false;
  }

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) {
    3e44:	dc 01       	movw	r26, r24
    3e46:	19 96       	adiw	r26, 0x09	; 9
    3e48:	cd 90       	ld	r12, X+
    3e4a:	dd 90       	ld	r13, X+
    3e4c:	ed 90       	ld	r14, X+
    3e4e:	fc 90       	ld	r15, X
    3e50:	1c 97       	sbiw	r26, 0x0c	; 12
    3e52:	bf ef       	ldi	r27, 0xFF	; 255
    3e54:	cb 1a       	sub	r12, r27
    3e56:	db 0a       	sbc	r13, r27
    3e58:	eb 0a       	sbc	r14, r27
    3e5a:	fb 0a       	sbc	r15, r27
    3e5c:	c4 16       	cp	r12, r20
    3e5e:	d5 06       	cpc	r13, r21
    3e60:	e6 06       	cpc	r14, r22
    3e62:	f7 06       	cpc	r15, r23
    3e64:	08 f4       	brcc	.+2      	; 0x3e68 <_ZN8SdVolume6fatPutEmm+0x5a>
    3e66:	84 c0       	rjmp	.+264    	; 0x3f70 <_ZN8SdVolume6fatPutEmm+0x162>
    return false;
  }

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    3e68:	fc 01       	movw	r30, r24
    3e6a:	43 88       	ldd	r4, Z+19	; 0x13
    3e6c:	54 88       	ldd	r5, Z+20	; 0x14
    3e6e:	65 88       	ldd	r6, Z+21	; 0x15
    3e70:	76 88       	ldd	r7, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3e72:	e7 89       	ldd	r30, Z+23	; 0x17
    3e74:	e0 31       	cpi	r30, 0x10	; 16
    3e76:	29 f4       	brne	.+10     	; 0x3e82 <_ZN8SdVolume6fatPutEmm+0x74>
    3e78:	85 2e       	mov	r8, r21
    3e7a:	96 2e       	mov	r9, r22
    3e7c:	a7 2e       	mov	r10, r23
    3e7e:	bb 24       	eor	r11, r11
    3e80:	0a c0       	rjmp	.+20     	; 0x3e96 <_ZN8SdVolume6fatPutEmm+0x88>
    3e82:	4a 01       	movw	r8, r20
    3e84:	5b 01       	movw	r10, r22
    3e86:	68 94       	set
    3e88:	16 f8       	bld	r1, 6
    3e8a:	b6 94       	lsr	r11
    3e8c:	a7 94       	ror	r10
    3e8e:	97 94       	ror	r9
    3e90:	87 94       	ror	r8
    3e92:	16 94       	lsr	r1
    3e94:	d1 f7       	brne	.-12     	; 0x3e8a <_ZN8SdVolume6fatPutEmm+0x7c>
    3e96:	09 83       	std	Y+1, r16	; 0x01
    3e98:	1a 83       	std	Y+2, r17	; 0x02
    3e9a:	2b 83       	std	Y+3, r18	; 0x03
    3e9c:	3c 83       	std	Y+4, r19	; 0x04
    3e9e:	6a 01       	movw	r12, r20
    3ea0:	7b 01       	movw	r14, r22
    3ea2:	9e 83       	std	Y+6, r25	; 0x06
    3ea4:	8d 83       	std	Y+5, r24	; 0x05
    3ea6:	48 0c       	add	r4, r8
    3ea8:	59 1c       	adc	r5, r9
    3eaa:	6a 1c       	adc	r6, r10
    3eac:	7b 1c       	adc	r7, r11

  if (lba != cacheBlockNumber_) {
    3eae:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E>
    3eb2:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3eb6:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3eba:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3ebe:	48 16       	cp	r4, r24
    3ec0:	59 06       	cpc	r5, r25
    3ec2:	6a 06       	cpc	r6, r26
    3ec4:	7b 06       	cpc	r7, r27
    3ec6:	41 f0       	breq	.+16     	; 0x3ed8 <_ZN8SdVolume6fatPutEmm+0xca>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) {
    3ec8:	40 e0       	ldi	r20, 0x00	; 0
    3eca:	c3 01       	movw	r24, r6
    3ecc:	b2 01       	movw	r22, r4
    3ece:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <_ZN8SdVolume13cacheRawBlockEmh>
    3ed2:	88 23       	and	r24, r24
    3ed4:	09 f4       	brne	.+2      	; 0x3ed8 <_ZN8SdVolume6fatPutEmm+0xca>
    3ed6:	4f c0       	rjmp	.+158    	; 0x3f76 <_ZN8SdVolume6fatPutEmm+0x168>
      return false;
    }
  }
  // store entry
  if (fatType_ == 16) {
    3ed8:	ad 81       	ldd	r26, Y+5	; 0x05
    3eda:	be 81       	ldd	r27, Y+6	; 0x06
    3edc:	57 96       	adiw	r26, 0x17	; 23
    3ede:	8c 91       	ld	r24, X
    3ee0:	80 31       	cpi	r24, 0x10	; 16
    3ee2:	79 f4       	brne	.+30     	; 0x3f02 <_ZN8SdVolume6fatPutEmm+0xf4>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    3ee4:	b7 01       	movw	r22, r14
    3ee6:	a6 01       	movw	r20, r12
    3ee8:	55 27       	eor	r21, r21
    3eea:	66 27       	eor	r22, r22
    3eec:	77 27       	eor	r23, r23
    3eee:	44 0f       	add	r20, r20
    3ef0:	55 1f       	adc	r21, r21
    3ef2:	fa 01       	movw	r30, r20
    3ef4:	e9 5b       	subi	r30, 0xB9	; 185
    3ef6:	fb 4f       	sbci	r31, 0xFB	; 251
    3ef8:	89 81       	ldd	r24, Y+1	; 0x01
    3efa:	9a 81       	ldd	r25, Y+2	; 0x02
    3efc:	91 83       	std	Z+1, r25	; 0x01
    3efe:	80 83       	st	Z, r24
    3f00:	15 c0       	rjmp	.+42     	; 0x3f2c <_ZN8SdVolume6fatPutEmm+0x11e>
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    3f02:	b7 01       	movw	r22, r14
    3f04:	a6 01       	movw	r20, r12
    3f06:	4f 77       	andi	r20, 0x7F	; 127
    3f08:	55 27       	eor	r21, r21
    3f0a:	66 27       	eor	r22, r22
    3f0c:	77 27       	eor	r23, r23
    3f0e:	44 0f       	add	r20, r20
    3f10:	55 1f       	adc	r21, r21
    3f12:	44 0f       	add	r20, r20
    3f14:	55 1f       	adc	r21, r21
    3f16:	fa 01       	movw	r30, r20
    3f18:	e9 5b       	subi	r30, 0xB9	; 185
    3f1a:	fb 4f       	sbci	r31, 0xFB	; 251
    3f1c:	89 81       	ldd	r24, Y+1	; 0x01
    3f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f20:	ab 81       	ldd	r26, Y+3	; 0x03
    3f22:	bc 81       	ldd	r27, Y+4	; 0x04
    3f24:	80 83       	st	Z, r24
    3f26:	91 83       	std	Z+1, r25	; 0x01
    3f28:	a2 83       	std	Z+2, r26	; 0x02
    3f2a:	b3 83       	std	Z+3, r27	; 0x03
    }
    static uint8_t cacheFlush(uint8_t blocking = 1);
    static uint8_t cacheMirrorBlockFlush(uint8_t blocking);
    static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
    static void cacheSetDirty(void) {
      cacheDirty_ |= CACHE_FOR_WRITE;
    3f2c:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <_ZN8SdVolume11cacheDirty_E>
    3f30:	81 60       	ori	r24, 0x01	; 1
    3f32:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <_ZN8SdVolume11cacheDirty_E>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) {
    3f36:	ad 81       	ldd	r26, Y+5	; 0x05
    3f38:	be 81       	ldd	r27, Y+6	; 0x06
    3f3a:	52 96       	adiw	r26, 0x12	; 18
    3f3c:	8c 91       	ld	r24, X
    3f3e:	52 97       	sbiw	r26, 0x12	; 18
    3f40:	82 30       	cpi	r24, 0x02	; 2
    3f42:	c0 f0       	brcs	.+48     	; 0x3f74 <_ZN8SdVolume6fatPutEmm+0x166>
    cacheMirrorBlock_ = lba + blocksPerFat_;
    3f44:	15 96       	adiw	r26, 0x05	; 5
    3f46:	8d 91       	ld	r24, X+
    3f48:	9d 91       	ld	r25, X+
    3f4a:	0d 90       	ld	r0, X+
    3f4c:	bc 91       	ld	r27, X
    3f4e:	a0 2d       	mov	r26, r0
    3f50:	48 0e       	add	r4, r24
    3f52:	59 1e       	adc	r5, r25
    3f54:	6a 1e       	adc	r6, r26
    3f56:	7b 1e       	adc	r7, r27
    3f58:	40 92 40 04 	sts	0x0440, r4	; 0x800440 <_ZN8SdVolume17cacheMirrorBlock_E>
    3f5c:	50 92 41 04 	sts	0x0441, r5	; 0x800441 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    3f60:	60 92 42 04 	sts	0x0442, r6	; 0x800442 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    3f64:	70 92 43 04 	sts	0x0443, r7	; 0x800443 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  }
  return true;
    3f68:	81 e0       	ldi	r24, 0x01	; 1
    3f6a:	05 c0       	rjmp	.+10     	; 0x3f76 <_ZN8SdVolume6fatPutEmm+0x168>
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) {
    return false;
    3f6c:	80 e0       	ldi	r24, 0x00	; 0
    3f6e:	03 c0       	rjmp	.+6      	; 0x3f76 <_ZN8SdVolume6fatPutEmm+0x168>
  }

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) {
    return false;
    3f70:	80 e0       	ldi	r24, 0x00	; 0
    3f72:	01 c0       	rjmp	.+2      	; 0x3f76 <_ZN8SdVolume6fatPutEmm+0x168>

  // mirror second FAT
  if (fatCount_ > 1) {
    cacheMirrorBlock_ = lba + blocksPerFat_;
  }
  return true;
    3f74:	81 e0       	ldi	r24, 0x01	; 1
}
    3f76:	26 96       	adiw	r28, 0x06	; 6
    3f78:	0f b6       	in	r0, 0x3f	; 63
    3f7a:	f8 94       	cli
    3f7c:	de bf       	out	0x3e, r29	; 62
    3f7e:	0f be       	out	0x3f, r0	; 63
    3f80:	cd bf       	out	0x3d, r28	; 61
    3f82:	df 91       	pop	r29
    3f84:	cf 91       	pop	r28
    3f86:	1f 91       	pop	r17
    3f88:	0f 91       	pop	r16
    3f8a:	ff 90       	pop	r15
    3f8c:	ef 90       	pop	r14
    3f8e:	df 90       	pop	r13
    3f90:	cf 90       	pop	r12
    3f92:	bf 90       	pop	r11
    3f94:	af 90       	pop	r10
    3f96:	9f 90       	pop	r9
    3f98:	8f 90       	pop	r8
    3f9a:	7f 90       	pop	r7
    3f9c:	6f 90       	pop	r6
    3f9e:	5f 90       	pop	r5
    3fa0:	4f 90       	pop	r4
    3fa2:	08 95       	ret

00003fa4 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    3fa4:	2f 92       	push	r2
    3fa6:	3f 92       	push	r3
    3fa8:	4f 92       	push	r4
    3faa:	5f 92       	push	r5
    3fac:	6f 92       	push	r6
    3fae:	7f 92       	push	r7
    3fb0:	8f 92       	push	r8
    3fb2:	9f 92       	push	r9
    3fb4:	af 92       	push	r10
    3fb6:	bf 92       	push	r11
    3fb8:	cf 92       	push	r12
    3fba:	df 92       	push	r13
    3fbc:	ef 92       	push	r14
    3fbe:	ff 92       	push	r15
    3fc0:	0f 93       	push	r16
    3fc2:	1f 93       	push	r17
    3fc4:	cf 93       	push	r28
    3fc6:	df 93       	push	r29
    3fc8:	cd b7       	in	r28, 0x3d	; 61
    3fca:	de b7       	in	r29, 0x3e	; 62
    3fcc:	2f 97       	sbiw	r28, 0x0f	; 15
    3fce:	0f b6       	in	r0, 0x3f	; 63
    3fd0:	f8 94       	cli
    3fd2:	de bf       	out	0x3e, r29	; 62
    3fd4:	0f be       	out	0x3f, r0	; 63
    3fd6:	cd bf       	out	0x3d, r28	; 61
    3fd8:	1c 01       	movw	r2, r24
    3fda:	49 87       	std	Y+9, r20	; 0x09
    3fdc:	5a 87       	std	Y+10, r21	; 0x0a
    3fde:	6b 87       	std	Y+11, r22	; 0x0b
    3fe0:	7c 87       	std	Y+12, r23	; 0x0c
    3fe2:	3e 87       	std	Y+14, r19	; 0x0e
    3fe4:	2d 87       	std	Y+13, r18	; 0x0d

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    3fe6:	d9 01       	movw	r26, r18
    3fe8:	4d 90       	ld	r4, X+
    3fea:	5d 90       	ld	r5, X+
    3fec:	6d 90       	ld	r6, X+
    3fee:	7c 90       	ld	r7, X
    3ff0:	41 14       	cp	r4, r1
    3ff2:	51 04       	cpc	r5, r1
    3ff4:	61 04       	cpc	r6, r1
    3ff6:	71 04       	cpc	r7, r1
    3ff8:	39 f0       	breq	.+14     	; 0x4008 <_ZN8SdVolume15allocContiguousEmPm+0x64>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    3ffa:	bf ef       	ldi	r27, 0xFF	; 255
    3ffc:	4b 1a       	sub	r4, r27
    3ffe:	5b 0a       	sbc	r5, r27
    4000:	6b 0a       	sbc	r6, r27
    4002:	7b 0a       	sbc	r7, r27

    // don't save new start location
    setStart = false;
    4004:	1f 86       	std	Y+15, r1	; 0x0f
    4006:	11 c0       	rjmp	.+34     	; 0x402a <_ZN8SdVolume15allocContiguousEmPm+0x86>
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    4008:	fc 01       	movw	r30, r24
    400a:	40 80       	ld	r4, Z
    400c:	51 80       	ldd	r5, Z+1	; 0x01
    400e:	62 80       	ldd	r6, Z+2	; 0x02
    4010:	73 80       	ldd	r7, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    4012:	81 e0       	ldi	r24, 0x01	; 1
    4014:	29 85       	ldd	r18, Y+9	; 0x09
    4016:	3a 85       	ldd	r19, Y+10	; 0x0a
    4018:	4b 85       	ldd	r20, Y+11	; 0x0b
    401a:	5c 85       	ldd	r21, Y+12	; 0x0c
    401c:	21 30       	cpi	r18, 0x01	; 1
    401e:	31 05       	cpc	r19, r1
    4020:	41 05       	cpc	r20, r1
    4022:	51 05       	cpc	r21, r1
    4024:	09 f0       	breq	.+2      	; 0x4028 <_ZN8SdVolume15allocContiguousEmPm+0x84>
    4026:	80 e0       	ldi	r24, 0x00	; 0
    4028:	8f 87       	std	Y+15, r24	; 0x0f
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    402a:	f1 01       	movw	r30, r2
    402c:	81 85       	ldd	r24, Z+9	; 0x09
    402e:	92 85       	ldd	r25, Z+10	; 0x0a
    4030:	a3 85       	ldd	r26, Z+11	; 0x0b
    4032:	b4 85       	ldd	r27, Z+12	; 0x0c
    4034:	9c 01       	movw	r18, r24
    4036:	ad 01       	movw	r20, r26
    4038:	2f 5f       	subi	r18, 0xFF	; 255
    403a:	3f 4f       	sbci	r19, 0xFF	; 255
    403c:	4f 4f       	sbci	r20, 0xFF	; 255
    403e:	5f 4f       	sbci	r21, 0xFF	; 255
    4040:	2d 83       	std	Y+5, r18	; 0x05
    4042:	3e 83       	std	Y+6, r19	; 0x06
    4044:	4f 83       	std	Y+7, r20	; 0x07
    4046:	58 87       	std	Y+8, r21	; 0x08

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    4048:	73 01       	movw	r14, r6
    404a:	62 01       	movw	r12, r4

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    404c:	81 2c       	mov	r8, r1
    404e:	91 2c       	mov	r9, r1
    4050:	54 01       	movw	r10, r8
    // can't find space checked all clusters
    if (n >= clusterCount_) {
    4052:	f1 01       	movw	r30, r2
    4054:	81 85       	ldd	r24, Z+9	; 0x09
    4056:	92 85       	ldd	r25, Z+10	; 0x0a
    4058:	a3 85       	ldd	r26, Z+11	; 0x0b
    405a:	b4 85       	ldd	r27, Z+12	; 0x0c
    405c:	88 16       	cp	r8, r24
    405e:	99 06       	cpc	r9, r25
    4060:	aa 06       	cpc	r10, r26
    4062:	bb 06       	cpc	r11, r27
    4064:	08 f0       	brcs	.+2      	; 0x4068 <_ZN8SdVolume15allocContiguousEmPm+0xc4>
    4066:	4a c0       	rjmp	.+148    	; 0x40fc <_ZN8SdVolume15allocContiguousEmPm+0x158>
      return false;
    }

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    4068:	2d 81       	ldd	r18, Y+5	; 0x05
    406a:	3e 81       	ldd	r19, Y+6	; 0x06
    406c:	4f 81       	ldd	r20, Y+7	; 0x07
    406e:	58 85       	ldd	r21, Y+8	; 0x08
    4070:	2c 15       	cp	r18, r12
    4072:	3d 05       	cpc	r19, r13
    4074:	4e 05       	cpc	r20, r14
    4076:	5f 05       	cpc	r21, r15
    4078:	50 f4       	brcc	.+20     	; 0x408e <_ZN8SdVolume15allocContiguousEmPm+0xea>
      bgnCluster = endCluster = 2;
    407a:	c1 2c       	mov	r12, r1
    407c:	d1 2c       	mov	r13, r1
    407e:	76 01       	movw	r14, r12
    4080:	68 94       	set
    4082:	c1 f8       	bld	r12, 1
    4084:	41 2c       	mov	r4, r1
    4086:	51 2c       	mov	r5, r1
    4088:	32 01       	movw	r6, r4
    408a:	68 94       	set
    408c:	41 f8       	bld	r4, 1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) {
    408e:	9e 01       	movw	r18, r28
    4090:	2f 5f       	subi	r18, 0xFF	; 255
    4092:	3f 4f       	sbci	r19, 0xFF	; 255
    4094:	b7 01       	movw	r22, r14
    4096:	a6 01       	movw	r20, r12
    4098:	c1 01       	movw	r24, r2
    409a:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <_ZNK8SdVolume6fatGetEmPm>
    409e:	88 23       	and	r24, r24
    40a0:	69 f1       	breq	.+90     	; 0x40fc <_ZN8SdVolume15allocContiguousEmPm+0x158>
      return false;
    }

    if (f != 0) {
    40a2:	89 81       	ldd	r24, Y+1	; 0x01
    40a4:	9a 81       	ldd	r25, Y+2	; 0x02
    40a6:	ab 81       	ldd	r26, Y+3	; 0x03
    40a8:	bc 81       	ldd	r27, Y+4	; 0x04
    40aa:	89 2b       	or	r24, r25
    40ac:	8a 2b       	or	r24, r26
    40ae:	8b 2b       	or	r24, r27
    40b0:	41 f0       	breq	.+16     	; 0x40c2 <_ZN8SdVolume15allocContiguousEmPm+0x11e>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    40b2:	26 01       	movw	r4, r12
    40b4:	37 01       	movw	r6, r14
    40b6:	3f ef       	ldi	r19, 0xFF	; 255
    40b8:	43 1a       	sub	r4, r19
    40ba:	53 0a       	sbc	r5, r19
    40bc:	63 0a       	sbc	r6, r19
    40be:	73 0a       	sbc	r7, r19
    40c0:	12 c0       	rjmp	.+36     	; 0x40e6 <_ZN8SdVolume15allocContiguousEmPm+0x142>
    } else if ((endCluster - bgnCluster + 1) == count) {
    40c2:	d7 01       	movw	r26, r14
    40c4:	c6 01       	movw	r24, r12
    40c6:	84 19       	sub	r24, r4
    40c8:	95 09       	sbc	r25, r5
    40ca:	a6 09       	sbc	r26, r6
    40cc:	b7 09       	sbc	r27, r7
    40ce:	01 96       	adiw	r24, 0x01	; 1
    40d0:	a1 1d       	adc	r26, r1
    40d2:	b1 1d       	adc	r27, r1
    40d4:	29 85       	ldd	r18, Y+9	; 0x09
    40d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    40d8:	4b 85       	ldd	r20, Y+11	; 0x0b
    40da:	5c 85       	ldd	r21, Y+12	; 0x0c
    40dc:	28 17       	cp	r18, r24
    40de:	39 07       	cpc	r19, r25
    40e0:	4a 07       	cpc	r20, r26
    40e2:	5b 07       	cpc	r21, r27
    40e4:	69 f0       	breq	.+26     	; 0x4100 <_ZN8SdVolume15allocContiguousEmPm+0x15c>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    40e6:	3f ef       	ldi	r19, 0xFF	; 255
    40e8:	83 1a       	sub	r8, r19
    40ea:	93 0a       	sbc	r9, r19
    40ec:	a3 0a       	sbc	r10, r19
    40ee:	b3 0a       	sbc	r11, r19
    40f0:	4f ef       	ldi	r20, 0xFF	; 255
    40f2:	c4 1a       	sub	r12, r20
    40f4:	d4 0a       	sbc	r13, r20
    40f6:	e4 0a       	sbc	r14, r20
    40f8:	f4 0a       	sbc	r15, r20
    40fa:	ab cf       	rjmp	.-170    	; 0x4052 <_ZN8SdVolume15allocContiguousEmPm+0xae>
    // can't find space checked all clusters
    if (n >= clusterCount_) {
      return false;
    40fc:	80 e0       	ldi	r24, 0x00	; 0
    40fe:	4d c0       	rjmp	.+154    	; 0x419a <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
    static uint8_t cacheZeroBlock(uint32_t blockNumber);
    uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
    uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
    uint8_t fatPut(uint32_t cluster, uint32_t value);
    uint8_t fatPutEOC(uint32_t cluster) {
      return fatPut(cluster, 0x0FFFFFFF);
    4100:	0f ef       	ldi	r16, 0xFF	; 255
    4102:	1f ef       	ldi	r17, 0xFF	; 255
    4104:	2f ef       	ldi	r18, 0xFF	; 255
    4106:	3f e0       	ldi	r19, 0x0F	; 15
    4108:	b7 01       	movw	r22, r14
    410a:	a6 01       	movw	r20, r12
    410c:	c1 01       	movw	r24, r2
    410e:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) {
    4112:	88 23       	and	r24, r24
    4114:	09 f4       	brne	.+2      	; 0x4118 <_ZN8SdVolume15allocContiguousEmPm+0x174>
    4116:	41 c0       	rjmp	.+130    	; 0x419a <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
    return false;
  }

  // link clusters
  while (endCluster > bgnCluster) {
    4118:	4c 14       	cp	r4, r12
    411a:	5d 04       	cpc	r5, r13
    411c:	6e 04       	cpc	r6, r14
    411e:	7f 04       	cpc	r7, r15
    4120:	98 f4       	brcc	.+38     	; 0x4148 <_ZN8SdVolume15allocContiguousEmPm+0x1a4>
    if (!fatPut(endCluster - 1, endCluster)) {
    4122:	46 01       	movw	r8, r12
    4124:	57 01       	movw	r10, r14
    4126:	51 e0       	ldi	r21, 0x01	; 1
    4128:	85 1a       	sub	r8, r21
    412a:	91 08       	sbc	r9, r1
    412c:	a1 08       	sbc	r10, r1
    412e:	b1 08       	sbc	r11, r1
    4130:	97 01       	movw	r18, r14
    4132:	86 01       	movw	r16, r12
    4134:	b5 01       	movw	r22, r10
    4136:	a4 01       	movw	r20, r8
    4138:	c1 01       	movw	r24, r2
    413a:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <_ZN8SdVolume6fatPutEmm>
    413e:	88 23       	and	r24, r24
    4140:	61 f1       	breq	.+88     	; 0x419a <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
      return false;
    }
    endCluster--;
    4142:	75 01       	movw	r14, r10
    4144:	64 01       	movw	r12, r8
    4146:	e8 cf       	rjmp	.-48     	; 0x4118 <_ZN8SdVolume15allocContiguousEmPm+0x174>
  }
  if (*curCluster != 0) {
    4148:	ad 85       	ldd	r26, Y+13	; 0x0d
    414a:	be 85       	ldd	r27, Y+14	; 0x0e
    414c:	4d 91       	ld	r20, X+
    414e:	5d 91       	ld	r21, X+
    4150:	6d 91       	ld	r22, X+
    4152:	7c 91       	ld	r23, X
    4154:	41 15       	cp	r20, r1
    4156:	51 05       	cpc	r21, r1
    4158:	61 05       	cpc	r22, r1
    415a:	71 05       	cpc	r23, r1
    415c:	39 f0       	breq	.+14     	; 0x416c <_ZN8SdVolume15allocContiguousEmPm+0x1c8>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) {
    415e:	93 01       	movw	r18, r6
    4160:	82 01       	movw	r16, r4
    4162:	c1 01       	movw	r24, r2
    4164:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <_ZN8SdVolume6fatPutEmm>
    4168:	88 23       	and	r24, r24
    416a:	b9 f0       	breq	.+46     	; 0x419a <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
      return false;
    }
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    416c:	ed 85       	ldd	r30, Y+13	; 0x0d
    416e:	fe 85       	ldd	r31, Y+14	; 0x0e
    4170:	40 82       	st	Z, r4
    4172:	51 82       	std	Z+1, r5	; 0x01
    4174:	62 82       	std	Z+2, r6	; 0x02
    4176:	73 82       	std	Z+3, r7	; 0x03

  // remember possible next free cluster
  if (setStart) {
    4178:	ff 85       	ldd	r31, Y+15	; 0x0f
    417a:	ff 23       	and	r31, r31
    417c:	69 f0       	breq	.+26     	; 0x4198 <_ZN8SdVolume15allocContiguousEmPm+0x1f4>
    allocSearchStart_ = bgnCluster + 1;
    417e:	2f ef       	ldi	r18, 0xFF	; 255
    4180:	42 1a       	sub	r4, r18
    4182:	52 0a       	sbc	r5, r18
    4184:	62 0a       	sbc	r6, r18
    4186:	72 0a       	sbc	r7, r18
    4188:	d1 01       	movw	r26, r2
    418a:	4d 92       	st	X+, r4
    418c:	5d 92       	st	X+, r5
    418e:	6d 92       	st	X+, r6
    4190:	7c 92       	st	X, r7
    4192:	13 97       	sbiw	r26, 0x03	; 3
  }

  return true;
    4194:	81 e0       	ldi	r24, 0x01	; 1
    4196:	01 c0       	rjmp	.+2      	; 0x419a <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
    4198:	81 e0       	ldi	r24, 0x01	; 1
}
    419a:	2f 96       	adiw	r28, 0x0f	; 15
    419c:	0f b6       	in	r0, 0x3f	; 63
    419e:	f8 94       	cli
    41a0:	de bf       	out	0x3e, r29	; 62
    41a2:	0f be       	out	0x3f, r0	; 63
    41a4:	cd bf       	out	0x3d, r28	; 61
    41a6:	df 91       	pop	r29
    41a8:	cf 91       	pop	r28
    41aa:	1f 91       	pop	r17
    41ac:	0f 91       	pop	r16
    41ae:	ff 90       	pop	r15
    41b0:	ef 90       	pop	r14
    41b2:	df 90       	pop	r13
    41b4:	cf 90       	pop	r12
    41b6:	bf 90       	pop	r11
    41b8:	af 90       	pop	r10
    41ba:	9f 90       	pop	r9
    41bc:	8f 90       	pop	r8
    41be:	7f 90       	pop	r7
    41c0:	6f 90       	pop	r6
    41c2:	5f 90       	pop	r5
    41c4:	4f 90       	pop	r4
    41c6:	3f 90       	pop	r3
    41c8:	2f 90       	pop	r2
    41ca:	08 95       	ret

000041cc <_ZN8SdVolume9freeChainEm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    41cc:	af 92       	push	r10
    41ce:	bf 92       	push	r11
    41d0:	cf 92       	push	r12
    41d2:	df 92       	push	r13
    41d4:	ef 92       	push	r14
    41d6:	ff 92       	push	r15
    41d8:	0f 93       	push	r16
    41da:	1f 93       	push	r17
    41dc:	cf 93       	push	r28
    41de:	df 93       	push	r29
    41e0:	00 d0       	rcall	.+0      	; 0x41e2 <_ZN8SdVolume9freeChainEm+0x16>
    41e2:	00 d0       	rcall	.+0      	; 0x41e4 <_ZN8SdVolume9freeChainEm+0x18>
    41e4:	cd b7       	in	r28, 0x3d	; 61
    41e6:	de b7       	in	r29, 0x3e	; 62
    41e8:	5c 01       	movw	r10, r24
    41ea:	6a 01       	movw	r12, r20
    41ec:	7b 01       	movw	r14, r22
  // clear free cluster location
  allocSearchStart_ = 2;
    41ee:	82 e0       	ldi	r24, 0x02	; 2
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	a0 e0       	ldi	r26, 0x00	; 0
    41f4:	b0 e0       	ldi	r27, 0x00	; 0
    41f6:	f5 01       	movw	r30, r10
    41f8:	80 83       	st	Z, r24
    41fa:	91 83       	std	Z+1, r25	; 0x01
    41fc:	a2 83       	std	Z+2, r26	; 0x02
    41fe:	b3 83       	std	Z+3, r27	; 0x03

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) {
    4200:	9e 01       	movw	r18, r28
    4202:	2f 5f       	subi	r18, 0xFF	; 255
    4204:	3f 4f       	sbci	r19, 0xFF	; 255
    4206:	b7 01       	movw	r22, r14
    4208:	a6 01       	movw	r20, r12
    420a:	c5 01       	movw	r24, r10
    420c:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <_ZNK8SdVolume6fatGetEmPm>
    4210:	88 23       	and	r24, r24
    4212:	11 f1       	breq	.+68     	; 0x4258 <_ZN8SdVolume9freeChainEm+0x8c>
      return false;
    }

    // free cluster
    if (!fatPut(cluster, 0)) {
    4214:	00 e0       	ldi	r16, 0x00	; 0
    4216:	10 e0       	ldi	r17, 0x00	; 0
    4218:	98 01       	movw	r18, r16
    421a:	b7 01       	movw	r22, r14
    421c:	a6 01       	movw	r20, r12
    421e:	c5 01       	movw	r24, r10
    4220:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <_ZN8SdVolume6fatPutEmm>
    4224:	88 23       	and	r24, r24
    4226:	c1 f0       	breq	.+48     	; 0x4258 <_ZN8SdVolume9freeChainEm+0x8c>
      return false;
    }

    cluster = next;
    4228:	c9 80       	ldd	r12, Y+1	; 0x01
    422a:	da 80       	ldd	r13, Y+2	; 0x02
    422c:	eb 80       	ldd	r14, Y+3	; 0x03
    422e:	fc 80       	ldd	r15, Y+4	; 0x04
    }
    uint8_t freeChain(uint32_t cluster);
    uint8_t isEOC(uint32_t cluster) const {
      return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    4230:	f5 01       	movw	r30, r10
    4232:	87 89       	ldd	r24, Z+23	; 0x17
    4234:	80 31       	cpi	r24, 0x10	; 16
    4236:	29 f4       	brne	.+10     	; 0x4242 <_ZN8SdVolume9freeChainEm+0x76>
    4238:	88 ef       	ldi	r24, 0xF8	; 248
    423a:	9f ef       	ldi	r25, 0xFF	; 255
    423c:	a0 e0       	ldi	r26, 0x00	; 0
    423e:	b0 e0       	ldi	r27, 0x00	; 0
    4240:	04 c0       	rjmp	.+8      	; 0x424a <_ZN8SdVolume9freeChainEm+0x7e>
    4242:	88 ef       	ldi	r24, 0xF8	; 248
    4244:	9f ef       	ldi	r25, 0xFF	; 255
    4246:	af ef       	ldi	r26, 0xFF	; 255
    4248:	bf e0       	ldi	r27, 0x0F	; 15
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    424a:	c8 16       	cp	r12, r24
    424c:	d9 06       	cpc	r13, r25
    424e:	ea 06       	cpc	r14, r26
    4250:	fb 06       	cpc	r15, r27
    4252:	b0 f2       	brcs	.-84     	; 0x4200 <_ZN8SdVolume9freeChainEm+0x34>
    }

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    4254:	81 e0       	ldi	r24, 0x01	; 1
    4256:	01 c0       	rjmp	.+2      	; 0x425a <_ZN8SdVolume9freeChainEm+0x8e>
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) {
      return false;
    4258:	80 e0       	ldi	r24, 0x00	; 0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    425a:	0f 90       	pop	r0
    425c:	0f 90       	pop	r0
    425e:	0f 90       	pop	r0
    4260:	0f 90       	pop	r0
    4262:	df 91       	pop	r29
    4264:	cf 91       	pop	r28
    4266:	1f 91       	pop	r17
    4268:	0f 91       	pop	r16
    426a:	ff 90       	pop	r15
    426c:	ef 90       	pop	r14
    426e:	df 90       	pop	r13
    4270:	cf 90       	pop	r12
    4272:	bf 90       	pop	r11
    4274:	af 90       	pop	r10
    4276:	08 95       	ret

00004278 <_ZN8SdVolume4initEP7Sd2Cardh>:
   \return The value one, true, is returned for success and
   the value zero, false, is returned for failure.  Reasons for
   failure include not finding a valid partition, not finding a valid
   FAT file system in the specified partition or an I/O error.
*/
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    4278:	4f 92       	push	r4
    427a:	5f 92       	push	r5
    427c:	6f 92       	push	r6
    427e:	7f 92       	push	r7
    4280:	8f 92       	push	r8
    4282:	9f 92       	push	r9
    4284:	af 92       	push	r10
    4286:	bf 92       	push	r11
    4288:	cf 92       	push	r12
    428a:	df 92       	push	r13
    428c:	ef 92       	push	r14
    428e:	ff 92       	push	r15
    4290:	0f 93       	push	r16
    4292:	1f 93       	push	r17
    4294:	cf 93       	push	r28
    4296:	df 93       	push	r29
    4298:	8c 01       	movw	r16, r24
    429a:	c4 2f       	mov	r28, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    429c:	70 93 46 04 	sts	0x0446, r23	; 0x800446 <_ZN8SdVolume7sdCard_E+0x1>
    42a0:	60 93 45 04 	sts	0x0445, r22	; 0x800445 <_ZN8SdVolume7sdCard_E>
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    42a4:	44 23       	and	r20, r20
    42a6:	09 f4       	brne	.+2      	; 0x42aa <_ZN8SdVolume4initEP7Sd2Cardh+0x32>
    42a8:	44 c0       	rjmp	.+136    	; 0x4332 <_ZN8SdVolume4initEP7Sd2Cardh+0xba>
    if (part > 4) {
    42aa:	45 30       	cpi	r20, 0x05	; 5
    42ac:	08 f0       	brcs	.+2      	; 0x42b0 <_ZN8SdVolume4initEP7Sd2Cardh+0x38>
    42ae:	29 c1       	rjmp	.+594    	; 0x4502 <_ZN8SdVolume4initEP7Sd2Cardh+0x28a>
      return false;
    }
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    42b0:	40 e0       	ldi	r20, 0x00	; 0
    42b2:	60 e0       	ldi	r22, 0x00	; 0
    42b4:	70 e0       	ldi	r23, 0x00	; 0
    42b6:	cb 01       	movw	r24, r22
    42b8:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <_ZN8SdVolume13cacheRawBlockEmh>
    42bc:	88 23       	and	r24, r24
    42be:	09 f4       	brne	.+2      	; 0x42c2 <_ZN8SdVolume4initEP7Sd2Cardh+0x4a>
    42c0:	2b c1       	rjmp	.+598    	; 0x4518 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
      return false;
    }
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    42c2:	4c 2f       	mov	r20, r28
    42c4:	50 e0       	ldi	r21, 0x00	; 0
    42c6:	41 50       	subi	r20, 0x01	; 1
    42c8:	51 09       	sbc	r21, r1
    if ((p->boot & 0X7F) != 0  ||
    42ca:	fa 01       	movw	r30, r20
    42cc:	e2 95       	swap	r30
    42ce:	f2 95       	swap	r31
    42d0:	f0 7f       	andi	r31, 0xF0	; 240
    42d2:	fe 27       	eor	r31, r30
    42d4:	e0 7f       	andi	r30, 0xF0	; 240
    42d6:	fe 27       	eor	r31, r30
    42d8:	eb 5f       	subi	r30, 0xFB	; 251
    42da:	f9 4f       	sbci	r31, 0xF9	; 249
    42dc:	80 81       	ld	r24, Z
    42de:	8f 77       	andi	r24, 0x7F	; 127
    42e0:	09 f0       	breq	.+2      	; 0x42e4 <_ZN8SdVolume4initEP7Sd2Cardh+0x6c>
    42e2:	11 c1       	rjmp	.+546    	; 0x4506 <_ZN8SdVolume4initEP7Sd2Cardh+0x28e>
        p->totalSectors < 100 ||
    42e4:	fa 01       	movw	r30, r20
    42e6:	e2 95       	swap	r30
    42e8:	f2 95       	swap	r31
    42ea:	f0 7f       	andi	r31, 0xF0	; 240
    42ec:	fe 27       	eor	r31, r30
    42ee:	e0 7f       	andi	r30, 0xF0	; 240
    42f0:	fe 27       	eor	r31, r30
    42f2:	ef 5e       	subi	r30, 0xEF	; 239
    42f4:	f9 4f       	sbci	r31, 0xF9	; 249
    42f6:	c0 80       	ld	r12, Z
    42f8:	d1 80       	ldd	r13, Z+1	; 0x01
    42fa:	e2 80       	ldd	r14, Z+2	; 0x02
    42fc:	f3 80       	ldd	r15, Z+3	; 0x03
    }
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
      return false;
    }
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0  ||
    42fe:	24 e6       	ldi	r18, 0x64	; 100
    4300:	c2 16       	cp	r12, r18
    4302:	d1 04       	cpc	r13, r1
    4304:	e1 04       	cpc	r14, r1
    4306:	f1 04       	cpc	r15, r1
    4308:	08 f4       	brcc	.+2      	; 0x430c <_ZN8SdVolume4initEP7Sd2Cardh+0x94>
    430a:	06 c1       	rjmp	.+524    	; 0x4518 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
        p->totalSectors < 100 ||
        p->firstSector == 0) {
    430c:	42 95       	swap	r20
    430e:	52 95       	swap	r21
    4310:	50 7f       	andi	r21, 0xF0	; 240
    4312:	54 27       	eor	r21, r20
    4314:	40 7f       	andi	r20, 0xF0	; 240
    4316:	54 27       	eor	r21, r20
    4318:	fa 01       	movw	r30, r20
    431a:	e3 5f       	subi	r30, 0xF3	; 243
    431c:	f9 4f       	sbci	r31, 0xF9	; 249
    431e:	c0 80       	ld	r12, Z
    4320:	d1 80       	ldd	r13, Z+1	; 0x01
    4322:	e2 80       	ldd	r14, Z+2	; 0x02
    4324:	f3 80       	ldd	r15, Z+3	; 0x03
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
      return false;
    }
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0  ||
        p->totalSectors < 100 ||
    4326:	c1 14       	cp	r12, r1
    4328:	d1 04       	cpc	r13, r1
    432a:	e1 04       	cpc	r14, r1
    432c:	f1 04       	cpc	r15, r1
    432e:	21 f4       	brne	.+8      	; 0x4338 <_ZN8SdVolume4initEP7Sd2Cardh+0xc0>
    4330:	f3 c0       	rjmp	.+486    	; 0x4518 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
   the value zero, false, is returned for failure.  Reasons for
   failure include not finding a valid partition, not finding a valid
   FAT file system in the specified partition or an I/O error.
*/
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    4332:	c1 2c       	mov	r12, r1
    4334:	d1 2c       	mov	r13, r1
    4336:	76 01       	movw	r14, r12
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    4338:	40 e0       	ldi	r20, 0x00	; 0
    433a:	c7 01       	movw	r24, r14
    433c:	b6 01       	movw	r22, r12
    433e:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <_ZN8SdVolume13cacheRawBlockEmh>
    4342:	88 23       	and	r24, r24
    4344:	09 f4       	brne	.+2      	; 0x4348 <_ZN8SdVolume4initEP7Sd2Cardh+0xd0>
    4346:	e8 c0       	rjmp	.+464    	; 0x4518 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    4348:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <_ZN8SdVolume12cacheBuffer_E+0xb>
    434c:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <_ZN8SdVolume12cacheBuffer_E+0xc>
    4350:	81 15       	cp	r24, r1
    4352:	92 40       	sbci	r25, 0x02	; 2
    4354:	09 f0       	breq	.+2      	; 0x4358 <_ZN8SdVolume4initEP7Sd2Cardh+0xe0>
    4356:	d9 c0       	rjmp	.+434    	; 0x450a <_ZN8SdVolume4initEP7Sd2Cardh+0x292>
      bpb->fatCount == 0 ||
    4358:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <_ZN8SdVolume12cacheBuffer_E+0x10>
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    435c:	88 23       	and	r24, r24
    435e:	09 f4       	brne	.+2      	; 0x4362 <_ZN8SdVolume4initEP7Sd2Cardh+0xea>
    4360:	db c0       	rjmp	.+438    	; 0x4518 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
      bpb->fatCount == 0 ||
      bpb->reservedSectorCount == 0 ||
    4362:	20 91 55 04 	lds	r18, 0x0455	; 0x800455 <_ZN8SdVolume12cacheBuffer_E+0xe>
    4366:	30 91 56 04 	lds	r19, 0x0456	; 0x800456 <_ZN8SdVolume12cacheBuffer_E+0xf>
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
      bpb->fatCount == 0 ||
    436a:	23 2b       	or	r18, r19
    436c:	09 f4       	brne	.+2      	; 0x4370 <_ZN8SdVolume4initEP7Sd2Cardh+0xf8>
    436e:	cf c0       	rjmp	.+414    	; 0x450e <_ZN8SdVolume4initEP7Sd2Cardh+0x296>
      bpb->reservedSectorCount == 0 ||
      bpb->sectorsPerCluster == 0) {
    4370:	60 91 54 04 	lds	r22, 0x0454	; 0x800454 <_ZN8SdVolume12cacheBuffer_E+0xd>
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
      bpb->fatCount == 0 ||
      bpb->reservedSectorCount == 0 ||
    4374:	66 23       	and	r22, r22
    4376:	09 f4       	brne	.+2      	; 0x437a <_ZN8SdVolume4initEP7Sd2Cardh+0x102>
    4378:	cc c0       	rjmp	.+408    	; 0x4512 <_ZN8SdVolume4initEP7Sd2Cardh+0x29a>
      bpb->sectorsPerCluster == 0) {
    // not valid FAT volume
    return false;
  }
  fatCount_ = bpb->fatCount;
    437a:	e8 01       	movw	r28, r16
    437c:	8a 8b       	std	Y+18, r24	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    437e:	6c 83       	std	Y+4, r22	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    4380:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    4382:	f8 01       	movw	r30, r16
    4384:	85 85       	ldd	r24, Z+13	; 0x0d
    4386:	e8 2f       	mov	r30, r24
    4388:	21 e0       	ldi	r18, 0x01	; 1
    438a:	30 e0       	ldi	r19, 0x00	; 0
    438c:	08 2e       	mov	r0, r24
    438e:	02 c0       	rjmp	.+4      	; 0x4394 <_ZN8SdVolume4initEP7Sd2Cardh+0x11c>
    4390:	22 0f       	add	r18, r18
    4392:	33 1f       	adc	r19, r19
    4394:	0a 94       	dec	r0
    4396:	e2 f7       	brpl	.-8      	; 0x4390 <_ZN8SdVolume4initEP7Sd2Cardh+0x118>
    4398:	46 2f       	mov	r20, r22
    439a:	50 e0       	ldi	r21, 0x00	; 0
    439c:	42 17       	cp	r20, r18
    439e:	53 07       	cpc	r21, r19
    43a0:	41 f0       	breq	.+16     	; 0x43b2 <_ZN8SdVolume4initEP7Sd2Cardh+0x13a>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) {
    43a2:	91 e0       	ldi	r25, 0x01	; 1
    43a4:	98 0f       	add	r25, r24
    43a6:	d8 01       	movw	r26, r16
    43a8:	1d 96       	adiw	r26, 0x0d	; 13
    43aa:	9c 93       	st	X, r25
    43ac:	88 30       	cpi	r24, 0x08	; 8
    43ae:	48 f3       	brcs	.-46     	; 0x4382 <_ZN8SdVolume4initEP7Sd2Cardh+0x10a>
    43b0:	b2 c0       	rjmp	.+356    	; 0x4516 <_ZN8SdVolume4initEP7Sd2Cardh+0x29e>
      return false;
    }
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    43b2:	20 91 5d 04 	lds	r18, 0x045D	; 0x80045d <_ZN8SdVolume12cacheBuffer_E+0x16>
    43b6:	30 91 5e 04 	lds	r19, 0x045E	; 0x80045e <_ZN8SdVolume12cacheBuffer_E+0x17>
                  bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    43ba:	21 15       	cp	r18, r1
    43bc:	31 05       	cpc	r19, r1
    43be:	19 f0       	breq	.+6      	; 0x43c6 <_ZN8SdVolume4initEP7Sd2Cardh+0x14e>
    43c0:	40 e0       	ldi	r20, 0x00	; 0
    43c2:	50 e0       	ldi	r21, 0x00	; 0
    43c4:	08 c0       	rjmp	.+16     	; 0x43d6 <_ZN8SdVolume4initEP7Sd2Cardh+0x15e>
    43c6:	20 91 6b 04 	lds	r18, 0x046B	; 0x80046b <_ZN8SdVolume12cacheBuffer_E+0x24>
    43ca:	30 91 6c 04 	lds	r19, 0x046C	; 0x80046c <_ZN8SdVolume12cacheBuffer_E+0x25>
    43ce:	40 91 6d 04 	lds	r20, 0x046D	; 0x80046d <_ZN8SdVolume12cacheBuffer_E+0x26>
    43d2:	50 91 6e 04 	lds	r21, 0x046E	; 0x80046e <_ZN8SdVolume12cacheBuffer_E+0x27>
    43d6:	e8 01       	movw	r28, r16
    43d8:	2d 83       	std	Y+5, r18	; 0x05
    43da:	3e 83       	std	Y+6, r19	; 0x06
    43dc:	4f 83       	std	Y+7, r20	; 0x07
    43de:	58 87       	std	Y+8, r21	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    43e0:	0f 2e       	mov	r0, r31
    43e2:	f7 e4       	ldi	r31, 0x47	; 71
    43e4:	af 2e       	mov	r10, r31
    43e6:	f4 e0       	ldi	r31, 0x04	; 4
    43e8:	bf 2e       	mov	r11, r31
    43ea:	f0 2d       	mov	r31, r0
    43ec:	d5 01       	movw	r26, r10
    43ee:	1e 96       	adiw	r26, 0x0e	; 14
    43f0:	8d 91       	ld	r24, X+
    43f2:	9c 91       	ld	r25, X
    43f4:	1f 97       	sbiw	r26, 0x0f	; 15
    43f6:	26 01       	movw	r4, r12
    43f8:	37 01       	movw	r6, r14
    43fa:	48 0e       	add	r4, r24
    43fc:	59 1e       	adc	r5, r25
    43fe:	61 1c       	adc	r6, r1
    4400:	71 1c       	adc	r7, r1
    4402:	4b 8a       	std	Y+19, r4	; 0x13
    4404:	5c 8a       	std	Y+20, r5	; 0x14
    4406:	6d 8a       	std	Y+21, r6	; 0x15
    4408:	7e 8a       	std	Y+22, r7	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    440a:	51 96       	adiw	r26, 0x11	; 17
    440c:	8d 90       	ld	r8, X+
    440e:	9c 90       	ld	r9, X
    4410:	52 97       	sbiw	r26, 0x12	; 18
    4412:	99 8e       	std	Y+25, r9	; 0x19
    4414:	88 8e       	std	Y+24, r8	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    4416:	50 96       	adiw	r26, 0x10	; 16
    4418:	8c 91       	ld	r24, X
    441a:	a8 2f       	mov	r26, r24
    441c:	b0 e0       	ldi	r27, 0x00	; 0
    441e:	0e 94 2d 30 	call	0x605a	; 0x605a <__muluhisi3>
    4422:	dc 01       	movw	r26, r24
    4424:	cb 01       	movw	r24, r22
    4426:	84 0d       	add	r24, r4
    4428:	95 1d       	adc	r25, r5
    442a:	a6 1d       	adc	r26, r6
    442c:	b7 1d       	adc	r27, r7
    442e:	8a 8f       	std	Y+26, r24	; 0x1a
    4430:	9b 8f       	std	Y+27, r25	; 0x1b
    4432:	ac 8f       	std	Y+28, r26	; 0x1c
    4434:	bd 8f       	std	Y+29, r27	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511) / 512);
    4436:	e4 01       	movw	r28, r8
    4438:	cc 0f       	add	r28, r28
    443a:	dd 1f       	adc	r29, r29
    443c:	c2 95       	swap	r28
    443e:	d2 95       	swap	r29
    4440:	d0 7f       	andi	r29, 0xF0	; 240
    4442:	dc 27       	eor	r29, r28
    4444:	c0 7f       	andi	r28, 0xF0	; 240
    4446:	dc 27       	eor	r29, r28
    4448:	c1 50       	subi	r28, 0x01	; 1
    444a:	de 4f       	sbci	r29, 0xFE	; 254
    444c:	cd 2f       	mov	r28, r29
    444e:	dd 27       	eor	r29, r29
    4450:	c6 95       	lsr	r28
    4452:	8c 0f       	add	r24, r28
    4454:	9d 1f       	adc	r25, r29
    4456:	a1 1d       	adc	r26, r1
    4458:	b1 1d       	adc	r27, r1
    445a:	e8 01       	movw	r28, r16
    445c:	8e 87       	std	Y+14, r24	; 0x0e
    445e:	9f 87       	std	Y+15, r25	; 0x0f
    4460:	a8 8b       	std	Y+16, r26	; 0x10
    4462:	b9 8b       	std	Y+17, r27	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    4464:	e5 01       	movw	r28, r10
    4466:	4b 88       	ldd	r4, Y+19	; 0x13
    4468:	5c 88       	ldd	r5, Y+20	; 0x14
                         bpb->totalSectors16 : bpb->totalSectors32;
    446a:	41 14       	cp	r4, r1
    446c:	51 04       	cpc	r5, r1
    446e:	19 f0       	breq	.+6      	; 0x4476 <_ZN8SdVolume4initEP7Sd2Cardh+0x1fe>
    4470:	61 2c       	mov	r6, r1
    4472:	71 2c       	mov	r7, r1
    4474:	08 c0       	rjmp	.+16     	; 0x4486 <_ZN8SdVolume4initEP7Sd2Cardh+0x20e>
    4476:	40 90 67 04 	lds	r4, 0x0467	; 0x800467 <_ZN8SdVolume12cacheBuffer_E+0x20>
    447a:	50 90 68 04 	lds	r5, 0x0468	; 0x800468 <_ZN8SdVolume12cacheBuffer_E+0x21>
    447e:	60 90 69 04 	lds	r6, 0x0469	; 0x800469 <_ZN8SdVolume12cacheBuffer_E+0x22>
    4482:	70 90 6a 04 	lds	r7, 0x046A	; 0x80046a <_ZN8SdVolume12cacheBuffer_E+0x23>
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
    4486:	c8 1a       	sub	r12, r24
    4488:	d9 0a       	sbc	r13, r25
    448a:	ea 0a       	sbc	r14, r26
    448c:	fb 0a       	sbc	r15, r27
    448e:	c4 0c       	add	r12, r4
    4490:	d5 1c       	adc	r13, r5
    4492:	e6 1c       	adc	r14, r6
    4494:	f7 1c       	adc	r15, r7

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    4496:	04 c0       	rjmp	.+8      	; 0x44a0 <_ZN8SdVolume4initEP7Sd2Cardh+0x228>
    4498:	f6 94       	lsr	r15
    449a:	e7 94       	ror	r14
    449c:	d7 94       	ror	r13
    449e:	c7 94       	ror	r12
    44a0:	ea 95       	dec	r30
    44a2:	d2 f7       	brpl	.-12     	; 0x4498 <_ZN8SdVolume4initEP7Sd2Cardh+0x220>
    44a4:	f8 01       	movw	r30, r16
    44a6:	c1 86       	std	Z+9, r12	; 0x09
    44a8:	d2 86       	std	Z+10, r13	; 0x0a
    44aa:	e3 86       	std	Z+11, r14	; 0x0b
    44ac:	f4 86       	std	Z+12, r15	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    44ae:	f5 ef       	ldi	r31, 0xF5	; 245
    44b0:	cf 16       	cp	r12, r31
    44b2:	ff e0       	ldi	r31, 0x0F	; 15
    44b4:	df 06       	cpc	r13, r31
    44b6:	e1 04       	cpc	r14, r1
    44b8:	f1 04       	cpc	r15, r1
    44ba:	30 f4       	brcc	.+12     	; 0x44c8 <_ZN8SdVolume4initEP7Sd2Cardh+0x250>
    fatType_ = 12;
    44bc:	8c e0       	ldi	r24, 0x0C	; 12
    44be:	d8 01       	movw	r26, r16
    44c0:	57 96       	adiw	r26, 0x17	; 23
    44c2:	8c 93       	st	X, r24
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    44c4:	81 e0       	ldi	r24, 0x01	; 1
    44c6:	28 c0       	rjmp	.+80     	; 0x4518 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  clusterCount_ >>= clusterSizeShift_;

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    44c8:	b5 ef       	ldi	r27, 0xF5	; 245
    44ca:	cb 16       	cp	r12, r27
    44cc:	bf ef       	ldi	r27, 0xFF	; 255
    44ce:	db 06       	cpc	r13, r27
    44d0:	e1 04       	cpc	r14, r1
    44d2:	f1 04       	cpc	r15, r1
    44d4:	28 f4       	brcc	.+10     	; 0x44e0 <_ZN8SdVolume4initEP7Sd2Cardh+0x268>
    fatType_ = 16;
    44d6:	80 e1       	ldi	r24, 0x10	; 16
    44d8:	e8 01       	movw	r28, r16
    44da:	8f 8b       	std	Y+23, r24	; 0x17
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    44dc:	81 e0       	ldi	r24, 0x01	; 1
    44de:	1c c0       	rjmp	.+56     	; 0x4518 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    44e0:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <_ZN8SdVolume12cacheBuffer_E+0x2c>
    44e4:	90 91 74 04 	lds	r25, 0x0474	; 0x800474 <_ZN8SdVolume12cacheBuffer_E+0x2d>
    44e8:	a0 91 75 04 	lds	r26, 0x0475	; 0x800475 <_ZN8SdVolume12cacheBuffer_E+0x2e>
    44ec:	b0 91 76 04 	lds	r27, 0x0476	; 0x800476 <_ZN8SdVolume12cacheBuffer_E+0x2f>
    44f0:	f8 01       	movw	r30, r16
    44f2:	82 8f       	std	Z+26, r24	; 0x1a
    44f4:	93 8f       	std	Z+27, r25	; 0x1b
    44f6:	a4 8f       	std	Z+28, r26	; 0x1c
    44f8:	b5 8f       	std	Z+29, r27	; 0x1d
    fatType_ = 32;
    44fa:	80 e2       	ldi	r24, 0x20	; 32
    44fc:	87 8b       	std	Z+23, r24	; 0x17
  }
  return true;
    44fe:	81 e0       	ldi	r24, 0x01	; 1
    4500:	0b c0       	rjmp	.+22     	; 0x4518 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  sdCard_ = dev;
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4) {
      return false;
    4502:	80 e0       	ldi	r24, 0x00	; 0
    4504:	09 c0       	rjmp	.+18     	; 0x4518 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0  ||
        p->totalSectors < 100 ||
        p->firstSector == 0) {
      // not a valid partition
      return false;
    4506:	80 e0       	ldi	r24, 0x00	; 0
    4508:	07 c0       	rjmp	.+14     	; 0x4518 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  if (bpb->bytesPerSector != 512 ||
      bpb->fatCount == 0 ||
      bpb->reservedSectorCount == 0 ||
      bpb->sectorsPerCluster == 0) {
    // not valid FAT volume
    return false;
    450a:	80 e0       	ldi	r24, 0x00	; 0
    450c:	05 c0       	rjmp	.+10     	; 0x4518 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    450e:	80 e0       	ldi	r24, 0x00	; 0
    4510:	03 c0       	rjmp	.+6      	; 0x4518 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    4512:	86 2f       	mov	r24, r22
    4514:	01 c0       	rjmp	.+2      	; 0x4518 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    // error if not power of 2
    if (clusterSizeShift_++ > 7) {
      return false;
    4516:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
}
    4518:	df 91       	pop	r29
    451a:	cf 91       	pop	r28
    451c:	1f 91       	pop	r17
    451e:	0f 91       	pop	r16
    4520:	ff 90       	pop	r15
    4522:	ef 90       	pop	r14
    4524:	df 90       	pop	r13
    4526:	cf 90       	pop	r12
    4528:	bf 90       	pop	r11
    452a:	af 90       	pop	r10
    452c:	9f 90       	pop	r9
    452e:	8f 90       	pop	r8
    4530:	7f 90       	pop	r7
    4532:	6f 90       	pop	r6
    4534:	5f 90       	pop	r5
    4536:	4f 90       	pop	r4
    4538:	08 95       	ret

0000453a <_ZN9LCDScreenC1Eh>:
	_cols = lcd_cols;
	_rows = lcd_rows;
	_charsize = charsize;
	_backlightval = LCD_BACKLIGHT;
} */
LCDScreen::LCDScreen(uint8_t lcd_addr)
    453a:	fc 01       	movw	r30, r24
  public:
    Print() : write_error(0) {}
    453c:	13 82       	std	Z+3, r1	; 0x03
    453e:	12 82       	std	Z+2, r1	; 0x02
    4540:	86 ec       	ldi	r24, 0xC6	; 198
    4542:	91 e0       	ldi	r25, 0x01	; 1
    4544:	91 83       	std	Z+1, r25	; 0x01
    4546:	80 83       	st	Z, r24
{
	_addr = lcd_addr;
    4548:	64 83       	std	Z+4, r22	; 0x04
    454a:	08 95       	ret

0000454c <_ZN9LCDScreen13expanderWriteEh>:
void LCDScreen::write4bits(uint8_t value) {
	expanderWrite(value);
	pulseEnable(value);
}

void LCDScreen::expanderWrite(uint8_t _data){
    454c:	cf 93       	push	r28
    454e:	c6 2f       	mov	r28, r22
	Wire.beginTransmission(_addr);
    4550:	fc 01       	movw	r30, r24
    4552:	64 81       	ldd	r22, Z+4	; 0x04
    4554:	8c e9       	ldi	r24, 0x9C	; 156
    4556:	93 e0       	ldi	r25, 0x03	; 3
    4558:	0e 94 1d 0c 	call	0x183a	; 0x183a <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((int)(_data) | 0x08);
    455c:	6c 2f       	mov	r22, r28
    455e:	68 60       	ori	r22, 0x08	; 8
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    4560:	e0 91 9c 03 	lds	r30, 0x039C	; 0x80039c <Wire>
    4564:	f0 91 9d 03 	lds	r31, 0x039D	; 0x80039d <Wire+0x1>
    4568:	01 90       	ld	r0, Z+
    456a:	f0 81       	ld	r31, Z
    456c:	e0 2d       	mov	r30, r0
    456e:	8c e9       	ldi	r24, 0x9C	; 156
    4570:	93 e0       	ldi	r25, 0x03	; 3
    4572:	09 95       	icall
	Wire.endTransmission();
    4574:	8c e9       	ldi	r24, 0x9C	; 156
    4576:	93 e0       	ldi	r25, 0x03	; 3
    4578:	0e 94 3a 0c 	call	0x1874	; 0x1874 <_ZN7TwoWire15endTransmissionEv>
}
    457c:	cf 91       	pop	r28
    457e:	08 95       	ret

00004580 <_ZN9LCDScreen11pulseEnableEh>:

void LCDScreen::pulseEnable(uint8_t _data){
    4580:	0f 93       	push	r16
    4582:	1f 93       	push	r17
    4584:	cf 93       	push	r28
    4586:	8c 01       	movw	r16, r24
    4588:	c6 2f       	mov	r28, r22
	expanderWrite(_data | En);	// En high
    458a:	64 60       	ori	r22, 0x04	; 4
    458c:	0e 94 a6 22 	call	0x454c	; 0x454c <_ZN9LCDScreen13expanderWriteEh>
	delayMicroseconds(1);		// enable pulse must be >450ns
    4590:	81 e0       	ldi	r24, 0x01	; 1
    4592:	90 e0       	ldi	r25, 0x00	; 0
    4594:	0e 94 d3 05 	call	0xba6	; 0xba6 <delayMicroseconds>

	expanderWrite(_data & ~En);	// En low
    4598:	6c 2f       	mov	r22, r28
    459a:	6b 7f       	andi	r22, 0xFB	; 251
    459c:	c8 01       	movw	r24, r16
    459e:	0e 94 a6 22 	call	0x454c	; 0x454c <_ZN9LCDScreen13expanderWriteEh>
	delayMicroseconds(50);		// commands need > 37us to settle
    45a2:	82 e3       	ldi	r24, 0x32	; 50
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	0e 94 d3 05 	call	0xba6	; 0xba6 <delayMicroseconds>
}
    45aa:	cf 91       	pop	r28
    45ac:	1f 91       	pop	r17
    45ae:	0f 91       	pop	r16
    45b0:	08 95       	ret

000045b2 <_ZN9LCDScreen10write4bitsEh>:
	uint8_t lownib=(value<<4)&0xf0;
	write4bits((highnib)|mode);
	write4bits((lownib)|mode);
}

void LCDScreen::write4bits(uint8_t value) {
    45b2:	1f 93       	push	r17
    45b4:	cf 93       	push	r28
    45b6:	df 93       	push	r29
    45b8:	ec 01       	movw	r28, r24
    45ba:	16 2f       	mov	r17, r22
	expanderWrite(value);
    45bc:	0e 94 a6 22 	call	0x454c	; 0x454c <_ZN9LCDScreen13expanderWriteEh>
	pulseEnable(value);
    45c0:	61 2f       	mov	r22, r17
    45c2:	ce 01       	movw	r24, r28
    45c4:	0e 94 c0 22 	call	0x4580	; 0x4580 <_ZN9LCDScreen11pulseEnableEh>
}
    45c8:	df 91       	pop	r29
    45ca:	cf 91       	pop	r28
    45cc:	1f 91       	pop	r17
    45ce:	08 95       	ret

000045d0 <_ZN9LCDScreen4sendEhh>:


/************ low level data pushing commands **********/

// write either command or data
void LCDScreen::send(uint8_t value, uint8_t mode) {
    45d0:	ff 92       	push	r15
    45d2:	0f 93       	push	r16
    45d4:	1f 93       	push	r17
    45d6:	cf 93       	push	r28
    45d8:	df 93       	push	r29
    45da:	8c 01       	movw	r16, r24
    45dc:	f4 2e       	mov	r15, r20
	uint8_t highnib=value&0xf0;
    45de:	86 2f       	mov	r24, r22
    45e0:	80 7f       	andi	r24, 0xF0	; 240
	uint8_t lownib=(value<<4)&0xf0;
    45e2:	90 e1       	ldi	r25, 0x10	; 16
    45e4:	69 9f       	mul	r22, r25
    45e6:	e0 01       	movw	r28, r0
    45e8:	11 24       	eor	r1, r1
	write4bits((highnib)|mode);
    45ea:	68 2f       	mov	r22, r24
    45ec:	64 2b       	or	r22, r20
    45ee:	c8 01       	movw	r24, r16
    45f0:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <_ZN9LCDScreen10write4bitsEh>
	write4bits((lownib)|mode);
    45f4:	6c 2f       	mov	r22, r28
    45f6:	6f 29       	or	r22, r15
    45f8:	c8 01       	movw	r24, r16
    45fa:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <_ZN9LCDScreen10write4bitsEh>
}
    45fe:	df 91       	pop	r29
    4600:	cf 91       	pop	r28
    4602:	1f 91       	pop	r17
    4604:	0f 91       	pop	r16
    4606:	ff 90       	pop	r15
    4608:	08 95       	ret

0000460a <_ZN9LCDScreen5clearEv>:
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
    460a:	40 e0       	ldi	r20, 0x00	; 0
    460c:	61 e0       	ldi	r22, 0x01	; 1
    460e:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <_ZN9LCDScreen4sendEhh>
}

/********** high level commands, for the user! */
void LCDScreen::clear(){
	command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
    4612:	80 ed       	ldi	r24, 0xD0	; 208
    4614:	97 e0       	ldi	r25, 0x07	; 7
    4616:	0e 94 d3 05 	call	0xba6	; 0xba6 <delayMicroseconds>
    461a:	08 95       	ret

0000461c <_ZN9LCDScreen4homeEv>:
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
    461c:	40 e0       	ldi	r20, 0x00	; 0
    461e:	62 e0       	ldi	r22, 0x02	; 2
    4620:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <_ZN9LCDScreen4sendEhh>
	delayMicroseconds(2000);  // this command takes a long time!
}

void LCDScreen::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	delayMicroseconds(2000);  // this command takes a long time!
    4624:	80 ed       	ldi	r24, 0xD0	; 208
    4626:	97 e0       	ldi	r25, 0x07	; 7
    4628:	0e 94 d3 05 	call	0xba6	; 0xba6 <delayMicroseconds>
    462c:	08 95       	ret

0000462e <_ZN9LCDScreen9setCursorEhh>:
} 

void LCDScreen::setCursor(uint8_t col, uint8_t row){
    462e:	cf 93       	push	r28
    4630:	df 93       	push	r29
    4632:	cd b7       	in	r28, 0x3d	; 61
    4634:	de b7       	in	r29, 0x3e	; 62
    4636:	28 97       	sbiw	r28, 0x08	; 8
    4638:	0f b6       	in	r0, 0x3f	; 63
    463a:	f8 94       	cli
    463c:	de bf       	out	0x3e, r29	; 62
    463e:	0f be       	out	0x3f, r0	; 63
    4640:	cd bf       	out	0x3d, r28	; 61
    4642:	9c 01       	movw	r18, r24
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
    4644:	98 e0       	ldi	r25, 0x08	; 8
    4646:	e2 e1       	ldi	r30, 0x12	; 18
    4648:	f1 e0       	ldi	r31, 0x01	; 1
    464a:	de 01       	movw	r26, r28
    464c:	11 96       	adiw	r26, 0x01	; 1
    464e:	01 90       	ld	r0, Z+
    4650:	0d 92       	st	X+, r0
    4652:	9a 95       	dec	r25
    4654:	e1 f7       	brne	.-8      	; 0x464e <_ZN9LCDScreen9setCursorEhh+0x20>
	if (row > 2) {
    4656:	43 30       	cpi	r20, 0x03	; 3
    4658:	08 f0       	brcs	.+2      	; 0x465c <_ZN9LCDScreen9setCursorEhh+0x2e>
		row = 1;    // we count rows starting w/0
    465a:	41 e0       	ldi	r20, 0x01	; 1
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
    465c:	e4 2f       	mov	r30, r20
    465e:	f0 e0       	ldi	r31, 0x00	; 0
    4660:	ee 0f       	add	r30, r30
    4662:	ff 1f       	adc	r31, r31
    4664:	81 e0       	ldi	r24, 0x01	; 1
    4666:	90 e0       	ldi	r25, 0x00	; 0
    4668:	8c 0f       	add	r24, r28
    466a:	9d 1f       	adc	r25, r29
    466c:	e8 0f       	add	r30, r24
    466e:	f9 1f       	adc	r31, r25
    4670:	90 81       	ld	r25, Z
    4672:	69 0f       	add	r22, r25
    4674:	60 68       	ori	r22, 0x80	; 128
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
    4676:	40 e0       	ldi	r20, 0x00	; 0
    4678:	c9 01       	movw	r24, r18
    467a:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <_ZN9LCDScreen4sendEhh>
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (row > 2) {
		row = 1;    // we count rows starting w/0
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
}
    467e:	28 96       	adiw	r28, 0x08	; 8
    4680:	0f b6       	in	r0, 0x3f	; 63
    4682:	f8 94       	cli
    4684:	de bf       	out	0x3e, r29	; 62
    4686:	0f be       	out	0x3f, r0	; 63
    4688:	cd bf       	out	0x3d, r28	; 61
    468a:	df 91       	pop	r29
    468c:	cf 91       	pop	r28
    468e:	08 95       	ret

00004690 <_ZN9LCDScreen7displayEv>:


void LCDScreen::display() {
	_displaycontrol |= LCD_DISPLAYON;
    4690:	fc 01       	movw	r30, r24
    4692:	66 81       	ldd	r22, Z+6	; 0x06
    4694:	26 2f       	mov	r18, r22
    4696:	24 60       	ori	r18, 0x04	; 4
    4698:	26 83       	std	Z+6, r18	; 0x06
	command(LCD_DISPLAYCONTROL | _displaycontrol);
    469a:	6c 60       	ori	r22, 0x0C	; 12
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
    469c:	40 e0       	ldi	r20, 0x00	; 0
    469e:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <_ZN9LCDScreen4sendEhh>
    46a2:	08 95       	ret

000046a4 <_ZN9LCDScreen5writeEh>:
}

inline size_t LCDScreen::write(uint8_t value) {
	send(value, Rs);
    46a4:	41 e0       	ldi	r20, 0x01	; 1
    46a6:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <_ZN9LCDScreen4sendEhh>
	return 1;
}
    46aa:	81 e0       	ldi	r24, 0x01	; 1
    46ac:	90 e0       	ldi	r25, 0x00	; 0
    46ae:	08 95       	ret

000046b0 <_ZN9LCDScreen5beginEv>:
} */
LCDScreen::LCDScreen(uint8_t lcd_addr)
{
	_addr = lcd_addr;
}
void LCDScreen::begin() {
    46b0:	cf 93       	push	r28
    46b2:	df 93       	push	r29
    46b4:	ec 01       	movw	r28, r24
	Wire.begin();
    46b6:	8c e9       	ldi	r24, 0x9C	; 156
    46b8:	93 e0       	ldi	r25, 0x03	; 3
    46ba:	0e 94 0a 0c 	call	0x1814	; 0x1814 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	_displayfunction |= LCD_2LINE;
    46be:	88 e0       	ldi	r24, 0x08	; 8
    46c0:	8d 83       	std	Y+5, r24	; 0x05
	} */

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	delay(50);
    46c2:	62 e3       	ldi	r22, 0x32	; 50
    46c4:	70 e0       	ldi	r23, 0x00	; 0
    46c6:	80 e0       	ldi	r24, 0x00	; 0
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	0e 94 96 05 	call	0xb2c	; 0xb2c <delay>

	// Now we pull both RS and R/W low to begin commands
	expanderWrite(0x08);	// reset expanderand turn backlight off (Bit 8 =1)
    46ce:	68 e0       	ldi	r22, 0x08	; 8
    46d0:	ce 01       	movw	r24, r28
    46d2:	0e 94 a6 22 	call	0x454c	; 0x454c <_ZN9LCDScreen13expanderWriteEh>
	delay(1000);
    46d6:	68 ee       	ldi	r22, 0xE8	; 232
    46d8:	73 e0       	ldi	r23, 0x03	; 3
    46da:	80 e0       	ldi	r24, 0x00	; 0
    46dc:	90 e0       	ldi	r25, 0x00	; 0
    46de:	0e 94 96 05 	call	0xb2c	; 0xb2c <delay>
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
	write4bits(0x03 << 4);
    46e2:	60 e3       	ldi	r22, 0x30	; 48
    46e4:	ce 01       	movw	r24, r28
    46e6:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <_ZN9LCDScreen10write4bitsEh>
	delayMicroseconds(4500); // wait min 4.1ms
    46ea:	84 e9       	ldi	r24, 0x94	; 148
    46ec:	91 e1       	ldi	r25, 0x11	; 17
    46ee:	0e 94 d3 05 	call	0xba6	; 0xba6 <delayMicroseconds>

	// second try
	write4bits(0x03 << 4);
    46f2:	60 e3       	ldi	r22, 0x30	; 48
    46f4:	ce 01       	movw	r24, r28
    46f6:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <_ZN9LCDScreen10write4bitsEh>
	delayMicroseconds(4500); // wait min 4.1ms
    46fa:	84 e9       	ldi	r24, 0x94	; 148
    46fc:	91 e1       	ldi	r25, 0x11	; 17
    46fe:	0e 94 d3 05 	call	0xba6	; 0xba6 <delayMicroseconds>

	// third go!
	write4bits(0x03 << 4);
    4702:	60 e3       	ldi	r22, 0x30	; 48
    4704:	ce 01       	movw	r24, r28
    4706:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <_ZN9LCDScreen10write4bitsEh>
	delayMicroseconds(150);
    470a:	86 e9       	ldi	r24, 0x96	; 150
    470c:	90 e0       	ldi	r25, 0x00	; 0
    470e:	0e 94 d3 05 	call	0xba6	; 0xba6 <delayMicroseconds>

	// finally, set to 4-bit interface
	write4bits(0x02 << 4);
    4712:	60 e2       	ldi	r22, 0x20	; 32
    4714:	ce 01       	movw	r24, r28
    4716:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <_ZN9LCDScreen10write4bitsEh>

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);
    471a:	6d 81       	ldd	r22, Y+5	; 0x05
    471c:	60 62       	ori	r22, 0x20	; 32
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
    471e:	40 e0       	ldi	r20, 0x00	; 0
    4720:	ce 01       	movw	r24, r28
    4722:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <_ZN9LCDScreen4sendEhh>

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);

	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    4726:	84 e0       	ldi	r24, 0x04	; 4
    4728:	8e 83       	std	Y+6, r24	; 0x06
	display();
    472a:	ce 01       	movw	r24, r28
    472c:	0e 94 48 23 	call	0x4690	; 0x4690 <_ZN9LCDScreen7displayEv>

	// clear it off
	clear();
    4730:	ce 01       	movw	r24, r28
    4732:	0e 94 05 23 	call	0x460a	; 0x460a <_ZN9LCDScreen5clearEv>

	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    4736:	82 e0       	ldi	r24, 0x02	; 2
    4738:	8f 83       	std	Y+7, r24	; 0x07
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
    473a:	40 e0       	ldi	r20, 0x00	; 0
    473c:	66 e0       	ldi	r22, 0x06	; 6
    473e:	ce 01       	movw	r24, r28
    4740:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <_ZN9LCDScreen4sendEhh>
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;

	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);

	home();
    4744:	ce 01       	movw	r24, r28
    4746:	0e 94 0e 23 	call	0x461c	; 0x461c <_ZN9LCDScreen4homeEv>
}
    474a:	df 91       	pop	r29
    474c:	cf 91       	pop	r28
    474e:	08 95       	ret

00004750 <_Z41__static_initialization_and_destruction_0ii>:
	ADMUX = 0b01100000;
	
	//enable the ADC
	//set the ADC pre scaler as 16
	ADCSRA = 0b10000100;
}
    4750:	0f 93       	push	r16
    4752:	1f 93       	push	r17
    4754:	cf 93       	push	r28
    4756:	df 93       	push	r29
    4758:	ec 01       	movw	r28, r24
    475a:	8b 01       	movw	r16, r22
    475c:	01 97       	sbiw	r24, 0x01	; 1
    475e:	71 f4       	brne	.+28     	; 0x477c <_Z41__static_initialization_and_destruction_0ii+0x2c>
    4760:	6f 3f       	cpi	r22, 0xFF	; 255
    4762:	7f 4f       	sbci	r23, 0xFF	; 255
    4764:	59 f4       	brne	.+22     	; 0x477c <_Z41__static_initialization_and_destruction_0ii+0x2c>

//variables to handle file operations
char tracks[maxFiles];
char files = 0;
char fcount = 0;
String fname_temp;
    4766:	61 ef       	ldi	r22, 0xF1	; 241
    4768:	71 e0       	ldi	r23, 0x01	; 1
    476a:	8f e4       	ldi	r24, 0x4F	; 79
    476c:	96 e0       	ldi	r25, 0x06	; 6
    476e:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>

//LCD screen instance
LCDScreen lcd(lcdAddr);
    4772:	67 e2       	ldi	r22, 0x27	; 39
    4774:	87 e4       	ldi	r24, 0x47	; 71
    4776:	96 e0       	ldi	r25, 0x06	; 6
    4778:	0e 94 9d 22 	call	0x453a	; 0x453a <_ZN9LCDScreenC1Eh>
    477c:	cd 2b       	or	r28, r29
    477e:	39 f4       	brne	.+14     	; 0x478e <_Z41__static_initialization_and_destruction_0ii+0x3e>
    4780:	0f 3f       	cpi	r16, 0xFF	; 255
    4782:	1f 4f       	sbci	r17, 0xFF	; 255
    4784:	21 f4       	brne	.+8      	; 0x478e <_Z41__static_initialization_and_destruction_0ii+0x3e>

//variables to handle file operations
char tracks[maxFiles];
char files = 0;
char fcount = 0;
String fname_temp;
    4786:	8f e4       	ldi	r24, 0x4F	; 79
    4788:	96 e0       	ldi	r25, 0x06	; 6
    478a:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
	ADMUX = 0b01100000;
	
	//enable the ADC
	//set the ADC pre scaler as 16
	ADCSRA = 0b10000100;
}
    478e:	df 91       	pop	r29
    4790:	cf 91       	pop	r28
    4792:	1f 91       	pop	r17
    4794:	0f 91       	pop	r16
    4796:	08 95       	ret

00004798 <_Z8keyInputv>:
  /*
    This function detects a key press and return the corresponding key
  */
  char k = 0;

  if (char m = ~PIND) {
    4798:	89 b1       	in	r24, 0x09	; 9
    479a:	80 95       	com	r24
    479c:	61 f1       	breq	.+88     	; 0x47f6 <_Z8keyInputv+0x5e>

    switch (m) {
    479e:	88 30       	cpi	r24, 0x08	; 8
    47a0:	99 f0       	breq	.+38     	; 0x47c8 <_Z8keyInputv+0x30>
    47a2:	38 f4       	brcc	.+14     	; 0x47b2 <_Z8keyInputv+0x1a>
    47a4:	82 30       	cpi	r24, 0x02	; 2
    47a6:	d1 f0       	breq	.+52     	; 0x47dc <_Z8keyInputv+0x44>
    47a8:	84 30       	cpi	r24, 0x04	; 4
    47aa:	61 f0       	breq	.+24     	; 0x47c4 <_Z8keyInputv+0x2c>
    47ac:	81 30       	cpi	r24, 0x01	; 1
    47ae:	a1 f4       	brne	.+40     	; 0x47d8 <_Z8keyInputv+0x40>
    47b0:	07 c0       	rjmp	.+14     	; 0x47c0 <_Z8keyInputv+0x28>
    47b2:	80 34       	cpi	r24, 0x40	; 64
    47b4:	69 f0       	breq	.+26     	; 0x47d0 <_Z8keyInputv+0x38>
    47b6:	80 38       	cpi	r24, 0x80	; 128
    47b8:	69 f0       	breq	.+26     	; 0x47d4 <_Z8keyInputv+0x3c>
    47ba:	80 32       	cpi	r24, 0x20	; 32
    47bc:	69 f4       	brne	.+26     	; 0x47d8 <_Z8keyInputv+0x40>
    47be:	06 c0       	rjmp	.+12     	; 0x47cc <_Z8keyInputv+0x34>
      case 1: k = '_'; break;
    47c0:	8f e5       	ldi	r24, 0x5F	; 95
    47c2:	0d c0       	rjmp	.+26     	; 0x47de <_Z8keyInputv+0x46>
      case 2: k = '*'; break;
      case 4: k = 's'; break;
    47c4:	83 e7       	ldi	r24, 0x73	; 115
    47c6:	0b c0       	rjmp	.+22     	; 0x47de <_Z8keyInputv+0x46>
      case 8: k = '<'; break;
    47c8:	8c e3       	ldi	r24, 0x3C	; 60
    47ca:	09 c0       	rjmp	.+18     	; 0x47de <_Z8keyInputv+0x46>
      case 32: k = 'p'; break;
    47cc:	80 e7       	ldi	r24, 0x70	; 112
    47ce:	07 c0       	rjmp	.+14     	; 0x47de <_Z8keyInputv+0x46>
      case 64: k = '>'; break;
    47d0:	8e e3       	ldi	r24, 0x3E	; 62
    47d2:	05 c0       	rjmp	.+10     	; 0x47de <_Z8keyInputv+0x46>
      case 128: k = 'd'; break;
    47d4:	84 e6       	ldi	r24, 0x64	; 100
    47d6:	03 c0       	rjmp	.+6      	; 0x47de <_Z8keyInputv+0x46>
      default: k = 0; break;
    47d8:	80 e0       	ldi	r24, 0x00	; 0
    47da:	01 c0       	rjmp	.+2      	; 0x47de <_Z8keyInputv+0x46>

  if (char m = ~PIND) {

    switch (m) {
      case 1: k = '_'; break;
      case 2: k = '*'; break;
    47dc:	8a e2       	ldi	r24, 0x2A	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    47de:	2f ef       	ldi	r18, 0xFF	; 255
    47e0:	35 ea       	ldi	r19, 0xA5	; 165
    47e2:	9e e0       	ldi	r25, 0x0E	; 14
    47e4:	21 50       	subi	r18, 0x01	; 1
    47e6:	30 40       	sbci	r19, 0x00	; 0
    47e8:	90 40       	sbci	r25, 0x00	; 0
    47ea:	e1 f7       	brne	.-8      	; 0x47e4 <_Z8keyInputv+0x4c>
    47ec:	00 c0       	rjmp	.+0      	; 0x47ee <_Z8keyInputv+0x56>
    47ee:	00 00       	nop
      case 64: k = '>'; break;
      case 128: k = 'd'; break;
      default: k = 0; break;
    }
    _delay_ms(300);
    PORTD = 0b11111111;
    47f0:	9f ef       	ldi	r25, 0xFF	; 255
    47f2:	9b b9       	out	0x0b, r25	; 11
    47f4:	08 95       	ret

char keyInput() {
  /*
    This function detects a key press and return the corresponding key
  */
  char k = 0;
    47f6:	80 e0       	ldi	r24, 0x00	; 0
    _delay_ms(300);
    PORTD = 0b11111111;

  }
  return k;
}
    47f8:	08 95       	ret

000047fa <_Z9firstLine6String>:

//END OF KEYPAD FUNCTIONS

//>--------------------------------< LCD DISPLAY FUNCTIONS >-----------------------------------<
void firstLine(String msg) {
    47fa:	cf 93       	push	r28
    47fc:	df 93       	push	r29
    47fe:	ec 01       	movw	r28, r24
  //Prints the string passed in the first line of the LCD display
  lcd.setCursor(0, 0);
    4800:	40 e0       	ldi	r20, 0x00	; 0
    4802:	60 e0       	ldi	r22, 0x00	; 0
    4804:	87 e4       	ldi	r24, 0x47	; 71
    4806:	96 e0       	ldi	r25, 0x06	; 6
    4808:	0e 94 17 23 	call	0x462e	; 0x462e <_ZN9LCDScreen9setCursorEhh>
  lcd.print(msg);
    480c:	be 01       	movw	r22, r28
    480e:	87 e4       	ldi	r24, 0x47	; 71
    4810:	96 e0       	ldi	r25, 0x06	; 6
    4812:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN5Print5printERK6String>
}
    4816:	df 91       	pop	r29
    4818:	cf 91       	pop	r28
    481a:	08 95       	ret

0000481c <_Z10clrDisplay6String>:

void clrDisplay(String msg) {
    481c:	0f 93       	push	r16
    481e:	1f 93       	push	r17
    4820:	cf 93       	push	r28
    4822:	df 93       	push	r29
    4824:	00 d0       	rcall	.+0      	; 0x4826 <_Z10clrDisplay6String+0xa>
    4826:	00 d0       	rcall	.+0      	; 0x4828 <_Z10clrDisplay6String+0xc>
    4828:	00 d0       	rcall	.+0      	; 0x482a <_Z10clrDisplay6String+0xe>
    482a:	cd b7       	in	r28, 0x3d	; 61
    482c:	de b7       	in	r29, 0x3e	; 62
    482e:	8c 01       	movw	r16, r24
  //Clears the LCD and displays the msg in first line
  lcd.clear();
    4830:	87 e4       	ldi	r24, 0x47	; 71
    4832:	96 e0       	ldi	r25, 0x06	; 6
    4834:	0e 94 05 23 	call	0x460a	; 0x460a <_ZN9LCDScreen5clearEv>
  firstLine(msg);
    4838:	b8 01       	movw	r22, r16
    483a:	ce 01       	movw	r24, r28
    483c:	01 96       	adiw	r24, 0x01	; 1
    483e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN6StringC1ERKS_>
    4842:	ce 01       	movw	r24, r28
    4844:	01 96       	adiw	r24, 0x01	; 1
    4846:	0e 94 fd 23 	call	0x47fa	; 0x47fa <_Z9firstLine6String>
    484a:	ce 01       	movw	r24, r28
    484c:	01 96       	adiw	r24, 0x01	; 1
    484e:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
}
    4852:	26 96       	adiw	r28, 0x06	; 6
    4854:	0f b6       	in	r0, 0x3f	; 63
    4856:	f8 94       	cli
    4858:	de bf       	out	0x3e, r29	; 62
    485a:	0f be       	out	0x3f, r0	; 63
    485c:	cd bf       	out	0x3d, r28	; 61
    485e:	df 91       	pop	r29
    4860:	cf 91       	pop	r28
    4862:	1f 91       	pop	r17
    4864:	0f 91       	pop	r16
    4866:	08 95       	ret

00004868 <_Z10secondLine6String>:

void secondLine(String msg) {
    4868:	cf 93       	push	r28
    486a:	df 93       	push	r29
    486c:	ec 01       	movw	r28, r24
  //Prints the string passed in the second line of the LCD display
  lcd.setCursor(0, 1);
    486e:	41 e0       	ldi	r20, 0x01	; 1
    4870:	60 e0       	ldi	r22, 0x00	; 0
    4872:	87 e4       	ldi	r24, 0x47	; 71
    4874:	96 e0       	ldi	r25, 0x06	; 6
    4876:	0e 94 17 23 	call	0x462e	; 0x462e <_ZN9LCDScreen9setCursorEhh>
  lcd.print(msg);
    487a:	be 01       	movw	r22, r28
    487c:	87 e4       	ldi	r24, 0x47	; 71
    487e:	96 e0       	ldi	r25, 0x06	; 6
    4880:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN5Print5printERK6String>
}
    4884:	df 91       	pop	r29
    4886:	cf 91       	pop	r28
    4888:	08 95       	ret

0000488a <_Z12getTrackListv>:
}
//END OF RECORD AND PLAY FUNCTIONS

//>--------------------------------------< FILE HANDLING FUNCTIONS >--------------------------------------<

void getTrackList() {
    488a:	ef 92       	push	r14
    488c:	ff 92       	push	r15
    488e:	0f 93       	push	r16
    4890:	1f 93       	push	r17
    4892:	cf 93       	push	r28
    4894:	df 93       	push	r29
    4896:	cd b7       	in	r28, 0x3d	; 61
    4898:	de b7       	in	r29, 0x3e	; 62
    489a:	68 97       	sbiw	r28, 0x18	; 24
    489c:	0f b6       	in	r0, 0x3f	; 63
    489e:	f8 94       	cli
    48a0:	de bf       	out	0x3e, r29	; 62
    48a2:	0f be       	out	0x3f, r0	; 63
    48a4:	cd bf       	out	0x3d, r28	; 61
     This function checks for files and make a list of available files
     Program only accept 15 tracks
     counts the number of files
  */
  byte ASCIIcount = 65;
  files = 0;
    48a6:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <files>
  fname_temp = String(char(ASCIIcount)) + ".WAV";
    48aa:	61 e4       	ldi	r22, 0x41	; 65
    48ac:	ce 01       	movw	r24, r28
    48ae:	0d 96       	adiw	r24, 0x0d	; 13
    48b0:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1Ec>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    48b4:	be 01       	movw	r22, r28
    48b6:	63 5f       	subi	r22, 0xF3	; 243
    48b8:	7f 4f       	sbci	r23, 0xFF	; 255
    48ba:	ce 01       	movw	r24, r28
    48bc:	43 96       	adiw	r24, 0x13	; 19
    48be:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN6StringC1ERKS_>
    48c2:	6e ec       	ldi	r22, 0xCE	; 206
    48c4:	71 e0       	ldi	r23, 0x01	; 1
    48c6:	ce 01       	movw	r24, r28
    48c8:	43 96       	adiw	r24, 0x13	; 19
    48ca:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZplRK15StringSumHelperPKc>
    48ce:	bc 01       	movw	r22, r24
    48d0:	8f e4       	ldi	r24, 0x4F	; 79
    48d2:	96 e0       	ldi	r25, 0x06	; 6
    48d4:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    48d8:	ce 01       	movw	r24, r28
    48da:	43 96       	adiw	r24, 0x13	; 19
    48dc:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    48e0:	ce 01       	movw	r24, r28
    48e2:	0d 96       	adiw	r24, 0x0d	; 13
    48e4:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
  byte arrIndex = 0;
    48e8:	00 e0       	ldi	r16, 0x00	; 0
  /*
     This function checks for files and make a list of available files
     Program only accept 15 tracks
     counts the number of files
  */
  byte ASCIIcount = 65;
    48ea:	0f 2e       	mov	r0, r31
    48ec:	f1 e4       	ldi	r31, 0x41	; 65
    48ee:	ff 2e       	mov	r15, r31
    48f0:	f0 2d       	mov	r31, r0
  files = 0;
  fname_temp = String(char(ASCIIcount)) + ".WAV";
  byte arrIndex = 0;
  while (true) {
    if (arrIndex == maxFiles || ASCIIcount == 91) {
    48f2:	0f 30       	cpi	r16, 0x0F	; 15
    48f4:	09 f4       	brne	.+2      	; 0x48f8 <_Z12getTrackListv+0x6e>
    48f6:	45 c0       	rjmp	.+138    	; 0x4982 <_Z12getTrackListv+0xf8>
    48f8:	8b e5       	ldi	r24, 0x5B	; 91
    48fa:	f8 16       	cp	r15, r24
    48fc:	09 f4       	brne	.+2      	; 0x4900 <_Z12getTrackListv+0x76>
    48fe:	41 c0       	rjmp	.+130    	; 0x4982 <_Z12getTrackListv+0xf8>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
	const char* c_str() const { return buffer; }
    4900:	60 91 4f 06 	lds	r22, 0x064F	; 0x80064f <fname_temp>
    4904:	70 91 50 06 	lds	r23, 0x0650	; 0x800650 <fname_temp+0x1>
      }

      // Methods to determine if the requested file path exists.
      boolean exists(const char *filepath);
      boolean exists(const String &filepath) {
        return exists(filepath.c_str());
    4908:	82 ef       	ldi	r24, 0xF2	; 242
    490a:	93 e0       	ldi	r25, 0x03	; 3
    490c:	0e 94 27 11 	call	0x224e	; 0x224e <_ZN5SDLib7SDClass6existsEPKc>
      break;
    }
    if (SD.exists(fname_temp)) {
    4910:	88 23       	and	r24, r24
    4912:	b1 f0       	breq	.+44     	; 0x4940 <_Z12getTrackListv+0xb6>
      tracks[arrIndex++] = fname_temp[0];
    4914:	ee 24       	eor	r14, r14
    4916:	e3 94       	inc	r14
    4918:	e0 0e       	add	r14, r16
    491a:	10 e0       	ldi	r17, 0x00	; 0
    491c:	60 e0       	ldi	r22, 0x00	; 0
    491e:	70 e0       	ldi	r23, 0x00	; 0
    4920:	8f e4       	ldi	r24, 0x4F	; 79
    4922:	96 e0       	ldi	r25, 0x06	; 6
    4924:	0e 94 f5 07 	call	0xfea	; 0xfea <_ZN6StringixEj>
    4928:	fc 01       	movw	r30, r24
    492a:	80 81       	ld	r24, Z
    492c:	f8 01       	movw	r30, r16
    492e:	e9 5a       	subi	r30, 0xA9	; 169
    4930:	f9 4f       	sbci	r31, 0xF9	; 249
    4932:	80 83       	st	Z, r24
      files++;
    4934:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <files>
    4938:	8f 5f       	subi	r24, 0xFF	; 255
    493a:	80 93 56 06 	sts	0x0656, r24	; 0x800656 <files>
  while (true) {
    if (arrIndex == maxFiles || ASCIIcount == 91) {
      break;
    }
    if (SD.exists(fname_temp)) {
      tracks[arrIndex++] = fname_temp[0];
    493e:	0e 2d       	mov	r16, r14
      files++;
    }
    fname_temp = String(char(++ASCIIcount)) + ".WAV";
    4940:	f3 94       	inc	r15
    4942:	6f 2d       	mov	r22, r15
    4944:	ce 01       	movw	r24, r28
    4946:	01 96       	adiw	r24, 0x01	; 1
    4948:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1Ec>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    494c:	be 01       	movw	r22, r28
    494e:	6f 5f       	subi	r22, 0xFF	; 255
    4950:	7f 4f       	sbci	r23, 0xFF	; 255
    4952:	ce 01       	movw	r24, r28
    4954:	07 96       	adiw	r24, 0x07	; 7
    4956:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN6StringC1ERKS_>
    495a:	6e ec       	ldi	r22, 0xCE	; 206
    495c:	71 e0       	ldi	r23, 0x01	; 1
    495e:	ce 01       	movw	r24, r28
    4960:	07 96       	adiw	r24, 0x07	; 7
    4962:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZplRK15StringSumHelperPKc>
    4966:	bc 01       	movw	r22, r24
    4968:	8f e4       	ldi	r24, 0x4F	; 79
    496a:	96 e0       	ldi	r25, 0x06	; 6
    496c:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    4970:	ce 01       	movw	r24, r28
    4972:	07 96       	adiw	r24, 0x07	; 7
    4974:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    4978:	ce 01       	movw	r24, r28
    497a:	01 96       	adiw	r24, 0x01	; 1
    497c:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
  */
  byte ASCIIcount = 65;
  files = 0;
  fname_temp = String(char(ASCIIcount)) + ".WAV";
  byte arrIndex = 0;
  while (true) {
    4980:	b8 cf       	rjmp	.-144    	; 0x48f2 <_Z12getTrackListv+0x68>
      files++;
    }
    fname_temp = String(char(++ASCIIcount)) + ".WAV";

  }
  for (byte i = arrIndex; i < maxFiles; i++) {
    4982:	0f 30       	cpi	r16, 0x0F	; 15
    4984:	40 f4       	brcc	.+16     	; 0x4996 <_Z12getTrackListv+0x10c>
    tracks[i] = '_';
    4986:	e0 2f       	mov	r30, r16
    4988:	f0 e0       	ldi	r31, 0x00	; 0
    498a:	e9 5a       	subi	r30, 0xA9	; 169
    498c:	f9 4f       	sbci	r31, 0xF9	; 249
    498e:	8f e5       	ldi	r24, 0x5F	; 95
    4990:	80 83       	st	Z, r24
      files++;
    }
    fname_temp = String(char(++ASCIIcount)) + ".WAV";

  }
  for (byte i = arrIndex; i < maxFiles; i++) {
    4992:	0f 5f       	subi	r16, 0xFF	; 255
    4994:	f6 cf       	rjmp	.-20     	; 0x4982 <_Z12getTrackListv+0xf8>
    tracks[i] = '_';
  }
}
    4996:	68 96       	adiw	r28, 0x18	; 24
    4998:	0f b6       	in	r0, 0x3f	; 63
    499a:	f8 94       	cli
    499c:	de bf       	out	0x3e, r29	; 62
    499e:	0f be       	out	0x3f, r0	; 63
    49a0:	cd bf       	out	0x3d, r28	; 61
    49a2:	df 91       	pop	r29
    49a4:	cf 91       	pop	r28
    49a6:	1f 91       	pop	r17
    49a8:	0f 91       	pop	r16
    49aa:	ff 90       	pop	r15
    49ac:	ef 90       	pop	r14
    49ae:	08 95       	ret

000049b0 <_Z9nextTrackv>:

void nextTrack() {
    49b0:	cf 93       	push	r28
    49b2:	df 93       	push	r29
    49b4:	cd b7       	in	r28, 0x3d	; 61
    49b6:	de b7       	in	r29, 0x3e	; 62
    49b8:	62 97       	sbiw	r28, 0x12	; 18
    49ba:	0f b6       	in	r0, 0x3f	; 63
    49bc:	f8 94       	cli
    49be:	de bf       	out	0x3e, r29	; 62
    49c0:	0f be       	out	0x3f, r0	; 63
    49c2:	cd bf       	out	0x3d, r28	; 61
  /*
     Checks tracks in order and returns the next track
  */
  fcount++;
    49c4:	e0 91 55 06 	lds	r30, 0x0655	; 0x800655 <fcount>
    49c8:	ef 5f       	subi	r30, 0xFF	; 255
    49ca:	e0 93 55 06 	sts	0x0655, r30	; 0x800655 <fcount>
  if (tracks[fcount] == '_') {
    49ce:	f0 e0       	ldi	r31, 0x00	; 0
    49d0:	e9 5a       	subi	r30, 0xA9	; 169
    49d2:	f9 4f       	sbci	r31, 0xF9	; 249
    49d4:	80 81       	ld	r24, Z
    49d6:	8f 35       	cpi	r24, 0x5F	; 95
    49d8:	11 f4       	brne	.+4      	; 0x49de <_Z9nextTrackv+0x2e>
    fcount = 0;
    49da:	10 92 55 06 	sts	0x0655, r1	; 0x800655 <fcount>
  }
  fname_temp = String(tracks[fcount]) + ".WAV";
    49de:	e0 91 55 06 	lds	r30, 0x0655	; 0x800655 <fcount>
    49e2:	f0 e0       	ldi	r31, 0x00	; 0
    49e4:	e9 5a       	subi	r30, 0xA9	; 169
    49e6:	f9 4f       	sbci	r31, 0xF9	; 249
    49e8:	60 81       	ld	r22, Z
    49ea:	ce 01       	movw	r24, r28
    49ec:	07 96       	adiw	r24, 0x07	; 7
    49ee:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    49f2:	be 01       	movw	r22, r28
    49f4:	69 5f       	subi	r22, 0xF9	; 249
    49f6:	7f 4f       	sbci	r23, 0xFF	; 255
    49f8:	ce 01       	movw	r24, r28
    49fa:	0d 96       	adiw	r24, 0x0d	; 13
    49fc:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN6StringC1ERKS_>
    4a00:	6e ec       	ldi	r22, 0xCE	; 206
    4a02:	71 e0       	ldi	r23, 0x01	; 1
    4a04:	ce 01       	movw	r24, r28
    4a06:	0d 96       	adiw	r24, 0x0d	; 13
    4a08:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZplRK15StringSumHelperPKc>
    4a0c:	bc 01       	movw	r22, r24
    4a0e:	8f e4       	ldi	r24, 0x4F	; 79
    4a10:	96 e0       	ldi	r25, 0x06	; 6
    4a12:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    4a16:	ce 01       	movw	r24, r28
    4a18:	0d 96       	adiw	r24, 0x0d	; 13
    4a1a:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    4a1e:	ce 01       	movw	r24, r28
    4a20:	07 96       	adiw	r24, 0x07	; 7
    4a22:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
  secondLine(fname_temp);
    4a26:	6f e4       	ldi	r22, 0x4F	; 79
    4a28:	76 e0       	ldi	r23, 0x06	; 6
    4a2a:	ce 01       	movw	r24, r28
    4a2c:	01 96       	adiw	r24, 0x01	; 1
    4a2e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN6StringC1ERKS_>
    4a32:	ce 01       	movw	r24, r28
    4a34:	01 96       	adiw	r24, 0x01	; 1
    4a36:	0e 94 34 24 	call	0x4868	; 0x4868 <_Z10secondLine6String>
    4a3a:	ce 01       	movw	r24, r28
    4a3c:	01 96       	adiw	r24, 0x01	; 1
    4a3e:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
  //Serial.println(count);
}
    4a42:	62 96       	adiw	r28, 0x12	; 18
    4a44:	0f b6       	in	r0, 0x3f	; 63
    4a46:	f8 94       	cli
    4a48:	de bf       	out	0x3e, r29	; 62
    4a4a:	0f be       	out	0x3f, r0	; 63
    4a4c:	cd bf       	out	0x3d, r28	; 61
    4a4e:	df 91       	pop	r29
    4a50:	cf 91       	pop	r28
    4a52:	08 95       	ret

00004a54 <_Z13previousTrackv>:

void previousTrack() {
    4a54:	cf 93       	push	r28
    4a56:	df 93       	push	r29
    4a58:	cd b7       	in	r28, 0x3d	; 61
    4a5a:	de b7       	in	r29, 0x3e	; 62
    4a5c:	62 97       	sbiw	r28, 0x12	; 18
    4a5e:	0f b6       	in	r0, 0x3f	; 63
    4a60:	f8 94       	cli
    4a62:	de bf       	out	0x3e, r29	; 62
    4a64:	0f be       	out	0x3f, r0	; 63
    4a66:	cd bf       	out	0x3d, r28	; 61
  /*
     Checks tracks in order and returns the previous track
  */
  if (fcount == 0) {
    4a68:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <fcount>
    4a6c:	81 11       	cpse	r24, r1
    4a6e:	06 c0       	rjmp	.+12     	; 0x4a7c <_Z13previousTrackv+0x28>
    fcount = files - 1;
    4a70:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <files>
    4a74:	81 50       	subi	r24, 0x01	; 1
    4a76:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <fcount>
    4a7a:	03 c0       	rjmp	.+6      	; 0x4a82 <_Z13previousTrackv+0x2e>
  }
  else
  {
    fcount--;
    4a7c:	81 50       	subi	r24, 0x01	; 1
    4a7e:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <fcount>
  }
  fname_temp = String(tracks[fcount]) + ".WAV";
    4a82:	e0 91 55 06 	lds	r30, 0x0655	; 0x800655 <fcount>
    4a86:	f0 e0       	ldi	r31, 0x00	; 0
    4a88:	e9 5a       	subi	r30, 0xA9	; 169
    4a8a:	f9 4f       	sbci	r31, 0xF9	; 249
    4a8c:	60 81       	ld	r22, Z
    4a8e:	ce 01       	movw	r24, r28
    4a90:	07 96       	adiw	r24, 0x07	; 7
    4a92:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    4a96:	be 01       	movw	r22, r28
    4a98:	69 5f       	subi	r22, 0xF9	; 249
    4a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a9c:	ce 01       	movw	r24, r28
    4a9e:	0d 96       	adiw	r24, 0x0d	; 13
    4aa0:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN6StringC1ERKS_>
    4aa4:	6e ec       	ldi	r22, 0xCE	; 206
    4aa6:	71 e0       	ldi	r23, 0x01	; 1
    4aa8:	ce 01       	movw	r24, r28
    4aaa:	0d 96       	adiw	r24, 0x0d	; 13
    4aac:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZplRK15StringSumHelperPKc>
    4ab0:	bc 01       	movw	r22, r24
    4ab2:	8f e4       	ldi	r24, 0x4F	; 79
    4ab4:	96 e0       	ldi	r25, 0x06	; 6
    4ab6:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    4aba:	ce 01       	movw	r24, r28
    4abc:	0d 96       	adiw	r24, 0x0d	; 13
    4abe:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    4ac2:	ce 01       	movw	r24, r28
    4ac4:	07 96       	adiw	r24, 0x07	; 7
    4ac6:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
  secondLine(fname_temp);
    4aca:	6f e4       	ldi	r22, 0x4F	; 79
    4acc:	76 e0       	ldi	r23, 0x06	; 6
    4ace:	ce 01       	movw	r24, r28
    4ad0:	01 96       	adiw	r24, 0x01	; 1
    4ad2:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN6StringC1ERKS_>
    4ad6:	ce 01       	movw	r24, r28
    4ad8:	01 96       	adiw	r24, 0x01	; 1
    4ada:	0e 94 34 24 	call	0x4868	; 0x4868 <_Z10secondLine6String>
    4ade:	ce 01       	movw	r24, r28
    4ae0:	01 96       	adiw	r24, 0x01	; 1
    4ae2:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
  //Serial.println(count);
}
    4ae6:	62 96       	adiw	r28, 0x12	; 18
    4ae8:	0f b6       	in	r0, 0x3f	; 63
    4aea:	f8 94       	cli
    4aec:	de bf       	out	0x3e, r29	; 62
    4aee:	0f be       	out	0x3f, r0	; 63
    4af0:	cd bf       	out	0x3d, r28	; 61
    4af2:	df 91       	pop	r29
    4af4:	cf 91       	pop	r28
    4af6:	08 95       	ret

00004af8 <_Z15checkDuplicatesv>:

void checkDuplicates() {
    4af8:	1f 93       	push	r17
    4afa:	cf 93       	push	r28
    4afc:	df 93       	push	r29
    4afe:	cd b7       	in	r28, 0x3d	; 61
    4b00:	de b7       	in	r29, 0x3e	; 62
    4b02:	68 97       	sbiw	r28, 0x18	; 24
    4b04:	0f b6       	in	r0, 0x3f	; 63
    4b06:	f8 94       	cli
    4b08:	de bf       	out	0x3e, r29	; 62
    4b0a:	0f be       	out	0x3f, r0	; 63
    4b0c:	cd bf       	out	0x3d, r28	; 61

  /*This function checks if the new file to be made is existing,
    if does it generates a new name for the file*/
  byte count = 65;
  fname_temp = String(char(count)) + ".wav";
    4b0e:	61 e4       	ldi	r22, 0x41	; 65
    4b10:	ce 01       	movw	r24, r28
    4b12:	0d 96       	adiw	r24, 0x0d	; 13
    4b14:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    4b18:	be 01       	movw	r22, r28
    4b1a:	63 5f       	subi	r22, 0xF3	; 243
    4b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    4b1e:	ce 01       	movw	r24, r28
    4b20:	43 96       	adiw	r24, 0x13	; 19
    4b22:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN6StringC1ERKS_>
    4b26:	63 ed       	ldi	r22, 0xD3	; 211
    4b28:	71 e0       	ldi	r23, 0x01	; 1
    4b2a:	ce 01       	movw	r24, r28
    4b2c:	43 96       	adiw	r24, 0x13	; 19
    4b2e:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZplRK15StringSumHelperPKc>
    4b32:	bc 01       	movw	r22, r24
    4b34:	8f e4       	ldi	r24, 0x4F	; 79
    4b36:	96 e0       	ldi	r25, 0x06	; 6
    4b38:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    4b3c:	ce 01       	movw	r24, r28
    4b3e:	43 96       	adiw	r24, 0x13	; 19
    4b40:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    4b44:	ce 01       	movw	r24, r28
    4b46:	0d 96       	adiw	r24, 0x0d	; 13
    4b48:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>

void checkDuplicates() {

  /*This function checks if the new file to be made is existing,
    if does it generates a new name for the file*/
  byte count = 65;
    4b4c:	11 e4       	ldi	r17, 0x41	; 65
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
	const char* c_str() const { return buffer; }
    4b4e:	60 91 4f 06 	lds	r22, 0x064F	; 0x80064f <fname_temp>
    4b52:	70 91 50 06 	lds	r23, 0x0650	; 0x800650 <fname_temp+0x1>
    4b56:	82 ef       	ldi	r24, 0xF2	; 242
    4b58:	93 e0       	ldi	r25, 0x03	; 3
    4b5a:	0e 94 27 11 	call	0x224e	; 0x224e <_ZN5SDLib7SDClass6existsEPKc>
  fname_temp = String(char(count)) + ".wav";
  while (true) {
    if (SD.exists(fname_temp)) {
    4b5e:	88 23       	and	r24, r24
    4b60:	09 f1       	breq	.+66     	; 0x4ba4 <_Z15checkDuplicatesv+0xac>
      fname_temp = String(char(++count)) + ".wav";
    4b62:	1f 5f       	subi	r17, 0xFF	; 255
    4b64:	61 2f       	mov	r22, r17
    4b66:	ce 01       	movw	r24, r28
    4b68:	01 96       	adiw	r24, 0x01	; 1
    4b6a:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1Ec>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    4b6e:	be 01       	movw	r22, r28
    4b70:	6f 5f       	subi	r22, 0xFF	; 255
    4b72:	7f 4f       	sbci	r23, 0xFF	; 255
    4b74:	ce 01       	movw	r24, r28
    4b76:	07 96       	adiw	r24, 0x07	; 7
    4b78:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN6StringC1ERKS_>
    4b7c:	63 ed       	ldi	r22, 0xD3	; 211
    4b7e:	71 e0       	ldi	r23, 0x01	; 1
    4b80:	ce 01       	movw	r24, r28
    4b82:	07 96       	adiw	r24, 0x07	; 7
    4b84:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZplRK15StringSumHelperPKc>
    4b88:	bc 01       	movw	r22, r24
    4b8a:	8f e4       	ldi	r24, 0x4F	; 79
    4b8c:	96 e0       	ldi	r25, 0x06	; 6
    4b8e:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    4b92:	ce 01       	movw	r24, r28
    4b94:	07 96       	adiw	r24, 0x07	; 7
    4b96:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    4b9a:	ce 01       	movw	r24, r28
    4b9c:	01 96       	adiw	r24, 0x01	; 1
    4b9e:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>

  /*This function checks if the new file to be made is existing,
    if does it generates a new name for the file*/
  byte count = 65;
  fname_temp = String(char(count)) + ".wav";
  while (true) {
    4ba2:	d5 cf       	rjmp	.-86     	; 0x4b4e <_Z15checkDuplicatesv+0x56>
      fname_temp = String(char(++count)) + ".wav";
    } else {
      break;
    }
  }
}
    4ba4:	68 96       	adiw	r28, 0x18	; 24
    4ba6:	0f b6       	in	r0, 0x3f	; 63
    4ba8:	f8 94       	cli
    4baa:	de bf       	out	0x3e, r29	; 62
    4bac:	0f be       	out	0x3f, r0	; 63
    4bae:	cd bf       	out	0x3d, r28	; 61
    4bb0:	df 91       	pop	r29
    4bb2:	cf 91       	pop	r28
    4bb4:	1f 91       	pop	r17
    4bb6:	08 95       	ret

00004bb8 <_Z12makeWaveFileN5SDLib4FileE>:

//END OF FILE HANDLING FUNCTIONS

//>------------------------------< FUNCTIONS FOR WAVE FILE CREATION >---------------------------------<

void makeWaveFile(File sFile) {
    4bb8:	0f 93       	push	r16
    4bba:	1f 93       	push	r17
    4bbc:	cf 93       	push	r28
    4bbe:	df 93       	push	r29
    4bc0:	cd b7       	in	r28, 0x3d	; 61
    4bc2:	de b7       	in	r29, 0x3e	; 62
    4bc4:	2a 97       	sbiw	r28, 0x0a	; 10
    4bc6:	0f b6       	in	r0, 0x3f	; 63
    4bc8:	f8 94       	cli
    4bca:	de bf       	out	0x3e, r29	; 62
    4bcc:	0f be       	out	0x3f, r0	; 63
    4bce:	cd bf       	out	0x3d, r28	; 61
    4bd0:	8c 01       	movw	r16, r24
  /*
     This function creates the wave header file required
     All bytes should be in little endian format, except String values
  */

  sFile.write((byte*)"RIFF    WAVEfmt ", 16);//Starting bytes of the wave header file
    4bd2:	40 e1       	ldi	r20, 0x10	; 16
    4bd4:	50 e0       	ldi	r21, 0x00	; 0
    4bd6:	68 ed       	ldi	r22, 0xD8	; 216
    4bd8:	71 e0       	ldi	r23, 0x01	; 1
    4bda:	0e 94 6d 0c 	call	0x18da	; 0x18da <_ZN5SDLib4File5writeEPKhj>
  byte chunk[] = {16, 0, 0, 0, 1, 0, 1, 0, lowByte(sampleRate), highByte(sampleRate)};
    4bde:	8a e0       	ldi	r24, 0x0A	; 10
    4be0:	ea e1       	ldi	r30, 0x1A	; 26
    4be2:	f1 e0       	ldi	r31, 0x01	; 1
    4be4:	de 01       	movw	r26, r28
    4be6:	11 96       	adiw	r26, 0x01	; 1
    4be8:	01 90       	ld	r0, Z+
    4bea:	0d 92       	st	X+, r0
    4bec:	8a 95       	dec	r24
    4bee:	e1 f7       	brne	.-8      	; 0x4be8 <_Z12makeWaveFileN5SDLib4FileE+0x30>
     first 4 bytes: size of  previous data chunck
     next 2 bytes: Audio format (1 - PCM)
     next 2 byte: No of channels (Mono = 1, Stereo = 2) (in our case 1)
     last two are the first two bytes of sample rate
  */
  sFile.write((byte*)chunk, 10);
    4bf0:	4a e0       	ldi	r20, 0x0A	; 10
    4bf2:	50 e0       	ldi	r21, 0x00	; 0
    4bf4:	be 01       	movw	r22, r28
    4bf6:	6f 5f       	subi	r22, 0xFF	; 255
    4bf8:	7f 4f       	sbci	r23, 0xFF	; 255
    4bfa:	c8 01       	movw	r24, r16
    4bfc:	0e 94 6d 0c 	call	0x18da	; 0x18da <_ZN5SDLib4File5writeEPKhj>

  chunk[0] = 0; chunk[1] = 0; //end of sample rate bytes
    4c00:	19 82       	std	Y+1, r1	; 0x01
    4c02:	1a 82       	std	Y+2, r1	; 0x02

  //byteRate = (sampleRate/8)*monoStereo*8;
  chunk[2] = lowByte(byteRate); chunk[3] = highByte(byteRate); chunk[4] = 0; chunk[5] = 0; // byteRate
    4c04:	80 ed       	ldi	r24, 0xD0	; 208
    4c06:	8b 83       	std	Y+3, r24	; 0x03
    4c08:	80 e3       	ldi	r24, 0x30	; 48
    4c0a:	8c 83       	std	Y+4, r24	; 0x04
    4c0c:	1d 82       	std	Y+5, r1	; 0x05
    4c0e:	1e 82       	std	Y+6, r1	; 0x06

  //byte blockAlign = monoStereo * (bps/8);
  //this is always equal to 1 in 8bit PCM mono channel
  chunk[6] = 1; chunk[7] = 0; //BlockAlign
    4c10:	81 e0       	ldi	r24, 0x01	; 1
    4c12:	8f 83       	std	Y+7, r24	; 0x07
    4c14:	18 86       	std	Y+8, r1	; 0x08

  chunk[8] = 8; chunk[9] = 0; //bits per sample
    4c16:	88 e0       	ldi	r24, 0x08	; 8
    4c18:	89 87       	std	Y+9, r24	; 0x09
    4c1a:	1a 86       	std	Y+10, r1	; 0x0a

  sFile.write((byte*)chunk, 10);
    4c1c:	4a e0       	ldi	r20, 0x0A	; 10
    4c1e:	50 e0       	ldi	r21, 0x00	; 0
    4c20:	be 01       	movw	r22, r28
    4c22:	6f 5f       	subi	r22, 0xFF	; 255
    4c24:	7f 4f       	sbci	r23, 0xFF	; 255
    4c26:	c8 01       	movw	r24, r16
    4c28:	0e 94 6d 0c 	call	0x18da	; 0x18da <_ZN5SDLib4File5writeEPKhj>
  sFile.write((byte*)"data    ", 8);
    4c2c:	48 e0       	ldi	r20, 0x08	; 8
    4c2e:	50 e0       	ldi	r21, 0x00	; 0
    4c30:	69 ee       	ldi	r22, 0xE9	; 233
    4c32:	71 e0       	ldi	r23, 0x01	; 1
    4c34:	c8 01       	movw	r24, r16
    4c36:	0e 94 6d 0c 	call	0x18da	; 0x18da <_ZN5SDLib4File5writeEPKhj>

}
    4c3a:	2a 96       	adiw	r28, 0x0a	; 10
    4c3c:	0f b6       	in	r0, 0x3f	; 63
    4c3e:	f8 94       	cli
    4c40:	de bf       	out	0x3e, r29	; 62
    4c42:	0f be       	out	0x3f, r0	; 63
    4c44:	cd bf       	out	0x3d, r28	; 61
    4c46:	df 91       	pop	r29
    4c48:	cf 91       	pop	r28
    4c4a:	1f 91       	pop	r17
    4c4c:	0f 91       	pop	r16
    4c4e:	08 95       	ret

00004c50 <_Z12finalizeWaveN5SDLib4FileE>:

void finalizeWave(File sFile) {
    4c50:	8f 92       	push	r8
    4c52:	9f 92       	push	r9
    4c54:	af 92       	push	r10
    4c56:	bf 92       	push	r11
    4c58:	cf 92       	push	r12
    4c5a:	df 92       	push	r13
    4c5c:	ef 92       	push	r14
    4c5e:	ff 92       	push	r15
    4c60:	0f 93       	push	r16
    4c62:	1f 93       	push	r17
    4c64:	cf 93       	push	r28
    4c66:	df 93       	push	r29
    4c68:	00 d0       	rcall	.+0      	; 0x4c6a <_Z12finalizeWaveN5SDLib4FileE+0x1a>
    4c6a:	00 d0       	rcall	.+0      	; 0x4c6c <_Z12finalizeWaveN5SDLib4FileE+0x1c>
    4c6c:	cd b7       	in	r28, 0x3d	; 61
    4c6e:	de b7       	in	r29, 0x3e	; 62
    4c70:	8c 01       	movw	r16, r24
  /*
     This function finalizes the wave file
  */
  unsigned long fSize = sFile.size();
    4c72:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN5SDLib4File4sizeEv>
    4c76:	6b 01       	movw	r12, r22
    4c78:	7c 01       	movw	r14, r24

  fSize -= 8;
    4c7a:	4b 01       	movw	r8, r22
    4c7c:	5c 01       	movw	r10, r24
    4c7e:	88 e0       	ldi	r24, 0x08	; 8
    4c80:	88 1a       	sub	r8, r24
    4c82:	91 08       	sbc	r9, r1
    4c84:	a1 08       	sbc	r10, r1
    4c86:	b1 08       	sbc	r11, r1
  sFile.seek(4);
    4c88:	44 e0       	ldi	r20, 0x04	; 4
    4c8a:	50 e0       	ldi	r21, 0x00	; 0
    4c8c:	60 e0       	ldi	r22, 0x00	; 0
    4c8e:	70 e0       	ldi	r23, 0x00	; 0
    4c90:	c8 01       	movw	r24, r16
    4c92:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <_ZN5SDLib4File4seekEm>
  byte chunk2[4] = {lowByte(fSize), highByte(fSize), fSize >> 16, fSize >> 24};
    4c96:	89 82       	std	Y+1, r8	; 0x01
    4c98:	9a 82       	std	Y+2, r9	; 0x02
    4c9a:	ab 82       	std	Y+3, r10	; 0x03
    4c9c:	bc 82       	std	Y+4, r11	; 0x04
  sFile.write(chunk2, 4);//Writing chunksize to 5 - 8 bytes in wave file
    4c9e:	44 e0       	ldi	r20, 0x04	; 4
    4ca0:	50 e0       	ldi	r21, 0x00	; 0
    4ca2:	be 01       	movw	r22, r28
    4ca4:	6f 5f       	subi	r22, 0xFF	; 255
    4ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    4ca8:	c8 01       	movw	r24, r16
    4caa:	0e 94 6d 0c 	call	0x18da	; 0x18da <_ZN5SDLib4File5writeEPKhj>

  sFile.seek(40);
    4cae:	48 e2       	ldi	r20, 0x28	; 40
    4cb0:	50 e0       	ldi	r21, 0x00	; 0
    4cb2:	60 e0       	ldi	r22, 0x00	; 0
    4cb4:	70 e0       	ldi	r23, 0x00	; 0
    4cb6:	c8 01       	movw	r24, r16
    4cb8:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <_ZN5SDLib4File4seekEm>
  fSize -= 36 ;
    4cbc:	d7 01       	movw	r26, r14
    4cbe:	c6 01       	movw	r24, r12
    4cc0:	8c 97       	sbiw	r24, 0x2c	; 44
    4cc2:	a1 09       	sbc	r26, r1
    4cc4:	b1 09       	sbc	r27, r1
  chunk2[0] = lowByte(fSize); chunk2[1] = highByte(fSize); chunk2[2] = fSize >> 16; chunk2[3] = fSize >> 24;
    4cc6:	89 83       	std	Y+1, r24	; 0x01
    4cc8:	9a 83       	std	Y+2, r25	; 0x02
    4cca:	ab 83       	std	Y+3, r26	; 0x03
    4ccc:	bc 83       	std	Y+4, r27	; 0x04
  sFile.write((byte*)chunk2, 4);//Writting num of samples to 41-44 bytes in wave file
    4cce:	44 e0       	ldi	r20, 0x04	; 4
    4cd0:	50 e0       	ldi	r21, 0x00	; 0
    4cd2:	be 01       	movw	r22, r28
    4cd4:	6f 5f       	subi	r22, 0xFF	; 255
    4cd6:	7f 4f       	sbci	r23, 0xFF	; 255
    4cd8:	c8 01       	movw	r24, r16
    4cda:	0e 94 6d 0c 	call	0x18da	; 0x18da <_ZN5SDLib4File5writeEPKhj>
}
    4cde:	0f 90       	pop	r0
    4ce0:	0f 90       	pop	r0
    4ce2:	0f 90       	pop	r0
    4ce4:	0f 90       	pop	r0
    4ce6:	df 91       	pop	r29
    4ce8:	cf 91       	pop	r28
    4cea:	1f 91       	pop	r17
    4cec:	0f 91       	pop	r16
    4cee:	ff 90       	pop	r15
    4cf0:	ef 90       	pop	r14
    4cf2:	df 90       	pop	r13
    4cf4:	cf 90       	pop	r12
    4cf6:	bf 90       	pop	r11
    4cf8:	af 90       	pop	r10
    4cfa:	9f 90       	pop	r9
    4cfc:	8f 90       	pop	r8
    4cfe:	08 95       	ret

00004d00 <_Z8convolvev>:
	}
	fname_temp = "SHIFT" + fname_temp;
}


void convolve() {
    4d00:	4f 92       	push	r4
    4d02:	5f 92       	push	r5
    4d04:	6f 92       	push	r6
    4d06:	7f 92       	push	r7
    4d08:	8f 92       	push	r8
    4d0a:	9f 92       	push	r9
    4d0c:	af 92       	push	r10
    4d0e:	bf 92       	push	r11
    4d10:	cf 92       	push	r12
    4d12:	df 92       	push	r13
    4d14:	ef 92       	push	r14
    4d16:	ff 92       	push	r15
    4d18:	0f 93       	push	r16
    4d1a:	1f 93       	push	r17
    4d1c:	cf 93       	push	r28
    4d1e:	df 93       	push	r29
    4d20:	cd b7       	in	r28, 0x3d	; 61
    4d22:	de b7       	in	r29, 0x3e	; 62
    4d24:	c5 5d       	subi	r28, 0xD5	; 213
    4d26:	d1 09       	sbc	r29, r1
    4d28:	0f b6       	in	r0, 0x3f	; 63
    4d2a:	f8 94       	cli
    4d2c:	de bf       	out	0x3e, r29	; 62
    4d2e:	0f be       	out	0x3f, r0	; 63
    4d30:	cd bf       	out	0x3d, r28	; 61

	int filter[filterlen] = {0, 1, 5, -4, -48, 920, -48, -4, 5, 1, 0};
    4d32:	86 e1       	ldi	r24, 0x16	; 22
    4d34:	e4 e2       	ldi	r30, 0x24	; 36
    4d36:	f1 e0       	ldi	r31, 0x01	; 1
    4d38:	de 01       	movw	r26, r28
    4d3a:	a7 5b       	subi	r26, 0xB7	; 183
    4d3c:	bf 4f       	sbci	r27, 0xFF	; 255
    4d3e:	01 90       	ld	r0, Z+
    4d40:	0d 92       	st	X+, r0
    4d42:	8a 95       	dec	r24
    4d44:	e1 f7       	brne	.-8      	; 0x4d3e <_Z8convolvev+0x3e>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    4d46:	62 ef       	ldi	r22, 0xF2	; 242
    4d48:	71 e0       	ldi	r23, 0x01	; 1
    4d4a:	ce 01       	movw	r24, r28
    4d4c:	8d 5b       	subi	r24, 0xBD	; 189
    4d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    4d50:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
	byte temp_buff[temp_buff_size];
	float temp = 0;
	byte temp_count = 0;


	File out = SD.open("SHIFT" + fname_temp, FILE_WRITE);
    4d54:	6f e4       	ldi	r22, 0x4F	; 79
    4d56:	76 e0       	ldi	r23, 0x06	; 6
    4d58:	ce 01       	movw	r24, r28
    4d5a:	8d 5b       	subi	r24, 0xBD	; 189
    4d5c:	9f 4f       	sbci	r25, 0xFF	; 255
    4d5e:	0e 94 c2 07 	call	0xf84	; 0xf84 <_ZplRK15StringSumHelperRK6String>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
	const char* c_str() const { return buffer; }
    4d62:	fc 01       	movw	r30, r24
    4d64:	40 81       	ld	r20, Z
    4d66:	51 81       	ldd	r21, Z+1	; 0x01
      // Open the specified file/directory with the supplied mode (e.g. read or
      // write, etc). Returns a File object for interacting with the file.
      // Note that currently only one file can be open at a time.
      File open(const char *filename, uint8_t mode = FILE_READ);
      File open(const String &filename, uint8_t mode = FILE_READ) {
        return open(filename.c_str(), mode);
    4d68:	27 e1       	ldi	r18, 0x17	; 23
    4d6a:	62 ef       	ldi	r22, 0xF2	; 242
    4d6c:	73 e0       	ldi	r23, 0x03	; 3
    4d6e:	ce 01       	movw	r24, r28
    4d70:	84 56       	subi	r24, 0x64	; 100
    4d72:	9f 4f       	sbci	r25, 0xFF	; 255
    4d74:	0e 94 10 10 	call	0x2020	; 0x2020 <_ZN5SDLib7SDClass4openEPKch>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    4d78:	ce 01       	movw	r24, r28
    4d7a:	8d 5b       	subi	r24, 0xBD	; 189
    4d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    4d7e:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
    4d82:	c2 56       	subi	r28, 0x62	; 98
    4d84:	df 4f       	sbci	r29, 0xFF	; 255
    4d86:	88 81       	ld	r24, Y
    4d88:	99 81       	ldd	r25, Y+1	; 0x01
    4d8a:	ce 59       	subi	r28, 0x9E	; 158
    4d8c:	d0 40       	sbci	r29, 0x00	; 0
    4d8e:	9b a7       	std	Y+43, r25	; 0x2b
    4d90:	8a a7       	std	Y+42, r24	; 0x2a
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    4d92:	c0 56       	subi	r28, 0x60	; 96
    4d94:	df 4f       	sbci	r29, 0xFF	; 255
    4d96:	88 81       	ld	r24, Y
    4d98:	99 81       	ldd	r25, Y+1	; 0x01
    4d9a:	aa 81       	ldd	r26, Y+2	; 0x02
    4d9c:	bb 81       	ldd	r27, Y+3	; 0x03
    4d9e:	c0 5a       	subi	r28, 0xA0	; 160
    4da0:	d0 40       	sbci	r29, 0x00	; 0
    4da2:	8c a7       	std	Y+44, r24	; 0x2c
    4da4:	9d a7       	std	Y+45, r25	; 0x2d
    4da6:	ae a7       	std	Y+46, r26	; 0x2e
    4da8:	bf a7       	std	Y+47, r27	; 0x2f
    4daa:	cc 55       	subi	r28, 0x5C	; 92
    4dac:	df 4f       	sbci	r29, 0xFF	; 255
    4dae:	88 81       	ld	r24, Y
    4db0:	99 81       	ldd	r25, Y+1	; 0x01
    4db2:	aa 81       	ldd	r26, Y+2	; 0x02
    4db4:	bb 81       	ldd	r27, Y+3	; 0x03
    4db6:	c4 5a       	subi	r28, 0xA4	; 164
    4db8:	d0 40       	sbci	r29, 0x00	; 0
    4dba:	88 ab       	std	Y+48, r24	; 0x30
    4dbc:	99 ab       	std	Y+49, r25	; 0x31
    4dbe:	aa ab       	std	Y+50, r26	; 0x32
    4dc0:	bb ab       	std	Y+51, r27	; 0x33
#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT | O_APPEND)

namespace SDLib {

  class File : public Stream {
    4dc2:	86 ea       	ldi	r24, 0xA6	; 166
    4dc4:	91 e0       	ldi	r25, 0x01	; 1
    4dc6:	99 a7       	std	Y+41, r25	; 0x29
    4dc8:	88 a7       	std	Y+40, r24	; 0x28
    4dca:	8d e0       	ldi	r24, 0x0D	; 13
    4dcc:	ec e9       	ldi	r30, 0x9C	; 156
    4dce:	f0 e0       	ldi	r31, 0x00	; 0
    4dd0:	ec 0f       	add	r30, r28
    4dd2:	fd 1f       	adc	r31, r29
    4dd4:	3c 96       	adiw	r30, 0x0c	; 12
    4dd6:	de 01       	movw	r26, r28
    4dd8:	d4 96       	adiw	r26, 0x34	; 52
    4dda:	01 90       	ld	r0, Z+
    4ddc:	0d 92       	st	X+, r0
    4dde:	8a 95       	dec	r24
    4de0:	e1 f7       	brne	.-8      	; 0x4dda <_Z8convolvev+0xda>
    4de2:	cb 54       	subi	r28, 0x4B	; 75
    4de4:	df 4f       	sbci	r29, 0xFF	; 255
    4de6:	88 81       	ld	r24, Y
    4de8:	99 81       	ldd	r25, Y+1	; 0x01
    4dea:	c5 5b       	subi	r28, 0xB5	; 181
    4dec:	d0 40       	sbci	r29, 0x00	; 0
    4dee:	23 96       	adiw	r28, 0x03	; 3
    4df0:	9f af       	std	Y+63, r25	; 0x3f
    4df2:	8e af       	std	Y+62, r24	; 0x3e
    4df4:	23 97       	sbiw	r28, 0x03	; 3
	makeWaveFile(out);
    4df6:	ce 01       	movw	r24, r28
    4df8:	88 96       	adiw	r24, 0x28	; 40
    4dfa:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <_Z12makeWaveFileN5SDLib4FileE>
	File target = SD.open("S" + String(fname_temp[0]) + ".bin", FILE_READ);
    4dfe:	60 e0       	ldi	r22, 0x00	; 0
    4e00:	70 e0       	ldi	r23, 0x00	; 0
    4e02:	8f e4       	ldi	r24, 0x4F	; 79
    4e04:	96 e0       	ldi	r25, 0x06	; 6
    4e06:	0e 94 f5 07 	call	0xfea	; 0xfea <_ZN6StringixEj>
    4e0a:	fc 01       	movw	r30, r24
    4e0c:	60 81       	ld	r22, Z
    4e0e:	ce 01       	movw	r24, r28
    4e10:	82 96       	adiw	r24, 0x22	; 34
    4e12:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    4e16:	68 ef       	ldi	r22, 0xF8	; 248
    4e18:	71 e0       	ldi	r23, 0x01	; 1
    4e1a:	ce 01       	movw	r24, r28
    4e1c:	4c 96       	adiw	r24, 0x1c	; 28
    4e1e:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
    4e22:	be 01       	movw	r22, r28
    4e24:	6e 5d       	subi	r22, 0xDE	; 222
    4e26:	7f 4f       	sbci	r23, 0xFF	; 255
    4e28:	ce 01       	movw	r24, r28
    4e2a:	4c 96       	adiw	r24, 0x1c	; 28
    4e2c:	0e 94 c2 07 	call	0xf84	; 0xf84 <_ZplRK15StringSumHelperRK6String>
    4e30:	6a ef       	ldi	r22, 0xFA	; 250
    4e32:	71 e0       	ldi	r23, 0x01	; 1
    4e34:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZplRK15StringSumHelperPKc>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
	const char* c_str() const { return buffer; }
    4e38:	fc 01       	movw	r30, r24
    4e3a:	40 81       	ld	r20, Z
    4e3c:	51 81       	ldd	r21, Z+1	; 0x01
      // Open the specified file/directory with the supplied mode (e.g. read or
      // write, etc). Returns a File object for interacting with the file.
      // Note that currently only one file can be open at a time.
      File open(const char *filename, uint8_t mode = FILE_READ);
      File open(const String &filename, uint8_t mode = FILE_READ) {
        return open(filename.c_str(), mode);
    4e3e:	21 e0       	ldi	r18, 0x01	; 1
    4e40:	62 ef       	ldi	r22, 0xF2	; 242
    4e42:	73 e0       	ldi	r23, 0x03	; 3
    4e44:	ce 01       	movw	r24, r28
    4e46:	89 54       	subi	r24, 0x49	; 73
    4e48:	9f 4f       	sbci	r25, 0xFF	; 255
    4e4a:	0e 94 10 10 	call	0x2020	; 0x2020 <_ZN5SDLib7SDClass4openEPKch>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    4e4e:	ce 01       	movw	r24, r28
    4e50:	4c 96       	adiw	r24, 0x1c	; 28
    4e52:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    4e56:	ce 01       	movw	r24, r28
    4e58:	82 96       	adiw	r24, 0x22	; 34
    4e5a:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>

	unsigned long fSize = target.size();
    4e5e:	ce 01       	movw	r24, r28
    4e60:	89 54       	subi	r24, 0x49	; 73
    4e62:	9f 4f       	sbci	r25, 0xFF	; 255
    4e64:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <_ZN5SDLib4File4sizeEv>
    4e68:	2b 01       	movw	r4, r22
    4e6a:	3c 01       	movw	r6, r24

	target.read(signal_in, filterlen);
    4e6c:	4b e0       	ldi	r20, 0x0B	; 11
    4e6e:	50 e0       	ldi	r21, 0x00	; 0
    4e70:	be 01       	movw	r22, r28
    4e72:	61 5a       	subi	r22, 0xA1	; 161
    4e74:	7f 4f       	sbci	r23, 0xFF	; 255
    4e76:	ce 01       	movw	r24, r28
    4e78:	89 54       	subi	r24, 0x49	; 73
    4e7a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e7c:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <_ZN5SDLib4File4readEPvj>
	target.read(temp_buff, temp_buff_size);
    4e80:	42 e3       	ldi	r20, 0x32	; 50
    4e82:	50 e0       	ldi	r21, 0x00	; 0
    4e84:	be 01       	movw	r22, r28
    4e86:	66 59       	subi	r22, 0x96	; 150
    4e88:	7f 4f       	sbci	r23, 0xFF	; 255
    4e8a:	ce 01       	movw	r24, r28
    4e8c:	89 54       	subi	r24, 0x49	; 73
    4e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    4e90:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <_ZN5SDLib4File4readEPvj>

	int filter[filterlen] = {0, 1, 5, -4, -48, 920, -48, -4, 5, 1, 0};
	byte signal_in[filterlen];
	byte temp_buff[temp_buff_size];
	float temp = 0;
	byte temp_count = 0;
    4e94:	e1 2c       	mov	r14, r1
	unsigned long fSize = target.size();

	target.read(signal_in, filterlen);
	target.read(temp_buff, temp_buff_size);

	while (fSize) {
    4e96:	41 14       	cp	r4, r1
    4e98:	51 04       	cpc	r5, r1
    4e9a:	61 04       	cpc	r6, r1
    4e9c:	71 04       	cpc	r7, r1
    4e9e:	09 f4       	brne	.+2      	; 0x4ea2 <_Z8convolvev+0x1a2>
    4ea0:	aa c0       	rjmp	.+340    	; 0x4ff6 <_Z8convolvev+0x2f6>
		//t = micros();
		if (temp_count == temp_buff_size) {
    4ea2:	f2 e3       	ldi	r31, 0x32	; 50
    4ea4:	ef 12       	cpse	r14, r31
    4ea6:	0b c0       	rjmp	.+22     	; 0x4ebe <_Z8convolvev+0x1be>
			target.read(temp_buff, temp_buff_size);
    4ea8:	42 e3       	ldi	r20, 0x32	; 50
    4eaa:	50 e0       	ldi	r21, 0x00	; 0
    4eac:	be 01       	movw	r22, r28
    4eae:	66 59       	subi	r22, 0x96	; 150
    4eb0:	7f 4f       	sbci	r23, 0xFF	; 255
    4eb2:	ce 01       	movw	r24, r28
    4eb4:	89 54       	subi	r24, 0x49	; 73
    4eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    4eb8:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <_ZN5SDLib4File4readEPvj>
			temp_count = 0;
    4ebc:	e1 2c       	mov	r14, r1
		}
		temp = 127;
		//temp_ = 0;

		for (byte i = 0; i < filterlen - 1; i++) {
    4ebe:	f1 2c       	mov	r15, r1
		//t = micros();
		if (temp_count == temp_buff_size) {
			target.read(temp_buff, temp_buff_size);
			temp_count = 0;
		}
		temp = 127;
    4ec0:	0f 2e       	mov	r0, r31
    4ec2:	81 2c       	mov	r8, r1
    4ec4:	91 2c       	mov	r9, r1
    4ec6:	fe ef       	ldi	r31, 0xFE	; 254
    4ec8:	af 2e       	mov	r10, r31
    4eca:	f2 e4       	ldi	r31, 0x42	; 66
    4ecc:	bf 2e       	mov	r11, r31
    4ece:	f0 2d       	mov	r31, r0
		//temp_ = 0;

		for (byte i = 0; i < filterlen - 1; i++) {
    4ed0:	89 e0       	ldi	r24, 0x09	; 9
    4ed2:	8f 15       	cp	r24, r15
    4ed4:	08 f4       	brcc	.+2      	; 0x4ed8 <_Z8convolvev+0x1d8>
    4ed6:	56 c0       	rjmp	.+172    	; 0x4f84 <_Z8convolvev+0x284>
			temp += ((float(signal_in[i]) - 127) * filter[i] / 1000);//570
    4ed8:	0f 2d       	mov	r16, r15
    4eda:	10 e0       	ldi	r17, 0x00	; 0
    4edc:	0f 2e       	mov	r0, r31
    4ede:	ff e5       	ldi	r31, 0x5F	; 95
    4ee0:	cf 2e       	mov	r12, r31
    4ee2:	d1 2c       	mov	r13, r1
    4ee4:	f0 2d       	mov	r31, r0
    4ee6:	cc 0e       	add	r12, r28
    4ee8:	dd 1e       	adc	r13, r29
    4eea:	c0 0e       	add	r12, r16
    4eec:	d1 1e       	adc	r13, r17
    4eee:	f6 01       	movw	r30, r12
    4ef0:	60 81       	ld	r22, Z
    4ef2:	70 e0       	ldi	r23, 0x00	; 0
    4ef4:	80 e0       	ldi	r24, 0x00	; 0
    4ef6:	90 e0       	ldi	r25, 0x00	; 0
    4ef8:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__floatunsisf>
    4efc:	20 e0       	ldi	r18, 0x00	; 0
    4efe:	30 e0       	ldi	r19, 0x00	; 0
    4f00:	4e ef       	ldi	r20, 0xFE	; 254
    4f02:	52 e4       	ldi	r21, 0x42	; 66
    4f04:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__subsf3>
    4f08:	ce 52       	subi	r28, 0x2E	; 46
    4f0a:	df 4f       	sbci	r29, 0xFF	; 255
    4f0c:	68 83       	st	Y, r22
    4f0e:	79 83       	std	Y+1, r23	; 0x01
    4f10:	8a 83       	std	Y+2, r24	; 0x02
    4f12:	9b 83       	std	Y+3, r25	; 0x03
    4f14:	c2 5d       	subi	r28, 0xD2	; 210
    4f16:	d0 40       	sbci	r29, 0x00	; 0
    4f18:	f8 01       	movw	r30, r16
    4f1a:	ee 0f       	add	r30, r30
    4f1c:	ff 1f       	adc	r31, r31
    4f1e:	89 e4       	ldi	r24, 0x49	; 73
    4f20:	90 e0       	ldi	r25, 0x00	; 0
    4f22:	8c 0f       	add	r24, r28
    4f24:	9d 1f       	adc	r25, r29
    4f26:	e8 0f       	add	r30, r24
    4f28:	f9 1f       	adc	r31, r25
    4f2a:	60 81       	ld	r22, Z
    4f2c:	71 81       	ldd	r23, Z+1	; 0x01
    4f2e:	07 2e       	mov	r0, r23
    4f30:	00 0c       	add	r0, r0
    4f32:	88 0b       	sbc	r24, r24
    4f34:	99 0b       	sbc	r25, r25
    4f36:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__floatsisf>
    4f3a:	ce 52       	subi	r28, 0x2E	; 46
    4f3c:	df 4f       	sbci	r29, 0xFF	; 255
    4f3e:	28 81       	ld	r18, Y
    4f40:	39 81       	ldd	r19, Y+1	; 0x01
    4f42:	4a 81       	ldd	r20, Y+2	; 0x02
    4f44:	5b 81       	ldd	r21, Y+3	; 0x03
    4f46:	c2 5d       	subi	r28, 0xD2	; 210
    4f48:	d0 40       	sbci	r29, 0x00	; 0
    4f4a:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__mulsf3>
    4f4e:	20 e0       	ldi	r18, 0x00	; 0
    4f50:	30 e0       	ldi	r19, 0x00	; 0
    4f52:	4a e7       	ldi	r20, 0x7A	; 122
    4f54:	54 e4       	ldi	r21, 0x44	; 68
    4f56:	0e 94 55 2e 	call	0x5caa	; 0x5caa <__divsf3>
    4f5a:	9b 01       	movw	r18, r22
    4f5c:	ac 01       	movw	r20, r24
    4f5e:	c5 01       	movw	r24, r10
    4f60:	b4 01       	movw	r22, r8
    4f62:	0e 94 e9 2d 	call	0x5bd2	; 0x5bd2 <__addsf3>
    4f66:	4b 01       	movw	r8, r22
    4f68:	5c 01       	movw	r10, r24
			signal_in[i] = signal_in[i + 1];
    4f6a:	0f 5f       	subi	r16, 0xFF	; 255
    4f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    4f6e:	ef e5       	ldi	r30, 0x5F	; 95
    4f70:	f0 e0       	ldi	r31, 0x00	; 0
    4f72:	ec 0f       	add	r30, r28
    4f74:	fd 1f       	adc	r31, r29
    4f76:	e0 0f       	add	r30, r16
    4f78:	f1 1f       	adc	r31, r17
    4f7a:	80 81       	ld	r24, Z
    4f7c:	f6 01       	movw	r30, r12
    4f7e:	80 83       	st	Z, r24
			temp_count = 0;
		}
		temp = 127;
		//temp_ = 0;

		for (byte i = 0; i < filterlen - 1; i++) {
    4f80:	f3 94       	inc	r15
    4f82:	a6 cf       	rjmp	.-180    	; 0x4ed0 <_Z8convolvev+0x1d0>
			temp += ((float(signal_in[i]) - 127) * filter[i] / 1000);//570
			signal_in[i] = signal_in[i + 1];
		}
		temp += ((float(signal_in[filterlen - 1]) - 127) * filter[filterlen - 1] / 1000);//570
    4f84:	aa 96       	adiw	r28, 0x2a	; 42
    4f86:	6f ad       	ldd	r22, Y+63	; 0x3f
    4f88:	aa 97       	sbiw	r28, 0x2a	; 42
    4f8a:	70 e0       	ldi	r23, 0x00	; 0
    4f8c:	80 e0       	ldi	r24, 0x00	; 0
    4f8e:	90 e0       	ldi	r25, 0x00	; 0
    4f90:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__floatunsisf>
    4f94:	20 e0       	ldi	r18, 0x00	; 0
    4f96:	30 e0       	ldi	r19, 0x00	; 0
    4f98:	4e ef       	ldi	r20, 0xFE	; 254
    4f9a:	52 e4       	ldi	r21, 0x42	; 66
    4f9c:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__subsf3>
    4fa0:	20 e0       	ldi	r18, 0x00	; 0
    4fa2:	30 e0       	ldi	r19, 0x00	; 0
    4fa4:	a9 01       	movw	r20, r18
    4fa6:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__mulsf3>
    4faa:	20 e0       	ldi	r18, 0x00	; 0
    4fac:	30 e0       	ldi	r19, 0x00	; 0
    4fae:	4a e7       	ldi	r20, 0x7A	; 122
    4fb0:	54 e4       	ldi	r21, 0x44	; 68
    4fb2:	0e 94 55 2e 	call	0x5caa	; 0x5caa <__divsf3>
    4fb6:	9b 01       	movw	r18, r22
    4fb8:	ac 01       	movw	r20, r24
    4fba:	c5 01       	movw	r24, r10
    4fbc:	b4 01       	movw	r22, r8
    4fbe:	0e 94 e9 2d 	call	0x5bd2	; 0x5bd2 <__addsf3>
		signal_in[filterlen - 1] = temp_buff[temp_count++];
    4fc2:	11 e0       	ldi	r17, 0x01	; 1
    4fc4:	1e 0d       	add	r17, r14
    4fc6:	ea e6       	ldi	r30, 0x6A	; 106
    4fc8:	f0 e0       	ldi	r31, 0x00	; 0
    4fca:	ec 0f       	add	r30, r28
    4fcc:	fd 1f       	adc	r31, r29
    4fce:	ee 0d       	add	r30, r14
    4fd0:	f1 1d       	adc	r31, r1
    4fd2:	20 81       	ld	r18, Z
    4fd4:	aa 96       	adiw	r28, 0x2a	; 42
    4fd6:	2f af       	std	Y+63, r18	; 0x3f
    4fd8:	aa 97       	sbiw	r28, 0x2a	; 42


		//temp_ = byte(temp + 127) ;
		out.write(byte(temp));
    4fda:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <__fixunssfsi>
    4fde:	ce 01       	movw	r24, r28
    4fe0:	84 56       	subi	r24, 0x64	; 100
    4fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    4fe4:	0e 94 45 0c 	call	0x188a	; 0x188a <_ZN5SDLib4File5writeEh>
		//Serial.println(String(micros()-t));
		fSize --;
    4fe8:	f1 e0       	ldi	r31, 0x01	; 1
    4fea:	4f 1a       	sub	r4, r31
    4fec:	51 08       	sbc	r5, r1
    4fee:	61 08       	sbc	r6, r1
    4ff0:	71 08       	sbc	r7, r1
		for (byte i = 0; i < filterlen - 1; i++) {
			temp += ((float(signal_in[i]) - 127) * filter[i] / 1000);//570
			signal_in[i] = signal_in[i + 1];
		}
		temp += ((float(signal_in[filterlen - 1]) - 127) * filter[filterlen - 1] / 1000);//570
		signal_in[filterlen - 1] = temp_buff[temp_count++];
    4ff2:	e1 2e       	mov	r14, r17
	unsigned long fSize = target.size();

	target.read(signal_in, filterlen);
	target.read(temp_buff, temp_buff_size);

	while (fSize) {
    4ff4:	50 cf       	rjmp	.-352    	; 0x4e96 <_Z8convolvev+0x196>
    4ff6:	c2 56       	subi	r28, 0x62	; 98
    4ff8:	df 4f       	sbci	r29, 0xFF	; 255
    4ffa:	88 81       	ld	r24, Y
    4ffc:	99 81       	ldd	r25, Y+1	; 0x01
    4ffe:	ce 59       	subi	r28, 0x9E	; 158
    5000:	d0 40       	sbci	r29, 0x00	; 0
    5002:	9c 83       	std	Y+4, r25	; 0x04
    5004:	8b 83       	std	Y+3, r24	; 0x03
    5006:	c0 56       	subi	r28, 0x60	; 96
    5008:	df 4f       	sbci	r29, 0xFF	; 255
    500a:	88 81       	ld	r24, Y
    500c:	99 81       	ldd	r25, Y+1	; 0x01
    500e:	aa 81       	ldd	r26, Y+2	; 0x02
    5010:	bb 81       	ldd	r27, Y+3	; 0x03
    5012:	c0 5a       	subi	r28, 0xA0	; 160
    5014:	d0 40       	sbci	r29, 0x00	; 0
    5016:	8d 83       	std	Y+5, r24	; 0x05
    5018:	9e 83       	std	Y+6, r25	; 0x06
    501a:	af 83       	std	Y+7, r26	; 0x07
    501c:	b8 87       	std	Y+8, r27	; 0x08
    501e:	cc 55       	subi	r28, 0x5C	; 92
    5020:	df 4f       	sbci	r29, 0xFF	; 255
    5022:	88 81       	ld	r24, Y
    5024:	99 81       	ldd	r25, Y+1	; 0x01
    5026:	aa 81       	ldd	r26, Y+2	; 0x02
    5028:	bb 81       	ldd	r27, Y+3	; 0x03
    502a:	c4 5a       	subi	r28, 0xA4	; 164
    502c:	d0 40       	sbci	r29, 0x00	; 0
    502e:	89 87       	std	Y+9, r24	; 0x09
    5030:	9a 87       	std	Y+10, r25	; 0x0a
    5032:	ab 87       	std	Y+11, r26	; 0x0b
    5034:	bc 87       	std	Y+12, r27	; 0x0c
#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT | O_APPEND)

namespace SDLib {

  class File : public Stream {
    5036:	86 ea       	ldi	r24, 0xA6	; 166
    5038:	91 e0       	ldi	r25, 0x01	; 1
    503a:	9a 83       	std	Y+2, r25	; 0x02
    503c:	89 83       	std	Y+1, r24	; 0x01
    503e:	8d e0       	ldi	r24, 0x0D	; 13
    5040:	ec e9       	ldi	r30, 0x9C	; 156
    5042:	f0 e0       	ldi	r31, 0x00	; 0
    5044:	ec 0f       	add	r30, r28
    5046:	fd 1f       	adc	r31, r29
    5048:	3c 96       	adiw	r30, 0x0c	; 12
    504a:	de 01       	movw	r26, r28
    504c:	1d 96       	adiw	r26, 0x0d	; 13
    504e:	01 90       	ld	r0, Z+
    5050:	0d 92       	st	X+, r0
    5052:	8a 95       	dec	r24
    5054:	e1 f7       	brne	.-8      	; 0x504e <_Z8convolvev+0x34e>
    5056:	cb 54       	subi	r28, 0x4B	; 75
    5058:	df 4f       	sbci	r29, 0xFF	; 255
    505a:	88 81       	ld	r24, Y
    505c:	99 81       	ldd	r25, Y+1	; 0x01
    505e:	c5 5b       	subi	r28, 0xB5	; 181
    5060:	d0 40       	sbci	r29, 0x00	; 0
    5062:	9b 8f       	std	Y+27, r25	; 0x1b
    5064:	8a 8f       	std	Y+26, r24	; 0x1a
		//Serial.println(String(micros()-t));
		fSize --;


	}
	finalizeWave(out);
    5066:	ce 01       	movw	r24, r28
    5068:	01 96       	adiw	r24, 0x01	; 1
    506a:	0e 94 28 26 	call	0x4c50	; 0x4c50 <_Z12finalizeWaveN5SDLib4FileE>
	out.close();
    506e:	ce 01       	movw	r24, r28
    5070:	84 56       	subi	r24, 0x64	; 100
    5072:	9f 4f       	sbci	r25, 0xFF	; 255
    5074:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <_ZN5SDLib4File5closeEv>
	target.close();
    5078:	ce 01       	movw	r24, r28
    507a:	89 54       	subi	r24, 0x49	; 73
    507c:	9f 4f       	sbci	r25, 0xFF	; 255
    507e:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <_ZN5SDLib4File5closeEv>
	//Serial.println("stop");
}
    5082:	cb 52       	subi	r28, 0x2B	; 43
    5084:	df 4f       	sbci	r29, 0xFF	; 255
    5086:	0f b6       	in	r0, 0x3f	; 63
    5088:	f8 94       	cli
    508a:	de bf       	out	0x3e, r29	; 62
    508c:	0f be       	out	0x3f, r0	; 63
    508e:	cd bf       	out	0x3d, r28	; 61
    5090:	df 91       	pop	r29
    5092:	cf 91       	pop	r28
    5094:	1f 91       	pop	r17
    5096:	0f 91       	pop	r16
    5098:	ff 90       	pop	r15
    509a:	ef 90       	pop	r14
    509c:	df 90       	pop	r13
    509e:	cf 90       	pop	r12
    50a0:	bf 90       	pop	r11
    50a2:	af 90       	pop	r10
    50a4:	9f 90       	pop	r9
    50a6:	8f 90       	pop	r8
    50a8:	7f 90       	pop	r7
    50aa:	6f 90       	pop	r6
    50ac:	5f 90       	pop	r5
    50ae:	4f 90       	pop	r4
    50b0:	08 95       	ret

000050b2 <_Z13sig_freqShiftv>:
}
//END OF WAVE FILE CREATE FUNCTIONS


//>--------------------------------------< FREQUENCY SHIFTING >--------------------------------------<
void sig_freqShift() {
    50b2:	ef 92       	push	r14
    50b4:	ff 92       	push	r15
    50b6:	0f 93       	push	r16
    50b8:	1f 93       	push	r17
    50ba:	cf 93       	push	r28
    50bc:	df 93       	push	r29
    50be:	cd b7       	in	r28, 0x3d	; 61
    50c0:	de b7       	in	r29, 0x3e	; 62
    50c2:	cb 5a       	subi	r28, 0xAB	; 171
    50c4:	d1 09       	sbc	r29, r1
    50c6:	0f b6       	in	r0, 0x3f	; 63
    50c8:	f8 94       	cli
    50ca:	de bf       	out	0x3e, r29	; 62
    50cc:	0f be       	out	0x3f, r0	; 63
    50ce:	cd bf       	out	0x3d, r28	; 61

	if (!SD.exists("S" + String(fname_temp[0]) + ".bin")) {
    50d0:	60 e0       	ldi	r22, 0x00	; 0
    50d2:	70 e0       	ldi	r23, 0x00	; 0
    50d4:	8f e4       	ldi	r24, 0x4F	; 79
    50d6:	96 e0       	ldi	r25, 0x06	; 6
    50d8:	0e 94 f5 07 	call	0xfea	; 0xfea <_ZN6StringixEj>
    50dc:	fc 01       	movw	r30, r24
    50de:	60 81       	ld	r22, Z
    50e0:	ce 01       	movw	r24, r28
    50e2:	85 96       	adiw	r24, 0x25	; 37
    50e4:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    50e8:	68 ef       	ldi	r22, 0xF8	; 248
    50ea:	71 e0       	ldi	r23, 0x01	; 1
    50ec:	ce 01       	movw	r24, r28
    50ee:	4f 96       	adiw	r24, 0x1f	; 31
    50f0:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
    50f4:	be 01       	movw	r22, r28
    50f6:	6b 5d       	subi	r22, 0xDB	; 219
    50f8:	7f 4f       	sbci	r23, 0xFF	; 255
    50fa:	ce 01       	movw	r24, r28
    50fc:	4f 96       	adiw	r24, 0x1f	; 31
    50fe:	0e 94 c2 07 	call	0xf84	; 0xf84 <_ZplRK15StringSumHelperRK6String>
    5102:	6a ef       	ldi	r22, 0xFA	; 250
    5104:	71 e0       	ldi	r23, 0x01	; 1
    5106:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZplRK15StringSumHelperPKc>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
	const char* c_str() const { return buffer; }
    510a:	fc 01       	movw	r30, r24
    510c:	60 81       	ld	r22, Z
    510e:	71 81       	ldd	r23, Z+1	; 0x01
      }

      // Methods to determine if the requested file path exists.
      boolean exists(const char *filepath);
      boolean exists(const String &filepath) {
        return exists(filepath.c_str());
    5110:	82 ef       	ldi	r24, 0xF2	; 242
    5112:	93 e0       	ldi	r25, 0x03	; 3
    5114:	0e 94 27 11 	call	0x224e	; 0x224e <_ZN5SDLib7SDClass6existsEPKc>
    5118:	18 2f       	mov	r17, r24
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    511a:	ce 01       	movw	r24, r28
    511c:	4f 96       	adiw	r24, 0x1f	; 31
    511e:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    5122:	ce 01       	movw	r24, r28
    5124:	85 96       	adiw	r24, 0x25	; 37
    5126:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    512a:	11 11       	cpse	r17, r1
    512c:	b0 c0       	rjmp	.+352    	; 0x528e <_Z13sig_freqShiftv+0x1dc>

		secondLine("Processing");
    512e:	6f ef       	ldi	r22, 0xFF	; 255
    5130:	71 e0       	ldi	r23, 0x01	; 1
    5132:	ce 01       	movw	r24, r28
    5134:	49 96       	adiw	r24, 0x19	; 25
    5136:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
    513a:	ce 01       	movw	r24, r28
    513c:	49 96       	adiw	r24, 0x19	; 25
    513e:	0e 94 34 24 	call	0x4868	; 0x4868 <_Z10secondLine6String>
    5142:	ce 01       	movw	r24, r28
    5144:	49 96       	adiw	r24, 0x19	; 25
    5146:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
		File out = SD.open("S" + String(fname_temp[0]) + ".bin", FILE_WRITE);
    514a:	60 e0       	ldi	r22, 0x00	; 0
    514c:	70 e0       	ldi	r23, 0x00	; 0
    514e:	8f e4       	ldi	r24, 0x4F	; 79
    5150:	96 e0       	ldi	r25, 0x06	; 6
    5152:	0e 94 f5 07 	call	0xfea	; 0xfea <_ZN6StringixEj>
    5156:	fc 01       	movw	r30, r24
    5158:	60 81       	ld	r22, Z
    515a:	ce 01       	movw	r24, r28
    515c:	43 96       	adiw	r24, 0x13	; 19
    515e:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    5162:	68 ef       	ldi	r22, 0xF8	; 248
    5164:	71 e0       	ldi	r23, 0x01	; 1
    5166:	ce 01       	movw	r24, r28
    5168:	0d 96       	adiw	r24, 0x0d	; 13
    516a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
    516e:	be 01       	movw	r22, r28
    5170:	6d 5e       	subi	r22, 0xED	; 237
    5172:	7f 4f       	sbci	r23, 0xFF	; 255
    5174:	ce 01       	movw	r24, r28
    5176:	0d 96       	adiw	r24, 0x0d	; 13
    5178:	0e 94 c2 07 	call	0xf84	; 0xf84 <_ZplRK15StringSumHelperRK6String>
    517c:	6a ef       	ldi	r22, 0xFA	; 250
    517e:	71 e0       	ldi	r23, 0x01	; 1
    5180:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZplRK15StringSumHelperPKc>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
	const char* c_str() const { return buffer; }
    5184:	fc 01       	movw	r30, r24
    5186:	40 81       	ld	r20, Z
    5188:	51 81       	ldd	r21, Z+1	; 0x01
      // Open the specified file/directory with the supplied mode (e.g. read or
      // write, etc). Returns a File object for interacting with the file.
      // Note that currently only one file can be open at a time.
      File open(const char *filename, uint8_t mode = FILE_READ);
      File open(const String &filename, uint8_t mode = FILE_READ) {
        return open(filename.c_str(), mode);
    518a:	27 e1       	ldi	r18, 0x17	; 23
    518c:	62 ef       	ldi	r22, 0xF2	; 242
    518e:	73 e0       	ldi	r23, 0x03	; 3
    5190:	ce 01       	movw	r24, r28
    5192:	88 58       	subi	r24, 0x88	; 136
    5194:	9f 4f       	sbci	r25, 0xFF	; 255
    5196:	0e 94 10 10 	call	0x2020	; 0x2020 <_ZN5SDLib7SDClass4openEPKch>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    519a:	ce 01       	movw	r24, r28
    519c:	0d 96       	adiw	r24, 0x0d	; 13
    519e:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    51a2:	ce 01       	movw	r24, r28
    51a4:	43 96       	adiw	r24, 0x13	; 19
    51a6:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
	const char* c_str() const { return buffer; }
    51aa:	40 91 4f 06 	lds	r20, 0x064F	; 0x80064f <fname_temp>
    51ae:	50 91 50 06 	lds	r21, 0x0650	; 0x800650 <fname_temp+0x1>
    51b2:	21 e0       	ldi	r18, 0x01	; 1
    51b4:	62 ef       	ldi	r22, 0xF2	; 242
    51b6:	73 e0       	ldi	r23, 0x03	; 3
    51b8:	ce 01       	movw	r24, r28
    51ba:	83 5a       	subi	r24, 0xA3	; 163
    51bc:	9f 4f       	sbci	r25, 0xFF	; 255
    51be:	0e 94 10 10 	call	0x2020	; 0x2020 <_ZN5SDLib7SDClass4openEPKch>
		File target = SD.open(fname_temp, FILE_READ);
		target.seek(44);
    51c2:	4c e2       	ldi	r20, 0x2C	; 44
    51c4:	50 e0       	ldi	r21, 0x00	; 0
    51c6:	60 e0       	ldi	r22, 0x00	; 0
    51c8:	70 e0       	ldi	r23, 0x00	; 0
    51ca:	ce 01       	movw	r24, r28
    51cc:	83 5a       	subi	r24, 0xA3	; 163
    51ce:	9f 4f       	sbci	r25, 0xFF	; 255
    51d0:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <_ZN5SDLib4File4seekEm>

		byte buff[bufflen];
		int cosWave12_5[25] = {10, 10, 9, 7, 5, 3, 1, -2, -4, -6, -8, -9, -10, -10, -9, -8, -6, -4, -2, 1, 3, 5, 7, 9, 10};
    51d4:	82 e3       	ldi	r24, 0x32	; 50
    51d6:	ea e3       	ldi	r30, 0x3A	; 58
    51d8:	f1 e0       	ldi	r31, 0x01	; 1
    51da:	de 01       	movw	r26, r28
    51dc:	9b 96       	adiw	r26, 0x2b	; 43
    51de:	01 90       	ld	r0, Z+
    51e0:	0d 92       	st	X+, r0
    51e2:	8a 95       	dec	r24
    51e4:	e1 f7       	brne	.-8      	; 0x51de <_Z13sig_freqShiftv+0x12c>
		byte count = 0;
		byte buffCount = 0;
    51e6:	e1 2c       	mov	r14, r1
    51e8:	01 c0       	rjmp	.+2      	; 0x51ec <_Z13sig_freqShiftv+0x13a>
			if (count == 25 )
			{
				count = 0;
			}
			if (buffCount == bufflen) {
				buffCount = 0;
    51ea:	e0 2e       	mov	r14, r16
		byte buff[bufflen];
		int cosWave12_5[25] = {10, 10, 9, 7, 5, 3, 1, -2, -4, -6, -8, -9, -10, -10, -9, -8, -6, -4, -2, 1, 3, 5, 7, 9, 10};
		byte count = 0;
		byte buffCount = 0;

		while (target.available()) {
    51ec:	ce 01       	movw	r24, r28
    51ee:	83 5a       	subi	r24, 0xA3	; 163
    51f0:	9f 4f       	sbci	r25, 0xFF	; 255
    51f2:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <_ZN5SDLib4File9availableEv>
    51f6:	89 2b       	or	r24, r25
    51f8:	09 f4       	brne	.+2      	; 0x51fc <_Z13sig_freqShiftv+0x14a>
    51fa:	3f c0       	rjmp	.+126    	; 0x527a <_Z13sig_freqShiftv+0x1c8>

			buff[buffCount++] = (byte)((int)(target.read() - 127) * cosWave12_5[count++] / 10 + 127);
    51fc:	01 e0       	ldi	r16, 0x01	; 1
    51fe:	0e 0d       	add	r16, r14
    5200:	f1 2c       	mov	r15, r1
    5202:	ce 01       	movw	r24, r28
    5204:	83 5a       	subi	r24, 0xA3	; 163
    5206:	9f 4f       	sbci	r25, 0xFF	; 255
    5208:	0e 94 95 0c 	call	0x192a	; 0x192a <_ZN5SDLib4File4readEv>
    520c:	bc 01       	movw	r22, r24
    520e:	6f 57       	subi	r22, 0x7F	; 127
    5210:	71 09       	sbc	r23, r1
    5212:	21 e0       	ldi	r18, 0x01	; 1
    5214:	21 0f       	add	r18, r17
    5216:	e1 2f       	mov	r30, r17
    5218:	f0 e0       	ldi	r31, 0x00	; 0
    521a:	ee 0f       	add	r30, r30
    521c:	ff 1f       	adc	r31, r31
    521e:	81 e0       	ldi	r24, 0x01	; 1
    5220:	90 e0       	ldi	r25, 0x00	; 0
    5222:	8c 0f       	add	r24, r28
    5224:	9d 1f       	adc	r25, r29
    5226:	e8 0f       	add	r30, r24
    5228:	f9 1f       	adc	r31, r25
    522a:	42 a5       	ldd	r20, Z+42	; 0x2a
    522c:	53 a5       	ldd	r21, Z+43	; 0x2b
    522e:	64 9f       	mul	r22, r20
    5230:	c0 01       	movw	r24, r0
    5232:	65 9f       	mul	r22, r21
    5234:	90 0d       	add	r25, r0
    5236:	74 9f       	mul	r23, r20
    5238:	90 0d       	add	r25, r0
    523a:	11 24       	eor	r1, r1
    523c:	6a e0       	ldi	r22, 0x0A	; 10
    523e:	70 e0       	ldi	r23, 0x00	; 0
    5240:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <__divmodhi4>
    5244:	e3 e9       	ldi	r30, 0x93	; 147
    5246:	f0 e0       	ldi	r31, 0x00	; 0
    5248:	ec 0f       	add	r30, r28
    524a:	fd 1f       	adc	r31, r29
    524c:	ee 0d       	add	r30, r14
    524e:	ff 1d       	adc	r31, r15
    5250:	61 58       	subi	r22, 0x81	; 129
    5252:	60 83       	st	Z, r22
			if (count == 25 )
    5254:	29 31       	cpi	r18, 0x19	; 25
    5256:	11 f0       	breq	.+4      	; 0x525c <_Z13sig_freqShiftv+0x1aa>
		byte count = 0;
		byte buffCount = 0;

		while (target.available()) {

			buff[buffCount++] = (byte)((int)(target.read() - 127) * cosWave12_5[count++] / 10 + 127);
    5258:	12 2f       	mov	r17, r18
    525a:	01 c0       	rjmp	.+2      	; 0x525e <_Z13sig_freqShiftv+0x1ac>
			if (count == 25 )
			{
				count = 0;
    525c:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (buffCount == bufflen) {
    525e:	09 31       	cpi	r16, 0x19	; 25
    5260:	21 f6       	brne	.-120    	; 0x51ea <_Z13sig_freqShiftv+0x138>
				buffCount = 0;
				out.write((byte*)buff, bufflen);
    5262:	49 e1       	ldi	r20, 0x19	; 25
    5264:	50 e0       	ldi	r21, 0x00	; 0
    5266:	be 01       	movw	r22, r28
    5268:	6d 56       	subi	r22, 0x6D	; 109
    526a:	7f 4f       	sbci	r23, 0xFF	; 255
    526c:	ce 01       	movw	r24, r28
    526e:	88 58       	subi	r24, 0x88	; 136
    5270:	9f 4f       	sbci	r25, 0xFF	; 255
    5272:	0e 94 6d 0c 	call	0x18da	; 0x18da <_ZN5SDLib4File5writeEPKhj>
			if (count == 25 )
			{
				count = 0;
			}
			if (buffCount == bufflen) {
				buffCount = 0;
    5276:	00 e0       	ldi	r16, 0x00	; 0
    5278:	b8 cf       	rjmp	.-144    	; 0x51ea <_Z13sig_freqShiftv+0x138>
				out.write((byte*)buff, bufflen);
			}

		}

		out.close();
    527a:	ce 01       	movw	r24, r28
    527c:	88 58       	subi	r24, 0x88	; 136
    527e:	9f 4f       	sbci	r25, 0xFF	; 255
    5280:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <_ZN5SDLib4File5closeEv>
		target.close();
    5284:	ce 01       	movw	r24, r28
    5286:	83 5a       	subi	r24, 0xA3	; 163
    5288:	9f 4f       	sbci	r25, 0xFF	; 255
    528a:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <_ZN5SDLib4File5closeEv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    528e:	62 ef       	ldi	r22, 0xF2	; 242
    5290:	71 e0       	ldi	r23, 0x01	; 1
    5292:	ce 01       	movw	r24, r28
    5294:	07 96       	adiw	r24, 0x07	; 7
    5296:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
	}
	if (!SD.exists("SHIFT" + fname_temp)) {
    529a:	6f e4       	ldi	r22, 0x4F	; 79
    529c:	76 e0       	ldi	r23, 0x06	; 6
    529e:	ce 01       	movw	r24, r28
    52a0:	07 96       	adiw	r24, 0x07	; 7
    52a2:	0e 94 c2 07 	call	0xf84	; 0xf84 <_ZplRK15StringSumHelperRK6String>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
	const char* c_str() const { return buffer; }
    52a6:	fc 01       	movw	r30, r24
    52a8:	60 81       	ld	r22, Z
    52aa:	71 81       	ldd	r23, Z+1	; 0x01
      }

      // Methods to determine if the requested file path exists.
      boolean exists(const char *filepath);
      boolean exists(const String &filepath) {
        return exists(filepath.c_str());
    52ac:	82 ef       	ldi	r24, 0xF2	; 242
    52ae:	93 e0       	ldi	r25, 0x03	; 3
    52b0:	0e 94 27 11 	call	0x224e	; 0x224e <_ZN5SDLib7SDClass6existsEPKc>
    52b4:	18 2f       	mov	r17, r24
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    52b6:	ce 01       	movw	r24, r28
    52b8:	07 96       	adiw	r24, 0x07	; 7
    52ba:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    52be:	11 11       	cpse	r17, r1
    52c0:	02 c0       	rjmp	.+4      	; 0x52c6 <_Z13sig_freqShiftv+0x214>
		convolve();
    52c2:	0e 94 80 26 	call	0x4d00	; 0x4d00 <_Z8convolvev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    52c6:	62 ef       	ldi	r22, 0xF2	; 242
    52c8:	71 e0       	ldi	r23, 0x01	; 1
    52ca:	ce 01       	movw	r24, r28
    52cc:	01 96       	adiw	r24, 0x01	; 1
    52ce:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
	}
	fname_temp = "SHIFT" + fname_temp;
    52d2:	6f e4       	ldi	r22, 0x4F	; 79
    52d4:	76 e0       	ldi	r23, 0x06	; 6
    52d6:	ce 01       	movw	r24, r28
    52d8:	01 96       	adiw	r24, 0x01	; 1
    52da:	0e 94 c2 07 	call	0xf84	; 0xf84 <_ZplRK15StringSumHelperRK6String>
    52de:	bc 01       	movw	r22, r24
    52e0:	8f e4       	ldi	r24, 0x4F	; 79
    52e2:	96 e0       	ldi	r25, 0x06	; 6
    52e4:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    52e8:	ce 01       	movw	r24, r28
    52ea:	01 96       	adiw	r24, 0x01	; 1
    52ec:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
}
    52f0:	c5 55       	subi	r28, 0x55	; 85
    52f2:	df 4f       	sbci	r29, 0xFF	; 255
    52f4:	0f b6       	in	r0, 0x3f	; 63
    52f6:	f8 94       	cli
    52f8:	de bf       	out	0x3e, r29	; 62
    52fa:	0f be       	out	0x3f, r0	; 63
    52fc:	cd bf       	out	0x3d, r28	; 61
    52fe:	df 91       	pop	r29
    5300:	cf 91       	pop	r28
    5302:	1f 91       	pop	r17
    5304:	0f 91       	pop	r16
    5306:	ff 90       	pop	r15
    5308:	ef 90       	pop	r14
    530a:	08 95       	ret

0000530c <_Z9analog_ini>:


//>--------------------------------------< IO FUNCTIONS >--------------------------------------<
int analog_in(int inputPin = 0000){
		
	ADMUX |= inputPin;
    530c:	ec e7       	ldi	r30, 0x7C	; 124
    530e:	f0 e0       	ldi	r31, 0x00	; 0
    5310:	90 81       	ld	r25, Z
    5312:	89 2b       	or	r24, r25
    5314:	80 83       	st	Z, r24
	
	ADCSRA = ADCSRA | (1 << ADSC);
    5316:	ea e7       	ldi	r30, 0x7A	; 122
    5318:	f0 e0       	ldi	r31, 0x00	; 0
    531a:	80 81       	ld	r24, Z
    531c:	80 64       	ori	r24, 0x40	; 64
    531e:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC));
    5320:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    5324:	86 fd       	sbrc	r24, 6
    5326:	fc cf       	rjmp	.-8      	; 0x5320 <_Z9analog_ini+0x14>
	
	ADMUX &= 0b11110000;
    5328:	ec e7       	ldi	r30, 0x7C	; 124
    532a:	f0 e0       	ldi	r31, 0x00	; 0
    532c:	80 81       	ld	r24, Z
    532e:	80 7f       	andi	r24, 0xF0	; 240
    5330:	80 83       	st	Z, r24
	
	return ADCH;
    5332:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
    5336:	90 e0       	ldi	r25, 0x00	; 0
    5338:	08 95       	ret

0000533a <_Z6recordv>:
}
//END OF LCD DISPLAY FUNCTIONS

//>-----------------------------< RECORD AND PLAY FUNCTIONS >----------------------------------<

void record() {
    533a:	1f 93       	push	r17
    533c:	cf 93       	push	r28
    533e:	df 93       	push	r29
    5340:	cd b7       	in	r28, 0x3d	; 61
    5342:	de b7       	in	r29, 0x3e	; 62
    5344:	c3 56       	subi	r28, 0x63	; 99
    5346:	d1 09       	sbc	r29, r1
    5348:	0f b6       	in	r0, 0x3f	; 63
    534a:	f8 94       	cli
    534c:	de bf       	out	0x3e, r29	; 62
    534e:	0f be       	out	0x3f, r0	; 63
    5350:	cd bf       	out	0x3d, r28	; 61
	 /*Used to record the data got from input into a file*/
	  checkDuplicates();
    5352:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <_Z15checkDuplicatesv>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
	const char* c_str() const { return buffer; }
    5356:	40 91 4f 06 	lds	r20, 0x064F	; 0x80064f <fname_temp>
    535a:	50 91 50 06 	lds	r21, 0x0650	; 0x800650 <fname_temp+0x1>
      // Open the specified file/directory with the supplied mode (e.g. read or
      // write, etc). Returns a File object for interacting with the file.
      // Note that currently only one file can be open at a time.
      File open(const char *filename, uint8_t mode = FILE_READ);
      File open(const String &filename, uint8_t mode = FILE_READ) {
        return open(filename.c_str(), mode);
    535e:	27 e1       	ldi	r18, 0x17	; 23
    5360:	62 ef       	ldi	r22, 0xF2	; 242
    5362:	73 e0       	ldi	r23, 0x03	; 3
    5364:	ce 01       	movw	r24, r28
    5366:	87 5b       	subi	r24, 0xB7	; 183
    5368:	9f 4f       	sbci	r25, 0xFF	; 255
    536a:	0e 94 10 10 	call	0x2020	; 0x2020 <_ZN5SDLib7SDClass4openEPKch>
	  File test_File = SD.open(fname_temp, FILE_WRITE);

	  if (!test_File) {
    536e:	ce 01       	movw	r24, r28
    5370:	87 5b       	subi	r24, 0xB7	; 183
    5372:	9f 4f       	sbci	r25, 0xFF	; 255
    5374:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_ZN5SDLib4FilecvbEv>
    5378:	81 11       	cpse	r24, r1
    537a:	1b c0       	rjmp	.+54     	; 0x53b2 <_Z6recordv+0x78>
		clrDisplay("Error");
    537c:	6a e0       	ldi	r22, 0x0A	; 10
    537e:	72 e0       	ldi	r23, 0x02	; 2
    5380:	ce 01       	movw	r24, r28
    5382:	8d 5b       	subi	r24, 0xBD	; 189
    5384:	9f 4f       	sbci	r25, 0xFF	; 255
    5386:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
    538a:	ce 01       	movw	r24, r28
    538c:	8d 5b       	subi	r24, 0xBD	; 189
    538e:	9f 4f       	sbci	r25, 0xFF	; 255
    5390:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z10clrDisplay6String>
    5394:	ce 01       	movw	r24, r28
    5396:	8d 5b       	subi	r24, 0xBD	; 189
    5398:	9f 4f       	sbci	r25, 0xFF	; 255
    539a:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    539e:	2f ef       	ldi	r18, 0xFF	; 255
    53a0:	83 ed       	ldi	r24, 0xD3	; 211
    53a2:	90 e3       	ldi	r25, 0x30	; 48
    53a4:	21 50       	subi	r18, 0x01	; 1
    53a6:	80 40       	sbci	r24, 0x00	; 0
    53a8:	90 40       	sbci	r25, 0x00	; 0
    53aa:	e1 f7       	brne	.-8      	; 0x53a4 <_Z6recordv+0x6a>
    53ac:	00 c0       	rjmp	.+0      	; 0x53ae <_Z6recordv+0x74>
    53ae:	00 00       	nop
    53b0:	a1 c0       	rjmp	.+322    	; 0x54f4 <_Z6recordv+0x1ba>
		_delay_ms(1000);
	  }
	  else {
		clrDisplay("Recording");
    53b2:	60 e1       	ldi	r22, 0x10	; 16
    53b4:	72 e0       	ldi	r23, 0x02	; 2
    53b6:	ce 01       	movw	r24, r28
    53b8:	cd 96       	adiw	r24, 0x3d	; 61
    53ba:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
    53be:	ce 01       	movw	r24, r28
    53c0:	cd 96       	adiw	r24, 0x3d	; 61
    53c2:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z10clrDisplay6String>
    53c6:	ce 01       	movw	r24, r28
    53c8:	cd 96       	adiw	r24, 0x3d	; 61
    53ca:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    53ce:	2d 96       	adiw	r28, 0x0d	; 13
    53d0:	8e ad       	ldd	r24, Y+62	; 0x3e
    53d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    53d4:	2d 97       	sbiw	r28, 0x0d	; 13
    53d6:	9d a3       	std	Y+37, r25	; 0x25
    53d8:	8c a3       	std	Y+36, r24	; 0x24
    53da:	61 96       	adiw	r28, 0x11	; 17
    53dc:	8c ad       	ldd	r24, Y+60	; 0x3c
    53de:	9d ad       	ldd	r25, Y+61	; 0x3d
    53e0:	ae ad       	ldd	r26, Y+62	; 0x3e
    53e2:	bf ad       	ldd	r27, Y+63	; 0x3f
    53e4:	61 97       	sbiw	r28, 0x11	; 17
    53e6:	8e a3       	std	Y+38, r24	; 0x26
    53e8:	9f a3       	std	Y+39, r25	; 0x27
    53ea:	a8 a7       	std	Y+40, r26	; 0x28
    53ec:	b9 a7       	std	Y+41, r27	; 0x29
    53ee:	65 96       	adiw	r28, 0x15	; 21
    53f0:	8c ad       	ldd	r24, Y+60	; 0x3c
    53f2:	9d ad       	ldd	r25, Y+61	; 0x3d
    53f4:	ae ad       	ldd	r26, Y+62	; 0x3e
    53f6:	bf ad       	ldd	r27, Y+63	; 0x3f
    53f8:	65 97       	sbiw	r28, 0x15	; 21
    53fa:	8a a7       	std	Y+42, r24	; 0x2a
    53fc:	9b a7       	std	Y+43, r25	; 0x2b
    53fe:	ac a7       	std	Y+44, r26	; 0x2c
    5400:	bd a7       	std	Y+45, r27	; 0x2d
#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT | O_APPEND)

namespace SDLib {

  class File : public Stream {
    5402:	86 ea       	ldi	r24, 0xA6	; 166
    5404:	91 e0       	ldi	r25, 0x01	; 1
    5406:	9b a3       	std	Y+35, r25	; 0x23
    5408:	8a a3       	std	Y+34, r24	; 0x22
    540a:	8d e0       	ldi	r24, 0x0D	; 13
    540c:	e9 e4       	ldi	r30, 0x49	; 73
    540e:	f0 e0       	ldi	r31, 0x00	; 0
    5410:	ec 0f       	add	r30, r28
    5412:	fd 1f       	adc	r31, r29
    5414:	3c 96       	adiw	r30, 0x0c	; 12
    5416:	de 01       	movw	r26, r28
    5418:	9e 96       	adiw	r26, 0x2e	; 46
    541a:	01 90       	ld	r0, Z+
    541c:	0d 92       	st	X+, r0
    541e:	8a 95       	dec	r24
    5420:	e1 f7       	brne	.-8      	; 0x541a <_Z6recordv+0xe0>
    5422:	a4 96       	adiw	r28, 0x24	; 36
    5424:	8e ad       	ldd	r24, Y+62	; 0x3e
    5426:	9f ad       	ldd	r25, Y+63	; 0x3f
    5428:	a4 97       	sbiw	r28, 0x24	; 36
    542a:	9c af       	std	Y+60, r25	; 0x3c
    542c:	8b af       	std	Y+59, r24	; 0x3b
		makeWaveFile(test_File);
    542e:	ce 01       	movw	r24, r28
    5430:	82 96       	adiw	r24, 0x22	; 34
    5432:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <_Z12makeWaveFileN5SDLib4FileE>
		byte pot_Read;

		while (true) {
		  //t = micros();
		
		  pot_Read = analog_in(mic);
    5436:	80 e0       	ldi	r24, 0x00	; 0
    5438:	90 e0       	ldi	r25, 0x00	; 0
    543a:	0e 94 86 29 	call	0x530c	; 0x530c <_Z9analog_ini>
    543e:	18 2f       	mov	r17, r24
		
		  char key = keyInput();
    5440:	0e 94 cc 23 	call	0x4798	; 0x4798 <_Z8keyInputv>

		  if (key && key == 's') {
    5444:	83 37       	cpi	r24, 0x73	; 115
    5446:	59 f0       	breq	.+22     	; 0x545e <_Z6recordv+0x124>
			break;
		  }

		  test_File.write(pot_Read);
    5448:	61 2f       	mov	r22, r17
    544a:	ce 01       	movw	r24, r28
    544c:	87 5b       	subi	r24, 0xB7	; 183
    544e:	9f 4f       	sbci	r25, 0xFF	; 255
    5450:	0e 94 45 0c 	call	0x188a	; 0x188a <_ZN5SDLib4File5writeEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5454:	25 e5       	ldi	r18, 0x55	; 85
    5456:	2a 95       	dec	r18
    5458:	f1 f7       	brne	.-4      	; 0x5456 <_Z6recordv+0x11c>
    545a:	00 00       	nop
    545c:	ec cf       	rjmp	.-40     	; 0x5436 <_Z6recordv+0xfc>
    545e:	2d 96       	adiw	r28, 0x0d	; 13
    5460:	8e ad       	ldd	r24, Y+62	; 0x3e
    5462:	9f ad       	ldd	r25, Y+63	; 0x3f
    5464:	2d 97       	sbiw	r28, 0x0d	; 13
    5466:	9a 87       	std	Y+10, r25	; 0x0a
    5468:	89 87       	std	Y+9, r24	; 0x09
    546a:	61 96       	adiw	r28, 0x11	; 17
    546c:	8c ad       	ldd	r24, Y+60	; 0x3c
    546e:	9d ad       	ldd	r25, Y+61	; 0x3d
    5470:	ae ad       	ldd	r26, Y+62	; 0x3e
    5472:	bf ad       	ldd	r27, Y+63	; 0x3f
    5474:	61 97       	sbiw	r28, 0x11	; 17
    5476:	8b 87       	std	Y+11, r24	; 0x0b
    5478:	9c 87       	std	Y+12, r25	; 0x0c
    547a:	ad 87       	std	Y+13, r26	; 0x0d
    547c:	be 87       	std	Y+14, r27	; 0x0e
    547e:	65 96       	adiw	r28, 0x15	; 21
    5480:	8c ad       	ldd	r24, Y+60	; 0x3c
    5482:	9d ad       	ldd	r25, Y+61	; 0x3d
    5484:	ae ad       	ldd	r26, Y+62	; 0x3e
    5486:	bf ad       	ldd	r27, Y+63	; 0x3f
    5488:	65 97       	sbiw	r28, 0x15	; 21
    548a:	8f 87       	std	Y+15, r24	; 0x0f
    548c:	98 8b       	std	Y+16, r25	; 0x10
    548e:	a9 8b       	std	Y+17, r26	; 0x11
    5490:	ba 8b       	std	Y+18, r27	; 0x12
    5492:	86 ea       	ldi	r24, 0xA6	; 166
    5494:	91 e0       	ldi	r25, 0x01	; 1
    5496:	98 87       	std	Y+8, r25	; 0x08
    5498:	8f 83       	std	Y+7, r24	; 0x07
    549a:	8d e0       	ldi	r24, 0x0D	; 13
    549c:	e9 e4       	ldi	r30, 0x49	; 73
    549e:	f0 e0       	ldi	r31, 0x00	; 0
    54a0:	ec 0f       	add	r30, r28
    54a2:	fd 1f       	adc	r31, r29
    54a4:	3c 96       	adiw	r30, 0x0c	; 12
    54a6:	de 01       	movw	r26, r28
    54a8:	53 96       	adiw	r26, 0x13	; 19
    54aa:	01 90       	ld	r0, Z+
    54ac:	0d 92       	st	X+, r0
    54ae:	8a 95       	dec	r24
    54b0:	e1 f7       	brne	.-8      	; 0x54aa <_Z6recordv+0x170>
    54b2:	a4 96       	adiw	r28, 0x24	; 36
    54b4:	8e ad       	ldd	r24, Y+62	; 0x3e
    54b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    54b8:	a4 97       	sbiw	r28, 0x24	; 36
    54ba:	99 a3       	std	Y+33, r25	; 0x21
    54bc:	88 a3       	std	Y+32, r24	; 0x20
		  _delay_us(16);
		  //t = micros() - t;
		  //clrDisplay(String(t));
		  //_delay_ms(1000);
		}
		finalizeWave(test_File);
    54be:	ce 01       	movw	r24, r28
    54c0:	07 96       	adiw	r24, 0x07	; 7
    54c2:	0e 94 28 26 	call	0x4c50	; 0x4c50 <_Z12finalizeWaveN5SDLib4FileE>
		clrDisplay("Saved");
    54c6:	6a e1       	ldi	r22, 0x1A	; 26
    54c8:	72 e0       	ldi	r23, 0x02	; 2
    54ca:	ce 01       	movw	r24, r28
    54cc:	01 96       	adiw	r24, 0x01	; 1
    54ce:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
    54d2:	ce 01       	movw	r24, r28
    54d4:	01 96       	adiw	r24, 0x01	; 1
    54d6:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z10clrDisplay6String>
    54da:	ce 01       	movw	r24, r28
    54dc:	01 96       	adiw	r24, 0x01	; 1
    54de:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    54e2:	8f ef       	ldi	r24, 0xFF	; 255
    54e4:	93 ed       	ldi	r25, 0xD3	; 211
    54e6:	20 e3       	ldi	r18, 0x30	; 48
    54e8:	81 50       	subi	r24, 0x01	; 1
    54ea:	90 40       	sbci	r25, 0x00	; 0
    54ec:	20 40       	sbci	r18, 0x00	; 0
    54ee:	e1 f7       	brne	.-8      	; 0x54e8 <_Z6recordv+0x1ae>
    54f0:	00 c0       	rjmp	.+0      	; 0x54f2 <_Z6recordv+0x1b8>
    54f2:	00 00       	nop
		_delay_ms(1000);
	  }
	  test_File.close();
    54f4:	ce 01       	movw	r24, r28
    54f6:	87 5b       	subi	r24, 0xB7	; 183
    54f8:	9f 4f       	sbci	r25, 0xFF	; 255
    54fa:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <_ZN5SDLib4File5closeEv>
}
    54fe:	cd 59       	subi	r28, 0x9D	; 157
    5500:	df 4f       	sbci	r29, 0xFF	; 255
    5502:	0f b6       	in	r0, 0x3f	; 63
    5504:	f8 94       	cli
    5506:	de bf       	out	0x3e, r29	; 62
    5508:	0f be       	out	0x3f, r0	; 63
    550a:	cd bf       	out	0x3d, r28	; 61
    550c:	df 91       	pop	r29
    550e:	cf 91       	pop	r28
    5510:	1f 91       	pop	r17
    5512:	08 95       	ret

00005514 <_Z12checkChangesv>:

    _delay_ms(1000);
  }
}

void checkChanges() {
    5514:	cf 93       	push	r28
  /*
     This function checks for frequency change requirements
  */

	byte fsc = analog_in(ScalePOT);
    5516:	83 e0       	ldi	r24, 0x03	; 3
    5518:	90 e0       	ldi	r25, 0x00	; 0
    551a:	0e 94 86 29 	call	0x530c	; 0x530c <_Z9analog_ini>
    551e:	c8 2f       	mov	r28, r24
	byte fshift = analog_in(shiftEnhancePOT);
    5520:	81 e0       	ldi	r24, 0x01	; 1
    5522:	90 e0       	ldi	r25, 0x00	; 0
    5524:	0e 94 86 29 	call	0x530c	; 0x530c <_Z9analog_ini>

  if (fsc < 90) {
    5528:	ca 35       	cpi	r28, 0x5A	; 90
    552a:	20 f4       	brcc	.+8      	; 0x5534 <_Z12checkChangesv+0x20>
    freqScal = 1;
    552c:	91 e0       	ldi	r25, 0x01	; 1
    552e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <freqScal>
    5532:	09 c0       	rjmp	.+18     	; 0x5546 <_Z12checkChangesv+0x32>
  }
  else if (fsc < 180) {
    5534:	c4 3b       	cpi	r28, 0xB4	; 180
    5536:	20 f4       	brcc	.+8      	; 0x5540 <_Z12checkChangesv+0x2c>
    freqScal = 2;
    5538:	92 e0       	ldi	r25, 0x02	; 2
    553a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <freqScal>
    553e:	03 c0       	rjmp	.+6      	; 0x5546 <_Z12checkChangesv+0x32>
  }
  else {
    freqScal = 3;
    5540:	93 e0       	ldi	r25, 0x03	; 3
    5542:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <freqScal>
  }

  if (fshift < 90) {
    5546:	8a 35       	cpi	r24, 0x5A	; 90
    5548:	28 f4       	brcc	.+10     	; 0x5554 <_Z12checkChangesv+0x40>
    shift = false;
    554a:	10 92 67 06 	sts	0x0667, r1	; 0x800667 <shift>
    enhance = false;
    554e:	10 92 66 06 	sts	0x0666, r1	; 0x800666 <enhance>
    5552:	0d c0       	rjmp	.+26     	; 0x556e <_Z12checkChangesv+0x5a>
  }
  else if (fshift < 180) {
    5554:	84 3b       	cpi	r24, 0xB4	; 180
    5556:	30 f4       	brcc	.+12     	; 0x5564 <_Z12checkChangesv+0x50>
    shift = true;
    5558:	81 e0       	ldi	r24, 0x01	; 1
    555a:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <shift>
    enhance = false;
    555e:	10 92 66 06 	sts	0x0666, r1	; 0x800666 <enhance>
    5562:	05 c0       	rjmp	.+10     	; 0x556e <_Z12checkChangesv+0x5a>
  }
  else {
    shift = false;
    5564:	10 92 67 06 	sts	0x0667, r1	; 0x800667 <shift>
    enhance = true;
    5568:	81 e0       	ldi	r24, 0x01	; 1
    556a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <enhance>
  }
}
    556e:	cf 91       	pop	r28
    5570:	08 95       	ret

00005572 <_Z9playTrackv>:
	  }
	  test_File.close();
}

void playTrack()
{
    5572:	1f 93       	push	r17
    5574:	cf 93       	push	r28
    5576:	df 93       	push	r29
    5578:	cd b7       	in	r28, 0x3d	; 61
    557a:	de b7       	in	r29, 0x3e	; 62
    557c:	c5 54       	subi	r28, 0x45	; 69
    557e:	d1 09       	sbc	r29, r1
    5580:	0f b6       	in	r0, 0x3f	; 63
    5582:	f8 94       	cli
    5584:	de bf       	out	0x3e, r29	; 62
    5586:	0f be       	out	0x3f, r0	; 63
    5588:	cd bf       	out	0x3d, r28	; 61
  /*This function reads data from the specified file and play*/

  checkChanges();//check for frequency change requirements
    558a:	0e 94 8a 2a 	call	0x5514	; 0x5514 <_Z12checkChangesv>

  if (shift)
    558e:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <shift>
    5592:	88 23       	and	r24, r24
    5594:	81 f0       	breq	.+32     	; 0x55b6 <_Z9playTrackv+0x44>
  {
    secondLine("Processing");
    5596:	6f ef       	ldi	r22, 0xFF	; 255
    5598:	71 e0       	ldi	r23, 0x01	; 1
    559a:	ce 01       	movw	r24, r28
    559c:	85 96       	adiw	r24, 0x25	; 37
    559e:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
    55a2:	ce 01       	movw	r24, r28
    55a4:	85 96       	adiw	r24, 0x25	; 37
    55a6:	0e 94 34 24 	call	0x4868	; 0x4868 <_Z10secondLine6String>
    55aa:	ce 01       	movw	r24, r28
    55ac:	85 96       	adiw	r24, 0x25	; 37
    55ae:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    sig_freqShift();
    55b2:	0e 94 59 28 	call	0x50b2	; 0x50b2 <_Z13sig_freqShiftv>
    55b6:	40 91 4f 06 	lds	r20, 0x064F	; 0x80064f <fname_temp>
    55ba:	50 91 50 06 	lds	r21, 0x0650	; 0x800650 <fname_temp+0x1>
      // Open the specified file/directory with the supplied mode (e.g. read or
      // write, etc). Returns a File object for interacting with the file.
      // Note that currently only one file can be open at a time.
      File open(const char *filename, uint8_t mode = FILE_READ);
      File open(const String &filename, uint8_t mode = FILE_READ) {
        return open(filename.c_str(), mode);
    55be:	21 e0       	ldi	r18, 0x01	; 1
    55c0:	62 ef       	ldi	r22, 0xF2	; 242
    55c2:	73 e0       	ldi	r23, 0x03	; 3
    55c4:	ce 01       	movw	r24, r28
    55c6:	8b 96       	adiw	r24, 0x2b	; 43
    55c8:	0e 94 10 10 	call	0x2020	; 0x2020 <_ZN5SDLib7SDClass4openEPKch>
  }

  File test_File = SD.open(fname_temp);

  if (!test_File) {
    55cc:	ce 01       	movw	r24, r28
    55ce:	8b 96       	adiw	r24, 0x2b	; 43
    55d0:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <_ZN5SDLib4FilecvbEv>
    55d4:	81 11       	cpse	r24, r1
    55d6:	18 c0       	rjmp	.+48     	; 0x5608 <_Z9playTrackv+0x96>
    // if the file didn't open, print an error:
    secondLine("Error");
    55d8:	6a e0       	ldi	r22, 0x0A	; 10
    55da:	72 e0       	ldi	r23, 0x02	; 2
    55dc:	ce 01       	movw	r24, r28
    55de:	4f 96       	adiw	r24, 0x1f	; 31
    55e0:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
    55e4:	ce 01       	movw	r24, r28
    55e6:	4f 96       	adiw	r24, 0x1f	; 31
    55e8:	0e 94 34 24 	call	0x4868	; 0x4868 <_Z10secondLine6String>
    55ec:	ce 01       	movw	r24, r28
    55ee:	4f 96       	adiw	r24, 0x1f	; 31
    55f0:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    55f4:	2f ef       	ldi	r18, 0xFF	; 255
    55f6:	83 ed       	ldi	r24, 0xD3	; 211
    55f8:	90 e3       	ldi	r25, 0x30	; 48
    55fa:	21 50       	subi	r18, 0x01	; 1
    55fc:	80 40       	sbci	r24, 0x00	; 0
    55fe:	90 40       	sbci	r25, 0x00	; 0
    5600:	e1 f7       	brne	.-8      	; 0x55fa <_Z9playTrackv+0x88>
    5602:	00 c0       	rjmp	.+0      	; 0x5604 <_Z9playTrackv+0x92>
    5604:	00 00       	nop
    5606:	b9 c0       	rjmp	.+370    	; 0x577a <_Z9playTrackv+0x208>
    _delay_ms(1000);
  }
  else {
    test_File.seek(44);
    5608:	4c e2       	ldi	r20, 0x2C	; 44
    560a:	50 e0       	ldi	r21, 0x00	; 0
    560c:	60 e0       	ldi	r22, 0x00	; 0
    560e:	70 e0       	ldi	r23, 0x00	; 0
    5610:	ce 01       	movw	r24, r28
    5612:	8b 96       	adiw	r24, 0x2b	; 43
    5614:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <_ZN5SDLib4File4seekEm>
    clrDisplay("Playing");
    5618:	60 e2       	ldi	r22, 0x20	; 32
    561a:	72 e0       	ldi	r23, 0x02	; 2
    561c:	ce 01       	movw	r24, r28
    561e:	49 96       	adiw	r24, 0x19	; 25
    5620:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
    5624:	ce 01       	movw	r24, r28
    5626:	49 96       	adiw	r24, 0x19	; 25
    5628:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z10clrDisplay6String>
    562c:	ce 01       	movw	r24, r28
    562e:	49 96       	adiw	r24, 0x19	; 25
    5630:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    secondLine(fname_temp);
    5634:	6f e4       	ldi	r22, 0x4F	; 79
    5636:	76 e0       	ldi	r23, 0x06	; 6
    5638:	ce 01       	movw	r24, r28
    563a:	43 96       	adiw	r24, 0x13	; 19
    563c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN6StringC1ERKS_>
    5640:	ce 01       	movw	r24, r28
    5642:	43 96       	adiw	r24, 0x13	; 19
    5644:	0e 94 34 24 	call	0x4868	; 0x4868 <_Z10secondLine6String>
    5648:	ce 01       	movw	r24, r28
    564a:	43 96       	adiw	r24, 0x13	; 19
    564c:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>

    //Check whether a freaquency scale is set
    //>---------------------------< NORMAL OUTPUT >----------------------------------<

    if (freqScal == 0 || freqScal == 1) {
    5650:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <freqScal>
    5654:	82 30       	cpi	r24, 0x02	; 2
    5656:	c8 f4       	brcc	.+50     	; 0x568a <_Z9playTrackv+0x118>
      while (test_File.available()) {
    5658:	ce 01       	movw	r24, r28
    565a:	8b 96       	adiw	r24, 0x2b	; 43
    565c:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <_ZN5SDLib4File9availableEv>
    5660:	89 2b       	or	r24, r25
    5662:	e1 f1       	breq	.+120    	; 0x56dc <_Z9playTrackv+0x16a>
        //t = micros();
        OCR1A = int(test_File.read());
    5664:	ce 01       	movw	r24, r28
    5666:	8b 96       	adiw	r24, 0x2b	; 43
    5668:	0e 94 95 0c 	call	0x192a	; 0x192a <_ZN5SDLib4File4readEv>
    566c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    5670:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5674:	25 ed       	ldi	r18, 0xD5	; 213
    5676:	2a 95       	dec	r18
    5678:	f1 f7       	brne	.-4      	; 0x5676 <_Z9playTrackv+0x104>
    567a:	00 00       	nop
        _delay_us(40);  //Use this delay for 12.5KHz play
        //_delay_us(20);    //Use this delay for 16kHz play
        
		//****Comment both of delays for 24kHz play*******
        
        char key = keyInput();
    567c:	0e 94 cc 23 	call	0x4798	; 0x4798 <_Z8keyInputv>
        if (key && key == 'p') {
    5680:	80 37       	cpi	r24, 0x70	; 112
    5682:	51 f7       	brne	.-44     	; 0x5658 <_Z9playTrackv+0xe6>
    5684:	2b c0       	rjmp	.+86     	; 0x56dc <_Z9playTrackv+0x16a>
        }

        count++;

        if (count == freqScal + 1) {//resetting the count
          count = 1;
    5686:	11 e0       	ldi	r17, 0x01	; 1
    5688:	01 c0       	rjmp	.+2      	; 0x568c <_Z9playTrackv+0x11a>
    568a:	11 e0       	ldi	r17, 0x01	; 1
    //Output for freaquency scaled track
    //Using down sampling

    else {
      byte count = 1;
      while (test_File.available()) {
    568c:	ce 01       	movw	r24, r28
    568e:	8b 96       	adiw	r24, 0x2b	; 43
    5690:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <_ZN5SDLib4File9availableEv>
    5694:	89 2b       	or	r24, r25
    5696:	11 f1       	breq	.+68     	; 0x56dc <_Z9playTrackv+0x16a>
        //t = micros();
        char key = keyInput();
    5698:	0e 94 cc 23 	call	0x4798	; 0x4798 <_Z8keyInputv>
        if (key && key == 'p') {
    569c:	80 37       	cpi	r24, 0x70	; 112
    569e:	f1 f0       	breq	.+60     	; 0x56dc <_Z9playTrackv+0x16a>
          break;
        }

        if (count == 1) {
    56a0:	11 30       	cpi	r17, 0x01	; 1
    56a2:	69 f4       	brne	.+26     	; 0x56be <_Z9playTrackv+0x14c>
          //Accept the first sample among (# of samples=freqScal)
		  OCR1A = int(test_File.read());
    56a4:	ce 01       	movw	r24, r28
    56a6:	8b 96       	adiw	r24, 0x2b	; 43
    56a8:	0e 94 95 0c 	call	0x192a	; 0x192a <_ZN5SDLib4File4readEv>
    56ac:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    56b0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    56b4:	85 ed       	ldi	r24, 0xD5	; 213
    56b6:	8a 95       	dec	r24
    56b8:	f1 f7       	brne	.-4      	; 0x56b6 <_Z9playTrackv+0x144>
    56ba:	00 00       	nop
    56bc:	04 c0       	rjmp	.+8      	; 0x56c6 <_Z9playTrackv+0x154>
          //Serial.println(micros() - t);
          //t = micros() - t;
          //clrDisplay(String(t));
          //delay(1000);
        } else {
          byte temp = test_File.read();//This is to neglet samples in between
    56be:	ce 01       	movw	r24, r28
    56c0:	8b 96       	adiw	r24, 0x2b	; 43
    56c2:	0e 94 95 0c 	call	0x192a	; 0x192a <_ZN5SDLib4File4readEv>
        }

        count++;
    56c6:	1f 5f       	subi	r17, 0xFF	; 255

        if (count == freqScal + 1) {//resetting the count
    56c8:	21 2f       	mov	r18, r17
    56ca:	30 e0       	ldi	r19, 0x00	; 0
    56cc:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <freqScal>
    56d0:	90 e0       	ldi	r25, 0x00	; 0
    56d2:	01 96       	adiw	r24, 0x01	; 1
    56d4:	28 17       	cp	r18, r24
    56d6:	39 07       	cpc	r19, r25
    56d8:	c9 f6       	brne	.-78     	; 0x568c <_Z9playTrackv+0x11a>
    56da:	d5 cf       	rjmp	.-86     	; 0x5686 <_Z9playTrackv+0x114>
        //        delay(1000);
      }
    }
    // close the file:
    //analogWrite(speaker, 0);
	OCR1A = 0;
    56dc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    56e0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    secondLine("End of play");
    56e4:	68 e2       	ldi	r22, 0x28	; 40
    56e6:	72 e0       	ldi	r23, 0x02	; 2
    56e8:	ce 01       	movw	r24, r28
    56ea:	0d 96       	adiw	r24, 0x0d	; 13
    56ec:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
    56f0:	ce 01       	movw	r24, r28
    56f2:	0d 96       	adiw	r24, 0x0d	; 13
    56f4:	0e 94 34 24 	call	0x4868	; 0x4868 <_Z10secondLine6String>
    56f8:	ce 01       	movw	r24, r28
    56fa:	0d 96       	adiw	r24, 0x0d	; 13
    56fc:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    test_File.close();
    5700:	ce 01       	movw	r24, r28
    5702:	8b 96       	adiw	r24, 0x2b	; 43
    5704:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <_ZN5SDLib4File5closeEv>

    if (shift || enhance) {
    5708:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <shift>
    570c:	81 11       	cpse	r24, r1
    570e:	04 c0       	rjmp	.+8      	; 0x5718 <_Z9playTrackv+0x1a6>
    5710:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <enhance>
    5714:	88 23       	and	r24, r24
    5716:	41 f1       	breq	.+80     	; 0x5768 <_Z9playTrackv+0x1f6>
      fname_temp = String(tracks[fcount]) + ".WAV";
    5718:	e0 91 55 06 	lds	r30, 0x0655	; 0x800655 <fcount>
    571c:	f0 e0       	ldi	r31, 0x00	; 0
    571e:	e9 5a       	subi	r30, 0xA9	; 169
    5720:	f9 4f       	sbci	r31, 0xF9	; 249
    5722:	60 81       	ld	r22, Z
    5724:	ce 01       	movw	r24, r28
    5726:	01 96       	adiw	r24, 0x01	; 1
    5728:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1Ec>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    572c:	be 01       	movw	r22, r28
    572e:	6f 5f       	subi	r22, 0xFF	; 255
    5730:	7f 4f       	sbci	r23, 0xFF	; 255
    5732:	ce 01       	movw	r24, r28
    5734:	07 96       	adiw	r24, 0x07	; 7
    5736:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN6StringC1ERKS_>
    573a:	6e ec       	ldi	r22, 0xCE	; 206
    573c:	71 e0       	ldi	r23, 0x01	; 1
    573e:	ce 01       	movw	r24, r28
    5740:	07 96       	adiw	r24, 0x07	; 7
    5742:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZplRK15StringSumHelperPKc>
    5746:	bc 01       	movw	r22, r24
    5748:	8f e4       	ldi	r24, 0x4F	; 79
    574a:	96 e0       	ldi	r25, 0x06	; 6
    574c:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    5750:	ce 01       	movw	r24, r28
    5752:	07 96       	adiw	r24, 0x07	; 7
    5754:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    5758:	ce 01       	movw	r24, r28
    575a:	01 96       	adiw	r24, 0x01	; 1
    575c:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
      shift = false;
    5760:	10 92 67 06 	sts	0x0667, r1	; 0x800667 <shift>
      enhance = false;
    5764:	10 92 66 06 	sts	0x0666, r1	; 0x800666 <enhance>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5768:	9f ef       	ldi	r25, 0xFF	; 255
    576a:	23 ed       	ldi	r18, 0xD3	; 211
    576c:	80 e3       	ldi	r24, 0x30	; 48
    576e:	91 50       	subi	r25, 0x01	; 1
    5770:	20 40       	sbci	r18, 0x00	; 0
    5772:	80 40       	sbci	r24, 0x00	; 0
    5774:	e1 f7       	brne	.-8      	; 0x576e <_Z9playTrackv+0x1fc>
    5776:	00 c0       	rjmp	.+0      	; 0x5778 <_Z9playTrackv+0x206>
    5778:	00 00       	nop
    }

    _delay_ms(1000);
  }
}
    577a:	cb 5b       	subi	r28, 0xBB	; 187
    577c:	df 4f       	sbci	r29, 0xFF	; 255
    577e:	0f b6       	in	r0, 0x3f	; 63
    5780:	f8 94       	cli
    5782:	de bf       	out	0x3e, r29	; 62
    5784:	0f be       	out	0x3f, r0	; 63
    5786:	cd bf       	out	0x3d, r28	; 61
    5788:	df 91       	pop	r29
    578a:	cf 91       	pop	r28
    578c:	1f 91       	pop	r17
    578e:	08 95       	ret

00005790 <_Z18analogWrite_configv>:

	//TCCR1A |= ((1<<WGM10) | (1<<COM1A1));
	//TCCR1B |= ((1<<WGM12) | (1<<CS10));
	
	//Setting the timers for fast pwm mode
	TCCR1A |= ((1<<WGM10) | (1<<COM1A1));
    5790:	e0 e8       	ldi	r30, 0x80	; 128
    5792:	f0 e0       	ldi	r31, 0x00	; 0
    5794:	80 81       	ld	r24, Z
    5796:	81 68       	ori	r24, 0x81	; 129
    5798:	80 83       	st	Z, r24
	TCCR1A &= 0b10111101;
    579a:	80 81       	ld	r24, Z
    579c:	8d 7b       	andi	r24, 0xBD	; 189
    579e:	80 83       	st	Z, r24
	TCCR1B |= ((1<<WGM12) | (1<<CS10));
    57a0:	e1 e8       	ldi	r30, 0x81	; 129
    57a2:	f0 e0       	ldi	r31, 0x00	; 0
    57a4:	80 81       	ld	r24, Z
    57a6:	89 60       	ori	r24, 0x09	; 9
    57a8:	80 83       	st	Z, r24
	TCCR1B &= 0b11101001;
    57aa:	80 81       	ld	r24, Z
    57ac:	89 7e       	andi	r24, 0xE9	; 233
    57ae:	80 83       	st	Z, r24
    57b0:	08 95       	ret

000057b2 <_Z17analogRead_configv>:
void analogRead_config(){
	
	//set the reference voltage as AVCC
	//set the Left adjust result
	//keeping last 3bits as 0, because for the default pin selection as ADC0
	ADMUX = 0b01100000;
    57b2:	80 e6       	ldi	r24, 0x60	; 96
    57b4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	
	//enable the ADC
	//set the ADC pre scaler as 16
	ADCSRA = 0b10000100;
    57b8:	84 e8       	ldi	r24, 0x84	; 132
    57ba:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    57be:	08 95       	ret

000057c0 <main>:
void analogWrite_config();
void analogRead_config();


int main(void)
{	
    57c0:	cf 93       	push	r28
    57c2:	df 93       	push	r29
    57c4:	cd b7       	in	r28, 0x3d	; 61
    57c6:	de b7       	in	r29, 0x3e	; 62
    57c8:	c6 56       	subi	r28, 0x66	; 102
    57ca:	d1 09       	sbc	r29, r1
    57cc:	0f b6       	in	r0, 0x3f	; 63
    57ce:	f8 94       	cli
    57d0:	de bf       	out	0x3e, r29	; 62
    57d2:	0f be       	out	0x3f, r0	; 63
    57d4:	cd bf       	out	0x3d, r28	; 61
	//This function is from arduino...need to edit
	init();
    57d6:	0e 94 de 05 	call	0xbbc	; 0xbbc <init>

	//PORTD FOR KEYS
	DDRD = 0b00000000;
    57da:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0b11111111;
    57dc:	8f ef       	ldi	r24, 0xFF	; 255
    57de:	8b b9       	out	0x0b, r24	; 11
	
	//CONFIGURING PINS FOR ANALOG INPUT
	DDRC &= 0b11110100;	
    57e0:	87 b1       	in	r24, 0x07	; 7
    57e2:	84 7f       	andi	r24, 0xF4	; 244
    57e4:	87 b9       	out	0x07, r24	; 7
	analogRead_config();
    57e6:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_Z17analogRead_configv>
	
	//CONFIGURING SPEAKER FOR OUTPUT
	DDRB |= (1<<DDB1);
    57ea:	84 b1       	in	r24, 0x04	; 4
    57ec:	82 60       	ori	r24, 0x02	; 2
    57ee:	84 b9       	out	0x04, r24	; 4
	analogWrite_config();
    57f0:	0e 94 c8 2b 	call	0x5790	; 0x5790 <_Z18analogWrite_configv>
	OCR1A = 0;
    57f4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    57f8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	//BEGIN THE LCD
	lcd.begin();
    57fc:	87 e4       	ldi	r24, 0x47	; 71
    57fe:	96 e0       	ldi	r25, 0x06	; 6
    5800:	0e 94 58 23 	call	0x46b0	; 0x46b0 <_ZN9LCDScreen5beginEv>
	
	//INITIALIZING THE SD CARD
	if (!SD.begin(sdcard))
    5804:	6a e0       	ldi	r22, 0x0A	; 10
    5806:	82 ef       	ldi	r24, 0xF2	; 242
    5808:	93 e0       	ldi	r25, 0x03	; 3
    580a:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <_ZN5SDLib7SDClass5beginEh>
    580e:	81 11       	cpse	r24, r1
    5810:	12 c0       	rjmp	.+36     	; 0x5836 <main+0x76>
	{
		clrDisplay("Error");
    5812:	6a e0       	ldi	r22, 0x0A	; 10
    5814:	72 e0       	ldi	r23, 0x02	; 2
    5816:	ce 01       	movw	r24, r28
    5818:	8f 59       	subi	r24, 0x9F	; 159
    581a:	9f 4f       	sbci	r25, 0xFF	; 255
    581c:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
    5820:	ce 01       	movw	r24, r28
    5822:	8f 59       	subi	r24, 0x9F	; 159
    5824:	9f 4f       	sbci	r25, 0xFF	; 255
    5826:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z10clrDisplay6String>
    582a:	ce 01       	movw	r24, r28
    582c:	8f 59       	subi	r24, 0x9F	; 159
    582e:	9f 4f       	sbci	r25, 0xFF	; 255
    5830:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    5834:	ff cf       	rjmp	.-2      	; 0x5834 <main+0x74>
		while (1);
	}
	
	getTrackList();
    5836:	0e 94 45 24 	call	0x488a	; 0x488a <_Z12getTrackListv>
    583a:	2f ef       	ldi	r18, 0xFF	; 255
    583c:	83 ed       	ldi	r24, 0xD3	; 211
    583e:	90 e3       	ldi	r25, 0x30	; 48
    5840:	21 50       	subi	r18, 0x01	; 1
    5842:	80 40       	sbci	r24, 0x00	; 0
    5844:	90 40       	sbci	r25, 0x00	; 0
    5846:	e1 f7       	brne	.-8      	; 0x5840 <main+0x80>
    5848:	00 c0       	rjmp	.+0      	; 0x584a <main+0x8a>
    584a:	00 00       	nop

    while (1) 
    {
		//>------------------------------------< KEY INPUT >--------------------------------------<

		  char key_input = keyInput();
    584c:	0e 94 cc 23 	call	0x4798	; 0x4798 <_Z8keyInputv>
		  if (key_input)
    5850:	81 11       	cpse	r24, r1
		  {
			mode = key_input;
    5852:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mode>
		  }

		  //>-------------------------------< RECORD MODE (LEVEL 1)>--------------------------------<
		  if (mode == 's' && mode_ == 'j')
    5856:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mode>
    585a:	83 37       	cpi	r24, 0x73	; 115
    585c:	59 f4       	brne	.+22     	; 0x5874 <main+0xb4>
    585e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mode_>
    5862:	8a 36       	cpi	r24, 0x6A	; 106
    5864:	39 f4       	brne	.+14     	; 0x5874 <main+0xb4>
		  {
			record();
    5866:	0e 94 9d 29 	call	0x533a	; 0x533a <_Z6recordv>
			getTrackList();
    586a:	0e 94 45 24 	call	0x488a	; 0x488a <_Z12getTrackListv>
			mode = 'i';
    586e:	89 e6       	ldi	r24, 0x69	; 105
    5870:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mode>
		  }

		  //>--------------------------< ENTERING PLAYER MODE (LEVEL 1)>----------------------------<

		  if (mode == 'p' && mode_ == 'j')
    5874:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mode>
    5878:	80 37       	cpi	r24, 0x70	; 112
    587a:	09 f0       	breq	.+2      	; 0x587e <main+0xbe>
    587c:	81 c0       	rjmp	.+258    	; 0x5980 <main+0x1c0>
    587e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mode_>
    5882:	8a 36       	cpi	r24, 0x6A	; 106
    5884:	09 f0       	breq	.+2      	; 0x5888 <main+0xc8>
    5886:	7c c0       	rjmp	.+248    	; 0x5980 <main+0x1c0>
		  {
			mode_ = 'k';
    5888:	8b e6       	ldi	r24, 0x6B	; 107
    588a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mode_>
			mode = 'i';
    588e:	89 e6       	ldi	r24, 0x69	; 105
    5890:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mode>
			  Press 'Play/Stop' when a track is loaded to the player
			  Press 'Play/Stop' to stop playing
			  Press 'next' or 'previous' to toggle between tracks
			  Press 'record/stop' in track loaded mode to exit player mode
			*/
			if (files == 0)
    5894:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <files>
    5898:	81 11       	cpse	r24, r1
    589a:	1e c0       	rjmp	.+60     	; 0x58d8 <main+0x118>
			{
			  mode_ = 'j';
    589c:	8a e6       	ldi	r24, 0x6A	; 106
    589e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mode_>
			  // mode = 'i';
			  clrDisplay("No Tracks");
    58a2:	64 e3       	ldi	r22, 0x34	; 52
    58a4:	72 e0       	ldi	r23, 0x02	; 2
    58a6:	ce 01       	movw	r24, r28
    58a8:	85 5a       	subi	r24, 0xA5	; 165
    58aa:	9f 4f       	sbci	r25, 0xFF	; 255
    58ac:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
    58b0:	ce 01       	movw	r24, r28
    58b2:	85 5a       	subi	r24, 0xA5	; 165
    58b4:	9f 4f       	sbci	r25, 0xFF	; 255
    58b6:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z10clrDisplay6String>
    58ba:	ce 01       	movw	r24, r28
    58bc:	85 5a       	subi	r24, 0xA5	; 165
    58be:	9f 4f       	sbci	r25, 0xFF	; 255
    58c0:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    58c4:	2f ef       	ldi	r18, 0xFF	; 255
    58c6:	83 ed       	ldi	r24, 0xD3	; 211
    58c8:	90 e3       	ldi	r25, 0x30	; 48
    58ca:	21 50       	subi	r18, 0x01	; 1
    58cc:	80 40       	sbci	r24, 0x00	; 0
    58ce:	90 40       	sbci	r25, 0x00	; 0
    58d0:	e1 f7       	brne	.-8      	; 0x58ca <main+0x10a>
    58d2:	00 c0       	rjmp	.+0      	; 0x58d4 <main+0x114>
    58d4:	00 00       	nop
    58d6:	54 c0       	rjmp	.+168    	; 0x5980 <main+0x1c0>
			  _delay_ms(1000);
			}
			else
			{
			  clrDisplay("Ready to Play");
    58d8:	6e e3       	ldi	r22, 0x3E	; 62
    58da:	72 e0       	ldi	r23, 0x02	; 2
    58dc:	ce 01       	movw	r24, r28
    58de:	8b 5a       	subi	r24, 0xAB	; 171
    58e0:	9f 4f       	sbci	r25, 0xFF	; 255
    58e2:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
    58e6:	ce 01       	movw	r24, r28
    58e8:	8b 5a       	subi	r24, 0xAB	; 171
    58ea:	9f 4f       	sbci	r25, 0xFF	; 255
    58ec:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z10clrDisplay6String>
    58f0:	ce 01       	movw	r24, r28
    58f2:	8b 5a       	subi	r24, 0xAB	; 171
    58f4:	9f 4f       	sbci	r25, 0xFF	; 255
    58f6:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    58fa:	2f ef       	ldi	r18, 0xFF	; 255
    58fc:	83 ed       	ldi	r24, 0xD3	; 211
    58fe:	90 e3       	ldi	r25, 0x30	; 48
    5900:	21 50       	subi	r18, 0x01	; 1
    5902:	80 40       	sbci	r24, 0x00	; 0
    5904:	90 40       	sbci	r25, 0x00	; 0
    5906:	e1 f7       	brne	.-8      	; 0x5900 <main+0x140>
    5908:	00 c0       	rjmp	.+0      	; 0x590a <main+0x14a>
    590a:	00 00       	nop
			  _delay_ms(1000);
			  fname_temp = String(tracks[fcount]) + ".WAV";
    590c:	e0 91 55 06 	lds	r30, 0x0655	; 0x800655 <fcount>
    5910:	f0 e0       	ldi	r31, 0x00	; 0
    5912:	e9 5a       	subi	r30, 0xA9	; 169
    5914:	f9 4f       	sbci	r31, 0xF9	; 249
    5916:	60 81       	ld	r22, Z
    5918:	ce 01       	movw	r24, r28
    591a:	87 5b       	subi	r24, 0xB7	; 183
    591c:	9f 4f       	sbci	r25, 0xFF	; 255
    591e:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    5922:	be 01       	movw	r22, r28
    5924:	67 5b       	subi	r22, 0xB7	; 183
    5926:	7f 4f       	sbci	r23, 0xFF	; 255
    5928:	ce 01       	movw	r24, r28
    592a:	81 5b       	subi	r24, 0xB1	; 177
    592c:	9f 4f       	sbci	r25, 0xFF	; 255
    592e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN6StringC1ERKS_>
    5932:	6e ec       	ldi	r22, 0xCE	; 206
    5934:	71 e0       	ldi	r23, 0x01	; 1
    5936:	ce 01       	movw	r24, r28
    5938:	81 5b       	subi	r24, 0xB1	; 177
    593a:	9f 4f       	sbci	r25, 0xFF	; 255
    593c:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZplRK15StringSumHelperPKc>
    5940:	bc 01       	movw	r22, r24
    5942:	8f e4       	ldi	r24, 0x4F	; 79
    5944:	96 e0       	ldi	r25, 0x06	; 6
    5946:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    594a:	ce 01       	movw	r24, r28
    594c:	81 5b       	subi	r24, 0xB1	; 177
    594e:	9f 4f       	sbci	r25, 0xFF	; 255
    5950:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    5954:	ce 01       	movw	r24, r28
    5956:	87 5b       	subi	r24, 0xB7	; 183
    5958:	9f 4f       	sbci	r25, 0xFF	; 255
    595a:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
			  secondLine(fname_temp);
    595e:	6f e4       	ldi	r22, 0x4F	; 79
    5960:	76 e0       	ldi	r23, 0x06	; 6
    5962:	ce 01       	movw	r24, r28
    5964:	8d 5b       	subi	r24, 0xBD	; 189
    5966:	9f 4f       	sbci	r25, 0xFF	; 255
    5968:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN6StringC1ERKS_>
    596c:	ce 01       	movw	r24, r28
    596e:	8d 5b       	subi	r24, 0xBD	; 189
    5970:	9f 4f       	sbci	r25, 0xFF	; 255
    5972:	0e 94 34 24 	call	0x4868	; 0x4868 <_Z10secondLine6String>
    5976:	ce 01       	movw	r24, r28
    5978:	8d 5b       	subi	r24, 0xBD	; 189
    597a:	9f 4f       	sbci	r25, 0xFF	; 255
    597c:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
			}
		  }
		  //>--------------------------< PLAYER MODE (LEVEL 2)>------------------------------------<
		  if (mode_ == 'k')
    5980:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mode_>
    5984:	8b 36       	cpi	r24, 0x6B	; 107
    5986:	09 f0       	breq	.+2      	; 0x598a <main+0x1ca>
    5988:	f6 c0       	rjmp	.+492    	; 0x5b76 <main+0x3b6>
		  {
			if (mode == 'p')
    598a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mode>
    598e:	80 37       	cpi	r24, 0x70	; 112
    5990:	41 f5       	brne	.+80     	; 0x59e2 <main+0x222>
			{
			  //Play the track
			  playTrack();
    5992:	0e 94 b9 2a 	call	0x5572	; 0x5572 <_Z9playTrackv>
			  clrDisplay("Ready to Play");
    5996:	6e e3       	ldi	r22, 0x3E	; 62
    5998:	72 e0       	ldi	r23, 0x02	; 2
    599a:	ce 01       	movw	r24, r28
    599c:	cd 96       	adiw	r24, 0x3d	; 61
    599e:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
    59a2:	ce 01       	movw	r24, r28
    59a4:	cd 96       	adiw	r24, 0x3d	; 61
    59a6:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z10clrDisplay6String>
    59aa:	ce 01       	movw	r24, r28
    59ac:	cd 96       	adiw	r24, 0x3d	; 61
    59ae:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    59b2:	2f ef       	ldi	r18, 0xFF	; 255
    59b4:	83 ec       	ldi	r24, 0xC3	; 195
    59b6:	99 e0       	ldi	r25, 0x09	; 9
    59b8:	21 50       	subi	r18, 0x01	; 1
    59ba:	80 40       	sbci	r24, 0x00	; 0
    59bc:	90 40       	sbci	r25, 0x00	; 0
    59be:	e1 f7       	brne	.-8      	; 0x59b8 <main+0x1f8>
    59c0:	00 c0       	rjmp	.+0      	; 0x59c2 <main+0x202>
    59c2:	00 00       	nop
			  _delay_ms(200);
			  secondLine(fname_temp);
    59c4:	6f e4       	ldi	r22, 0x4F	; 79
    59c6:	76 e0       	ldi	r23, 0x06	; 6
    59c8:	ce 01       	movw	r24, r28
    59ca:	c7 96       	adiw	r24, 0x37	; 55
    59cc:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN6StringC1ERKS_>
    59d0:	ce 01       	movw	r24, r28
    59d2:	c7 96       	adiw	r24, 0x37	; 55
    59d4:	0e 94 34 24 	call	0x4868	; 0x4868 <_Z10secondLine6String>
    59d8:	ce 01       	movw	r24, r28
    59da:	c7 96       	adiw	r24, 0x37	; 55
    59dc:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    59e0:	c7 c0       	rjmp	.+398    	; 0x5b70 <main+0x3b0>
			}
			else if (mode == '>')
    59e2:	8e 33       	cpi	r24, 0x3E	; 62
    59e4:	19 f4       	brne	.+6      	; 0x59ec <main+0x22c>
			{
			  //Load the next track
			  nextTrack();
    59e6:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <_Z9nextTrackv>
    59ea:	c2 c0       	rjmp	.+388    	; 0x5b70 <main+0x3b0>
			}
			else if (mode == '<')
    59ec:	8c 33       	cpi	r24, 0x3C	; 60
    59ee:	19 f4       	brne	.+6      	; 0x59f6 <main+0x236>
			{
			  //load the previous track
			  previousTrack();
    59f0:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <_Z13previousTrackv>
    59f4:	bd c0       	rjmp	.+378    	; 0x5b70 <main+0x3b0>
			}
			else if (mode == 's')
    59f6:	83 37       	cpi	r24, 0x73	; 115
    59f8:	21 f4       	brne	.+8      	; 0x5a02 <main+0x242>
			{
			  //Exit from player mode
			  mode_ = 'j';
    59fa:	8a e6       	ldi	r24, 0x6A	; 106
    59fc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mode_>
    5a00:	b7 c0       	rjmp	.+366    	; 0x5b70 <main+0x3b0>
			  mode = 'i';
			}
			else if (mode == 'd')
    5a02:	84 36       	cpi	r24, 0x64	; 100
    5a04:	09 f0       	breq	.+2      	; 0x5a08 <main+0x248>
    5a06:	b4 c0       	rjmp	.+360    	; 0x5b70 <main+0x3b0>
			{
			  //This mode deletes the track loaded in payer
			  clrDisplay("Delete?");
    5a08:	6c e4       	ldi	r22, 0x4C	; 76
    5a0a:	72 e0       	ldi	r23, 0x02	; 2
    5a0c:	ce 01       	movw	r24, r28
    5a0e:	c1 96       	adiw	r24, 0x31	; 49
    5a10:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
    5a14:	ce 01       	movw	r24, r28
    5a16:	c1 96       	adiw	r24, 0x31	; 49
    5a18:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z10clrDisplay6String>
    5a1c:	ce 01       	movw	r24, r28
    5a1e:	c1 96       	adiw	r24, 0x31	; 49
    5a20:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
			  //secondLine("DELETE");
			  while (true)
			  {
				char key = keyInput();
    5a24:	0e 94 cc 23 	call	0x4798	; 0x4798 <_Z8keyInputv>
				if (key && key == 'd')
    5a28:	84 36       	cpi	r24, 0x64	; 100
    5a2a:	11 f5       	brne	.+68     	; 0x5a70 <main+0x2b0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
	const char* c_str() const { return buffer; }
    5a2c:	60 91 4f 06 	lds	r22, 0x064F	; 0x80064f <fname_temp>
    5a30:	70 91 50 06 	lds	r23, 0x0650	; 0x800650 <fname_temp+0x1>
      }

      // Delete the file.
      boolean remove(const char *filepath);
      boolean remove(const String &filepath) {
        return remove(filepath.c_str());
    5a34:	82 ef       	ldi	r24, 0xF2	; 242
    5a36:	93 e0       	ldi	r25, 0x03	; 3
    5a38:	0e 94 33 11 	call	0x2266	; 0x2266 <_ZN5SDLib7SDClass6removeEPKc>
				{
				  SD.remove(fname_temp);
				  clrDisplay("Deleted");
    5a3c:	68 e5       	ldi	r22, 0x58	; 88
    5a3e:	72 e0       	ldi	r23, 0x02	; 2
    5a40:	ce 01       	movw	r24, r28
    5a42:	8b 96       	adiw	r24, 0x2b	; 43
    5a44:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
    5a48:	ce 01       	movw	r24, r28
    5a4a:	8b 96       	adiw	r24, 0x2b	; 43
    5a4c:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z10clrDisplay6String>
    5a50:	ce 01       	movw	r24, r28
    5a52:	8b 96       	adiw	r24, 0x2b	; 43
    5a54:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
				  getTrackList();
    5a58:	0e 94 45 24 	call	0x488a	; 0x488a <_Z12getTrackListv>
    5a5c:	2f ef       	ldi	r18, 0xFF	; 255
    5a5e:	83 ed       	ldi	r24, 0xD3	; 211
    5a60:	90 e3       	ldi	r25, 0x30	; 48
    5a62:	21 50       	subi	r18, 0x01	; 1
    5a64:	80 40       	sbci	r24, 0x00	; 0
    5a66:	90 40       	sbci	r25, 0x00	; 0
    5a68:	e1 f7       	brne	.-8      	; 0x5a62 <main+0x2a2>
    5a6a:	00 c0       	rjmp	.+0      	; 0x5a6c <main+0x2ac>
    5a6c:	00 00       	nop
    5a6e:	19 c0       	rjmp	.+50     	; 0x5aa2 <main+0x2e2>
				  _delay_ms(1000);
				  break;
				}
				else if (key=='p')
    5a70:	80 37       	cpi	r24, 0x70	; 112
    5a72:	c1 f6       	brne	.-80     	; 0x5a24 <main+0x264>
				{
				  clrDisplay("Not Deleted");
    5a74:	64 e5       	ldi	r22, 0x54	; 84
    5a76:	72 e0       	ldi	r23, 0x02	; 2
    5a78:	ce 01       	movw	r24, r28
    5a7a:	85 96       	adiw	r24, 0x25	; 37
    5a7c:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
    5a80:	ce 01       	movw	r24, r28
    5a82:	85 96       	adiw	r24, 0x25	; 37
    5a84:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z10clrDisplay6String>
    5a88:	ce 01       	movw	r24, r28
    5a8a:	85 96       	adiw	r24, 0x25	; 37
    5a8c:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    5a90:	2f ef       	ldi	r18, 0xFF	; 255
    5a92:	83 ed       	ldi	r24, 0xD3	; 211
    5a94:	90 e3       	ldi	r25, 0x30	; 48
    5a96:	21 50       	subi	r18, 0x01	; 1
    5a98:	80 40       	sbci	r24, 0x00	; 0
    5a9a:	90 40       	sbci	r25, 0x00	; 0
    5a9c:	e1 f7       	brne	.-8      	; 0x5a96 <main+0x2d6>
    5a9e:	00 c0       	rjmp	.+0      	; 0x5aa0 <main+0x2e0>
    5aa0:	00 00       	nop
				  _delay_ms(1000);
				  break;
				}
			  }
			  if (files == 0)
    5aa2:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <files>
    5aa6:	81 11       	cpse	r24, r1
    5aa8:	1a c0       	rjmp	.+52     	; 0x5ade <main+0x31e>
			  {
				clrDisplay("No Tracks");
    5aaa:	64 e3       	ldi	r22, 0x34	; 52
    5aac:	72 e0       	ldi	r23, 0x02	; 2
    5aae:	ce 01       	movw	r24, r28
    5ab0:	4f 96       	adiw	r24, 0x1f	; 31
    5ab2:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
    5ab6:	ce 01       	movw	r24, r28
    5ab8:	4f 96       	adiw	r24, 0x1f	; 31
    5aba:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z10clrDisplay6String>
    5abe:	ce 01       	movw	r24, r28
    5ac0:	4f 96       	adiw	r24, 0x1f	; 31
    5ac2:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    5ac6:	2f ef       	ldi	r18, 0xFF	; 255
    5ac8:	83 ed       	ldi	r24, 0xD3	; 211
    5aca:	90 e3       	ldi	r25, 0x30	; 48
    5acc:	21 50       	subi	r18, 0x01	; 1
    5ace:	80 40       	sbci	r24, 0x00	; 0
    5ad0:	90 40       	sbci	r25, 0x00	; 0
    5ad2:	e1 f7       	brne	.-8      	; 0x5acc <main+0x30c>
    5ad4:	00 c0       	rjmp	.+0      	; 0x5ad6 <main+0x316>
    5ad6:	00 00       	nop
				_delay_ms(1000);
				mode_ = 'j';
    5ad8:	8a e6       	ldi	r24, 0x6A	; 106
    5ada:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mode_>
				//mode = 'i';
			  }
			  if(fcount == files){
    5ade:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <fcount>
    5ae2:	90 91 56 06 	lds	r25, 0x0656	; 0x800656 <files>
    5ae6:	89 13       	cpse	r24, r25
    5ae8:	03 c0       	rjmp	.+6      	; 0x5af0 <main+0x330>
				fcount--;
    5aea:	81 50       	subi	r24, 0x01	; 1
    5aec:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <fcount>
			  }
			  clrDisplay("Ready to Play");
    5af0:	6e e3       	ldi	r22, 0x3E	; 62
    5af2:	72 e0       	ldi	r23, 0x02	; 2
    5af4:	ce 01       	movw	r24, r28
    5af6:	49 96       	adiw	r24, 0x19	; 25
    5af8:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
    5afc:	ce 01       	movw	r24, r28
    5afe:	49 96       	adiw	r24, 0x19	; 25
    5b00:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z10clrDisplay6String>
    5b04:	ce 01       	movw	r24, r28
    5b06:	49 96       	adiw	r24, 0x19	; 25
    5b08:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
			  fname_temp = String(tracks[fcount]) + ".WAV";
    5b0c:	e0 91 55 06 	lds	r30, 0x0655	; 0x800655 <fcount>
    5b10:	f0 e0       	ldi	r31, 0x00	; 0
    5b12:	e9 5a       	subi	r30, 0xA9	; 169
    5b14:	f9 4f       	sbci	r31, 0xF9	; 249
    5b16:	60 81       	ld	r22, Z
    5b18:	ce 01       	movw	r24, r28
    5b1a:	0d 96       	adiw	r24, 0x0d	; 13
    5b1c:	0e 94 7a 07 	call	0xef4	; 0xef4 <_ZN6StringC1Ec>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    5b20:	be 01       	movw	r22, r28
    5b22:	63 5f       	subi	r22, 0xF3	; 243
    5b24:	7f 4f       	sbci	r23, 0xFF	; 255
    5b26:	ce 01       	movw	r24, r28
    5b28:	43 96       	adiw	r24, 0x13	; 19
    5b2a:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN6StringC1ERKS_>
    5b2e:	6e ec       	ldi	r22, 0xCE	; 206
    5b30:	71 e0       	ldi	r23, 0x01	; 1
    5b32:	ce 01       	movw	r24, r28
    5b34:	43 96       	adiw	r24, 0x13	; 19
    5b36:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZplRK15StringSumHelperPKc>
    5b3a:	bc 01       	movw	r22, r24
    5b3c:	8f e4       	ldi	r24, 0x4F	; 79
    5b3e:	96 e0       	ldi	r25, 0x06	; 6
    5b40:	0e 94 42 07 	call	0xe84	; 0xe84 <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    5b44:	ce 01       	movw	r24, r28
    5b46:	43 96       	adiw	r24, 0x13	; 19
    5b48:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
    5b4c:	ce 01       	movw	r24, r28
    5b4e:	0d 96       	adiw	r24, 0x0d	; 13
    5b50:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
			  secondLine(fname_temp);
    5b54:	6f e4       	ldi	r22, 0x4F	; 79
    5b56:	76 e0       	ldi	r23, 0x06	; 6
    5b58:	ce 01       	movw	r24, r28
    5b5a:	07 96       	adiw	r24, 0x07	; 7
    5b5c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN6StringC1ERKS_>
    5b60:	ce 01       	movw	r24, r28
    5b62:	07 96       	adiw	r24, 0x07	; 7
    5b64:	0e 94 34 24 	call	0x4868	; 0x4868 <_Z10secondLine6String>
    5b68:	ce 01       	movw	r24, r28
    5b6a:	07 96       	adiw	r24, 0x07	; 7
    5b6c:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>
			}
			mode = 'i';
    5b70:	89 e6       	ldi	r24, 0x69	; 105
    5b72:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mode>
		  }
		  //>-------------------------< PAUSE MODE (LEVEL 1)>--------------------------------------<
		  if (mode == 'i' && mode_ == 'j')
    5b76:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <mode>
    5b7a:	89 36       	cpi	r24, 0x69	; 105
    5b7c:	09 f0       	breq	.+2      	; 0x5b80 <main+0x3c0>
    5b7e:	66 ce       	rjmp	.-820    	; 0x584c <main+0x8c>
    5b80:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <mode_>
    5b84:	8a 36       	cpi	r24, 0x6A	; 106
    5b86:	09 f0       	breq	.+2      	; 0x5b8a <main+0x3ca>
    5b88:	61 ce       	rjmp	.-830    	; 0x584c <main+0x8c>
		  {
			clrDisplay("Voice Recorder");
    5b8a:	60 e6       	ldi	r22, 0x60	; 96
    5b8c:	72 e0       	ldi	r23, 0x02	; 2
    5b8e:	ce 01       	movw	r24, r28
    5b90:	01 96       	adiw	r24, 0x01	; 1
    5b92:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN6StringC1EPKc>
    5b96:	ce 01       	movw	r24, r28
    5b98:	01 96       	adiw	r24, 0x01	; 1
    5b9a:	0e 94 0e 24 	call	0x481c	; 0x481c <_Z10clrDisplay6String>
    5b9e:	ce 01       	movw	r24, r28
    5ba0:	01 96       	adiw	r24, 0x01	; 1
    5ba2:	0e 94 b8 06 	call	0xd70	; 0xd70 <_ZN6StringD1Ev>

			while (true)
			{
			  char key_input = keyInput();
    5ba6:	0e 94 cc 23 	call	0x4798	; 0x4798 <_Z8keyInputv>
			  if (key_input)
    5baa:	88 23       	and	r24, r24
    5bac:	e1 f3       	breq	.-8      	; 0x5ba6 <main+0x3e6>
			  {
				mode = key_input;
    5bae:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mode>
    5bb2:	4c ce       	rjmp	.-872    	; 0x584c <main+0x8c>

00005bb4 <_GLOBAL__sub_I_mode>:
	ADMUX = 0b01100000;
	
	//enable the ADC
	//set the ADC pre scaler as 16
	ADCSRA = 0b10000100;
}
    5bb4:	6f ef       	ldi	r22, 0xFF	; 255
    5bb6:	7f ef       	ldi	r23, 0xFF	; 255
    5bb8:	81 e0       	ldi	r24, 0x01	; 1
    5bba:	90 e0       	ldi	r25, 0x00	; 0
    5bbc:	0e 94 a8 23 	call	0x4750	; 0x4750 <_Z41__static_initialization_and_destruction_0ii>
    5bc0:	08 95       	ret

00005bc2 <_GLOBAL__sub_D_mode>:
    5bc2:	6f ef       	ldi	r22, 0xFF	; 255
    5bc4:	7f ef       	ldi	r23, 0xFF	; 255
    5bc6:	80 e0       	ldi	r24, 0x00	; 0
    5bc8:	90 e0       	ldi	r25, 0x00	; 0
    5bca:	0e 94 a8 23 	call	0x4750	; 0x4750 <_Z41__static_initialization_and_destruction_0ii>
    5bce:	08 95       	ret

00005bd0 <__subsf3>:
    5bd0:	50 58       	subi	r21, 0x80	; 128

00005bd2 <__addsf3>:
    5bd2:	bb 27       	eor	r27, r27
    5bd4:	aa 27       	eor	r26, r26
    5bd6:	0e 94 00 2e 	call	0x5c00	; 0x5c00 <__addsf3x>
    5bda:	0c 94 4a 2f 	jmp	0x5e94	; 0x5e94 <__fp_round>
    5bde:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <__fp_pscA>
    5be2:	38 f0       	brcs	.+14     	; 0x5bf2 <__addsf3+0x20>
    5be4:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <__fp_pscB>
    5be8:	20 f0       	brcs	.+8      	; 0x5bf2 <__addsf3+0x20>
    5bea:	39 f4       	brne	.+14     	; 0x5bfa <__addsf3+0x28>
    5bec:	9f 3f       	cpi	r25, 0xFF	; 255
    5bee:	19 f4       	brne	.+6      	; 0x5bf6 <__addsf3+0x24>
    5bf0:	26 f4       	brtc	.+8      	; 0x5bfa <__addsf3+0x28>
    5bf2:	0c 94 39 2f 	jmp	0x5e72	; 0x5e72 <__fp_nan>
    5bf6:	0e f4       	brtc	.+2      	; 0x5bfa <__addsf3+0x28>
    5bf8:	e0 95       	com	r30
    5bfa:	e7 fb       	bst	r30, 7
    5bfc:	0c 94 33 2f 	jmp	0x5e66	; 0x5e66 <__fp_inf>

00005c00 <__addsf3x>:
    5c00:	e9 2f       	mov	r30, r25
    5c02:	0e 94 5b 2f 	call	0x5eb6	; 0x5eb6 <__fp_split3>
    5c06:	58 f3       	brcs	.-42     	; 0x5bde <__addsf3+0xc>
    5c08:	ba 17       	cp	r27, r26
    5c0a:	62 07       	cpc	r22, r18
    5c0c:	73 07       	cpc	r23, r19
    5c0e:	84 07       	cpc	r24, r20
    5c10:	95 07       	cpc	r25, r21
    5c12:	20 f0       	brcs	.+8      	; 0x5c1c <__addsf3x+0x1c>
    5c14:	79 f4       	brne	.+30     	; 0x5c34 <__addsf3x+0x34>
    5c16:	a6 f5       	brtc	.+104    	; 0x5c80 <__addsf3x+0x80>
    5c18:	0c 94 7d 2f 	jmp	0x5efa	; 0x5efa <__fp_zero>
    5c1c:	0e f4       	brtc	.+2      	; 0x5c20 <__addsf3x+0x20>
    5c1e:	e0 95       	com	r30
    5c20:	0b 2e       	mov	r0, r27
    5c22:	ba 2f       	mov	r27, r26
    5c24:	a0 2d       	mov	r26, r0
    5c26:	0b 01       	movw	r0, r22
    5c28:	b9 01       	movw	r22, r18
    5c2a:	90 01       	movw	r18, r0
    5c2c:	0c 01       	movw	r0, r24
    5c2e:	ca 01       	movw	r24, r20
    5c30:	a0 01       	movw	r20, r0
    5c32:	11 24       	eor	r1, r1
    5c34:	ff 27       	eor	r31, r31
    5c36:	59 1b       	sub	r21, r25
    5c38:	99 f0       	breq	.+38     	; 0x5c60 <__addsf3x+0x60>
    5c3a:	59 3f       	cpi	r21, 0xF9	; 249
    5c3c:	50 f4       	brcc	.+20     	; 0x5c52 <__addsf3x+0x52>
    5c3e:	50 3e       	cpi	r21, 0xE0	; 224
    5c40:	68 f1       	brcs	.+90     	; 0x5c9c <__addsf3x+0x9c>
    5c42:	1a 16       	cp	r1, r26
    5c44:	f0 40       	sbci	r31, 0x00	; 0
    5c46:	a2 2f       	mov	r26, r18
    5c48:	23 2f       	mov	r18, r19
    5c4a:	34 2f       	mov	r19, r20
    5c4c:	44 27       	eor	r20, r20
    5c4e:	58 5f       	subi	r21, 0xF8	; 248
    5c50:	f3 cf       	rjmp	.-26     	; 0x5c38 <__addsf3x+0x38>
    5c52:	46 95       	lsr	r20
    5c54:	37 95       	ror	r19
    5c56:	27 95       	ror	r18
    5c58:	a7 95       	ror	r26
    5c5a:	f0 40       	sbci	r31, 0x00	; 0
    5c5c:	53 95       	inc	r21
    5c5e:	c9 f7       	brne	.-14     	; 0x5c52 <__addsf3x+0x52>
    5c60:	7e f4       	brtc	.+30     	; 0x5c80 <__addsf3x+0x80>
    5c62:	1f 16       	cp	r1, r31
    5c64:	ba 0b       	sbc	r27, r26
    5c66:	62 0b       	sbc	r22, r18
    5c68:	73 0b       	sbc	r23, r19
    5c6a:	84 0b       	sbc	r24, r20
    5c6c:	ba f0       	brmi	.+46     	; 0x5c9c <__addsf3x+0x9c>
    5c6e:	91 50       	subi	r25, 0x01	; 1
    5c70:	a1 f0       	breq	.+40     	; 0x5c9a <__addsf3x+0x9a>
    5c72:	ff 0f       	add	r31, r31
    5c74:	bb 1f       	adc	r27, r27
    5c76:	66 1f       	adc	r22, r22
    5c78:	77 1f       	adc	r23, r23
    5c7a:	88 1f       	adc	r24, r24
    5c7c:	c2 f7       	brpl	.-16     	; 0x5c6e <__addsf3x+0x6e>
    5c7e:	0e c0       	rjmp	.+28     	; 0x5c9c <__addsf3x+0x9c>
    5c80:	ba 0f       	add	r27, r26
    5c82:	62 1f       	adc	r22, r18
    5c84:	73 1f       	adc	r23, r19
    5c86:	84 1f       	adc	r24, r20
    5c88:	48 f4       	brcc	.+18     	; 0x5c9c <__addsf3x+0x9c>
    5c8a:	87 95       	ror	r24
    5c8c:	77 95       	ror	r23
    5c8e:	67 95       	ror	r22
    5c90:	b7 95       	ror	r27
    5c92:	f7 95       	ror	r31
    5c94:	9e 3f       	cpi	r25, 0xFE	; 254
    5c96:	08 f0       	brcs	.+2      	; 0x5c9a <__addsf3x+0x9a>
    5c98:	b0 cf       	rjmp	.-160    	; 0x5bfa <__addsf3+0x28>
    5c9a:	93 95       	inc	r25
    5c9c:	88 0f       	add	r24, r24
    5c9e:	08 f0       	brcs	.+2      	; 0x5ca2 <__addsf3x+0xa2>
    5ca0:	99 27       	eor	r25, r25
    5ca2:	ee 0f       	add	r30, r30
    5ca4:	97 95       	ror	r25
    5ca6:	87 95       	ror	r24
    5ca8:	08 95       	ret

00005caa <__divsf3>:
    5caa:	0e 94 69 2e 	call	0x5cd2	; 0x5cd2 <__divsf3x>
    5cae:	0c 94 4a 2f 	jmp	0x5e94	; 0x5e94 <__fp_round>
    5cb2:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <__fp_pscB>
    5cb6:	58 f0       	brcs	.+22     	; 0x5cce <__divsf3+0x24>
    5cb8:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <__fp_pscA>
    5cbc:	40 f0       	brcs	.+16     	; 0x5cce <__divsf3+0x24>
    5cbe:	29 f4       	brne	.+10     	; 0x5cca <__divsf3+0x20>
    5cc0:	5f 3f       	cpi	r21, 0xFF	; 255
    5cc2:	29 f0       	breq	.+10     	; 0x5cce <__divsf3+0x24>
    5cc4:	0c 94 33 2f 	jmp	0x5e66	; 0x5e66 <__fp_inf>
    5cc8:	51 11       	cpse	r21, r1
    5cca:	0c 94 7e 2f 	jmp	0x5efc	; 0x5efc <__fp_szero>
    5cce:	0c 94 39 2f 	jmp	0x5e72	; 0x5e72 <__fp_nan>

00005cd2 <__divsf3x>:
    5cd2:	0e 94 5b 2f 	call	0x5eb6	; 0x5eb6 <__fp_split3>
    5cd6:	68 f3       	brcs	.-38     	; 0x5cb2 <__divsf3+0x8>

00005cd8 <__divsf3_pse>:
    5cd8:	99 23       	and	r25, r25
    5cda:	b1 f3       	breq	.-20     	; 0x5cc8 <__divsf3+0x1e>
    5cdc:	55 23       	and	r21, r21
    5cde:	91 f3       	breq	.-28     	; 0x5cc4 <__divsf3+0x1a>
    5ce0:	95 1b       	sub	r25, r21
    5ce2:	55 0b       	sbc	r21, r21
    5ce4:	bb 27       	eor	r27, r27
    5ce6:	aa 27       	eor	r26, r26
    5ce8:	62 17       	cp	r22, r18
    5cea:	73 07       	cpc	r23, r19
    5cec:	84 07       	cpc	r24, r20
    5cee:	38 f0       	brcs	.+14     	; 0x5cfe <__divsf3_pse+0x26>
    5cf0:	9f 5f       	subi	r25, 0xFF	; 255
    5cf2:	5f 4f       	sbci	r21, 0xFF	; 255
    5cf4:	22 0f       	add	r18, r18
    5cf6:	33 1f       	adc	r19, r19
    5cf8:	44 1f       	adc	r20, r20
    5cfa:	aa 1f       	adc	r26, r26
    5cfc:	a9 f3       	breq	.-22     	; 0x5ce8 <__divsf3_pse+0x10>
    5cfe:	35 d0       	rcall	.+106    	; 0x5d6a <__divsf3_pse+0x92>
    5d00:	0e 2e       	mov	r0, r30
    5d02:	3a f0       	brmi	.+14     	; 0x5d12 <__divsf3_pse+0x3a>
    5d04:	e0 e8       	ldi	r30, 0x80	; 128
    5d06:	32 d0       	rcall	.+100    	; 0x5d6c <__divsf3_pse+0x94>
    5d08:	91 50       	subi	r25, 0x01	; 1
    5d0a:	50 40       	sbci	r21, 0x00	; 0
    5d0c:	e6 95       	lsr	r30
    5d0e:	00 1c       	adc	r0, r0
    5d10:	ca f7       	brpl	.-14     	; 0x5d04 <__divsf3_pse+0x2c>
    5d12:	2b d0       	rcall	.+86     	; 0x5d6a <__divsf3_pse+0x92>
    5d14:	fe 2f       	mov	r31, r30
    5d16:	29 d0       	rcall	.+82     	; 0x5d6a <__divsf3_pse+0x92>
    5d18:	66 0f       	add	r22, r22
    5d1a:	77 1f       	adc	r23, r23
    5d1c:	88 1f       	adc	r24, r24
    5d1e:	bb 1f       	adc	r27, r27
    5d20:	26 17       	cp	r18, r22
    5d22:	37 07       	cpc	r19, r23
    5d24:	48 07       	cpc	r20, r24
    5d26:	ab 07       	cpc	r26, r27
    5d28:	b0 e8       	ldi	r27, 0x80	; 128
    5d2a:	09 f0       	breq	.+2      	; 0x5d2e <__divsf3_pse+0x56>
    5d2c:	bb 0b       	sbc	r27, r27
    5d2e:	80 2d       	mov	r24, r0
    5d30:	bf 01       	movw	r22, r30
    5d32:	ff 27       	eor	r31, r31
    5d34:	93 58       	subi	r25, 0x83	; 131
    5d36:	5f 4f       	sbci	r21, 0xFF	; 255
    5d38:	3a f0       	brmi	.+14     	; 0x5d48 <__divsf3_pse+0x70>
    5d3a:	9e 3f       	cpi	r25, 0xFE	; 254
    5d3c:	51 05       	cpc	r21, r1
    5d3e:	78 f0       	brcs	.+30     	; 0x5d5e <__divsf3_pse+0x86>
    5d40:	0c 94 33 2f 	jmp	0x5e66	; 0x5e66 <__fp_inf>
    5d44:	0c 94 7e 2f 	jmp	0x5efc	; 0x5efc <__fp_szero>
    5d48:	5f 3f       	cpi	r21, 0xFF	; 255
    5d4a:	e4 f3       	brlt	.-8      	; 0x5d44 <__divsf3_pse+0x6c>
    5d4c:	98 3e       	cpi	r25, 0xE8	; 232
    5d4e:	d4 f3       	brlt	.-12     	; 0x5d44 <__divsf3_pse+0x6c>
    5d50:	86 95       	lsr	r24
    5d52:	77 95       	ror	r23
    5d54:	67 95       	ror	r22
    5d56:	b7 95       	ror	r27
    5d58:	f7 95       	ror	r31
    5d5a:	9f 5f       	subi	r25, 0xFF	; 255
    5d5c:	c9 f7       	brne	.-14     	; 0x5d50 <__divsf3_pse+0x78>
    5d5e:	88 0f       	add	r24, r24
    5d60:	91 1d       	adc	r25, r1
    5d62:	96 95       	lsr	r25
    5d64:	87 95       	ror	r24
    5d66:	97 f9       	bld	r25, 7
    5d68:	08 95       	ret
    5d6a:	e1 e0       	ldi	r30, 0x01	; 1
    5d6c:	66 0f       	add	r22, r22
    5d6e:	77 1f       	adc	r23, r23
    5d70:	88 1f       	adc	r24, r24
    5d72:	bb 1f       	adc	r27, r27
    5d74:	62 17       	cp	r22, r18
    5d76:	73 07       	cpc	r23, r19
    5d78:	84 07       	cpc	r24, r20
    5d7a:	ba 07       	cpc	r27, r26
    5d7c:	20 f0       	brcs	.+8      	; 0x5d86 <__divsf3_pse+0xae>
    5d7e:	62 1b       	sub	r22, r18
    5d80:	73 0b       	sbc	r23, r19
    5d82:	84 0b       	sbc	r24, r20
    5d84:	ba 0b       	sbc	r27, r26
    5d86:	ee 1f       	adc	r30, r30
    5d88:	88 f7       	brcc	.-30     	; 0x5d6c <__divsf3_pse+0x94>
    5d8a:	e0 95       	com	r30
    5d8c:	08 95       	ret

00005d8e <__fixunssfsi>:
    5d8e:	0e 94 63 2f 	call	0x5ec6	; 0x5ec6 <__fp_splitA>
    5d92:	88 f0       	brcs	.+34     	; 0x5db6 <__fixunssfsi+0x28>
    5d94:	9f 57       	subi	r25, 0x7F	; 127
    5d96:	98 f0       	brcs	.+38     	; 0x5dbe <__fixunssfsi+0x30>
    5d98:	b9 2f       	mov	r27, r25
    5d9a:	99 27       	eor	r25, r25
    5d9c:	b7 51       	subi	r27, 0x17	; 23
    5d9e:	b0 f0       	brcs	.+44     	; 0x5dcc <__fixunssfsi+0x3e>
    5da0:	e1 f0       	breq	.+56     	; 0x5dda <__fixunssfsi+0x4c>
    5da2:	66 0f       	add	r22, r22
    5da4:	77 1f       	adc	r23, r23
    5da6:	88 1f       	adc	r24, r24
    5da8:	99 1f       	adc	r25, r25
    5daa:	1a f0       	brmi	.+6      	; 0x5db2 <__fixunssfsi+0x24>
    5dac:	ba 95       	dec	r27
    5dae:	c9 f7       	brne	.-14     	; 0x5da2 <__fixunssfsi+0x14>
    5db0:	14 c0       	rjmp	.+40     	; 0x5dda <__fixunssfsi+0x4c>
    5db2:	b1 30       	cpi	r27, 0x01	; 1
    5db4:	91 f0       	breq	.+36     	; 0x5dda <__fixunssfsi+0x4c>
    5db6:	0e 94 7d 2f 	call	0x5efa	; 0x5efa <__fp_zero>
    5dba:	b1 e0       	ldi	r27, 0x01	; 1
    5dbc:	08 95       	ret
    5dbe:	0c 94 7d 2f 	jmp	0x5efa	; 0x5efa <__fp_zero>
    5dc2:	67 2f       	mov	r22, r23
    5dc4:	78 2f       	mov	r23, r24
    5dc6:	88 27       	eor	r24, r24
    5dc8:	b8 5f       	subi	r27, 0xF8	; 248
    5dca:	39 f0       	breq	.+14     	; 0x5dda <__fixunssfsi+0x4c>
    5dcc:	b9 3f       	cpi	r27, 0xF9	; 249
    5dce:	cc f3       	brlt	.-14     	; 0x5dc2 <__fixunssfsi+0x34>
    5dd0:	86 95       	lsr	r24
    5dd2:	77 95       	ror	r23
    5dd4:	67 95       	ror	r22
    5dd6:	b3 95       	inc	r27
    5dd8:	d9 f7       	brne	.-10     	; 0x5dd0 <__fixunssfsi+0x42>
    5dda:	3e f4       	brtc	.+14     	; 0x5dea <__fixunssfsi+0x5c>
    5ddc:	90 95       	com	r25
    5dde:	80 95       	com	r24
    5de0:	70 95       	com	r23
    5de2:	61 95       	neg	r22
    5de4:	7f 4f       	sbci	r23, 0xFF	; 255
    5de6:	8f 4f       	sbci	r24, 0xFF	; 255
    5de8:	9f 4f       	sbci	r25, 0xFF	; 255
    5dea:	08 95       	ret

00005dec <__floatunsisf>:
    5dec:	e8 94       	clt
    5dee:	09 c0       	rjmp	.+18     	; 0x5e02 <__floatsisf+0x12>

00005df0 <__floatsisf>:
    5df0:	97 fb       	bst	r25, 7
    5df2:	3e f4       	brtc	.+14     	; 0x5e02 <__floatsisf+0x12>
    5df4:	90 95       	com	r25
    5df6:	80 95       	com	r24
    5df8:	70 95       	com	r23
    5dfa:	61 95       	neg	r22
    5dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    5dfe:	8f 4f       	sbci	r24, 0xFF	; 255
    5e00:	9f 4f       	sbci	r25, 0xFF	; 255
    5e02:	99 23       	and	r25, r25
    5e04:	a9 f0       	breq	.+42     	; 0x5e30 <__floatsisf+0x40>
    5e06:	f9 2f       	mov	r31, r25
    5e08:	96 e9       	ldi	r25, 0x96	; 150
    5e0a:	bb 27       	eor	r27, r27
    5e0c:	93 95       	inc	r25
    5e0e:	f6 95       	lsr	r31
    5e10:	87 95       	ror	r24
    5e12:	77 95       	ror	r23
    5e14:	67 95       	ror	r22
    5e16:	b7 95       	ror	r27
    5e18:	f1 11       	cpse	r31, r1
    5e1a:	f8 cf       	rjmp	.-16     	; 0x5e0c <__floatsisf+0x1c>
    5e1c:	fa f4       	brpl	.+62     	; 0x5e5c <__floatsisf+0x6c>
    5e1e:	bb 0f       	add	r27, r27
    5e20:	11 f4       	brne	.+4      	; 0x5e26 <__floatsisf+0x36>
    5e22:	60 ff       	sbrs	r22, 0
    5e24:	1b c0       	rjmp	.+54     	; 0x5e5c <__floatsisf+0x6c>
    5e26:	6f 5f       	subi	r22, 0xFF	; 255
    5e28:	7f 4f       	sbci	r23, 0xFF	; 255
    5e2a:	8f 4f       	sbci	r24, 0xFF	; 255
    5e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    5e2e:	16 c0       	rjmp	.+44     	; 0x5e5c <__floatsisf+0x6c>
    5e30:	88 23       	and	r24, r24
    5e32:	11 f0       	breq	.+4      	; 0x5e38 <__floatsisf+0x48>
    5e34:	96 e9       	ldi	r25, 0x96	; 150
    5e36:	11 c0       	rjmp	.+34     	; 0x5e5a <__floatsisf+0x6a>
    5e38:	77 23       	and	r23, r23
    5e3a:	21 f0       	breq	.+8      	; 0x5e44 <__floatsisf+0x54>
    5e3c:	9e e8       	ldi	r25, 0x8E	; 142
    5e3e:	87 2f       	mov	r24, r23
    5e40:	76 2f       	mov	r23, r22
    5e42:	05 c0       	rjmp	.+10     	; 0x5e4e <__floatsisf+0x5e>
    5e44:	66 23       	and	r22, r22
    5e46:	71 f0       	breq	.+28     	; 0x5e64 <__floatsisf+0x74>
    5e48:	96 e8       	ldi	r25, 0x86	; 134
    5e4a:	86 2f       	mov	r24, r22
    5e4c:	70 e0       	ldi	r23, 0x00	; 0
    5e4e:	60 e0       	ldi	r22, 0x00	; 0
    5e50:	2a f0       	brmi	.+10     	; 0x5e5c <__floatsisf+0x6c>
    5e52:	9a 95       	dec	r25
    5e54:	66 0f       	add	r22, r22
    5e56:	77 1f       	adc	r23, r23
    5e58:	88 1f       	adc	r24, r24
    5e5a:	da f7       	brpl	.-10     	; 0x5e52 <__floatsisf+0x62>
    5e5c:	88 0f       	add	r24, r24
    5e5e:	96 95       	lsr	r25
    5e60:	87 95       	ror	r24
    5e62:	97 f9       	bld	r25, 7
    5e64:	08 95       	ret

00005e66 <__fp_inf>:
    5e66:	97 f9       	bld	r25, 7
    5e68:	9f 67       	ori	r25, 0x7F	; 127
    5e6a:	80 e8       	ldi	r24, 0x80	; 128
    5e6c:	70 e0       	ldi	r23, 0x00	; 0
    5e6e:	60 e0       	ldi	r22, 0x00	; 0
    5e70:	08 95       	ret

00005e72 <__fp_nan>:
    5e72:	9f ef       	ldi	r25, 0xFF	; 255
    5e74:	80 ec       	ldi	r24, 0xC0	; 192
    5e76:	08 95       	ret

00005e78 <__fp_pscA>:
    5e78:	00 24       	eor	r0, r0
    5e7a:	0a 94       	dec	r0
    5e7c:	16 16       	cp	r1, r22
    5e7e:	17 06       	cpc	r1, r23
    5e80:	18 06       	cpc	r1, r24
    5e82:	09 06       	cpc	r0, r25
    5e84:	08 95       	ret

00005e86 <__fp_pscB>:
    5e86:	00 24       	eor	r0, r0
    5e88:	0a 94       	dec	r0
    5e8a:	12 16       	cp	r1, r18
    5e8c:	13 06       	cpc	r1, r19
    5e8e:	14 06       	cpc	r1, r20
    5e90:	05 06       	cpc	r0, r21
    5e92:	08 95       	ret

00005e94 <__fp_round>:
    5e94:	09 2e       	mov	r0, r25
    5e96:	03 94       	inc	r0
    5e98:	00 0c       	add	r0, r0
    5e9a:	11 f4       	brne	.+4      	; 0x5ea0 <__fp_round+0xc>
    5e9c:	88 23       	and	r24, r24
    5e9e:	52 f0       	brmi	.+20     	; 0x5eb4 <__fp_round+0x20>
    5ea0:	bb 0f       	add	r27, r27
    5ea2:	40 f4       	brcc	.+16     	; 0x5eb4 <__fp_round+0x20>
    5ea4:	bf 2b       	or	r27, r31
    5ea6:	11 f4       	brne	.+4      	; 0x5eac <__fp_round+0x18>
    5ea8:	60 ff       	sbrs	r22, 0
    5eaa:	04 c0       	rjmp	.+8      	; 0x5eb4 <__fp_round+0x20>
    5eac:	6f 5f       	subi	r22, 0xFF	; 255
    5eae:	7f 4f       	sbci	r23, 0xFF	; 255
    5eb0:	8f 4f       	sbci	r24, 0xFF	; 255
    5eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    5eb4:	08 95       	ret

00005eb6 <__fp_split3>:
    5eb6:	57 fd       	sbrc	r21, 7
    5eb8:	90 58       	subi	r25, 0x80	; 128
    5eba:	44 0f       	add	r20, r20
    5ebc:	55 1f       	adc	r21, r21
    5ebe:	59 f0       	breq	.+22     	; 0x5ed6 <__fp_splitA+0x10>
    5ec0:	5f 3f       	cpi	r21, 0xFF	; 255
    5ec2:	71 f0       	breq	.+28     	; 0x5ee0 <__fp_splitA+0x1a>
    5ec4:	47 95       	ror	r20

00005ec6 <__fp_splitA>:
    5ec6:	88 0f       	add	r24, r24
    5ec8:	97 fb       	bst	r25, 7
    5eca:	99 1f       	adc	r25, r25
    5ecc:	61 f0       	breq	.+24     	; 0x5ee6 <__fp_splitA+0x20>
    5ece:	9f 3f       	cpi	r25, 0xFF	; 255
    5ed0:	79 f0       	breq	.+30     	; 0x5ef0 <__fp_splitA+0x2a>
    5ed2:	87 95       	ror	r24
    5ed4:	08 95       	ret
    5ed6:	12 16       	cp	r1, r18
    5ed8:	13 06       	cpc	r1, r19
    5eda:	14 06       	cpc	r1, r20
    5edc:	55 1f       	adc	r21, r21
    5ede:	f2 cf       	rjmp	.-28     	; 0x5ec4 <__fp_split3+0xe>
    5ee0:	46 95       	lsr	r20
    5ee2:	f1 df       	rcall	.-30     	; 0x5ec6 <__fp_splitA>
    5ee4:	08 c0       	rjmp	.+16     	; 0x5ef6 <__fp_splitA+0x30>
    5ee6:	16 16       	cp	r1, r22
    5ee8:	17 06       	cpc	r1, r23
    5eea:	18 06       	cpc	r1, r24
    5eec:	99 1f       	adc	r25, r25
    5eee:	f1 cf       	rjmp	.-30     	; 0x5ed2 <__fp_splitA+0xc>
    5ef0:	86 95       	lsr	r24
    5ef2:	71 05       	cpc	r23, r1
    5ef4:	61 05       	cpc	r22, r1
    5ef6:	08 94       	sec
    5ef8:	08 95       	ret

00005efa <__fp_zero>:
    5efa:	e8 94       	clt

00005efc <__fp_szero>:
    5efc:	bb 27       	eor	r27, r27
    5efe:	66 27       	eor	r22, r22
    5f00:	77 27       	eor	r23, r23
    5f02:	cb 01       	movw	r24, r22
    5f04:	97 f9       	bld	r25, 7
    5f06:	08 95       	ret

00005f08 <__mulsf3>:
    5f08:	0e 94 97 2f 	call	0x5f2e	; 0x5f2e <__mulsf3x>
    5f0c:	0c 94 4a 2f 	jmp	0x5e94	; 0x5e94 <__fp_round>
    5f10:	0e 94 3c 2f 	call	0x5e78	; 0x5e78 <__fp_pscA>
    5f14:	38 f0       	brcs	.+14     	; 0x5f24 <__mulsf3+0x1c>
    5f16:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <__fp_pscB>
    5f1a:	20 f0       	brcs	.+8      	; 0x5f24 <__mulsf3+0x1c>
    5f1c:	95 23       	and	r25, r21
    5f1e:	11 f0       	breq	.+4      	; 0x5f24 <__mulsf3+0x1c>
    5f20:	0c 94 33 2f 	jmp	0x5e66	; 0x5e66 <__fp_inf>
    5f24:	0c 94 39 2f 	jmp	0x5e72	; 0x5e72 <__fp_nan>
    5f28:	11 24       	eor	r1, r1
    5f2a:	0c 94 7e 2f 	jmp	0x5efc	; 0x5efc <__fp_szero>

00005f2e <__mulsf3x>:
    5f2e:	0e 94 5b 2f 	call	0x5eb6	; 0x5eb6 <__fp_split3>
    5f32:	70 f3       	brcs	.-36     	; 0x5f10 <__mulsf3+0x8>

00005f34 <__mulsf3_pse>:
    5f34:	95 9f       	mul	r25, r21
    5f36:	c1 f3       	breq	.-16     	; 0x5f28 <__mulsf3+0x20>
    5f38:	95 0f       	add	r25, r21
    5f3a:	50 e0       	ldi	r21, 0x00	; 0
    5f3c:	55 1f       	adc	r21, r21
    5f3e:	62 9f       	mul	r22, r18
    5f40:	f0 01       	movw	r30, r0
    5f42:	72 9f       	mul	r23, r18
    5f44:	bb 27       	eor	r27, r27
    5f46:	f0 0d       	add	r31, r0
    5f48:	b1 1d       	adc	r27, r1
    5f4a:	63 9f       	mul	r22, r19
    5f4c:	aa 27       	eor	r26, r26
    5f4e:	f0 0d       	add	r31, r0
    5f50:	b1 1d       	adc	r27, r1
    5f52:	aa 1f       	adc	r26, r26
    5f54:	64 9f       	mul	r22, r20
    5f56:	66 27       	eor	r22, r22
    5f58:	b0 0d       	add	r27, r0
    5f5a:	a1 1d       	adc	r26, r1
    5f5c:	66 1f       	adc	r22, r22
    5f5e:	82 9f       	mul	r24, r18
    5f60:	22 27       	eor	r18, r18
    5f62:	b0 0d       	add	r27, r0
    5f64:	a1 1d       	adc	r26, r1
    5f66:	62 1f       	adc	r22, r18
    5f68:	73 9f       	mul	r23, r19
    5f6a:	b0 0d       	add	r27, r0
    5f6c:	a1 1d       	adc	r26, r1
    5f6e:	62 1f       	adc	r22, r18
    5f70:	83 9f       	mul	r24, r19
    5f72:	a0 0d       	add	r26, r0
    5f74:	61 1d       	adc	r22, r1
    5f76:	22 1f       	adc	r18, r18
    5f78:	74 9f       	mul	r23, r20
    5f7a:	33 27       	eor	r19, r19
    5f7c:	a0 0d       	add	r26, r0
    5f7e:	61 1d       	adc	r22, r1
    5f80:	23 1f       	adc	r18, r19
    5f82:	84 9f       	mul	r24, r20
    5f84:	60 0d       	add	r22, r0
    5f86:	21 1d       	adc	r18, r1
    5f88:	82 2f       	mov	r24, r18
    5f8a:	76 2f       	mov	r23, r22
    5f8c:	6a 2f       	mov	r22, r26
    5f8e:	11 24       	eor	r1, r1
    5f90:	9f 57       	subi	r25, 0x7F	; 127
    5f92:	50 40       	sbci	r21, 0x00	; 0
    5f94:	9a f0       	brmi	.+38     	; 0x5fbc <__mulsf3_pse+0x88>
    5f96:	f1 f0       	breq	.+60     	; 0x5fd4 <__mulsf3_pse+0xa0>
    5f98:	88 23       	and	r24, r24
    5f9a:	4a f0       	brmi	.+18     	; 0x5fae <__mulsf3_pse+0x7a>
    5f9c:	ee 0f       	add	r30, r30
    5f9e:	ff 1f       	adc	r31, r31
    5fa0:	bb 1f       	adc	r27, r27
    5fa2:	66 1f       	adc	r22, r22
    5fa4:	77 1f       	adc	r23, r23
    5fa6:	88 1f       	adc	r24, r24
    5fa8:	91 50       	subi	r25, 0x01	; 1
    5faa:	50 40       	sbci	r21, 0x00	; 0
    5fac:	a9 f7       	brne	.-22     	; 0x5f98 <__mulsf3_pse+0x64>
    5fae:	9e 3f       	cpi	r25, 0xFE	; 254
    5fb0:	51 05       	cpc	r21, r1
    5fb2:	80 f0       	brcs	.+32     	; 0x5fd4 <__mulsf3_pse+0xa0>
    5fb4:	0c 94 33 2f 	jmp	0x5e66	; 0x5e66 <__fp_inf>
    5fb8:	0c 94 7e 2f 	jmp	0x5efc	; 0x5efc <__fp_szero>
    5fbc:	5f 3f       	cpi	r21, 0xFF	; 255
    5fbe:	e4 f3       	brlt	.-8      	; 0x5fb8 <__mulsf3_pse+0x84>
    5fc0:	98 3e       	cpi	r25, 0xE8	; 232
    5fc2:	d4 f3       	brlt	.-12     	; 0x5fb8 <__mulsf3_pse+0x84>
    5fc4:	86 95       	lsr	r24
    5fc6:	77 95       	ror	r23
    5fc8:	67 95       	ror	r22
    5fca:	b7 95       	ror	r27
    5fcc:	f7 95       	ror	r31
    5fce:	e7 95       	ror	r30
    5fd0:	9f 5f       	subi	r25, 0xFF	; 255
    5fd2:	c1 f7       	brne	.-16     	; 0x5fc4 <__mulsf3_pse+0x90>
    5fd4:	fe 2b       	or	r31, r30
    5fd6:	88 0f       	add	r24, r24
    5fd8:	91 1d       	adc	r25, r1
    5fda:	96 95       	lsr	r25
    5fdc:	87 95       	ror	r24
    5fde:	97 f9       	bld	r25, 7
    5fe0:	08 95       	ret

00005fe2 <__divmodhi4>:
    5fe2:	97 fb       	bst	r25, 7
    5fe4:	07 2e       	mov	r0, r23
    5fe6:	16 f4       	brtc	.+4      	; 0x5fec <__divmodhi4+0xa>
    5fe8:	00 94       	com	r0
    5fea:	07 d0       	rcall	.+14     	; 0x5ffa <__divmodhi4_neg1>
    5fec:	77 fd       	sbrc	r23, 7
    5fee:	09 d0       	rcall	.+18     	; 0x6002 <__divmodhi4_neg2>
    5ff0:	0e 94 38 30 	call	0x6070	; 0x6070 <__udivmodhi4>
    5ff4:	07 fc       	sbrc	r0, 7
    5ff6:	05 d0       	rcall	.+10     	; 0x6002 <__divmodhi4_neg2>
    5ff8:	3e f4       	brtc	.+14     	; 0x6008 <__divmodhi4_exit>

00005ffa <__divmodhi4_neg1>:
    5ffa:	90 95       	com	r25
    5ffc:	81 95       	neg	r24
    5ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    6000:	08 95       	ret

00006002 <__divmodhi4_neg2>:
    6002:	70 95       	com	r23
    6004:	61 95       	neg	r22
    6006:	7f 4f       	sbci	r23, 0xFF	; 255

00006008 <__divmodhi4_exit>:
    6008:	08 95       	ret

0000600a <__udivmodsi4>:
    600a:	a1 e2       	ldi	r26, 0x21	; 33
    600c:	1a 2e       	mov	r1, r26
    600e:	aa 1b       	sub	r26, r26
    6010:	bb 1b       	sub	r27, r27
    6012:	fd 01       	movw	r30, r26
    6014:	0d c0       	rjmp	.+26     	; 0x6030 <__udivmodsi4_ep>

00006016 <__udivmodsi4_loop>:
    6016:	aa 1f       	adc	r26, r26
    6018:	bb 1f       	adc	r27, r27
    601a:	ee 1f       	adc	r30, r30
    601c:	ff 1f       	adc	r31, r31
    601e:	a2 17       	cp	r26, r18
    6020:	b3 07       	cpc	r27, r19
    6022:	e4 07       	cpc	r30, r20
    6024:	f5 07       	cpc	r31, r21
    6026:	20 f0       	brcs	.+8      	; 0x6030 <__udivmodsi4_ep>
    6028:	a2 1b       	sub	r26, r18
    602a:	b3 0b       	sbc	r27, r19
    602c:	e4 0b       	sbc	r30, r20
    602e:	f5 0b       	sbc	r31, r21

00006030 <__udivmodsi4_ep>:
    6030:	66 1f       	adc	r22, r22
    6032:	77 1f       	adc	r23, r23
    6034:	88 1f       	adc	r24, r24
    6036:	99 1f       	adc	r25, r25
    6038:	1a 94       	dec	r1
    603a:	69 f7       	brne	.-38     	; 0x6016 <__udivmodsi4_loop>
    603c:	60 95       	com	r22
    603e:	70 95       	com	r23
    6040:	80 95       	com	r24
    6042:	90 95       	com	r25
    6044:	9b 01       	movw	r18, r22
    6046:	ac 01       	movw	r20, r24
    6048:	bd 01       	movw	r22, r26
    604a:	cf 01       	movw	r24, r30
    604c:	08 95       	ret

0000604e <__tablejump2__>:
    604e:	ee 0f       	add	r30, r30
    6050:	ff 1f       	adc	r31, r31
    6052:	05 90       	lpm	r0, Z+
    6054:	f4 91       	lpm	r31, Z
    6056:	e0 2d       	mov	r30, r0
    6058:	09 94       	ijmp

0000605a <__muluhisi3>:
    605a:	0e 94 4c 30 	call	0x6098	; 0x6098 <__umulhisi3>
    605e:	a5 9f       	mul	r26, r21
    6060:	90 0d       	add	r25, r0
    6062:	b4 9f       	mul	r27, r20
    6064:	90 0d       	add	r25, r0
    6066:	a4 9f       	mul	r26, r20
    6068:	80 0d       	add	r24, r0
    606a:	91 1d       	adc	r25, r1
    606c:	11 24       	eor	r1, r1
    606e:	08 95       	ret

00006070 <__udivmodhi4>:
    6070:	aa 1b       	sub	r26, r26
    6072:	bb 1b       	sub	r27, r27
    6074:	51 e1       	ldi	r21, 0x11	; 17
    6076:	07 c0       	rjmp	.+14     	; 0x6086 <__udivmodhi4_ep>

00006078 <__udivmodhi4_loop>:
    6078:	aa 1f       	adc	r26, r26
    607a:	bb 1f       	adc	r27, r27
    607c:	a6 17       	cp	r26, r22
    607e:	b7 07       	cpc	r27, r23
    6080:	10 f0       	brcs	.+4      	; 0x6086 <__udivmodhi4_ep>
    6082:	a6 1b       	sub	r26, r22
    6084:	b7 0b       	sbc	r27, r23

00006086 <__udivmodhi4_ep>:
    6086:	88 1f       	adc	r24, r24
    6088:	99 1f       	adc	r25, r25
    608a:	5a 95       	dec	r21
    608c:	a9 f7       	brne	.-22     	; 0x6078 <__udivmodhi4_loop>
    608e:	80 95       	com	r24
    6090:	90 95       	com	r25
    6092:	bc 01       	movw	r22, r24
    6094:	cd 01       	movw	r24, r26
    6096:	08 95       	ret

00006098 <__umulhisi3>:
    6098:	a2 9f       	mul	r26, r18
    609a:	b0 01       	movw	r22, r0
    609c:	b3 9f       	mul	r27, r19
    609e:	c0 01       	movw	r24, r0
    60a0:	a3 9f       	mul	r26, r19
    60a2:	70 0d       	add	r23, r0
    60a4:	81 1d       	adc	r24, r1
    60a6:	11 24       	eor	r1, r1
    60a8:	91 1d       	adc	r25, r1
    60aa:	b2 9f       	mul	r27, r18
    60ac:	70 0d       	add	r23, r0
    60ae:	81 1d       	adc	r24, r1
    60b0:	11 24       	eor	r1, r1
    60b2:	91 1d       	adc	r25, r1
    60b4:	08 95       	ret

000060b6 <malloc>:
    60b6:	0f 93       	push	r16
    60b8:	1f 93       	push	r17
    60ba:	cf 93       	push	r28
    60bc:	df 93       	push	r29
    60be:	82 30       	cpi	r24, 0x02	; 2
    60c0:	91 05       	cpc	r25, r1
    60c2:	10 f4       	brcc	.+4      	; 0x60c8 <malloc+0x12>
    60c4:	82 e0       	ldi	r24, 0x02	; 2
    60c6:	90 e0       	ldi	r25, 0x00	; 0
    60c8:	e0 91 6a 06 	lds	r30, 0x066A	; 0x80066a <__flp>
    60cc:	f0 91 6b 06 	lds	r31, 0x066B	; 0x80066b <__flp+0x1>
    60d0:	20 e0       	ldi	r18, 0x00	; 0
    60d2:	30 e0       	ldi	r19, 0x00	; 0
    60d4:	a0 e0       	ldi	r26, 0x00	; 0
    60d6:	b0 e0       	ldi	r27, 0x00	; 0
    60d8:	30 97       	sbiw	r30, 0x00	; 0
    60da:	19 f1       	breq	.+70     	; 0x6122 <malloc+0x6c>
    60dc:	40 81       	ld	r20, Z
    60de:	51 81       	ldd	r21, Z+1	; 0x01
    60e0:	02 81       	ldd	r16, Z+2	; 0x02
    60e2:	13 81       	ldd	r17, Z+3	; 0x03
    60e4:	48 17       	cp	r20, r24
    60e6:	59 07       	cpc	r21, r25
    60e8:	c8 f0       	brcs	.+50     	; 0x611c <malloc+0x66>
    60ea:	84 17       	cp	r24, r20
    60ec:	95 07       	cpc	r25, r21
    60ee:	69 f4       	brne	.+26     	; 0x610a <malloc+0x54>
    60f0:	10 97       	sbiw	r26, 0x00	; 0
    60f2:	31 f0       	breq	.+12     	; 0x6100 <malloc+0x4a>
    60f4:	12 96       	adiw	r26, 0x02	; 2
    60f6:	0c 93       	st	X, r16
    60f8:	12 97       	sbiw	r26, 0x02	; 2
    60fa:	13 96       	adiw	r26, 0x03	; 3
    60fc:	1c 93       	st	X, r17
    60fe:	27 c0       	rjmp	.+78     	; 0x614e <malloc+0x98>
    6100:	00 93 6a 06 	sts	0x066A, r16	; 0x80066a <__flp>
    6104:	10 93 6b 06 	sts	0x066B, r17	; 0x80066b <__flp+0x1>
    6108:	22 c0       	rjmp	.+68     	; 0x614e <malloc+0x98>
    610a:	21 15       	cp	r18, r1
    610c:	31 05       	cpc	r19, r1
    610e:	19 f0       	breq	.+6      	; 0x6116 <malloc+0x60>
    6110:	42 17       	cp	r20, r18
    6112:	53 07       	cpc	r21, r19
    6114:	18 f4       	brcc	.+6      	; 0x611c <malloc+0x66>
    6116:	9a 01       	movw	r18, r20
    6118:	bd 01       	movw	r22, r26
    611a:	ef 01       	movw	r28, r30
    611c:	df 01       	movw	r26, r30
    611e:	f8 01       	movw	r30, r16
    6120:	db cf       	rjmp	.-74     	; 0x60d8 <malloc+0x22>
    6122:	21 15       	cp	r18, r1
    6124:	31 05       	cpc	r19, r1
    6126:	f9 f0       	breq	.+62     	; 0x6166 <malloc+0xb0>
    6128:	28 1b       	sub	r18, r24
    612a:	39 0b       	sbc	r19, r25
    612c:	24 30       	cpi	r18, 0x04	; 4
    612e:	31 05       	cpc	r19, r1
    6130:	80 f4       	brcc	.+32     	; 0x6152 <malloc+0x9c>
    6132:	8a 81       	ldd	r24, Y+2	; 0x02
    6134:	9b 81       	ldd	r25, Y+3	; 0x03
    6136:	61 15       	cp	r22, r1
    6138:	71 05       	cpc	r23, r1
    613a:	21 f0       	breq	.+8      	; 0x6144 <malloc+0x8e>
    613c:	fb 01       	movw	r30, r22
    613e:	93 83       	std	Z+3, r25	; 0x03
    6140:	82 83       	std	Z+2, r24	; 0x02
    6142:	04 c0       	rjmp	.+8      	; 0x614c <malloc+0x96>
    6144:	90 93 6b 06 	sts	0x066B, r25	; 0x80066b <__flp+0x1>
    6148:	80 93 6a 06 	sts	0x066A, r24	; 0x80066a <__flp>
    614c:	fe 01       	movw	r30, r28
    614e:	32 96       	adiw	r30, 0x02	; 2
    6150:	44 c0       	rjmp	.+136    	; 0x61da <malloc+0x124>
    6152:	fe 01       	movw	r30, r28
    6154:	e2 0f       	add	r30, r18
    6156:	f3 1f       	adc	r31, r19
    6158:	81 93       	st	Z+, r24
    615a:	91 93       	st	Z+, r25
    615c:	22 50       	subi	r18, 0x02	; 2
    615e:	31 09       	sbc	r19, r1
    6160:	39 83       	std	Y+1, r19	; 0x01
    6162:	28 83       	st	Y, r18
    6164:	3a c0       	rjmp	.+116    	; 0x61da <malloc+0x124>
    6166:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__brkval>
    616a:	30 91 69 06 	lds	r19, 0x0669	; 0x800669 <__brkval+0x1>
    616e:	23 2b       	or	r18, r19
    6170:	41 f4       	brne	.+16     	; 0x6182 <malloc+0xcc>
    6172:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    6176:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    617a:	30 93 69 06 	sts	0x0669, r19	; 0x800669 <__brkval+0x1>
    617e:	20 93 68 06 	sts	0x0668, r18	; 0x800668 <__brkval>
    6182:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    6186:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    618a:	21 15       	cp	r18, r1
    618c:	31 05       	cpc	r19, r1
    618e:	41 f4       	brne	.+16     	; 0x61a0 <malloc+0xea>
    6190:	2d b7       	in	r18, 0x3d	; 61
    6192:	3e b7       	in	r19, 0x3e	; 62
    6194:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6198:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    619c:	24 1b       	sub	r18, r20
    619e:	35 0b       	sbc	r19, r21
    61a0:	e0 91 68 06 	lds	r30, 0x0668	; 0x800668 <__brkval>
    61a4:	f0 91 69 06 	lds	r31, 0x0669	; 0x800669 <__brkval+0x1>
    61a8:	e2 17       	cp	r30, r18
    61aa:	f3 07       	cpc	r31, r19
    61ac:	a0 f4       	brcc	.+40     	; 0x61d6 <malloc+0x120>
    61ae:	2e 1b       	sub	r18, r30
    61b0:	3f 0b       	sbc	r19, r31
    61b2:	28 17       	cp	r18, r24
    61b4:	39 07       	cpc	r19, r25
    61b6:	78 f0       	brcs	.+30     	; 0x61d6 <malloc+0x120>
    61b8:	ac 01       	movw	r20, r24
    61ba:	4e 5f       	subi	r20, 0xFE	; 254
    61bc:	5f 4f       	sbci	r21, 0xFF	; 255
    61be:	24 17       	cp	r18, r20
    61c0:	35 07       	cpc	r19, r21
    61c2:	48 f0       	brcs	.+18     	; 0x61d6 <malloc+0x120>
    61c4:	4e 0f       	add	r20, r30
    61c6:	5f 1f       	adc	r21, r31
    61c8:	50 93 69 06 	sts	0x0669, r21	; 0x800669 <__brkval+0x1>
    61cc:	40 93 68 06 	sts	0x0668, r20	; 0x800668 <__brkval>
    61d0:	81 93       	st	Z+, r24
    61d2:	91 93       	st	Z+, r25
    61d4:	02 c0       	rjmp	.+4      	; 0x61da <malloc+0x124>
    61d6:	e0 e0       	ldi	r30, 0x00	; 0
    61d8:	f0 e0       	ldi	r31, 0x00	; 0
    61da:	cf 01       	movw	r24, r30
    61dc:	df 91       	pop	r29
    61de:	cf 91       	pop	r28
    61e0:	1f 91       	pop	r17
    61e2:	0f 91       	pop	r16
    61e4:	08 95       	ret

000061e6 <free>:
    61e6:	cf 93       	push	r28
    61e8:	df 93       	push	r29
    61ea:	00 97       	sbiw	r24, 0x00	; 0
    61ec:	09 f4       	brne	.+2      	; 0x61f0 <free+0xa>
    61ee:	81 c0       	rjmp	.+258    	; 0x62f2 <free+0x10c>
    61f0:	fc 01       	movw	r30, r24
    61f2:	32 97       	sbiw	r30, 0x02	; 2
    61f4:	13 82       	std	Z+3, r1	; 0x03
    61f6:	12 82       	std	Z+2, r1	; 0x02
    61f8:	a0 91 6a 06 	lds	r26, 0x066A	; 0x80066a <__flp>
    61fc:	b0 91 6b 06 	lds	r27, 0x066B	; 0x80066b <__flp+0x1>
    6200:	10 97       	sbiw	r26, 0x00	; 0
    6202:	81 f4       	brne	.+32     	; 0x6224 <free+0x3e>
    6204:	20 81       	ld	r18, Z
    6206:	31 81       	ldd	r19, Z+1	; 0x01
    6208:	82 0f       	add	r24, r18
    620a:	93 1f       	adc	r25, r19
    620c:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__brkval>
    6210:	30 91 69 06 	lds	r19, 0x0669	; 0x800669 <__brkval+0x1>
    6214:	28 17       	cp	r18, r24
    6216:	39 07       	cpc	r19, r25
    6218:	51 f5       	brne	.+84     	; 0x626e <free+0x88>
    621a:	f0 93 69 06 	sts	0x0669, r31	; 0x800669 <__brkval+0x1>
    621e:	e0 93 68 06 	sts	0x0668, r30	; 0x800668 <__brkval>
    6222:	67 c0       	rjmp	.+206    	; 0x62f2 <free+0x10c>
    6224:	ed 01       	movw	r28, r26
    6226:	20 e0       	ldi	r18, 0x00	; 0
    6228:	30 e0       	ldi	r19, 0x00	; 0
    622a:	ce 17       	cp	r28, r30
    622c:	df 07       	cpc	r29, r31
    622e:	40 f4       	brcc	.+16     	; 0x6240 <free+0x5a>
    6230:	4a 81       	ldd	r20, Y+2	; 0x02
    6232:	5b 81       	ldd	r21, Y+3	; 0x03
    6234:	9e 01       	movw	r18, r28
    6236:	41 15       	cp	r20, r1
    6238:	51 05       	cpc	r21, r1
    623a:	f1 f0       	breq	.+60     	; 0x6278 <free+0x92>
    623c:	ea 01       	movw	r28, r20
    623e:	f5 cf       	rjmp	.-22     	; 0x622a <free+0x44>
    6240:	d3 83       	std	Z+3, r29	; 0x03
    6242:	c2 83       	std	Z+2, r28	; 0x02
    6244:	40 81       	ld	r20, Z
    6246:	51 81       	ldd	r21, Z+1	; 0x01
    6248:	84 0f       	add	r24, r20
    624a:	95 1f       	adc	r25, r21
    624c:	c8 17       	cp	r28, r24
    624e:	d9 07       	cpc	r29, r25
    6250:	59 f4       	brne	.+22     	; 0x6268 <free+0x82>
    6252:	88 81       	ld	r24, Y
    6254:	99 81       	ldd	r25, Y+1	; 0x01
    6256:	84 0f       	add	r24, r20
    6258:	95 1f       	adc	r25, r21
    625a:	02 96       	adiw	r24, 0x02	; 2
    625c:	91 83       	std	Z+1, r25	; 0x01
    625e:	80 83       	st	Z, r24
    6260:	8a 81       	ldd	r24, Y+2	; 0x02
    6262:	9b 81       	ldd	r25, Y+3	; 0x03
    6264:	93 83       	std	Z+3, r25	; 0x03
    6266:	82 83       	std	Z+2, r24	; 0x02
    6268:	21 15       	cp	r18, r1
    626a:	31 05       	cpc	r19, r1
    626c:	29 f4       	brne	.+10     	; 0x6278 <free+0x92>
    626e:	f0 93 6b 06 	sts	0x066B, r31	; 0x80066b <__flp+0x1>
    6272:	e0 93 6a 06 	sts	0x066A, r30	; 0x80066a <__flp>
    6276:	3d c0       	rjmp	.+122    	; 0x62f2 <free+0x10c>
    6278:	e9 01       	movw	r28, r18
    627a:	fb 83       	std	Y+3, r31	; 0x03
    627c:	ea 83       	std	Y+2, r30	; 0x02
    627e:	49 91       	ld	r20, Y+
    6280:	59 91       	ld	r21, Y+
    6282:	c4 0f       	add	r28, r20
    6284:	d5 1f       	adc	r29, r21
    6286:	ec 17       	cp	r30, r28
    6288:	fd 07       	cpc	r31, r29
    628a:	61 f4       	brne	.+24     	; 0x62a4 <free+0xbe>
    628c:	80 81       	ld	r24, Z
    628e:	91 81       	ldd	r25, Z+1	; 0x01
    6290:	84 0f       	add	r24, r20
    6292:	95 1f       	adc	r25, r21
    6294:	02 96       	adiw	r24, 0x02	; 2
    6296:	e9 01       	movw	r28, r18
    6298:	99 83       	std	Y+1, r25	; 0x01
    629a:	88 83       	st	Y, r24
    629c:	82 81       	ldd	r24, Z+2	; 0x02
    629e:	93 81       	ldd	r25, Z+3	; 0x03
    62a0:	9b 83       	std	Y+3, r25	; 0x03
    62a2:	8a 83       	std	Y+2, r24	; 0x02
    62a4:	e0 e0       	ldi	r30, 0x00	; 0
    62a6:	f0 e0       	ldi	r31, 0x00	; 0
    62a8:	12 96       	adiw	r26, 0x02	; 2
    62aa:	8d 91       	ld	r24, X+
    62ac:	9c 91       	ld	r25, X
    62ae:	13 97       	sbiw	r26, 0x03	; 3
    62b0:	00 97       	sbiw	r24, 0x00	; 0
    62b2:	19 f0       	breq	.+6      	; 0x62ba <free+0xd4>
    62b4:	fd 01       	movw	r30, r26
    62b6:	dc 01       	movw	r26, r24
    62b8:	f7 cf       	rjmp	.-18     	; 0x62a8 <free+0xc2>
    62ba:	8d 91       	ld	r24, X+
    62bc:	9c 91       	ld	r25, X
    62be:	11 97       	sbiw	r26, 0x01	; 1
    62c0:	9d 01       	movw	r18, r26
    62c2:	2e 5f       	subi	r18, 0xFE	; 254
    62c4:	3f 4f       	sbci	r19, 0xFF	; 255
    62c6:	82 0f       	add	r24, r18
    62c8:	93 1f       	adc	r25, r19
    62ca:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__brkval>
    62ce:	30 91 69 06 	lds	r19, 0x0669	; 0x800669 <__brkval+0x1>
    62d2:	28 17       	cp	r18, r24
    62d4:	39 07       	cpc	r19, r25
    62d6:	69 f4       	brne	.+26     	; 0x62f2 <free+0x10c>
    62d8:	30 97       	sbiw	r30, 0x00	; 0
    62da:	29 f4       	brne	.+10     	; 0x62e6 <free+0x100>
    62dc:	10 92 6b 06 	sts	0x066B, r1	; 0x80066b <__flp+0x1>
    62e0:	10 92 6a 06 	sts	0x066A, r1	; 0x80066a <__flp>
    62e4:	02 c0       	rjmp	.+4      	; 0x62ea <free+0x104>
    62e6:	13 82       	std	Z+3, r1	; 0x03
    62e8:	12 82       	std	Z+2, r1	; 0x02
    62ea:	b0 93 69 06 	sts	0x0669, r27	; 0x800669 <__brkval+0x1>
    62ee:	a0 93 68 06 	sts	0x0668, r26	; 0x800668 <__brkval>
    62f2:	df 91       	pop	r29
    62f4:	cf 91       	pop	r28
    62f6:	08 95       	ret

000062f8 <realloc>:
    62f8:	a0 e0       	ldi	r26, 0x00	; 0
    62fa:	b0 e0       	ldi	r27, 0x00	; 0
    62fc:	e2 e8       	ldi	r30, 0x82	; 130
    62fe:	f1 e3       	ldi	r31, 0x31	; 49
    6300:	0c 94 82 32 	jmp	0x6504	; 0x6504 <__prologue_saves__+0x8>
    6304:	ec 01       	movw	r28, r24
    6306:	00 97       	sbiw	r24, 0x00	; 0
    6308:	21 f4       	brne	.+8      	; 0x6312 <realloc+0x1a>
    630a:	cb 01       	movw	r24, r22
    630c:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <malloc>
    6310:	b4 c0       	rjmp	.+360    	; 0x647a <realloc+0x182>
    6312:	fc 01       	movw	r30, r24
    6314:	e6 0f       	add	r30, r22
    6316:	f7 1f       	adc	r31, r23
    6318:	9c 01       	movw	r18, r24
    631a:	22 50       	subi	r18, 0x02	; 2
    631c:	31 09       	sbc	r19, r1
    631e:	e2 17       	cp	r30, r18
    6320:	f3 07       	cpc	r31, r19
    6322:	08 f4       	brcc	.+2      	; 0x6326 <realloc+0x2e>
    6324:	a8 c0       	rjmp	.+336    	; 0x6476 <realloc+0x17e>
    6326:	d9 01       	movw	r26, r18
    6328:	0d 91       	ld	r16, X+
    632a:	1c 91       	ld	r17, X
    632c:	11 97       	sbiw	r26, 0x01	; 1
    632e:	06 17       	cp	r16, r22
    6330:	17 07       	cpc	r17, r23
    6332:	b0 f0       	brcs	.+44     	; 0x6360 <realloc+0x68>
    6334:	05 30       	cpi	r16, 0x05	; 5
    6336:	11 05       	cpc	r17, r1
    6338:	08 f4       	brcc	.+2      	; 0x633c <realloc+0x44>
    633a:	9b c0       	rjmp	.+310    	; 0x6472 <realloc+0x17a>
    633c:	c8 01       	movw	r24, r16
    633e:	04 97       	sbiw	r24, 0x04	; 4
    6340:	86 17       	cp	r24, r22
    6342:	97 07       	cpc	r25, r23
    6344:	08 f4       	brcc	.+2      	; 0x6348 <realloc+0x50>
    6346:	95 c0       	rjmp	.+298    	; 0x6472 <realloc+0x17a>
    6348:	02 50       	subi	r16, 0x02	; 2
    634a:	11 09       	sbc	r17, r1
    634c:	06 1b       	sub	r16, r22
    634e:	17 0b       	sbc	r17, r23
    6350:	01 93       	st	Z+, r16
    6352:	11 93       	st	Z+, r17
    6354:	6d 93       	st	X+, r22
    6356:	7c 93       	st	X, r23
    6358:	cf 01       	movw	r24, r30
    635a:	0e 94 f3 30 	call	0x61e6	; 0x61e6 <free>
    635e:	89 c0       	rjmp	.+274    	; 0x6472 <realloc+0x17a>
    6360:	5b 01       	movw	r10, r22
    6362:	a0 1a       	sub	r10, r16
    6364:	b1 0a       	sbc	r11, r17
    6366:	4c 01       	movw	r8, r24
    6368:	80 0e       	add	r8, r16
    636a:	91 1e       	adc	r9, r17
    636c:	a0 91 6a 06 	lds	r26, 0x066A	; 0x80066a <__flp>
    6370:	b0 91 6b 06 	lds	r27, 0x066B	; 0x80066b <__flp+0x1>
    6374:	61 2c       	mov	r6, r1
    6376:	71 2c       	mov	r7, r1
    6378:	e1 2c       	mov	r14, r1
    637a:	f1 2c       	mov	r15, r1
    637c:	10 97       	sbiw	r26, 0x00	; 0
    637e:	09 f4       	brne	.+2      	; 0x6382 <realloc+0x8a>
    6380:	46 c0       	rjmp	.+140    	; 0x640e <realloc+0x116>
    6382:	8d 91       	ld	r24, X+
    6384:	9c 91       	ld	r25, X
    6386:	11 97       	sbiw	r26, 0x01	; 1
    6388:	a8 15       	cp	r26, r8
    638a:	b9 05       	cpc	r27, r9
    638c:	b1 f5       	brne	.+108    	; 0x63fa <realloc+0x102>
    638e:	6c 01       	movw	r12, r24
    6390:	42 e0       	ldi	r20, 0x02	; 2
    6392:	c4 0e       	add	r12, r20
    6394:	d1 1c       	adc	r13, r1
    6396:	ca 14       	cp	r12, r10
    6398:	db 04       	cpc	r13, r11
    639a:	78 f1       	brcs	.+94     	; 0x63fa <realloc+0x102>
    639c:	4c 01       	movw	r8, r24
    639e:	8a 18       	sub	r8, r10
    63a0:	9b 08       	sbc	r9, r11
    63a2:	64 01       	movw	r12, r8
    63a4:	42 e0       	ldi	r20, 0x02	; 2
    63a6:	c4 0e       	add	r12, r20
    63a8:	d1 1c       	adc	r13, r1
    63aa:	12 96       	adiw	r26, 0x02	; 2
    63ac:	bc 90       	ld	r11, X
    63ae:	12 97       	sbiw	r26, 0x02	; 2
    63b0:	13 96       	adiw	r26, 0x03	; 3
    63b2:	ac 91       	ld	r26, X
    63b4:	b5 e0       	ldi	r27, 0x05	; 5
    63b6:	cb 16       	cp	r12, r27
    63b8:	d1 04       	cpc	r13, r1
    63ba:	40 f0       	brcs	.+16     	; 0x63cc <realloc+0xd4>
    63bc:	b2 82       	std	Z+2, r11	; 0x02
    63be:	a3 83       	std	Z+3, r26	; 0x03
    63c0:	91 82       	std	Z+1, r9	; 0x01
    63c2:	80 82       	st	Z, r8
    63c4:	d9 01       	movw	r26, r18
    63c6:	6d 93       	st	X+, r22
    63c8:	7c 93       	st	X, r23
    63ca:	09 c0       	rjmp	.+18     	; 0x63de <realloc+0xe6>
    63cc:	0e 5f       	subi	r16, 0xFE	; 254
    63ce:	1f 4f       	sbci	r17, 0xFF	; 255
    63d0:	80 0f       	add	r24, r16
    63d2:	91 1f       	adc	r25, r17
    63d4:	f9 01       	movw	r30, r18
    63d6:	91 83       	std	Z+1, r25	; 0x01
    63d8:	80 83       	st	Z, r24
    63da:	eb 2d       	mov	r30, r11
    63dc:	fa 2f       	mov	r31, r26
    63de:	e1 14       	cp	r14, r1
    63e0:	f1 04       	cpc	r15, r1
    63e2:	31 f0       	breq	.+12     	; 0x63f0 <realloc+0xf8>
    63e4:	d7 01       	movw	r26, r14
    63e6:	13 96       	adiw	r26, 0x03	; 3
    63e8:	fc 93       	st	X, r31
    63ea:	ee 93       	st	-X, r30
    63ec:	12 97       	sbiw	r26, 0x02	; 2
    63ee:	41 c0       	rjmp	.+130    	; 0x6472 <realloc+0x17a>
    63f0:	f0 93 6b 06 	sts	0x066B, r31	; 0x80066b <__flp+0x1>
    63f4:	e0 93 6a 06 	sts	0x066A, r30	; 0x80066a <__flp>
    63f8:	3c c0       	rjmp	.+120    	; 0x6472 <realloc+0x17a>
    63fa:	68 16       	cp	r6, r24
    63fc:	79 06       	cpc	r7, r25
    63fe:	08 f4       	brcc	.+2      	; 0x6402 <realloc+0x10a>
    6400:	3c 01       	movw	r6, r24
    6402:	7d 01       	movw	r14, r26
    6404:	12 96       	adiw	r26, 0x02	; 2
    6406:	0d 90       	ld	r0, X+
    6408:	bc 91       	ld	r27, X
    640a:	a0 2d       	mov	r26, r0
    640c:	b7 cf       	rjmp	.-146    	; 0x637c <realloc+0x84>
    640e:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__brkval>
    6412:	90 91 69 06 	lds	r25, 0x0669	; 0x800669 <__brkval+0x1>
    6416:	88 16       	cp	r8, r24
    6418:	99 06       	cpc	r9, r25
    641a:	e1 f4       	brne	.+56     	; 0x6454 <realloc+0x15c>
    641c:	66 16       	cp	r6, r22
    641e:	77 06       	cpc	r7, r23
    6420:	c8 f4       	brcc	.+50     	; 0x6454 <realloc+0x15c>
    6422:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    6426:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    642a:	00 97       	sbiw	r24, 0x00	; 0
    642c:	41 f4       	brne	.+16     	; 0x643e <realloc+0x146>
    642e:	8d b7       	in	r24, 0x3d	; 61
    6430:	9e b7       	in	r25, 0x3e	; 62
    6432:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6436:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    643a:	84 1b       	sub	r24, r20
    643c:	95 0b       	sbc	r25, r21
    643e:	e8 17       	cp	r30, r24
    6440:	f9 07       	cpc	r31, r25
    6442:	c8 f4       	brcc	.+50     	; 0x6476 <realloc+0x17e>
    6444:	f0 93 69 06 	sts	0x0669, r31	; 0x800669 <__brkval+0x1>
    6448:	e0 93 68 06 	sts	0x0668, r30	; 0x800668 <__brkval>
    644c:	f9 01       	movw	r30, r18
    644e:	71 83       	std	Z+1, r23	; 0x01
    6450:	60 83       	st	Z, r22
    6452:	0f c0       	rjmp	.+30     	; 0x6472 <realloc+0x17a>
    6454:	cb 01       	movw	r24, r22
    6456:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <malloc>
    645a:	7c 01       	movw	r14, r24
    645c:	00 97       	sbiw	r24, 0x00	; 0
    645e:	59 f0       	breq	.+22     	; 0x6476 <realloc+0x17e>
    6460:	a8 01       	movw	r20, r16
    6462:	be 01       	movw	r22, r28
    6464:	0e 94 54 32 	call	0x64a8	; 0x64a8 <memcpy>
    6468:	ce 01       	movw	r24, r28
    646a:	0e 94 f3 30 	call	0x61e6	; 0x61e6 <free>
    646e:	c7 01       	movw	r24, r14
    6470:	04 c0       	rjmp	.+8      	; 0x647a <realloc+0x182>
    6472:	ce 01       	movw	r24, r28
    6474:	02 c0       	rjmp	.+4      	; 0x647a <realloc+0x182>
    6476:	80 e0       	ldi	r24, 0x00	; 0
    6478:	90 e0       	ldi	r25, 0x00	; 0
    647a:	cd b7       	in	r28, 0x3d	; 61
    647c:	de b7       	in	r29, 0x3e	; 62
    647e:	ee e0       	ldi	r30, 0x0E	; 14
    6480:	0c 94 9e 32 	jmp	0x653c	; 0x653c <__epilogue_restores__+0x8>

00006484 <abort>:
    6484:	81 e0       	ldi	r24, 0x01	; 1
    6486:	90 e0       	ldi	r25, 0x00	; 0
    6488:	f8 94       	cli
    648a:	0c 94 b5 32 	jmp	0x656a	; 0x656a <__do_global_dtors>

0000648e <memcmp>:
    648e:	fb 01       	movw	r30, r22
    6490:	dc 01       	movw	r26, r24
    6492:	04 c0       	rjmp	.+8      	; 0x649c <memcmp+0xe>
    6494:	8d 91       	ld	r24, X+
    6496:	01 90       	ld	r0, Z+
    6498:	80 19       	sub	r24, r0
    649a:	21 f4       	brne	.+8      	; 0x64a4 <memcmp+0x16>
    649c:	41 50       	subi	r20, 0x01	; 1
    649e:	50 40       	sbci	r21, 0x00	; 0
    64a0:	c8 f7       	brcc	.-14     	; 0x6494 <memcmp+0x6>
    64a2:	88 1b       	sub	r24, r24
    64a4:	99 0b       	sbc	r25, r25
    64a6:	08 95       	ret

000064a8 <memcpy>:
    64a8:	fb 01       	movw	r30, r22
    64aa:	dc 01       	movw	r26, r24
    64ac:	02 c0       	rjmp	.+4      	; 0x64b2 <memcpy+0xa>
    64ae:	01 90       	ld	r0, Z+
    64b0:	0d 92       	st	X+, r0
    64b2:	41 50       	subi	r20, 0x01	; 1
    64b4:	50 40       	sbci	r21, 0x00	; 0
    64b6:	d8 f7       	brcc	.-10     	; 0x64ae <memcpy+0x6>
    64b8:	08 95       	ret

000064ba <strchr>:
    64ba:	fc 01       	movw	r30, r24
    64bc:	81 91       	ld	r24, Z+
    64be:	86 17       	cp	r24, r22
    64c0:	21 f0       	breq	.+8      	; 0x64ca <strchr+0x10>
    64c2:	88 23       	and	r24, r24
    64c4:	d9 f7       	brne	.-10     	; 0x64bc <strchr+0x2>
    64c6:	99 27       	eor	r25, r25
    64c8:	08 95       	ret
    64ca:	31 97       	sbiw	r30, 0x01	; 1
    64cc:	cf 01       	movw	r24, r30
    64ce:	08 95       	ret

000064d0 <strcpy>:
    64d0:	fb 01       	movw	r30, r22
    64d2:	dc 01       	movw	r26, r24
    64d4:	01 90       	ld	r0, Z+
    64d6:	0d 92       	st	X+, r0
    64d8:	00 20       	and	r0, r0
    64da:	e1 f7       	brne	.-8      	; 0x64d4 <strcpy+0x4>
    64dc:	08 95       	ret

000064de <strncpy>:
    64de:	fb 01       	movw	r30, r22
    64e0:	dc 01       	movw	r26, r24
    64e2:	41 50       	subi	r20, 0x01	; 1
    64e4:	50 40       	sbci	r21, 0x00	; 0
    64e6:	48 f0       	brcs	.+18     	; 0x64fa <strncpy+0x1c>
    64e8:	01 90       	ld	r0, Z+
    64ea:	0d 92       	st	X+, r0
    64ec:	00 20       	and	r0, r0
    64ee:	c9 f7       	brne	.-14     	; 0x64e2 <strncpy+0x4>
    64f0:	01 c0       	rjmp	.+2      	; 0x64f4 <strncpy+0x16>
    64f2:	1d 92       	st	X+, r1
    64f4:	41 50       	subi	r20, 0x01	; 1
    64f6:	50 40       	sbci	r21, 0x00	; 0
    64f8:	e0 f7       	brcc	.-8      	; 0x64f2 <strncpy+0x14>
    64fa:	08 95       	ret

000064fc <__prologue_saves__>:
    64fc:	2f 92       	push	r2
    64fe:	3f 92       	push	r3
    6500:	4f 92       	push	r4
    6502:	5f 92       	push	r5
    6504:	6f 92       	push	r6
    6506:	7f 92       	push	r7
    6508:	8f 92       	push	r8
    650a:	9f 92       	push	r9
    650c:	af 92       	push	r10
    650e:	bf 92       	push	r11
    6510:	cf 92       	push	r12
    6512:	df 92       	push	r13
    6514:	ef 92       	push	r14
    6516:	ff 92       	push	r15
    6518:	0f 93       	push	r16
    651a:	1f 93       	push	r17
    651c:	cf 93       	push	r28
    651e:	df 93       	push	r29
    6520:	cd b7       	in	r28, 0x3d	; 61
    6522:	de b7       	in	r29, 0x3e	; 62
    6524:	ca 1b       	sub	r28, r26
    6526:	db 0b       	sbc	r29, r27
    6528:	0f b6       	in	r0, 0x3f	; 63
    652a:	f8 94       	cli
    652c:	de bf       	out	0x3e, r29	; 62
    652e:	0f be       	out	0x3f, r0	; 63
    6530:	cd bf       	out	0x3d, r28	; 61
    6532:	09 94       	ijmp

00006534 <__epilogue_restores__>:
    6534:	2a 88       	ldd	r2, Y+18	; 0x12
    6536:	39 88       	ldd	r3, Y+17	; 0x11
    6538:	48 88       	ldd	r4, Y+16	; 0x10
    653a:	5f 84       	ldd	r5, Y+15	; 0x0f
    653c:	6e 84       	ldd	r6, Y+14	; 0x0e
    653e:	7d 84       	ldd	r7, Y+13	; 0x0d
    6540:	8c 84       	ldd	r8, Y+12	; 0x0c
    6542:	9b 84       	ldd	r9, Y+11	; 0x0b
    6544:	aa 84       	ldd	r10, Y+10	; 0x0a
    6546:	b9 84       	ldd	r11, Y+9	; 0x09
    6548:	c8 84       	ldd	r12, Y+8	; 0x08
    654a:	df 80       	ldd	r13, Y+7	; 0x07
    654c:	ee 80       	ldd	r14, Y+6	; 0x06
    654e:	fd 80       	ldd	r15, Y+5	; 0x05
    6550:	0c 81       	ldd	r16, Y+4	; 0x04
    6552:	1b 81       	ldd	r17, Y+3	; 0x03
    6554:	aa 81       	ldd	r26, Y+2	; 0x02
    6556:	b9 81       	ldd	r27, Y+1	; 0x01
    6558:	ce 0f       	add	r28, r30
    655a:	d1 1d       	adc	r29, r1
    655c:	0f b6       	in	r0, 0x3f	; 63
    655e:	f8 94       	cli
    6560:	de bf       	out	0x3e, r29	; 62
    6562:	0f be       	out	0x3f, r0	; 63
    6564:	cd bf       	out	0x3d, r28	; 61
    6566:	ed 01       	movw	r28, r26
    6568:	08 95       	ret

0000656a <__do_global_dtors>:
    656a:	11 e0       	ldi	r17, 0x01	; 1
    656c:	c4 e3       	ldi	r28, 0x34	; 52
    656e:	d1 e0       	ldi	r29, 0x01	; 1
    6570:	04 c0       	rjmp	.+8      	; 0x657a <__do_global_dtors+0x10>
    6572:	fe 01       	movw	r30, r28
    6574:	0e 94 27 30 	call	0x604e	; 0x604e <__tablejump2__>
    6578:	21 96       	adiw	r28, 0x01	; 1
    657a:	c5 33       	cpi	r28, 0x35	; 53
    657c:	d1 07       	cpc	r29, r17
    657e:	c9 f7       	brne	.-14     	; 0x6572 <__do_global_dtors+0x8>
    6580:	f8 94       	cli

00006582 <__stop_program>:
    6582:	ff cf       	rjmp	.-2      	; 0x6582 <__stop_program>
