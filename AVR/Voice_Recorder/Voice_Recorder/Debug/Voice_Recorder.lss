
Voice_Recorder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013c  00800100  00005296  0000532a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005296  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000352  0080023c  0080023c  00005466  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005466  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005498  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008a8  00000000  00000000  000054d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001f663  00000000  00000000  00005d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000040ba  00000000  00000000  000253e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000069f6  00000000  00000000  0002949d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000206c  00000000  00000000  0002fe94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005879  00000000  00000000  00031f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d650  00000000  00000000  00037779  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009c0  00000000  00000000  00044dc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 01 	jmp	0x262	; 0x262 <__ctors_end>
       4:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
       8:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
       c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      10:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      14:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      18:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      1c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      20:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      24:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      28:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      2c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      30:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      34:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      38:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      3c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      40:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_16>
      44:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      48:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      4c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      50:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      54:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      58:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      5c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      60:	0c 94 74 23 	jmp	0x46e8	; 0x46e8 <__vector_24>
      64:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      68:	80 24       	eor	r8, r0
      6a:	84 24       	eor	r8, r4
      6c:	84 24       	eor	r8, r4
      6e:	84 24       	eor	r8, r4
      70:	84 24       	eor	r8, r4
      72:	84 24       	eor	r8, r4
      74:	84 24       	eor	r8, r4
      76:	84 24       	eor	r8, r4
      78:	94 23       	and	r25, r20
      7a:	84 24       	eor	r8, r4
      7c:	84 24       	eor	r8, r4
      7e:	84 24       	eor	r8, r4
      80:	84 24       	eor	r8, r4
      82:	84 24       	eor	r8, r4
      84:	84 24       	eor	r8, r4
      86:	84 24       	eor	r8, r4
      88:	94 23       	and	r25, r20
      8a:	84 24       	eor	r8, r4
      8c:	84 24       	eor	r8, r4
      8e:	84 24       	eor	r8, r4
      90:	84 24       	eor	r8, r4
      92:	84 24       	eor	r8, r4
      94:	84 24       	eor	r8, r4
      96:	84 24       	eor	r8, r4
      98:	9c 23       	and	r25, r28
      9a:	84 24       	eor	r8, r4
      9c:	84 24       	eor	r8, r4
      9e:	84 24       	eor	r8, r4
      a0:	84 24       	eor	r8, r4
      a2:	84 24       	eor	r8, r4
      a4:	84 24       	eor	r8, r4
      a6:	84 24       	eor	r8, r4
      a8:	c2 23       	and	r28, r18
      aa:	84 24       	eor	r8, r4
      ac:	84 24       	eor	r8, r4
      ae:	84 24       	eor	r8, r4
      b0:	84 24       	eor	r8, r4
      b2:	84 24       	eor	r8, r4
      b4:	84 24       	eor	r8, r4
      b6:	84 24       	eor	r8, r4
      b8:	9c 23       	and	r25, r28
      ba:	84 24       	eor	r8, r4
      bc:	84 24       	eor	r8, r4
      be:	84 24       	eor	r8, r4
      c0:	84 24       	eor	r8, r4
      c2:	84 24       	eor	r8, r4
      c4:	84 24       	eor	r8, r4
      c6:	84 24       	eor	r8, r4
      c8:	c8 23       	and	r28, r24
      ca:	84 24       	eor	r8, r4
      cc:	84 24       	eor	r8, r4
      ce:	84 24       	eor	r8, r4
      d0:	84 24       	eor	r8, r4
      d2:	84 24       	eor	r8, r4
      d4:	84 24       	eor	r8, r4
      d6:	84 24       	eor	r8, r4
      d8:	ce 23       	and	r28, r30
      da:	84 24       	eor	r8, r4
      dc:	84 24       	eor	r8, r4
      de:	84 24       	eor	r8, r4
      e0:	84 24       	eor	r8, r4
      e2:	84 24       	eor	r8, r4
      e4:	84 24       	eor	r8, r4
      e6:	84 24       	eor	r8, r4
      e8:	e0 23       	and	r30, r16
      ea:	84 24       	eor	r8, r4
      ec:	84 24       	eor	r8, r4
      ee:	84 24       	eor	r8, r4
      f0:	84 24       	eor	r8, r4
      f2:	84 24       	eor	r8, r4
      f4:	84 24       	eor	r8, r4
      f6:	84 24       	eor	r8, r4
      f8:	0a 24       	eor	r0, r10
      fa:	84 24       	eor	r8, r4
      fc:	84 24       	eor	r8, r4
      fe:	84 24       	eor	r8, r4
     100:	84 24       	eor	r8, r4
     102:	84 24       	eor	r8, r4
     104:	84 24       	eor	r8, r4
     106:	84 24       	eor	r8, r4
     108:	d4 23       	and	r29, r20
     10a:	84 24       	eor	r8, r4
     10c:	84 24       	eor	r8, r4
     10e:	84 24       	eor	r8, r4
     110:	84 24       	eor	r8, r4
     112:	84 24       	eor	r8, r4
     114:	84 24       	eor	r8, r4
     116:	84 24       	eor	r8, r4
     118:	ee 23       	and	r30, r30
     11a:	84 24       	eor	r8, r4
     11c:	84 24       	eor	r8, r4
     11e:	84 24       	eor	r8, r4
     120:	84 24       	eor	r8, r4
     122:	84 24       	eor	r8, r4
     124:	84 24       	eor	r8, r4
     126:	84 24       	eor	r8, r4
     128:	0d 24       	eor	r0, r13
     12a:	84 24       	eor	r8, r4
     12c:	84 24       	eor	r8, r4
     12e:	84 24       	eor	r8, r4
     130:	84 24       	eor	r8, r4
     132:	84 24       	eor	r8, r4
     134:	84 24       	eor	r8, r4
     136:	84 24       	eor	r8, r4
     138:	0d 24       	eor	r0, r13
     13a:	84 24       	eor	r8, r4
     13c:	84 24       	eor	r8, r4
     13e:	84 24       	eor	r8, r4
     140:	84 24       	eor	r8, r4
     142:	84 24       	eor	r8, r4
     144:	84 24       	eor	r8, r4
     146:	84 24       	eor	r8, r4
     148:	0d 24       	eor	r0, r13
     14a:	84 24       	eor	r8, r4
     14c:	84 24       	eor	r8, r4
     14e:	84 24       	eor	r8, r4
     150:	84 24       	eor	r8, r4
     152:	84 24       	eor	r8, r4
     154:	84 24       	eor	r8, r4
     156:	84 24       	eor	r8, r4
     158:	0d 24       	eor	r0, r13
     15a:	84 24       	eor	r8, r4
     15c:	84 24       	eor	r8, r4
     15e:	84 24       	eor	r8, r4
     160:	84 24       	eor	r8, r4
     162:	84 24       	eor	r8, r4
     164:	84 24       	eor	r8, r4
     166:	84 24       	eor	r8, r4
     168:	16 24       	eor	r1, r6
     16a:	84 24       	eor	r8, r4
     16c:	84 24       	eor	r8, r4
     16e:	84 24       	eor	r8, r4
     170:	84 24       	eor	r8, r4
     172:	84 24       	eor	r8, r4
     174:	84 24       	eor	r8, r4
     176:	84 24       	eor	r8, r4
     178:	47 24       	eor	r4, r7
     17a:	84 24       	eor	r8, r4
     17c:	84 24       	eor	r8, r4
     17e:	84 24       	eor	r8, r4
     180:	84 24       	eor	r8, r4
     182:	84 24       	eor	r8, r4
     184:	84 24       	eor	r8, r4
     186:	84 24       	eor	r8, r4
     188:	16 24       	eor	r1, r6
     18a:	84 24       	eor	r8, r4
     18c:	84 24       	eor	r8, r4
     18e:	84 24       	eor	r8, r4
     190:	84 24       	eor	r8, r4
     192:	84 24       	eor	r8, r4
     194:	84 24       	eor	r8, r4
     196:	84 24       	eor	r8, r4
     198:	47 24       	eor	r4, r7
     19a:	84 24       	eor	r8, r4
     19c:	84 24       	eor	r8, r4
     19e:	84 24       	eor	r8, r4
     1a0:	84 24       	eor	r8, r4
     1a2:	84 24       	eor	r8, r4
     1a4:	84 24       	eor	r8, r4
     1a6:	84 24       	eor	r8, r4
     1a8:	2e 24       	eor	r2, r14
     1aa:	84 24       	eor	r8, r4
     1ac:	84 24       	eor	r8, r4
     1ae:	84 24       	eor	r8, r4
     1b0:	84 24       	eor	r8, r4
     1b2:	84 24       	eor	r8, r4
     1b4:	84 24       	eor	r8, r4
     1b6:	84 24       	eor	r8, r4
     1b8:	4b 24       	eor	r4, r11
     1ba:	84 24       	eor	r8, r4
     1bc:	84 24       	eor	r8, r4
     1be:	84 24       	eor	r8, r4
     1c0:	84 24       	eor	r8, r4
     1c2:	84 24       	eor	r8, r4
     1c4:	84 24       	eor	r8, r4
     1c6:	84 24       	eor	r8, r4
     1c8:	4b 24       	eor	r4, r11
     1ca:	84 24       	eor	r8, r4
     1cc:	84 24       	eor	r8, r4
     1ce:	84 24       	eor	r8, r4
     1d0:	84 24       	eor	r8, r4
     1d2:	84 24       	eor	r8, r4
     1d4:	84 24       	eor	r8, r4
     1d6:	84 24       	eor	r8, r4
     1d8:	60 24       	eor	r6, r0
     1da:	84 24       	eor	r8, r4
     1dc:	84 24       	eor	r8, r4
     1de:	84 24       	eor	r8, r4
     1e0:	84 24       	eor	r8, r4
     1e2:	84 24       	eor	r8, r4
     1e4:	84 24       	eor	r8, r4
     1e6:	84 24       	eor	r8, r4
     1e8:	7a 24       	eor	r7, r10
     1ea:	84 24       	eor	r8, r4
     1ec:	84 24       	eor	r8, r4
     1ee:	84 24       	eor	r8, r4
     1f0:	84 24       	eor	r8, r4
     1f2:	84 24       	eor	r8, r4
     1f4:	84 24       	eor	r8, r4
     1f6:	84 24       	eor	r8, r4
     1f8:	7a 24       	eor	r7, r10

000001fa <__trampolines_end>:
     1fa:	00 00       	nop
     1fc:	00 08       	sbc	r0, r0
     1fe:	00 02       	muls	r16, r16
     200:	01 00       	.word	0x0001	; ????
     202:	00 03       	mulsu	r16, r16
     204:	04 07       	cpc	r16, r20
	...

0000020e <digital_pin_to_bit_mask_PGM>:
     20e:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     21e:	04 08 10 20                                         ... 

00000222 <digital_pin_to_port_PGM>:
     222:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     232:	03 03 03 03                                         ....

00000236 <port_to_output_PGM>:
     236:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000240 <port_to_mode_PGM>:
     240:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000024a <_ZZN6SdFile10make83NameEPKcPhE3__c>:
     24a:	7c 3c 3e 5e 2b 3d 3f 2f 5b 5d 3b 2c 2a 22 5c 00     |<>^+=?/[];,*"\.

0000025a <__ctors_start>:
     25a:	0e 0b       	sbc	r16, r30
     25c:	0f 10       	cpse	r0, r15
     25e:	94 13       	cpse	r25, r20
     260:	a4 25       	eor	r26, r4

00000262 <__ctors_end>:
     262:	11 24       	eor	r1, r1
     264:	1f be       	out	0x3f, r1	; 63
     266:	cf ef       	ldi	r28, 0xFF	; 255
     268:	d8 e0       	ldi	r29, 0x08	; 8
     26a:	de bf       	out	0x3e, r29	; 62
     26c:	cd bf       	out	0x3d, r28	; 61

0000026e <__do_copy_data>:
     26e:	12 e0       	ldi	r17, 0x02	; 2
     270:	a0 e0       	ldi	r26, 0x00	; 0
     272:	b1 e0       	ldi	r27, 0x01	; 1
     274:	e6 e9       	ldi	r30, 0x96	; 150
     276:	f2 e5       	ldi	r31, 0x52	; 82
     278:	02 c0       	rjmp	.+4      	; 0x27e <__do_copy_data+0x10>
     27a:	05 90       	lpm	r0, Z+
     27c:	0d 92       	st	X+, r0
     27e:	ac 33       	cpi	r26, 0x3C	; 60
     280:	b1 07       	cpc	r27, r17
     282:	d9 f7       	brne	.-10     	; 0x27a <__do_copy_data+0xc>

00000284 <__do_clear_bss>:
     284:	25 e0       	ldi	r18, 0x05	; 5
     286:	ac e3       	ldi	r26, 0x3C	; 60
     288:	b2 e0       	ldi	r27, 0x02	; 2
     28a:	01 c0       	rjmp	.+2      	; 0x28e <.do_clear_bss_start>

0000028c <.do_clear_bss_loop>:
     28c:	1d 92       	st	X+, r1

0000028e <.do_clear_bss_start>:
     28e:	ae 38       	cpi	r26, 0x8E	; 142
     290:	b2 07       	cpc	r27, r18
     292:	e1 f7       	brne	.-8      	; 0x28c <.do_clear_bss_loop>

00000294 <__do_global_ctors>:
     294:	11 e0       	ldi	r17, 0x01	; 1
     296:	c1 e3       	ldi	r28, 0x31	; 49
     298:	d1 e0       	ldi	r29, 0x01	; 1
     29a:	04 c0       	rjmp	.+8      	; 0x2a4 <__do_global_ctors+0x10>
     29c:	21 97       	sbiw	r28, 0x01	; 1
     29e:	fe 01       	movw	r30, r28
     2a0:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <__tablejump2__>
     2a4:	cd 32       	cpi	r28, 0x2D	; 45
     2a6:	d1 07       	cpc	r29, r17
     2a8:	c9 f7       	brne	.-14     	; 0x29c <__do_global_ctors+0x8>
     2aa:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <main>
     2ae:	0c 94 49 29 	jmp	0x5292	; 0x5292 <_exit>

000002b2 <__bad_interrupt>:
     2b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002b6 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
     2b6:	0e 94 1d 29 	call	0x523a	; 0x523a <abort>

000002ba <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	08 95       	ret

000002c0 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     2c0:	08 95       	ret

000002c2 <_ZN5Print5writeEPKhj>:
}

size_t Print::print(const String &s)
{
  return write(s.c_str(), s.length());
}
     2c2:	cf 92       	push	r12
     2c4:	df 92       	push	r13
     2c6:	ef 92       	push	r14
     2c8:	ff 92       	push	r15
     2ca:	0f 93       	push	r16
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	8c 01       	movw	r16, r24
     2d4:	db 01       	movw	r26, r22
     2d6:	c0 e0       	ldi	r28, 0x00	; 0
     2d8:	d0 e0       	ldi	r29, 0x00	; 0
     2da:	7a 01       	movw	r14, r20
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	e8 1a       	sub	r14, r24
     2e0:	f1 08       	sbc	r15, r1
     2e2:	45 2b       	or	r20, r21
     2e4:	a1 f0       	breq	.+40     	; 0x30e <_ZN5Print5writeEPKhj+0x4c>
     2e6:	f8 01       	movw	r30, r16
     2e8:	80 81       	ld	r24, Z
     2ea:	91 81       	ldd	r25, Z+1	; 0x01
     2ec:	fc 01       	movw	r30, r24
     2ee:	20 81       	ld	r18, Z
     2f0:	31 81       	ldd	r19, Z+1	; 0x01
     2f2:	6d 01       	movw	r12, r26
     2f4:	ff ef       	ldi	r31, 0xFF	; 255
     2f6:	cf 1a       	sub	r12, r31
     2f8:	df 0a       	sbc	r13, r31
     2fa:	6c 91       	ld	r22, X
     2fc:	c8 01       	movw	r24, r16
     2fe:	f9 01       	movw	r30, r18
     300:	09 95       	icall
     302:	89 2b       	or	r24, r25
     304:	21 f0       	breq	.+8      	; 0x30e <_ZN5Print5writeEPKhj+0x4c>
     306:	21 96       	adiw	r28, 0x01	; 1
     308:	a7 01       	movw	r20, r14
     30a:	d6 01       	movw	r26, r12
     30c:	e6 cf       	rjmp	.-52     	; 0x2da <_ZN5Print5writeEPKhj+0x18>
     30e:	ce 01       	movw	r24, r28
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	1f 91       	pop	r17
     316:	0f 91       	pop	r16
     318:	ff 90       	pop	r15
     31a:	ef 90       	pop	r14
     31c:	df 90       	pop	r13
     31e:	cf 90       	pop	r12
     320:	08 95       	ret

00000322 <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     322:	61 15       	cp	r22, r1
     324:	71 05       	cpc	r23, r1
     326:	81 f0       	breq	.+32     	; 0x348 <_ZN5Print5printEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
     328:	fb 01       	movw	r30, r22
     32a:	01 90       	ld	r0, Z+
     32c:	00 20       	and	r0, r0
     32e:	e9 f7       	brne	.-6      	; 0x32a <_ZN5Print5printEPKc+0x8>
     330:	31 97       	sbiw	r30, 0x01	; 1
     332:	af 01       	movw	r20, r30
     334:	46 1b       	sub	r20, r22
     336:	57 0b       	sbc	r21, r23
     338:	dc 01       	movw	r26, r24
     33a:	ed 91       	ld	r30, X+
     33c:	fc 91       	ld	r31, X
     33e:	02 80       	ldd	r0, Z+2	; 0x02
     340:	f3 81       	ldd	r31, Z+3	; 0x03
     342:	e0 2d       	mov	r30, r0
     344:	09 95       	icall
     346:	08 95       	ret
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0

size_t Print::print(const char str[])
{
  return write(str);
}
     34c:	08 95       	ret

0000034e <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     34e:	1f 92       	push	r1
     350:	0f 92       	push	r0
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	0f 92       	push	r0
     356:	11 24       	eor	r1, r1
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
     35c:	2f 93       	push	r18
     35e:	3f 93       	push	r19
     360:	4f 93       	push	r20
     362:	5f 93       	push	r21
     364:	6f 93       	push	r22
     366:	7f 93       	push	r23
     368:	8f 93       	push	r24
     36a:	9f 93       	push	r25
     36c:	af 93       	push	r26
     36e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     370:	00 91 3d 02 	lds	r16, 0x023D	; 0x80023d <timer0_millis>
     374:	10 91 3e 02 	lds	r17, 0x023E	; 0x80023e <timer0_millis+0x1>
     378:	20 91 3f 02 	lds	r18, 0x023F	; 0x80023f <timer0_millis+0x2>
     37c:	30 91 40 02 	lds	r19, 0x0240	; 0x800240 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     380:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <__data_end>

	m += MILLIS_INC;
     384:	b9 01       	movw	r22, r18
     386:	a8 01       	movw	r20, r16
     388:	4f 5f       	subi	r20, 0xFF	; 255
     38a:	5f 4f       	sbci	r21, 0xFF	; 255
     38c:	6f 4f       	sbci	r22, 0xFF	; 255
     38e:	7f 4f       	sbci	r23, 0xFF	; 255
	f += FRACT_INC;
     390:	83 e0       	ldi	r24, 0x03	; 3
     392:	89 0f       	add	r24, r25
	if (f >= FRACT_MAX) {
     394:	8d 37       	cpi	r24, 0x7D	; 125
     396:	40 f0       	brcs	.+16     	; 0x3a8 <__vector_16+0x5a>
		f -= FRACT_MAX;
     398:	86 e8       	ldi	r24, 0x86	; 134
     39a:	89 0f       	add	r24, r25
		m += 1;
     39c:	b9 01       	movw	r22, r18
     39e:	a8 01       	movw	r20, r16
     3a0:	4e 5f       	subi	r20, 0xFE	; 254
     3a2:	5f 4f       	sbci	r21, 0xFF	; 255
     3a4:	6f 4f       	sbci	r22, 0xFF	; 255
     3a6:	7f 4f       	sbci	r23, 0xFF	; 255
	}

	timer0_fract = f;
     3a8:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <__data_end>
	timer0_millis = m;
     3ac:	40 93 3d 02 	sts	0x023D, r20	; 0x80023d <timer0_millis>
     3b0:	50 93 3e 02 	sts	0x023E, r21	; 0x80023e <timer0_millis+0x1>
     3b4:	60 93 3f 02 	sts	0x023F, r22	; 0x80023f <timer0_millis+0x2>
     3b8:	70 93 40 02 	sts	0x0240, r23	; 0x800240 <timer0_millis+0x3>
	timer0_overflow_count++;
     3bc:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <timer0_overflow_count>
     3c0:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <timer0_overflow_count+0x1>
     3c4:	a0 91 43 02 	lds	r26, 0x0243	; 0x800243 <timer0_overflow_count+0x2>
     3c8:	b0 91 44 02 	lds	r27, 0x0244	; 0x800244 <timer0_overflow_count+0x3>
     3cc:	01 96       	adiw	r24, 0x01	; 1
     3ce:	a1 1d       	adc	r26, r1
     3d0:	b1 1d       	adc	r27, r1
     3d2:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <timer0_overflow_count>
     3d6:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <timer0_overflow_count+0x1>
     3da:	a0 93 43 02 	sts	0x0243, r26	; 0x800243 <timer0_overflow_count+0x2>
     3de:	b0 93 44 02 	sts	0x0244, r27	; 0x800244 <timer0_overflow_count+0x3>
}
     3e2:	bf 91       	pop	r27
     3e4:	af 91       	pop	r26
     3e6:	9f 91       	pop	r25
     3e8:	8f 91       	pop	r24
     3ea:	7f 91       	pop	r23
     3ec:	6f 91       	pop	r22
     3ee:	5f 91       	pop	r21
     3f0:	4f 91       	pop	r20
     3f2:	3f 91       	pop	r19
     3f4:	2f 91       	pop	r18
     3f6:	1f 91       	pop	r17
     3f8:	0f 91       	pop	r16
     3fa:	0f 90       	pop	r0
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	0f 90       	pop	r0
     400:	1f 90       	pop	r1
     402:	18 95       	reti

00000404 <millis>:
unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     404:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     406:	f8 94       	cli
	m = timer0_millis;
     408:	60 91 3d 02 	lds	r22, 0x023D	; 0x80023d <timer0_millis>
     40c:	70 91 3e 02 	lds	r23, 0x023E	; 0x80023e <timer0_millis+0x1>
     410:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <timer0_millis+0x2>
     414:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <timer0_millis+0x3>
	SREG = oldSREG;
     418:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     41a:	08 95       	ret

0000041c <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     41c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     41e:	f8 94       	cli
	m = timer0_overflow_count;
     420:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <timer0_overflow_count>
     424:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <timer0_overflow_count+0x1>
     428:	a0 91 43 02 	lds	r26, 0x0243	; 0x800243 <timer0_overflow_count+0x2>
     42c:	b0 91 44 02 	lds	r27, 0x0244	; 0x800244 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     430:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     432:	a8 9b       	sbis	0x15, 0	; 21
     434:	05 c0       	rjmp	.+10     	; 0x440 <micros+0x24>
     436:	2f 3f       	cpi	r18, 0xFF	; 255
     438:	19 f0       	breq	.+6      	; 0x440 <micros+0x24>
		m++;
     43a:	01 96       	adiw	r24, 0x01	; 1
     43c:	a1 1d       	adc	r26, r1
     43e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     440:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     442:	ba 2f       	mov	r27, r26
     444:	a9 2f       	mov	r26, r25
     446:	98 2f       	mov	r25, r24
     448:	88 27       	eor	r24, r24
     44a:	82 0f       	add	r24, r18
     44c:	91 1d       	adc	r25, r1
     44e:	a1 1d       	adc	r26, r1
     450:	b1 1d       	adc	r27, r1
     452:	bc 01       	movw	r22, r24
     454:	cd 01       	movw	r24, r26
     456:	66 0f       	add	r22, r22
     458:	77 1f       	adc	r23, r23
     45a:	88 1f       	adc	r24, r24
     45c:	99 1f       	adc	r25, r25
     45e:	66 0f       	add	r22, r22
     460:	77 1f       	adc	r23, r23
     462:	88 1f       	adc	r24, r24
     464:	99 1f       	adc	r25, r25
     466:	08 95       	ret

00000468 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     468:	83 30       	cpi	r24, 0x03	; 3
     46a:	69 f0       	breq	.+26     	; 0x486 <turnOffPWM+0x1e>
     46c:	28 f4       	brcc	.+10     	; 0x478 <turnOffPWM+0x10>
     46e:	81 30       	cpi	r24, 0x01	; 1
     470:	b1 f0       	breq	.+44     	; 0x49e <turnOffPWM+0x36>
     472:	82 30       	cpi	r24, 0x02	; 2
     474:	c1 f0       	breq	.+48     	; 0x4a6 <turnOffPWM+0x3e>
     476:	08 95       	ret
     478:	87 30       	cpi	r24, 0x07	; 7
     47a:	c9 f0       	breq	.+50     	; 0x4ae <turnOffPWM+0x46>
     47c:	88 30       	cpi	r24, 0x08	; 8
     47e:	e9 f0       	breq	.+58     	; 0x4ba <turnOffPWM+0x52>
     480:	84 30       	cpi	r24, 0x04	; 4
     482:	01 f5       	brne	.+64     	; 0x4c4 <turnOffPWM+0x5c>
     484:	06 c0       	rjmp	.+12     	; 0x492 <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     486:	e0 e8       	ldi	r30, 0x80	; 128
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	8f 77       	andi	r24, 0x7F	; 127
     48e:	80 83       	st	Z, r24
     490:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     492:	e0 e8       	ldi	r30, 0x80	; 128
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 81       	ld	r24, Z
     498:	8f 7d       	andi	r24, 0xDF	; 223
     49a:	80 83       	st	Z, r24
     49c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     49e:	84 b5       	in	r24, 0x24	; 36
     4a0:	8f 77       	andi	r24, 0x7F	; 127
     4a2:	84 bd       	out	0x24, r24	; 36
     4a4:	08 95       	ret
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     4a6:	84 b5       	in	r24, 0x24	; 36
     4a8:	8f 7d       	andi	r24, 0xDF	; 223
     4aa:	84 bd       	out	0x24, r24	; 36
     4ac:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     4ae:	e0 eb       	ldi	r30, 0xB0	; 176
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	80 81       	ld	r24, Z
     4b4:	8f 77       	andi	r24, 0x7F	; 127
     4b6:	80 83       	st	Z, r24
     4b8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     4ba:	e0 eb       	ldi	r30, 0xB0	; 176
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	80 81       	ld	r24, Z
     4c0:	8f 7d       	andi	r24, 0xDF	; 223
     4c2:	80 83       	st	Z, r24
     4c4:	08 95       	ret

000004c6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	fc 01       	movw	r30, r24
     4ce:	e2 5f       	subi	r30, 0xF2	; 242
     4d0:	fd 4f       	sbci	r31, 0xFD	; 253
     4d2:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     4d4:	fc 01       	movw	r30, r24
     4d6:	ee 5d       	subi	r30, 0xDE	; 222
     4d8:	fd 4f       	sbci	r31, 0xFD	; 253
     4da:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     4dc:	88 23       	and	r24, r24
     4de:	79 f1       	breq	.+94     	; 0x53e <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	88 0f       	add	r24, r24
     4e4:	99 1f       	adc	r25, r25
     4e6:	fc 01       	movw	r30, r24
     4e8:	e0 5c       	subi	r30, 0xC0	; 192
     4ea:	fd 4f       	sbci	r31, 0xFD	; 253
     4ec:	a5 91       	lpm	r26, Z+
     4ee:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     4f0:	fc 01       	movw	r30, r24
     4f2:	ea 5c       	subi	r30, 0xCA	; 202
     4f4:	fd 4f       	sbci	r31, 0xFD	; 253
     4f6:	c5 91       	lpm	r28, Z+
     4f8:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     4fa:	61 11       	cpse	r22, r1
     4fc:	0c c0       	rjmp	.+24     	; 0x516 <pinMode+0x50>
		uint8_t oldSREG = SREG;
     4fe:	9f b7       	in	r25, 0x3f	; 63
                cli();
     500:	f8 94       	cli
		*reg &= ~bit;
     502:	8c 91       	ld	r24, X
     504:	e2 2f       	mov	r30, r18
     506:	e0 95       	com	r30
     508:	8e 23       	and	r24, r30
     50a:	8c 93       	st	X, r24
		*out &= ~bit;
     50c:	28 81       	ld	r18, Y
     50e:	e2 23       	and	r30, r18
     510:	e8 83       	st	Y, r30
		SREG = oldSREG;
     512:	9f bf       	out	0x3f, r25	; 63
     514:	14 c0       	rjmp	.+40     	; 0x53e <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
     516:	62 30       	cpi	r22, 0x02	; 2
     518:	61 f4       	brne	.+24     	; 0x532 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
     51a:	9f b7       	in	r25, 0x3f	; 63
                cli();
     51c:	f8 94       	cli
		*reg &= ~bit;
     51e:	8c 91       	ld	r24, X
     520:	32 2f       	mov	r19, r18
     522:	30 95       	com	r19
     524:	83 23       	and	r24, r19
     526:	8c 93       	st	X, r24
		*out |= bit;
     528:	e8 81       	ld	r30, Y
     52a:	e2 2b       	or	r30, r18
     52c:	e8 83       	st	Y, r30
		SREG = oldSREG;
     52e:	9f bf       	out	0x3f, r25	; 63
     530:	06 c0       	rjmp	.+12     	; 0x53e <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
     532:	8f b7       	in	r24, 0x3f	; 63
                cli();
     534:	f8 94       	cli
		*reg |= bit;
     536:	ec 91       	ld	r30, X
     538:	e2 2b       	or	r30, r18
     53a:	ec 93       	st	X, r30
		SREG = oldSREG;
     53c:	8f bf       	out	0x3f, r24	; 63
	}
}
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	08 95       	ret

00000544 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     54a:	28 2f       	mov	r18, r24
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	f9 01       	movw	r30, r18
     550:	e6 50       	subi	r30, 0x06	; 6
     552:	fe 4f       	sbci	r31, 0xFE	; 254
     554:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     556:	f9 01       	movw	r30, r18
     558:	e2 5f       	subi	r30, 0xF2	; 242
     55a:	fd 4f       	sbci	r31, 0xFD	; 253
     55c:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     55e:	f9 01       	movw	r30, r18
     560:	ee 5d       	subi	r30, 0xDE	; 222
     562:	fd 4f       	sbci	r31, 0xFD	; 253
     564:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     566:	cc 23       	and	r28, r28
     568:	d1 f0       	breq	.+52     	; 0x59e <digitalWrite+0x5a>
     56a:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     56c:	81 11       	cpse	r24, r1
     56e:	0e 94 34 02 	call	0x468	; 0x468 <turnOffPWM>

	out = portOutputRegister(port);
     572:	ec 2f       	mov	r30, r28
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	ee 0f       	add	r30, r30
     578:	ff 1f       	adc	r31, r31
     57a:	ea 5c       	subi	r30, 0xCA	; 202
     57c:	fd 4f       	sbci	r31, 0xFD	; 253
     57e:	a5 91       	lpm	r26, Z+
     580:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     582:	8f b7       	in	r24, 0x3f	; 63
	cli();
     584:	f8 94       	cli

	if (val == LOW) {
     586:	d1 11       	cpse	r29, r1
     588:	06 c0       	rjmp	.+12     	; 0x596 <digitalWrite+0x52>
		*out &= ~bit;
     58a:	9c 91       	ld	r25, X
     58c:	e1 2f       	mov	r30, r17
     58e:	e0 95       	com	r30
     590:	e9 23       	and	r30, r25
     592:	ec 93       	st	X, r30
     594:	03 c0       	rjmp	.+6      	; 0x59c <digitalWrite+0x58>
	} else {
		*out |= bit;
     596:	ec 91       	ld	r30, X
     598:	e1 2b       	or	r30, r17
     59a:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
     59c:	8f bf       	out	0x3f, r24	; 63
}
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	1f 91       	pop	r17
     5a4:	08 95       	ret

000005a6 <_ZN9LCDScreenC1Eh>:
	_cols = lcd_cols;
	_rows = lcd_rows;
	_charsize = charsize;
	_backlightval = LCD_BACKLIGHT;
} */
LCDScreen::LCDScreen(uint8_t lcd_addr)
     5a6:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     5a8:	13 82       	std	Z+3, r1	; 0x03
     5aa:	12 82       	std	Z+2, r1	; 0x02
     5ac:	87 e7       	ldi	r24, 0x77	; 119
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	91 83       	std	Z+1, r25	; 0x01
     5b2:	80 83       	st	Z, r24
{
	_addr = lcd_addr;
     5b4:	64 83       	std	Z+4, r22	; 0x04
     5b6:	08 95       	ret

000005b8 <_ZN9LCDScreen13expanderWriteEh>:
void LCDScreen::write4bits(uint8_t value) {
	expanderWrite(value);
	pulseEnable(value);
}

void LCDScreen::expanderWrite(uint8_t _data){
     5b8:	cf 93       	push	r28
     5ba:	c6 2f       	mov	r28, r22
	Wire.beginTransmission(_addr);
     5bc:	fc 01       	movw	r30, r24
     5be:	64 81       	ldd	r22, Z+4	; 0x04
     5c0:	84 e3       	ldi	r24, 0x34	; 52
     5c2:	95 e0       	ldi	r25, 0x05	; 5
     5c4:	0e 94 83 25 	call	0x4b06	; 0x4b06 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((int)(_data) | 0x08);
     5c8:	6c 2f       	mov	r22, r28
     5ca:	68 60       	ori	r22, 0x08	; 8
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     5cc:	e0 91 34 05 	lds	r30, 0x0534	; 0x800534 <Wire>
     5d0:	f0 91 35 05 	lds	r31, 0x0535	; 0x800535 <Wire+0x1>
     5d4:	01 90       	ld	r0, Z+
     5d6:	f0 81       	ld	r31, Z
     5d8:	e0 2d       	mov	r30, r0
     5da:	84 e3       	ldi	r24, 0x34	; 52
     5dc:	95 e0       	ldi	r25, 0x05	; 5
     5de:	09 95       	icall
	Wire.endTransmission();
     5e0:	84 e3       	ldi	r24, 0x34	; 52
     5e2:	95 e0       	ldi	r25, 0x05	; 5
     5e4:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <_ZN7TwoWire15endTransmissionEv>
}
     5e8:	cf 91       	pop	r28
     5ea:	08 95       	ret

000005ec <_ZN9LCDScreen11pulseEnableEh>:

void LCDScreen::pulseEnable(uint8_t _data){
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	cf 93       	push	r28
     5f2:	8c 01       	movw	r16, r24
     5f4:	c6 2f       	mov	r28, r22
	expanderWrite(_data | En);	// En high
     5f6:	64 60       	ori	r22, 0x04	; 4
     5f8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN9LCDScreen13expanderWriteEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5fc:	85 e0       	ldi	r24, 0x05	; 5
     5fe:	8a 95       	dec	r24
     600:	f1 f7       	brne	.-4      	; 0x5fe <_ZN9LCDScreen11pulseEnableEh+0x12>
     602:	00 00       	nop
	_delay_us(1);		// enable pulse must be >450ns

	expanderWrite(_data & ~En);	// En low
     604:	6c 2f       	mov	r22, r28
     606:	6b 7f       	andi	r22, 0xFB	; 251
     608:	c8 01       	movw	r24, r16
     60a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN9LCDScreen13expanderWriteEh>
     60e:	87 ec       	ldi	r24, 0xC7	; 199
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	01 97       	sbiw	r24, 0x01	; 1
     614:	f1 f7       	brne	.-4      	; 0x612 <_ZN9LCDScreen11pulseEnableEh+0x26>
     616:	00 c0       	rjmp	.+0      	; 0x618 <_ZN9LCDScreen11pulseEnableEh+0x2c>
     618:	00 00       	nop
	_delay_us(50);		// commands need > 37us to settle
}
     61a:	cf 91       	pop	r28
     61c:	1f 91       	pop	r17
     61e:	0f 91       	pop	r16
     620:	08 95       	ret

00000622 <_ZN9LCDScreen10write4bitsEh>:
	uint8_t lownib=(value<<4)&0xf0;
	write4bits((highnib)|mode);
	write4bits((lownib)|mode);
}

void LCDScreen::write4bits(uint8_t value) {
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	ec 01       	movw	r28, r24
     62a:	16 2f       	mov	r17, r22
	expanderWrite(value);
     62c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN9LCDScreen13expanderWriteEh>
	pulseEnable(value);
     630:	61 2f       	mov	r22, r17
     632:	ce 01       	movw	r24, r28
     634:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN9LCDScreen11pulseEnableEh>
}
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	08 95       	ret

00000640 <_ZN9LCDScreen4sendEhh>:


/************ low level data pushing commands **********/

// write either command or data
void LCDScreen::send(uint8_t value, uint8_t mode) {
     640:	ff 92       	push	r15
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	8c 01       	movw	r16, r24
     64c:	f4 2e       	mov	r15, r20
	uint8_t highnib=value&0xf0;
     64e:	86 2f       	mov	r24, r22
     650:	80 7f       	andi	r24, 0xF0	; 240
	uint8_t lownib=(value<<4)&0xf0;
     652:	90 e1       	ldi	r25, 0x10	; 16
     654:	69 9f       	mul	r22, r25
     656:	e0 01       	movw	r28, r0
     658:	11 24       	eor	r1, r1
	write4bits((highnib)|mode);
     65a:	68 2f       	mov	r22, r24
     65c:	64 2b       	or	r22, r20
     65e:	c8 01       	movw	r24, r16
     660:	0e 94 11 03 	call	0x622	; 0x622 <_ZN9LCDScreen10write4bitsEh>
	write4bits((lownib)|mode);
     664:	6c 2f       	mov	r22, r28
     666:	6f 29       	or	r22, r15
     668:	c8 01       	movw	r24, r16
     66a:	0e 94 11 03 	call	0x622	; 0x622 <_ZN9LCDScreen10write4bitsEh>
}
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	0f 91       	pop	r16
     676:	ff 90       	pop	r15
     678:	08 95       	ret

0000067a <_ZN9LCDScreen5clearEv>:
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	61 e0       	ldi	r22, 0x01	; 1
     67e:	0e 94 20 03 	call	0x640	; 0x640 <_ZN9LCDScreen4sendEhh>
     682:	8f e3       	ldi	r24, 0x3F	; 63
     684:	9f e1       	ldi	r25, 0x1F	; 31
     686:	01 97       	sbiw	r24, 0x01	; 1
     688:	f1 f7       	brne	.-4      	; 0x686 <_ZN9LCDScreen5clearEv+0xc>
     68a:	00 c0       	rjmp	.+0      	; 0x68c <_ZN9LCDScreen5clearEv+0x12>
     68c:	00 00       	nop
     68e:	08 95       	ret

00000690 <_ZN9LCDScreen4homeEv>:
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	62 e0       	ldi	r22, 0x02	; 2
     694:	0e 94 20 03 	call	0x640	; 0x640 <_ZN9LCDScreen4sendEhh>
     698:	8f e3       	ldi	r24, 0x3F	; 63
     69a:	9f e1       	ldi	r25, 0x1F	; 31
     69c:	01 97       	sbiw	r24, 0x01	; 1
     69e:	f1 f7       	brne	.-4      	; 0x69c <_ZN9LCDScreen4homeEv+0xc>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <_ZN9LCDScreen4homeEv+0x12>
     6a2:	00 00       	nop
     6a4:	08 95       	ret

000006a6 <_ZN9LCDScreen9setCursorEhh>:
void LCDScreen::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	_delay_us(2000);  // this command takes a long time!
} 

void LCDScreen::setCursor(uint8_t col, uint8_t row){
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	cd b7       	in	r28, 0x3d	; 61
     6ac:	de b7       	in	r29, 0x3e	; 62
     6ae:	28 97       	sbiw	r28, 0x08	; 8
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	f8 94       	cli
     6b4:	de bf       	out	0x3e, r29	; 62
     6b6:	0f be       	out	0x3f, r0	; 63
     6b8:	cd bf       	out	0x3d, r28	; 61
     6ba:	9c 01       	movw	r18, r24
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
     6bc:	98 e0       	ldi	r25, 0x08	; 8
     6be:	ed e0       	ldi	r30, 0x0D	; 13
     6c0:	f1 e0       	ldi	r31, 0x01	; 1
     6c2:	de 01       	movw	r26, r28
     6c4:	11 96       	adiw	r26, 0x01	; 1
     6c6:	01 90       	ld	r0, Z+
     6c8:	0d 92       	st	X+, r0
     6ca:	9a 95       	dec	r25
     6cc:	e1 f7       	brne	.-8      	; 0x6c6 <_ZN9LCDScreen9setCursorEhh+0x20>
	if (row > 2) {
     6ce:	43 30       	cpi	r20, 0x03	; 3
     6d0:	08 f0       	brcs	.+2      	; 0x6d4 <_ZN9LCDScreen9setCursorEhh+0x2e>
		row = 1;    // we count rows starting w/0
     6d2:	41 e0       	ldi	r20, 0x01	; 1
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
     6d4:	e4 2f       	mov	r30, r20
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	ee 0f       	add	r30, r30
     6da:	ff 1f       	adc	r31, r31
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	8c 0f       	add	r24, r28
     6e2:	9d 1f       	adc	r25, r29
     6e4:	e8 0f       	add	r30, r24
     6e6:	f9 1f       	adc	r31, r25
     6e8:	90 81       	ld	r25, Z
     6ea:	69 0f       	add	r22, r25
     6ec:	60 68       	ori	r22, 0x80	; 128
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
     6ee:	40 e0       	ldi	r20, 0x00	; 0
     6f0:	c9 01       	movw	r24, r18
     6f2:	0e 94 20 03 	call	0x640	; 0x640 <_ZN9LCDScreen4sendEhh>
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (row > 2) {
		row = 1;    // we count rows starting w/0
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
}
     6f6:	28 96       	adiw	r28, 0x08	; 8
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	08 95       	ret

00000708 <_ZN9LCDScreen7displayEv>:


void LCDScreen::display() {
	_displaycontrol |= LCD_DISPLAYON;
     708:	fc 01       	movw	r30, r24
     70a:	66 81       	ldd	r22, Z+6	; 0x06
     70c:	26 2f       	mov	r18, r22
     70e:	24 60       	ori	r18, 0x04	; 4
     710:	26 83       	std	Z+6, r18	; 0x06
	command(LCD_DISPLAYCONTROL | _displaycontrol);
     712:	6c 60       	ori	r22, 0x0C	; 12
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
     714:	40 e0       	ldi	r20, 0x00	; 0
     716:	0e 94 20 03 	call	0x640	; 0x640 <_ZN9LCDScreen4sendEhh>
     71a:	08 95       	ret

0000071c <_ZN9LCDScreen5writeEh>:
}

inline size_t LCDScreen::write(uint8_t value) {
	send(value, Rs);
     71c:	41 e0       	ldi	r20, 0x01	; 1
     71e:	0e 94 20 03 	call	0x640	; 0x640 <_ZN9LCDScreen4sendEhh>
	return 1;
}
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	08 95       	ret

00000728 <_ZN9LCDScreen5beginEv>:
} */
LCDScreen::LCDScreen(uint8_t lcd_addr)
{
	_addr = lcd_addr;
}
void LCDScreen::begin() {
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	ec 01       	movw	r28, r24
	Wire.begin();
     72e:	84 e3       	ldi	r24, 0x34	; 52
     730:	95 e0       	ldi	r25, 0x05	; 5
     732:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	_displayfunction |= LCD_2LINE;
     736:	88 e0       	ldi	r24, 0x08	; 8
     738:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     73a:	2f ef       	ldi	r18, 0xFF	; 255
     73c:	80 e7       	ldi	r24, 0x70	; 112
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	21 50       	subi	r18, 0x01	; 1
     742:	80 40       	sbci	r24, 0x00	; 0
     744:	90 40       	sbci	r25, 0x00	; 0
     746:	e1 f7       	brne	.-8      	; 0x740 <_ZN9LCDScreen5beginEv+0x18>
     748:	00 c0       	rjmp	.+0      	; 0x74a <_ZN9LCDScreen5beginEv+0x22>
     74a:	00 00       	nop
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	_delay_ms(50);

	// Now we pull both RS and R/W low to begin commands
	expanderWrite(0x08);	// reset expanderand turn backlight off (Bit 8 =1)
     74c:	68 e0       	ldi	r22, 0x08	; 8
     74e:	ce 01       	movw	r24, r28
     750:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN9LCDScreen13expanderWriteEh>
     754:	2f ef       	ldi	r18, 0xFF	; 255
     756:	83 ed       	ldi	r24, 0xD3	; 211
     758:	90 e3       	ldi	r25, 0x30	; 48
     75a:	21 50       	subi	r18, 0x01	; 1
     75c:	80 40       	sbci	r24, 0x00	; 0
     75e:	90 40       	sbci	r25, 0x00	; 0
     760:	e1 f7       	brne	.-8      	; 0x75a <_ZN9LCDScreen5beginEv+0x32>
     762:	00 c0       	rjmp	.+0      	; 0x764 <_ZN9LCDScreen5beginEv+0x3c>
     764:	00 00       	nop
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
	write4bits(0x03 << 4);
     766:	60 e3       	ldi	r22, 0x30	; 48
     768:	ce 01       	movw	r24, r28
     76a:	0e 94 11 03 	call	0x622	; 0x622 <_ZN9LCDScreen10write4bitsEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     76e:	8f e4       	ldi	r24, 0x4F	; 79
     770:	96 e4       	ldi	r25, 0x46	; 70
     772:	01 97       	sbiw	r24, 0x01	; 1
     774:	f1 f7       	brne	.-4      	; 0x772 <_ZN9LCDScreen5beginEv+0x4a>
     776:	00 c0       	rjmp	.+0      	; 0x778 <_ZN9LCDScreen5beginEv+0x50>
     778:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms

	// second try
	write4bits(0x03 << 4);
     77a:	60 e3       	ldi	r22, 0x30	; 48
     77c:	ce 01       	movw	r24, r28
     77e:	0e 94 11 03 	call	0x622	; 0x622 <_ZN9LCDScreen10write4bitsEh>
     782:	8f e4       	ldi	r24, 0x4F	; 79
     784:	96 e4       	ldi	r25, 0x46	; 70
     786:	01 97       	sbiw	r24, 0x01	; 1
     788:	f1 f7       	brne	.-4      	; 0x786 <_ZN9LCDScreen5beginEv+0x5e>
     78a:	00 c0       	rjmp	.+0      	; 0x78c <_ZN9LCDScreen5beginEv+0x64>
     78c:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms

	// third go!
	write4bits(0x03 << 4);
     78e:	60 e3       	ldi	r22, 0x30	; 48
     790:	ce 01       	movw	r24, r28
     792:	0e 94 11 03 	call	0x622	; 0x622 <_ZN9LCDScreen10write4bitsEh>
     796:	87 e5       	ldi	r24, 0x57	; 87
     798:	92 e0       	ldi	r25, 0x02	; 2
     79a:	01 97       	sbiw	r24, 0x01	; 1
     79c:	f1 f7       	brne	.-4      	; 0x79a <_ZN9LCDScreen5beginEv+0x72>
     79e:	00 c0       	rjmp	.+0      	; 0x7a0 <_ZN9LCDScreen5beginEv+0x78>
     7a0:	00 00       	nop
	_delay_us(150);

	// finally, set to 4-bit interface
	write4bits(0x02 << 4);
     7a2:	60 e2       	ldi	r22, 0x20	; 32
     7a4:	ce 01       	movw	r24, r28
     7a6:	0e 94 11 03 	call	0x622	; 0x622 <_ZN9LCDScreen10write4bitsEh>

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);
     7aa:	6d 81       	ldd	r22, Y+5	; 0x05
     7ac:	60 62       	ori	r22, 0x20	; 32
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	ce 01       	movw	r24, r28
     7b2:	0e 94 20 03 	call	0x640	; 0x640 <_ZN9LCDScreen4sendEhh>

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);

	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
     7b6:	84 e0       	ldi	r24, 0x04	; 4
     7b8:	8e 83       	std	Y+6, r24	; 0x06
	display();
     7ba:	ce 01       	movw	r24, r28
     7bc:	0e 94 84 03 	call	0x708	; 0x708 <_ZN9LCDScreen7displayEv>

	// clear it off
	clear();
     7c0:	ce 01       	movw	r24, r28
     7c2:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN9LCDScreen5clearEv>

	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     7c6:	82 e0       	ldi	r24, 0x02	; 2
     7c8:	8f 83       	std	Y+7, r24	; 0x07
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
     7ca:	40 e0       	ldi	r20, 0x00	; 0
     7cc:	66 e0       	ldi	r22, 0x06	; 6
     7ce:	ce 01       	movw	r24, r28
     7d0:	0e 94 20 03 	call	0x640	; 0x640 <_ZN9LCDScreen4sendEhh>
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;

	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);

	home();
     7d4:	ce 01       	movw	r24, r28
     7d6:	0e 94 48 03 	call	0x690	; 0x690 <_ZN9LCDScreen4homeEv>
}
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	08 95       	ret

000007e0 <_Z41__static_initialization_and_destruction_0ii>:
//>--------------------------------< LCD DISPLAY FUNCTIONS >-----------------------------------<
void firstLine(const char *msg) {
  //Prints the string passed in the first line of the LCD display
  lcd.setCursor(0, 0);
  lcd.print(msg);
}
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	41 f4       	brne	.+16     	; 0x7f4 <_Z41__static_initialization_and_destruction_0ii+0x14>
     7e4:	6f 3f       	cpi	r22, 0xFF	; 255
     7e6:	7f 4f       	sbci	r23, 0xFF	; 255
     7e8:	29 f4       	brne	.+10     	; 0x7f4 <_Z41__static_initialization_and_destruction_0ii+0x14>
     7ea:	67 e2       	ldi	r22, 0x27	; 39
     7ec:	85 e4       	ldi	r24, 0x45	; 69
     7ee:	92 e0       	ldi	r25, 0x02	; 2
     7f0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN9LCDScreenC1Eh>
     7f4:	08 95       	ret

000007f6 <_Z8keyInputv>:
     7f6:	89 b1       	in	r24, 0x09	; 9
     7f8:	80 95       	com	r24
     7fa:	61 f1       	breq	.+88     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     7fc:	88 30       	cpi	r24, 0x08	; 8
     7fe:	99 f0       	breq	.+38     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     800:	38 f4       	brcc	.+14     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	d1 f0       	breq	.+52     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     806:	84 30       	cpi	r24, 0x04	; 4
     808:	61 f0       	breq	.+24     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     80a:	81 30       	cpi	r24, 0x01	; 1
     80c:	a1 f4       	brne	.+40     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     80e:	07 c0       	rjmp	.+14     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     810:	80 34       	cpi	r24, 0x40	; 64
     812:	69 f0       	breq	.+26     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     814:	80 38       	cpi	r24, 0x80	; 128
     816:	69 f0       	breq	.+26     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     818:	80 32       	cpi	r24, 0x20	; 32
     81a:	69 f4       	brne	.+26     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     81c:	06 c0       	rjmp	.+12     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     81e:	8f e5       	ldi	r24, 0x5F	; 95
     820:	0d c0       	rjmp	.+26     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     822:	83 e7       	ldi	r24, 0x73	; 115
     824:	0b c0       	rjmp	.+22     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     826:	8c e3       	ldi	r24, 0x3C	; 60
     828:	09 c0       	rjmp	.+18     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     82a:	80 e7       	ldi	r24, 0x70	; 112
     82c:	07 c0       	rjmp	.+14     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     82e:	8e e3       	ldi	r24, 0x3E	; 62
     830:	05 c0       	rjmp	.+10     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     832:	84 e6       	ldi	r24, 0x64	; 100
     834:	03 c0       	rjmp	.+6      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	01 c0       	rjmp	.+2      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     83a:	8a e2       	ldi	r24, 0x2A	; 42
     83c:	2f ef       	ldi	r18, 0xFF	; 255
     83e:	35 ea       	ldi	r19, 0xA5	; 165
     840:	9e e0       	ldi	r25, 0x0E	; 14
     842:	21 50       	subi	r18, 0x01	; 1
     844:	30 40       	sbci	r19, 0x00	; 0
     846:	90 40       	sbci	r25, 0x00	; 0
     848:	e1 f7       	brne	.-8      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     84a:	00 c0       	rjmp	.+0      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     84c:	00 00       	nop
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	9b b9       	out	0x0b, r25	; 11
     852:	08 95       	ret
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	08 95       	ret

00000858 <_Z10clrDisplayPKc>:

void clrDisplay(const char *msg) {
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	ec 01       	movw	r28, r24
  //Clears the LCD and displays the msg in first line
  lcd.clear();
     85e:	85 e4       	ldi	r24, 0x45	; 69
     860:	92 e0       	ldi	r25, 0x02	; 2
     862:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN9LCDScreen5clearEv>
  lcd.setCursor(0, 0);
     866:	40 e0       	ldi	r20, 0x00	; 0
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	85 e4       	ldi	r24, 0x45	; 69
     86c:	92 e0       	ldi	r25, 0x02	; 2
     86e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <_ZN9LCDScreen9setCursorEhh>
  lcd.print(msg);
     872:	be 01       	movw	r22, r28
     874:	85 e4       	ldi	r24, 0x45	; 69
     876:	92 e0       	ldi	r25, 0x02	; 2
     878:	0e 94 91 01 	call	0x322	; 0x322 <_ZN5Print5printEPKc>
}
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	08 95       	ret

00000882 <_Z10secondLinePKc>:

void secondLine(const char *msg) {
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	ec 01       	movw	r28, r24
  //Prints the string passed in the second line of the LCD display
  lcd.setCursor(0, 1);
     888:	41 e0       	ldi	r20, 0x01	; 1
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	85 e4       	ldi	r24, 0x45	; 69
     88e:	92 e0       	ldi	r25, 0x02	; 2
     890:	0e 94 53 03 	call	0x6a6	; 0x6a6 <_ZN9LCDScreen9setCursorEhh>
  lcd.print(msg);
     894:	be 01       	movw	r22, r28
     896:	85 e4       	ldi	r24, 0x45	; 69
     898:	92 e0       	ldi	r25, 0x02	; 2
     89a:	0e 94 91 01 	call	0x322	; 0x322 <_ZN5Print5printEPKc>
}
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <_Z12getTrackListv>:
}
//END OF RECORD AND PLAY FUNCTIONS

//>--------------------------------------< FILE HANDLING FUNCTIONS >--------------------------------------<

void getTrackList() {
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     This function checks for files and make a list of available files
     Program only accept 15 tracks
     counts the number of files
  */
  char ASCIIcount = 65;
  files = 0;
     8a8:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <files>
  
  //fname_temp = String(ASCIIcount) + ".WAV";
  //setFileName(ASCIIcount,"",".WAV");
  fname_temp[0] = ASCIIcount;
     8ac:	81 e4       	ldi	r24, 0x41	; 65
     8ae:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <fname_temp>
  
  uint8_t arrIndex = 0;
     8b2:	c0 e0       	ldi	r28, 0x00	; 0
  /*
     This function checks for files and make a list of available files
     Program only accept 15 tracks
     counts the number of files
  */
  char ASCIIcount = 65;
     8b4:	d1 e4       	ldi	r29, 0x41	; 65
  //setFileName(ASCIIcount,"",".WAV");
  fname_temp[0] = ASCIIcount;
  
  uint8_t arrIndex = 0;
  while (true) {
    if (arrIndex == maxFiles || ASCIIcount == 91) {
     8b6:	cf 30       	cpi	r28, 0x0F	; 15
     8b8:	d9 f0       	breq	.+54     	; 0x8f0 <_Z12getTrackListv+0x4c>
     8ba:	db 35       	cpi	r29, 0x5B	; 91
     8bc:	c9 f0       	breq	.+50     	; 0x8f0 <_Z12getTrackListv+0x4c>
      break;
    }
    if (SD.exists(fname_temp)) {
     8be:	6d e4       	ldi	r22, 0x4D	; 77
     8c0:	72 e0       	ldi	r23, 0x02	; 2
     8c2:	87 e6       	ldi	r24, 0x67	; 103
     8c4:	92 e0       	ldi	r25, 0x02	; 2
     8c6:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <_ZN5SDLib7SDClass6existsEPKc>
     8ca:	88 23       	and	r24, r24
     8cc:	69 f0       	breq	.+26     	; 0x8e8 <_Z12getTrackListv+0x44>
      tracks[arrIndex++] = fname_temp[0];
     8ce:	ec 2f       	mov	r30, r28
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <fname_temp>
     8d6:	ea 5a       	subi	r30, 0xAA	; 170
     8d8:	fd 4f       	sbci	r31, 0xFD	; 253
     8da:	80 83       	st	Z, r24
      files++;
     8dc:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <files>
     8e0:	8f 5f       	subi	r24, 0xFF	; 255
     8e2:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <files>
  while (true) {
    if (arrIndex == maxFiles || ASCIIcount == 91) {
      break;
    }
    if (SD.exists(fname_temp)) {
      tracks[arrIndex++] = fname_temp[0];
     8e6:	cf 5f       	subi	r28, 0xFF	; 255
      files++;
    }
    //fname_temp = String(++ASCIIcount) + ".WAV";
	//setFileName(++ASCIIcount,"",".WAV");
	fname_temp[0] = ++ASCIIcount;
     8e8:	df 5f       	subi	r29, 0xFF	; 255
     8ea:	d0 93 4d 02 	sts	0x024D, r29	; 0x80024d <fname_temp>
  //fname_temp = String(ASCIIcount) + ".WAV";
  //setFileName(ASCIIcount,"",".WAV");
  fname_temp[0] = ASCIIcount;
  
  uint8_t arrIndex = 0;
  while (true) {
     8ee:	e3 cf       	rjmp	.-58     	; 0x8b6 <_Z12getTrackListv+0x12>
    }
    //fname_temp = String(++ASCIIcount) + ".WAV";
	//setFileName(++ASCIIcount,"",".WAV");
	fname_temp[0] = ++ASCIIcount;
  }
  for (uint8_t i = arrIndex; i < maxFiles; i++) {
     8f0:	cf 30       	cpi	r28, 0x0F	; 15
     8f2:	40 f4       	brcc	.+16     	; 0x904 <__stack+0x5>
    tracks[i] = '_';
     8f4:	ec 2f       	mov	r30, r28
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	ea 5a       	subi	r30, 0xAA	; 170
     8fa:	fd 4f       	sbci	r31, 0xFD	; 253
     8fc:	8f e5       	ldi	r24, 0x5F	; 95
     8fe:	80 83       	st	Z, r24
    }
    //fname_temp = String(++ASCIIcount) + ".WAV";
	//setFileName(++ASCIIcount,"",".WAV");
	fname_temp[0] = ++ASCIIcount;
  }
  for (uint8_t i = arrIndex; i < maxFiles; i++) {
     900:	cf 5f       	subi	r28, 0xFF	; 255
     902:	f6 cf       	rjmp	.-20     	; 0x8f0 <_Z12getTrackListv+0x4c>
    tracks[i] = '_';
  }
}
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <_Z9nextTrackv>:

void nextTrack() {
  /*
     Checks tracks in order and returns the next track
  */
  fcount++;
     90a:	e0 91 54 02 	lds	r30, 0x0254	; 0x800254 <fcount>
     90e:	ef 5f       	subi	r30, 0xFF	; 255
     910:	e0 93 54 02 	sts	0x0254, r30	; 0x800254 <fcount>
  if (tracks[fcount] == '_') {
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	ea 5a       	subi	r30, 0xAA	; 170
     918:	fd 4f       	sbci	r31, 0xFD	; 253
     91a:	80 81       	ld	r24, Z
     91c:	8f 35       	cpi	r24, 0x5F	; 95
     91e:	11 f4       	brne	.+4      	; 0x924 <_Z9nextTrackv+0x1a>
    fcount = 0;
     920:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <fcount>
  }
  //fname_temp = String(tracks[fcount]) + ".WAV";
  //setFileName(tracks[fcount],"",".WAV");
  fname_temp[0] = tracks[fcount];
     924:	e0 91 54 02 	lds	r30, 0x0254	; 0x800254 <fcount>
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	ea 5a       	subi	r30, 0xAA	; 170
     92c:	fd 4f       	sbci	r31, 0xFD	; 253
     92e:	80 81       	ld	r24, Z
     930:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <fname_temp>
     934:	08 95       	ret

00000936 <_Z13previousTrackv>:

void previousTrack() {
  /*
     Checks tracks in order and returns the previous track
  */
  if (fcount == 0) {
     936:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <fcount>
     93a:	81 11       	cpse	r24, r1
     93c:	06 c0       	rjmp	.+12     	; 0x94a <_Z13previousTrackv+0x14>
    fcount = files - 1;
     93e:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <files>
     942:	81 50       	subi	r24, 0x01	; 1
     944:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <fcount>
     948:	03 c0       	rjmp	.+6      	; 0x950 <_Z13previousTrackv+0x1a>
  }
  else
  {
    fcount--;
     94a:	81 50       	subi	r24, 0x01	; 1
     94c:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <fcount>
  }
  //fname_temp = String(tracks[fcount]) + ".WAV";
  //setFileName(tracks[fcount],"",".WAV");
  fname_temp[0] = tracks[fcount];
     950:	e0 91 54 02 	lds	r30, 0x0254	; 0x800254 <fcount>
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	ea 5a       	subi	r30, 0xAA	; 170
     958:	fd 4f       	sbci	r31, 0xFD	; 253
     95a:	80 81       	ld	r24, Z
     95c:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <fname_temp>
     960:	08 95       	ret

00000962 <_Z15checkDuplicatesv>:
  //secondLine(fname_temp);
  //Serial.println(count);
}

void checkDuplicates() {
     962:	cf 93       	push	r28
  /*This function checks if the new file to be made is existing,
    if does it generates a new name for the file*/
  char count = 65;
  //fname_temp = String(count) + ".wav";
  //setFileName(count);
  fname_temp[0] = count;
     964:	81 e4       	ldi	r24, 0x41	; 65
     966:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <fname_temp>

void checkDuplicates() {

  /*This function checks if the new file to be made is existing,
    if does it generates a new name for the file*/
  char count = 65;
     96a:	c1 e4       	ldi	r28, 0x41	; 65
  //fname_temp = String(count) + ".wav";
  //setFileName(count);
  fname_temp[0] = count;
  while (true) {
    if (SD.exists(fname_temp)) {
     96c:	6d e4       	ldi	r22, 0x4D	; 77
     96e:	72 e0       	ldi	r23, 0x02	; 2
     970:	87 e6       	ldi	r24, 0x67	; 103
     972:	92 e0       	ldi	r25, 0x02	; 2
     974:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <_ZN5SDLib7SDClass6existsEPKc>
     978:	88 23       	and	r24, r24
     97a:	21 f0       	breq	.+8      	; 0x984 <_Z15checkDuplicatesv+0x22>
      //fname_temp = String(++count) + ".wav";
	  //setFileName(++count);
	  fname_temp[0] = ++count;
     97c:	cf 5f       	subi	r28, 0xFF	; 255
     97e:	c0 93 4d 02 	sts	0x024D, r28	; 0x80024d <fname_temp>
    if does it generates a new name for the file*/
  char count = 65;
  //fname_temp = String(count) + ".wav";
  //setFileName(count);
  fname_temp[0] = count;
  while (true) {
     982:	f4 cf       	rjmp	.-24     	; 0x96c <_Z15checkDuplicatesv+0xa>
	  fname_temp[0] = ++count;
    } else {
      break;
    }
  }
}
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <_Z12makeWaveFileN5SDLib4FileE>:

//END OF FILE HANDLING FUNCTIONS

//>------------------------------< FUNCTIONS FOR WAVE FILE CREATION >---------------------------------<

void makeWaveFile(File sFile) {
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	cf 93       	push	r28
     98e:	df 93       	push	r29
     990:	cd b7       	in	r28, 0x3d	; 61
     992:	de b7       	in	r29, 0x3e	; 62
     994:	2a 97       	sbiw	r28, 0x0a	; 10
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	de bf       	out	0x3e, r29	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	cd bf       	out	0x3d, r28	; 61
     9a0:	8c 01       	movw	r16, r24
  /*
     This function creates the wave header file required
     All bytes should be in little endian format, except String values
  */

  sFile.write((uint8_t*)"RIFF    WAVEfmt ", 16);//Starting bytes of the wave header file
     9a2:	40 e1       	ldi	r20, 0x10	; 16
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	6f e7       	ldi	r22, 0x7F	; 127
     9a8:	71 e0       	ldi	r23, 0x01	; 1
     9aa:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN5SDLib4File5writeEPKhj>
  uint8_t chunk[] = {16, 0, 0, 0, 1, 0, 1, 0, lower_Byte(sampleRate), higher_Byte(sampleRate)};
     9ae:	8a e0       	ldi	r24, 0x0A	; 10
     9b0:	e5 e1       	ldi	r30, 0x15	; 21
     9b2:	f1 e0       	ldi	r31, 0x01	; 1
     9b4:	de 01       	movw	r26, r28
     9b6:	11 96       	adiw	r26, 0x01	; 1
     9b8:	01 90       	ld	r0, Z+
     9ba:	0d 92       	st	X+, r0
     9bc:	8a 95       	dec	r24
     9be:	e1 f7       	brne	.-8      	; 0x9b8 <_Z12makeWaveFileN5SDLib4FileE+0x30>
     first 4 bytes: size of  previous data chunck
     next 2 bytes: Audio format (1 - PCM)
     next 2 byte: No of channels (Mono = 1, Stereo = 2) (in our case 1)
     last two are the first two bytes of sample rate
  */
  sFile.write((uint8_t*)chunk, 10);
     9c0:	4a e0       	ldi	r20, 0x0A	; 10
     9c2:	50 e0       	ldi	r21, 0x00	; 0
     9c4:	be 01       	movw	r22, r28
     9c6:	6f 5f       	subi	r22, 0xFF	; 255
     9c8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ca:	c8 01       	movw	r24, r16
     9cc:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN5SDLib4File5writeEPKhj>

  chunk[0] = 0; chunk[1] = 0; //end of sample rate bytes
     9d0:	19 82       	std	Y+1, r1	; 0x01
     9d2:	1a 82       	std	Y+2, r1	; 0x02

  //byteRate = (sampleRate/8)*monoStereo*8;
  chunk[2] = lower_Byte(byteRate); chunk[3] = higher_Byte(byteRate); chunk[4] = 0; chunk[5] = 0; // byteRate
     9d4:	80 ed       	ldi	r24, 0xD0	; 208
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	80 e3       	ldi	r24, 0x30	; 48
     9da:	8c 83       	std	Y+4, r24	; 0x04
     9dc:	1d 82       	std	Y+5, r1	; 0x05
     9de:	1e 82       	std	Y+6, r1	; 0x06

  //byte blockAlign = monoStereo * (bps/8);
  //this is always equal to 1 in 8bit PCM mono channel
  chunk[6] = 1; chunk[7] = 0; //BlockAlign
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	8f 83       	std	Y+7, r24	; 0x07
     9e4:	18 86       	std	Y+8, r1	; 0x08

  chunk[8] = 8; chunk[9] = 0; //bits per sample
     9e6:	88 e0       	ldi	r24, 0x08	; 8
     9e8:	89 87       	std	Y+9, r24	; 0x09
     9ea:	1a 86       	std	Y+10, r1	; 0x0a

  sFile.write((uint8_t*)chunk, 10);
     9ec:	4a e0       	ldi	r20, 0x0A	; 10
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	be 01       	movw	r22, r28
     9f2:	6f 5f       	subi	r22, 0xFF	; 255
     9f4:	7f 4f       	sbci	r23, 0xFF	; 255
     9f6:	c8 01       	movw	r24, r16
     9f8:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN5SDLib4File5writeEPKhj>
  sFile.write((uint8_t*)"data    ", 8);
     9fc:	48 e0       	ldi	r20, 0x08	; 8
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	60 e9       	ldi	r22, 0x90	; 144
     a02:	71 e0       	ldi	r23, 0x01	; 1
     a04:	c8 01       	movw	r24, r16
     a06:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN5SDLib4File5writeEPKhj>

}
     a0a:	2a 96       	adiw	r28, 0x0a	; 10
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	f8 94       	cli
     a10:	de bf       	out	0x3e, r29	; 62
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	cd bf       	out	0x3d, r28	; 61
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	08 95       	ret

00000a20 <_Z12finalizeWaveN5SDLib4FileE>:

void finalizeWave(File sFile) {
     a20:	8f 92       	push	r8
     a22:	9f 92       	push	r9
     a24:	af 92       	push	r10
     a26:	bf 92       	push	r11
     a28:	cf 92       	push	r12
     a2a:	df 92       	push	r13
     a2c:	ef 92       	push	r14
     a2e:	ff 92       	push	r15
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	00 d0       	rcall	.+0      	; 0xa3a <_Z12finalizeWaveN5SDLib4FileE+0x1a>
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <_Z12finalizeWaveN5SDLib4FileE+0x1c>
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
     a40:	8c 01       	movw	r16, r24
  /*
     This function finalizes the wave file
  */
  unsigned long fSize = sFile.size();
     a42:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN5SDLib4File4sizeEv>
     a46:	6b 01       	movw	r12, r22
     a48:	7c 01       	movw	r14, r24

  fSize -= 8;
     a4a:	4b 01       	movw	r8, r22
     a4c:	5c 01       	movw	r10, r24
     a4e:	88 e0       	ldi	r24, 0x08	; 8
     a50:	88 1a       	sub	r8, r24
     a52:	91 08       	sbc	r9, r1
     a54:	a1 08       	sbc	r10, r1
     a56:	b1 08       	sbc	r11, r1
  sFile.seek(4);
     a58:	44 e0       	ldi	r20, 0x04	; 4
     a5a:	50 e0       	ldi	r21, 0x00	; 0
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	c8 01       	movw	r24, r16
     a62:	0e 94 1c 0c 	call	0x1838	; 0x1838 <_ZN5SDLib4File4seekEm>
  uint8_t chunk2[4] = {lower_Byte(fSize), higher_Byte(fSize), fSize >> 16, fSize >> 24};
     a66:	89 82       	std	Y+1, r8	; 0x01
     a68:	9a 82       	std	Y+2, r9	; 0x02
     a6a:	ab 82       	std	Y+3, r10	; 0x03
     a6c:	bc 82       	std	Y+4, r11	; 0x04
  sFile.write(chunk2, 4);//Writing chunksize to 5 - 8 bytes in wave file
     a6e:	44 e0       	ldi	r20, 0x04	; 4
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	be 01       	movw	r22, r28
     a74:	6f 5f       	subi	r22, 0xFF	; 255
     a76:	7f 4f       	sbci	r23, 0xFF	; 255
     a78:	c8 01       	movw	r24, r16
     a7a:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN5SDLib4File5writeEPKhj>

  sFile.seek(40);
     a7e:	48 e2       	ldi	r20, 0x28	; 40
     a80:	50 e0       	ldi	r21, 0x00	; 0
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	c8 01       	movw	r24, r16
     a88:	0e 94 1c 0c 	call	0x1838	; 0x1838 <_ZN5SDLib4File4seekEm>
  fSize -= 36 ;
     a8c:	d7 01       	movw	r26, r14
     a8e:	c6 01       	movw	r24, r12
     a90:	8c 97       	sbiw	r24, 0x2c	; 44
     a92:	a1 09       	sbc	r26, r1
     a94:	b1 09       	sbc	r27, r1
  chunk2[0] = lower_Byte(fSize); chunk2[1] = higher_Byte(fSize); chunk2[2] = fSize >> 16; chunk2[3] = fSize >> 24;
     a96:	89 83       	std	Y+1, r24	; 0x01
     a98:	9a 83       	std	Y+2, r25	; 0x02
     a9a:	ab 83       	std	Y+3, r26	; 0x03
     a9c:	bc 83       	std	Y+4, r27	; 0x04
  sFile.write((uint8_t*)chunk2, 4);//Writting num of samples to 41-44 bytes in wave file
     a9e:	44 e0       	ldi	r20, 0x04	; 4
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	be 01       	movw	r22, r28
     aa4:	6f 5f       	subi	r22, 0xFF	; 255
     aa6:	7f 4f       	sbci	r23, 0xFF	; 255
     aa8:	c8 01       	movw	r24, r16
     aaa:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN5SDLib4File5writeEPKhj>
}
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	ff 90       	pop	r15
     ac0:	ef 90       	pop	r14
     ac2:	df 90       	pop	r13
     ac4:	cf 90       	pop	r12
     ac6:	bf 90       	pop	r11
     ac8:	af 90       	pop	r10
     aca:	9f 90       	pop	r9
     acc:	8f 90       	pop	r8
     ace:	08 95       	ret

00000ad0 <_Z13sig_freqShiftPc>:
//END OF WAVE FILE CREATE FUNCTIONS


//>--------------------------------------< FREQUENCY SHIFTING >--------------------------------------<
bool sig_freqShift(char tempName[]) {
     ad0:	ef 92       	push	r14
     ad2:	ff 92       	push	r15
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
     ae0:	c1 58       	subi	r28, 0x81	; 129
     ae2:	d1 09       	sbc	r29, r1
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	cd bf       	out	0x3d, r28	; 61
     aee:	8c 01       	movw	r16, r24
	bool needConvolve;
//"S" + String(fname_temp[0]) + ".bin"
	if (!(SD.exists(tempName))) {
     af0:	bc 01       	movw	r22, r24
     af2:	87 e6       	ldi	r24, 0x67	; 103
     af4:	92 e0       	ldi	r25, 0x02	; 2
     af6:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <_ZN5SDLib7SDClass6existsEPKc>
     afa:	81 11       	cpse	r24, r1
     afc:	76 c0       	rjmp	.+236    	; 0xbea <_Z13sig_freqShiftPc+0x11a>
		needConvolve = true;
		File out = SD.open(tempName, FILE_WRITE);
     afe:	27 e1       	ldi	r18, 0x17	; 23
     b00:	a8 01       	movw	r20, r16
     b02:	67 e6       	ldi	r22, 0x67	; 103
     b04:	72 e0       	ldi	r23, 0x02	; 2
     b06:	ce 01       	movw	r24, r28
     b08:	82 5b       	subi	r24, 0xB2	; 178
     b0a:	9f 4f       	sbci	r25, 0xFF	; 255
     b0c:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <_ZN5SDLib7SDClass4openEPKch>
		File target = SD.open(fname_temp, FILE_READ);
     b10:	21 e0       	ldi	r18, 0x01	; 1
     b12:	4d e4       	ldi	r20, 0x4D	; 77
     b14:	52 e0       	ldi	r21, 0x02	; 2
     b16:	67 e6       	ldi	r22, 0x67	; 103
     b18:	72 e0       	ldi	r23, 0x02	; 2
     b1a:	ce 01       	movw	r24, r28
     b1c:	c3 96       	adiw	r24, 0x33	; 51
     b1e:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <_ZN5SDLib7SDClass4openEPKch>
		target.seek(44);
     b22:	4c e2       	ldi	r20, 0x2C	; 44
     b24:	50 e0       	ldi	r21, 0x00	; 0
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	ce 01       	movw	r24, r28
     b2c:	c3 96       	adiw	r24, 0x33	; 51
     b2e:	0e 94 1c 0c 	call	0x1838	; 0x1838 <_ZN5SDLib4File4seekEm>

		uint8_t buff[bufflen];
		int16_t cosWave12_5[25] = {10, 10, 9, 7, 5, 3, 1, -2, -4, -6, -8, -9, -10, -10, -9, -8, -6, -4, -2, 1, 3, 5, 7, 9, 10};
     b32:	82 e3       	ldi	r24, 0x32	; 50
     b34:	ef e1       	ldi	r30, 0x1F	; 31
     b36:	f1 e0       	ldi	r31, 0x01	; 1
     b38:	de 01       	movw	r26, r28
     b3a:	11 96       	adiw	r26, 0x01	; 1
     b3c:	01 90       	ld	r0, Z+
     b3e:	0d 92       	st	X+, r0
     b40:	8a 95       	dec	r24
     b42:	e1 f7       	brne	.-8      	; 0xb3c <_Z13sig_freqShiftPc+0x6c>
		uint8_t count = 0;
		uint8_t buffCount = 0;
     b44:	e1 2c       	mov	r14, r1
		File target = SD.open(fname_temp, FILE_READ);
		target.seek(44);

		uint8_t buff[bufflen];
		int16_t cosWave12_5[25] = {10, 10, 9, 7, 5, 3, 1, -2, -4, -6, -8, -9, -10, -10, -9, -8, -6, -4, -2, 1, 3, 5, 7, 9, 10};
		uint8_t count = 0;
     b46:	10 e0       	ldi	r17, 0x00	; 0
     b48:	01 c0       	rjmp	.+2      	; 0xb4c <_Z13sig_freqShiftPc+0x7c>
			if (count == 25 )
			{
				count = 0;
			}
			if (buffCount == bufflen) {
				buffCount = 0;
     b4a:	e0 2e       	mov	r14, r16
		uint8_t buff[bufflen];
		int16_t cosWave12_5[25] = {10, 10, 9, 7, 5, 3, 1, -2, -4, -6, -8, -9, -10, -10, -9, -8, -6, -4, -2, 1, 3, 5, 7, 9, 10};
		uint8_t count = 0;
		uint8_t buffCount = 0;

		while (target.available()) {
     b4c:	ce 01       	movw	r24, r28
     b4e:	c3 96       	adiw	r24, 0x33	; 51
     b50:	0e 94 4b 0c 	call	0x1896	; 0x1896 <_ZN5SDLib4File9availableEv>
     b54:	89 2b       	or	r24, r25
     b56:	f1 f1       	breq	.+124    	; 0xbd4 <_Z13sig_freqShiftPc+0x104>

			buff[buffCount++] = (uint8_t)((int)(target.read() - 127) * cosWave12_5[count++] / 10 + 127);
     b58:	01 e0       	ldi	r16, 0x01	; 1
     b5a:	0e 0d       	add	r16, r14
     b5c:	f1 2c       	mov	r15, r1
     b5e:	ce 01       	movw	r24, r28
     b60:	c3 96       	adiw	r24, 0x33	; 51
     b62:	0e 94 65 0b 	call	0x16ca	; 0x16ca <_ZN5SDLib4File4readEv>
     b66:	bc 01       	movw	r22, r24
     b68:	6f 57       	subi	r22, 0x7F	; 127
     b6a:	71 09       	sbc	r23, r1
     b6c:	21 e0       	ldi	r18, 0x01	; 1
     b6e:	21 0f       	add	r18, r17
     b70:	e1 2f       	mov	r30, r17
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	ee 0f       	add	r30, r30
     b76:	ff 1f       	adc	r31, r31
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	8c 0f       	add	r24, r28
     b7e:	9d 1f       	adc	r25, r29
     b80:	e8 0f       	add	r30, r24
     b82:	f9 1f       	adc	r31, r25
     b84:	40 81       	ld	r20, Z
     b86:	51 81       	ldd	r21, Z+1	; 0x01
     b88:	64 9f       	mul	r22, r20
     b8a:	c0 01       	movw	r24, r0
     b8c:	65 9f       	mul	r22, r21
     b8e:	90 0d       	add	r25, r0
     b90:	74 9f       	mul	r23, r20
     b92:	90 0d       	add	r25, r0
     b94:	11 24       	eor	r1, r1
     b96:	6a e0       	ldi	r22, 0x0A	; 10
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <__divmodhi4>
     b9e:	e9 e6       	ldi	r30, 0x69	; 105
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	ec 0f       	add	r30, r28
     ba4:	fd 1f       	adc	r31, r29
     ba6:	ee 0d       	add	r30, r14
     ba8:	ff 1d       	adc	r31, r15
     baa:	61 58       	subi	r22, 0x81	; 129
     bac:	60 83       	st	Z, r22
			if (count == 25 )
     bae:	29 31       	cpi	r18, 0x19	; 25
     bb0:	11 f0       	breq	.+4      	; 0xbb6 <_Z13sig_freqShiftPc+0xe6>
		uint8_t count = 0;
		uint8_t buffCount = 0;

		while (target.available()) {

			buff[buffCount++] = (uint8_t)((int)(target.read() - 127) * cosWave12_5[count++] / 10 + 127);
     bb2:	12 2f       	mov	r17, r18
     bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <_Z13sig_freqShiftPc+0xe8>
			if (count == 25 )
			{
				count = 0;
     bb6:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (buffCount == bufflen) {
     bb8:	09 31       	cpi	r16, 0x19	; 25
     bba:	39 f6       	brne	.-114    	; 0xb4a <_Z13sig_freqShiftPc+0x7a>
				buffCount = 0;
				out.write((uint8_t*)buff, bufflen);
     bbc:	49 e1       	ldi	r20, 0x19	; 25
     bbe:	50 e0       	ldi	r21, 0x00	; 0
     bc0:	be 01       	movw	r22, r28
     bc2:	67 59       	subi	r22, 0x97	; 151
     bc4:	7f 4f       	sbci	r23, 0xFF	; 255
     bc6:	ce 01       	movw	r24, r28
     bc8:	82 5b       	subi	r24, 0xB2	; 178
     bca:	9f 4f       	sbci	r25, 0xFF	; 255
     bcc:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN5SDLib4File5writeEPKhj>
			if (count == 25 )
			{
				count = 0;
			}
			if (buffCount == bufflen) {
				buffCount = 0;
     bd0:	00 e0       	ldi	r16, 0x00	; 0
     bd2:	bb cf       	rjmp	.-138    	; 0xb4a <_Z13sig_freqShiftPc+0x7a>
				out.write((uint8_t*)buff, bufflen);
			}

		}

		out.close();
     bd4:	ce 01       	movw	r24, r28
     bd6:	82 5b       	subi	r24, 0xB2	; 178
     bd8:	9f 4f       	sbci	r25, 0xFF	; 255
     bda:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <_ZN5SDLib4File5closeEv>
		target.close();
     bde:	ce 01       	movw	r24, r28
     be0:	c3 96       	adiw	r24, 0x33	; 51
     be2:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <_ZN5SDLib4File5closeEv>
//>--------------------------------------< FREQUENCY SHIFTING >--------------------------------------<
bool sig_freqShift(char tempName[]) {
	bool needConvolve;
//"S" + String(fname_temp[0]) + ".bin"
	if (!(SD.exists(tempName))) {
		needConvolve = true;
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	01 c0       	rjmp	.+2      	; 0xbec <_Z13sig_freqShiftPc+0x11c>

		out.close();
		target.close();
	}
	else{
		needConvolve = false;
     bea:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	fname_temp[0] = 'S';fname_temp[1] = tracks[fcount];fname_temp[2] = '.';fname_temp[3] = 'W';fname_temp[4] = 'A';fname_temp[5] = 'V';
     bec:	ed e4       	ldi	r30, 0x4D	; 77
     bee:	f2 e0       	ldi	r31, 0x02	; 2
     bf0:	93 e5       	ldi	r25, 0x53	; 83
     bf2:	90 83       	st	Z, r25
     bf4:	a0 91 54 02 	lds	r26, 0x0254	; 0x800254 <fcount>
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	aa 5a       	subi	r26, 0xAA	; 170
     bfc:	bd 4f       	sbci	r27, 0xFD	; 253
     bfe:	9c 91       	ld	r25, X
     c00:	91 83       	std	Z+1, r25	; 0x01
     c02:	9e e2       	ldi	r25, 0x2E	; 46
     c04:	92 83       	std	Z+2, r25	; 0x02
     c06:	97 e5       	ldi	r25, 0x57	; 87
     c08:	93 83       	std	Z+3, r25	; 0x03
     c0a:	91 e4       	ldi	r25, 0x41	; 65
     c0c:	94 83       	std	Z+4, r25	; 0x04
     c0e:	96 e5       	ldi	r25, 0x56	; 86
     c10:	95 83       	std	Z+5, r25	; 0x05

	return needConvolve;
}
     c12:	cf 57       	subi	r28, 0x7F	; 127
     c14:	df 4f       	sbci	r29, 0xFF	; 255
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	cd bf       	out	0x3d, r28	; 61
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	ff 90       	pop	r15
     c2a:	ef 90       	pop	r14
     c2c:	08 95       	ret

00000c2e <_Z8convolvev>:


void convolve() {
     c2e:	4f 92       	push	r4
     c30:	5f 92       	push	r5
     c32:	6f 92       	push	r6
     c34:	7f 92       	push	r7
     c36:	8f 92       	push	r8
     c38:	9f 92       	push	r9
     c3a:	af 92       	push	r10
     c3c:	bf 92       	push	r11
     c3e:	cf 92       	push	r12
     c40:	df 92       	push	r13
     c42:	ef 92       	push	r14
     c44:	ff 92       	push	r15
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
     c52:	cc 5f       	subi	r28, 0xFC	; 252
     c54:	d1 09       	sbc	r29, r1
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	de bf       	out	0x3e, r29	; 62
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	cd bf       	out	0x3d, r28	; 61
			
	if(shift && enhance==0){
     c60:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <shift>
     c64:	88 23       	and	r24, r24
     c66:	09 f4       	brne	.+2      	; 0xc6a <_Z8convolvev+0x3c>
     c68:	94 c1       	rjmp	.+808    	; 0xf92 <_Z8convolvev+0x364>
     c6a:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <enhance>
     c6e:	81 11       	cpse	r24, r1
     c70:	90 c1       	rjmp	.+800    	; 0xf92 <_Z8convolvev+0x364>
		
		char tempName[7] = {'S',tracks[fcount],'.','B','I','N'};
     c72:	fe 01       	movw	r30, r28
     c74:	ee 50       	subi	r30, 0x0E	; 14
     c76:	ff 4f       	sbci	r31, 0xFF	; 255
     c78:	87 e0       	ldi	r24, 0x07	; 7
     c7a:	df 01       	movw	r26, r30
     c7c:	1d 92       	st	X+, r1
     c7e:	8a 95       	dec	r24
     c80:	e9 f7       	brne	.-6      	; 0xc7c <_Z8convolvev+0x4e>
     c82:	83 e5       	ldi	r24, 0x53	; 83
     c84:	80 83       	st	Z, r24
     c86:	8e e2       	ldi	r24, 0x2E	; 46
     c88:	82 83       	std	Z+2, r24	; 0x02
     c8a:	82 e4       	ldi	r24, 0x42	; 66
     c8c:	83 83       	std	Z+3, r24	; 0x03
     c8e:	89 e4       	ldi	r24, 0x49	; 73
     c90:	84 83       	std	Z+4, r24	; 0x04
     c92:	8e e4       	ldi	r24, 0x4E	; 78
     c94:	85 83       	std	Z+5, r24	; 0x05
     c96:	a0 91 54 02 	lds	r26, 0x0254	; 0x800254 <fcount>
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	aa 5a       	subi	r26, 0xAA	; 170
     c9e:	bd 4f       	sbci	r27, 0xFD	; 253
     ca0:	8c 91       	ld	r24, X
     ca2:	81 83       	std	Z+1, r24	; 0x01
		
		if(sig_freqShift(tempName)){
     ca4:	cf 01       	movw	r24, r30
     ca6:	0e 94 68 05 	call	0xad0	; 0xad0 <_Z13sig_freqShiftPc>
     caa:	88 23       	and	r24, r24
     cac:	09 f4       	brne	.+2      	; 0xcb0 <_Z8convolvev+0x82>
     cae:	71 c1       	rjmp	.+738    	; 0xf92 <_Z8convolvev+0x364>
		
			int filter[filterlen] = {0, 1, 5, -4, -48, 920, -48, -4, 5, 1, 0};
     cb0:	86 e1       	ldi	r24, 0x16	; 22
     cb2:	e1 e5       	ldi	r30, 0x51	; 81
     cb4:	f1 e0       	ldi	r31, 0x01	; 1
     cb6:	de 01       	movw	r26, r28
     cb8:	af 52       	subi	r26, 0x2F	; 47
     cba:	bf 4f       	sbci	r27, 0xFF	; 255
     cbc:	01 90       	ld	r0, Z+
     cbe:	0d 92       	st	X+, r0
     cc0:	8a 95       	dec	r24
     cc2:	e1 f7       	brne	.-8      	; 0xcbc <_Z8convolvev+0x8e>
			uint8_t temp_buff[temp_buff_size];
			float temp = 0;
			uint8_t temp_count = 0;

	
			File out = SD.open(fname_temp, FILE_WRITE);
     cc4:	27 e1       	ldi	r18, 0x17	; 23
     cc6:	4d e4       	ldi	r20, 0x4D	; 77
     cc8:	52 e0       	ldi	r21, 0x02	; 2
     cca:	67 e6       	ldi	r22, 0x67	; 103
     ccc:	72 e0       	ldi	r23, 0x02	; 2
     cce:	ce 01       	movw	r24, r28
     cd0:	8a 54       	subi	r24, 0x4A	; 74
     cd2:	9f 4f       	sbci	r25, 0xFF	; 255
     cd4:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <_ZN5SDLib7SDClass4openEPKch>
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
     cd8:	c8 54       	subi	r28, 0x48	; 72
     cda:	df 4f       	sbci	r29, 0xFF	; 255
     cdc:	88 81       	ld	r24, Y
     cde:	99 81       	ldd	r25, Y+1	; 0x01
     ce0:	c8 5b       	subi	r28, 0xB8	; 184
     ce2:	d0 40       	sbci	r29, 0x00	; 0
     ce4:	9f 8f       	std	Y+31, r25	; 0x1f
     ce6:	8e 8f       	std	Y+30, r24	; 0x1e
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
     ce8:	c6 54       	subi	r28, 0x46	; 70
     cea:	df 4f       	sbci	r29, 0xFF	; 255
     cec:	88 81       	ld	r24, Y
     cee:	99 81       	ldd	r25, Y+1	; 0x01
     cf0:	aa 81       	ldd	r26, Y+2	; 0x02
     cf2:	bb 81       	ldd	r27, Y+3	; 0x03
     cf4:	ca 5b       	subi	r28, 0xBA	; 186
     cf6:	d0 40       	sbci	r29, 0x00	; 0
     cf8:	88 a3       	std	Y+32, r24	; 0x20
     cfa:	99 a3       	std	Y+33, r25	; 0x21
     cfc:	aa a3       	std	Y+34, r26	; 0x22
     cfe:	bb a3       	std	Y+35, r27	; 0x23
     d00:	c2 54       	subi	r28, 0x42	; 66
     d02:	df 4f       	sbci	r29, 0xFF	; 255
     d04:	88 81       	ld	r24, Y
     d06:	99 81       	ldd	r25, Y+1	; 0x01
     d08:	aa 81       	ldd	r26, Y+2	; 0x02
     d0a:	bb 81       	ldd	r27, Y+3	; 0x03
     d0c:	ce 5b       	subi	r28, 0xBE	; 190
     d0e:	d0 40       	sbci	r29, 0x00	; 0
     d10:	8c a3       	std	Y+36, r24	; 0x24
     d12:	9d a3       	std	Y+37, r25	; 0x25
     d14:	ae a3       	std	Y+38, r26	; 0x26
     d16:	bf a3       	std	Y+39, r27	; 0x27
#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT | O_APPEND)

namespace SDLib {

  class File : public Stream {
     d18:	8d e0       	ldi	r24, 0x0D	; 13
     d1a:	92 e0       	ldi	r25, 0x02	; 2
     d1c:	9d 8f       	std	Y+29, r25	; 0x1d
     d1e:	8c 8f       	std	Y+28, r24	; 0x1c
     d20:	8d e0       	ldi	r24, 0x0D	; 13
     d22:	e6 eb       	ldi	r30, 0xB6	; 182
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	ec 0f       	add	r30, r28
     d28:	fd 1f       	adc	r31, r29
     d2a:	3c 96       	adiw	r30, 0x0c	; 12
     d2c:	de 01       	movw	r26, r28
     d2e:	98 96       	adiw	r26, 0x28	; 40
     d30:	01 90       	ld	r0, Z+
     d32:	0d 92       	st	X+, r0
     d34:	8a 95       	dec	r24
     d36:	e1 f7       	brne	.-8      	; 0xd30 <_Z8convolvev+0x102>
     d38:	c1 53       	subi	r28, 0x31	; 49
     d3a:	df 4f       	sbci	r29, 0xFF	; 255
     d3c:	88 81       	ld	r24, Y
     d3e:	99 81       	ldd	r25, Y+1	; 0x01
     d40:	cf 5c       	subi	r28, 0xCF	; 207
     d42:	d0 40       	sbci	r29, 0x00	; 0
     d44:	9e ab       	std	Y+54, r25	; 0x36
     d46:	8d ab       	std	Y+53, r24	; 0x35
			makeWaveFile(out);
     d48:	ce 01       	movw	r24, r28
     d4a:	4c 96       	adiw	r24, 0x1c	; 28
     d4c:	0e 94 c4 04 	call	0x988	; 0x988 <_Z12makeWaveFileN5SDLib4FileE>
			File target = SD.open(tempName, FILE_READ);
     d50:	21 e0       	ldi	r18, 0x01	; 1
     d52:	ae 01       	movw	r20, r28
     d54:	4e 50       	subi	r20, 0x0E	; 14
     d56:	5f 4f       	sbci	r21, 0xFF	; 255
     d58:	67 e6       	ldi	r22, 0x67	; 103
     d5a:	72 e0       	ldi	r23, 0x02	; 2
     d5c:	ce 01       	movw	r24, r28
     d5e:	85 56       	subi	r24, 0x65	; 101
     d60:	9f 4f       	sbci	r25, 0xFF	; 255
     d62:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <_ZN5SDLib7SDClass4openEPKch>

			unsigned long fSize = target.size();
     d66:	ce 01       	movw	r24, r28
     d68:	85 56       	subi	r24, 0x65	; 101
     d6a:	9f 4f       	sbci	r25, 0xFF	; 255
     d6c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN5SDLib4File4sizeEv>
     d70:	2b 01       	movw	r4, r22
     d72:	3c 01       	movw	r6, r24

			target.read(signal_in, filterlen);
     d74:	4b e0       	ldi	r20, 0x0B	; 11
     d76:	50 e0       	ldi	r21, 0x00	; 0
     d78:	be 01       	movw	r22, r28
     d7a:	69 51       	subi	r22, 0x19	; 25
     d7c:	7f 4f       	sbci	r23, 0xFF	; 255
     d7e:	ce 01       	movw	r24, r28
     d80:	85 56       	subi	r24, 0x65	; 101
     d82:	9f 4f       	sbci	r25, 0xFF	; 255
     d84:	0e 94 11 0c 	call	0x1822	; 0x1822 <_ZN5SDLib4File4readEPvj>
			target.read(temp_buff, temp_buff_size);
     d88:	44 e6       	ldi	r20, 0x64	; 100
     d8a:	50 e0       	ldi	r21, 0x00	; 0
     d8c:	be 01       	movw	r22, r28
     d8e:	69 5c       	subi	r22, 0xC9	; 201
     d90:	7f 4f       	sbci	r23, 0xFF	; 255
     d92:	ce 01       	movw	r24, r28
     d94:	85 56       	subi	r24, 0x65	; 101
     d96:	9f 4f       	sbci	r25, 0xFF	; 255
     d98:	0e 94 11 0c 	call	0x1822	; 0x1822 <_ZN5SDLib4File4readEPvj>
			int filter[filterlen] = {0, 1, 5, -4, -48, 920, -48, -4, 5, 1, 0};
	
			uint8_t signal_in[filterlen];
			uint8_t temp_buff[temp_buff_size];
			float temp = 0;
			uint8_t temp_count = 0;
     d9c:	e1 2c       	mov	r14, r1
			unsigned long fSize = target.size();

			target.read(signal_in, filterlen);
			target.read(temp_buff, temp_buff_size);

			while (fSize) {
     d9e:	41 14       	cp	r4, r1
     da0:	51 04       	cpc	r5, r1
     da2:	61 04       	cpc	r6, r1
     da4:	71 04       	cpc	r7, r1
     da6:	09 f4       	brne	.+2      	; 0xdaa <_Z8convolvev+0x17c>
     da8:	ae c0       	rjmp	.+348    	; 0xf06 <_Z8convolvev+0x2d8>
				//t = micros();
				if (temp_count == temp_buff_size) {
     daa:	b4 e6       	ldi	r27, 0x64	; 100
     dac:	eb 12       	cpse	r14, r27
     dae:	0b c0       	rjmp	.+22     	; 0xdc6 <_Z8convolvev+0x198>
					target.read(temp_buff, temp_buff_size);
     db0:	44 e6       	ldi	r20, 0x64	; 100
     db2:	50 e0       	ldi	r21, 0x00	; 0
     db4:	be 01       	movw	r22, r28
     db6:	69 5c       	subi	r22, 0xC9	; 201
     db8:	7f 4f       	sbci	r23, 0xFF	; 255
     dba:	ce 01       	movw	r24, r28
     dbc:	85 56       	subi	r24, 0x65	; 101
     dbe:	9f 4f       	sbci	r25, 0xFF	; 255
     dc0:	0e 94 11 0c 	call	0x1822	; 0x1822 <_ZN5SDLib4File4readEPvj>
					temp_count = 0;
     dc4:	e1 2c       	mov	r14, r1
				}
				temp = 127;
				//temp_ = 0;

				for (uint8_t i = 0; i < filterlen - 1; i++) {
     dc6:	f1 2c       	mov	r15, r1
				//t = micros();
				if (temp_count == temp_buff_size) {
					target.read(temp_buff, temp_buff_size);
					temp_count = 0;
				}
				temp = 127;
     dc8:	0f 2e       	mov	r0, r31
     dca:	81 2c       	mov	r8, r1
     dcc:	91 2c       	mov	r9, r1
     dce:	fe ef       	ldi	r31, 0xFE	; 254
     dd0:	af 2e       	mov	r10, r31
     dd2:	f2 e4       	ldi	r31, 0x42	; 66
     dd4:	bf 2e       	mov	r11, r31
     dd6:	f0 2d       	mov	r31, r0
				//temp_ = 0;

				for (uint8_t i = 0; i < filterlen - 1; i++) {
     dd8:	e9 e0       	ldi	r30, 0x09	; 9
     dda:	ef 15       	cp	r30, r15
     ddc:	08 f4       	brcc	.+2      	; 0xde0 <_Z8convolvev+0x1b2>
     dde:	56 c0       	rjmp	.+172    	; 0xe8c <_Z8convolvev+0x25e>
					temp += ((float(signal_in[i]) - 127) * filter[i] / 1000);//570
     de0:	0f 2d       	mov	r16, r15
     de2:	10 e0       	ldi	r17, 0x00	; 0
     de4:	0f 2e       	mov	r0, r31
     de6:	f7 ee       	ldi	r31, 0xE7	; 231
     de8:	cf 2e       	mov	r12, r31
     dea:	d1 2c       	mov	r13, r1
     dec:	f0 2d       	mov	r31, r0
     dee:	cc 0e       	add	r12, r28
     df0:	dd 1e       	adc	r13, r29
     df2:	c0 0e       	add	r12, r16
     df4:	d1 1e       	adc	r13, r17
     df6:	d6 01       	movw	r26, r12
     df8:	6c 91       	ld	r22, X
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__floatunsisf>
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	4e ef       	ldi	r20, 0xFE	; 254
     e0a:	52 e4       	ldi	r21, 0x42	; 66
     e0c:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <__subsf3>
     e10:	c7 50       	subi	r28, 0x07	; 7
     e12:	df 4f       	sbci	r29, 0xFF	; 255
     e14:	68 83       	st	Y, r22
     e16:	79 83       	std	Y+1, r23	; 0x01
     e18:	8a 83       	std	Y+2, r24	; 0x02
     e1a:	9b 83       	std	Y+3, r25	; 0x03
     e1c:	c9 5f       	subi	r28, 0xF9	; 249
     e1e:	d0 40       	sbci	r29, 0x00	; 0
     e20:	f8 01       	movw	r30, r16
     e22:	ee 0f       	add	r30, r30
     e24:	ff 1f       	adc	r31, r31
     e26:	81 ed       	ldi	r24, 0xD1	; 209
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	8c 0f       	add	r24, r28
     e2c:	9d 1f       	adc	r25, r29
     e2e:	e8 0f       	add	r30, r24
     e30:	f9 1f       	adc	r31, r25
     e32:	60 81       	ld	r22, Z
     e34:	71 81       	ldd	r23, Z+1	; 0x01
     e36:	07 2e       	mov	r0, r23
     e38:	00 0c       	add	r0, r0
     e3a:	88 0b       	sbc	r24, r24
     e3c:	99 0b       	sbc	r25, r25
     e3e:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <__floatsisf>
     e42:	c7 50       	subi	r28, 0x07	; 7
     e44:	df 4f       	sbci	r29, 0xFF	; 255
     e46:	28 81       	ld	r18, Y
     e48:	39 81       	ldd	r19, Y+1	; 0x01
     e4a:	4a 81       	ldd	r20, Y+2	; 0x02
     e4c:	5b 81       	ldd	r21, Y+3	; 0x03
     e4e:	c9 5f       	subi	r28, 0xF9	; 249
     e50:	d0 40       	sbci	r29, 0x00	; 0
     e52:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <__mulsf3>
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	4a e7       	ldi	r20, 0x7A	; 122
     e5c:	54 e4       	ldi	r21, 0x44	; 68
     e5e:	0e 94 18 26 	call	0x4c30	; 0x4c30 <__divsf3>
     e62:	9b 01       	movw	r18, r22
     e64:	ac 01       	movw	r20, r24
     e66:	c5 01       	movw	r24, r10
     e68:	b4 01       	movw	r22, r8
     e6a:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <__addsf3>
     e6e:	4b 01       	movw	r8, r22
     e70:	5c 01       	movw	r10, r24
					signal_in[i] = signal_in[i + 1];
     e72:	0f 5f       	subi	r16, 0xFF	; 255
     e74:	1f 4f       	sbci	r17, 0xFF	; 255
     e76:	e7 ee       	ldi	r30, 0xE7	; 231
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	ec 0f       	add	r30, r28
     e7c:	fd 1f       	adc	r31, r29
     e7e:	e0 0f       	add	r30, r16
     e80:	f1 1f       	adc	r31, r17
     e82:	80 81       	ld	r24, Z
     e84:	d6 01       	movw	r26, r12
     e86:	8c 93       	st	X, r24
					temp_count = 0;
				}
				temp = 127;
				//temp_ = 0;

				for (uint8_t i = 0; i < filterlen - 1; i++) {
     e88:	f3 94       	inc	r15
     e8a:	a6 cf       	rjmp	.-180    	; 0xdd8 <_Z8convolvev+0x1aa>
					temp += ((float(signal_in[i]) - 127) * filter[i] / 1000);//570
					signal_in[i] = signal_in[i + 1];
				}
				temp += ((float(signal_in[filterlen - 1]) - 127) * filter[filterlen - 1] / 1000);//570
     e8c:	cf 50       	subi	r28, 0x0F	; 15
     e8e:	df 4f       	sbci	r29, 0xFF	; 255
     e90:	68 81       	ld	r22, Y
     e92:	c1 5f       	subi	r28, 0xF1	; 241
     e94:	d0 40       	sbci	r29, 0x00	; 0
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 b9 26 	call	0x4d72	; 0x4d72 <__floatunsisf>
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	4e ef       	ldi	r20, 0xFE	; 254
     ea6:	52 e4       	ldi	r21, 0x42	; 66
     ea8:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <__subsf3>
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	a9 01       	movw	r20, r18
     eb2:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <__mulsf3>
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	4a e7       	ldi	r20, 0x7A	; 122
     ebc:	54 e4       	ldi	r21, 0x44	; 68
     ebe:	0e 94 18 26 	call	0x4c30	; 0x4c30 <__divsf3>
     ec2:	9b 01       	movw	r18, r22
     ec4:	ac 01       	movw	r20, r24
     ec6:	c5 01       	movw	r24, r10
     ec8:	b4 01       	movw	r22, r8
     eca:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <__addsf3>
				signal_in[filterlen - 1] = temp_buff[temp_count++];
     ece:	11 e0       	ldi	r17, 0x01	; 1
     ed0:	1e 0d       	add	r17, r14
     ed2:	e7 e3       	ldi	r30, 0x37	; 55
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	ec 0f       	add	r30, r28
     ed8:	fd 1f       	adc	r31, r29
     eda:	ee 0d       	add	r30, r14
     edc:	f1 1d       	adc	r31, r1
     ede:	20 81       	ld	r18, Z
     ee0:	cf 50       	subi	r28, 0x0F	; 15
     ee2:	df 4f       	sbci	r29, 0xFF	; 255
     ee4:	28 83       	st	Y, r18
     ee6:	c1 5f       	subi	r28, 0xF1	; 241
     ee8:	d0 40       	sbci	r29, 0x00	; 0


				//temp_ = byte(temp + 127) ;
				out.write(uint8_t(temp));
     eea:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <__fixunssfsi>
     eee:	ce 01       	movw	r24, r28
     ef0:	8a 54       	subi	r24, 0x4A	; 74
     ef2:	9f 4f       	sbci	r25, 0xFF	; 255
     ef4:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN5SDLib4File5writeEh>
				//Serial.println(String(micros()-t));
				fSize --;
     ef8:	b1 e0       	ldi	r27, 0x01	; 1
     efa:	4b 1a       	sub	r4, r27
     efc:	51 08       	sbc	r5, r1
     efe:	61 08       	sbc	r6, r1
     f00:	71 08       	sbc	r7, r1
				for (uint8_t i = 0; i < filterlen - 1; i++) {
					temp += ((float(signal_in[i]) - 127) * filter[i] / 1000);//570
					signal_in[i] = signal_in[i + 1];
				}
				temp += ((float(signal_in[filterlen - 1]) - 127) * filter[filterlen - 1] / 1000);//570
				signal_in[filterlen - 1] = temp_buff[temp_count++];
     f02:	e1 2e       	mov	r14, r17
			unsigned long fSize = target.size();

			target.read(signal_in, filterlen);
			target.read(temp_buff, temp_buff_size);

			while (fSize) {
     f04:	4c cf       	rjmp	.-360    	; 0xd9e <_Z8convolvev+0x170>
     f06:	c8 54       	subi	r28, 0x48	; 72
     f08:	df 4f       	sbci	r29, 0xFF	; 255
     f0a:	88 81       	ld	r24, Y
     f0c:	99 81       	ldd	r25, Y+1	; 0x01
     f0e:	c8 5b       	subi	r28, 0xB8	; 184
     f10:	d0 40       	sbci	r29, 0x00	; 0
     f12:	9c 83       	std	Y+4, r25	; 0x04
     f14:	8b 83       	std	Y+3, r24	; 0x03
     f16:	c6 54       	subi	r28, 0x46	; 70
     f18:	df 4f       	sbci	r29, 0xFF	; 255
     f1a:	88 81       	ld	r24, Y
     f1c:	99 81       	ldd	r25, Y+1	; 0x01
     f1e:	aa 81       	ldd	r26, Y+2	; 0x02
     f20:	bb 81       	ldd	r27, Y+3	; 0x03
     f22:	ca 5b       	subi	r28, 0xBA	; 186
     f24:	d0 40       	sbci	r29, 0x00	; 0
     f26:	8d 83       	std	Y+5, r24	; 0x05
     f28:	9e 83       	std	Y+6, r25	; 0x06
     f2a:	af 83       	std	Y+7, r26	; 0x07
     f2c:	b8 87       	std	Y+8, r27	; 0x08
     f2e:	c2 54       	subi	r28, 0x42	; 66
     f30:	df 4f       	sbci	r29, 0xFF	; 255
     f32:	88 81       	ld	r24, Y
     f34:	99 81       	ldd	r25, Y+1	; 0x01
     f36:	aa 81       	ldd	r26, Y+2	; 0x02
     f38:	bb 81       	ldd	r27, Y+3	; 0x03
     f3a:	ce 5b       	subi	r28, 0xBE	; 190
     f3c:	d0 40       	sbci	r29, 0x00	; 0
     f3e:	89 87       	std	Y+9, r24	; 0x09
     f40:	9a 87       	std	Y+10, r25	; 0x0a
     f42:	ab 87       	std	Y+11, r26	; 0x0b
     f44:	bc 87       	std	Y+12, r27	; 0x0c
     f46:	8d e0       	ldi	r24, 0x0D	; 13
     f48:	92 e0       	ldi	r25, 0x02	; 2
     f4a:	9a 83       	std	Y+2, r25	; 0x02
     f4c:	89 83       	std	Y+1, r24	; 0x01
     f4e:	8d e0       	ldi	r24, 0x0D	; 13
     f50:	e6 eb       	ldi	r30, 0xB6	; 182
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	ec 0f       	add	r30, r28
     f56:	fd 1f       	adc	r31, r29
     f58:	3c 96       	adiw	r30, 0x0c	; 12
     f5a:	de 01       	movw	r26, r28
     f5c:	1d 96       	adiw	r26, 0x0d	; 13
     f5e:	01 90       	ld	r0, Z+
     f60:	0d 92       	st	X+, r0
     f62:	8a 95       	dec	r24
     f64:	e1 f7       	brne	.-8      	; 0xf5e <_Z8convolvev+0x330>
     f66:	c1 53       	subi	r28, 0x31	; 49
     f68:	df 4f       	sbci	r29, 0xFF	; 255
     f6a:	88 81       	ld	r24, Y
     f6c:	99 81       	ldd	r25, Y+1	; 0x01
     f6e:	cf 5c       	subi	r28, 0xCF	; 207
     f70:	d0 40       	sbci	r29, 0x00	; 0
     f72:	9b 8f       	std	Y+27, r25	; 0x1b
     f74:	8a 8f       	std	Y+26, r24	; 0x1a
				//Serial.println(String(micros()-t));
				fSize --;


			}
			finalizeWave(out);
     f76:	ce 01       	movw	r24, r28
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	0e 94 10 05 	call	0xa20	; 0xa20 <_Z12finalizeWaveN5SDLib4FileE>
			out.close();
     f7e:	ce 01       	movw	r24, r28
     f80:	8a 54       	subi	r24, 0x4A	; 74
     f82:	9f 4f       	sbci	r25, 0xFF	; 255
     f84:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <_ZN5SDLib4File5closeEv>
			target.close();
     f88:	ce 01       	movw	r24, r28
     f8a:	85 56       	subi	r24, 0x65	; 101
     f8c:	9f 4f       	sbci	r25, 0xFF	; 255
     f8e:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <_ZN5SDLib4File5closeEv>
			//Serial.println("stop");
		}
	}
}
     f92:	c4 50       	subi	r28, 0x04	; 4
     f94:	df 4f       	sbci	r29, 0xFF	; 255
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	de bf       	out	0x3e, r29	; 62
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	cd bf       	out	0x3d, r28	; 61
     fa0:	df 91       	pop	r29
     fa2:	cf 91       	pop	r28
     fa4:	1f 91       	pop	r17
     fa6:	0f 91       	pop	r16
     fa8:	ff 90       	pop	r15
     faa:	ef 90       	pop	r14
     fac:	df 90       	pop	r13
     fae:	cf 90       	pop	r12
     fb0:	bf 90       	pop	r11
     fb2:	af 90       	pop	r10
     fb4:	9f 90       	pop	r9
     fb6:	8f 90       	pop	r8
     fb8:	7f 90       	pop	r7
     fba:	6f 90       	pop	r6
     fbc:	5f 90       	pop	r5
     fbe:	4f 90       	pop	r4
     fc0:	08 95       	ret

00000fc2 <_Z9analog_ini>:


//>--------------------------------------< IO FUNCTIONS >--------------------------------------<
uint8_t analog_in(int inputPin = 0000){
		
	ADMUX |= inputPin;
     fc2:	ec e7       	ldi	r30, 0x7C	; 124
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	90 81       	ld	r25, Z
     fc8:	89 2b       	or	r24, r25
     fca:	80 83       	st	Z, r24
	
	ADCSRA = ADCSRA | (1 << ADSC);
     fcc:	ea e7       	ldi	r30, 0x7A	; 122
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	80 64       	ori	r24, 0x40	; 64
     fd4:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC));
     fd6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     fda:	86 fd       	sbrc	r24, 6
     fdc:	fc cf       	rjmp	.-8      	; 0xfd6 <_Z9analog_ini+0x14>
	
	ADMUX &= 0b11110000;
     fde:	ec e7       	ldi	r30, 0x7C	; 124
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	80 7f       	andi	r24, 0xF0	; 240
     fe6:	80 83       	st	Z, r24
	
	return ADCH;
     fe8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
     fec:	08 95       	ret

00000fee <_Z6recordv>:

//END OF LCD DISPLAY FUNCTIONS

//>-----------------------------< RECORD AND PLAY FUNCTIONS >----------------------------------<

void record() {
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	c1 55       	subi	r28, 0x51	; 81
     ffa:	d1 09       	sbc	r29, r1
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	de bf       	out	0x3e, r29	; 62
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	cd bf       	out	0x3d, r28	; 61
	 /*Used to record the data got from input into a file*/
	  checkDuplicates();
    1006:	0e 94 b1 04 	call	0x962	; 0x962 <_Z15checkDuplicatesv>
	  File test_File = SD.open(fname_temp, FILE_WRITE);
    100a:	27 e1       	ldi	r18, 0x17	; 23
    100c:	4d e4       	ldi	r20, 0x4D	; 77
    100e:	52 e0       	ldi	r21, 0x02	; 2
    1010:	67 e6       	ldi	r22, 0x67	; 103
    1012:	72 e0       	ldi	r23, 0x02	; 2
    1014:	ce 01       	movw	r24, r28
    1016:	c7 96       	adiw	r24, 0x37	; 55
    1018:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <_ZN5SDLib7SDClass4openEPKch>

	  if (!test_File) {
    101c:	ce 01       	movw	r24, r28
    101e:	c7 96       	adiw	r24, 0x37	; 55
    1020:	0e 94 8d 0c 	call	0x191a	; 0x191a <_ZN5SDLib4FilecvbEv>
    1024:	81 11       	cpse	r24, r1
    1026:	0e c0       	rjmp	.+28     	; 0x1044 <_Z6recordv+0x56>
		clrDisplay("Error");
    1028:	89 e9       	ldi	r24, 0x99	; 153
    102a:	91 e0       	ldi	r25, 0x01	; 1
    102c:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1030:	2f ef       	ldi	r18, 0xFF	; 255
    1032:	83 ed       	ldi	r24, 0xD3	; 211
    1034:	90 e3       	ldi	r25, 0x30	; 48
    1036:	21 50       	subi	r18, 0x01	; 1
    1038:	80 40       	sbci	r24, 0x00	; 0
    103a:	90 40       	sbci	r25, 0x00	; 0
    103c:	e1 f7       	brne	.-8      	; 0x1036 <_Z6recordv+0x48>
    103e:	00 c0       	rjmp	.+0      	; 0x1040 <_Z6recordv+0x52>
    1040:	00 00       	nop
    1042:	80 c0       	rjmp	.+256    	; 0x1144 <_Z6recordv+0x156>
		_delay_ms(1000);
	  }
	  else {
		clrDisplay("Recording");
    1044:	8f e9       	ldi	r24, 0x9F	; 159
    1046:	91 e0       	ldi	r25, 0x01	; 1
    1048:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
    104c:	89 ad       	ldd	r24, Y+57	; 0x39
    104e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1050:	9f 8f       	std	Y+31, r25	; 0x1f
    1052:	8e 8f       	std	Y+30, r24	; 0x1e
    1054:	8b ad       	ldd	r24, Y+59	; 0x3b
    1056:	9c ad       	ldd	r25, Y+60	; 0x3c
    1058:	ad ad       	ldd	r26, Y+61	; 0x3d
    105a:	be ad       	ldd	r27, Y+62	; 0x3e
    105c:	88 a3       	std	Y+32, r24	; 0x20
    105e:	99 a3       	std	Y+33, r25	; 0x21
    1060:	aa a3       	std	Y+34, r26	; 0x22
    1062:	bb a3       	std	Y+35, r27	; 0x23
    1064:	23 96       	adiw	r28, 0x03	; 3
    1066:	8c ad       	ldd	r24, Y+60	; 0x3c
    1068:	9d ad       	ldd	r25, Y+61	; 0x3d
    106a:	ae ad       	ldd	r26, Y+62	; 0x3e
    106c:	bf ad       	ldd	r27, Y+63	; 0x3f
    106e:	23 97       	sbiw	r28, 0x03	; 3
    1070:	8c a3       	std	Y+36, r24	; 0x24
    1072:	9d a3       	std	Y+37, r25	; 0x25
    1074:	ae a3       	std	Y+38, r26	; 0x26
    1076:	bf a3       	std	Y+39, r27	; 0x27
    1078:	8d e0       	ldi	r24, 0x0D	; 13
    107a:	92 e0       	ldi	r25, 0x02	; 2
    107c:	9d 8f       	std	Y+29, r25	; 0x1d
    107e:	8c 8f       	std	Y+28, r24	; 0x1c
    1080:	8d e0       	ldi	r24, 0x0D	; 13
    1082:	fe 01       	movw	r30, r28
    1084:	ed 5b       	subi	r30, 0xBD	; 189
    1086:	ff 4f       	sbci	r31, 0xFF	; 255
    1088:	de 01       	movw	r26, r28
    108a:	98 96       	adiw	r26, 0x28	; 40
    108c:	01 90       	ld	r0, Z+
    108e:	0d 92       	st	X+, r0
    1090:	8a 95       	dec	r24
    1092:	e1 f7       	brne	.-8      	; 0x108c <_Z6recordv+0x9e>
    1094:	62 96       	adiw	r28, 0x12	; 18
    1096:	8e ad       	ldd	r24, Y+62	; 0x3e
    1098:	9f ad       	ldd	r25, Y+63	; 0x3f
    109a:	62 97       	sbiw	r28, 0x12	; 18
    109c:	9e ab       	std	Y+54, r25	; 0x36
    109e:	8d ab       	std	Y+53, r24	; 0x35
		makeWaveFile(test_File);
    10a0:	ce 01       	movw	r24, r28
    10a2:	4c 96       	adiw	r24, 0x1c	; 28
    10a4:	0e 94 c4 04 	call	0x988	; 0x988 <_Z12makeWaveFileN5SDLib4FileE>
		uint8_t pot_Read;

		while (true) {
		  //t = micros();
		
		  pot_Read = analog_in(mic);
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <_Z9analog_ini>
    10b0:	18 2f       	mov	r17, r24
		
		  char key = keyInput();
    10b2:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_Z8keyInputv>

		  if (key && key == 's') {
    10b6:	83 37       	cpi	r24, 0x73	; 115
    10b8:	51 f0       	breq	.+20     	; 0x10ce <_Z6recordv+0xe0>
			break;
		  }

		  test_File.write(pot_Read);
    10ba:	61 2f       	mov	r22, r17
    10bc:	ce 01       	movw	r24, r28
    10be:	c7 96       	adiw	r24, 0x37	; 55
    10c0:	0e 94 15 0b 	call	0x162a	; 0x162a <_ZN5SDLib4File5writeEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10c4:	25 e5       	ldi	r18, 0x55	; 85
    10c6:	2a 95       	dec	r18
    10c8:	f1 f7       	brne	.-4      	; 0x10c6 <_Z6recordv+0xd8>
    10ca:	00 00       	nop
    10cc:	ed cf       	rjmp	.-38     	; 0x10a8 <_Z6recordv+0xba>
    10ce:	89 ad       	ldd	r24, Y+57	; 0x39
    10d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    10d2:	9c 83       	std	Y+4, r25	; 0x04
    10d4:	8b 83       	std	Y+3, r24	; 0x03
    10d6:	8b ad       	ldd	r24, Y+59	; 0x3b
    10d8:	9c ad       	ldd	r25, Y+60	; 0x3c
    10da:	ad ad       	ldd	r26, Y+61	; 0x3d
    10dc:	be ad       	ldd	r27, Y+62	; 0x3e
    10de:	8d 83       	std	Y+5, r24	; 0x05
    10e0:	9e 83       	std	Y+6, r25	; 0x06
    10e2:	af 83       	std	Y+7, r26	; 0x07
    10e4:	b8 87       	std	Y+8, r27	; 0x08
    10e6:	23 96       	adiw	r28, 0x03	; 3
    10e8:	8c ad       	ldd	r24, Y+60	; 0x3c
    10ea:	9d ad       	ldd	r25, Y+61	; 0x3d
    10ec:	ae ad       	ldd	r26, Y+62	; 0x3e
    10ee:	bf ad       	ldd	r27, Y+63	; 0x3f
    10f0:	23 97       	sbiw	r28, 0x03	; 3
    10f2:	89 87       	std	Y+9, r24	; 0x09
    10f4:	9a 87       	std	Y+10, r25	; 0x0a
    10f6:	ab 87       	std	Y+11, r26	; 0x0b
    10f8:	bc 87       	std	Y+12, r27	; 0x0c
    10fa:	8d e0       	ldi	r24, 0x0D	; 13
    10fc:	92 e0       	ldi	r25, 0x02	; 2
    10fe:	9a 83       	std	Y+2, r25	; 0x02
    1100:	89 83       	std	Y+1, r24	; 0x01
    1102:	8d e0       	ldi	r24, 0x0D	; 13
    1104:	fe 01       	movw	r30, r28
    1106:	ed 5b       	subi	r30, 0xBD	; 189
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	de 01       	movw	r26, r28
    110c:	1d 96       	adiw	r26, 0x0d	; 13
    110e:	01 90       	ld	r0, Z+
    1110:	0d 92       	st	X+, r0
    1112:	8a 95       	dec	r24
    1114:	e1 f7       	brne	.-8      	; 0x110e <_Z6recordv+0x120>
    1116:	62 96       	adiw	r28, 0x12	; 18
    1118:	8e ad       	ldd	r24, Y+62	; 0x3e
    111a:	9f ad       	ldd	r25, Y+63	; 0x3f
    111c:	62 97       	sbiw	r28, 0x12	; 18
    111e:	9b 8f       	std	Y+27, r25	; 0x1b
    1120:	8a 8f       	std	Y+26, r24	; 0x1a
		  _delay_us(16);
		  //t = micros() - t;
		  //clrDisplay(String(t));
		  //_delay_ms(1000);
		}
		finalizeWave(test_File);
    1122:	ce 01       	movw	r24, r28
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	0e 94 10 05 	call	0xa20	; 0xa20 <_Z12finalizeWaveN5SDLib4FileE>
		clrDisplay("Saved");
    112a:	89 ea       	ldi	r24, 0xA9	; 169
    112c:	91 e0       	ldi	r25, 0x01	; 1
    112e:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1132:	8f ef       	ldi	r24, 0xFF	; 255
    1134:	93 ed       	ldi	r25, 0xD3	; 211
    1136:	20 e3       	ldi	r18, 0x30	; 48
    1138:	81 50       	subi	r24, 0x01	; 1
    113a:	90 40       	sbci	r25, 0x00	; 0
    113c:	20 40       	sbci	r18, 0x00	; 0
    113e:	e1 f7       	brne	.-8      	; 0x1138 <_Z6recordv+0x14a>
    1140:	00 c0       	rjmp	.+0      	; 0x1142 <_Z6recordv+0x154>
    1142:	00 00       	nop
		_delay_ms(1000);
	  }
	  test_File.close();
    1144:	ce 01       	movw	r24, r28
    1146:	c7 96       	adiw	r24, 0x37	; 55
    1148:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <_ZN5SDLib4File5closeEv>
}
    114c:	cf 5a       	subi	r28, 0xAF	; 175
    114e:	df 4f       	sbci	r29, 0xFF	; 255
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	08 95       	ret

00001162 <_Z12checkChangesv>:

    _delay_ms(1000);
  }
}

void checkChanges() {
    1162:	cf 93       	push	r28
  /*
     This function checks for frequency change requirements
  */

	uint8_t fsc = analog_in(ScalePOT);
    1164:	83 e0       	ldi	r24, 0x03	; 3
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <_Z9analog_ini>
    116c:	c8 2f       	mov	r28, r24
	uint8_t fshift = analog_in(shiftEnhancePOT);
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <_Z9analog_ini>

  if (fsc < 90) {
    1176:	ca 35       	cpi	r28, 0x5A	; 90
    1178:	20 f4       	brcc	.+8      	; 0x1182 <_Z12checkChangesv+0x20>
    freqScal = 1;
    117a:	91 e0       	ldi	r25, 0x01	; 1
    117c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <freqScal>
    1180:	09 c0       	rjmp	.+18     	; 0x1194 <_Z12checkChangesv+0x32>
  }
  else if (fsc < 180) {
    1182:	c4 3b       	cpi	r28, 0xB4	; 180
    1184:	20 f4       	brcc	.+8      	; 0x118e <_Z12checkChangesv+0x2c>
    freqScal = 2;
    1186:	92 e0       	ldi	r25, 0x02	; 2
    1188:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <freqScal>
    118c:	03 c0       	rjmp	.+6      	; 0x1194 <_Z12checkChangesv+0x32>
  }
  else {
    freqScal = 3;
    118e:	93 e0       	ldi	r25, 0x03	; 3
    1190:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <freqScal>
  }
  
  if(fshift==0){
    1194:	81 11       	cpse	r24, r1
    1196:	05 c0       	rjmp	.+10     	; 0x11a2 <_Z12checkChangesv+0x40>
	  shift = false;
    1198:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <shift>
	  enhance = 0;
    119c:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <enhance>
    11a0:	1d c0       	rjmp	.+58     	; 0x11dc <_Z12checkChangesv+0x7a>
  }	
  else if (fshift < 64) {
    11a2:	80 34       	cpi	r24, 0x40	; 64
    11a4:	30 f4       	brcc	.+12     	; 0x11b2 <_Z12checkChangesv+0x50>
    shift = true;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <shift>
    enhance = 0;
    11ac:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <enhance>
    11b0:	15 c0       	rjmp	.+42     	; 0x11dc <_Z12checkChangesv+0x7a>
  }
  else if (fshift < 128) {
    11b2:	88 23       	and	r24, r24
    11b4:	34 f0       	brlt	.+12     	; 0x11c2 <_Z12checkChangesv+0x60>
    shift = false;
    11b6:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <shift>
    enhance = 1;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <enhance>
    11c0:	0d c0       	rjmp	.+26     	; 0x11dc <_Z12checkChangesv+0x7a>
  }
  else if(fshift < 192){
    11c2:	80 3c       	cpi	r24, 0xC0	; 192
    11c4:	30 f4       	brcc	.+12     	; 0x11d2 <_Z12checkChangesv+0x70>
    shift = false;
    11c6:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <shift>
    enhance = 2;
    11ca:	82 e0       	ldi	r24, 0x02	; 2
    11cc:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <enhance>
    11d0:	05 c0       	rjmp	.+10     	; 0x11dc <_Z12checkChangesv+0x7a>
  }
  else{
	shift = false;
    11d2:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <shift>
	enhance = 3;  
    11d6:	83 e0       	ldi	r24, 0x03	; 3
    11d8:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <enhance>
  }
}
    11dc:	cf 91       	pop	r28
    11de:	08 95       	ret

000011e0 <_Z9playTrackv>:
	  }
	  test_File.close();
}

void playTrack()
{
    11e0:	1f 93       	push	r17
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	6b 97       	sbiw	r28, 0x1b	; 27
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	cd bf       	out	0x3d, r28	; 61
  /*This function reads data from the specified file and play*/

  checkChanges();//check for frequency change requirements
    11f6:	0e 94 b1 08 	call	0x1162	; 0x1162 <_Z12checkChangesv>

  if (shift)
    11fa:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <shift>
    11fe:	88 23       	and	r24, r24
    1200:	31 f0       	breq	.+12     	; 0x120e <_Z9playTrackv+0x2e>
  {
    secondLine("Processing");
    1202:	8f ea       	ldi	r24, 0xAF	; 175
    1204:	91 e0       	ldi	r25, 0x01	; 1
    1206:	0e 94 41 04 	call	0x882	; 0x882 <_Z10secondLinePKc>
    convolve();
    120a:	0e 94 17 06 	call	0xc2e	; 0xc2e <_Z8convolvev>
  }

  File test_File = SD.open(fname_temp);
    120e:	21 e0       	ldi	r18, 0x01	; 1
    1210:	4d e4       	ldi	r20, 0x4D	; 77
    1212:	52 e0       	ldi	r21, 0x02	; 2
    1214:	67 e6       	ldi	r22, 0x67	; 103
    1216:	72 e0       	ldi	r23, 0x02	; 2
    1218:	ce 01       	movw	r24, r28
    121a:	01 96       	adiw	r24, 0x01	; 1
    121c:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <_ZN5SDLib7SDClass4openEPKch>

  if (!test_File) {
    1220:	ce 01       	movw	r24, r28
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	0e 94 8d 0c 	call	0x191a	; 0x191a <_ZN5SDLib4FilecvbEv>
    1228:	81 11       	cpse	r24, r1
    122a:	0e c0       	rjmp	.+28     	; 0x1248 <_Z9playTrackv+0x68>
    // if the file didn't open, print an error:
    secondLine("Error");
    122c:	89 e9       	ldi	r24, 0x99	; 153
    122e:	91 e0       	ldi	r25, 0x01	; 1
    1230:	0e 94 41 04 	call	0x882	; 0x882 <_Z10secondLinePKc>
    1234:	2f ef       	ldi	r18, 0xFF	; 255
    1236:	83 ed       	ldi	r24, 0xD3	; 211
    1238:	90 e3       	ldi	r25, 0x30	; 48
    123a:	21 50       	subi	r18, 0x01	; 1
    123c:	80 40       	sbci	r24, 0x00	; 0
    123e:	90 40       	sbci	r25, 0x00	; 0
    1240:	e1 f7       	brne	.-8      	; 0x123a <_Z9playTrackv+0x5a>
    1242:	00 c0       	rjmp	.+0      	; 0x1244 <_Z9playTrackv+0x64>
    1244:	00 00       	nop
    1246:	89 c0       	rjmp	.+274    	; 0x135a <_Z9playTrackv+0x17a>
    _delay_ms(1000);
  }
  else {
    test_File.seek(44);
    1248:	4c e2       	ldi	r20, 0x2C	; 44
    124a:	50 e0       	ldi	r21, 0x00	; 0
    124c:	60 e0       	ldi	r22, 0x00	; 0
    124e:	70 e0       	ldi	r23, 0x00	; 0
    1250:	ce 01       	movw	r24, r28
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	0e 94 1c 0c 	call	0x1838	; 0x1838 <_ZN5SDLib4File4seekEm>
    clrDisplay("Playing");
    1258:	8a eb       	ldi	r24, 0xBA	; 186
    125a:	91 e0       	ldi	r25, 0x01	; 1
    125c:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
    secondLine(fname_temp);
    1260:	8d e4       	ldi	r24, 0x4D	; 77
    1262:	92 e0       	ldi	r25, 0x02	; 2
    1264:	0e 94 41 04 	call	0x882	; 0x882 <_Z10secondLinePKc>

    //Check whether a frequency scale is set
    //>---------------------------< NORMAL OUTPUT >----------------------------------<

    if (freqScal == 0 || freqScal == 1) {
    1268:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <freqScal>
    126c:	82 30       	cpi	r24, 0x02	; 2
    126e:	c8 f4       	brcc	.+50     	; 0x12a2 <_Z9playTrackv+0xc2>
      while (test_File.available()) {
    1270:	ce 01       	movw	r24, r28
    1272:	01 96       	adiw	r24, 0x01	; 1
    1274:	0e 94 4b 0c 	call	0x1896	; 0x1896 <_ZN5SDLib4File9availableEv>
    1278:	89 2b       	or	r24, r25
    127a:	e1 f1       	breq	.+120    	; 0x12f4 <_Z9playTrackv+0x114>
        //t = micros();
        OCR1A = test_File.read();
    127c:	ce 01       	movw	r24, r28
    127e:	01 96       	adiw	r24, 0x01	; 1
    1280:	0e 94 65 0b 	call	0x16ca	; 0x16ca <_ZN5SDLib4File4readEv>
    1284:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1288:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    128c:	25 ed       	ldi	r18, 0xD5	; 213
    128e:	2a 95       	dec	r18
    1290:	f1 f7       	brne	.-4      	; 0x128e <_Z9playTrackv+0xae>
    1292:	00 00       	nop
        _delay_us(40);  //Use this delay for 12.5KHz play
        //_delay_us(20);    //Use this delay for 16kHz play
        
		//****Comment both of delays for 24kHz play*******
        
        char key = keyInput();
    1294:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_Z8keyInputv>
        if (key && key == 'p') {
    1298:	80 37       	cpi	r24, 0x70	; 112
    129a:	51 f7       	brne	.-44     	; 0x1270 <_Z9playTrackv+0x90>
    129c:	2b c0       	rjmp	.+86     	; 0x12f4 <_Z9playTrackv+0x114>
        }

        count++;

        if (count == freqScal + 1) {//resetting the count
          count = 1;
    129e:	11 e0       	ldi	r17, 0x01	; 1
    12a0:	01 c0       	rjmp	.+2      	; 0x12a4 <_Z9playTrackv+0xc4>
    12a2:	11 e0       	ldi	r17, 0x01	; 1
    //Output for freaquency scaled track
    //Using down sampling

    else {
      uint8_t count = 1;
      while (test_File.available()) {
    12a4:	ce 01       	movw	r24, r28
    12a6:	01 96       	adiw	r24, 0x01	; 1
    12a8:	0e 94 4b 0c 	call	0x1896	; 0x1896 <_ZN5SDLib4File9availableEv>
    12ac:	89 2b       	or	r24, r25
    12ae:	11 f1       	breq	.+68     	; 0x12f4 <_Z9playTrackv+0x114>
        //t = micros();
        char key = keyInput();
    12b0:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_Z8keyInputv>
        if (key && key == 'p') {
    12b4:	80 37       	cpi	r24, 0x70	; 112
    12b6:	f1 f0       	breq	.+60     	; 0x12f4 <_Z9playTrackv+0x114>
          break;
        }

        if (count == 1) {
    12b8:	11 30       	cpi	r17, 0x01	; 1
    12ba:	69 f4       	brne	.+26     	; 0x12d6 <_Z9playTrackv+0xf6>
          //Accept the first sample among (# of samples=freqScal)
		  OCR1A = test_File.read();
    12bc:	ce 01       	movw	r24, r28
    12be:	01 96       	adiw	r24, 0x01	; 1
    12c0:	0e 94 65 0b 	call	0x16ca	; 0x16ca <_ZN5SDLib4File4readEv>
    12c4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    12c8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    12cc:	85 ed       	ldi	r24, 0xD5	; 213
    12ce:	8a 95       	dec	r24
    12d0:	f1 f7       	brne	.-4      	; 0x12ce <_Z9playTrackv+0xee>
    12d2:	00 00       	nop
    12d4:	04 c0       	rjmp	.+8      	; 0x12de <_Z9playTrackv+0xfe>
          //Serial.println(micros() - t);
          //t = micros() - t;
          //clrDisplay(String(t));
          //delay(1000);
        } else {
          test_File.read();//This is to neglet samples in between
    12d6:	ce 01       	movw	r24, r28
    12d8:	01 96       	adiw	r24, 0x01	; 1
    12da:	0e 94 65 0b 	call	0x16ca	; 0x16ca <_ZN5SDLib4File4readEv>
        }

        count++;
    12de:	1f 5f       	subi	r17, 0xFF	; 255

        if (count == freqScal + 1) {//resetting the count
    12e0:	21 2f       	mov	r18, r17
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <freqScal>
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	01 96       	adiw	r24, 0x01	; 1
    12ec:	28 17       	cp	r18, r24
    12ee:	39 07       	cpc	r19, r25
    12f0:	c9 f6       	brne	.-78     	; 0x12a4 <_Z9playTrackv+0xc4>
    12f2:	d5 cf       	rjmp	.-86     	; 0x129e <_Z9playTrackv+0xbe>
        //        delay(1000);
      }
    }
    // close the file:
    //analogWrite(speaker, 0);
	OCR1A = 0;
    12f4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    12f8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    secondLine("End of play");
    12fc:	82 ec       	ldi	r24, 0xC2	; 194
    12fe:	91 e0       	ldi	r25, 0x01	; 1
    1300:	0e 94 41 04 	call	0x882	; 0x882 <_Z10secondLinePKc>
    test_File.close();
    1304:	ce 01       	movw	r24, r28
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <_ZN5SDLib4File5closeEv>

    if (shift || enhance) {
    130c:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <shift>
    1310:	81 11       	cpse	r24, r1
    1312:	04 c0       	rjmp	.+8      	; 0x131c <_Z9playTrackv+0x13c>
    1314:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <enhance>
    1318:	88 23       	and	r24, r24
    131a:	b1 f0       	breq	.+44     	; 0x1348 <_Z9playTrackv+0x168>
      //fname_temp = String(tracks[fcount]) + ".WAV";
	  //setFileName();

	  fname_temp[0] = tracks[fcount];fname_temp[1] = '.';fname_temp[2] = 'W';fname_temp[3] = 'A';fname_temp[4] = 'V';fname_temp[5] = NULL;
    131c:	e0 91 54 02 	lds	r30, 0x0254	; 0x800254 <fcount>
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	ea 5a       	subi	r30, 0xAA	; 170
    1324:	fd 4f       	sbci	r31, 0xFD	; 253
    1326:	80 81       	ld	r24, Z
    1328:	ed e4       	ldi	r30, 0x4D	; 77
    132a:	f2 e0       	ldi	r31, 0x02	; 2
    132c:	80 83       	st	Z, r24
    132e:	8e e2       	ldi	r24, 0x2E	; 46
    1330:	81 83       	std	Z+1, r24	; 0x01
    1332:	87 e5       	ldi	r24, 0x57	; 87
    1334:	82 83       	std	Z+2, r24	; 0x02
    1336:	81 e4       	ldi	r24, 0x41	; 65
    1338:	83 83       	std	Z+3, r24	; 0x03
    133a:	86 e5       	ldi	r24, 0x56	; 86
    133c:	84 83       	std	Z+4, r24	; 0x04
    133e:	15 82       	std	Z+5, r1	; 0x05
      shift = false;
    1340:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <shift>
      enhance = 0;
    1344:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <enhance>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1348:	9f ef       	ldi	r25, 0xFF	; 255
    134a:	23 ed       	ldi	r18, 0xD3	; 211
    134c:	80 e3       	ldi	r24, 0x30	; 48
    134e:	91 50       	subi	r25, 0x01	; 1
    1350:	20 40       	sbci	r18, 0x00	; 0
    1352:	80 40       	sbci	r24, 0x00	; 0
    1354:	e1 f7       	brne	.-8      	; 0x134e <_Z9playTrackv+0x16e>
    1356:	00 c0       	rjmp	.+0      	; 0x1358 <_Z9playTrackv+0x178>
    1358:	00 00       	nop
    }

    _delay_ms(1000);
  }
}
    135a:	6b 96       	adiw	r28, 0x1b	; 27
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	1f 91       	pop	r17
    136c:	08 95       	ret

0000136e <_Z17initialize_Thingsv>:

void initialize_Things()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    136e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
	sbi(TCCR0A, WGM01);
    1370:	84 b5       	in	r24, 0x24	; 36
    1372:	82 60       	ori	r24, 0x02	; 2
    1374:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1376:	84 b5       	in	r24, 0x24	; 36
    1378:	81 60       	ori	r24, 0x01	; 1
    137a:	84 bd       	out	0x24, r24	; 36
	
	// set timer 0 prescale factor to 64
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    137c:	85 b5       	in	r24, 0x25	; 37
    137e:	82 60       	ori	r24, 0x02	; 2
    1380:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1382:	85 b5       	in	r24, 0x25	; 37
    1384:	81 60       	ori	r24, 0x01	; 1
    1386:	85 bd       	out	0x25, r24	; 37
	
	// enable timer 0 overflow interrupt
	sbi(TIMSK0, TOIE0);
    1388:	ee e6       	ldi	r30, 0x6E	; 110
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	81 60       	ori	r24, 0x01	; 1
    1390:	80 83       	st	Z, r24
	
	// timers 1 and 2 are used for phase-correct hardware pwm
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle
	TCCR1B = 0;
    1392:	e1 e8       	ldi	r30, 0x81	; 129
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	10 82       	st	Z, r1
	
	//select no-prescaling
	//sbi(TCCR1B, CS11);
	sbi(TCCR1B, CS10);
    1398:	80 81       	ld	r24, Z
    139a:	81 60       	ori	r24, 0x01	; 1
    139c:	80 83       	st	Z, r24
	
	//select the Wave form generation mode as FAST PWM
	//select the non-inverting mode
	sbi(TCCR1A, WGM10);
    139e:	a0 e8       	ldi	r26, 0x80	; 128
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	8c 91       	ld	r24, X
    13a4:	81 60       	ori	r24, 0x01	; 1
    13a6:	8c 93       	st	X, r24
	sbi(TCCR1A, COM1A1);
    13a8:	8c 91       	ld	r24, X
    13aa:	80 68       	ori	r24, 0x80	; 128
    13ac:	8c 93       	st	X, r24
	sbi(TCCR1B, WGM12);
    13ae:	80 81       	ld	r24, Z
    13b0:	88 60       	ori	r24, 0x08	; 8
    13b2:	80 83       	st	Z, r24
	
	// set timer 2 prescale factor to 64
	sbi(TCCR2B, CS22);
    13b4:	e1 eb       	ldi	r30, 0xB1	; 177
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	84 60       	ori	r24, 0x04	; 4
    13bc:	80 83       	st	Z, r24
	
	// configure timer 2 for phase correct pwm (8-bit)
	sbi(TCCR2A, WGM20);
    13be:	e0 eb       	ldi	r30, 0xB0	; 176
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	81 60       	ori	r24, 0x01	; 1
    13c6:	80 83       	st	Z, r24
	
	// set a2d prescaler(16) so we are inside the desired 50-200 KHz range.
	sbi(ADCSRA, ADPS2);
    13c8:	ea e7       	ldi	r30, 0x7A	; 122
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	84 60       	ori	r24, 0x04	; 4
    13d0:	80 83       	st	Z, r24
	//sbi(ADCSRA, ADPS1);
	//sbi(ADCSRA, ADPS0);
	
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    13d2:	80 81       	ld	r24, Z
    13d4:	80 68       	ori	r24, 0x80	; 128
    13d6:	80 83       	st	Z, r24
	
	//set the reference voltage as AVCC
	//set the Left adjust result
	//keeping last 3bits as 0, because for the default pin selection as ADC0
	ADMUX = 0b01100000;
    13d8:	80 e6       	ldi	r24, 0x60	; 96
    13da:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	
	// the bootloader connects pins 0 and 1 to the USART; disconnect them
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
	UCSR0B = 0;
    13de:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    13e2:	08 95       	ret

000013e4 <main>:


int main(void)
{	
	//This function is from arduino...need to edit
	initialize_Things();
    13e4:	0e 94 b7 09 	call	0x136e	; 0x136e <_Z17initialize_Thingsv>
	//sei();

	fname_temp[1] = '.';fname_temp[2] = 'W';fname_temp[3] = 'A';fname_temp[4] = 'V';
    13e8:	ed e4       	ldi	r30, 0x4D	; 77
    13ea:	f2 e0       	ldi	r31, 0x02	; 2
    13ec:	8e e2       	ldi	r24, 0x2E	; 46
    13ee:	81 83       	std	Z+1, r24	; 0x01
    13f0:	87 e5       	ldi	r24, 0x57	; 87
    13f2:	82 83       	std	Z+2, r24	; 0x02
    13f4:	81 e4       	ldi	r24, 0x41	; 65
    13f6:	83 83       	std	Z+3, r24	; 0x03
    13f8:	86 e5       	ldi	r24, 0x56	; 86
    13fa:	84 83       	std	Z+4, r24	; 0x04

	//PORTD FOR KEYS
	DDRD = 0b00000000;
    13fc:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0b11111111;
    13fe:	8f ef       	ldi	r24, 0xFF	; 255
    1400:	8b b9       	out	0x0b, r24	; 11
	
	//CONFIGURING PINS FOR ANALOG INPUT
	DDRC &= 0b11110100;	
    1402:	87 b1       	in	r24, 0x07	; 7
    1404:	84 7f       	andi	r24, 0xF4	; 244
    1406:	87 b9       	out	0x07, r24	; 7
	//analogRead_config();
	
	//CONFIGURING SPEAKER FOR OUTPUT
	DDRB |= (1<<DDB1);
    1408:	84 b1       	in	r24, 0x04	; 4
    140a:	82 60       	ori	r24, 0x02	; 2
    140c:	84 b9       	out	0x04, r24	; 4
	//analogWrite_config();
	OCR1A = 0;
    140e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1412:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	//BEGIN THE LCD
	lcd.begin();
    1416:	85 e4       	ldi	r24, 0x45	; 69
    1418:	92 e0       	ldi	r25, 0x02	; 2
    141a:	0e 94 94 03 	call	0x728	; 0x728 <_ZN9LCDScreen5beginEv>
	
	//INITIALIZING THE SD CARD
	if (!SD.begin(sdcard))
    141e:	6a e0       	ldi	r22, 0x0A	; 10
    1420:	87 e6       	ldi	r24, 0x67	; 103
    1422:	92 e0       	ldi	r25, 0x02	; 2
    1424:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <_ZN5SDLib7SDClass5beginEh>
    1428:	81 11       	cpse	r24, r1
    142a:	05 c0       	rjmp	.+10     	; 0x1436 <main+0x52>
	{
		clrDisplay("Error");
    142c:	89 e9       	ldi	r24, 0x99	; 153
    142e:	91 e0       	ldi	r25, 0x01	; 1
    1430:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
    1434:	ff cf       	rjmp	.-2      	; 0x1434 <main+0x50>
		while (1);
	}
	
	getTrackList();
    1436:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_Z12getTrackListv>
    143a:	2f ef       	ldi	r18, 0xFF	; 255
    143c:	83 ed       	ldi	r24, 0xD3	; 211
    143e:	90 e3       	ldi	r25, 0x30	; 48
    1440:	21 50       	subi	r18, 0x01	; 1
    1442:	80 40       	sbci	r24, 0x00	; 0
    1444:	90 40       	sbci	r25, 0x00	; 0
    1446:	e1 f7       	brne	.-8      	; 0x1440 <main+0x5c>
    1448:	00 c0       	rjmp	.+0      	; 0x144a <main+0x66>
    144a:	00 00       	nop

		  
		  

		  //>-------------------------------< RECORD MODE (LEVEL 1)>--------------------------------<
		  if (mode == 's' && mode_ == 'j')
    144c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <mode>
    1450:	83 37       	cpi	r24, 0x73	; 115
    1452:	59 f4       	brne	.+22     	; 0x146a <main+0x86>
    1454:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode_>
    1458:	8a 36       	cpi	r24, 0x6A	; 106
    145a:	39 f4       	brne	.+14     	; 0x146a <main+0x86>
		  {
			record();
    145c:	0e 94 f7 07 	call	0xfee	; 0xfee <_Z6recordv>
			getTrackList();
    1460:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_Z12getTrackListv>
			mode = 'i';
    1464:	89 e6       	ldi	r24, 0x69	; 105
    1466:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <mode>
		  }

		  //>--------------------------< ENTERING PLAYER MODE (LEVEL 1)>----------------------------<

		  if (mode == 'p' && mode_ == 'j')
    146a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <mode>
    146e:	80 37       	cpi	r24, 0x70	; 112
    1470:	c1 f5       	brne	.+112    	; 0x14e2 <main+0xfe>
    1472:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode_>
    1476:	8a 36       	cpi	r24, 0x6A	; 106
    1478:	a1 f5       	brne	.+104    	; 0x14e2 <main+0xfe>
		  {
			mode_ = 'k';
    147a:	8b e6       	ldi	r24, 0x6B	; 107
    147c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mode_>
			mode = 'i';
    1480:	89 e6       	ldi	r24, 0x69	; 105
    1482:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <mode>
			  Press 'Play/Stop' when a track is loaded to the player
			  Press 'Play/Stop' to stop playing
			  Press 'next' or 'previous' to toggle between tracks
			  Press 'record/stop' in track loaded mode to exit player mode
			*/
			if (files == 0)
    1486:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <files>
    148a:	81 11       	cpse	r24, r1
    148c:	11 c0       	rjmp	.+34     	; 0x14b0 <main+0xcc>
			{
			  mode_ = 'j';
    148e:	8a e6       	ldi	r24, 0x6A	; 106
    1490:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mode_>
			  clrDisplay("No Tracks");
    1494:	8e ec       	ldi	r24, 0xCE	; 206
    1496:	91 e0       	ldi	r25, 0x01	; 1
    1498:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
    149c:	2f ef       	ldi	r18, 0xFF	; 255
    149e:	83 ed       	ldi	r24, 0xD3	; 211
    14a0:	90 e3       	ldi	r25, 0x30	; 48
    14a2:	21 50       	subi	r18, 0x01	; 1
    14a4:	80 40       	sbci	r24, 0x00	; 0
    14a6:	90 40       	sbci	r25, 0x00	; 0
    14a8:	e1 f7       	brne	.-8      	; 0x14a2 <main+0xbe>
    14aa:	00 c0       	rjmp	.+0      	; 0x14ac <main+0xc8>
    14ac:	00 00       	nop
    14ae:	19 c0       	rjmp	.+50     	; 0x14e2 <main+0xfe>
			  _delay_ms(1000);
			}
			else
			{
				clrDisplay("Ready to Play");
    14b0:	88 ed       	ldi	r24, 0xD8	; 216
    14b2:	91 e0       	ldi	r25, 0x01	; 1
    14b4:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
    14b8:	2f ef       	ldi	r18, 0xFF	; 255
    14ba:	83 ed       	ldi	r24, 0xD3	; 211
    14bc:	90 e3       	ldi	r25, 0x30	; 48
    14be:	21 50       	subi	r18, 0x01	; 1
    14c0:	80 40       	sbci	r24, 0x00	; 0
    14c2:	90 40       	sbci	r25, 0x00	; 0
    14c4:	e1 f7       	brne	.-8      	; 0x14be <main+0xda>
    14c6:	00 c0       	rjmp	.+0      	; 0x14c8 <main+0xe4>
    14c8:	00 00       	nop
			  
			  _delay_ms(1000);
			  
			  //fname_temp = String(tracks[fcount]) + ".WAV";
			  //setFileName(tracks[fcount],"",".WAV");
			  fname_temp[0] = tracks[fcount];
    14ca:	e0 91 54 02 	lds	r30, 0x0254	; 0x800254 <fcount>
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	ea 5a       	subi	r30, 0xAA	; 170
    14d2:	fd 4f       	sbci	r31, 0xFD	; 253
    14d4:	80 81       	ld	r24, Z
    14d6:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <fname_temp>
			  secondLine(fname_temp);
    14da:	8d e4       	ldi	r24, 0x4D	; 77
    14dc:	92 e0       	ldi	r25, 0x02	; 2
    14de:	0e 94 41 04 	call	0x882	; 0x882 <_Z10secondLinePKc>
			}
		  }
		  //>--------------------------< PLAYER MODE (LEVEL 2)>------------------------------------<
		  if (mode_ == 'k')
    14e2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode_>
    14e6:	8b 36       	cpi	r24, 0x6B	; 107
    14e8:	09 f0       	breq	.+2      	; 0x14ec <main+0x108>
    14ea:	83 c0       	rjmp	.+262    	; 0x15f2 <main+0x20e>
		  {
			  while (1)
			  {
				  char key_input = keyInput();
    14ec:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_Z8keyInputv>
				  if (key_input)
    14f0:	88 23       	and	r24, r24
    14f2:	e1 f3       	breq	.-8      	; 0x14ec <main+0x108>
				  {
					  mode = key_input;
    14f4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <mode>
					  break;
				  }
			  }
			if (mode == 'p')
    14f8:	80 37       	cpi	r24, 0x70	; 112
    14fa:	39 f4       	brne	.+14     	; 0x150a <main+0x126>
			{
			  //Play the track
			  playTrack();
    14fc:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <_Z9playTrackv>
			  
			  clrDisplay("Ready to Play");
    1500:	88 ed       	ldi	r24, 0xD8	; 216
    1502:	91 e0       	ldi	r25, 0x01	; 1
    1504:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
    1508:	6d c0       	rjmp	.+218    	; 0x15e4 <main+0x200>
			  
			  //setFileName(tracks[fcount],"",".WAV");
			  //secondLine(fname_temp);
			}
			else if (mode == '>')
    150a:	8e 33       	cpi	r24, 0x3E	; 62
    150c:	19 f4       	brne	.+6      	; 0x1514 <main+0x130>
			{
			  //Load the next track
			  nextTrack();
    150e:	0e 94 85 04 	call	0x90a	; 0x90a <_Z9nextTrackv>
    1512:	68 c0       	rjmp	.+208    	; 0x15e4 <main+0x200>
			}
			else if (mode == '<')
    1514:	8c 33       	cpi	r24, 0x3C	; 60
    1516:	19 f4       	brne	.+6      	; 0x151e <main+0x13a>
			{
			  //load the previous track
			  previousTrack();
    1518:	0e 94 9b 04 	call	0x936	; 0x936 <_Z13previousTrackv>
    151c:	63 c0       	rjmp	.+198    	; 0x15e4 <main+0x200>
			}
			else if (mode == 's')
    151e:	83 37       	cpi	r24, 0x73	; 115
    1520:	39 f4       	brne	.+14     	; 0x1530 <main+0x14c>
			{
			  //Exit from player mode
			  mode_ = 'j';
    1522:	8a e6       	ldi	r24, 0x6A	; 106
    1524:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mode_>
			  mode = 'i';
    1528:	89 e6       	ldi	r24, 0x69	; 105
    152a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <mode>
    152e:	5a c0       	rjmp	.+180    	; 0x15e4 <main+0x200>
			}
			else if (mode == 'd')
    1530:	84 36       	cpi	r24, 0x64	; 100
    1532:	09 f0       	breq	.+2      	; 0x1536 <main+0x152>
    1534:	57 c0       	rjmp	.+174    	; 0x15e4 <main+0x200>
			{
			  //This mode deletes the track loaded in payer
			  clrDisplay("Delete?");
    1536:	86 ee       	ldi	r24, 0xE6	; 230
    1538:	91 e0       	ldi	r25, 0x01	; 1
    153a:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
			  //secondLine("DELETE");
			  while (true)
			  {
				char key = keyInput();
    153e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_Z8keyInputv>
				if (key && key == 'd')
    1542:	84 36       	cpi	r24, 0x64	; 100
    1544:	f9 f4       	brne	.+62     	; 0x1584 <main+0x1a0>
				{
				  SD.remove(fname_temp);
    1546:	6d e4       	ldi	r22, 0x4D	; 77
    1548:	72 e0       	ldi	r23, 0x02	; 2
    154a:	87 e6       	ldi	r24, 0x67	; 103
    154c:	92 e0       	ldi	r25, 0x02	; 2
    154e:	0e 94 03 10 	call	0x2006	; 0x2006 <_ZN5SDLib7SDClass6removeEPKc>
				  clrDisplay("Deleted");
    1552:	82 ef       	ldi	r24, 0xF2	; 242
    1554:	91 e0       	ldi	r25, 0x01	; 1
    1556:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
				  getTrackList();
    155a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_Z12getTrackListv>
				  
				  if(fcount == files){
    155e:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <fcount>
    1562:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <files>
    1566:	89 13       	cpse	r24, r25
    1568:	03 c0       	rjmp	.+6      	; 0x1570 <main+0x18c>
					  fcount--;
    156a:	81 50       	subi	r24, 0x01	; 1
    156c:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <fcount>
    1570:	2f ef       	ldi	r18, 0xFF	; 255
    1572:	83 ed       	ldi	r24, 0xD3	; 211
    1574:	90 e3       	ldi	r25, 0x30	; 48
    1576:	21 50       	subi	r18, 0x01	; 1
    1578:	80 40       	sbci	r24, 0x00	; 0
    157a:	90 40       	sbci	r25, 0x00	; 0
    157c:	e1 f7       	brne	.-8      	; 0x1576 <main+0x192>
    157e:	00 c0       	rjmp	.+0      	; 0x1580 <main+0x19c>
    1580:	00 00       	nop
    1582:	0f c0       	rjmp	.+30     	; 0x15a2 <main+0x1be>
				  }
				  
				  _delay_ms(1000);
				  break;
				}
				else if (key=='p')
    1584:	80 37       	cpi	r24, 0x70	; 112
    1586:	d9 f6       	brne	.-74     	; 0x153e <main+0x15a>
				{
				  clrDisplay("Not Deleted");
    1588:	8e ee       	ldi	r24, 0xEE	; 238
    158a:	91 e0       	ldi	r25, 0x01	; 1
    158c:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
    1590:	2f ef       	ldi	r18, 0xFF	; 255
    1592:	83 ed       	ldi	r24, 0xD3	; 211
    1594:	90 e3       	ldi	r25, 0x30	; 48
    1596:	21 50       	subi	r18, 0x01	; 1
    1598:	80 40       	sbci	r24, 0x00	; 0
    159a:	90 40       	sbci	r25, 0x00	; 0
    159c:	e1 f7       	brne	.-8      	; 0x1596 <main+0x1b2>
    159e:	00 c0       	rjmp	.+0      	; 0x15a0 <main+0x1bc>
    15a0:	00 00       	nop
				  _delay_ms(1000);
				  break;
				}
			  }

			  if (files == 0)
    15a2:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <files>
    15a6:	81 11       	cpse	r24, r1
    15a8:	11 c0       	rjmp	.+34     	; 0x15cc <main+0x1e8>
			  {
				clrDisplay("No Tracks");
    15aa:	8e ec       	ldi	r24, 0xCE	; 206
    15ac:	91 e0       	ldi	r25, 0x01	; 1
    15ae:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
    15b2:	2f ef       	ldi	r18, 0xFF	; 255
    15b4:	83 ed       	ldi	r24, 0xD3	; 211
    15b6:	90 e3       	ldi	r25, 0x30	; 48
    15b8:	21 50       	subi	r18, 0x01	; 1
    15ba:	80 40       	sbci	r24, 0x00	; 0
    15bc:	90 40       	sbci	r25, 0x00	; 0
    15be:	e1 f7       	brne	.-8      	; 0x15b8 <main+0x1d4>
    15c0:	00 c0       	rjmp	.+0      	; 0x15c2 <main+0x1de>
    15c2:	00 00       	nop
				_delay_ms(1000);
				mode_ = 'j';
    15c4:	8a e6       	ldi	r24, 0x6A	; 106
    15c6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mode_>
    15ca:	0c c0       	rjmp	.+24     	; 0x15e4 <main+0x200>
			  }
			  else{
				  clrDisplay("Ready to Play");
    15cc:	88 ed       	ldi	r24, 0xD8	; 216
    15ce:	91 e0       	ldi	r25, 0x01	; 1
    15d0:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
				  //fname_temp = String(tracks[fcount]) + ".WAV";
				  //setFileName(tracks[fcount],"",".WAV");
				  fname_temp[0] = tracks[fcount];
    15d4:	e0 91 54 02 	lds	r30, 0x0254	; 0x800254 <fcount>
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	ea 5a       	subi	r30, 0xAA	; 170
    15dc:	fd 4f       	sbci	r31, 0xFD	; 253
    15de:	80 81       	ld	r24, Z
    15e0:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <fname_temp>
				  //secondLine(fname_temp);
			  }
			}
			secondLine(fname_temp);
    15e4:	8d e4       	ldi	r24, 0x4D	; 77
    15e6:	92 e0       	ldi	r25, 0x02	; 2
    15e8:	0e 94 41 04 	call	0x882	; 0x882 <_Z10secondLinePKc>
			mode = 'i';
    15ec:	89 e6       	ldi	r24, 0x69	; 105
    15ee:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <mode>
		  }
		  //>-------------------------< PAUSE MODE (LEVEL 1)>--------------------------------------<
		  if (mode == 'i' && mode_ == 'j')
    15f2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <mode>
    15f6:	89 36       	cpi	r24, 0x69	; 105
    15f8:	09 f0       	breq	.+2      	; 0x15fc <main+0x218>
    15fa:	28 cf       	rjmp	.-432    	; 0x144c <main+0x68>
    15fc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode_>
    1600:	8a 36       	cpi	r24, 0x6A	; 106
    1602:	09 f0       	breq	.+2      	; 0x1606 <main+0x222>
    1604:	23 cf       	rjmp	.-442    	; 0x144c <main+0x68>
		  {
			clrDisplay("Voice Recorder");
    1606:	8a ef       	ldi	r24, 0xFA	; 250
    1608:	91 e0       	ldi	r25, 0x01	; 1
    160a:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
			while (1)
			{
				char key_input = keyInput();
    160e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_Z8keyInputv>
				if (key_input)
    1612:	88 23       	and	r24, r24
    1614:	e1 f3       	breq	.-8      	; 0x160e <main+0x22a>
				{
					mode = key_input;
    1616:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <mode>
    161a:	18 cf       	rjmp	.-464    	; 0x144c <main+0x68>

0000161c <_GLOBAL__sub_I_mode>:
	
	// the bootloader connects pins 0 and 1 to the USART; disconnect them
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
	UCSR0B = 0;
    161c:	6f ef       	ldi	r22, 0xFF	; 255
    161e:	7f ef       	ldi	r23, 0xFF	; 255
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z41__static_initialization_and_destruction_0ii>
    1628:	08 95       	ret

0000162a <_ZN5SDLib4File5writeEh>:
}

// a directory is a special type of file
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	1f 92       	push	r1
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	69 83       	std	Y+1, r22	; 0x01
    1636:	dc 01       	movw	r26, r24
    1638:	ed 91       	ld	r30, X+
    163a:	fc 91       	ld	r31, X
    163c:	02 80       	ldd	r0, Z+2	; 0x02
    163e:	f3 81       	ldd	r31, Z+3	; 0x03
    1640:	e0 2d       	mov	r30, r0
    1642:	41 e0       	ldi	r20, 0x01	; 1
    1644:	50 e0       	ldi	r21, 0x00	; 0
    1646:	be 01       	movw	r22, r28
    1648:	6f 5f       	subi	r22, 0xFF	; 255
    164a:	7f 4f       	sbci	r23, 0xFF	; 255
    164c:	09 95       	icall
    164e:	0f 90       	pop	r0
    1650:	df 91       	pop	r29
    1652:	cf 91       	pop	r28
    1654:	08 95       	ret

00001656 <_ZN5SDLib4File17availableForWriteEv>:
    1656:	dc 01       	movw	r26, r24
    1658:	59 96       	adiw	r26, 0x19	; 25
    165a:	8d 91       	ld	r24, X+
    165c:	9c 91       	ld	r25, X
    165e:	5a 97       	sbiw	r26, 0x1a	; 26
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	41 f0       	breq	.+16     	; 0x1674 <_ZN5SDLib4File17availableForWriteEv+0x1e>
    1664:	dc 01       	movw	r26, r24
    1666:	ed 91       	ld	r30, X+
    1668:	fc 91       	ld	r31, X
    166a:	04 80       	ldd	r0, Z+4	; 0x04
    166c:	f5 81       	ldd	r31, Z+5	; 0x05
    166e:	e0 2d       	mov	r30, r0
    1670:	09 95       	icall
    1672:	08 95       	ret
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	08 95       	ret

0000167a <_ZN5SDLib4File5writeEPKhj>:
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	dc 01       	movw	r26, r24
    1680:	59 96       	adiw	r26, 0x19	; 25
    1682:	ed 91       	ld	r30, X+
    1684:	fc 91       	ld	r31, X
    1686:	5a 97       	sbiw	r26, 0x1a	; 26
    1688:	30 97       	sbiw	r30, 0x00	; 0
    168a:	49 f4       	brne	.+18     	; 0x169e <_ZN5SDLib4File5writeEPKhj+0x24>
    168c:	21 e0       	ldi	r18, 0x01	; 1
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	13 96       	adiw	r26, 0x03	; 3
    1692:	3c 93       	st	X, r19
    1694:	2e 93       	st	-X, r18
    1696:	12 97       	sbiw	r26, 0x02	; 2
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	13 c0       	rjmp	.+38     	; 0x16c4 <_ZN5SDLib4File5writeEPKhj+0x4a>
    169e:	ec 01       	movw	r28, r24
    16a0:	13 82       	std	Z+3, r1	; 0x03
    16a2:	12 82       	std	Z+2, r1	; 0x02
    16a4:	89 8d       	ldd	r24, Y+25	; 0x19
    16a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    16a8:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <_ZN6SdFile5writeEPKvj>
    16ac:	e9 8d       	ldd	r30, Y+25	; 0x19
    16ae:	fa 8d       	ldd	r31, Y+26	; 0x1a
    16b0:	22 81       	ldd	r18, Z+2	; 0x02
    16b2:	33 81       	ldd	r19, Z+3	; 0x03
    16b4:	23 2b       	or	r18, r19
    16b6:	31 f0       	breq	.+12     	; 0x16c4 <_ZN5SDLib4File5writeEPKhj+0x4a>
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	9b 83       	std	Y+3, r25	; 0x03
    16be:	8a 83       	std	Y+2, r24	; 0x02
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	08 95       	ret

000016ca <_ZN5SDLib4File4readEv>:
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
    16ce:	1f 92       	push	r1
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	fc 01       	movw	r30, r24
    16d6:	81 8d       	ldd	r24, Z+25	; 0x19
    16d8:	92 8d       	ldd	r25, Z+26	; 0x1a
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	79 f0       	breq	.+30     	; 0x16fc <_ZN5SDLib4File4readEv+0x32>
    16de:	41 e0       	ldi	r20, 0x01	; 1
    16e0:	50 e0       	ldi	r21, 0x00	; 0
    16e2:	be 01       	movw	r22, r28
    16e4:	6f 5f       	subi	r22, 0xFF	; 255
    16e6:	7f 4f       	sbci	r23, 0xFF	; 255
    16e8:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN6SdFile4readEPvj>
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	19 f4       	brne	.+6      	; 0x16f6 <_ZN5SDLib4File4readEv+0x2c>
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	05 c0       	rjmp	.+10     	; 0x1700 <_ZN5SDLib4File4readEv+0x36>
    16f6:	8f ef       	ldi	r24, 0xFF	; 255
    16f8:	9f ef       	ldi	r25, 0xFF	; 255
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <_ZN5SDLib4File4readEv+0x36>
    16fc:	8f ef       	ldi	r24, 0xFF	; 255
    16fe:	9f ef       	ldi	r25, 0xFF	; 255
    1700:	0f 90       	pop	r0
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	08 95       	ret

00001708 <_ZN5SDLib4File4peekEv>:
    1708:	ef 92       	push	r14
    170a:	ff 92       	push	r15
    170c:	0f 93       	push	r16
    170e:	1f 93       	push	r17
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	1f 92       	push	r1
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	fc 01       	movw	r30, r24
    171c:	81 8d       	ldd	r24, Z+25	; 0x19
    171e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	19 f1       	breq	.+70     	; 0x176a <_ZN5SDLib4File4peekEv+0x62>
    1724:	8f 01       	movw	r16, r30
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	50 e0       	ldi	r21, 0x00	; 0
    172a:	be 01       	movw	r22, r28
    172c:	6f 5f       	subi	r22, 0xFF	; 255
    172e:	7f 4f       	sbci	r23, 0xFF	; 255
    1730:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN6SdFile4readEPvj>
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	19 f4       	brne	.+6      	; 0x173e <_ZN5SDLib4File4peekEv+0x36>
    1738:	e9 80       	ldd	r14, Y+1	; 0x01
    173a:	f1 2c       	mov	r15, r1
    173c:	03 c0       	rjmp	.+6      	; 0x1744 <_ZN5SDLib4File4peekEv+0x3c>
    173e:	ee 24       	eor	r14, r14
    1740:	ea 94       	dec	r14
    1742:	fe 2c       	mov	r15, r14
    1744:	8f ef       	ldi	r24, 0xFF	; 255
    1746:	e8 16       	cp	r14, r24
    1748:	f8 06       	cpc	r15, r24
    174a:	89 f0       	breq	.+34     	; 0x176e <_ZN5SDLib4File4peekEv+0x66>
    174c:	f8 01       	movw	r30, r16
    174e:	81 8d       	ldd	r24, Z+25	; 0x19
    1750:	92 8d       	ldd	r25, Z+26	; 0x1a
    1752:	fc 01       	movw	r30, r24
    1754:	42 85       	ldd	r20, Z+10	; 0x0a
    1756:	53 85       	ldd	r21, Z+11	; 0x0b
    1758:	64 85       	ldd	r22, Z+12	; 0x0c
    175a:	75 85       	ldd	r23, Z+13	; 0x0d
    175c:	41 50       	subi	r20, 0x01	; 1
    175e:	51 09       	sbc	r21, r1
    1760:	61 09       	sbc	r22, r1
    1762:	71 09       	sbc	r23, r1
    1764:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <_ZN6SdFile7seekSetEm>
    1768:	02 c0       	rjmp	.+4      	; 0x176e <_ZN5SDLib4File4peekEv+0x66>
    176a:	e1 2c       	mov	r14, r1
    176c:	f1 2c       	mov	r15, r1
    176e:	c7 01       	movw	r24, r14
    1770:	0f 90       	pop	r0
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	1f 91       	pop	r17
    1778:	0f 91       	pop	r16
    177a:	ff 90       	pop	r15
    177c:	ef 90       	pop	r14
    177e:	08 95       	ret

00001780 <_ZN5SDLib4File5flushEv>:
    1780:	fc 01       	movw	r30, r24
    1782:	81 8d       	ldd	r24, Z+25	; 0x19
    1784:	92 8d       	ldd	r25, Z+26	; 0x1a
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	19 f0       	breq	.+6      	; 0x1790 <_ZN5SDLib4File5flushEv+0x10>
    178a:	61 e0       	ldi	r22, 0x01	; 1
    178c:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <_ZN6SdFile4syncEh>
    1790:	08 95       	ret

00001792 <_ZN5SDLib4FileC1E6SdFilePKc>:
    1792:	ef 92       	push	r14
    1794:	ff 92       	push	r15
    1796:	0f 93       	push	r16
    1798:	1f 93       	push	r17
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	ec 01       	movw	r28, r24
    17a0:	7b 01       	movw	r14, r22
    17a2:	8a 01       	movw	r16, r20
    17a4:	1b 82       	std	Y+3, r1	; 0x03
    17a6:	1a 82       	std	Y+2, r1	; 0x02
    17a8:	88 ee       	ldi	r24, 0xE8	; 232
    17aa:	93 e0       	ldi	r25, 0x03	; 3
    17ac:	a0 e0       	ldi	r26, 0x00	; 0
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	8c 83       	std	Y+4, r24	; 0x04
    17b2:	9d 83       	std	Y+5, r25	; 0x05
    17b4:	ae 83       	std	Y+6, r26	; 0x06
    17b6:	bf 83       	std	Y+7, r27	; 0x07
    17b8:	8d e0       	ldi	r24, 0x0D	; 13
    17ba:	92 e0       	ldi	r25, 0x02	; 2
    17bc:	99 83       	std	Y+1, r25	; 0x01
    17be:	88 83       	st	Y, r24
    17c0:	8d e1       	ldi	r24, 0x1D	; 29
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <malloc>
    17c8:	9a 8f       	std	Y+26, r25	; 0x1a
    17ca:	89 8f       	std	Y+25, r24	; 0x19
    17cc:	00 97       	sbiw	r24, 0x00	; 0
    17ce:	79 f0       	breq	.+30     	; 0x17ee <_ZN5SDLib4FileC1E6SdFilePKc+0x5c>
    17d0:	2d e1       	ldi	r18, 0x1D	; 29
    17d2:	f7 01       	movw	r30, r14
    17d4:	dc 01       	movw	r26, r24
    17d6:	01 90       	ld	r0, Z+
    17d8:	0d 92       	st	X+, r0
    17da:	2a 95       	dec	r18
    17dc:	e1 f7       	brne	.-8      	; 0x17d6 <_ZN5SDLib4FileC1E6SdFilePKc+0x44>
    17de:	4c e0       	ldi	r20, 0x0C	; 12
    17e0:	50 e0       	ldi	r21, 0x00	; 0
    17e2:	b8 01       	movw	r22, r16
    17e4:	ce 01       	movw	r24, r28
    17e6:	0c 96       	adiw	r24, 0x0c	; 12
    17e8:	0e 94 3a 29 	call	0x5274	; 0x5274 <strncpy>
    17ec:	18 8e       	std	Y+24, r1	; 0x18
    17ee:	df 91       	pop	r29
    17f0:	cf 91       	pop	r28
    17f2:	1f 91       	pop	r17
    17f4:	0f 91       	pop	r16
    17f6:	ff 90       	pop	r15
    17f8:	ef 90       	pop	r14
    17fa:	08 95       	ret

000017fc <_ZN5SDLib4FileC1Ev>:
    17fc:	fc 01       	movw	r30, r24
    17fe:	13 82       	std	Z+3, r1	; 0x03
    1800:	12 82       	std	Z+2, r1	; 0x02
    1802:	88 ee       	ldi	r24, 0xE8	; 232
    1804:	93 e0       	ldi	r25, 0x03	; 3
    1806:	a0 e0       	ldi	r26, 0x00	; 0
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	84 83       	std	Z+4, r24	; 0x04
    180c:	95 83       	std	Z+5, r25	; 0x05
    180e:	a6 83       	std	Z+6, r26	; 0x06
    1810:	b7 83       	std	Z+7, r27	; 0x07
    1812:	8d e0       	ldi	r24, 0x0D	; 13
    1814:	92 e0       	ldi	r25, 0x02	; 2
    1816:	91 83       	std	Z+1, r25	; 0x01
    1818:	80 83       	st	Z, r24
    181a:	12 8e       	std	Z+26, r1	; 0x1a
    181c:	11 8e       	std	Z+25, r1	; 0x19
    181e:	14 86       	std	Z+12, r1	; 0x0c
    1820:	08 95       	ret

00001822 <_ZN5SDLib4File4readEPvj>:
  return -1;
}

// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
  if (_file) {
    1822:	fc 01       	movw	r30, r24
    1824:	81 8d       	ldd	r24, Z+25	; 0x19
    1826:	92 8d       	ldd	r25, Z+26	; 0x1a
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	19 f0       	breq	.+6      	; 0x1832 <_ZN5SDLib4File4readEPvj+0x10>
    return _file->read(buf, nbyte);
    182c:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN6SdFile4readEPvj>
    1830:	08 95       	ret
  }
  return 0;
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
}
    1836:	08 95       	ret

00001838 <_ZN5SDLib4File4seekEm>:
    _file->sync();
  }
}

boolean File::seek(uint32_t pos) {
  if (! _file) {
    1838:	fc 01       	movw	r30, r24
    183a:	81 8d       	ldd	r24, Z+25	; 0x19
    183c:	92 8d       	ldd	r25, Z+26	; 0x1a
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	39 f0       	breq	.+14     	; 0x1850 <_ZN5SDLib4File4seekEm+0x18>
    return false;
  }

  return _file->seekSet(pos);
    1842:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <_ZN6SdFile7seekSetEm>
    1846:	91 e0       	ldi	r25, 0x01	; 1
    1848:	81 11       	cpse	r24, r1
    184a:	03 c0       	rjmp	.+6      	; 0x1852 <_ZN5SDLib4File4seekEm+0x1a>
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	01 c0       	rjmp	.+2      	; 0x1852 <_ZN5SDLib4File4seekEm+0x1a>
  }
}

boolean File::seek(uint32_t pos) {
  if (! _file) {
    return false;
    1850:	90 e0       	ldi	r25, 0x00	; 0
  }

  return _file->seekSet(pos);
}
    1852:	89 2f       	mov	r24, r25
    1854:	08 95       	ret

00001856 <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) {
    1856:	dc 01       	movw	r26, r24
    1858:	59 96       	adiw	r26, 0x19	; 25
    185a:	ed 91       	ld	r30, X+
    185c:	fc 91       	ld	r31, X
    185e:	5a 97       	sbiw	r26, 0x1a	; 26
    1860:	30 97       	sbiw	r30, 0x00	; 0
    1862:	29 f0       	breq	.+10     	; 0x186e <_ZN5SDLib4File8positionEv+0x18>
    uint32_t curCluster(void) const {
      return curCluster_;
    }
    /** \return The current position for a file or directory. */
    uint32_t curPosition(void) const {
      return curPosition_;
    1864:	62 85       	ldd	r22, Z+10	; 0x0a
    1866:	73 85       	ldd	r23, Z+11	; 0x0b
    1868:	84 85       	ldd	r24, Z+12	; 0x0c
    186a:	95 85       	ldd	r25, Z+13	; 0x0d
    return -1;
  }
  return _file->curPosition();
    186c:	08 95       	ret
  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) {
    return -1;
    186e:	6f ef       	ldi	r22, 0xFF	; 255
    1870:	7f ef       	ldi	r23, 0xFF	; 255
    1872:	cb 01       	movw	r24, r22
  }
  return _file->curPosition();
}
    1874:	08 95       	ret

00001876 <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) {
    1876:	dc 01       	movw	r26, r24
    1878:	59 96       	adiw	r26, 0x19	; 25
    187a:	ed 91       	ld	r30, X+
    187c:	fc 91       	ld	r31, X
    187e:	5a 97       	sbiw	r26, 0x1a	; 26
    1880:	30 97       	sbiw	r30, 0x00	; 0
    1882:	29 f0       	breq	.+10     	; 0x188e <_ZN5SDLib4File4sizeEv+0x18>
      return dirIndex_;
    }
    static void dirName(const dir_t& dir, char* name);
    /** \return The total number of bytes in a file or directory. */
    uint32_t fileSize(void) const {
      return fileSize_;
    1884:	63 89       	ldd	r22, Z+19	; 0x13
    1886:	74 89       	ldd	r23, Z+20	; 0x14
    1888:	85 89       	ldd	r24, Z+21	; 0x15
    188a:	96 89       	ldd	r25, Z+22	; 0x16
    return 0;
  }
  return _file->fileSize();
    188c:	08 95       	ret
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) {
    return 0;
    188e:	60 e0       	ldi	r22, 0x00	; 0
    1890:	70 e0       	ldi	r23, 0x00	; 0
    1892:	cb 01       	movw	r24, r22
  }
  return _file->fileSize();
}
    1894:	08 95       	ret

00001896 <_ZN5SDLib4File9availableEv>:
    return _file->read(buf, nbyte);
  }
  return 0;
}

int File::available() {
    1896:	cf 92       	push	r12
    1898:	df 92       	push	r13
    189a:	ef 92       	push	r14
    189c:	ff 92       	push	r15
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
  if (! _file) {
    18a2:	fc 01       	movw	r30, r24
    18a4:	21 8d       	ldd	r18, Z+25	; 0x19
    18a6:	32 8d       	ldd	r19, Z+26	; 0x1a
    18a8:	23 2b       	or	r18, r19
    18aa:	d9 f0       	breq	.+54     	; 0x18e2 <_ZN5SDLib4File9availableEv+0x4c>
    18ac:	ec 01       	movw	r28, r24
    return 0;
  }

  uint32_t n = size() - position();
    18ae:	0e 94 3b 0c 	call	0x1876	; 0x1876 <_ZN5SDLib4File4sizeEv>
    18b2:	6b 01       	movw	r12, r22
    18b4:	7c 01       	movw	r14, r24
    18b6:	ce 01       	movw	r24, r28
    18b8:	0e 94 2b 0c 	call	0x1856	; 0x1856 <_ZN5SDLib4File8positionEv>

  return n > 0X7FFF ? 0X7FFF : n;
    18bc:	a7 01       	movw	r20, r14
    18be:	96 01       	movw	r18, r12
    18c0:	26 1b       	sub	r18, r22
    18c2:	37 0b       	sbc	r19, r23
    18c4:	48 0b       	sbc	r20, r24
    18c6:	59 0b       	sbc	r21, r25
    18c8:	da 01       	movw	r26, r20
    18ca:	c9 01       	movw	r24, r18
    18cc:	81 15       	cp	r24, r1
    18ce:	30 e8       	ldi	r19, 0x80	; 128
    18d0:	93 07       	cpc	r25, r19
    18d2:	a1 05       	cpc	r26, r1
    18d4:	b1 05       	cpc	r27, r1
    18d6:	38 f0       	brcs	.+14     	; 0x18e6 <_ZN5SDLib4File9availableEv+0x50>
    18d8:	8f ef       	ldi	r24, 0xFF	; 255
    18da:	9f e7       	ldi	r25, 0x7F	; 127
    18dc:	a0 e0       	ldi	r26, 0x00	; 0
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <_ZN5SDLib4File9availableEv+0x50>
  return 0;
}

int File::available() {
  if (! _file) {
    return 0;
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e0       	ldi	r25, 0x00	; 0
  }

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
    18e6:	df 91       	pop	r29
    18e8:	cf 91       	pop	r28
    18ea:	ff 90       	pop	r15
    18ec:	ef 90       	pop	r14
    18ee:	df 90       	pop	r13
    18f0:	cf 90       	pop	r12
    18f2:	08 95       	ret

000018f4 <_ZN5SDLib4File5closeEv>:
    return 0;
  }
  return _file->fileSize();
}

void File::close() {
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	fc 01       	movw	r30, r24
  if (_file) {
    18fa:	81 8d       	ldd	r24, Z+25	; 0x19
    18fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    18fe:	00 97       	sbiw	r24, 0x00	; 0
    1900:	49 f0       	breq	.+18     	; 0x1914 <_ZN5SDLib4File5closeEv+0x20>
    1902:	ef 01       	movw	r28, r30
    _file->close();
    1904:	0e 94 81 17 	call	0x2f02	; 0x2f02 <_ZN6SdFile5closeEv>
    free(_file);
    1908:	89 8d       	ldd	r24, Y+25	; 0x19
    190a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    190c:	0e 94 94 28 	call	0x5128	; 0x5128 <free>
    _file = 0;
    1910:	1a 8e       	std	Y+26, r1	; 0x1a
    1912:	19 8e       	std	Y+25, r1	; 0x19
      nfilecount--;
      Serial.print("Deleted ");
      Serial.println(nfilecount, DEC);
    */
  }
}
    1914:	df 91       	pop	r29
    1916:	cf 91       	pop	r28
    1918:	08 95       	ret

0000191a <_ZN5SDLib4FilecvbEv>:

File::operator bool() {
  if (_file) {
    191a:	dc 01       	movw	r26, r24
    191c:	59 96       	adiw	r26, 0x19	; 25
    191e:	ed 91       	ld	r30, X+
    1920:	fc 91       	ld	r31, X
    1922:	5a 97       	sbiw	r26, 0x1a	; 26
    1924:	30 97       	sbiw	r30, 0x00	; 0
    1926:	31 f0       	breq	.+12     	; 0x1934 <_ZN5SDLib4FilecvbEv+0x1a>
    uint8_t isFile(void) const {
      return type_ == FAT_FILE_TYPE_NORMAL;
    }
    /** \return True if this is a SdFile for an open file/directory else false. */
    uint8_t isOpen(void) const {
      return type_ != FAT_FILE_TYPE_CLOSED;
    1928:	95 81       	ldd	r25, Z+5	; 0x05
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	91 11       	cpse	r25, r1
    192e:	03 c0       	rjmp	.+6      	; 0x1936 <_ZN5SDLib4FilecvbEv+0x1c>
    1930:	80 e0       	ldi	r24, 0x00	; 0
    return  _file->isOpen();
    1932:	08 95       	ret
  }
  return false;
    1934:	80 e0       	ldi	r24, 0x00	; 0
}
    1936:	08 95       	ret

00001938 <_Z41__static_initialization_and_destruction_0ii>:

  void File::rewindDirectory(void) {
    if (isDirectory()) {
      _file->rewind();
    }
  }
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	c9 f4       	brne	.+50     	; 0x196e <_Z41__static_initialization_and_destruction_0ii+0x36>
    193c:	6f 3f       	cpi	r22, 0xFF	; 255
    193e:	7f 4f       	sbci	r23, 0xFF	; 255
    1940:	b1 f4       	brne	.+44     	; 0x196e <_Z41__static_initialization_and_destruction_0ii+0x36>
    1942:	e7 e6       	ldi	r30, 0x67	; 103
    1944:	f2 e0       	ldi	r31, 0x02	; 2
    1946:	15 82       	std	Z+5, r1	; 0x05
    1948:	16 82       	std	Z+6, r1	; 0x06
    194a:	11 86       	std	Z+9, r1	; 0x09
    194c:	13 86       	std	Z+11, r1	; 0x0b
    194e:	82 e0       	ldi	r24, 0x02	; 2
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	a0 e0       	ldi	r26, 0x00	; 0
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	84 87       	std	Z+12, r24	; 0x0c
    1958:	95 87       	std	Z+13, r25	; 0x0d
    195a:	a6 87       	std	Z+14, r26	; 0x0e
    195c:	b7 87       	std	Z+15, r27	; 0x0f
    195e:	13 a2       	std	Z+35, r1	; 0x23
    1960:	15 a6       	std	Z+45, r1	; 0x2d
    1962:	14 a6       	std	Z+44, r1	; 0x2c
    1964:	81 e2       	ldi	r24, 0x21	; 33
    1966:	92 e0       	ldi	r25, 0x02	; 2
    1968:	93 a7       	std	Z+43, r25	; 0x2b
    196a:	82 a7       	std	Z+42, r24	; 0x2a
    196c:	17 a6       	std	Z+47, r1	; 0x2f
    196e:	08 95       	ret

00001970 <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv>:
    1970:	1f 93       	push	r17
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	6d 97       	sbiw	r28, 0x1d	; 29
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	f8 94       	cli
    1980:	de bf       	out	0x3e, r29	; 62
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	cd bf       	out	0x3d, r28	; 61
    1986:	ab 01       	movw	r20, r22
    1988:	1c 82       	std	Y+4, r1	; 0x04
    198a:	1b 82       	std	Y+3, r1	; 0x03
    198c:	21 e2       	ldi	r18, 0x21	; 33
    198e:	32 e0       	ldi	r19, 0x02	; 2
    1990:	3a 83       	std	Y+2, r19	; 0x02
    1992:	29 83       	std	Y+1, r18	; 0x01
    1994:	1e 82       	std	Y+6, r1	; 0x06
    1996:	21 e0       	ldi	r18, 0x01	; 1
    1998:	bc 01       	movw	r22, r24
    199a:	ce 01       	movw	r24, r28
    199c:	01 96       	adiw	r24, 0x01	; 1
    199e:	0e 94 32 19 	call	0x3264	; 0x3264 <_ZN6SdFile4openEPS_PKch>
    19a2:	11 e0       	ldi	r17, 0x01	; 1
    19a4:	81 11       	cpse	r24, r1
    19a6:	01 c0       	rjmp	.+2      	; 0x19aa <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv+0x3a>
    19a8:	10 e0       	ldi	r17, 0x00	; 0
    19aa:	88 23       	and	r24, r24
    19ac:	21 f0       	breq	.+8      	; 0x19b6 <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv+0x46>
    19ae:	ce 01       	movw	r24, r28
    19b0:	01 96       	adiw	r24, 0x01	; 1
    19b2:	0e 94 81 17 	call	0x2f02	; 0x2f02 <_ZN6SdFile5closeEv>
    19b6:	81 2f       	mov	r24, r17
    19b8:	6d 96       	adiw	r28, 0x1d	; 29
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	f8 94       	cli
    19be:	de bf       	out	0x3e, r29	; 62
    19c0:	0f be       	out	0x3f, r0	; 63
    19c2:	cd bf       	out	0x3d, r28	; 61
    19c4:	df 91       	pop	r29
    19c6:	cf 91       	pop	r28
    19c8:	1f 91       	pop	r17
    19ca:	08 95       	ret

000019cc <_ZN5SDLib15callback_removeER6SdFilePKcbPv>:
    19cc:	44 23       	and	r20, r20
    19ce:	39 f0       	breq	.+14     	; 0x19de <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x12>
    19d0:	0e 94 43 1a 	call	0x3486	; 0x3486 <_ZN6SdFile6removeEPS_PKc>
    19d4:	91 e0       	ldi	r25, 0x01	; 1
    19d6:	81 11       	cpse	r24, r1
    19d8:	03 c0       	rjmp	.+6      	; 0x19e0 <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x14>
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	01 c0       	rjmp	.+2      	; 0x19e0 <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x14>
    19de:	91 e0       	ldi	r25, 0x01	; 1
    19e0:	89 2f       	mov	r24, r25
    19e2:	08 95       	ret

000019e4 <_ZN5SDLib20getNextPathComponentEPKcPjPc>:
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	ec 01       	movw	r28, r24
    19ea:	db 01       	movw	r26, r22
    19ec:	ed 91       	ld	r30, X+
    19ee:	fc 91       	ld	r31, X
    19f0:	dc 01       	movw	r26, r24
    19f2:	ae 0f       	add	r26, r30
    19f4:	bf 1f       	adc	r27, r31
    19f6:	8c 91       	ld	r24, X
    19f8:	8f 32       	cpi	r24, 0x2F	; 47
    19fa:	09 f4       	brne	.+2      	; 0x19fe <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x1a>
    19fc:	31 96       	adiw	r30, 0x01	; 1
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	2c 30       	cpi	r18, 0x0C	; 12
    1a04:	31 05       	cpc	r19, r1
    1a06:	84 f4       	brge	.+32     	; 0x1a28 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x44>
    1a08:	de 01       	movw	r26, r28
    1a0a:	ae 0f       	add	r26, r30
    1a0c:	bf 1f       	adc	r27, r31
    1a0e:	9c 91       	ld	r25, X
    1a10:	9f 32       	cpi	r25, 0x2F	; 47
    1a12:	51 f0       	breq	.+20     	; 0x1a28 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x44>
    1a14:	99 23       	and	r25, r25
    1a16:	41 f0       	breq	.+16     	; 0x1a28 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x44>
    1a18:	da 01       	movw	r26, r20
    1a1a:	a2 0f       	add	r26, r18
    1a1c:	b3 1f       	adc	r27, r19
    1a1e:	31 96       	adiw	r30, 0x01	; 1
    1a20:	9c 93       	st	X, r25
    1a22:	2f 5f       	subi	r18, 0xFF	; 255
    1a24:	3f 4f       	sbci	r19, 0xFF	; 255
    1a26:	ed cf       	rjmp	.-38     	; 0x1a02 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x1e>
    1a28:	da 01       	movw	r26, r20
    1a2a:	a2 0f       	add	r26, r18
    1a2c:	b3 1f       	adc	r27, r19
    1a2e:	1c 92       	st	X, r1
    1a30:	de 01       	movw	r26, r28
    1a32:	ae 0f       	add	r26, r30
    1a34:	bf 1f       	adc	r27, r31
    1a36:	8c 91       	ld	r24, X
    1a38:	8f 32       	cpi	r24, 0x2F	; 47
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x5a>
    1a3c:	31 96       	adiw	r30, 0x01	; 1
    1a3e:	db 01       	movw	r26, r22
    1a40:	ed 93       	st	X+, r30
    1a42:	fc 93       	st	X, r31
    1a44:	ec 0f       	add	r30, r28
    1a46:	fd 1f       	adc	r31, r29
    1a48:	90 81       	ld	r25, Z
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	91 11       	cpse	r25, r1
    1a4e:	01 c0       	rjmp	.+2      	; 0x1a52 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x6e>
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	df 91       	pop	r29
    1a54:	cf 91       	pop	r28
    1a56:	08 95       	ret

00001a58 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>:
    1a58:	5f 92       	push	r5
    1a5a:	6f 92       	push	r6
    1a5c:	7f 92       	push	r7
    1a5e:	8f 92       	push	r8
    1a60:	9f 92       	push	r9
    1a62:	af 92       	push	r10
    1a64:	bf 92       	push	r11
    1a66:	cf 92       	push	r12
    1a68:	df 92       	push	r13
    1a6a:	ef 92       	push	r14
    1a6c:	ff 92       	push	r15
    1a6e:	0f 93       	push	r16
    1a70:	1f 93       	push	r17
    1a72:	cf 93       	push	r28
    1a74:	df 93       	push	r29
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	c9 54       	subi	r28, 0x49	; 73
    1a7c:	d1 09       	sbc	r29, r1
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	f8 94       	cli
    1a82:	de bf       	out	0x3e, r29	; 62
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	cd bf       	out	0x3d, r28	; 61
    1a88:	4c 01       	movw	r8, r24
    1a8a:	6b 01       	movw	r12, r22
    1a8c:	3a 01       	movw	r6, r20
    1a8e:	59 01       	movw	r10, r18
    1a90:	1c 82       	std	Y+4, r1	; 0x04
    1a92:	1b 82       	std	Y+3, r1	; 0x03
    1a94:	81 e2       	ldi	r24, 0x21	; 33
    1a96:	92 e0       	ldi	r25, 0x02	; 2
    1a98:	9a 83       	std	Y+2, r25	; 0x02
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	1e 82       	std	Y+6, r1	; 0x06
    1a9e:	19 a2       	std	Y+33, r1	; 0x21
    1aa0:	18 a2       	std	Y+32, r1	; 0x20
    1aa2:	9f 8f       	std	Y+31, r25	; 0x1f
    1aa4:	8e 8f       	std	Y+30, r24	; 0x1e
    1aa6:	1b a2       	std	Y+35, r1	; 0x23
    1aa8:	2a 96       	adiw	r28, 0x0a	; 10
    1aaa:	1f ae       	std	Y+63, r1	; 0x3f
    1aac:	1e ae       	std	Y+62, r1	; 0x3e
    1aae:	2a 97       	sbiw	r28, 0x0a	; 10
    1ab0:	8b 01       	movw	r16, r22
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	01 96       	adiw	r24, 0x01	; 1
    1ab6:	7c 01       	movw	r14, r24
    1ab8:	ae 01       	movw	r20, r28
    1aba:	45 5c       	subi	r20, 0xC5	; 197
    1abc:	5f 4f       	sbci	r21, 0xFF	; 255
    1abe:	be 01       	movw	r22, r28
    1ac0:	68 5b       	subi	r22, 0xB8	; 184
    1ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac4:	c4 01       	movw	r24, r8
    1ac6:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <_ZN5SDLib20getNextPathComponentEPKcPjPc>
    1aca:	58 2e       	mov	r5, r24
    1acc:	41 e0       	ldi	r20, 0x01	; 1
    1ace:	48 27       	eor	r20, r24
    1ad0:	95 01       	movw	r18, r10
    1ad2:	be 01       	movw	r22, r28
    1ad4:	65 5c       	subi	r22, 0xC5	; 197
    1ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad8:	c8 01       	movw	r24, r16
    1ada:	f3 01       	movw	r30, r6
    1adc:	09 95       	icall
    1ade:	81 11       	cpse	r24, r1
    1ae0:	08 c0       	rjmp	.+16     	; 0x1af2 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x9a>
    1ae2:	0c 15       	cp	r16, r12
    1ae4:	1d 05       	cpc	r17, r13
    1ae6:	51 f1       	breq	.+84     	; 0x1b3c <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xe4>
    1ae8:	c8 01       	movw	r24, r16
    1aea:	0e 94 81 17 	call	0x2f02	; 0x2f02 <_ZN6SdFile5closeEv>
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	2a c0       	rjmp	.+84     	; 0x1b46 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    1af2:	55 20       	and	r5, r5
    1af4:	d9 f0       	breq	.+54     	; 0x1b2c <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xd4>
    1af6:	21 e0       	ldi	r18, 0x01	; 1
    1af8:	ae 01       	movw	r20, r28
    1afa:	45 5c       	subi	r20, 0xC5	; 197
    1afc:	5f 4f       	sbci	r21, 0xFF	; 255
    1afe:	b8 01       	movw	r22, r16
    1b00:	c7 01       	movw	r24, r14
    1b02:	0e 94 32 19 	call	0x3264	; 0x3264 <_ZN6SdFile4openEPS_PKch>
    1b06:	58 2e       	mov	r5, r24
    1b08:	0c 15       	cp	r16, r12
    1b0a:	1d 05       	cpc	r17, r13
    1b0c:	19 f0       	breq	.+6      	; 0x1b14 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xbc>
    1b0e:	c8 01       	movw	r24, r16
    1b10:	0e 94 81 17 	call	0x2f02	; 0x2f02 <_ZN6SdFile5closeEv>
    1b14:	55 20       	and	r5, r5
    1b16:	a1 f0       	breq	.+40     	; 0x1b40 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xe8>
    1b18:	0c 15       	cp	r16, r12
    1b1a:	1d 05       	cpc	r17, r13
    1b1c:	11 f0       	breq	.+4      	; 0x1b22 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xca>
    1b1e:	c8 01       	movw	r24, r16
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xce>
    1b22:	ce 01       	movw	r24, r28
    1b24:	4e 96       	adiw	r24, 0x1e	; 30
    1b26:	87 01       	movw	r16, r14
    1b28:	7c 01       	movw	r14, r24
    1b2a:	c6 cf       	rjmp	.-116    	; 0x1ab8 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x60>
    1b2c:	0c 15       	cp	r16, r12
    1b2e:	1d 05       	cpc	r17, r13
    1b30:	49 f0       	breq	.+18     	; 0x1b44 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xec>
    1b32:	c8 01       	movw	r24, r16
    1b34:	0e 94 81 17 	call	0x2f02	; 0x2f02 <_ZN6SdFile5closeEv>
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	05 c0       	rjmp	.+10     	; 0x1b46 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	03 c0       	rjmp	.+6      	; 0x1b46 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	01 c0       	rjmp	.+2      	; 0x1b46 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	c7 5b       	subi	r28, 0xB7	; 183
    1b48:	df 4f       	sbci	r29, 0xFF	; 255
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	df 91       	pop	r29
    1b56:	cf 91       	pop	r28
    1b58:	1f 91       	pop	r17
    1b5a:	0f 91       	pop	r16
    1b5c:	ff 90       	pop	r15
    1b5e:	ef 90       	pop	r14
    1b60:	df 90       	pop	r13
    1b62:	cf 90       	pop	r12
    1b64:	bf 90       	pop	r11
    1b66:	af 90       	pop	r10
    1b68:	9f 90       	pop	r9
    1b6a:	8f 90       	pop	r8
    1b6c:	7f 90       	pop	r7
    1b6e:	6f 90       	pop	r6
    1b70:	5f 90       	pop	r5
    1b72:	08 95       	ret

00001b74 <_ZN5SDLib7SDClass5beginEh>:
    1b74:	0f 93       	push	r16
    1b76:	1f 93       	push	r17
    1b78:	cf 93       	push	r28
    1b7a:	df 93       	push	r29
    1b7c:	ec 01       	movw	r28, r24
    1b7e:	16 2f       	mov	r17, r22
    1b80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b82:	88 23       	and	r24, r24
    1b84:	21 f0       	breq	.+8      	; 0x1b8e <_ZN5SDLib7SDClass5beginEh+0x1a>
    1b86:	ce 01       	movw	r24, r28
    1b88:	8a 96       	adiw	r24, 0x2a	; 42
    1b8a:	0e 94 81 17 	call	0x2f02	; 0x2f02 <_ZN6SdFile5closeEv>
    1b8e:	41 2f       	mov	r20, r17
    1b90:	61 e0       	ldi	r22, 0x01	; 1
    1b92:	ce 01       	movw	r24, r28
    1b94:	0e 94 43 11 	call	0x2286	; 0x2286 <_ZN7Sd2Card4initEhh>
    1b98:	88 23       	and	r24, r24
    1b9a:	e1 f0       	breq	.+56     	; 0x1bd4 <_ZN5SDLib7SDClass5beginEh+0x60>
    1b9c:	8e 01       	movw	r16, r28
    1b9e:	04 5f       	subi	r16, 0xF4	; 244
    1ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba2:	41 e0       	ldi	r20, 0x01	; 1
    1ba4:	be 01       	movw	r22, r28
    1ba6:	c8 01       	movw	r24, r16
    1ba8:	0e 94 0c 20 	call	0x4018	; 0x4018 <_ZN8SdVolume4initEP7Sd2Cardh>
    1bac:	81 11       	cpse	r24, r1
    1bae:	06 c0       	rjmp	.+12     	; 0x1bbc <_ZN5SDLib7SDClass5beginEh+0x48>
    1bb0:	40 e0       	ldi	r20, 0x00	; 0
    1bb2:	be 01       	movw	r22, r28
    1bb4:	c8 01       	movw	r24, r16
    1bb6:	0e 94 0c 20 	call	0x4018	; 0x4018 <_ZN8SdVolume4initEP7Sd2Cardh>
    1bba:	01 c0       	rjmp	.+2      	; 0x1bbe <_ZN5SDLib7SDClass5beginEh+0x4a>
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	88 23       	and	r24, r24
    1bc0:	59 f0       	breq	.+22     	; 0x1bd8 <_ZN5SDLib7SDClass5beginEh+0x64>
    1bc2:	b8 01       	movw	r22, r16
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	8a 96       	adiw	r24, 0x2a	; 42
    1bc8:	0e 94 96 14 	call	0x292c	; 0x292c <_ZN6SdFile8openRootEP8SdVolume>
    1bcc:	88 23       	and	r24, r24
    1bce:	31 f0       	breq	.+12     	; 0x1bdc <_ZN5SDLib7SDClass5beginEh+0x68>
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	05 c0       	rjmp	.+10     	; 0x1bde <_ZN5SDLib7SDClass5beginEh+0x6a>
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	03 c0       	rjmp	.+6      	; 0x1bde <_ZN5SDLib7SDClass5beginEh+0x6a>
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	01 c0       	rjmp	.+2      	; 0x1bde <_ZN5SDLib7SDClass5beginEh+0x6a>
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	1f 91       	pop	r17
    1be4:	0f 91       	pop	r16
    1be6:	08 95       	ret

00001be8 <_ZN5SDLib7SDClass12getParentDirEPKcPi>:
    1be8:	4f 92       	push	r4
    1bea:	5f 92       	push	r5
    1bec:	6f 92       	push	r6
    1bee:	7f 92       	push	r7
    1bf0:	8f 92       	push	r8
    1bf2:	9f 92       	push	r9
    1bf4:	af 92       	push	r10
    1bf6:	bf 92       	push	r11
    1bf8:	cf 92       	push	r12
    1bfa:	df 92       	push	r13
    1bfc:	ef 92       	push	r14
    1bfe:	ff 92       	push	r15
    1c00:	0f 93       	push	r16
    1c02:	1f 93       	push	r17
    1c04:	cf 93       	push	r28
    1c06:	df 93       	push	r29
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	c7 54       	subi	r28, 0x47	; 71
    1c0e:	d1 09       	sbc	r29, r1
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	de bf       	out	0x3e, r29	; 62
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	cd bf       	out	0x3d, r28	; 61
    1c1a:	4c 01       	movw	r8, r24
    1c1c:	3a 01       	movw	r6, r20
    1c1e:	29 01       	movw	r4, r18
    1c20:	1c 82       	std	Y+4, r1	; 0x04
    1c22:	1b 82       	std	Y+3, r1	; 0x03
    1c24:	81 e2       	ldi	r24, 0x21	; 33
    1c26:	92 e0       	ldi	r25, 0x02	; 2
    1c28:	9a 83       	std	Y+2, r25	; 0x02
    1c2a:	89 83       	std	Y+1, r24	; 0x01
    1c2c:	1e 82       	std	Y+6, r1	; 0x06
    1c2e:	19 a2       	std	Y+33, r1	; 0x21
    1c30:	18 a2       	std	Y+32, r1	; 0x20
    1c32:	9f 8f       	std	Y+31, r25	; 0x1f
    1c34:	8e 8f       	std	Y+30, r24	; 0x1e
    1c36:	1b a2       	std	Y+35, r1	; 0x23
    1c38:	64 5f       	subi	r22, 0xF4	; 244
    1c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	01 96       	adiw	r24, 0x01	; 1
    1c40:	0e 94 96 14 	call	0x292c	; 0x292c <_ZN6SdFile8openRootEP8SdVolume>
    1c44:	73 01       	movw	r14, r6
    1c46:	6e 01       	movw	r12, r28
    1c48:	8e e1       	ldi	r24, 0x1E	; 30
    1c4a:	c8 0e       	add	r12, r24
    1c4c:	d1 1c       	adc	r13, r1
    1c4e:	fe 01       	movw	r30, r28
    1c50:	31 96       	adiw	r30, 0x01	; 1
    1c52:	5f 01       	movw	r10, r30
    1c54:	6f e2       	ldi	r22, 0x2F	; 47
    1c56:	70 e0       	ldi	r23, 0x00	; 0
    1c58:	c7 01       	movw	r24, r14
    1c5a:	0e 94 2f 29 	call	0x525e	; 0x525e <strchr>
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	f1 f1       	breq	.+124    	; 0x1cde <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xf6>
    1c62:	f7 01       	movw	r30, r14
    1c64:	20 81       	ld	r18, Z
    1c66:	2f 32       	cpi	r18, 0x2F	; 47
    1c68:	21 f4       	brne	.+8      	; 0x1c72 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x8a>
    1c6a:	ff ef       	ldi	r31, 0xFF	; 255
    1c6c:	ef 1a       	sub	r14, r31
    1c6e:	ff 0a       	sbc	r15, r31
    1c70:	f1 cf       	rjmp	.-30     	; 0x1c54 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x6c>
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	a1 f1       	breq	.+104    	; 0x1cde <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xf6>
    1c76:	8e 19       	sub	r24, r14
    1c78:	8d 30       	cpi	r24, 0x0D	; 13
    1c7a:	08 f0       	brcs	.+2      	; 0x1c7e <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x96>
    1c7c:	8c e0       	ldi	r24, 0x0C	; 12
    1c7e:	08 2f       	mov	r16, r24
    1c80:	10 e0       	ldi	r17, 0x00	; 0
    1c82:	a8 01       	movw	r20, r16
    1c84:	b7 01       	movw	r22, r14
    1c86:	ce 01       	movw	r24, r28
    1c88:	cb 96       	adiw	r24, 0x3b	; 59
    1c8a:	0e 94 3a 29 	call	0x5274	; 0x5274 <strncpy>
    1c8e:	eb e3       	ldi	r30, 0x3B	; 59
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	ec 0f       	add	r30, r28
    1c94:	fd 1f       	adc	r31, r29
    1c96:	e0 0f       	add	r30, r16
    1c98:	f1 1f       	adc	r31, r17
    1c9a:	10 82       	st	Z, r1
    1c9c:	c6 01       	movw	r24, r12
    1c9e:	0e 94 81 17 	call	0x2f02	; 0x2f02 <_ZN6SdFile5closeEv>
    1ca2:	21 e0       	ldi	r18, 0x01	; 1
    1ca4:	ae 01       	movw	r20, r28
    1ca6:	45 5c       	subi	r20, 0xC5	; 197
    1ca8:	5f 4f       	sbci	r21, 0xFF	; 255
    1caa:	b5 01       	movw	r22, r10
    1cac:	c6 01       	movw	r24, r12
    1cae:	0e 94 32 19 	call	0x3264	; 0x3264 <_ZN6SdFile4openEPS_PKch>
    1cb2:	81 11       	cpse	r24, r1
    1cb4:	09 c0       	rjmp	.+18     	; 0x1cc8 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xe0>
    1cb6:	f4 01       	movw	r30, r8
    1cb8:	13 82       	std	Z+3, r1	; 0x03
    1cba:	12 82       	std	Z+2, r1	; 0x02
    1cbc:	81 e2       	ldi	r24, 0x21	; 33
    1cbe:	92 e0       	ldi	r25, 0x02	; 2
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	80 83       	st	Z, r24
    1cc4:	15 82       	std	Z+5, r1	; 0x05
    1cc6:	63 c0       	rjmp	.+198    	; 0x1d8e <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x1a6>
    1cc8:	e0 0e       	add	r14, r16
    1cca:	f1 1e       	adc	r15, r17
    1ccc:	c5 01       	movw	r24, r10
    1cce:	0e 94 81 17 	call	0x2f02	; 0x2f02 <_ZN6SdFile5closeEv>
    1cd2:	9a 2d       	mov	r25, r10
    1cd4:	8b 2d       	mov	r24, r11
    1cd6:	56 01       	movw	r10, r12
    1cd8:	c9 2e       	mov	r12, r25
    1cda:	d8 2e       	mov	r13, r24
    1cdc:	bb cf       	rjmp	.-138    	; 0x1c54 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x6c>
    1cde:	e6 18       	sub	r14, r6
    1ce0:	f7 08       	sbc	r15, r7
    1ce2:	f2 01       	movw	r30, r4
    1ce4:	f1 82       	std	Z+1, r15	; 0x01
    1ce6:	e0 82       	st	Z, r14
    1ce8:	8b e6       	ldi	r24, 0x6B	; 107
    1cea:	91 e0       	ldi	r25, 0x01	; 1
    1cec:	f4 01       	movw	r30, r8
    1cee:	91 83       	std	Z+1, r25	; 0x01
    1cf0:	80 83       	st	Z, r24
    1cf2:	f5 01       	movw	r30, r10
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	93 81       	ldd	r25, Z+3	; 0x03
    1cf8:	f4 01       	movw	r30, r8
    1cfa:	93 83       	std	Z+3, r25	; 0x03
    1cfc:	82 83       	std	Z+2, r24	; 0x02
    1cfe:	81 e2       	ldi	r24, 0x21	; 33
    1d00:	92 e0       	ldi	r25, 0x02	; 2
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	80 83       	st	Z, r24
    1d06:	f5 01       	movw	r30, r10
    1d08:	84 81       	ldd	r24, Z+4	; 0x04
    1d0a:	f4 01       	movw	r30, r8
    1d0c:	84 83       	std	Z+4, r24	; 0x04
    1d0e:	f5 01       	movw	r30, r10
    1d10:	85 81       	ldd	r24, Z+5	; 0x05
    1d12:	f4 01       	movw	r30, r8
    1d14:	85 83       	std	Z+5, r24	; 0x05
    1d16:	f5 01       	movw	r30, r10
    1d18:	86 81       	ldd	r24, Z+6	; 0x06
    1d1a:	97 81       	ldd	r25, Z+7	; 0x07
    1d1c:	a0 85       	ldd	r26, Z+8	; 0x08
    1d1e:	b1 85       	ldd	r27, Z+9	; 0x09
    1d20:	f4 01       	movw	r30, r8
    1d22:	86 83       	std	Z+6, r24	; 0x06
    1d24:	97 83       	std	Z+7, r25	; 0x07
    1d26:	a0 87       	std	Z+8, r26	; 0x08
    1d28:	b1 87       	std	Z+9, r27	; 0x09
    1d2a:	f5 01       	movw	r30, r10
    1d2c:	82 85       	ldd	r24, Z+10	; 0x0a
    1d2e:	93 85       	ldd	r25, Z+11	; 0x0b
    1d30:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d32:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d34:	f4 01       	movw	r30, r8
    1d36:	82 87       	std	Z+10, r24	; 0x0a
    1d38:	93 87       	std	Z+11, r25	; 0x0b
    1d3a:	a4 87       	std	Z+12, r26	; 0x0c
    1d3c:	b5 87       	std	Z+13, r27	; 0x0d
    1d3e:	f5 01       	movw	r30, r10
    1d40:	86 85       	ldd	r24, Z+14	; 0x0e
    1d42:	97 85       	ldd	r25, Z+15	; 0x0f
    1d44:	a0 89       	ldd	r26, Z+16	; 0x10
    1d46:	b1 89       	ldd	r27, Z+17	; 0x11
    1d48:	f4 01       	movw	r30, r8
    1d4a:	86 87       	std	Z+14, r24	; 0x0e
    1d4c:	97 87       	std	Z+15, r25	; 0x0f
    1d4e:	a0 8b       	std	Z+16, r26	; 0x10
    1d50:	b1 8b       	std	Z+17, r27	; 0x11
    1d52:	f5 01       	movw	r30, r10
    1d54:	82 89       	ldd	r24, Z+18	; 0x12
    1d56:	f4 01       	movw	r30, r8
    1d58:	82 8b       	std	Z+18, r24	; 0x12
    1d5a:	f5 01       	movw	r30, r10
    1d5c:	83 89       	ldd	r24, Z+19	; 0x13
    1d5e:	94 89       	ldd	r25, Z+20	; 0x14
    1d60:	a5 89       	ldd	r26, Z+21	; 0x15
    1d62:	b6 89       	ldd	r27, Z+22	; 0x16
    1d64:	f4 01       	movw	r30, r8
    1d66:	83 8b       	std	Z+19, r24	; 0x13
    1d68:	94 8b       	std	Z+20, r25	; 0x14
    1d6a:	a5 8b       	std	Z+21, r26	; 0x15
    1d6c:	b6 8b       	std	Z+22, r27	; 0x16
    1d6e:	f5 01       	movw	r30, r10
    1d70:	87 89       	ldd	r24, Z+23	; 0x17
    1d72:	90 8d       	ldd	r25, Z+24	; 0x18
    1d74:	a1 8d       	ldd	r26, Z+25	; 0x19
    1d76:	b2 8d       	ldd	r27, Z+26	; 0x1a
    1d78:	f4 01       	movw	r30, r8
    1d7a:	87 8b       	std	Z+23, r24	; 0x17
    1d7c:	90 8f       	std	Z+24, r25	; 0x18
    1d7e:	a1 8f       	std	Z+25, r26	; 0x19
    1d80:	b2 8f       	std	Z+26, r27	; 0x1a
    1d82:	f5 01       	movw	r30, r10
    1d84:	83 8d       	ldd	r24, Z+27	; 0x1b
    1d86:	94 8d       	ldd	r25, Z+28	; 0x1c
    1d88:	f4 01       	movw	r30, r8
    1d8a:	94 8f       	std	Z+28, r25	; 0x1c
    1d8c:	83 8f       	std	Z+27, r24	; 0x1b
    1d8e:	c4 01       	movw	r24, r8
    1d90:	c9 5b       	subi	r28, 0xB9	; 185
    1d92:	df 4f       	sbci	r29, 0xFF	; 255
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	df 91       	pop	r29
    1da0:	cf 91       	pop	r28
    1da2:	1f 91       	pop	r17
    1da4:	0f 91       	pop	r16
    1da6:	ff 90       	pop	r15
    1da8:	ef 90       	pop	r14
    1daa:	df 90       	pop	r13
    1dac:	cf 90       	pop	r12
    1dae:	bf 90       	pop	r11
    1db0:	af 90       	pop	r10
    1db2:	9f 90       	pop	r9
    1db4:	8f 90       	pop	r8
    1db6:	7f 90       	pop	r7
    1db8:	6f 90       	pop	r6
    1dba:	5f 90       	pop	r5
    1dbc:	4f 90       	pop	r4
    1dbe:	08 95       	ret

00001dc0 <_ZN5SDLib7SDClass4openEPKch>:
    1dc0:	df 92       	push	r13
    1dc2:	ef 92       	push	r14
    1dc4:	ff 92       	push	r15
    1dc6:	0f 93       	push	r16
    1dc8:	1f 93       	push	r17
    1dca:	cf 93       	push	r28
    1dcc:	df 93       	push	r29
    1dce:	cd b7       	in	r28, 0x3d	; 61
    1dd0:	de b7       	in	r29, 0x3e	; 62
    1dd2:	c6 57       	subi	r28, 0x76	; 118
    1dd4:	d1 09       	sbc	r29, r1
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	7c 01       	movw	r14, r24
    1de2:	8a 01       	movw	r16, r20
    1de4:	d2 2e       	mov	r13, r18
    1de6:	9e 01       	movw	r18, r28
    1de8:	25 5c       	subi	r18, 0xC5	; 197
    1dea:	3f 4f       	sbci	r19, 0xFF	; 255
    1dec:	ce 01       	movw	r24, r28
    1dee:	cd 96       	adiw	r24, 0x3d	; 61
    1df0:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <_ZN5SDLib7SDClass12getParentDirEPKcPi>
    1df4:	8b ad       	ldd	r24, Y+59	; 0x3b
    1df6:	9c ad       	ldd	r25, Y+60	; 0x3c
    1df8:	08 0f       	add	r16, r24
    1dfa:	19 1f       	adc	r17, r25
    1dfc:	f8 01       	movw	r30, r16
    1dfe:	80 81       	ld	r24, Z
    1e00:	81 11       	cpse	r24, r1
    1e02:	57 c0       	rjmp	.+174    	; 0x1eb2 <_ZN5SDLib7SDClass4openEPKch+0xf2>
    1e04:	21 96       	adiw	r28, 0x01	; 1
    1e06:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e08:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e0a:	21 97       	sbiw	r28, 0x01	; 1
    1e0c:	99 a3       	std	Y+33, r25	; 0x21
    1e0e:	88 a3       	std	Y+32, r24	; 0x20
    1e10:	81 e2       	ldi	r24, 0x21	; 33
    1e12:	92 e0       	ldi	r25, 0x02	; 2
    1e14:	9f 8f       	std	Y+31, r25	; 0x1f
    1e16:	8e 8f       	std	Y+30, r24	; 0x1e
    1e18:	22 96       	adiw	r28, 0x02	; 2
    1e1a:	8f ad       	ldd	r24, Y+63	; 0x3f
    1e1c:	22 97       	sbiw	r28, 0x02	; 2
    1e1e:	8a a3       	std	Y+34, r24	; 0x22
    1e20:	23 96       	adiw	r28, 0x03	; 3
    1e22:	8f ad       	ldd	r24, Y+63	; 0x3f
    1e24:	23 97       	sbiw	r28, 0x03	; 3
    1e26:	8b a3       	std	Y+35, r24	; 0x23
    1e28:	27 96       	adiw	r28, 0x07	; 7
    1e2a:	8c ad       	ldd	r24, Y+60	; 0x3c
    1e2c:	9d ad       	ldd	r25, Y+61	; 0x3d
    1e2e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1e30:	bf ad       	ldd	r27, Y+63	; 0x3f
    1e32:	27 97       	sbiw	r28, 0x07	; 7
    1e34:	8c a3       	std	Y+36, r24	; 0x24
    1e36:	9d a3       	std	Y+37, r25	; 0x25
    1e38:	ae a3       	std	Y+38, r26	; 0x26
    1e3a:	bf a3       	std	Y+39, r27	; 0x27
    1e3c:	2b 96       	adiw	r28, 0x0b	; 11
    1e3e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1e40:	9d ad       	ldd	r25, Y+61	; 0x3d
    1e42:	ae ad       	ldd	r26, Y+62	; 0x3e
    1e44:	bf ad       	ldd	r27, Y+63	; 0x3f
    1e46:	2b 97       	sbiw	r28, 0x0b	; 11
    1e48:	88 a7       	std	Y+40, r24	; 0x28
    1e4a:	99 a7       	std	Y+41, r25	; 0x29
    1e4c:	aa a7       	std	Y+42, r26	; 0x2a
    1e4e:	bb a7       	std	Y+43, r27	; 0x2b
    1e50:	2f 96       	adiw	r28, 0x0f	; 15
    1e52:	8c ad       	ldd	r24, Y+60	; 0x3c
    1e54:	9d ad       	ldd	r25, Y+61	; 0x3d
    1e56:	ae ad       	ldd	r26, Y+62	; 0x3e
    1e58:	bf ad       	ldd	r27, Y+63	; 0x3f
    1e5a:	2f 97       	sbiw	r28, 0x0f	; 15
    1e5c:	8c a7       	std	Y+44, r24	; 0x2c
    1e5e:	9d a7       	std	Y+45, r25	; 0x2d
    1e60:	ae a7       	std	Y+46, r26	; 0x2e
    1e62:	bf a7       	std	Y+47, r27	; 0x2f
    1e64:	60 96       	adiw	r28, 0x10	; 16
    1e66:	8f ad       	ldd	r24, Y+63	; 0x3f
    1e68:	60 97       	sbiw	r28, 0x10	; 16
    1e6a:	88 ab       	std	Y+48, r24	; 0x30
    1e6c:	64 96       	adiw	r28, 0x14	; 20
    1e6e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1e70:	9d ad       	ldd	r25, Y+61	; 0x3d
    1e72:	ae ad       	ldd	r26, Y+62	; 0x3e
    1e74:	bf ad       	ldd	r27, Y+63	; 0x3f
    1e76:	64 97       	sbiw	r28, 0x14	; 20
    1e78:	89 ab       	std	Y+49, r24	; 0x31
    1e7a:	9a ab       	std	Y+50, r25	; 0x32
    1e7c:	ab ab       	std	Y+51, r26	; 0x33
    1e7e:	bc ab       	std	Y+52, r27	; 0x34
    1e80:	68 96       	adiw	r28, 0x18	; 24
    1e82:	8c ad       	ldd	r24, Y+60	; 0x3c
    1e84:	9d ad       	ldd	r25, Y+61	; 0x3d
    1e86:	ae ad       	ldd	r26, Y+62	; 0x3e
    1e88:	bf ad       	ldd	r27, Y+63	; 0x3f
    1e8a:	68 97       	sbiw	r28, 0x18	; 24
    1e8c:	8d ab       	std	Y+53, r24	; 0x35
    1e8e:	9e ab       	std	Y+54, r25	; 0x36
    1e90:	af ab       	std	Y+55, r26	; 0x37
    1e92:	b8 af       	std	Y+56, r27	; 0x38
    1e94:	6a 96       	adiw	r28, 0x1a	; 26
    1e96:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e98:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e9a:	6a 97       	sbiw	r28, 0x1a	; 26
    1e9c:	9a af       	std	Y+58, r25	; 0x3a
    1e9e:	89 af       	std	Y+57, r24	; 0x39
    1ea0:	4b e1       	ldi	r20, 0x1B	; 27
    1ea2:	52 e0       	ldi	r21, 0x02	; 2
    1ea4:	be 01       	movw	r22, r28
    1ea6:	62 5e       	subi	r22, 0xE2	; 226
    1ea8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eaa:	c7 01       	movw	r24, r14
    1eac:	0e 94 c9 0b 	call	0x1792	; 0x1792 <_ZN5SDLib4FileC1E6SdFilePKc>
    1eb0:	8e c0       	rjmp	.+284    	; 0x1fce <_ZN5SDLib7SDClass4openEPKch+0x20e>
    1eb2:	6e 96       	adiw	r28, 0x1e	; 30
    1eb4:	1f ae       	std	Y+63, r1	; 0x3f
    1eb6:	1e ae       	std	Y+62, r1	; 0x3e
    1eb8:	6e 97       	sbiw	r28, 0x1e	; 30
    1eba:	81 e2       	ldi	r24, 0x21	; 33
    1ebc:	92 e0       	ldi	r25, 0x02	; 2
    1ebe:	6c 96       	adiw	r28, 0x1c	; 28
    1ec0:	9f af       	std	Y+63, r25	; 0x3f
    1ec2:	8e af       	std	Y+62, r24	; 0x3e
    1ec4:	6c 97       	sbiw	r28, 0x1c	; 28
    1ec6:	a0 96       	adiw	r28, 0x20	; 32
    1ec8:	1f ae       	std	Y+63, r1	; 0x3f
    1eca:	a0 97       	sbiw	r28, 0x20	; 32
    1ecc:	23 96       	adiw	r28, 0x03	; 3
    1ece:	8f ad       	ldd	r24, Y+63	; 0x3f
    1ed0:	23 97       	sbiw	r28, 0x03	; 3
    1ed2:	81 11       	cpse	r24, r1
    1ed4:	04 c0       	rjmp	.+8      	; 0x1ede <_ZN5SDLib7SDClass4openEPKch+0x11e>
    1ed6:	c7 01       	movw	r24, r14
    1ed8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <_ZN5SDLib4FileC1Ev>
    1edc:	78 c0       	rjmp	.+240    	; 0x1fce <_ZN5SDLib7SDClass4openEPKch+0x20e>
    1ede:	2d 2d       	mov	r18, r13
    1ee0:	a8 01       	movw	r20, r16
    1ee2:	be 01       	movw	r22, r28
    1ee4:	63 5c       	subi	r22, 0xC3	; 195
    1ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee8:	ce 01       	movw	r24, r28
    1eea:	86 5a       	subi	r24, 0xA6	; 166
    1eec:	9f 4f       	sbci	r25, 0xFF	; 255
    1eee:	0e 94 32 19 	call	0x3264	; 0x3264 <_ZN6SdFile4openEPS_PKch>
    1ef2:	81 11       	cpse	r24, r1
    1ef4:	04 c0       	rjmp	.+8      	; 0x1efe <_ZN5SDLib7SDClass4openEPKch+0x13e>
    1ef6:	c7 01       	movw	r24, r14
    1ef8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <_ZN5SDLib4FileC1Ev>
    1efc:	68 c0       	rjmp	.+208    	; 0x1fce <_ZN5SDLib7SDClass4openEPKch+0x20e>
    1efe:	ce 01       	movw	r24, r28
    1f00:	cd 96       	adiw	r24, 0x3d	; 61
    1f02:	0e 94 81 17 	call	0x2f02	; 0x2f02 <_ZN6SdFile5closeEv>
    1f06:	8d 2d       	mov	r24, r13
    1f08:	86 70       	andi	r24, 0x06	; 6
    1f0a:	86 30       	cpi	r24, 0x06	; 6
    1f0c:	59 f4       	brne	.+22     	; 0x1f24 <_ZN5SDLib7SDClass4openEPKch+0x164>
    1f0e:	e1 96       	adiw	r28, 0x31	; 49
    1f10:	4c ad       	ldd	r20, Y+60	; 0x3c
    1f12:	5d ad       	ldd	r21, Y+61	; 0x3d
    1f14:	6e ad       	ldd	r22, Y+62	; 0x3e
    1f16:	7f ad       	ldd	r23, Y+63	; 0x3f
    1f18:	e1 97       	sbiw	r28, 0x31	; 49
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	86 5a       	subi	r24, 0xA6	; 166
    1f1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f20:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <_ZN6SdFile7seekSetEm>
    1f24:	6e 96       	adiw	r28, 0x1e	; 30
    1f26:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f28:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f2a:	6e 97       	sbiw	r28, 0x1e	; 30
    1f2c:	9c 83       	std	Y+4, r25	; 0x04
    1f2e:	8b 83       	std	Y+3, r24	; 0x03
    1f30:	81 e2       	ldi	r24, 0x21	; 33
    1f32:	92 e0       	ldi	r25, 0x02	; 2
    1f34:	9a 83       	std	Y+2, r25	; 0x02
    1f36:	89 83       	std	Y+1, r24	; 0x01
    1f38:	6f 96       	adiw	r28, 0x1f	; 31
    1f3a:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f3c:	6f 97       	sbiw	r28, 0x1f	; 31
    1f3e:	8d 83       	std	Y+5, r24	; 0x05
    1f40:	a0 96       	adiw	r28, 0x20	; 32
    1f42:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f44:	a0 97       	sbiw	r28, 0x20	; 32
    1f46:	8e 83       	std	Y+6, r24	; 0x06
    1f48:	a4 96       	adiw	r28, 0x24	; 36
    1f4a:	8c ad       	ldd	r24, Y+60	; 0x3c
    1f4c:	9d ad       	ldd	r25, Y+61	; 0x3d
    1f4e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1f50:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f52:	a4 97       	sbiw	r28, 0x24	; 36
    1f54:	8f 83       	std	Y+7, r24	; 0x07
    1f56:	98 87       	std	Y+8, r25	; 0x08
    1f58:	a9 87       	std	Y+9, r26	; 0x09
    1f5a:	ba 87       	std	Y+10, r27	; 0x0a
    1f5c:	a8 96       	adiw	r28, 0x28	; 40
    1f5e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1f60:	9d ad       	ldd	r25, Y+61	; 0x3d
    1f62:	ae ad       	ldd	r26, Y+62	; 0x3e
    1f64:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f66:	a8 97       	sbiw	r28, 0x28	; 40
    1f68:	8b 87       	std	Y+11, r24	; 0x0b
    1f6a:	9c 87       	std	Y+12, r25	; 0x0c
    1f6c:	ad 87       	std	Y+13, r26	; 0x0d
    1f6e:	be 87       	std	Y+14, r27	; 0x0e
    1f70:	ac 96       	adiw	r28, 0x2c	; 44
    1f72:	8c ad       	ldd	r24, Y+60	; 0x3c
    1f74:	9d ad       	ldd	r25, Y+61	; 0x3d
    1f76:	ae ad       	ldd	r26, Y+62	; 0x3e
    1f78:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f7a:	ac 97       	sbiw	r28, 0x2c	; 44
    1f7c:	8f 87       	std	Y+15, r24	; 0x0f
    1f7e:	98 8b       	std	Y+16, r25	; 0x10
    1f80:	a9 8b       	std	Y+17, r26	; 0x11
    1f82:	ba 8b       	std	Y+18, r27	; 0x12
    1f84:	ad 96       	adiw	r28, 0x2d	; 45
    1f86:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f88:	ad 97       	sbiw	r28, 0x2d	; 45
    1f8a:	8b 8b       	std	Y+19, r24	; 0x13
    1f8c:	e1 96       	adiw	r28, 0x31	; 49
    1f8e:	8c ad       	ldd	r24, Y+60	; 0x3c
    1f90:	9d ad       	ldd	r25, Y+61	; 0x3d
    1f92:	ae ad       	ldd	r26, Y+62	; 0x3e
    1f94:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f96:	e1 97       	sbiw	r28, 0x31	; 49
    1f98:	8c 8b       	std	Y+20, r24	; 0x14
    1f9a:	9d 8b       	std	Y+21, r25	; 0x15
    1f9c:	ae 8b       	std	Y+22, r26	; 0x16
    1f9e:	bf 8b       	std	Y+23, r27	; 0x17
    1fa0:	e5 96       	adiw	r28, 0x35	; 53
    1fa2:	8c ad       	ldd	r24, Y+60	; 0x3c
    1fa4:	9d ad       	ldd	r25, Y+61	; 0x3d
    1fa6:	ae ad       	ldd	r26, Y+62	; 0x3e
    1fa8:	bf ad       	ldd	r27, Y+63	; 0x3f
    1faa:	e5 97       	sbiw	r28, 0x35	; 53
    1fac:	88 8f       	std	Y+24, r24	; 0x18
    1fae:	99 8f       	std	Y+25, r25	; 0x19
    1fb0:	aa 8f       	std	Y+26, r26	; 0x1a
    1fb2:	bb 8f       	std	Y+27, r27	; 0x1b
    1fb4:	e7 96       	adiw	r28, 0x37	; 55
    1fb6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fb8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fba:	e7 97       	sbiw	r28, 0x37	; 55
    1fbc:	9d 8f       	std	Y+29, r25	; 0x1d
    1fbe:	8c 8f       	std	Y+28, r24	; 0x1c
    1fc0:	a8 01       	movw	r20, r16
    1fc2:	be 01       	movw	r22, r28
    1fc4:	6f 5f       	subi	r22, 0xFF	; 255
    1fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc8:	c7 01       	movw	r24, r14
    1fca:	0e 94 c9 0b 	call	0x1792	; 0x1792 <_ZN5SDLib4FileC1E6SdFilePKc>
    1fce:	c7 01       	movw	r24, r14
    1fd0:	ca 58       	subi	r28, 0x8A	; 138
    1fd2:	df 4f       	sbci	r29, 0xFF	; 255
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	df 91       	pop	r29
    1fe0:	cf 91       	pop	r28
    1fe2:	1f 91       	pop	r17
    1fe4:	0f 91       	pop	r16
    1fe6:	ff 90       	pop	r15
    1fe8:	ef 90       	pop	r14
    1fea:	df 90       	pop	r13
    1fec:	08 95       	ret

00001fee <_ZN5SDLib7SDClass6existsEPKc>:
    1fee:	fb 01       	movw	r30, r22
    1ff0:	bc 01       	movw	r22, r24
    1ff2:	66 5d       	subi	r22, 0xD6	; 214
    1ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	48 eb       	ldi	r20, 0xB8	; 184
    1ffc:	5c e0       	ldi	r21, 0x0C	; 12
    1ffe:	cf 01       	movw	r24, r30
    2000:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>
    2004:	08 95       	ret

00002006 <_ZN5SDLib7SDClass6removeEPKc>:
    2006:	fb 01       	movw	r30, r22
    2008:	bc 01       	movw	r22, r24
    200a:	66 5d       	subi	r22, 0xD6	; 214
    200c:	7f 4f       	sbci	r23, 0xFF	; 255
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	46 ee       	ldi	r20, 0xE6	; 230
    2014:	5c e0       	ldi	r21, 0x0C	; 12
    2016:	cf 01       	movw	r24, r30
    2018:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>
    201c:	08 95       	ret

0000201e <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:

  SDClass SD;

};
    201e:	6f ef       	ldi	r22, 0xFF	; 255
    2020:	7f ef       	ldi	r23, 0xFF	; 255
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	0e 94 9c 0c 	call	0x1938	; 0x1938 <_Z41__static_initialization_and_destruction_0ii>
    202a:	08 95       	ret

0000202c <_ZL7spiSendh>:

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    202c:	8e bd       	out	0x2e, r24	; 46
    202e:	00 00       	nop
    2030:	0d b4       	in	r0, 0x2d	; 45
    2032:	07 fe       	sbrs	r0, 7
    2034:	fd cf       	rjmp	.-6      	; 0x2030 <_ZL7spiSendh+0x4>
    2036:	8e b5       	in	r24, 0x2e	; 46
    2038:	08 95       	ret

0000203a <_ZL6spiRecv>:
    203a:	8f ef       	ldi	r24, 0xFF	; 255
    203c:	8e bd       	out	0x2e, r24	; 46
    203e:	00 00       	nop
    2040:	0d b4       	in	r0, 0x2d	; 45
    2042:	07 fe       	sbrs	r0, 7
    2044:	fd cf       	rjmp	.-6      	; 0x2040 <_ZL6spiRecv+0x6>
    2046:	8e b5       	in	r24, 0x2e	; 46
    2048:	08 95       	ret

0000204a <_Z41__static_initialization_and_destruction_0ii>:
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	41 f4       	brne	.+16     	; 0x205e <_Z41__static_initialization_and_destruction_0ii+0x14>
    204e:	6f 3f       	cpi	r22, 0xFF	; 255
    2050:	7f 4f       	sbci	r23, 0xFF	; 255
    2052:	29 f4       	brne	.+10     	; 0x205e <_Z41__static_initialization_and_destruction_0ii+0x14>
    2054:	e1 eb       	ldi	r30, 0xB1	; 177
    2056:	f2 e0       	ldi	r31, 0x02	; 2
    2058:	80 e5       	ldi	r24, 0x50	; 80
    205a:	80 83       	st	Z, r24
    205c:	11 82       	std	Z+1, r1	; 0x01
    205e:	08 95       	ret

00002060 <_ZN7Sd2Card14chipSelectHighEv>:
    2060:	61 e0       	ldi	r22, 0x01	; 1
    2062:	fc 01       	movw	r30, r24
    2064:	84 81       	ldd	r24, Z+4	; 0x04
    2066:	0e 94 a2 02 	call	0x544	; 0x544 <digitalWrite>
    206a:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <_ZL20chip_select_asserted>
    206e:	88 23       	and	r24, r24
    2070:	a1 f0       	breq	.+40     	; 0x209a <_ZN7Sd2Card14chipSelectHighEv+0x3a>
    2072:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <_ZL20chip_select_asserted>
    2076:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <_ZN8SPIClass13interruptModeE>
    207a:	88 23       	and	r24, r24
    207c:	71 f0       	breq	.+28     	; 0x209a <_ZN7Sd2Card14chipSelectHighEv+0x3a>
    207e:	9f b7       	in	r25, 0x3f	; 63
    2080:	f8 94       	cli
    2082:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <_ZN8SPIClass13interruptModeE>
    2086:	81 30       	cpi	r24, 0x01	; 1
    2088:	29 f4       	brne	.+10     	; 0x2094 <_ZN7Sd2Card14chipSelectHighEv+0x34>
    208a:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <_ZN8SPIClass13interruptSaveE>
    208e:	8d bb       	out	0x1d, r24	; 29
    2090:	9f bf       	out	0x3f, r25	; 63
    2092:	08 95       	ret
    2094:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <_ZN8SPIClass13interruptSaveE>
    2098:	8f bf       	out	0x3f, r24	; 63
    209a:	08 95       	ret

0000209c <_ZN7Sd2Card13chipSelectLowEv>:
    209c:	20 91 b0 02 	lds	r18, 0x02B0	; 0x8002b0 <_ZL20chip_select_asserted>
    20a0:	21 11       	cpse	r18, r1
    20a2:	20 c0       	rjmp	.+64     	; 0x20e4 <_ZN7Sd2Card13chipSelectLowEv+0x48>
    20a4:	21 e0       	ldi	r18, 0x01	; 1
    20a6:	20 93 b0 02 	sts	0x02B0, r18	; 0x8002b0 <_ZL20chip_select_asserted>
    20aa:	30 91 b1 02 	lds	r19, 0x02B1	; 0x8002b1 <_ZL8settings>
    20ae:	20 91 b2 02 	lds	r18, 0x02B2	; 0x8002b2 <_ZL8settings+0x1>
    20b2:	40 91 be 04 	lds	r20, 0x04BE	; 0x8004be <_ZN8SPIClass13interruptModeE>
    20b6:	44 23       	and	r20, r20
    20b8:	99 f0       	breq	.+38     	; 0x20e0 <_ZN7Sd2Card13chipSelectLowEv+0x44>
    20ba:	4f b7       	in	r20, 0x3f	; 63
    20bc:	f8 94       	cli
    20be:	50 91 be 04 	lds	r21, 0x04BE	; 0x8004be <_ZN8SPIClass13interruptModeE>
    20c2:	51 30       	cpi	r21, 0x01	; 1
    20c4:	59 f4       	brne	.+22     	; 0x20dc <_ZN7Sd2Card13chipSelectLowEv+0x40>
    20c6:	5d b3       	in	r21, 0x1d	; 29
    20c8:	50 93 bc 04 	sts	0x04BC, r21	; 0x8004bc <_ZN8SPIClass13interruptSaveE>
    20cc:	6d b3       	in	r22, 0x1d	; 29
    20ce:	50 91 bd 04 	lds	r21, 0x04BD	; 0x8004bd <_ZN8SPIClass13interruptMaskE>
    20d2:	50 95       	com	r21
    20d4:	56 23       	and	r21, r22
    20d6:	5d bb       	out	0x1d, r21	; 29
    20d8:	4f bf       	out	0x3f, r20	; 63
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <_ZN7Sd2Card13chipSelectLowEv+0x44>
    20dc:	40 93 bc 04 	sts	0x04BC, r20	; 0x8004bc <_ZN8SPIClass13interruptSaveE>
    20e0:	3c bd       	out	0x2c, r19	; 44
    20e2:	2d bd       	out	0x2d, r18	; 45
    20e4:	60 e0       	ldi	r22, 0x00	; 0
    20e6:	fc 01       	movw	r30, r24
    20e8:	84 81       	ldd	r24, Z+4	; 0x04
    20ea:	0e 94 a2 02 	call	0x544	; 0x544 <digitalWrite>
    20ee:	08 95       	ret

000020f0 <_ZN7Sd2Card7readEndEv>:
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	ec 01       	movw	r28, r24
    20f6:	8e 81       	ldd	r24, Y+6	; 0x06
    20f8:	88 23       	and	r24, r24
    20fa:	89 f0       	breq	.+34     	; 0x211e <_ZN7Sd2Card7readEndEv+0x2e>
    20fc:	8f 81       	ldd	r24, Y+7	; 0x07
    20fe:	98 85       	ldd	r25, Y+8	; 0x08
    2100:	9c 01       	movw	r18, r24
    2102:	2f 5f       	subi	r18, 0xFF	; 255
    2104:	3f 4f       	sbci	r19, 0xFF	; 255
    2106:	38 87       	std	Y+8, r19	; 0x08
    2108:	2f 83       	std	Y+7, r18	; 0x07
    210a:	82 30       	cpi	r24, 0x02	; 2
    210c:	92 40       	sbci	r25, 0x02	; 2
    210e:	18 f4       	brcc	.+6      	; 0x2116 <_ZN7Sd2Card7readEndEv+0x26>
    2110:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZL6spiRecv>
    2114:	f3 cf       	rjmp	.-26     	; 0x20fc <_ZN7Sd2Card7readEndEv+0xc>
    2116:	ce 01       	movw	r24, r28
    2118:	0e 94 30 10 	call	0x2060	; 0x2060 <_ZN7Sd2Card14chipSelectHighEv>
    211c:	1e 82       	std	Y+6, r1	; 0x06
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	08 95       	ret

00002124 <_ZN7Sd2Card10setSckRateEh>:
    2124:	67 30       	cpi	r22, 0x07	; 7
    2126:	28 f0       	brcs	.+10     	; 0x2132 <_ZN7Sd2Card10setSckRateEh+0xe>
    2128:	26 e1       	ldi	r18, 0x16	; 22
    212a:	fc 01       	movw	r30, r24
    212c:	25 83       	std	Z+5, r18	; 0x05
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	08 95       	ret
    2132:	62 30       	cpi	r22, 0x02	; 2
    2134:	d1 f0       	breq	.+52     	; 0x216a <_ZN7Sd2Card10setSckRateEh+0x46>
    2136:	28 f4       	brcc	.+10     	; 0x2142 <_ZN7Sd2Card10setSckRateEh+0x1e>
    2138:	66 23       	and	r22, r22
    213a:	49 f0       	breq	.+18     	; 0x214e <_ZN7Sd2Card10setSckRateEh+0x2a>
    213c:	61 30       	cpi	r22, 0x01	; 1
    213e:	71 f0       	breq	.+28     	; 0x215c <_ZN7Sd2Card10setSckRateEh+0x38>
    2140:	30 c0       	rjmp	.+96     	; 0x21a2 <_ZN7Sd2Card10setSckRateEh+0x7e>
    2142:	64 30       	cpi	r22, 0x04	; 4
    2144:	01 f1       	breq	.+64     	; 0x2186 <_ZN7Sd2Card10setSckRateEh+0x62>
    2146:	c0 f0       	brcs	.+48     	; 0x2178 <_ZN7Sd2Card10setSckRateEh+0x54>
    2148:	65 30       	cpi	r22, 0x05	; 5
    214a:	21 f1       	breq	.+72     	; 0x2194 <_ZN7Sd2Card10setSckRateEh+0x70>
    214c:	2a c0       	rjmp	.+84     	; 0x21a2 <_ZN7Sd2Card10setSckRateEh+0x7e>
    214e:	80 e5       	ldi	r24, 0x50	; 80
    2150:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <_ZL8settings>
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <_ZL8settings+0x1>
    215a:	08 95       	ret
    215c:	80 e5       	ldi	r24, 0x50	; 80
    215e:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <_ZL8settings>
    2162:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <_ZL8settings+0x1>
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	08 95       	ret
    216a:	81 e5       	ldi	r24, 0x51	; 81
    216c:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <_ZL8settings>
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <_ZL8settings+0x1>
    2176:	08 95       	ret
    2178:	81 e5       	ldi	r24, 0x51	; 81
    217a:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <_ZL8settings>
    217e:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <_ZL8settings+0x1>
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	08 95       	ret
    2186:	82 e5       	ldi	r24, 0x52	; 82
    2188:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <_ZL8settings>
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <_ZL8settings+0x1>
    2192:	08 95       	ret
    2194:	82 e5       	ldi	r24, 0x52	; 82
    2196:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <_ZL8settings>
    219a:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <_ZL8settings+0x1>
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	08 95       	ret
    21a2:	83 e5       	ldi	r24, 0x53	; 83
    21a4:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <_ZL8settings>
    21a8:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <_ZL8settings+0x1>
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	08 95       	ret

000021b0 <_ZN7Sd2Card11waitNotBusyEj>:
    21b0:	0f 93       	push	r16
    21b2:	1f 93       	push	r17
    21b4:	cf 93       	push	r28
    21b6:	df 93       	push	r29
    21b8:	eb 01       	movw	r28, r22
    21ba:	0e 94 02 02 	call	0x404	; 0x404 <millis>
    21be:	8b 01       	movw	r16, r22
    21c0:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZL6spiRecv>
    21c4:	8f 3f       	cpi	r24, 0xFF	; 255
    21c6:	49 f0       	breq	.+18     	; 0x21da <_ZN7Sd2Card11waitNotBusyEj+0x2a>
    21c8:	0e 94 02 02 	call	0x404	; 0x404 <millis>
    21cc:	60 1b       	sub	r22, r16
    21ce:	71 0b       	sbc	r23, r17
    21d0:	6c 17       	cp	r22, r28
    21d2:	7d 07       	cpc	r23, r29
    21d4:	a8 f3       	brcs	.-22     	; 0x21c0 <_ZN7Sd2Card11waitNotBusyEj+0x10>
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	01 c0       	rjmp	.+2      	; 0x21dc <_ZN7Sd2Card11waitNotBusyEj+0x2c>
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	df 91       	pop	r29
    21de:	cf 91       	pop	r28
    21e0:	1f 91       	pop	r17
    21e2:	0f 91       	pop	r16
    21e4:	08 95       	ret

000021e6 <_ZN7Sd2Card11cardCommandEhm>:
    21e6:	cf 92       	push	r12
    21e8:	df 92       	push	r13
    21ea:	ef 92       	push	r14
    21ec:	ff 92       	push	r15
    21ee:	0f 93       	push	r16
    21f0:	1f 93       	push	r17
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	8c 01       	movw	r16, r24
    21f8:	d6 2f       	mov	r29, r22
    21fa:	69 01       	movw	r12, r18
    21fc:	7a 01       	movw	r14, r20
    21fe:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_ZN7Sd2Card7readEndEv>
    2202:	c8 01       	movw	r24, r16
    2204:	0e 94 4e 10 	call	0x209c	; 0x209c <_ZN7Sd2Card13chipSelectLowEv>
    2208:	6c e2       	ldi	r22, 0x2C	; 44
    220a:	71 e0       	ldi	r23, 0x01	; 1
    220c:	c8 01       	movw	r24, r16
    220e:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_ZN7Sd2Card11waitNotBusyEj>
    2212:	8d 2f       	mov	r24, r29
    2214:	80 64       	ori	r24, 0x40	; 64
    2216:	0e 94 16 10 	call	0x202c	; 0x202c <_ZL7spiSendh>
    221a:	c8 e1       	ldi	r28, 0x18	; 24
    221c:	cc 23       	and	r28, r28
    221e:	74 f0       	brlt	.+28     	; 0x223c <_ZN7Sd2Card11cardCommandEhm+0x56>
    2220:	d7 01       	movw	r26, r14
    2222:	c6 01       	movw	r24, r12
    2224:	0c 2e       	mov	r0, r28
    2226:	04 c0       	rjmp	.+8      	; 0x2230 <_ZN7Sd2Card11cardCommandEhm+0x4a>
    2228:	b6 95       	lsr	r27
    222a:	a7 95       	ror	r26
    222c:	97 95       	ror	r25
    222e:	87 95       	ror	r24
    2230:	0a 94       	dec	r0
    2232:	d2 f7       	brpl	.-12     	; 0x2228 <_ZN7Sd2Card11cardCommandEhm+0x42>
    2234:	0e 94 16 10 	call	0x202c	; 0x202c <_ZL7spiSendh>
    2238:	c8 50       	subi	r28, 0x08	; 8
    223a:	f0 cf       	rjmp	.-32     	; 0x221c <_ZN7Sd2Card11cardCommandEhm+0x36>
    223c:	dd 23       	and	r29, r29
    223e:	11 f0       	breq	.+4      	; 0x2244 <_ZN7Sd2Card11cardCommandEhm+0x5e>
    2240:	8f ef       	ldi	r24, 0xFF	; 255
    2242:	01 c0       	rjmp	.+2      	; 0x2246 <_ZN7Sd2Card11cardCommandEhm+0x60>
    2244:	85 e9       	ldi	r24, 0x95	; 149
    2246:	d8 30       	cpi	r29, 0x08	; 8
    2248:	09 f4       	brne	.+2      	; 0x224c <_ZN7Sd2Card11cardCommandEhm+0x66>
    224a:	87 e8       	ldi	r24, 0x87	; 135
    224c:	0e 94 16 10 	call	0x202c	; 0x202c <_ZL7spiSendh>
    2250:	c0 e0       	ldi	r28, 0x00	; 0
    2252:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZL6spiRecv>
    2256:	f8 01       	movw	r30, r16
    2258:	82 87       	std	Z+10, r24	; 0x0a
    225a:	88 23       	and	r24, r24
    225c:	24 f4       	brge	.+8      	; 0x2266 <_ZN7Sd2Card11cardCommandEhm+0x80>
    225e:	cf 3f       	cpi	r28, 0xFF	; 255
    2260:	21 f4       	brne	.+8      	; 0x226a <_ZN7Sd2Card11cardCommandEhm+0x84>
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	03 c0       	rjmp	.+6      	; 0x226c <_ZN7Sd2Card11cardCommandEhm+0x86>
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	01 c0       	rjmp	.+2      	; 0x226c <_ZN7Sd2Card11cardCommandEhm+0x86>
    226a:	91 e0       	ldi	r25, 0x01	; 1
    226c:	99 23       	and	r25, r25
    226e:	11 f0       	breq	.+4      	; 0x2274 <_ZN7Sd2Card11cardCommandEhm+0x8e>
    2270:	cf 5f       	subi	r28, 0xFF	; 255
    2272:	ef cf       	rjmp	.-34     	; 0x2252 <_ZN7Sd2Card11cardCommandEhm+0x6c>
    2274:	df 91       	pop	r29
    2276:	cf 91       	pop	r28
    2278:	1f 91       	pop	r17
    227a:	0f 91       	pop	r16
    227c:	ff 90       	pop	r15
    227e:	ef 90       	pop	r14
    2280:	df 90       	pop	r13
    2282:	cf 90       	pop	r12
    2284:	08 95       	ret

00002286 <_ZN7Sd2Card4initEhh>:
    2286:	8f 92       	push	r8
    2288:	9f 92       	push	r9
    228a:	af 92       	push	r10
    228c:	bf 92       	push	r11
    228e:	ef 92       	push	r14
    2290:	ff 92       	push	r15
    2292:	0f 93       	push	r16
    2294:	1f 93       	push	r17
    2296:	cf 93       	push	r28
    2298:	df 93       	push	r29
    229a:	ec 01       	movw	r28, r24
    229c:	e6 2e       	mov	r14, r22
    229e:	1b 86       	std	Y+11, r1	; 0x0b
    22a0:	19 86       	std	Y+9, r1	; 0x09
    22a2:	1e 82       	std	Y+6, r1	; 0x06
    22a4:	1d 82       	std	Y+5, r1	; 0x05
    22a6:	4c 83       	std	Y+4, r20	; 0x04
    22a8:	0e 94 02 02 	call	0x404	; 0x404 <millis>
    22ac:	8b 01       	movw	r16, r22
    22ae:	61 e0       	ldi	r22, 0x01	; 1
    22b0:	8c 81       	ldd	r24, Y+4	; 0x04
    22b2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <pinMode>
    22b6:	61 e0       	ldi	r22, 0x01	; 1
    22b8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ba:	0e 94 a2 02 	call	0x544	; 0x544 <digitalWrite>
    22be:	0e 94 6d 21 	call	0x42da	; 0x42da <_ZN8SPIClass5beginEv>
    22c2:	82 e5       	ldi	r24, 0x52	; 82
    22c4:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <_ZL8settings>
    22c8:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <_ZL8settings+0x1>
    22cc:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <_ZN8SPIClass13interruptModeE>
    22d0:	88 23       	and	r24, r24
    22d2:	99 f0       	breq	.+38     	; 0x22fa <_ZN7Sd2Card4initEhh+0x74>
    22d4:	8f b7       	in	r24, 0x3f	; 63
    22d6:	f8 94       	cli
    22d8:	90 91 be 04 	lds	r25, 0x04BE	; 0x8004be <_ZN8SPIClass13interruptModeE>
    22dc:	91 30       	cpi	r25, 0x01	; 1
    22de:	59 f4       	brne	.+22     	; 0x22f6 <_ZN7Sd2Card4initEhh+0x70>
    22e0:	9d b3       	in	r25, 0x1d	; 29
    22e2:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <_ZN8SPIClass13interruptSaveE>
    22e6:	2d b3       	in	r18, 0x1d	; 29
    22e8:	90 91 bd 04 	lds	r25, 0x04BD	; 0x8004bd <_ZN8SPIClass13interruptMaskE>
    22ec:	90 95       	com	r25
    22ee:	92 23       	and	r25, r18
    22f0:	9d bb       	out	0x1d, r25	; 29
    22f2:	8f bf       	out	0x3f, r24	; 63
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <_ZN7Sd2Card4initEhh+0x74>
    22f6:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <_ZN8SPIClass13interruptSaveE>
    22fa:	82 e5       	ldi	r24, 0x52	; 82
    22fc:	8c bd       	out	0x2c, r24	; 44
    22fe:	1d bc       	out	0x2d, r1	; 45
    2300:	f1 2c       	mov	r15, r1
    2302:	89 e0       	ldi	r24, 0x09	; 9
    2304:	8f 15       	cp	r24, r15
    2306:	28 f0       	brcs	.+10     	; 0x2312 <_ZN7Sd2Card4initEhh+0x8c>
    2308:	8f ef       	ldi	r24, 0xFF	; 255
    230a:	0e 94 16 10 	call	0x202c	; 0x202c <_ZL7spiSendh>
    230e:	f3 94       	inc	r15
    2310:	f8 cf       	rjmp	.-16     	; 0x2302 <_ZN7Sd2Card4initEhh+0x7c>
    2312:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <_ZN8SPIClass13interruptModeE>
    2316:	88 23       	and	r24, r24
    2318:	71 f0       	breq	.+28     	; 0x2336 <_ZN7Sd2Card4initEhh+0xb0>
    231a:	9f b7       	in	r25, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <_ZN8SPIClass13interruptModeE>
    2322:	81 30       	cpi	r24, 0x01	; 1
    2324:	29 f4       	brne	.+10     	; 0x2330 <_ZN7Sd2Card4initEhh+0xaa>
    2326:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <_ZN8SPIClass13interruptSaveE>
    232a:	8d bb       	out	0x1d, r24	; 29
    232c:	9f bf       	out	0x3f, r25	; 63
    232e:	03 c0       	rjmp	.+6      	; 0x2336 <_ZN7Sd2Card4initEhh+0xb0>
    2330:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <_ZN8SPIClass13interruptSaveE>
    2334:	8f bf       	out	0x3f, r24	; 63
    2336:	ce 01       	movw	r24, r28
    2338:	0e 94 4e 10 	call	0x209c	; 0x209c <_ZN7Sd2Card13chipSelectLowEv>
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	a9 01       	movw	r20, r18
    2342:	60 e0       	ldi	r22, 0x00	; 0
    2344:	ce 01       	movw	r24, r28
    2346:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <_ZN7Sd2Card11cardCommandEhm>
    234a:	8a 87       	std	Y+10, r24	; 0x0a
    234c:	81 30       	cpi	r24, 0x01	; 1
    234e:	51 f0       	breq	.+20     	; 0x2364 <_ZN7Sd2Card4initEhh+0xde>
    2350:	0e 94 02 02 	call	0x404	; 0x404 <millis>
    2354:	60 1b       	sub	r22, r16
    2356:	71 0b       	sbc	r23, r17
    2358:	61 3d       	cpi	r22, 0xD1	; 209
    235a:	77 40       	sbci	r23, 0x07	; 7
    235c:	78 f3       	brcs	.-34     	; 0x233c <_ZN7Sd2Card4initEhh+0xb6>
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	8d 83       	std	Y+5, r24	; 0x05
    2362:	69 c0       	rjmp	.+210    	; 0x2436 <_ZN7Sd2Card4initEhh+0x1b0>
    2364:	2a ea       	ldi	r18, 0xAA	; 170
    2366:	31 e0       	ldi	r19, 0x01	; 1
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	50 e0       	ldi	r21, 0x00	; 0
    236c:	68 e0       	ldi	r22, 0x08	; 8
    236e:	ce 01       	movw	r24, r28
    2370:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <_ZN7Sd2Card11cardCommandEhm>
    2374:	82 ff       	sbrs	r24, 2
    2376:	03 c0       	rjmp	.+6      	; 0x237e <_ZN7Sd2Card4initEhh+0xf8>
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	8b 87       	std	Y+11, r24	; 0x0b
    237c:	11 c0       	rjmp	.+34     	; 0x23a0 <_ZN7Sd2Card4initEhh+0x11a>
    237e:	f1 2c       	mov	r15, r1
    2380:	83 e0       	ldi	r24, 0x03	; 3
    2382:	8f 15       	cp	r24, r15
    2384:	28 f0       	brcs	.+10     	; 0x2390 <_ZN7Sd2Card4initEhh+0x10a>
    2386:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZL6spiRecv>
    238a:	8a 87       	std	Y+10, r24	; 0x0a
    238c:	f3 94       	inc	r15
    238e:	f8 cf       	rjmp	.-16     	; 0x2380 <_ZN7Sd2Card4initEhh+0xfa>
    2390:	8a 85       	ldd	r24, Y+10	; 0x0a
    2392:	8a 3a       	cpi	r24, 0xAA	; 170
    2394:	19 f0       	breq	.+6      	; 0x239c <_ZN7Sd2Card4initEhh+0x116>
    2396:	82 e0       	ldi	r24, 0x02	; 2
    2398:	8d 83       	std	Y+5, r24	; 0x05
    239a:	4d c0       	rjmp	.+154    	; 0x2436 <_ZN7Sd2Card4initEhh+0x1b0>
    239c:	82 e0       	ldi	r24, 0x02	; 2
    239e:	8b 87       	std	Y+11, r24	; 0x0b
    23a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    23a2:	82 30       	cpi	r24, 0x02	; 2
    23a4:	31 f4       	brne	.+12     	; 0x23b2 <_ZN7Sd2Card4initEhh+0x12c>
    23a6:	81 2c       	mov	r8, r1
    23a8:	91 2c       	mov	r9, r1
    23aa:	54 01       	movw	r10, r8
    23ac:	68 94       	set
    23ae:	b6 f8       	bld	r11, 6
    23b0:	03 c0       	rjmp	.+6      	; 0x23b8 <_ZN7Sd2Card4initEhh+0x132>
    23b2:	81 2c       	mov	r8, r1
    23b4:	91 2c       	mov	r9, r1
    23b6:	54 01       	movw	r10, r8
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	a9 01       	movw	r20, r18
    23be:	67 e3       	ldi	r22, 0x37	; 55
    23c0:	ce 01       	movw	r24, r28
    23c2:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <_ZN7Sd2Card11cardCommandEhm>
    23c6:	a5 01       	movw	r20, r10
    23c8:	94 01       	movw	r18, r8
    23ca:	69 e2       	ldi	r22, 0x29	; 41
    23cc:	ce 01       	movw	r24, r28
    23ce:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <_ZN7Sd2Card11cardCommandEhm>
    23d2:	8a 87       	std	Y+10, r24	; 0x0a
    23d4:	88 23       	and	r24, r24
    23d6:	51 f0       	breq	.+20     	; 0x23ec <_ZN7Sd2Card4initEhh+0x166>
    23d8:	0e 94 02 02 	call	0x404	; 0x404 <millis>
    23dc:	60 1b       	sub	r22, r16
    23de:	71 0b       	sbc	r23, r17
    23e0:	61 3d       	cpi	r22, 0xD1	; 209
    23e2:	77 40       	sbci	r23, 0x07	; 7
    23e4:	48 f3       	brcs	.-46     	; 0x23b8 <_ZN7Sd2Card4initEhh+0x132>
    23e6:	88 e0       	ldi	r24, 0x08	; 8
    23e8:	8d 83       	std	Y+5, r24	; 0x05
    23ea:	25 c0       	rjmp	.+74     	; 0x2436 <_ZN7Sd2Card4initEhh+0x1b0>
    23ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    23ee:	82 30       	cpi	r24, 0x02	; 2
    23f0:	d1 f4       	brne	.+52     	; 0x2426 <_ZN7Sd2Card4initEhh+0x1a0>
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	a9 01       	movw	r20, r18
    23f8:	6a e3       	ldi	r22, 0x3A	; 58
    23fa:	ce 01       	movw	r24, r28
    23fc:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <_ZN7Sd2Card11cardCommandEhm>
    2400:	88 23       	and	r24, r24
    2402:	19 f0       	breq	.+6      	; 0x240a <_ZN7Sd2Card4initEhh+0x184>
    2404:	86 e0       	ldi	r24, 0x06	; 6
    2406:	8d 83       	std	Y+5, r24	; 0x05
    2408:	16 c0       	rjmp	.+44     	; 0x2436 <_ZN7Sd2Card4initEhh+0x1b0>
    240a:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZL6spiRecv>
    240e:	80 7c       	andi	r24, 0xC0	; 192
    2410:	80 3c       	cpi	r24, 0xC0	; 192
    2412:	11 f4       	brne	.+4      	; 0x2418 <_ZN7Sd2Card4initEhh+0x192>
    2414:	83 e0       	ldi	r24, 0x03	; 3
    2416:	8b 87       	std	Y+11, r24	; 0x0b
    2418:	10 e0       	ldi	r17, 0x00	; 0
    241a:	13 30       	cpi	r17, 0x03	; 3
    241c:	20 f4       	brcc	.+8      	; 0x2426 <_ZN7Sd2Card4initEhh+0x1a0>
    241e:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZL6spiRecv>
    2422:	1f 5f       	subi	r17, 0xFF	; 255
    2424:	fa cf       	rjmp	.-12     	; 0x241a <_ZN7Sd2Card4initEhh+0x194>
    2426:	ce 01       	movw	r24, r28
    2428:	0e 94 30 10 	call	0x2060	; 0x2060 <_ZN7Sd2Card14chipSelectHighEv>
    242c:	6e 2d       	mov	r22, r14
    242e:	ce 01       	movw	r24, r28
    2430:	0e 94 92 10 	call	0x2124	; 0x2124 <_ZN7Sd2Card10setSckRateEh>
    2434:	04 c0       	rjmp	.+8      	; 0x243e <_ZN7Sd2Card4initEhh+0x1b8>
    2436:	ce 01       	movw	r24, r28
    2438:	0e 94 30 10 	call	0x2060	; 0x2060 <_ZN7Sd2Card14chipSelectHighEv>
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	df 91       	pop	r29
    2440:	cf 91       	pop	r28
    2442:	1f 91       	pop	r17
    2444:	0f 91       	pop	r16
    2446:	ff 90       	pop	r15
    2448:	ef 90       	pop	r14
    244a:	bf 90       	pop	r11
    244c:	af 90       	pop	r10
    244e:	9f 90       	pop	r9
    2450:	8f 90       	pop	r8
    2452:	08 95       	ret

00002454 <_ZN7Sd2Card14waitStartBlockEv>:
    2454:	0f 93       	push	r16
    2456:	1f 93       	push	r17
    2458:	cf 93       	push	r28
    245a:	df 93       	push	r29
    245c:	ec 01       	movw	r28, r24
    245e:	0e 94 02 02 	call	0x404	; 0x404 <millis>
    2462:	8b 01       	movw	r16, r22
    2464:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZL6spiRecv>
    2468:	8a 87       	std	Y+10, r24	; 0x0a
    246a:	8f 3f       	cpi	r24, 0xFF	; 255
    246c:	51 f4       	brne	.+20     	; 0x2482 <_ZN7Sd2Card14waitStartBlockEv+0x2e>
    246e:	0e 94 02 02 	call	0x404	; 0x404 <millis>
    2472:	60 1b       	sub	r22, r16
    2474:	71 0b       	sbc	r23, r17
    2476:	6d 32       	cpi	r22, 0x2D	; 45
    2478:	71 40       	sbci	r23, 0x01	; 1
    247a:	a0 f3       	brcs	.-24     	; 0x2464 <_ZN7Sd2Card14waitStartBlockEv+0x10>
    247c:	8f e0       	ldi	r24, 0x0F	; 15
    247e:	8d 83       	std	Y+5, r24	; 0x05
    2480:	04 c0       	rjmp	.+8      	; 0x248a <_ZN7Sd2Card14waitStartBlockEv+0x36>
    2482:	8e 3f       	cpi	r24, 0xFE	; 254
    2484:	39 f0       	breq	.+14     	; 0x2494 <_ZN7Sd2Card14waitStartBlockEv+0x40>
    2486:	8d e0       	ldi	r24, 0x0D	; 13
    2488:	8d 83       	std	Y+5, r24	; 0x05
    248a:	ce 01       	movw	r24, r28
    248c:	0e 94 30 10 	call	0x2060	; 0x2060 <_ZN7Sd2Card14chipSelectHighEv>
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	01 c0       	rjmp	.+2      	; 0x2496 <_ZN7Sd2Card14waitStartBlockEv+0x42>
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	df 91       	pop	r29
    2498:	cf 91       	pop	r28
    249a:	1f 91       	pop	r17
    249c:	0f 91       	pop	r16
    249e:	08 95       	ret

000024a0 <_ZN7Sd2Card8readDataEmjjPh>:
    24a0:	af 92       	push	r10
    24a2:	bf 92       	push	r11
    24a4:	cf 92       	push	r12
    24a6:	df 92       	push	r13
    24a8:	ef 92       	push	r14
    24aa:	ff 92       	push	r15
    24ac:	0f 93       	push	r16
    24ae:	1f 93       	push	r17
    24b0:	cf 93       	push	r28
    24b2:	df 93       	push	r29
    24b4:	ec 01       	movw	r28, r24
    24b6:	69 01       	movw	r12, r18
    24b8:	01 15       	cp	r16, r1
    24ba:	11 05       	cpc	r17, r1
    24bc:	09 f4       	brne	.+2      	; 0x24c0 <_ZN7Sd2Card8readDataEmjjPh+0x20>
    24be:	6f c0       	rjmp	.+222    	; 0x259e <_ZN7Sd2Card8readDataEmjjPh+0xfe>
    24c0:	c8 01       	movw	r24, r16
    24c2:	82 0f       	add	r24, r18
    24c4:	93 1f       	adc	r25, r19
    24c6:	81 30       	cpi	r24, 0x01	; 1
    24c8:	92 40       	sbci	r25, 0x02	; 2
    24ca:	08 f0       	brcs	.+2      	; 0x24ce <_ZN7Sd2Card8readDataEmjjPh+0x2e>
    24cc:	63 c0       	rjmp	.+198    	; 0x2594 <_ZN7Sd2Card8readDataEmjjPh+0xf4>
    24ce:	8e 81       	ldd	r24, Y+6	; 0x06
    24d0:	88 23       	and	r24, r24
    24d2:	71 f0       	breq	.+28     	; 0x24f0 <_ZN7Sd2Card8readDataEmjjPh+0x50>
    24d4:	88 81       	ld	r24, Y
    24d6:	99 81       	ldd	r25, Y+1	; 0x01
    24d8:	aa 81       	ldd	r26, Y+2	; 0x02
    24da:	bb 81       	ldd	r27, Y+3	; 0x03
    24dc:	84 17       	cp	r24, r20
    24de:	95 07       	cpc	r25, r21
    24e0:	a6 07       	cpc	r26, r22
    24e2:	b7 07       	cpc	r27, r23
    24e4:	29 f4       	brne	.+10     	; 0x24f0 <_ZN7Sd2Card8readDataEmjjPh+0x50>
    24e6:	8f 81       	ldd	r24, Y+7	; 0x07
    24e8:	98 85       	ldd	r25, Y+8	; 0x08
    24ea:	c8 16       	cp	r12, r24
    24ec:	d9 06       	cpc	r13, r25
    24ee:	20 f5       	brcc	.+72     	; 0x2538 <_ZN7Sd2Card8readDataEmjjPh+0x98>
    24f0:	48 83       	st	Y, r20
    24f2:	59 83       	std	Y+1, r21	; 0x01
    24f4:	6a 83       	std	Y+2, r22	; 0x02
    24f6:	7b 83       	std	Y+3, r23	; 0x03
    24f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    24fa:	83 30       	cpi	r24, 0x03	; 3
    24fc:	49 f0       	breq	.+18     	; 0x2510 <_ZN7Sd2Card8readDataEmjjPh+0x70>
    24fe:	03 2e       	mov	r0, r19
    2500:	39 e0       	ldi	r19, 0x09	; 9
    2502:	44 0f       	add	r20, r20
    2504:	55 1f       	adc	r21, r21
    2506:	66 1f       	adc	r22, r22
    2508:	77 1f       	adc	r23, r23
    250a:	3a 95       	dec	r19
    250c:	d1 f7       	brne	.-12     	; 0x2502 <_ZN7Sd2Card8readDataEmjjPh+0x62>
    250e:	30 2d       	mov	r19, r0
    2510:	9a 01       	movw	r18, r20
    2512:	ab 01       	movw	r20, r22
    2514:	61 e1       	ldi	r22, 0x11	; 17
    2516:	ce 01       	movw	r24, r28
    2518:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <_ZN7Sd2Card11cardCommandEhm>
    251c:	88 23       	and	r24, r24
    251e:	19 f0       	breq	.+6      	; 0x2526 <_ZN7Sd2Card8readDataEmjjPh+0x86>
    2520:	83 e0       	ldi	r24, 0x03	; 3
    2522:	8d 83       	std	Y+5, r24	; 0x05
    2524:	37 c0       	rjmp	.+110    	; 0x2594 <_ZN7Sd2Card8readDataEmjjPh+0xf4>
    2526:	ce 01       	movw	r24, r28
    2528:	0e 94 2a 12 	call	0x2454	; 0x2454 <_ZN7Sd2Card14waitStartBlockEv>
    252c:	88 23       	and	r24, r24
    252e:	91 f1       	breq	.+100    	; 0x2594 <_ZN7Sd2Card8readDataEmjjPh+0xf4>
    2530:	18 86       	std	Y+8, r1	; 0x08
    2532:	1f 82       	std	Y+7, r1	; 0x07
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	8e 83       	std	Y+6, r24	; 0x06
    2538:	8f 81       	ldd	r24, Y+7	; 0x07
    253a:	98 85       	ldd	r25, Y+8	; 0x08
    253c:	8c 15       	cp	r24, r12
    253e:	9d 05       	cpc	r25, r13
    2540:	40 f4       	brcc	.+16     	; 0x2552 <_ZN7Sd2Card8readDataEmjjPh+0xb2>
    2542:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZL6spiRecv>
    2546:	8f 81       	ldd	r24, Y+7	; 0x07
    2548:	98 85       	ldd	r25, Y+8	; 0x08
    254a:	01 96       	adiw	r24, 0x01	; 1
    254c:	98 87       	std	Y+8, r25	; 0x08
    254e:	8f 83       	std	Y+7, r24	; 0x07
    2550:	f3 cf       	rjmp	.-26     	; 0x2538 <_ZN7Sd2Card8readDataEmjjPh+0x98>
    2552:	c1 2c       	mov	r12, r1
    2554:	d1 2c       	mov	r13, r1
    2556:	c0 16       	cp	r12, r16
    2558:	d1 06       	cpc	r13, r17
    255a:	58 f4       	brcc	.+22     	; 0x2572 <_ZN7Sd2Card8readDataEmjjPh+0xd2>
    255c:	57 01       	movw	r10, r14
    255e:	ac 0c       	add	r10, r12
    2560:	bd 1c       	adc	r11, r13
    2562:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZL6spiRecv>
    2566:	f5 01       	movw	r30, r10
    2568:	80 83       	st	Z, r24
    256a:	ff ef       	ldi	r31, 0xFF	; 255
    256c:	cf 1a       	sub	r12, r31
    256e:	df 0a       	sbc	r13, r31
    2570:	f2 cf       	rjmp	.-28     	; 0x2556 <_ZN7Sd2Card8readDataEmjjPh+0xb6>
    2572:	8f 81       	ldd	r24, Y+7	; 0x07
    2574:	98 85       	ldd	r25, Y+8	; 0x08
    2576:	08 0f       	add	r16, r24
    2578:	19 1f       	adc	r17, r25
    257a:	18 87       	std	Y+8, r17	; 0x08
    257c:	0f 83       	std	Y+7, r16	; 0x07
    257e:	89 85       	ldd	r24, Y+9	; 0x09
    2580:	88 23       	and	r24, r24
    2582:	19 f0       	breq	.+6      	; 0x258a <_ZN7Sd2Card8readDataEmjjPh+0xea>
    2584:	01 15       	cp	r16, r1
    2586:	12 40       	sbci	r17, 0x02	; 2
    2588:	60 f0       	brcs	.+24     	; 0x25a2 <_ZN7Sd2Card8readDataEmjjPh+0x102>
    258a:	ce 01       	movw	r24, r28
    258c:	0e 94 78 10 	call	0x20f0	; 0x20f0 <_ZN7Sd2Card7readEndEv>
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	08 c0       	rjmp	.+16     	; 0x25a4 <_ZN7Sd2Card8readDataEmjjPh+0x104>
    2594:	ce 01       	movw	r24, r28
    2596:	0e 94 30 10 	call	0x2060	; 0x2060 <_ZN7Sd2Card14chipSelectHighEv>
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	03 c0       	rjmp	.+6      	; 0x25a4 <_ZN7Sd2Card8readDataEmjjPh+0x104>
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	01 c0       	rjmp	.+2      	; 0x25a4 <_ZN7Sd2Card8readDataEmjjPh+0x104>
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	df 91       	pop	r29
    25a6:	cf 91       	pop	r28
    25a8:	1f 91       	pop	r17
    25aa:	0f 91       	pop	r16
    25ac:	ff 90       	pop	r15
    25ae:	ef 90       	pop	r14
    25b0:	df 90       	pop	r13
    25b2:	cf 90       	pop	r12
    25b4:	bf 90       	pop	r11
    25b6:	af 90       	pop	r10
    25b8:	08 95       	ret

000025ba <_ZN7Sd2Card9readBlockEmPh>:
    25ba:	ef 92       	push	r14
    25bc:	ff 92       	push	r15
    25be:	0f 93       	push	r16
    25c0:	1f 93       	push	r17
    25c2:	79 01       	movw	r14, r18
    25c4:	00 e0       	ldi	r16, 0x00	; 0
    25c6:	12 e0       	ldi	r17, 0x02	; 2
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	0e 94 50 12 	call	0x24a0	; 0x24a0 <_ZN7Sd2Card8readDataEmjjPh>
    25d0:	1f 91       	pop	r17
    25d2:	0f 91       	pop	r16
    25d4:	ff 90       	pop	r15
    25d6:	ef 90       	pop	r14
    25d8:	08 95       	ret

000025da <_ZN7Sd2Card9writeDataEhPKh>:
    25da:	ef 92       	push	r14
    25dc:	ff 92       	push	r15
    25de:	0f 93       	push	r16
    25e0:	1f 93       	push	r17
    25e2:	cf 93       	push	r28
    25e4:	df 93       	push	r29
    25e6:	7c 01       	movw	r14, r24
    25e8:	86 2f       	mov	r24, r22
    25ea:	8a 01       	movw	r16, r20
    25ec:	0e 94 16 10 	call	0x202c	; 0x202c <_ZL7spiSendh>
    25f0:	c0 e0       	ldi	r28, 0x00	; 0
    25f2:	d0 e0       	ldi	r29, 0x00	; 0
    25f4:	c1 15       	cp	r28, r1
    25f6:	82 e0       	ldi	r24, 0x02	; 2
    25f8:	d8 07       	cpc	r29, r24
    25fa:	40 f4       	brcc	.+16     	; 0x260c <_ZN7Sd2Card9writeDataEhPKh+0x32>
    25fc:	f8 01       	movw	r30, r16
    25fe:	ec 0f       	add	r30, r28
    2600:	fd 1f       	adc	r31, r29
    2602:	80 81       	ld	r24, Z
    2604:	0e 94 16 10 	call	0x202c	; 0x202c <_ZL7spiSendh>
    2608:	21 96       	adiw	r28, 0x01	; 1
    260a:	f4 cf       	rjmp	.-24     	; 0x25f4 <_ZN7Sd2Card9writeDataEhPKh+0x1a>
    260c:	8f ef       	ldi	r24, 0xFF	; 255
    260e:	0e 94 16 10 	call	0x202c	; 0x202c <_ZL7spiSendh>
    2612:	8f ef       	ldi	r24, 0xFF	; 255
    2614:	0e 94 16 10 	call	0x202c	; 0x202c <_ZL7spiSendh>
    2618:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZL6spiRecv>
    261c:	f7 01       	movw	r30, r14
    261e:	82 87       	std	Z+10, r24	; 0x0a
    2620:	8f 71       	andi	r24, 0x1F	; 31
    2622:	85 30       	cpi	r24, 0x05	; 5
    2624:	39 f0       	breq	.+14     	; 0x2634 <_ZN7Sd2Card9writeDataEhPKh+0x5a>
    2626:	81 e1       	ldi	r24, 0x11	; 17
    2628:	85 83       	std	Z+5, r24	; 0x05
    262a:	c7 01       	movw	r24, r14
    262c:	0e 94 30 10 	call	0x2060	; 0x2060 <_ZN7Sd2Card14chipSelectHighEv>
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	01 c0       	rjmp	.+2      	; 0x2636 <_ZN7Sd2Card9writeDataEhPKh+0x5c>
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	df 91       	pop	r29
    2638:	cf 91       	pop	r28
    263a:	1f 91       	pop	r17
    263c:	0f 91       	pop	r16
    263e:	ff 90       	pop	r15
    2640:	ef 90       	pop	r14
    2642:	08 95       	ret

00002644 <_ZN7Sd2Card10writeBlockEmPKhh>:
    2644:	ef 92       	push	r14
    2646:	ff 92       	push	r15
    2648:	0f 93       	push	r16
    264a:	cf 93       	push	r28
    264c:	df 93       	push	r29
    264e:	ec 01       	movw	r28, r24
    2650:	79 01       	movw	r14, r18
    2652:	41 15       	cp	r20, r1
    2654:	51 05       	cpc	r21, r1
    2656:	61 05       	cpc	r22, r1
    2658:	71 05       	cpc	r23, r1
    265a:	19 f4       	brne	.+6      	; 0x2662 <_ZN7Sd2Card10writeBlockEmPKhh+0x1e>
    265c:	82 e1       	ldi	r24, 0x12	; 18
    265e:	8d 83       	std	Y+5, r24	; 0x05
    2660:	45 c0       	rjmp	.+138    	; 0x26ec <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    2662:	8b 85       	ldd	r24, Y+11	; 0x0b
    2664:	83 30       	cpi	r24, 0x03	; 3
    2666:	49 f0       	breq	.+18     	; 0x267a <_ZN7Sd2Card10writeBlockEmPKhh+0x36>
    2668:	03 2e       	mov	r0, r19
    266a:	39 e0       	ldi	r19, 0x09	; 9
    266c:	44 0f       	add	r20, r20
    266e:	55 1f       	adc	r21, r21
    2670:	66 1f       	adc	r22, r22
    2672:	77 1f       	adc	r23, r23
    2674:	3a 95       	dec	r19
    2676:	d1 f7       	brne	.-12     	; 0x266c <_ZN7Sd2Card10writeBlockEmPKhh+0x28>
    2678:	30 2d       	mov	r19, r0
    267a:	9a 01       	movw	r18, r20
    267c:	ab 01       	movw	r20, r22
    267e:	68 e1       	ldi	r22, 0x18	; 24
    2680:	ce 01       	movw	r24, r28
    2682:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <_ZN7Sd2Card11cardCommandEhm>
    2686:	88 23       	and	r24, r24
    2688:	19 f0       	breq	.+6      	; 0x2690 <_ZN7Sd2Card10writeBlockEmPKhh+0x4c>
    268a:	84 e0       	ldi	r24, 0x04	; 4
    268c:	8d 83       	std	Y+5, r24	; 0x05
    268e:	2e c0       	rjmp	.+92     	; 0x26ec <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    2690:	a7 01       	movw	r20, r14
    2692:	6e ef       	ldi	r22, 0xFE	; 254
    2694:	ce 01       	movw	r24, r28
    2696:	0e 94 ed 12 	call	0x25da	; 0x25da <_ZN7Sd2Card9writeDataEhPKh>
    269a:	88 23       	and	r24, r24
    269c:	39 f1       	breq	.+78     	; 0x26ec <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    269e:	00 23       	and	r16, r16
    26a0:	01 f1       	breq	.+64     	; 0x26e2 <_ZN7Sd2Card10writeBlockEmPKhh+0x9e>
    26a2:	68 e5       	ldi	r22, 0x58	; 88
    26a4:	72 e0       	ldi	r23, 0x02	; 2
    26a6:	ce 01       	movw	r24, r28
    26a8:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_ZN7Sd2Card11waitNotBusyEj>
    26ac:	81 11       	cpse	r24, r1
    26ae:	03 c0       	rjmp	.+6      	; 0x26b6 <_ZN7Sd2Card10writeBlockEmPKhh+0x72>
    26b0:	85 e1       	ldi	r24, 0x15	; 21
    26b2:	8d 83       	std	Y+5, r24	; 0x05
    26b4:	1b c0       	rjmp	.+54     	; 0x26ec <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	a9 01       	movw	r20, r18
    26bc:	6d e0       	ldi	r22, 0x0D	; 13
    26be:	ce 01       	movw	r24, r28
    26c0:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <_ZN7Sd2Card11cardCommandEhm>
    26c4:	81 11       	cpse	r24, r1
    26c6:	05 c0       	rjmp	.+10     	; 0x26d2 <_ZN7Sd2Card10writeBlockEmPKhh+0x8e>
    26c8:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZL6spiRecv>
    26cc:	81 11       	cpse	r24, r1
    26ce:	03 c0       	rjmp	.+6      	; 0x26d6 <_ZN7Sd2Card10writeBlockEmPKhh+0x92>
    26d0:	03 c0       	rjmp	.+6      	; 0x26d8 <_ZN7Sd2Card10writeBlockEmPKhh+0x94>
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	01 c0       	rjmp	.+2      	; 0x26d8 <_ZN7Sd2Card10writeBlockEmPKhh+0x94>
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	88 23       	and	r24, r24
    26da:	19 f0       	breq	.+6      	; 0x26e2 <_ZN7Sd2Card10writeBlockEmPKhh+0x9e>
    26dc:	84 e1       	ldi	r24, 0x14	; 20
    26de:	8d 83       	std	Y+5, r24	; 0x05
    26e0:	05 c0       	rjmp	.+10     	; 0x26ec <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    26e2:	ce 01       	movw	r24, r28
    26e4:	0e 94 30 10 	call	0x2060	; 0x2060 <_ZN7Sd2Card14chipSelectHighEv>
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	04 c0       	rjmp	.+8      	; 0x26f4 <_ZN7Sd2Card10writeBlockEmPKhh+0xb0>
    26ec:	ce 01       	movw	r24, r28
    26ee:	0e 94 30 10 	call	0x2060	; 0x2060 <_ZN7Sd2Card14chipSelectHighEv>
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	df 91       	pop	r29
    26f6:	cf 91       	pop	r28
    26f8:	0f 91       	pop	r16
    26fa:	ff 90       	pop	r15
    26fc:	ef 90       	pop	r14
    26fe:	08 95       	ret

00002700 <_ZN7Sd2Card6isBusyEv>:
/** Check if the SD card is busy

  \return The value one, true, is returned when is busy and
   the value zero, false, is returned for when is NOT busy.
*/
uint8_t Sd2Card::isBusy(void) {
    2700:	1f 93       	push	r17
    2702:	cf 93       	push	r28
    2704:	df 93       	push	r29
    2706:	ec 01       	movw	r28, r24
  chipSelectLow();
    2708:	0e 94 4e 10 	call	0x209c	; 0x209c <_ZN7Sd2Card13chipSelectLowEv>
  byte b = spiRec();
    270c:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZL6spiRecv>
    2710:	18 2f       	mov	r17, r24
  chipSelectHigh();
    2712:	ce 01       	movw	r24, r28
    2714:	0e 94 30 10 	call	0x2060	; 0x2060 <_ZN7Sd2Card14chipSelectHighEv>

  return (b != 0XFF);
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	1f 3f       	cpi	r17, 0xFF	; 255
    271c:	09 f4       	brne	.+2      	; 0x2720 <_ZN7Sd2Card6isBusyEv+0x20>
    271e:	80 e0       	ldi	r24, 0x00	; 0
}
    2720:	df 91       	pop	r29
    2722:	cf 91       	pop	r28
    2724:	1f 91       	pop	r17
    2726:	08 95       	ret

00002728 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    2728:	6f ef       	ldi	r22, 0xFF	; 255
    272a:	7f ef       	ldi	r23, 0xFF	; 255
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	0e 94 25 10 	call	0x204a	; 0x204a <_Z41__static_initialization_and_destruction_0ii>
    2734:	08 95       	ret

00002736 <_ZN6SdFile10addClusterEv>:
  // don't try to delete root
  if (isRoot()) {
    return true;
  }
  return rmDir();
}
    2736:	cf 93       	push	r28
    2738:	df 93       	push	r29
    273a:	ec 01       	movw	r28, r24
    273c:	9c 01       	movw	r18, r24
    273e:	2a 5f       	subi	r18, 0xFA	; 250
    2740:	3f 4f       	sbci	r19, 0xFF	; 255
    2742:	41 e0       	ldi	r20, 0x01	; 1
    2744:	50 e0       	ldi	r21, 0x00	; 0
    2746:	60 e0       	ldi	r22, 0x00	; 0
    2748:	70 e0       	ldi	r23, 0x00	; 0
    274a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    274c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    274e:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <_ZN8SdVolume15allocContiguousEmPm>
    2752:	88 23       	and	r24, r24
    2754:	b9 f0       	breq	.+46     	; 0x2784 <_ZN6SdFile10addClusterEv+0x4e>
    2756:	8f 89       	ldd	r24, Y+23	; 0x17
    2758:	98 8d       	ldd	r25, Y+24	; 0x18
    275a:	a9 8d       	ldd	r26, Y+25	; 0x19
    275c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    275e:	89 2b       	or	r24, r25
    2760:	8a 2b       	or	r24, r26
    2762:	8b 2b       	or	r24, r27
    2764:	59 f4       	brne	.+22     	; 0x277c <_ZN6SdFile10addClusterEv+0x46>
    2766:	8e 81       	ldd	r24, Y+6	; 0x06
    2768:	9f 81       	ldd	r25, Y+7	; 0x07
    276a:	a8 85       	ldd	r26, Y+8	; 0x08
    276c:	b9 85       	ldd	r27, Y+9	; 0x09
    276e:	8f 8b       	std	Y+23, r24	; 0x17
    2770:	98 8f       	std	Y+24, r25	; 0x18
    2772:	a9 8f       	std	Y+25, r26	; 0x19
    2774:	ba 8f       	std	Y+26, r27	; 0x1a
    2776:	8c 81       	ldd	r24, Y+4	; 0x04
    2778:	80 68       	ori	r24, 0x80	; 128
    277a:	8c 83       	std	Y+4, r24	; 0x04
    277c:	8c 81       	ldd	r24, Y+4	; 0x04
    277e:	80 62       	ori	r24, 0x20	; 32
    2780:	8c 83       	std	Y+4, r24	; 0x04
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	df 91       	pop	r29
    2786:	cf 91       	pop	r28
    2788:	08 95       	ret

0000278a <_ZN6SdFile13addDirClusterEv>:
    278a:	cf 92       	push	r12
    278c:	df 92       	push	r13
    278e:	ef 92       	push	r14
    2790:	ff 92       	push	r15
    2792:	0f 93       	push	r16
    2794:	1f 93       	push	r17
    2796:	cf 93       	push	r28
    2798:	8c 01       	movw	r16, r24
    279a:	0e 94 9b 13 	call	0x2736	; 0x2736 <_ZN6SdFile10addClusterEv>
    279e:	88 23       	and	r24, r24
    27a0:	09 f4       	brne	.+2      	; 0x27a4 <_ZN6SdFile13addDirClusterEv+0x1a>
    27a2:	54 c0       	rjmp	.+168    	; 0x284c <_ZN6SdFile13addDirClusterEv+0xc2>
    27a4:	d8 01       	movw	r26, r16
    27a6:	16 96       	adiw	r26, 0x06	; 6
    27a8:	cd 90       	ld	r12, X+
    27aa:	dd 90       	ld	r13, X+
    27ac:	ed 90       	ld	r14, X+
    27ae:	fc 90       	ld	r15, X
    27b0:	19 97       	sbiw	r26, 0x09	; 9
    27b2:	5b 96       	adiw	r26, 0x1b	; 27
    27b4:	ed 91       	ld	r30, X+
    27b6:	fc 91       	ld	r31, X
    27b8:	5c 97       	sbiw	r26, 0x1c	; 28
    27ba:	86 85       	ldd	r24, Z+14	; 0x0e
    27bc:	97 85       	ldd	r25, Z+15	; 0x0f
    27be:	a0 89       	ldd	r26, Z+16	; 0x10
    27c0:	b1 89       	ldd	r27, Z+17	; 0x11
    27c2:	22 e0       	ldi	r18, 0x02	; 2
    27c4:	c2 1a       	sub	r12, r18
    27c6:	d1 08       	sbc	r13, r1
    27c8:	e1 08       	sbc	r14, r1
    27ca:	f1 08       	sbc	r15, r1
    27cc:	05 84       	ldd	r0, Z+13	; 0x0d
    27ce:	04 c0       	rjmp	.+8      	; 0x27d8 <_ZN6SdFile13addDirClusterEv+0x4e>
    27d0:	cc 0c       	add	r12, r12
    27d2:	dd 1c       	adc	r13, r13
    27d4:	ee 1c       	adc	r14, r14
    27d6:	ff 1c       	adc	r15, r15
    27d8:	0a 94       	dec	r0
    27da:	d2 f7       	brpl	.-12     	; 0x27d0 <_ZN6SdFile13addDirClusterEv+0x46>
    27dc:	c8 0e       	add	r12, r24
    27de:	d9 1e       	adc	r13, r25
    27e0:	ea 1e       	adc	r14, r26
    27e2:	fb 1e       	adc	r15, r27
    27e4:	c4 81       	ldd	r28, Z+4	; 0x04
    27e6:	cc 23       	and	r28, r28
    27e8:	91 f0       	breq	.+36     	; 0x280e <_ZN6SdFile13addDirClusterEv+0x84>
    27ea:	d7 01       	movw	r26, r14
    27ec:	c6 01       	movw	r24, r12
    27ee:	8c 0f       	add	r24, r28
    27f0:	91 1d       	adc	r25, r1
    27f2:	a1 1d       	adc	r26, r1
    27f4:	b1 1d       	adc	r27, r1
    27f6:	bc 01       	movw	r22, r24
    27f8:	cd 01       	movw	r24, r26
    27fa:	61 50       	subi	r22, 0x01	; 1
    27fc:	71 09       	sbc	r23, r1
    27fe:	81 09       	sbc	r24, r1
    2800:	91 09       	sbc	r25, r1
    2802:	0e 94 c4 1c 	call	0x3988	; 0x3988 <_ZN8SdVolume14cacheZeroBlockEm>
    2806:	88 23       	and	r24, r24
    2808:	09 f1       	breq	.+66     	; 0x284c <_ZN6SdFile13addDirClusterEv+0xc2>
    280a:	c1 50       	subi	r28, 0x01	; 1
    280c:	ec cf       	rjmp	.-40     	; 0x27e6 <_ZN6SdFile13addDirClusterEv+0x5c>
    280e:	d8 01       	movw	r26, r16
    2810:	5b 96       	adiw	r26, 0x1b	; 27
    2812:	ed 91       	ld	r30, X+
    2814:	fc 91       	ld	r31, X
    2816:	5c 97       	sbiw	r26, 0x1c	; 28
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	92 e0       	ldi	r25, 0x02	; 2
    281c:	a0 e0       	ldi	r26, 0x00	; 0
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	05 84       	ldd	r0, Z+13	; 0x0d
    2822:	04 c0       	rjmp	.+8      	; 0x282c <_ZN6SdFile13addDirClusterEv+0xa2>
    2824:	88 0f       	add	r24, r24
    2826:	99 1f       	adc	r25, r25
    2828:	aa 1f       	adc	r26, r26
    282a:	bb 1f       	adc	r27, r27
    282c:	0a 94       	dec	r0
    282e:	d2 f7       	brpl	.-12     	; 0x2824 <_ZN6SdFile13addDirClusterEv+0x9a>
    2830:	f8 01       	movw	r30, r16
    2832:	43 89       	ldd	r20, Z+19	; 0x13
    2834:	54 89       	ldd	r21, Z+20	; 0x14
    2836:	65 89       	ldd	r22, Z+21	; 0x15
    2838:	76 89       	ldd	r23, Z+22	; 0x16
    283a:	84 0f       	add	r24, r20
    283c:	95 1f       	adc	r25, r21
    283e:	a6 1f       	adc	r26, r22
    2840:	b7 1f       	adc	r27, r23
    2842:	83 8b       	std	Z+19, r24	; 0x13
    2844:	94 8b       	std	Z+20, r25	; 0x14
    2846:	a5 8b       	std	Z+21, r26	; 0x15
    2848:	b6 8b       	std	Z+22, r27	; 0x16
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	cf 91       	pop	r28
    284e:	1f 91       	pop	r17
    2850:	0f 91       	pop	r16
    2852:	ff 90       	pop	r15
    2854:	ef 90       	pop	r14
    2856:	df 90       	pop	r13
    2858:	cf 90       	pop	r12
    285a:	08 95       	ret

0000285c <_ZN6SdFile13cacheDirEntryEh>:
    285c:	cf 93       	push	r28
    285e:	df 93       	push	r29
    2860:	ec 01       	movw	r28, r24
    2862:	46 2f       	mov	r20, r22
    2864:	6e 85       	ldd	r22, Y+14	; 0x0e
    2866:	7f 85       	ldd	r23, Y+15	; 0x0f
    2868:	88 89       	ldd	r24, Y+16	; 0x10
    286a:	99 89       	ldd	r25, Y+17	; 0x11
    286c:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN8SdVolume13cacheRawBlockEmh>
    2870:	88 23       	and	r24, r24
    2872:	41 f0       	breq	.+16     	; 0x2884 <_ZN6SdFile13cacheDirEntryEh+0x28>
    2874:	8a 89       	ldd	r24, Y+18	; 0x12
    2876:	20 e2       	ldi	r18, 0x20	; 32
    2878:	82 9f       	mul	r24, r18
    287a:	c0 01       	movw	r24, r0
    287c:	11 24       	eor	r1, r1
    287e:	84 54       	subi	r24, 0x44	; 68
    2880:	9d 4f       	sbci	r25, 0xFD	; 253
    2882:	02 c0       	rjmp	.+4      	; 0x2888 <_ZN6SdFile13cacheDirEntryEh+0x2c>
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	df 91       	pop	r29
    288a:	cf 91       	pop	r28
    288c:	08 95       	ret

0000288e <_ZN6SdFile10make83NameEPKcPh>:
    288e:	cf 93       	push	r28
    2890:	df 93       	push	r29
    2892:	dc 01       	movw	r26, r24
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	9b 30       	cpi	r25, 0x0B	; 11
    2898:	48 f4       	brcc	.+18     	; 0x28ac <_ZN6SdFile10make83NameEPKcPh+0x1e>
    289a:	fb 01       	movw	r30, r22
    289c:	e9 0f       	add	r30, r25
    289e:	f1 1d       	adc	r31, r1
    28a0:	20 e2       	ldi	r18, 0x20	; 32
    28a2:	20 83       	st	Z, r18
    28a4:	9f 5f       	subi	r25, 0xFF	; 255
    28a6:	f7 cf       	rjmp	.-18     	; 0x2896 <_ZN6SdFile10make83NameEPKcPh+0x8>
    28a8:	de 01       	movw	r26, r28
    28aa:	02 c0       	rjmp	.+4      	; 0x28b0 <_ZN6SdFile10make83NameEPKcPh+0x22>
    28ac:	40 e0       	ldi	r20, 0x00	; 0
    28ae:	57 e0       	ldi	r21, 0x07	; 7
    28b0:	ed 01       	movw	r28, r26
    28b2:	21 96       	adiw	r28, 0x01	; 1
    28b4:	9c 91       	ld	r25, X
    28b6:	99 23       	and	r25, r25
    28b8:	31 f1       	breq	.+76     	; 0x2906 <_ZN6SdFile10make83NameEPKcPh+0x78>
    28ba:	9e 32       	cpi	r25, 0x2E	; 46
    28bc:	29 f4       	brne	.+10     	; 0x28c8 <_ZN6SdFile10make83NameEPKcPh+0x3a>
    28be:	5a 30       	cpi	r21, 0x0A	; 10
    28c0:	49 f1       	breq	.+82     	; 0x2914 <_ZN6SdFile10make83NameEPKcPh+0x86>
    28c2:	48 e0       	ldi	r20, 0x08	; 8
    28c4:	5a e0       	ldi	r21, 0x0A	; 10
    28c6:	f0 cf       	rjmp	.-32     	; 0x28a8 <_ZN6SdFile10make83NameEPKcPh+0x1a>
    28c8:	ea e4       	ldi	r30, 0x4A	; 74
    28ca:	f2 e0       	ldi	r31, 0x02	; 2
    28cc:	9f 01       	movw	r18, r30
    28ce:	2f 5f       	subi	r18, 0xFF	; 255
    28d0:	3f 4f       	sbci	r19, 0xFF	; 255
    28d2:	84 91       	lpm	r24, Z
    28d4:	88 23       	and	r24, r24
    28d6:	21 f0       	breq	.+8      	; 0x28e0 <_ZN6SdFile10make83NameEPKcPh+0x52>
    28d8:	f9 01       	movw	r30, r18
    28da:	98 13       	cpse	r25, r24
    28dc:	f7 cf       	rjmp	.-18     	; 0x28cc <_ZN6SdFile10make83NameEPKcPh+0x3e>
    28de:	1c c0       	rjmp	.+56     	; 0x2918 <_ZN6SdFile10make83NameEPKcPh+0x8a>
    28e0:	54 17       	cp	r21, r20
    28e2:	e0 f0       	brcs	.+56     	; 0x291c <_ZN6SdFile10make83NameEPKcPh+0x8e>
    28e4:	91 32       	cpi	r25, 0x21	; 33
    28e6:	e0 f0       	brcs	.+56     	; 0x2920 <_ZN6SdFile10make83NameEPKcPh+0x92>
    28e8:	9f 37       	cpi	r25, 0x7F	; 127
    28ea:	e0 f4       	brcc	.+56     	; 0x2924 <_ZN6SdFile10make83NameEPKcPh+0x96>
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	84 0f       	add	r24, r20
    28f0:	fb 01       	movw	r30, r22
    28f2:	e4 0f       	add	r30, r20
    28f4:	f1 1d       	adc	r31, r1
    28f6:	2f e9       	ldi	r18, 0x9F	; 159
    28f8:	29 0f       	add	r18, r25
    28fa:	2a 31       	cpi	r18, 0x1A	; 26
    28fc:	08 f4       	brcc	.+2      	; 0x2900 <_ZN6SdFile10make83NameEPKcPh+0x72>
    28fe:	90 52       	subi	r25, 0x20	; 32
    2900:	90 83       	st	Z, r25
    2902:	48 2f       	mov	r20, r24
    2904:	d1 cf       	rjmp	.-94     	; 0x28a8 <_ZN6SdFile10make83NameEPKcPh+0x1a>
    2906:	fb 01       	movw	r30, r22
    2908:	90 81       	ld	r25, Z
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	90 32       	cpi	r25, 0x20	; 32
    290e:	59 f4       	brne	.+22     	; 0x2926 <_ZN6SdFile10make83NameEPKcPh+0x98>
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	09 c0       	rjmp	.+18     	; 0x2926 <_ZN6SdFile10make83NameEPKcPh+0x98>
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	07 c0       	rjmp	.+14     	; 0x2926 <_ZN6SdFile10make83NameEPKcPh+0x98>
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	05 c0       	rjmp	.+10     	; 0x2926 <_ZN6SdFile10make83NameEPKcPh+0x98>
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	03 c0       	rjmp	.+6      	; 0x2926 <_ZN6SdFile10make83NameEPKcPh+0x98>
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	01 c0       	rjmp	.+2      	; 0x2926 <_ZN6SdFile10make83NameEPKcPh+0x98>
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	df 91       	pop	r29
    2928:	cf 91       	pop	r28
    292a:	08 95       	ret

0000292c <_ZN6SdFile8openRootEP8SdVolume>:
    292c:	0f 93       	push	r16
    292e:	1f 93       	push	r17
    2930:	cf 93       	push	r28
    2932:	df 93       	push	r29
    2934:	ec 01       	movw	r28, r24
    2936:	8d 81       	ldd	r24, Y+5	; 0x05
    2938:	81 11       	cpse	r24, r1
    293a:	4f c0       	rjmp	.+158    	; 0x29da <_ZN6SdFile8openRootEP8SdVolume+0xae>
    293c:	8b 01       	movw	r16, r22
    293e:	fb 01       	movw	r30, r22
    2940:	97 89       	ldd	r25, Z+23	; 0x17
    2942:	90 31       	cpi	r25, 0x10	; 16
    2944:	19 f5       	brne	.+70     	; 0x298c <_ZN6SdFile8openRootEP8SdVolume+0x60>
    2946:	82 e0       	ldi	r24, 0x02	; 2
    2948:	8d 83       	std	Y+5, r24	; 0x05
    294a:	1f 8a       	std	Y+23, r1	; 0x17
    294c:	18 8e       	std	Y+24, r1	; 0x18
    294e:	19 8e       	std	Y+25, r1	; 0x19
    2950:	1a 8e       	std	Y+26, r1	; 0x1a
    2952:	80 8d       	ldd	r24, Z+24	; 0x18
    2954:	91 8d       	ldd	r25, Z+25	; 0x19
    2956:	a0 e0       	ldi	r26, 0x00	; 0
    2958:	b0 e0       	ldi	r27, 0x00	; 0
    295a:	88 0f       	add	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	aa 1f       	adc	r26, r26
    2960:	bb 1f       	adc	r27, r27
    2962:	88 0f       	add	r24, r24
    2964:	99 1f       	adc	r25, r25
    2966:	aa 1f       	adc	r26, r26
    2968:	bb 1f       	adc	r27, r27
    296a:	88 0f       	add	r24, r24
    296c:	99 1f       	adc	r25, r25
    296e:	aa 1f       	adc	r26, r26
    2970:	bb 1f       	adc	r27, r27
    2972:	88 0f       	add	r24, r24
    2974:	99 1f       	adc	r25, r25
    2976:	aa 1f       	adc	r26, r26
    2978:	bb 1f       	adc	r27, r27
    297a:	88 0f       	add	r24, r24
    297c:	99 1f       	adc	r25, r25
    297e:	aa 1f       	adc	r26, r26
    2980:	bb 1f       	adc	r27, r27
    2982:	8b 8b       	std	Y+19, r24	; 0x13
    2984:	9c 8b       	std	Y+20, r25	; 0x14
    2986:	ad 8b       	std	Y+21, r26	; 0x15
    2988:	be 8b       	std	Y+22, r27	; 0x16
    298a:	15 c0       	rjmp	.+42     	; 0x29b6 <_ZN6SdFile8openRootEP8SdVolume+0x8a>
    298c:	90 32       	cpi	r25, 0x20	; 32
    298e:	31 f5       	brne	.+76     	; 0x29dc <_ZN6SdFile8openRootEP8SdVolume+0xb0>
    2990:	83 e0       	ldi	r24, 0x03	; 3
    2992:	8d 83       	std	Y+5, r24	; 0x05
    2994:	fb 01       	movw	r30, r22
    2996:	42 8d       	ldd	r20, Z+26	; 0x1a
    2998:	53 8d       	ldd	r21, Z+27	; 0x1b
    299a:	64 8d       	ldd	r22, Z+28	; 0x1c
    299c:	75 8d       	ldd	r23, Z+29	; 0x1d
    299e:	4f 8b       	std	Y+23, r20	; 0x17
    29a0:	58 8f       	std	Y+24, r21	; 0x18
    29a2:	69 8f       	std	Y+25, r22	; 0x19
    29a4:	7a 8f       	std	Y+26, r23	; 0x1a
    29a6:	9e 01       	movw	r18, r28
    29a8:	2d 5e       	subi	r18, 0xED	; 237
    29aa:	3f 4f       	sbci	r19, 0xFF	; 255
    29ac:	c8 01       	movw	r24, r16
    29ae:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <_ZNK8SdVolume9chainSizeEmPm>
    29b2:	88 23       	and	r24, r24
    29b4:	99 f0       	breq	.+38     	; 0x29dc <_ZN6SdFile8openRootEP8SdVolume+0xb0>
    29b6:	1c 8f       	std	Y+28, r17	; 0x1c
    29b8:	0b 8f       	std	Y+27, r16	; 0x1b
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	8c 83       	std	Y+4, r24	; 0x04
    29be:	1e 82       	std	Y+6, r1	; 0x06
    29c0:	1f 82       	std	Y+7, r1	; 0x07
    29c2:	18 86       	std	Y+8, r1	; 0x08
    29c4:	19 86       	std	Y+9, r1	; 0x09
    29c6:	1a 86       	std	Y+10, r1	; 0x0a
    29c8:	1b 86       	std	Y+11, r1	; 0x0b
    29ca:	1c 86       	std	Y+12, r1	; 0x0c
    29cc:	1d 86       	std	Y+13, r1	; 0x0d
    29ce:	1e 86       	std	Y+14, r1	; 0x0e
    29d0:	1f 86       	std	Y+15, r1	; 0x0f
    29d2:	18 8a       	std	Y+16, r1	; 0x10
    29d4:	19 8a       	std	Y+17, r1	; 0x11
    29d6:	1a 8a       	std	Y+18, r1	; 0x12
    29d8:	01 c0       	rjmp	.+2      	; 0x29dc <_ZN6SdFile8openRootEP8SdVolume+0xb0>
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	df 91       	pop	r29
    29de:	cf 91       	pop	r28
    29e0:	1f 91       	pop	r17
    29e2:	0f 91       	pop	r16
    29e4:	08 95       	ret

000029e6 <_ZN6SdFile4readEPvj>:
    29e6:	3f 92       	push	r3
    29e8:	4f 92       	push	r4
    29ea:	5f 92       	push	r5
    29ec:	6f 92       	push	r6
    29ee:	7f 92       	push	r7
    29f0:	8f 92       	push	r8
    29f2:	9f 92       	push	r9
    29f4:	af 92       	push	r10
    29f6:	bf 92       	push	r11
    29f8:	cf 92       	push	r12
    29fa:	df 92       	push	r13
    29fc:	ef 92       	push	r14
    29fe:	ff 92       	push	r15
    2a00:	0f 93       	push	r16
    2a02:	1f 93       	push	r17
    2a04:	cf 93       	push	r28
    2a06:	df 93       	push	r29
    2a08:	00 d0       	rcall	.+0      	; 0x2a0a <_ZN6SdFile4readEPvj+0x24>
    2a0a:	00 d0       	rcall	.+0      	; 0x2a0c <_ZN6SdFile4readEPvj+0x26>
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
    2a10:	4c 01       	movw	r8, r24
    2a12:	6b 01       	movw	r12, r22
    2a14:	5a 83       	std	Y+2, r21	; 0x02
    2a16:	49 83       	std	Y+1, r20	; 0x01
    2a18:	fc 01       	movw	r30, r24
    2a1a:	85 81       	ldd	r24, Z+5	; 0x05
    2a1c:	88 23       	and	r24, r24
    2a1e:	31 f0       	breq	.+12     	; 0x2a2c <_ZN6SdFile4readEPvj+0x46>
    2a20:	84 81       	ldd	r24, Z+4	; 0x04
    2a22:	80 fd       	sbrc	r24, 0
    2a24:	06 c0       	rjmp	.+12     	; 0x2a32 <_ZN6SdFile4readEPvj+0x4c>
    2a26:	33 24       	eor	r3, r3
    2a28:	33 94       	inc	r3
    2a2a:	04 c0       	rjmp	.+8      	; 0x2a34 <_ZN6SdFile4readEPvj+0x4e>
    2a2c:	33 24       	eor	r3, r3
    2a2e:	33 94       	inc	r3
    2a30:	01 c0       	rjmp	.+2      	; 0x2a34 <_ZN6SdFile4readEPvj+0x4e>
    2a32:	31 2c       	mov	r3, r1
    2a34:	31 10       	cpse	r3, r1
    2a36:	05 c1       	rjmp	.+522    	; 0x2c42 <_ZN6SdFile4readEPvj+0x25c>
    2a38:	09 81       	ldd	r16, Y+1	; 0x01
    2a3a:	1a 81       	ldd	r17, Y+2	; 0x02
    2a3c:	c8 01       	movw	r24, r16
    2a3e:	a0 e0       	ldi	r26, 0x00	; 0
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	f4 01       	movw	r30, r8
    2a44:	03 89       	ldd	r16, Z+19	; 0x13
    2a46:	14 89       	ldd	r17, Z+20	; 0x14
    2a48:	25 89       	ldd	r18, Z+21	; 0x15
    2a4a:	36 89       	ldd	r19, Z+22	; 0x16
    2a4c:	42 85       	ldd	r20, Z+10	; 0x0a
    2a4e:	53 85       	ldd	r21, Z+11	; 0x0b
    2a50:	64 85       	ldd	r22, Z+12	; 0x0c
    2a52:	75 85       	ldd	r23, Z+13	; 0x0d
    2a54:	28 01       	movw	r4, r16
    2a56:	39 01       	movw	r6, r18
    2a58:	44 1a       	sub	r4, r20
    2a5a:	55 0a       	sbc	r5, r21
    2a5c:	66 0a       	sbc	r6, r22
    2a5e:	77 0a       	sbc	r7, r23
    2a60:	48 16       	cp	r4, r24
    2a62:	59 06       	cpc	r5, r25
    2a64:	6a 06       	cpc	r6, r26
    2a66:	7b 06       	cpc	r7, r27
    2a68:	28 f4       	brcc	.+10     	; 0x2a74 <_ZN6SdFile4readEPvj+0x8e>
    2a6a:	c8 01       	movw	r24, r16
    2a6c:	84 1b       	sub	r24, r20
    2a6e:	95 0b       	sbc	r25, r21
    2a70:	9a 83       	std	Y+2, r25	; 0x02
    2a72:	89 83       	std	Y+1, r24	; 0x01
    2a74:	69 80       	ldd	r6, Y+1	; 0x01
    2a76:	7a 80       	ldd	r7, Y+2	; 0x02
    2a78:	61 14       	cp	r6, r1
    2a7a:	71 04       	cpc	r7, r1
    2a7c:	09 f4       	brne	.+2      	; 0x2a80 <_ZN6SdFile4readEPvj+0x9a>
    2a7e:	de c0       	rjmp	.+444    	; 0x2c3c <_ZN6SdFile4readEPvj+0x256>
    2a80:	f4 01       	movw	r30, r8
    2a82:	82 85       	ldd	r24, Z+10	; 0x0a
    2a84:	93 85       	ldd	r25, Z+11	; 0x0b
    2a86:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a88:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a8a:	2c 01       	movw	r4, r24
    2a8c:	f1 e0       	ldi	r31, 0x01	; 1
    2a8e:	5f 22       	and	r5, r31
    2a90:	f4 01       	movw	r30, r8
    2a92:	25 81       	ldd	r18, Z+5	; 0x05
    2a94:	22 30       	cpi	r18, 0x02	; 2
    2a96:	c9 f4       	brne	.+50     	; 0x2aca <_ZN6SdFile4readEPvj+0xe4>
    2a98:	23 8d       	ldd	r18, Z+27	; 0x1b
    2a9a:	34 8d       	ldd	r19, Z+28	; 0x1c
    2a9c:	f9 01       	movw	r30, r18
    2a9e:	42 8d       	ldd	r20, Z+26	; 0x1a
    2aa0:	53 8d       	ldd	r21, Z+27	; 0x1b
    2aa2:	64 8d       	ldd	r22, Z+28	; 0x1c
    2aa4:	75 8d       	ldd	r23, Z+29	; 0x1d
    2aa6:	07 2e       	mov	r0, r23
    2aa8:	79 e0       	ldi	r23, 0x09	; 9
    2aaa:	b6 95       	lsr	r27
    2aac:	a7 95       	ror	r26
    2aae:	97 95       	ror	r25
    2ab0:	87 95       	ror	r24
    2ab2:	7a 95       	dec	r23
    2ab4:	d1 f7       	brne	.-12     	; 0x2aaa <_ZN6SdFile4readEPvj+0xc4>
    2ab6:	70 2d       	mov	r23, r0
    2ab8:	8a 01       	movw	r16, r20
    2aba:	9b 01       	movw	r18, r22
    2abc:	08 0f       	add	r16, r24
    2abe:	19 1f       	adc	r17, r25
    2ac0:	2a 1f       	adc	r18, r26
    2ac2:	3b 1f       	adc	r19, r27
    2ac4:	c9 01       	movw	r24, r18
    2ac6:	b8 01       	movw	r22, r16
    2ac8:	54 c0       	rjmp	.+168    	; 0x2b72 <_ZN6SdFile4readEPvj+0x18c>
    2aca:	f4 01       	movw	r30, r8
    2acc:	03 8d       	ldd	r16, Z+27	; 0x1b
    2ace:	14 8d       	ldd	r17, Z+28	; 0x1c
    2ad0:	f8 01       	movw	r30, r16
    2ad2:	b4 80       	ldd	r11, Z+4	; 0x04
    2ad4:	ba 94       	dec	r11
    2ad6:	ac 01       	movw	r20, r24
    2ad8:	bd 01       	movw	r22, r26
    2ada:	03 2e       	mov	r0, r19
    2adc:	39 e0       	ldi	r19, 0x09	; 9
    2ade:	76 95       	lsr	r23
    2ae0:	67 95       	ror	r22
    2ae2:	57 95       	ror	r21
    2ae4:	47 95       	ror	r20
    2ae6:	3a 95       	dec	r19
    2ae8:	d1 f7       	brne	.-12     	; 0x2ade <_ZN6SdFile4readEPvj+0xf8>
    2aea:	30 2d       	mov	r19, r0
    2aec:	b4 22       	and	r11, r20
    2aee:	41 14       	cp	r4, r1
    2af0:	51 04       	cpc	r5, r1
    2af2:	f1 f4       	brne	.+60     	; 0x2b30 <_ZN6SdFile4readEPvj+0x14a>
    2af4:	b1 10       	cpse	r11, r1
    2af6:	1c c0       	rjmp	.+56     	; 0x2b30 <_ZN6SdFile4readEPvj+0x14a>
    2af8:	89 2b       	or	r24, r25
    2afa:	8a 2b       	or	r24, r26
    2afc:	8b 2b       	or	r24, r27
    2afe:	51 f4       	brne	.+20     	; 0x2b14 <_ZN6SdFile4readEPvj+0x12e>
    2b00:	f4 01       	movw	r30, r8
    2b02:	87 89       	ldd	r24, Z+23	; 0x17
    2b04:	90 8d       	ldd	r25, Z+24	; 0x18
    2b06:	a1 8d       	ldd	r26, Z+25	; 0x19
    2b08:	b2 8d       	ldd	r27, Z+26	; 0x1a
    2b0a:	86 83       	std	Z+6, r24	; 0x06
    2b0c:	97 83       	std	Z+7, r25	; 0x07
    2b0e:	a0 87       	std	Z+8, r26	; 0x08
    2b10:	b1 87       	std	Z+9, r27	; 0x09
    2b12:	0e c0       	rjmp	.+28     	; 0x2b30 <_ZN6SdFile4readEPvj+0x14a>
    2b14:	f4 01       	movw	r30, r8
    2b16:	46 81       	ldd	r20, Z+6	; 0x06
    2b18:	57 81       	ldd	r21, Z+7	; 0x07
    2b1a:	60 85       	ldd	r22, Z+8	; 0x08
    2b1c:	71 85       	ldd	r23, Z+9	; 0x09
    2b1e:	94 01       	movw	r18, r8
    2b20:	2a 5f       	subi	r18, 0xFA	; 250
    2b22:	3f 4f       	sbci	r19, 0xFF	; 255
    2b24:	c8 01       	movw	r24, r16
    2b26:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <_ZNK8SdVolume6fatGetEmPm>
    2b2a:	88 23       	and	r24, r24
    2b2c:	09 f4       	brne	.+2      	; 0x2b30 <_ZN6SdFile4readEPvj+0x14a>
    2b2e:	8c c0       	rjmp	.+280    	; 0x2c48 <_ZN6SdFile4readEPvj+0x262>
    2b30:	f4 01       	movw	r30, r8
    2b32:	86 81       	ldd	r24, Z+6	; 0x06
    2b34:	97 81       	ldd	r25, Z+7	; 0x07
    2b36:	a0 85       	ldd	r26, Z+8	; 0x08
    2b38:	b1 85       	ldd	r27, Z+9	; 0x09
    2b3a:	23 8d       	ldd	r18, Z+27	; 0x1b
    2b3c:	34 8d       	ldd	r19, Z+28	; 0x1c
    2b3e:	f9 01       	movw	r30, r18
    2b40:	46 85       	ldd	r20, Z+14	; 0x0e
    2b42:	57 85       	ldd	r21, Z+15	; 0x0f
    2b44:	60 89       	ldd	r22, Z+16	; 0x10
    2b46:	71 89       	ldd	r23, Z+17	; 0x11
    2b48:	02 97       	sbiw	r24, 0x02	; 2
    2b4a:	a1 09       	sbc	r26, r1
    2b4c:	b1 09       	sbc	r27, r1
    2b4e:	05 84       	ldd	r0, Z+13	; 0x0d
    2b50:	04 c0       	rjmp	.+8      	; 0x2b5a <_ZN6SdFile4readEPvj+0x174>
    2b52:	88 0f       	add	r24, r24
    2b54:	99 1f       	adc	r25, r25
    2b56:	aa 1f       	adc	r26, r26
    2b58:	bb 1f       	adc	r27, r27
    2b5a:	0a 94       	dec	r0
    2b5c:	d2 f7       	brpl	.-12     	; 0x2b52 <_ZN6SdFile4readEPvj+0x16c>
    2b5e:	84 0f       	add	r24, r20
    2b60:	95 1f       	adc	r25, r21
    2b62:	a6 1f       	adc	r26, r22
    2b64:	b7 1f       	adc	r27, r23
    2b66:	bc 01       	movw	r22, r24
    2b68:	cd 01       	movw	r24, r26
    2b6a:	6b 0d       	add	r22, r11
    2b6c:	71 1d       	adc	r23, r1
    2b6e:	81 1d       	adc	r24, r1
    2b70:	91 1d       	adc	r25, r1
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	32 e0       	ldi	r19, 0x02	; 2
    2b76:	59 01       	movw	r10, r18
    2b78:	a4 18       	sub	r10, r4
    2b7a:	b5 08       	sbc	r11, r5
    2b7c:	a6 14       	cp	r10, r6
    2b7e:	b7 04       	cpc	r11, r7
    2b80:	08 f0       	brcs	.+2      	; 0x2b84 <_ZN6SdFile4readEPvj+0x19e>
    2b82:	53 01       	movw	r10, r6
    2b84:	f4 01       	movw	r30, r8
    2b86:	24 81       	ldd	r18, Z+4	; 0x04
    2b88:	26 fd       	sbrc	r18, 6
    2b8a:	04 c0       	rjmp	.+8      	; 0x2b94 <_ZN6SdFile4readEPvj+0x1ae>
    2b8c:	a1 14       	cp	r10, r1
    2b8e:	f2 e0       	ldi	r31, 0x02	; 2
    2b90:	bf 06       	cpc	r11, r31
    2b92:	79 f4       	brne	.+30     	; 0x2bb2 <_ZN6SdFile4readEPvj+0x1cc>
    2b94:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    2b98:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2b9c:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2ba0:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2ba4:	60 17       	cp	r22, r16
    2ba6:	71 07       	cpc	r23, r17
    2ba8:	82 07       	cpc	r24, r18
    2baa:	93 07       	cpc	r25, r19
    2bac:	21 f4       	brne	.+8      	; 0x2bb6 <_ZN6SdFile4readEPvj+0x1d0>
    2bae:	23 2d       	mov	r18, r3
    2bb0:	03 c0       	rjmp	.+6      	; 0x2bb8 <_ZN6SdFile4readEPvj+0x1d2>
    2bb2:	23 2d       	mov	r18, r3
    2bb4:	01 c0       	rjmp	.+2      	; 0x2bb8 <_ZN6SdFile4readEPvj+0x1d2>
    2bb6:	21 e0       	ldi	r18, 0x01	; 1
    2bb8:	22 23       	and	r18, r18
    2bba:	81 f0       	breq	.+32     	; 0x2bdc <_ZN6SdFile4readEPvj+0x1f6>
    2bbc:	76 01       	movw	r14, r12
    2bbe:	85 01       	movw	r16, r10
    2bc0:	92 01       	movw	r18, r4
    2bc2:	ab 01       	movw	r20, r22
    2bc4:	bc 01       	movw	r22, r24
    2bc6:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <_ZN8SdVolume7sdCard_E>
    2bca:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <_ZN8SdVolume7sdCard_E+0x1>
    2bce:	0e 94 50 12 	call	0x24a0	; 0x24a0 <_ZN7Sd2Card8readDataEmjjPh>
    2bd2:	88 23       	and	r24, r24
    2bd4:	e1 f1       	breq	.+120    	; 0x2c4e <_ZN6SdFile4readEPvj+0x268>
    2bd6:	ca 0c       	add	r12, r10
    2bd8:	db 1c       	adc	r13, r11
    2bda:	20 c0       	rjmp	.+64     	; 0x2c1c <_ZN6SdFile4readEPvj+0x236>
    2bdc:	40 e0       	ldi	r20, 0x00	; 0
    2bde:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN8SdVolume13cacheRawBlockEmh>
    2be2:	88 23       	and	r24, r24
    2be4:	b9 f1       	breq	.+110    	; 0x2c54 <_ZN6SdFile4readEPvj+0x26e>
    2be6:	82 01       	movw	r16, r4
    2be8:	04 54       	subi	r16, 0x44	; 68
    2bea:	1d 4f       	sbci	r17, 0xFD	; 253
    2bec:	1c 83       	std	Y+4, r17	; 0x04
    2bee:	0b 83       	std	Y+3, r16	; 0x03
    2bf0:	98 01       	movw	r18, r16
    2bf2:	2a 0d       	add	r18, r10
    2bf4:	3b 1d       	adc	r19, r11
    2bf6:	4b 81       	ldd	r20, Y+3	; 0x03
    2bf8:	5c 81       	ldd	r21, Y+4	; 0x04
    2bfa:	42 17       	cp	r20, r18
    2bfc:	53 07       	cpc	r21, r19
    2bfe:	71 f0       	breq	.+28     	; 0x2c1c <_ZN6SdFile4readEPvj+0x236>
    2c00:	fa 01       	movw	r30, r20
    2c02:	80 81       	ld	r24, Z
    2c04:	f6 01       	movw	r30, r12
    2c06:	80 83       	st	Z, r24
    2c08:	8a 01       	movw	r16, r20
    2c0a:	0f 5f       	subi	r16, 0xFF	; 255
    2c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c0e:	1c 83       	std	Y+4, r17	; 0x04
    2c10:	0b 83       	std	Y+3, r16	; 0x03
    2c12:	a6 01       	movw	r20, r12
    2c14:	4f 5f       	subi	r20, 0xFF	; 255
    2c16:	5f 4f       	sbci	r21, 0xFF	; 255
    2c18:	6a 01       	movw	r12, r20
    2c1a:	ed cf       	rjmp	.-38     	; 0x2bf6 <_ZN6SdFile4readEPvj+0x210>
    2c1c:	f4 01       	movw	r30, r8
    2c1e:	82 85       	ldd	r24, Z+10	; 0x0a
    2c20:	93 85       	ldd	r25, Z+11	; 0x0b
    2c22:	a4 85       	ldd	r26, Z+12	; 0x0c
    2c24:	b5 85       	ldd	r27, Z+13	; 0x0d
    2c26:	8a 0d       	add	r24, r10
    2c28:	9b 1d       	adc	r25, r11
    2c2a:	a1 1d       	adc	r26, r1
    2c2c:	b1 1d       	adc	r27, r1
    2c2e:	82 87       	std	Z+10, r24	; 0x0a
    2c30:	93 87       	std	Z+11, r25	; 0x0b
    2c32:	a4 87       	std	Z+12, r26	; 0x0c
    2c34:	b5 87       	std	Z+13, r27	; 0x0d
    2c36:	6a 18       	sub	r6, r10
    2c38:	7b 08       	sbc	r7, r11
    2c3a:	1e cf       	rjmp	.-452    	; 0x2a78 <_ZN6SdFile4readEPvj+0x92>
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
    2c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c40:	0b c0       	rjmp	.+22     	; 0x2c58 <_ZN6SdFile4readEPvj+0x272>
    2c42:	8f ef       	ldi	r24, 0xFF	; 255
    2c44:	9f ef       	ldi	r25, 0xFF	; 255
    2c46:	08 c0       	rjmp	.+16     	; 0x2c58 <_ZN6SdFile4readEPvj+0x272>
    2c48:	8f ef       	ldi	r24, 0xFF	; 255
    2c4a:	9f ef       	ldi	r25, 0xFF	; 255
    2c4c:	05 c0       	rjmp	.+10     	; 0x2c58 <_ZN6SdFile4readEPvj+0x272>
    2c4e:	8f ef       	ldi	r24, 0xFF	; 255
    2c50:	9f ef       	ldi	r25, 0xFF	; 255
    2c52:	02 c0       	rjmp	.+4      	; 0x2c58 <_ZN6SdFile4readEPvj+0x272>
    2c54:	8f ef       	ldi	r24, 0xFF	; 255
    2c56:	9f ef       	ldi	r25, 0xFF	; 255
    2c58:	0f 90       	pop	r0
    2c5a:	0f 90       	pop	r0
    2c5c:	0f 90       	pop	r0
    2c5e:	0f 90       	pop	r0
    2c60:	df 91       	pop	r29
    2c62:	cf 91       	pop	r28
    2c64:	1f 91       	pop	r17
    2c66:	0f 91       	pop	r16
    2c68:	ff 90       	pop	r15
    2c6a:	ef 90       	pop	r14
    2c6c:	df 90       	pop	r13
    2c6e:	cf 90       	pop	r12
    2c70:	bf 90       	pop	r11
    2c72:	af 90       	pop	r10
    2c74:	9f 90       	pop	r9
    2c76:	8f 90       	pop	r8
    2c78:	7f 90       	pop	r7
    2c7a:	6f 90       	pop	r6
    2c7c:	5f 90       	pop	r5
    2c7e:	4f 90       	pop	r4
    2c80:	3f 90       	pop	r3
    2c82:	08 95       	ret

00002c84 <_ZN6SdFile12readDirCacheEv>:
    2c84:	ff 92       	push	r15
    2c86:	0f 93       	push	r16
    2c88:	1f 93       	push	r17
    2c8a:	cf 93       	push	r28
    2c8c:	df 93       	push	r29
    2c8e:	1f 92       	push	r1
    2c90:	cd b7       	in	r28, 0x3d	; 61
    2c92:	de b7       	in	r29, 0x3e	; 62
    2c94:	fc 01       	movw	r30, r24
    2c96:	25 81       	ldd	r18, Z+5	; 0x05
    2c98:	22 30       	cpi	r18, 0x02	; 2
    2c9a:	98 f1       	brcs	.+102    	; 0x2d02 <_ZN6SdFile12readDirCacheEv+0x7e>
    2c9c:	8c 01       	movw	r16, r24
    2c9e:	42 85       	ldd	r20, Z+10	; 0x0a
    2ca0:	53 85       	ldd	r21, Z+11	; 0x0b
    2ca2:	64 85       	ldd	r22, Z+12	; 0x0c
    2ca4:	75 85       	ldd	r23, Z+13	; 0x0d
    2ca6:	68 94       	set
    2ca8:	14 f8       	bld	r1, 4
    2caa:	76 95       	lsr	r23
    2cac:	67 95       	ror	r22
    2cae:	57 95       	ror	r21
    2cb0:	47 95       	ror	r20
    2cb2:	16 94       	lsr	r1
    2cb4:	d1 f7       	brne	.-12     	; 0x2caa <_ZN6SdFile12readDirCacheEv+0x26>
    2cb6:	f4 2f       	mov	r31, r20
    2cb8:	ff 70       	andi	r31, 0x0F	; 15
    2cba:	ff 2e       	mov	r15, r31
    2cbc:	41 e0       	ldi	r20, 0x01	; 1
    2cbe:	50 e0       	ldi	r21, 0x00	; 0
    2cc0:	be 01       	movw	r22, r28
    2cc2:	6f 5f       	subi	r22, 0xFF	; 255
    2cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc6:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <_ZN6SdFile4readEPvj>
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	19 f4       	brne	.+6      	; 0x2cd4 <_ZN6SdFile12readDirCacheEv+0x50>
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	02 c0       	rjmp	.+4      	; 0x2cd8 <_ZN6SdFile12readDirCacheEv+0x54>
    2cd4:	8f ef       	ldi	r24, 0xFF	; 255
    2cd6:	9f ef       	ldi	r25, 0xFF	; 255
    2cd8:	99 23       	and	r25, r25
    2cda:	b4 f0       	brlt	.+44     	; 0x2d08 <_ZN6SdFile12readDirCacheEv+0x84>
    2cdc:	f8 01       	movw	r30, r16
    2cde:	82 85       	ldd	r24, Z+10	; 0x0a
    2ce0:	93 85       	ldd	r25, Z+11	; 0x0b
    2ce2:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ce4:	b5 85       	ldd	r27, Z+13	; 0x0d
    2ce6:	4f 96       	adiw	r24, 0x1f	; 31
    2ce8:	a1 1d       	adc	r26, r1
    2cea:	b1 1d       	adc	r27, r1
    2cec:	82 87       	std	Z+10, r24	; 0x0a
    2cee:	93 87       	std	Z+11, r25	; 0x0b
    2cf0:	a4 87       	std	Z+12, r26	; 0x0c
    2cf2:	b5 87       	std	Z+13, r27	; 0x0d
    2cf4:	f0 e2       	ldi	r31, 0x20	; 32
    2cf6:	ff 9e       	mul	r15, r31
    2cf8:	c0 01       	movw	r24, r0
    2cfa:	11 24       	eor	r1, r1
    2cfc:	84 54       	subi	r24, 0x44	; 68
    2cfe:	9d 4f       	sbci	r25, 0xFD	; 253
    2d00:	05 c0       	rjmp	.+10     	; 0x2d0c <_ZN6SdFile12readDirCacheEv+0x88>
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	02 c0       	rjmp	.+4      	; 0x2d0c <_ZN6SdFile12readDirCacheEv+0x88>
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	0f 90       	pop	r0
    2d0e:	df 91       	pop	r29
    2d10:	cf 91       	pop	r28
    2d12:	1f 91       	pop	r17
    2d14:	0f 91       	pop	r16
    2d16:	ff 90       	pop	r15
    2d18:	08 95       	ret

00002d1a <_ZN6SdFile7seekSetEm>:
    2d1a:	8f 92       	push	r8
    2d1c:	9f 92       	push	r9
    2d1e:	af 92       	push	r10
    2d20:	bf 92       	push	r11
    2d22:	cf 92       	push	r12
    2d24:	df 92       	push	r13
    2d26:	ef 92       	push	r14
    2d28:	ff 92       	push	r15
    2d2a:	0f 93       	push	r16
    2d2c:	1f 93       	push	r17
    2d2e:	cf 93       	push	r28
    2d30:	df 93       	push	r29
    2d32:	ec 01       	movw	r28, r24
    2d34:	8d 81       	ldd	r24, Y+5	; 0x05
    2d36:	88 23       	and	r24, r24
    2d38:	59 f0       	breq	.+22     	; 0x2d50 <_ZN6SdFile7seekSetEm+0x36>
    2d3a:	0b 89       	ldd	r16, Y+19	; 0x13
    2d3c:	1c 89       	ldd	r17, Y+20	; 0x14
    2d3e:	2d 89       	ldd	r18, Y+21	; 0x15
    2d40:	3e 89       	ldd	r19, Y+22	; 0x16
    2d42:	04 17       	cp	r16, r20
    2d44:	15 07       	cpc	r17, r21
    2d46:	26 07       	cpc	r18, r22
    2d48:	37 07       	cpc	r19, r23
    2d4a:	20 f4       	brcc	.+8      	; 0x2d54 <_ZN6SdFile7seekSetEm+0x3a>
    2d4c:	91 e0       	ldi	r25, 0x01	; 1
    2d4e:	03 c0       	rjmp	.+6      	; 0x2d56 <_ZN6SdFile7seekSetEm+0x3c>
    2d50:	91 e0       	ldi	r25, 0x01	; 1
    2d52:	01 c0       	rjmp	.+2      	; 0x2d56 <_ZN6SdFile7seekSetEm+0x3c>
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	91 11       	cpse	r25, r1
    2d58:	73 c0       	rjmp	.+230    	; 0x2e40 <_ZN6SdFile7seekSetEm+0x126>
    2d5a:	82 30       	cpi	r24, 0x02	; 2
    2d5c:	31 f4       	brne	.+12     	; 0x2d6a <_ZN6SdFile7seekSetEm+0x50>
    2d5e:	4a 87       	std	Y+10, r20	; 0x0a
    2d60:	5b 87       	std	Y+11, r21	; 0x0b
    2d62:	6c 87       	std	Y+12, r22	; 0x0c
    2d64:	7d 87       	std	Y+13, r23	; 0x0d
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	6c c0       	rjmp	.+216    	; 0x2e42 <_ZN6SdFile7seekSetEm+0x128>
    2d6a:	41 15       	cp	r20, r1
    2d6c:	51 05       	cpc	r21, r1
    2d6e:	61 05       	cpc	r22, r1
    2d70:	71 05       	cpc	r23, r1
    2d72:	51 f4       	brne	.+20     	; 0x2d88 <_ZN6SdFile7seekSetEm+0x6e>
    2d74:	1e 82       	std	Y+6, r1	; 0x06
    2d76:	1f 82       	std	Y+7, r1	; 0x07
    2d78:	18 86       	std	Y+8, r1	; 0x08
    2d7a:	19 86       	std	Y+9, r1	; 0x09
    2d7c:	1a 86       	std	Y+10, r1	; 0x0a
    2d7e:	1b 86       	std	Y+11, r1	; 0x0b
    2d80:	1c 86       	std	Y+12, r1	; 0x0c
    2d82:	1d 86       	std	Y+13, r1	; 0x0d
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	5d c0       	rjmp	.+186    	; 0x2e42 <_ZN6SdFile7seekSetEm+0x128>
    2d88:	4a 01       	movw	r8, r20
    2d8a:	5b 01       	movw	r10, r22
    2d8c:	0a 85       	ldd	r16, Y+10	; 0x0a
    2d8e:	1b 85       	ldd	r17, Y+11	; 0x0b
    2d90:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d92:	3d 85       	ldd	r19, Y+13	; 0x0d
    2d94:	68 01       	movw	r12, r16
    2d96:	79 01       	movw	r14, r18
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	c8 1a       	sub	r12, r24
    2d9c:	d1 08       	sbc	r13, r1
    2d9e:	e1 08       	sbc	r14, r1
    2da0:	f1 08       	sbc	r15, r1
    2da2:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2da4:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2da6:	85 85       	ldd	r24, Z+13	; 0x0d
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	09 96       	adiw	r24, 0x09	; 9
    2dac:	08 2e       	mov	r0, r24
    2dae:	04 c0       	rjmp	.+8      	; 0x2db8 <_ZN6SdFile7seekSetEm+0x9e>
    2db0:	f6 94       	lsr	r15
    2db2:	e7 94       	ror	r14
    2db4:	d7 94       	ror	r13
    2db6:	c7 94       	ror	r12
    2db8:	0a 94       	dec	r0
    2dba:	d2 f7       	brpl	.-12     	; 0x2db0 <_ZN6SdFile7seekSetEm+0x96>
    2dbc:	41 50       	subi	r20, 0x01	; 1
    2dbe:	51 09       	sbc	r21, r1
    2dc0:	61 09       	sbc	r22, r1
    2dc2:	71 09       	sbc	r23, r1
    2dc4:	04 c0       	rjmp	.+8      	; 0x2dce <_ZN6SdFile7seekSetEm+0xb4>
    2dc6:	76 95       	lsr	r23
    2dc8:	67 95       	ror	r22
    2dca:	57 95       	ror	r21
    2dcc:	47 95       	ror	r20
    2dce:	8a 95       	dec	r24
    2dd0:	d2 f7       	brpl	.-12     	; 0x2dc6 <_ZN6SdFile7seekSetEm+0xac>
    2dd2:	4c 15       	cp	r20, r12
    2dd4:	5d 05       	cpc	r21, r13
    2dd6:	6e 05       	cpc	r22, r14
    2dd8:	7f 05       	cpc	r23, r15
    2dda:	20 f0       	brcs	.+8      	; 0x2de4 <_ZN6SdFile7seekSetEm+0xca>
    2ddc:	01 2b       	or	r16, r17
    2dde:	02 2b       	or	r16, r18
    2de0:	03 2b       	or	r16, r19
    2de2:	49 f4       	brne	.+18     	; 0x2df6 <_ZN6SdFile7seekSetEm+0xdc>
    2de4:	8f 89       	ldd	r24, Y+23	; 0x17
    2de6:	98 8d       	ldd	r25, Y+24	; 0x18
    2de8:	a9 8d       	ldd	r26, Y+25	; 0x19
    2dea:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2dec:	8e 83       	std	Y+6, r24	; 0x06
    2dee:	9f 83       	std	Y+7, r25	; 0x07
    2df0:	a8 87       	std	Y+8, r26	; 0x08
    2df2:	b9 87       	std	Y+9, r27	; 0x09
    2df4:	04 c0       	rjmp	.+8      	; 0x2dfe <_ZN6SdFile7seekSetEm+0xe4>
    2df6:	4c 19       	sub	r20, r12
    2df8:	5d 09       	sbc	r21, r13
    2dfa:	6e 09       	sbc	r22, r14
    2dfc:	7f 09       	sbc	r23, r15
    2dfe:	6a 01       	movw	r12, r20
    2e00:	7b 01       	movw	r14, r22
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	c8 1a       	sub	r12, r24
    2e06:	d1 08       	sbc	r13, r1
    2e08:	e1 08       	sbc	r14, r1
    2e0a:	f1 08       	sbc	r15, r1
    2e0c:	45 2b       	or	r20, r21
    2e0e:	46 2b       	or	r20, r22
    2e10:	47 2b       	or	r20, r23
    2e12:	81 f0       	breq	.+32     	; 0x2e34 <_ZN6SdFile7seekSetEm+0x11a>
    2e14:	4e 81       	ldd	r20, Y+6	; 0x06
    2e16:	5f 81       	ldd	r21, Y+7	; 0x07
    2e18:	68 85       	ldd	r22, Y+8	; 0x08
    2e1a:	79 85       	ldd	r23, Y+9	; 0x09
    2e1c:	9e 01       	movw	r18, r28
    2e1e:	2a 5f       	subi	r18, 0xFA	; 250
    2e20:	3f 4f       	sbci	r19, 0xFF	; 255
    2e22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e26:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <_ZNK8SdVolume6fatGetEmPm>
    2e2a:	b7 01       	movw	r22, r14
    2e2c:	a6 01       	movw	r20, r12
    2e2e:	81 11       	cpse	r24, r1
    2e30:	e6 cf       	rjmp	.-52     	; 0x2dfe <_ZN6SdFile7seekSetEm+0xe4>
    2e32:	07 c0       	rjmp	.+14     	; 0x2e42 <_ZN6SdFile7seekSetEm+0x128>
    2e34:	8a 86       	std	Y+10, r8	; 0x0a
    2e36:	9b 86       	std	Y+11, r9	; 0x0b
    2e38:	ac 86       	std	Y+12, r10	; 0x0c
    2e3a:	bd 86       	std	Y+13, r11	; 0x0d
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	01 c0       	rjmp	.+2      	; 0x2e42 <_ZN6SdFile7seekSetEm+0x128>
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	df 91       	pop	r29
    2e44:	cf 91       	pop	r28
    2e46:	1f 91       	pop	r17
    2e48:	0f 91       	pop	r16
    2e4a:	ff 90       	pop	r15
    2e4c:	ef 90       	pop	r14
    2e4e:	df 90       	pop	r13
    2e50:	cf 90       	pop	r12
    2e52:	bf 90       	pop	r11
    2e54:	af 90       	pop	r10
    2e56:	9f 90       	pop	r9
    2e58:	8f 90       	pop	r8
    2e5a:	08 95       	ret

00002e5c <_ZN6SdFile4syncEh>:
    2e5c:	ff 92       	push	r15
    2e5e:	0f 93       	push	r16
    2e60:	1f 93       	push	r17
    2e62:	cf 93       	push	r28
    2e64:	df 93       	push	r29
    2e66:	fc 01       	movw	r30, r24
    2e68:	85 81       	ldd	r24, Z+5	; 0x05
    2e6a:	88 23       	and	r24, r24
    2e6c:	09 f4       	brne	.+2      	; 0x2e70 <_ZN6SdFile4syncEh+0x14>
    2e6e:	43 c0       	rjmp	.+134    	; 0x2ef6 <_ZN6SdFile4syncEh+0x9a>
    2e70:	f6 2e       	mov	r15, r22
    2e72:	ef 01       	movw	r28, r30
    2e74:	84 81       	ldd	r24, Z+4	; 0x04
    2e76:	88 23       	and	r24, r24
    2e78:	a4 f5       	brge	.+104    	; 0x2ee2 <_ZN6SdFile4syncEh+0x86>
    2e7a:	61 e0       	ldi	r22, 0x01	; 1
    2e7c:	cf 01       	movw	r24, r30
    2e7e:	0e 94 2e 14 	call	0x285c	; 0x285c <_ZN6SdFile13cacheDirEntryEh>
    2e82:	8c 01       	movw	r16, r24
    2e84:	89 2b       	or	r24, r25
    2e86:	b1 f1       	breq	.+108    	; 0x2ef4 <_ZN6SdFile4syncEh+0x98>
    2e88:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8a:	82 30       	cpi	r24, 0x02	; 2
    2e8c:	48 f4       	brcc	.+18     	; 0x2ea0 <_ZN6SdFile4syncEh+0x44>
    2e8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e90:	9c 89       	ldd	r25, Y+20	; 0x14
    2e92:	ad 89       	ldd	r26, Y+21	; 0x15
    2e94:	be 89       	ldd	r27, Y+22	; 0x16
    2e96:	f8 01       	movw	r30, r16
    2e98:	84 8f       	std	Z+28, r24	; 0x1c
    2e9a:	95 8f       	std	Z+29, r25	; 0x1d
    2e9c:	a6 8f       	std	Z+30, r26	; 0x1e
    2e9e:	b7 8f       	std	Z+31, r27	; 0x1f
    2ea0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ea2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ea4:	a9 8d       	ldd	r26, Y+25	; 0x19
    2ea6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2ea8:	f8 01       	movw	r30, r16
    2eaa:	93 8f       	std	Z+27, r25	; 0x1b
    2eac:	82 8f       	std	Z+26, r24	; 0x1a
    2eae:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb2:	a9 8d       	ldd	r26, Y+25	; 0x19
    2eb4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2eb6:	b5 8b       	std	Z+21, r27	; 0x15
    2eb8:	a4 8b       	std	Z+20, r26	; 0x14
    2eba:	e0 91 b3 02 	lds	r30, 0x02B3	; 0x8002b3 <_ZN6SdFile9dateTime_E>
    2ebe:	f0 91 b4 02 	lds	r31, 0x02B4	; 0x8002b4 <_ZN6SdFile9dateTime_E+0x1>
    2ec2:	30 97       	sbiw	r30, 0x00	; 0
    2ec4:	59 f0       	breq	.+22     	; 0x2edc <_ZN6SdFile4syncEh+0x80>
    2ec6:	b8 01       	movw	r22, r16
    2ec8:	6a 5e       	subi	r22, 0xEA	; 234
    2eca:	7f 4f       	sbci	r23, 0xFF	; 255
    2ecc:	c8 01       	movw	r24, r16
    2ece:	48 96       	adiw	r24, 0x18	; 24
    2ed0:	09 95       	icall
    2ed2:	f8 01       	movw	r30, r16
    2ed4:	80 8d       	ldd	r24, Z+24	; 0x18
    2ed6:	91 8d       	ldd	r25, Z+25	; 0x19
    2ed8:	93 8b       	std	Z+19, r25	; 0x13
    2eda:	82 8b       	std	Z+18, r24	; 0x12
    2edc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ede:	8f 77       	andi	r24, 0x7F	; 127
    2ee0:	8c 83       	std	Y+4, r24	; 0x04
    2ee2:	f1 10       	cpse	r15, r1
    2ee4:	03 c0       	rjmp	.+6      	; 0x2eec <_ZN6SdFile4syncEh+0x90>
    2ee6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ee8:	8f 7e       	andi	r24, 0xEF	; 239
    2eea:	8c 83       	std	Y+4, r24	; 0x04
    2eec:	8f 2d       	mov	r24, r15
    2eee:	0e 94 5f 1c 	call	0x38be	; 0x38be <_ZN8SdVolume10cacheFlushEh>
    2ef2:	01 c0       	rjmp	.+2      	; 0x2ef6 <_ZN6SdFile4syncEh+0x9a>
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    2ef6:	df 91       	pop	r29
    2ef8:	cf 91       	pop	r28
    2efa:	1f 91       	pop	r17
    2efc:	0f 91       	pop	r16
    2efe:	ff 90       	pop	r15
    2f00:	08 95       	ret

00002f02 <_ZN6SdFile5closeEv>:
    2f02:	cf 93       	push	r28
    2f04:	df 93       	push	r29
    2f06:	ec 01       	movw	r28, r24
    2f08:	61 e0       	ldi	r22, 0x01	; 1
    2f0a:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <_ZN6SdFile4syncEh>
    2f0e:	88 23       	and	r24, r24
    2f10:	11 f0       	breq	.+4      	; 0x2f16 <_ZN6SdFile5closeEv+0x14>
    2f12:	1d 82       	std	Y+5, r1	; 0x05
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	df 91       	pop	r29
    2f18:	cf 91       	pop	r28
    2f1a:	08 95       	ret

00002f1c <_ZN6SdFile17availableForWriteEv>:
    2f1c:	cf 93       	push	r28
    2f1e:	df 93       	push	r29
    2f20:	fc 01       	movw	r30, r24
    2f22:	25 81       	ldd	r18, Z+5	; 0x05
    2f24:	21 30       	cpi	r18, 0x01	; 1
    2f26:	29 f4       	brne	.+10     	; 0x2f32 <_ZN6SdFile17availableForWriteEv+0x16>
    2f28:	24 81       	ldd	r18, Z+4	; 0x04
    2f2a:	21 fd       	sbrc	r18, 1
    2f2c:	04 c0       	rjmp	.+8      	; 0x2f36 <_ZN6SdFile17availableForWriteEv+0x1a>
    2f2e:	21 e0       	ldi	r18, 0x01	; 1
    2f30:	03 c0       	rjmp	.+6      	; 0x2f38 <_ZN6SdFile17availableForWriteEv+0x1c>
    2f32:	21 e0       	ldi	r18, 0x01	; 1
    2f34:	01 c0       	rjmp	.+2      	; 0x2f38 <_ZN6SdFile17availableForWriteEv+0x1c>
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	21 11       	cpse	r18, r1
    2f3a:	4a c0       	rjmp	.+148    	; 0x2fd0 <_ZN6SdFile17availableForWriteEv+0xb4>
    2f3c:	ec 01       	movw	r28, r24
    2f3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f40:	82 ff       	sbrs	r24, 2
    2f42:	12 c0       	rjmp	.+36     	; 0x2f68 <_ZN6SdFile17availableForWriteEv+0x4c>
    2f44:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f46:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f48:	ac 85       	ldd	r26, Y+12	; 0x0c
    2f4a:	bd 85       	ldd	r27, Y+13	; 0x0d
    2f4c:	4b 89       	ldd	r20, Y+19	; 0x13
    2f4e:	5c 89       	ldd	r21, Y+20	; 0x14
    2f50:	6d 89       	ldd	r22, Y+21	; 0x15
    2f52:	7e 89       	ldd	r23, Y+22	; 0x16
    2f54:	84 17       	cp	r24, r20
    2f56:	95 07       	cpc	r25, r21
    2f58:	a6 07       	cpc	r26, r22
    2f5a:	b7 07       	cpc	r27, r23
    2f5c:	29 f0       	breq	.+10     	; 0x2f68 <_ZN6SdFile17availableForWriteEv+0x4c>
    2f5e:	ce 01       	movw	r24, r28
    2f60:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <_ZN6SdFile7seekSetEm>
    2f64:	88 23       	and	r24, r24
    2f66:	b9 f1       	breq	.+110    	; 0x2fd6 <_ZN6SdFile17availableForWriteEv+0xba>
    2f68:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <_ZN8SdVolume7sdCard_E>
    2f6c:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <_ZN8SdVolume7sdCard_E+0x1>
    2f70:	0e 94 80 13 	call	0x2700	; 0x2700 <_ZN7Sd2Card6isBusyEv>
    2f74:	81 11       	cpse	r24, r1
    2f76:	32 c0       	rjmp	.+100    	; 0x2fdc <_ZN6SdFile17availableForWriteEv+0xc0>
    2f78:	8c 81       	ldd	r24, Y+4	; 0x04
    2f7a:	85 ff       	sbrs	r24, 5
    2f7c:	0a c0       	rjmp	.+20     	; 0x2f92 <_ZN6SdFile17availableForWriteEv+0x76>
    2f7e:	60 e0       	ldi	r22, 0x00	; 0
    2f80:	ce 01       	movw	r24, r28
    2f82:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <_ZN6SdFile4syncEh>
    2f86:	8c 81       	ldd	r24, Y+4	; 0x04
    2f88:	8f 7d       	andi	r24, 0xDF	; 223
    2f8a:	8c 83       	std	Y+4, r24	; 0x04
    2f8c:	80 e0       	ldi	r24, 0x00	; 0
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	27 c0       	rjmp	.+78     	; 0x2fe0 <_ZN6SdFile17availableForWriteEv+0xc4>
    2f92:	40 91 b5 02 	lds	r20, 0x02B5	; 0x8002b5 <_ZN8SdVolume17cacheMirrorBlock_E>
    2f96:	50 91 b6 02 	lds	r21, 0x02B6	; 0x8002b6 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2f9a:	60 91 b7 02 	lds	r22, 0x02B7	; 0x8002b7 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2f9e:	70 91 b8 02 	lds	r23, 0x02B8	; 0x8002b8 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    2fa2:	45 2b       	or	r20, r21
    2fa4:	46 2b       	or	r20, r22
    2fa6:	47 2b       	or	r20, r23
    2fa8:	31 f0       	breq	.+12     	; 0x2fb6 <_ZN6SdFile17availableForWriteEv+0x9a>
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	0e 94 39 1c 	call	0x3872	; 0x3872 <_ZN8SdVolume21cacheMirrorBlockFlushEh>
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	15 c0       	rjmp	.+42     	; 0x2fe0 <_ZN6SdFile17availableForWriteEv+0xc4>
    2fb6:	80 61       	ori	r24, 0x10	; 16
    2fb8:	8c 83       	std	Y+4, r24	; 0x04
    2fba:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fbc:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fbe:	ac 85       	ldd	r26, Y+12	; 0x0c
    2fc0:	bd 85       	ldd	r27, Y+13	; 0x0d
    2fc2:	9c 01       	movw	r18, r24
    2fc4:	31 70       	andi	r19, 0x01	; 1
    2fc6:	80 e0       	ldi	r24, 0x00	; 0
    2fc8:	92 e0       	ldi	r25, 0x02	; 2
    2fca:	82 1b       	sub	r24, r18
    2fcc:	93 0b       	sbc	r25, r19
    2fce:	08 c0       	rjmp	.+16     	; 0x2fe0 <_ZN6SdFile17availableForWriteEv+0xc4>
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	05 c0       	rjmp	.+10     	; 0x2fe0 <_ZN6SdFile17availableForWriteEv+0xc4>
    2fd6:	80 e0       	ldi	r24, 0x00	; 0
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	02 c0       	rjmp	.+4      	; 0x2fe0 <_ZN6SdFile17availableForWriteEv+0xc4>
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	df 91       	pop	r29
    2fe2:	cf 91       	pop	r28
    2fe4:	08 95       	ret

00002fe6 <_ZN6SdFile8truncateEm>:
    2fe6:	4f 92       	push	r4
    2fe8:	5f 92       	push	r5
    2fea:	6f 92       	push	r6
    2fec:	7f 92       	push	r7
    2fee:	8f 92       	push	r8
    2ff0:	9f 92       	push	r9
    2ff2:	af 92       	push	r10
    2ff4:	bf 92       	push	r11
    2ff6:	ef 92       	push	r14
    2ff8:	ff 92       	push	r15
    2ffa:	0f 93       	push	r16
    2ffc:	1f 93       	push	r17
    2ffe:	cf 93       	push	r28
    3000:	df 93       	push	r29
    3002:	00 d0       	rcall	.+0      	; 0x3004 <_ZN6SdFile8truncateEm+0x1e>
    3004:	00 d0       	rcall	.+0      	; 0x3006 <_ZN6SdFile8truncateEm+0x20>
    3006:	cd b7       	in	r28, 0x3d	; 61
    3008:	de b7       	in	r29, 0x3e	; 62
    300a:	fc 01       	movw	r30, r24
    300c:	85 81       	ldd	r24, Z+5	; 0x05
    300e:	81 30       	cpi	r24, 0x01	; 1
    3010:	29 f4       	brne	.+10     	; 0x301c <_ZN6SdFile8truncateEm+0x36>
    3012:	84 81       	ldd	r24, Z+4	; 0x04
    3014:	81 fd       	sbrc	r24, 1
    3016:	04 c0       	rjmp	.+8      	; 0x3020 <_ZN6SdFile8truncateEm+0x3a>
    3018:	81 e0       	ldi	r24, 0x01	; 1
    301a:	03 c0       	rjmp	.+6      	; 0x3022 <_ZN6SdFile8truncateEm+0x3c>
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	01 c0       	rjmp	.+2      	; 0x3022 <_ZN6SdFile8truncateEm+0x3c>
    3020:	80 e0       	ldi	r24, 0x00	; 0
    3022:	81 11       	cpse	r24, r1
    3024:	99 c0       	rjmp	.+306    	; 0x3158 <_ZN6SdFile8truncateEm+0x172>
    3026:	83 89       	ldd	r24, Z+19	; 0x13
    3028:	94 89       	ldd	r25, Z+20	; 0x14
    302a:	a5 89       	ldd	r26, Z+21	; 0x15
    302c:	b6 89       	ldd	r27, Z+22	; 0x16
    302e:	84 17       	cp	r24, r20
    3030:	95 07       	cpc	r25, r21
    3032:	a6 07       	cpc	r26, r22
    3034:	b7 07       	cpc	r27, r23
    3036:	08 f4       	brcc	.+2      	; 0x303a <_ZN6SdFile8truncateEm+0x54>
    3038:	91 c0       	rjmp	.+290    	; 0x315c <_ZN6SdFile8truncateEm+0x176>
    303a:	89 2b       	or	r24, r25
    303c:	8a 2b       	or	r24, r26
    303e:	8b 2b       	or	r24, r27
    3040:	09 f4       	brne	.+2      	; 0x3044 <_ZN6SdFile8truncateEm+0x5e>
    3042:	8e c0       	rjmp	.+284    	; 0x3160 <_ZN6SdFile8truncateEm+0x17a>
    3044:	82 84       	ldd	r8, Z+10	; 0x0a
    3046:	93 84       	ldd	r9, Z+11	; 0x0b
    3048:	a4 84       	ldd	r10, Z+12	; 0x0c
    304a:	b5 84       	ldd	r11, Z+13	; 0x0d
    304c:	48 15       	cp	r20, r8
    304e:	59 05       	cpc	r21, r9
    3050:	6a 05       	cpc	r22, r10
    3052:	7b 05       	cpc	r23, r11
    3054:	10 f4       	brcc	.+4      	; 0x305a <_ZN6SdFile8truncateEm+0x74>
    3056:	4a 01       	movw	r8, r20
    3058:	5b 01       	movw	r10, r22
    305a:	2a 01       	movw	r4, r20
    305c:	3b 01       	movw	r6, r22
    305e:	7f 01       	movw	r14, r30
    3060:	cf 01       	movw	r24, r30
    3062:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <_ZN6SdFile7seekSetEm>
    3066:	88 23       	and	r24, r24
    3068:	09 f4       	brne	.+2      	; 0x306c <_ZN6SdFile8truncateEm+0x86>
    306a:	7b c0       	rjmp	.+246    	; 0x3162 <_ZN6SdFile8truncateEm+0x17c>
    306c:	41 14       	cp	r4, r1
    306e:	51 04       	cpc	r5, r1
    3070:	61 04       	cpc	r6, r1
    3072:	71 04       	cpc	r7, r1
    3074:	b1 f4       	brne	.+44     	; 0x30a2 <_ZN6SdFile8truncateEm+0xbc>
    3076:	d7 01       	movw	r26, r14
    3078:	57 96       	adiw	r26, 0x17	; 23
    307a:	4d 91       	ld	r20, X+
    307c:	5d 91       	ld	r21, X+
    307e:	6d 91       	ld	r22, X+
    3080:	7c 91       	ld	r23, X
    3082:	5a 97       	sbiw	r26, 0x1a	; 26
    3084:	5b 96       	adiw	r26, 0x1b	; 27
    3086:	8d 91       	ld	r24, X+
    3088:	9c 91       	ld	r25, X
    308a:	5c 97       	sbiw	r26, 0x1c	; 28
    308c:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <_ZN8SdVolume9freeChainEm>
    3090:	88 23       	and	r24, r24
    3092:	09 f4       	brne	.+2      	; 0x3096 <_ZN6SdFile8truncateEm+0xb0>
    3094:	66 c0       	rjmp	.+204    	; 0x3162 <_ZN6SdFile8truncateEm+0x17c>
    3096:	f7 01       	movw	r30, r14
    3098:	17 8a       	std	Z+23, r1	; 0x17
    309a:	10 8e       	std	Z+24, r1	; 0x18
    309c:	11 8e       	std	Z+25, r1	; 0x19
    309e:	12 8e       	std	Z+26, r1	; 0x1a
    30a0:	42 c0       	rjmp	.+132    	; 0x3126 <_ZN6SdFile8truncateEm+0x140>
    30a2:	d7 01       	movw	r26, r14
    30a4:	16 96       	adiw	r26, 0x06	; 6
    30a6:	4d 91       	ld	r20, X+
    30a8:	5d 91       	ld	r21, X+
    30aa:	6d 91       	ld	r22, X+
    30ac:	7c 91       	ld	r23, X
    30ae:	19 97       	sbiw	r26, 0x09	; 9
    30b0:	9e 01       	movw	r18, r28
    30b2:	2f 5f       	subi	r18, 0xFF	; 255
    30b4:	3f 4f       	sbci	r19, 0xFF	; 255
    30b6:	5b 96       	adiw	r26, 0x1b	; 27
    30b8:	8d 91       	ld	r24, X+
    30ba:	9c 91       	ld	r25, X
    30bc:	5c 97       	sbiw	r26, 0x1c	; 28
    30be:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <_ZNK8SdVolume6fatGetEmPm>
    30c2:	88 23       	and	r24, r24
    30c4:	71 f1       	breq	.+92     	; 0x3122 <_ZN6SdFile8truncateEm+0x13c>
    30c6:	49 81       	ldd	r20, Y+1	; 0x01
    30c8:	5a 81       	ldd	r21, Y+2	; 0x02
    30ca:	6b 81       	ldd	r22, Y+3	; 0x03
    30cc:	7c 81       	ldd	r23, Y+4	; 0x04
    30ce:	d7 01       	movw	r26, r14
    30d0:	5b 96       	adiw	r26, 0x1b	; 27
    30d2:	ed 91       	ld	r30, X+
    30d4:	fc 91       	ld	r31, X
    30d6:	5c 97       	sbiw	r26, 0x1c	; 28
    30d8:	87 89       	ldd	r24, Z+23	; 0x17
    30da:	80 31       	cpi	r24, 0x10	; 16
    30dc:	29 f4       	brne	.+10     	; 0x30e8 <_ZN6SdFile8truncateEm+0x102>
    30de:	88 ef       	ldi	r24, 0xF8	; 248
    30e0:	9f ef       	ldi	r25, 0xFF	; 255
    30e2:	a0 e0       	ldi	r26, 0x00	; 0
    30e4:	b0 e0       	ldi	r27, 0x00	; 0
    30e6:	04 c0       	rjmp	.+8      	; 0x30f0 <_ZN6SdFile8truncateEm+0x10a>
    30e8:	88 ef       	ldi	r24, 0xF8	; 248
    30ea:	9f ef       	ldi	r25, 0xFF	; 255
    30ec:	af ef       	ldi	r26, 0xFF	; 255
    30ee:	bf e0       	ldi	r27, 0x0F	; 15
    30f0:	48 17       	cp	r20, r24
    30f2:	59 07       	cpc	r21, r25
    30f4:	6a 07       	cpc	r22, r26
    30f6:	7b 07       	cpc	r23, r27
    30f8:	b0 f4       	brcc	.+44     	; 0x3126 <_ZN6SdFile8truncateEm+0x140>
    30fa:	cf 01       	movw	r24, r30
    30fc:	0e 94 b6 1f 	call	0x3f6c	; 0x3f6c <_ZN8SdVolume9freeChainEm>
    3100:	88 23       	and	r24, r24
    3102:	79 f0       	breq	.+30     	; 0x3122 <_ZN6SdFile8truncateEm+0x13c>
    3104:	f7 01       	movw	r30, r14
    3106:	46 81       	ldd	r20, Z+6	; 0x06
    3108:	57 81       	ldd	r21, Z+7	; 0x07
    310a:	60 85       	ldd	r22, Z+8	; 0x08
    310c:	71 85       	ldd	r23, Z+9	; 0x09
    310e:	0f ef       	ldi	r16, 0xFF	; 255
    3110:	1f ef       	ldi	r17, 0xFF	; 255
    3112:	2f ef       	ldi	r18, 0xFF	; 255
    3114:	3f e0       	ldi	r19, 0x0F	; 15
    3116:	83 8d       	ldd	r24, Z+27	; 0x1b
    3118:	94 8d       	ldd	r25, Z+28	; 0x1c
    311a:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <_ZN8SdVolume6fatPutEmm>
    311e:	81 11       	cpse	r24, r1
    3120:	02 c0       	rjmp	.+4      	; 0x3126 <_ZN6SdFile8truncateEm+0x140>
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	1e c0       	rjmp	.+60     	; 0x3162 <_ZN6SdFile8truncateEm+0x17c>
    3126:	d7 01       	movw	r26, r14
    3128:	53 96       	adiw	r26, 0x13	; 19
    312a:	4d 92       	st	X+, r4
    312c:	5d 92       	st	X+, r5
    312e:	6d 92       	st	X+, r6
    3130:	7c 92       	st	X, r7
    3132:	56 97       	sbiw	r26, 0x16	; 22
    3134:	14 96       	adiw	r26, 0x04	; 4
    3136:	8c 91       	ld	r24, X
    3138:	14 97       	sbiw	r26, 0x04	; 4
    313a:	80 68       	ori	r24, 0x80	; 128
    313c:	14 96       	adiw	r26, 0x04	; 4
    313e:	8c 93       	st	X, r24
    3140:	61 e0       	ldi	r22, 0x01	; 1
    3142:	c7 01       	movw	r24, r14
    3144:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <_ZN6SdFile4syncEh>
    3148:	88 23       	and	r24, r24
    314a:	59 f0       	breq	.+22     	; 0x3162 <_ZN6SdFile8truncateEm+0x17c>
    314c:	b5 01       	movw	r22, r10
    314e:	a4 01       	movw	r20, r8
    3150:	c7 01       	movw	r24, r14
    3152:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <_ZN6SdFile7seekSetEm>
    3156:	05 c0       	rjmp	.+10     	; 0x3162 <_ZN6SdFile8truncateEm+0x17c>
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	03 c0       	rjmp	.+6      	; 0x3162 <_ZN6SdFile8truncateEm+0x17c>
    315c:	80 e0       	ldi	r24, 0x00	; 0
    315e:	01 c0       	rjmp	.+2      	; 0x3162 <_ZN6SdFile8truncateEm+0x17c>
    3160:	81 e0       	ldi	r24, 0x01	; 1
    3162:	0f 90       	pop	r0
    3164:	0f 90       	pop	r0
    3166:	0f 90       	pop	r0
    3168:	0f 90       	pop	r0
    316a:	df 91       	pop	r29
    316c:	cf 91       	pop	r28
    316e:	1f 91       	pop	r17
    3170:	0f 91       	pop	r16
    3172:	ff 90       	pop	r15
    3174:	ef 90       	pop	r14
    3176:	bf 90       	pop	r11
    3178:	af 90       	pop	r10
    317a:	9f 90       	pop	r9
    317c:	8f 90       	pop	r8
    317e:	7f 90       	pop	r7
    3180:	6f 90       	pop	r6
    3182:	5f 90       	pop	r5
    3184:	4f 90       	pop	r4
    3186:	08 95       	ret

00003188 <_ZN6SdFile15openCachedEntryEhh>:
    3188:	1f 93       	push	r17
    318a:	cf 93       	push	r28
    318c:	df 93       	push	r29
    318e:	ec 01       	movw	r28, r24
    3190:	80 e2       	ldi	r24, 0x20	; 32
    3192:	68 9f       	mul	r22, r24
    3194:	f0 01       	movw	r30, r0
    3196:	11 24       	eor	r1, r1
    3198:	e4 54       	subi	r30, 0x44	; 68
    319a:	fd 4f       	sbci	r31, 0xFD	; 253
    319c:	93 85       	ldd	r25, Z+11	; 0x0b
    319e:	91 71       	andi	r25, 0x11	; 17
    31a0:	21 f0       	breq	.+8      	; 0x31aa <_ZN6SdFile15openCachedEntryEhh+0x22>
    31a2:	84 2f       	mov	r24, r20
    31a4:	82 74       	andi	r24, 0x42	; 66
    31a6:	09 f0       	breq	.+2      	; 0x31aa <_ZN6SdFile15openCachedEntryEhh+0x22>
    31a8:	54 c0       	rjmp	.+168    	; 0x3252 <_ZN6SdFile15openCachedEntryEhh+0xca>
    31aa:	14 2f       	mov	r17, r20
    31ac:	6a 8b       	std	Y+18, r22	; 0x12
    31ae:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    31b2:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    31b6:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    31ba:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    31be:	8e 87       	std	Y+14, r24	; 0x0e
    31c0:	9f 87       	std	Y+15, r25	; 0x0f
    31c2:	a8 8b       	std	Y+16, r26	; 0x10
    31c4:	b9 8b       	std	Y+17, r27	; 0x11
    31c6:	84 89       	ldd	r24, Z+20	; 0x14
    31c8:	95 89       	ldd	r25, Z+21	; 0x15
    31ca:	a0 e0       	ldi	r26, 0x00	; 0
    31cc:	b0 e0       	ldi	r27, 0x00	; 0
    31ce:	dc 01       	movw	r26, r24
    31d0:	99 27       	eor	r25, r25
    31d2:	88 27       	eor	r24, r24
    31d4:	8f 8b       	std	Y+23, r24	; 0x17
    31d6:	98 8f       	std	Y+24, r25	; 0x18
    31d8:	a9 8f       	std	Y+25, r26	; 0x19
    31da:	ba 8f       	std	Y+26, r27	; 0x1a
    31dc:	42 8d       	ldd	r20, Z+26	; 0x1a
    31de:	53 8d       	ldd	r21, Z+27	; 0x1b
    31e0:	60 e0       	ldi	r22, 0x00	; 0
    31e2:	70 e0       	ldi	r23, 0x00	; 0
    31e4:	48 2b       	or	r20, r24
    31e6:	59 2b       	or	r21, r25
    31e8:	6a 2b       	or	r22, r26
    31ea:	7b 2b       	or	r23, r27
    31ec:	4f 8b       	std	Y+23, r20	; 0x17
    31ee:	58 8f       	std	Y+24, r21	; 0x18
    31f0:	69 8f       	std	Y+25, r22	; 0x19
    31f2:	7a 8f       	std	Y+26, r23	; 0x1a
    31f4:	23 85       	ldd	r18, Z+11	; 0x0b
    31f6:	28 71       	andi	r18, 0x18	; 24
    31f8:	59 f4       	brne	.+22     	; 0x3210 <_ZN6SdFile15openCachedEntryEhh+0x88>
    31fa:	84 8d       	ldd	r24, Z+28	; 0x1c
    31fc:	95 8d       	ldd	r25, Z+29	; 0x1d
    31fe:	a6 8d       	ldd	r26, Z+30	; 0x1e
    3200:	b7 8d       	ldd	r27, Z+31	; 0x1f
    3202:	8b 8b       	std	Y+19, r24	; 0x13
    3204:	9c 8b       	std	Y+20, r25	; 0x14
    3206:	ad 8b       	std	Y+21, r26	; 0x15
    3208:	be 8b       	std	Y+22, r27	; 0x16
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	8d 83       	std	Y+5, r24	; 0x05
    320e:	0d c0       	rjmp	.+26     	; 0x322a <_ZN6SdFile15openCachedEntryEhh+0xa2>
    3210:	20 31       	cpi	r18, 0x10	; 16
    3212:	09 f5       	brne	.+66     	; 0x3256 <_ZN6SdFile15openCachedEntryEhh+0xce>
    3214:	9e 01       	movw	r18, r28
    3216:	2d 5e       	subi	r18, 0xED	; 237
    3218:	3f 4f       	sbci	r19, 0xFF	; 255
    321a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    321c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    321e:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <_ZNK8SdVolume9chainSizeEmPm>
    3222:	88 23       	and	r24, r24
    3224:	d9 f0       	breq	.+54     	; 0x325c <_ZN6SdFile15openCachedEntryEhh+0xd4>
    3226:	84 e0       	ldi	r24, 0x04	; 4
    3228:	8d 83       	std	Y+5, r24	; 0x05
    322a:	81 2f       	mov	r24, r17
    322c:	8f 70       	andi	r24, 0x0F	; 15
    322e:	8c 83       	std	Y+4, r24	; 0x04
    3230:	1e 82       	std	Y+6, r1	; 0x06
    3232:	1f 82       	std	Y+7, r1	; 0x07
    3234:	18 86       	std	Y+8, r1	; 0x08
    3236:	19 86       	std	Y+9, r1	; 0x09
    3238:	1a 86       	std	Y+10, r1	; 0x0a
    323a:	1b 86       	std	Y+11, r1	; 0x0b
    323c:	1c 86       	std	Y+12, r1	; 0x0c
    323e:	1d 86       	std	Y+13, r1	; 0x0d
    3240:	16 ff       	sbrs	r17, 6
    3242:	0b c0       	rjmp	.+22     	; 0x325a <_ZN6SdFile15openCachedEntryEhh+0xd2>
    3244:	40 e0       	ldi	r20, 0x00	; 0
    3246:	50 e0       	ldi	r21, 0x00	; 0
    3248:	ba 01       	movw	r22, r20
    324a:	ce 01       	movw	r24, r28
    324c:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <_ZN6SdFile8truncateEm>
    3250:	05 c0       	rjmp	.+10     	; 0x325c <_ZN6SdFile15openCachedEntryEhh+0xd4>
    3252:	80 e0       	ldi	r24, 0x00	; 0
    3254:	03 c0       	rjmp	.+6      	; 0x325c <_ZN6SdFile15openCachedEntryEhh+0xd4>
    3256:	80 e0       	ldi	r24, 0x00	; 0
    3258:	01 c0       	rjmp	.+2      	; 0x325c <_ZN6SdFile15openCachedEntryEhh+0xd4>
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	df 91       	pop	r29
    325e:	cf 91       	pop	r28
    3260:	1f 91       	pop	r17
    3262:	08 95       	ret

00003264 <_ZN6SdFile4openEPS_PKch>:
    3264:	af 92       	push	r10
    3266:	bf 92       	push	r11
    3268:	cf 92       	push	r12
    326a:	df 92       	push	r13
    326c:	ef 92       	push	r14
    326e:	ff 92       	push	r15
    3270:	0f 93       	push	r16
    3272:	1f 93       	push	r17
    3274:	cf 93       	push	r28
    3276:	df 93       	push	r29
    3278:	cd b7       	in	r28, 0x3d	; 61
    327a:	de b7       	in	r29, 0x3e	; 62
    327c:	2b 97       	sbiw	r28, 0x0b	; 11
    327e:	0f b6       	in	r0, 0x3f	; 63
    3280:	f8 94       	cli
    3282:	de bf       	out	0x3e, r29	; 62
    3284:	0f be       	out	0x3f, r0	; 63
    3286:	cd bf       	out	0x3d, r28	; 61
    3288:	fc 01       	movw	r30, r24
    328a:	c5 80       	ldd	r12, Z+5	; 0x05
    328c:	c1 10       	cpse	r12, r1
    328e:	ca c0       	rjmp	.+404    	; 0x3424 <_ZN6SdFile4openEPS_PKch+0x1c0>
    3290:	a2 2e       	mov	r10, r18
    3292:	8b 01       	movw	r16, r22
    3294:	7c 01       	movw	r14, r24
    3296:	be 01       	movw	r22, r28
    3298:	6f 5f       	subi	r22, 0xFF	; 255
    329a:	7f 4f       	sbci	r23, 0xFF	; 255
    329c:	ca 01       	movw	r24, r20
    329e:	0e 94 47 14 	call	0x288e	; 0x288e <_ZN6SdFile10make83NameEPKcPh>
    32a2:	88 23       	and	r24, r24
    32a4:	09 f4       	brne	.+2      	; 0x32a8 <_ZN6SdFile4openEPS_PKch+0x44>
    32a6:	c0 c0       	rjmp	.+384    	; 0x3428 <_ZN6SdFile4openEPS_PKch+0x1c4>
    32a8:	f8 01       	movw	r30, r16
    32aa:	83 8d       	ldd	r24, Z+27	; 0x1b
    32ac:	94 8d       	ldd	r25, Z+28	; 0x1c
    32ae:	f7 01       	movw	r30, r14
    32b0:	94 8f       	std	Z+28, r25	; 0x1c
    32b2:	83 8f       	std	Z+27, r24	; 0x1b
    32b4:	f8 01       	movw	r30, r16
    32b6:	16 82       	std	Z+6, r1	; 0x06
    32b8:	17 82       	std	Z+7, r1	; 0x07
    32ba:	10 86       	std	Z+8, r1	; 0x08
    32bc:	11 86       	std	Z+9, r1	; 0x09
    32be:	12 86       	std	Z+10, r1	; 0x0a
    32c0:	13 86       	std	Z+11, r1	; 0x0b
    32c2:	14 86       	std	Z+12, r1	; 0x0c
    32c4:	15 86       	std	Z+13, r1	; 0x0d
    32c6:	b1 2c       	mov	r11, r1
    32c8:	f8 01       	movw	r30, r16
    32ca:	42 85       	ldd	r20, Z+10	; 0x0a
    32cc:	53 85       	ldd	r21, Z+11	; 0x0b
    32ce:	64 85       	ldd	r22, Z+12	; 0x0c
    32d0:	75 85       	ldd	r23, Z+13	; 0x0d
    32d2:	83 89       	ldd	r24, Z+19	; 0x13
    32d4:	94 89       	ldd	r25, Z+20	; 0x14
    32d6:	a5 89       	ldd	r26, Z+21	; 0x15
    32d8:	b6 89       	ldd	r27, Z+22	; 0x16
    32da:	48 17       	cp	r20, r24
    32dc:	59 07       	cpc	r21, r25
    32de:	6a 07       	cpc	r22, r26
    32e0:	7b 07       	cpc	r23, r27
    32e2:	08 f0       	brcs	.+2      	; 0x32e6 <_ZN6SdFile4openEPS_PKch+0x82>
    32e4:	44 c0       	rjmp	.+136    	; 0x336e <_ZN6SdFile4openEPS_PKch+0x10a>
    32e6:	68 94       	set
    32e8:	14 f8       	bld	r1, 4
    32ea:	76 95       	lsr	r23
    32ec:	67 95       	ror	r22
    32ee:	57 95       	ror	r21
    32f0:	47 95       	ror	r20
    32f2:	16 94       	lsr	r1
    32f4:	d1 f7       	brne	.-12     	; 0x32ea <_ZN6SdFile4openEPS_PKch+0x86>
    32f6:	f4 2f       	mov	r31, r20
    32f8:	ff 70       	andi	r31, 0x0F	; 15
    32fa:	df 2e       	mov	r13, r31
    32fc:	c8 01       	movw	r24, r16
    32fe:	0e 94 42 16 	call	0x2c84	; 0x2c84 <_ZN6SdFile12readDirCacheEv>
    3302:	00 97       	sbiw	r24, 0x00	; 0
    3304:	09 f4       	brne	.+2      	; 0x3308 <_ZN6SdFile4openEPS_PKch+0xa4>
    3306:	91 c0       	rjmp	.+290    	; 0x342a <_ZN6SdFile4openEPS_PKch+0x1c6>
    3308:	fc 01       	movw	r30, r24
    330a:	20 81       	ld	r18, Z
    330c:	22 23       	and	r18, r18
    330e:	11 f0       	breq	.+4      	; 0x3314 <_ZN6SdFile4openEPS_PKch+0xb0>
    3310:	25 3e       	cpi	r18, 0xE5	; 229
    3312:	b9 f4       	brne	.+46     	; 0x3342 <_ZN6SdFile4openEPS_PKch+0xde>
    3314:	b1 10       	cpse	r11, r1
    3316:	10 c0       	rjmp	.+32     	; 0x3338 <_ZN6SdFile4openEPS_PKch+0xd4>
    3318:	f7 01       	movw	r30, r14
    331a:	d2 8a       	std	Z+18, r13	; 0x12
    331c:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    3320:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3324:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3328:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    332c:	46 87       	std	Z+14, r20	; 0x0e
    332e:	57 87       	std	Z+15, r21	; 0x0f
    3330:	60 8b       	std	Z+16, r22	; 0x10
    3332:	71 8b       	std	Z+17, r23	; 0x11
    3334:	bb 24       	eor	r11, r11
    3336:	b3 94       	inc	r11
    3338:	fc 01       	movw	r30, r24
    333a:	80 81       	ld	r24, Z
    333c:	81 11       	cpse	r24, r1
    333e:	c4 cf       	rjmp	.-120    	; 0x32c8 <_ZN6SdFile4openEPS_PKch+0x64>
    3340:	16 c0       	rjmp	.+44     	; 0x336e <_ZN6SdFile4openEPS_PKch+0x10a>
    3342:	4b e0       	ldi	r20, 0x0B	; 11
    3344:	50 e0       	ldi	r21, 0x00	; 0
    3346:	bc 01       	movw	r22, r24
    3348:	ce 01       	movw	r24, r28
    334a:	01 96       	adiw	r24, 0x01	; 1
    334c:	0e 94 22 29 	call	0x5244	; 0x5244 <memcmp>
    3350:	89 2b       	or	r24, r25
    3352:	09 f0       	breq	.+2      	; 0x3356 <_ZN6SdFile4openEPS_PKch+0xf2>
    3354:	b9 cf       	rjmp	.-142    	; 0x32c8 <_ZN6SdFile4openEPS_PKch+0x64>
    3356:	8a 2d       	mov	r24, r10
    3358:	80 73       	andi	r24, 0x30	; 48
    335a:	80 33       	cpi	r24, 0x30	; 48
    335c:	09 f4       	brne	.+2      	; 0x3360 <_ZN6SdFile4openEPS_PKch+0xfc>
    335e:	65 c0       	rjmp	.+202    	; 0x342a <_ZN6SdFile4openEPS_PKch+0x1c6>
    3360:	4a 2d       	mov	r20, r10
    3362:	6d 2d       	mov	r22, r13
    3364:	c7 01       	movw	r24, r14
    3366:	0e 94 c4 18 	call	0x3188	; 0x3188 <_ZN6SdFile15openCachedEntryEhh>
    336a:	c8 2e       	mov	r12, r24
    336c:	5e c0       	rjmp	.+188    	; 0x342a <_ZN6SdFile4openEPS_PKch+0x1c6>
    336e:	8a 2d       	mov	r24, r10
    3370:	82 71       	andi	r24, 0x12	; 18
    3372:	82 31       	cpi	r24, 0x12	; 18
    3374:	09 f0       	breq	.+2      	; 0x3378 <_ZN6SdFile4openEPS_PKch+0x114>
    3376:	59 c0       	rjmp	.+178    	; 0x342a <_ZN6SdFile4openEPS_PKch+0x1c6>
    3378:	bb 20       	and	r11, r11
    337a:	41 f0       	breq	.+16     	; 0x338c <_ZN6SdFile4openEPS_PKch+0x128>
    337c:	61 e0       	ldi	r22, 0x01	; 1
    337e:	c7 01       	movw	r24, r14
    3380:	0e 94 2e 14 	call	0x285c	; 0x285c <_ZN6SdFile13cacheDirEntryEh>
    3384:	8c 01       	movw	r16, r24
    3386:	89 2b       	or	r24, r25
    3388:	89 f4       	brne	.+34     	; 0x33ac <_ZN6SdFile4openEPS_PKch+0x148>
    338a:	4f c0       	rjmp	.+158    	; 0x342a <_ZN6SdFile4openEPS_PKch+0x1c6>
    338c:	f8 01       	movw	r30, r16
    338e:	85 81       	ldd	r24, Z+5	; 0x05
    3390:	82 30       	cpi	r24, 0x02	; 2
    3392:	09 f4       	brne	.+2      	; 0x3396 <_ZN6SdFile4openEPS_PKch+0x132>
    3394:	4a c0       	rjmp	.+148    	; 0x342a <_ZN6SdFile4openEPS_PKch+0x1c6>
    3396:	c8 01       	movw	r24, r16
    3398:	0e 94 c5 13 	call	0x278a	; 0x278a <_ZN6SdFile13addDirClusterEv>
    339c:	c8 2e       	mov	r12, r24
    339e:	88 23       	and	r24, r24
    33a0:	09 f4       	brne	.+2      	; 0x33a4 <_ZN6SdFile4openEPS_PKch+0x140>
    33a2:	43 c0       	rjmp	.+134    	; 0x342a <_ZN6SdFile4openEPS_PKch+0x1c6>
    33a4:	f7 01       	movw	r30, r14
    33a6:	12 8a       	std	Z+18, r1	; 0x12
    33a8:	0c eb       	ldi	r16, 0xBC	; 188
    33aa:	12 e0       	ldi	r17, 0x02	; 2
    33ac:	80 e2       	ldi	r24, 0x20	; 32
    33ae:	f8 01       	movw	r30, r16
    33b0:	11 92       	st	Z+, r1
    33b2:	8a 95       	dec	r24
    33b4:	e9 f7       	brne	.-6      	; 0x33b0 <_ZN6SdFile4openEPS_PKch+0x14c>
    33b6:	8b e0       	ldi	r24, 0x0B	; 11
    33b8:	fe 01       	movw	r30, r28
    33ba:	31 96       	adiw	r30, 0x01	; 1
    33bc:	d8 01       	movw	r26, r16
    33be:	01 90       	ld	r0, Z+
    33c0:	0d 92       	st	X+, r0
    33c2:	8a 95       	dec	r24
    33c4:	e1 f7       	brne	.-8      	; 0x33be <_ZN6SdFile4openEPS_PKch+0x15a>
    33c6:	e0 91 b3 02 	lds	r30, 0x02B3	; 0x8002b3 <_ZN6SdFile9dateTime_E>
    33ca:	f0 91 b4 02 	lds	r31, 0x02B4	; 0x8002b4 <_ZN6SdFile9dateTime_E+0x1>
    33ce:	30 97       	sbiw	r30, 0x00	; 0
    33d0:	39 f0       	breq	.+14     	; 0x33e0 <_ZN6SdFile4openEPS_PKch+0x17c>
    33d2:	b8 01       	movw	r22, r16
    33d4:	62 5f       	subi	r22, 0xF2	; 242
    33d6:	7f 4f       	sbci	r23, 0xFF	; 255
    33d8:	c8 01       	movw	r24, r16
    33da:	40 96       	adiw	r24, 0x10	; 16
    33dc:	09 95       	icall
    33de:	09 c0       	rjmp	.+18     	; 0x33f2 <_ZN6SdFile4openEPS_PKch+0x18e>
    33e0:	81 e2       	ldi	r24, 0x21	; 33
    33e2:	98 e2       	ldi	r25, 0x28	; 40
    33e4:	f8 01       	movw	r30, r16
    33e6:	91 8b       	std	Z+17, r25	; 0x11
    33e8:	80 8b       	std	Z+16, r24	; 0x10
    33ea:	80 e0       	ldi	r24, 0x00	; 0
    33ec:	98 e0       	ldi	r25, 0x08	; 8
    33ee:	97 87       	std	Z+15, r25	; 0x0f
    33f0:	86 87       	std	Z+14, r24	; 0x0e
    33f2:	f8 01       	movw	r30, r16
    33f4:	80 89       	ldd	r24, Z+16	; 0x10
    33f6:	91 89       	ldd	r25, Z+17	; 0x11
    33f8:	93 8b       	std	Z+19, r25	; 0x13
    33fa:	82 8b       	std	Z+18, r24	; 0x12
    33fc:	91 8f       	std	Z+25, r25	; 0x19
    33fe:	80 8f       	std	Z+24, r24	; 0x18
    3400:	86 85       	ldd	r24, Z+14	; 0x0e
    3402:	97 85       	ldd	r25, Z+15	; 0x0f
    3404:	97 8b       	std	Z+23, r25	; 0x17
    3406:	86 8b       	std	Z+22, r24	; 0x16
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	0e 94 5f 1c 	call	0x38be	; 0x38be <_ZN8SdVolume10cacheFlushEh>
    340e:	c8 2e       	mov	r12, r24
    3410:	88 23       	and	r24, r24
    3412:	59 f0       	breq	.+22     	; 0x342a <_ZN6SdFile4openEPS_PKch+0x1c6>
    3414:	f7 01       	movw	r30, r14
    3416:	62 89       	ldd	r22, Z+18	; 0x12
    3418:	4a 2d       	mov	r20, r10
    341a:	c7 01       	movw	r24, r14
    341c:	0e 94 c4 18 	call	0x3188	; 0x3188 <_ZN6SdFile15openCachedEntryEhh>
    3420:	c8 2e       	mov	r12, r24
    3422:	03 c0       	rjmp	.+6      	; 0x342a <_ZN6SdFile4openEPS_PKch+0x1c6>
    3424:	c1 2c       	mov	r12, r1
    3426:	01 c0       	rjmp	.+2      	; 0x342a <_ZN6SdFile4openEPS_PKch+0x1c6>
    3428:	c8 2e       	mov	r12, r24
    342a:	8c 2d       	mov	r24, r12
    342c:	2b 96       	adiw	r28, 0x0b	; 11
    342e:	0f b6       	in	r0, 0x3f	; 63
    3430:	f8 94       	cli
    3432:	de bf       	out	0x3e, r29	; 62
    3434:	0f be       	out	0x3f, r0	; 63
    3436:	cd bf       	out	0x3d, r28	; 61
    3438:	df 91       	pop	r29
    343a:	cf 91       	pop	r28
    343c:	1f 91       	pop	r17
    343e:	0f 91       	pop	r16
    3440:	ff 90       	pop	r15
    3442:	ef 90       	pop	r14
    3444:	df 90       	pop	r13
    3446:	cf 90       	pop	r12
    3448:	bf 90       	pop	r11
    344a:	af 90       	pop	r10
    344c:	08 95       	ret

0000344e <_ZN6SdFile6removeEv>:
    344e:	cf 93       	push	r28
    3450:	df 93       	push	r29
    3452:	ec 01       	movw	r28, r24
    3454:	40 e0       	ldi	r20, 0x00	; 0
    3456:	50 e0       	ldi	r21, 0x00	; 0
    3458:	ba 01       	movw	r22, r20
    345a:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <_ZN6SdFile8truncateEm>
    345e:	88 23       	and	r24, r24
    3460:	79 f0       	breq	.+30     	; 0x3480 <_ZN6SdFile6removeEv+0x32>
    3462:	61 e0       	ldi	r22, 0x01	; 1
    3464:	ce 01       	movw	r24, r28
    3466:	0e 94 2e 14 	call	0x285c	; 0x285c <_ZN6SdFile13cacheDirEntryEh>
    346a:	00 97       	sbiw	r24, 0x00	; 0
    346c:	41 f0       	breq	.+16     	; 0x347e <_ZN6SdFile6removeEv+0x30>
    346e:	25 ee       	ldi	r18, 0xE5	; 229
    3470:	fc 01       	movw	r30, r24
    3472:	20 83       	st	Z, r18
    3474:	1d 82       	std	Y+5, r1	; 0x05
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	0e 94 5f 1c 	call	0x38be	; 0x38be <_ZN8SdVolume10cacheFlushEh>
    347c:	01 c0       	rjmp	.+2      	; 0x3480 <_ZN6SdFile6removeEv+0x32>
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	df 91       	pop	r29
    3482:	cf 91       	pop	r28
    3484:	08 95       	ret

00003486 <_ZN6SdFile6removeEPS_PKc>:
    3486:	cf 93       	push	r28
    3488:	df 93       	push	r29
    348a:	cd b7       	in	r28, 0x3d	; 61
    348c:	de b7       	in	r29, 0x3e	; 62
    348e:	6d 97       	sbiw	r28, 0x1d	; 29
    3490:	0f b6       	in	r0, 0x3f	; 63
    3492:	f8 94       	cli
    3494:	de bf       	out	0x3e, r29	; 62
    3496:	0f be       	out	0x3f, r0	; 63
    3498:	cd bf       	out	0x3d, r28	; 61
    349a:	ab 01       	movw	r20, r22
    349c:	1c 82       	std	Y+4, r1	; 0x04
    349e:	1b 82       	std	Y+3, r1	; 0x03
    34a0:	21 e2       	ldi	r18, 0x21	; 33
    34a2:	32 e0       	ldi	r19, 0x02	; 2
    34a4:	3a 83       	std	Y+2, r19	; 0x02
    34a6:	29 83       	std	Y+1, r18	; 0x01
    34a8:	1e 82       	std	Y+6, r1	; 0x06
    34aa:	22 e0       	ldi	r18, 0x02	; 2
    34ac:	bc 01       	movw	r22, r24
    34ae:	ce 01       	movw	r24, r28
    34b0:	01 96       	adiw	r24, 0x01	; 1
    34b2:	0e 94 32 19 	call	0x3264	; 0x3264 <_ZN6SdFile4openEPS_PKch>
    34b6:	88 23       	and	r24, r24
    34b8:	21 f0       	breq	.+8      	; 0x34c2 <_ZN6SdFile6removeEPS_PKc+0x3c>
    34ba:	ce 01       	movw	r24, r28
    34bc:	01 96       	adiw	r24, 0x01	; 1
    34be:	0e 94 27 1a 	call	0x344e	; 0x344e <_ZN6SdFile6removeEv>
    34c2:	6d 96       	adiw	r28, 0x1d	; 29
    34c4:	0f b6       	in	r0, 0x3f	; 63
    34c6:	f8 94       	cli
    34c8:	de bf       	out	0x3e, r29	; 62
    34ca:	0f be       	out	0x3f, r0	; 63
    34cc:	cd bf       	out	0x3d, r28	; 61
    34ce:	df 91       	pop	r29
    34d0:	cf 91       	pop	r28
    34d2:	08 95       	ret

000034d4 <_ZN6SdFile5writeEPKvj>:
   \a nbyte.  If an error occurs, write() returns 0.  Possible errors
   include write() is called before a file has been opened, write is called
   for a read-only file, device is full, a corrupt file system or an I/O error.

*/
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    34d4:	3f 92       	push	r3
    34d6:	4f 92       	push	r4
    34d8:	5f 92       	push	r5
    34da:	6f 92       	push	r6
    34dc:	7f 92       	push	r7
    34de:	8f 92       	push	r8
    34e0:	9f 92       	push	r9
    34e2:	af 92       	push	r10
    34e4:	bf 92       	push	r11
    34e6:	cf 92       	push	r12
    34e8:	df 92       	push	r13
    34ea:	ef 92       	push	r14
    34ec:	ff 92       	push	r15
    34ee:	0f 93       	push	r16
    34f0:	1f 93       	push	r17
    34f2:	cf 93       	push	r28
    34f4:	df 93       	push	r29
    34f6:	00 d0       	rcall	.+0      	; 0x34f8 <_ZN6SdFile5writeEPKvj+0x24>
    34f8:	00 d0       	rcall	.+0      	; 0x34fa <_ZN6SdFile5writeEPKvj+0x26>
    34fa:	00 d0       	rcall	.+0      	; 0x34fc <_ZN6SdFile5writeEPKvj+0x28>
    34fc:	cd b7       	in	r28, 0x3d	; 61
    34fe:	de b7       	in	r29, 0x3e	; 62
    3500:	6c 01       	movw	r12, r24
    3502:	7b 01       	movw	r14, r22
    3504:	5e 83       	std	Y+6, r21	; 0x06
    3506:	4d 83       	std	Y+5, r20	; 0x05
  const uint8_t* src = reinterpret_cast<const uint8_t*>(buf);

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;
  // if blocking writes should be used
  uint8_t blocking = (flags_ & F_FILE_NON_BLOCKING_WRITE) == 0x00;
    3508:	dc 01       	movw	r26, r24
    350a:	14 96       	adiw	r26, 0x04	; 4
    350c:	9c 91       	ld	r25, X
    350e:	14 97       	sbiw	r26, 0x04	; 4
    3510:	29 2f       	mov	r18, r25
    3512:	22 95       	swap	r18
    3514:	2f 70       	andi	r18, 0x0F	; 15
    3516:	81 e0       	ldi	r24, 0x01	; 1
    3518:	82 27       	eor	r24, r18
    351a:	81 70       	andi	r24, 0x01	; 1
    351c:	38 2e       	mov	r3, r24
    uint8_t isDir(void) const {
      return type_ >= FAT_FILE_TYPE_MIN_DIR;
    }
    /** \return True if this is a SdFile for a file else false. */
    uint8_t isFile(void) const {
      return type_ == FAT_FILE_TYPE_NORMAL;
    351e:	15 96       	adiw	r26, 0x05	; 5
    3520:	8c 91       	ld	r24, X

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) {
    3522:	81 30       	cpi	r24, 0x01	; 1
    3524:	19 f4       	brne	.+6      	; 0x352c <_ZN6SdFile5writeEPKvj+0x58>
    3526:	91 fd       	sbrc	r25, 1
    3528:	03 c0       	rjmp	.+6      	; 0x3530 <_ZN6SdFile5writeEPKvj+0x5c>
    352a:	03 c0       	rjmp	.+6      	; 0x3532 <_ZN6SdFile5writeEPKvj+0x5e>
    352c:	81 e0       	ldi	r24, 0x01	; 1
    352e:	01 c0       	rjmp	.+2      	; 0x3532 <_ZN6SdFile5writeEPKvj+0x5e>
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	81 11       	cpse	r24, r1
    3534:	66 c1       	rjmp	.+716    	; 0x3802 <_ZN6SdFile5writeEPKvj+0x32e>
    goto writeErrorReturn;
  }

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    3536:	92 fd       	sbrc	r25, 2
    3538:	03 c0       	rjmp	.+6      	; 0x3540 <_ZN6SdFile5writeEPKvj+0x6c>
  uint16_t nToWrite = nbyte;
  // if blocking writes should be used
  uint8_t blocking = (flags_ & F_FILE_NON_BLOCKING_WRITE) == 0x00;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) {
    353a:	8d 80       	ldd	r8, Y+5	; 0x05
    353c:	9e 80       	ldd	r9, Y+6	; 0x06
    353e:	15 c0       	rjmp	.+42     	; 0x356a <_ZN6SdFile5writeEPKvj+0x96>
    goto writeErrorReturn;
  }

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    3540:	f6 01       	movw	r30, r12
    3542:	82 85       	ldd	r24, Z+10	; 0x0a
    3544:	93 85       	ldd	r25, Z+11	; 0x0b
    3546:	a4 85       	ldd	r26, Z+12	; 0x0c
    3548:	b5 85       	ldd	r27, Z+13	; 0x0d
    354a:	43 89       	ldd	r20, Z+19	; 0x13
    354c:	54 89       	ldd	r21, Z+20	; 0x14
    354e:	65 89       	ldd	r22, Z+21	; 0x15
    3550:	76 89       	ldd	r23, Z+22	; 0x16
    3552:	84 17       	cp	r24, r20
    3554:	95 07       	cpc	r25, r21
    3556:	a6 07       	cpc	r26, r22
    3558:	b7 07       	cpc	r27, r23
    355a:	79 f3       	breq	.-34     	; 0x353a <_ZN6SdFile5writeEPKvj+0x66>
    /**
        Set the files current position to end of file.  Useful to position
        a file for append. See seekSet().
    */
    uint8_t seekEnd(void) {
      return seekSet(fileSize_);
    355c:	c6 01       	movw	r24, r12
    355e:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) {
    3562:	88 23       	and	r24, r24
    3564:	09 f4       	brne	.+2      	; 0x3568 <_ZN6SdFile5writeEPKvj+0x94>
    3566:	4d c1       	rjmp	.+666    	; 0x3802 <_ZN6SdFile5writeEPKvj+0x32e>
    3568:	e8 cf       	rjmp	.-48     	; 0x353a <_ZN6SdFile5writeEPKvj+0x66>
      goto writeErrorReturn;
    }
  }

  while (nToWrite > 0) {
    356a:	81 14       	cp	r8, r1
    356c:	91 04       	cpc	r9, r1
    356e:	09 f4       	brne	.+2      	; 0x3572 <_ZN6SdFile5writeEPKvj+0x9e>
    3570:	1b c1       	rjmp	.+566    	; 0x37a8 <_ZN6SdFile5writeEPKvj+0x2d4>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    3572:	d6 01       	movw	r26, r12
    3574:	1a 96       	adiw	r26, 0x0a	; 10
    3576:	0d 91       	ld	r16, X+
    3578:	1d 91       	ld	r17, X+
    357a:	2d 91       	ld	r18, X+
    357c:	3c 91       	ld	r19, X
    357e:	1d 97       	sbiw	r26, 0x0d	; 13
    3580:	5b 96       	adiw	r26, 0x1b	; 27
    3582:	ed 91       	ld	r30, X+
    3584:	fc 91       	ld	r31, X
    3586:	5c 97       	sbiw	r26, 0x1c	; 28
    uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
    uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
    //----------------------------------------------------------------------------
    uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
    uint8_t blockOfCluster(uint32_t position) const {
      return (position >> 9) & (blocksPerCluster_ - 1);
    3588:	d9 01       	movw	r26, r18
    358a:	c8 01       	movw	r24, r16
    358c:	07 2e       	mov	r0, r23
    358e:	79 e0       	ldi	r23, 0x09	; 9
    3590:	b6 95       	lsr	r27
    3592:	a7 95       	ror	r26
    3594:	97 95       	ror	r25
    3596:	87 95       	ror	r24
    3598:	7a 95       	dec	r23
    359a:	d1 f7       	brne	.-12     	; 0x3590 <_ZN6SdFile5writeEPKvj+0xbc>
    359c:	70 2d       	mov	r23, r0
    359e:	74 80       	ldd	r7, Z+4	; 0x04
    35a0:	7a 94       	dec	r7
    35a2:	78 22       	and	r7, r24
    uint16_t blockOffset = curPosition_ & 0X1FF;
    35a4:	11 70       	andi	r17, 0x01	; 1
    if (blockOfCluster == 0 && blockOffset == 0) {
    35a6:	71 10       	cpse	r7, r1
    35a8:	54 c0       	rjmp	.+168    	; 0x3652 <_ZN6SdFile5writeEPKvj+0x17e>
    35aa:	01 15       	cp	r16, r1
    35ac:	11 05       	cpc	r17, r1
    35ae:	09 f0       	breq	.+2      	; 0x35b2 <_ZN6SdFile5writeEPKvj+0xde>
    35b0:	50 c0       	rjmp	.+160    	; 0x3652 <_ZN6SdFile5writeEPKvj+0x17e>
      // start of new cluster
      if (curCluster_ == 0) {
    35b2:	d6 01       	movw	r26, r12
    35b4:	16 96       	adiw	r26, 0x06	; 6
    35b6:	4d 91       	ld	r20, X+
    35b8:	5d 91       	ld	r21, X+
    35ba:	6d 91       	ld	r22, X+
    35bc:	7c 91       	ld	r23, X
    35be:	19 97       	sbiw	r26, 0x09	; 9
    35c0:	41 15       	cp	r20, r1
    35c2:	51 05       	cpc	r21, r1
    35c4:	61 05       	cpc	r22, r1
    35c6:	71 05       	cpc	r23, r1
    35c8:	b1 f4       	brne	.+44     	; 0x35f6 <_ZN6SdFile5writeEPKvj+0x122>
        if (firstCluster_ == 0) {
    35ca:	57 96       	adiw	r26, 0x17	; 23
    35cc:	8d 91       	ld	r24, X+
    35ce:	9d 91       	ld	r25, X+
    35d0:	0d 90       	ld	r0, X+
    35d2:	bc 91       	ld	r27, X
    35d4:	a0 2d       	mov	r26, r0
    35d6:	00 97       	sbiw	r24, 0x00	; 0
    35d8:	a1 05       	cpc	r26, r1
    35da:	b1 05       	cpc	r27, r1
    35dc:	31 f4       	brne	.+12     	; 0x35ea <_ZN6SdFile5writeEPKvj+0x116>
          // allocate first cluster of file
          if (!addCluster()) {
    35de:	c6 01       	movw	r24, r12
    35e0:	0e 94 9b 13 	call	0x2736	; 0x2736 <_ZN6SdFile10addClusterEv>
    35e4:	81 11       	cpse	r24, r1
    35e6:	35 c0       	rjmp	.+106    	; 0x3652 <_ZN6SdFile5writeEPKvj+0x17e>
    35e8:	0c c1       	rjmp	.+536    	; 0x3802 <_ZN6SdFile5writeEPKvj+0x32e>
            goto writeErrorReturn;
          }
        } else {
          curCluster_ = firstCluster_;
    35ea:	f6 01       	movw	r30, r12
    35ec:	86 83       	std	Z+6, r24	; 0x06
    35ee:	97 83       	std	Z+7, r25	; 0x07
    35f0:	a0 87       	std	Z+8, r26	; 0x08
    35f2:	b1 87       	std	Z+9, r27	; 0x09
    35f4:	2e c0       	rjmp	.+92     	; 0x3652 <_ZN6SdFile5writeEPKvj+0x17e>
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) {
    35f6:	9e 01       	movw	r18, r28
    35f8:	2f 5f       	subi	r18, 0xFF	; 255
    35fa:	3f 4f       	sbci	r19, 0xFF	; 255
    35fc:	cf 01       	movw	r24, r30
    35fe:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <_ZNK8SdVolume6fatGetEmPm>
    3602:	81 11       	cpse	r24, r1
    3604:	02 c0       	rjmp	.+4      	; 0x360a <_ZN6SdFile5writeEPKvj+0x136>
          return false;
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	0b c1       	rjmp	.+534    	; 0x3820 <_ZN6SdFile5writeEPKvj+0x34c>
        }
        if (vol_->isEOC(next)) {
    360a:	89 81       	ldd	r24, Y+1	; 0x01
    360c:	9a 81       	ldd	r25, Y+2	; 0x02
    360e:	ab 81       	ldd	r26, Y+3	; 0x03
    3610:	bc 81       	ldd	r27, Y+4	; 0x04
    3612:	f6 01       	movw	r30, r12
    3614:	23 8d       	ldd	r18, Z+27	; 0x1b
    3616:	34 8d       	ldd	r19, Z+28	; 0x1c
    uint8_t fatPutEOC(uint32_t cluster) {
      return fatPut(cluster, 0x0FFFFFFF);
    }
    uint8_t freeChain(uint32_t cluster);
    uint8_t isEOC(uint32_t cluster) const {
      return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    3618:	f9 01       	movw	r30, r18
    361a:	27 89       	ldd	r18, Z+23	; 0x17
    361c:	20 31       	cpi	r18, 0x10	; 16
    361e:	29 f4       	brne	.+10     	; 0x362a <_ZN6SdFile5writeEPKvj+0x156>
    3620:	48 ef       	ldi	r20, 0xF8	; 248
    3622:	5f ef       	ldi	r21, 0xFF	; 255
    3624:	60 e0       	ldi	r22, 0x00	; 0
    3626:	70 e0       	ldi	r23, 0x00	; 0
    3628:	04 c0       	rjmp	.+8      	; 0x3632 <_ZN6SdFile5writeEPKvj+0x15e>
    362a:	48 ef       	ldi	r20, 0xF8	; 248
    362c:	5f ef       	ldi	r21, 0xFF	; 255
    362e:	6f ef       	ldi	r22, 0xFF	; 255
    3630:	7f e0       	ldi	r23, 0x0F	; 15
    3632:	84 17       	cp	r24, r20
    3634:	95 07       	cpc	r25, r21
    3636:	a6 07       	cpc	r26, r22
    3638:	b7 07       	cpc	r27, r23
    363a:	30 f0       	brcs	.+12     	; 0x3648 <_ZN6SdFile5writeEPKvj+0x174>
          // add cluster if at end of chain
          if (!addCluster()) {
    363c:	c6 01       	movw	r24, r12
    363e:	0e 94 9b 13 	call	0x2736	; 0x2736 <_ZN6SdFile10addClusterEv>
    3642:	81 11       	cpse	r24, r1
    3644:	06 c0       	rjmp	.+12     	; 0x3652 <_ZN6SdFile5writeEPKvj+0x17e>
    3646:	dd c0       	rjmp	.+442    	; 0x3802 <_ZN6SdFile5writeEPKvj+0x32e>
            goto writeErrorReturn;
          }
        } else {
          curCluster_ = next;
    3648:	f6 01       	movw	r30, r12
    364a:	86 83       	std	Z+6, r24	; 0x06
    364c:	97 83       	std	Z+7, r25	; 0x07
    364e:	a0 87       	std	Z+8, r26	; 0x08
    3650:	b1 87       	std	Z+9, r27	; 0x09
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    3652:	80 e0       	ldi	r24, 0x00	; 0
    3654:	92 e0       	ldi	r25, 0x02	; 2
    3656:	5c 01       	movw	r10, r24
    3658:	a0 1a       	sub	r10, r16
    365a:	b1 0a       	sbc	r11, r17

    // lesser of space and amount to write
    if (n > nToWrite) {
    365c:	8a 14       	cp	r8, r10
    365e:	9b 04       	cpc	r9, r11
    3660:	08 f4       	brcc	.+2      	; 0x3664 <_ZN6SdFile5writeEPKvj+0x190>
      n = nToWrite;
    3662:	54 01       	movw	r10, r8
    }

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3664:	f6 01       	movw	r30, r12
    3666:	86 81       	ldd	r24, Z+6	; 0x06
    3668:	97 81       	ldd	r25, Z+7	; 0x07
    366a:	a0 85       	ldd	r26, Z+8	; 0x08
    366c:	b1 85       	ldd	r27, Z+9	; 0x09
    366e:	23 8d       	ldd	r18, Z+27	; 0x1b
    3670:	34 8d       	ldd	r19, Z+28	; 0x1c
    uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
    uint8_t blockOfCluster(uint32_t position) const {
      return (position >> 9) & (blocksPerCluster_ - 1);
    }
    uint32_t clusterStartBlock(uint32_t cluster) const {
      return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);
    3672:	f9 01       	movw	r30, r18
    3674:	46 85       	ldd	r20, Z+14	; 0x0e
    3676:	57 85       	ldd	r21, Z+15	; 0x0f
    3678:	60 89       	ldd	r22, Z+16	; 0x10
    367a:	71 89       	ldd	r23, Z+17	; 0x11
    367c:	02 97       	sbiw	r24, 0x02	; 2
    367e:	a1 09       	sbc	r26, r1
    3680:	b1 09       	sbc	r27, r1
    3682:	05 84       	ldd	r0, Z+13	; 0x0d
    3684:	04 c0       	rjmp	.+8      	; 0x368e <_ZN6SdFile5writeEPKvj+0x1ba>
    3686:	88 0f       	add	r24, r24
    3688:	99 1f       	adc	r25, r25
    368a:	aa 1f       	adc	r26, r26
    368c:	bb 1f       	adc	r27, r27
    368e:	0a 94       	dec	r0
    3690:	d2 f7       	brpl	.-12     	; 0x3686 <_ZN6SdFile5writeEPKvj+0x1b2>
    3692:	84 0f       	add	r24, r20
    3694:	95 1f       	adc	r25, r21
    3696:	a6 1f       	adc	r26, r22
    3698:	b7 1f       	adc	r27, r23
    369a:	9c 01       	movw	r18, r24
    369c:	ad 01       	movw	r20, r26
    369e:	27 0d       	add	r18, r7
    36a0:	31 1d       	adc	r19, r1
    36a2:	41 1d       	adc	r20, r1
    36a4:	51 1d       	adc	r21, r1
    36a6:	29 01       	movw	r4, r18
    36a8:	3a 01       	movw	r6, r20
    if (n == 512) {
    36aa:	a1 14       	cp	r10, r1
    36ac:	32 e0       	ldi	r19, 0x02	; 2
    36ae:	b3 06       	cpc	r11, r19
    36b0:	41 f5       	brne	.+80     	; 0x3702 <_ZN6SdFile5writeEPKvj+0x22e>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    36b2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    36b6:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    36ba:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    36be:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    36c2:	48 16       	cp	r4, r24
    36c4:	59 06       	cpc	r5, r25
    36c6:	6a 06       	cpc	r6, r26
    36c8:	7b 06       	cpc	r7, r27
    36ca:	59 f4       	brne	.+22     	; 0x36e2 <_ZN6SdFile5writeEPKvj+0x20e>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    36cc:	8f ef       	ldi	r24, 0xFF	; 255
    36ce:	9f ef       	ldi	r25, 0xFF	; 255
    36d0:	dc 01       	movw	r26, r24
    36d2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    36d6:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    36da:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    36de:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    uint8_t readData(uint32_t block, uint16_t offset,
                     uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
    }
    uint8_t writeBlock(uint32_t block, const uint8_t* dst, uint8_t blocking = 1) {
      return sdCard_->writeBlock(block, dst, blocking);
    36e2:	03 2d       	mov	r16, r3
    36e4:	97 01       	movw	r18, r14
    36e6:	b3 01       	movw	r22, r6
    36e8:	a2 01       	movw	r20, r4
    36ea:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <_ZN8SdVolume7sdCard_E>
    36ee:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <_ZN8SdVolume7sdCard_E+0x1>
    36f2:	0e 94 22 13 	call	0x2644	; 0x2644 <_ZN7Sd2Card10writeBlockEmPKhh>
      }
      if (!vol_->writeBlock(block, src, blocking)) {
    36f6:	88 23       	and	r24, r24
    36f8:	09 f4       	brne	.+2      	; 0x36fc <_ZN6SdFile5writeEPKvj+0x228>
    36fa:	83 c0       	rjmp	.+262    	; 0x3802 <_ZN6SdFile5writeEPKvj+0x32e>
        goto writeErrorReturn;
      }
      src += 512;
    36fc:	4e ef       	ldi	r20, 0xFE	; 254
    36fe:	f4 1a       	sub	r15, r20
    3700:	43 c0       	rjmp	.+134    	; 0x3788 <_ZN6SdFile5writeEPKvj+0x2b4>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    3702:	01 15       	cp	r16, r1
    3704:	11 05       	cpc	r17, r1
    3706:	31 f5       	brne	.+76     	; 0x3754 <_ZN6SdFile5writeEPKvj+0x280>
    3708:	d6 01       	movw	r26, r12
    370a:	1a 96       	adiw	r26, 0x0a	; 10
    370c:	4d 91       	ld	r20, X+
    370e:	5d 91       	ld	r21, X+
    3710:	6d 91       	ld	r22, X+
    3712:	7c 91       	ld	r23, X
    3714:	1d 97       	sbiw	r26, 0x0d	; 13
    3716:	53 96       	adiw	r26, 0x13	; 19
    3718:	8d 91       	ld	r24, X+
    371a:	9d 91       	ld	r25, X+
    371c:	0d 90       	ld	r0, X+
    371e:	bc 91       	ld	r27, X
    3720:	a0 2d       	mov	r26, r0
    3722:	48 17       	cp	r20, r24
    3724:	59 07       	cpc	r21, r25
    3726:	6a 07       	cpc	r22, r26
    3728:	7b 07       	cpc	r23, r27
    372a:	a0 f0       	brcs	.+40     	; 0x3754 <_ZN6SdFile5writeEPKvj+0x280>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) {
    372c:	81 e0       	ldi	r24, 0x01	; 1
    372e:	0e 94 5f 1c 	call	0x38be	; 0x38be <_ZN8SdVolume10cacheFlushEh>
    3732:	88 23       	and	r24, r24
    3734:	09 f4       	brne	.+2      	; 0x3738 <_ZN6SdFile5writeEPKvj+0x264>
    3736:	65 c0       	rjmp	.+202    	; 0x3802 <_ZN6SdFile5writeEPKvj+0x32e>
          goto writeErrorReturn;
        }
        SdVolume::cacheBlockNumber_ = block;
    3738:	40 92 09 01 	sts	0x0109, r4	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    373c:	50 92 0a 01 	sts	0x010A, r5	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3740:	60 92 0b 01 	sts	0x010B, r6	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3744:	70 92 0c 01 	sts	0x010C, r7	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    }
    static uint8_t cacheFlush(uint8_t blocking = 1);
    static uint8_t cacheMirrorBlockFlush(uint8_t blocking);
    static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
    static void cacheSetDirty(void) {
      cacheDirty_ |= CACHE_FOR_WRITE;
    3748:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <_ZN8SdVolume11cacheDirty_E>
    374c:	81 60       	ori	r24, 0x01	; 1
    374e:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <_ZN8SdVolume11cacheDirty_E>
    3752:	08 c0       	rjmp	.+16     	; 0x3764 <_ZN6SdFile5writeEPKvj+0x290>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    3754:	41 e0       	ldi	r20, 0x01	; 1
    3756:	c3 01       	movw	r24, r6
    3758:	b2 01       	movw	r22, r4
    375a:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN8SdVolume13cacheRawBlockEmh>
    375e:	88 23       	and	r24, r24
    3760:	09 f4       	brne	.+2      	; 0x3764 <_ZN6SdFile5writeEPKvj+0x290>
    3762:	4f c0       	rjmp	.+158    	; 0x3802 <_ZN6SdFile5writeEPKvj+0x32e>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    3764:	f8 01       	movw	r30, r16
    3766:	e4 54       	subi	r30, 0x44	; 68
    3768:	fd 4f       	sbci	r31, 0xFD	; 253
      uint8_t* end = dst + n;
    376a:	9f 01       	movw	r18, r30
    376c:	2a 0d       	add	r18, r10
    376e:	3b 1d       	adc	r19, r11
      while (dst != end) {
    3770:	e2 17       	cp	r30, r18
    3772:	f3 07       	cpc	r31, r19
    3774:	49 f0       	breq	.+18     	; 0x3788 <_ZN6SdFile5writeEPKvj+0x2b4>
        *dst++ = *src++;
    3776:	d7 01       	movw	r26, r14
    3778:	8c 91       	ld	r24, X
    377a:	80 83       	st	Z, r24
    377c:	31 96       	adiw	r30, 0x01	; 1
    377e:	a7 01       	movw	r20, r14
    3780:	4f 5f       	subi	r20, 0xFF	; 255
    3782:	5f 4f       	sbci	r21, 0xFF	; 255
    3784:	7a 01       	movw	r14, r20
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) {
    3786:	f4 cf       	rjmp	.-24     	; 0x3770 <_ZN6SdFile5writeEPKvj+0x29c>
        *dst++ = *src++;
      }
    }
    nToWrite -= n;
    3788:	8a 18       	sub	r8, r10
    378a:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    378c:	f6 01       	movw	r30, r12
    378e:	82 85       	ldd	r24, Z+10	; 0x0a
    3790:	93 85       	ldd	r25, Z+11	; 0x0b
    3792:	a4 85       	ldd	r26, Z+12	; 0x0c
    3794:	b5 85       	ldd	r27, Z+13	; 0x0d
    3796:	8a 0d       	add	r24, r10
    3798:	9b 1d       	adc	r25, r11
    379a:	a1 1d       	adc	r26, r1
    379c:	b1 1d       	adc	r27, r1
    379e:	82 87       	std	Z+10, r24	; 0x0a
    37a0:	93 87       	std	Z+11, r25	; 0x0b
    37a2:	a4 87       	std	Z+12, r26	; 0x0c
    37a4:	b5 87       	std	Z+13, r27	; 0x0d
    if (!seekEnd()) {
      goto writeErrorReturn;
    }
  }

  while (nToWrite > 0) {
    37a6:	e1 ce       	rjmp	.-574    	; 0x356a <_ZN6SdFile5writeEPKvj+0x96>
      }
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    37a8:	f6 01       	movw	r30, r12
    37aa:	82 85       	ldd	r24, Z+10	; 0x0a
    37ac:	93 85       	ldd	r25, Z+11	; 0x0b
    37ae:	a4 85       	ldd	r26, Z+12	; 0x0c
    37b0:	b5 85       	ldd	r27, Z+13	; 0x0d
    37b2:	43 89       	ldd	r20, Z+19	; 0x13
    37b4:	54 89       	ldd	r21, Z+20	; 0x14
    37b6:	65 89       	ldd	r22, Z+21	; 0x15
    37b8:	76 89       	ldd	r23, Z+22	; 0x16
    37ba:	48 17       	cp	r20, r24
    37bc:	59 07       	cpc	r21, r25
    37be:	6a 07       	cpc	r22, r26
    37c0:	7b 07       	cpc	r23, r27
    37c2:	40 f4       	brcc	.+16     	; 0x37d4 <_ZN6SdFile5writeEPKvj+0x300>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    37c4:	83 8b       	std	Z+19, r24	; 0x13
    37c6:	94 8b       	std	Z+20, r25	; 0x14
    37c8:	a5 8b       	std	Z+21, r26	; 0x15
    37ca:	b6 8b       	std	Z+22, r27	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    37cc:	84 81       	ldd	r24, Z+4	; 0x04
    37ce:	80 68       	ori	r24, 0x80	; 128
    37d0:	84 83       	std	Z+4, r24	; 0x04
    37d2:	0d c0       	rjmp	.+26     	; 0x37ee <_ZN6SdFile5writeEPKvj+0x31a>
  } else if (dateTime_ && nbyte) {
    37d4:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <_ZN6SdFile9dateTime_E>
    37d8:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <_ZN6SdFile9dateTime_E+0x1>
    37dc:	89 2b       	or	r24, r25
    37de:	39 f0       	breq	.+14     	; 0x37ee <_ZN6SdFile5writeEPKvj+0x31a>
    37e0:	2d 81       	ldd	r18, Y+5	; 0x05
    37e2:	3e 81       	ldd	r19, Y+6	; 0x06
    37e4:	23 2b       	or	r18, r19
    37e6:	19 f0       	breq	.+6      	; 0x37ee <_ZN6SdFile5writeEPKvj+0x31a>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    37e8:	84 81       	ldd	r24, Z+4	; 0x04
    37ea:	80 68       	ori	r24, 0x80	; 128
    37ec:	84 83       	std	Z+4, r24	; 0x04
  }

  if (flags_ & O_SYNC) {
    37ee:	f6 01       	movw	r30, r12
    37f0:	84 81       	ldd	r24, Z+4	; 0x04
    37f2:	83 ff       	sbrs	r24, 3
    37f4:	10 c0       	rjmp	.+32     	; 0x3816 <_ZN6SdFile5writeEPKvj+0x342>
    if (!sync()) {
    37f6:	61 e0       	ldi	r22, 0x01	; 1
    37f8:	c6 01       	movw	r24, r12
    37fa:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <_ZN6SdFile4syncEh>
    37fe:	81 11       	cpse	r24, r1
    3800:	0d c0       	rjmp	.+26     	; 0x381c <_ZN6SdFile5writeEPKvj+0x348>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    3802:	81 e0       	ldi	r24, 0x01	; 1
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	d6 01       	movw	r26, r12
    3808:	13 96       	adiw	r26, 0x03	; 3
    380a:	9c 93       	st	X, r25
    380c:	8e 93       	st	-X, r24
    380e:	12 97       	sbiw	r26, 0x02	; 2

writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    3810:	80 e0       	ldi	r24, 0x00	; 0
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	05 c0       	rjmp	.+10     	; 0x3820 <_ZN6SdFile5writeEPKvj+0x34c>
  if (flags_ & O_SYNC) {
    if (!sync()) {
      goto writeErrorReturn;
    }
  }
  return nbyte;
    3816:	8d 81       	ldd	r24, Y+5	; 0x05
    3818:	9e 81       	ldd	r25, Y+6	; 0x06
    381a:	02 c0       	rjmp	.+4      	; 0x3820 <_ZN6SdFile5writeEPKvj+0x34c>
    381c:	8d 81       	ldd	r24, Y+5	; 0x05
    381e:	9e 81       	ldd	r25, Y+6	; 0x06
writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    3820:	26 96       	adiw	r28, 0x06	; 6
    3822:	0f b6       	in	r0, 0x3f	; 63
    3824:	f8 94       	cli
    3826:	de bf       	out	0x3e, r29	; 62
    3828:	0f be       	out	0x3f, r0	; 63
    382a:	cd bf       	out	0x3d, r28	; 61
    382c:	df 91       	pop	r29
    382e:	cf 91       	pop	r28
    3830:	1f 91       	pop	r17
    3832:	0f 91       	pop	r16
    3834:	ff 90       	pop	r15
    3836:	ef 90       	pop	r14
    3838:	df 90       	pop	r13
    383a:	cf 90       	pop	r12
    383c:	bf 90       	pop	r11
    383e:	af 90       	pop	r10
    3840:	9f 90       	pop	r9
    3842:	8f 90       	pop	r8
    3844:	7f 90       	pop	r7
    3846:	6f 90       	pop	r6
    3848:	5f 90       	pop	r5
    384a:	4f 90       	pop	r4
    384c:	3f 90       	pop	r3
    384e:	08 95       	ret

00003850 <_ZN6SdFile5writeEh>:
/**
   Write a byte to a file. Required by the Arduino Print class.

   Use SdFile::writeError to check for errors.
*/
size_t SdFile::write(uint8_t b) {
    3850:	cf 93       	push	r28
    3852:	df 93       	push	r29
    3854:	1f 92       	push	r1
    3856:	cd b7       	in	r28, 0x3d	; 61
    3858:	de b7       	in	r29, 0x3e	; 62
    385a:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    385c:	41 e0       	ldi	r20, 0x01	; 1
    385e:	50 e0       	ldi	r21, 0x00	; 0
    3860:	be 01       	movw	r22, r28
    3862:	6f 5f       	subi	r22, 0xFF	; 255
    3864:	7f 4f       	sbci	r23, 0xFF	; 255
    3866:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <_ZN6SdFile5writeEPKvj>
}
    386a:	0f 90       	pop	r0
    386c:	df 91       	pop	r29
    386e:	cf 91       	pop	r28
    3870:	08 95       	ret

00003872 <_ZN8SdVolume21cacheMirrorBlockFlushEh>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheMirrorBlockFlush(uint8_t blocking) {
    3872:	0f 93       	push	r16
  if (cacheMirrorBlock_) {
    3874:	40 91 b5 02 	lds	r20, 0x02B5	; 0x8002b5 <_ZN8SdVolume17cacheMirrorBlock_E>
    3878:	50 91 b6 02 	lds	r21, 0x02B6	; 0x8002b6 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    387c:	60 91 b7 02 	lds	r22, 0x02B7	; 0x8002b7 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    3880:	70 91 b8 02 	lds	r23, 0x02B8	; 0x8002b8 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    3884:	41 15       	cp	r20, r1
    3886:	51 05       	cpc	r21, r1
    3888:	61 05       	cpc	r22, r1
    388a:	71 05       	cpc	r23, r1
    388c:	a9 f0       	breq	.+42     	; 0x38b8 <_ZN8SdVolume21cacheMirrorBlockFlushEh+0x46>
    388e:	08 2f       	mov	r16, r24
    if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data, blocking)) {
    3890:	2c eb       	ldi	r18, 0xBC	; 188
    3892:	32 e0       	ldi	r19, 0x02	; 2
    3894:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <_ZN8SdVolume7sdCard_E>
    3898:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <_ZN8SdVolume7sdCard_E+0x1>
    389c:	0e 94 22 13 	call	0x2644	; 0x2644 <_ZN7Sd2Card10writeBlockEmPKhh>
    38a0:	88 23       	and	r24, r24
    38a2:	59 f0       	breq	.+22     	; 0x38ba <_ZN8SdVolume21cacheMirrorBlockFlushEh+0x48>
      return false;
    }
    cacheMirrorBlock_ = 0;
    38a4:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <_ZN8SdVolume17cacheMirrorBlock_E>
    38a8:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    38ac:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    38b0:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  }
  return true;
    38b4:	81 e0       	ldi	r24, 0x01	; 1
    38b6:	01 c0       	rjmp	.+2      	; 0x38ba <_ZN8SdVolume21cacheMirrorBlockFlushEh+0x48>
    38b8:	81 e0       	ldi	r24, 0x01	; 1
}
    38ba:	0f 91       	pop	r16
    38bc:	08 95       	ret

000038be <_ZN8SdVolume10cacheFlushEh>:
  }

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(uint8_t blocking) {
    38be:	0f 93       	push	r16
    38c0:	cf 93       	push	r28
  if (cacheDirty_) {
    38c2:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <_ZN8SdVolume11cacheDirty_E>
    38c6:	99 23       	and	r25, r25
    38c8:	f9 f0       	breq	.+62     	; 0x3908 <_ZN8SdVolume10cacheFlushEh+0x4a>
    38ca:	c8 2f       	mov	r28, r24
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data, blocking)) {
    38cc:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    38d0:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    38d4:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    38d8:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    38dc:	08 2f       	mov	r16, r24
    38de:	2c eb       	ldi	r18, 0xBC	; 188
    38e0:	32 e0       	ldi	r19, 0x02	; 2
    38e2:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <_ZN8SdVolume7sdCard_E>
    38e6:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <_ZN8SdVolume7sdCard_E+0x1>
    38ea:	0e 94 22 13 	call	0x2644	; 0x2644 <_ZN7Sd2Card10writeBlockEmPKhh>
    38ee:	88 23       	and	r24, r24
    38f0:	71 f0       	breq	.+28     	; 0x390e <_ZN8SdVolume10cacheFlushEh+0x50>
      return false;
    }

    if (!blocking) {
    38f2:	cc 23       	and	r28, r28
    38f4:	59 f0       	breq	.+22     	; 0x390c <_ZN8SdVolume10cacheFlushEh+0x4e>
      return true;
    }

    // mirror FAT tables
    if (!cacheMirrorBlockFlush(blocking)) {
    38f6:	8c 2f       	mov	r24, r28
    38f8:	0e 94 39 1c 	call	0x3872	; 0x3872 <_ZN8SdVolume21cacheMirrorBlockFlushEh>
    38fc:	88 23       	and	r24, r24
    38fe:	39 f0       	breq	.+14     	; 0x390e <_ZN8SdVolume10cacheFlushEh+0x50>
      return false;
    }
    cacheDirty_ = 0;
    3900:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <_ZN8SdVolume11cacheDirty_E>
  }
  return true;
    3904:	81 e0       	ldi	r24, 0x01	; 1
    3906:	03 c0       	rjmp	.+6      	; 0x390e <_ZN8SdVolume10cacheFlushEh+0x50>
    3908:	81 e0       	ldi	r24, 0x01	; 1
    390a:	01 c0       	rjmp	.+2      	; 0x390e <_ZN8SdVolume10cacheFlushEh+0x50>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data, blocking)) {
      return false;
    }

    if (!blocking) {
      return true;
    390c:	81 e0       	ldi	r24, 0x01	; 1
      return false;
    }
    cacheDirty_ = 0;
  }
  return true;
}
    390e:	cf 91       	pop	r28
    3910:	0f 91       	pop	r16
    3912:	08 95       	ret

00003914 <_ZN8SdVolume13cacheRawBlockEmh>:
    cacheMirrorBlock_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    3914:	cf 92       	push	r12
    3916:	df 92       	push	r13
    3918:	ef 92       	push	r14
    391a:	ff 92       	push	r15
    391c:	cf 93       	push	r28
    391e:	6b 01       	movw	r12, r22
    3920:	7c 01       	movw	r14, r24
    3922:	c4 2f       	mov	r28, r20
  if (cacheBlockNumber_ != blockNumber) {
    3924:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    3928:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    392c:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3930:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3934:	8c 15       	cp	r24, r12
    3936:	9d 05       	cpc	r25, r13
    3938:	ae 05       	cpc	r26, r14
    393a:	bf 05       	cpc	r27, r15
    393c:	c9 f0       	breq	.+50     	; 0x3970 <_ZN8SdVolume13cacheRawBlockEmh+0x5c>
    if (!cacheFlush()) {
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	0e 94 5f 1c 	call	0x38be	; 0x38be <_ZN8SdVolume10cacheFlushEh>
    3944:	88 23       	and	r24, r24
    3946:	d1 f0       	breq	.+52     	; 0x397c <_ZN8SdVolume13cacheRawBlockEmh+0x68>
      return false;
    }
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) {
    3948:	2c eb       	ldi	r18, 0xBC	; 188
    394a:	32 e0       	ldi	r19, 0x02	; 2
    394c:	b7 01       	movw	r22, r14
    394e:	a6 01       	movw	r20, r12
    3950:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <_ZN8SdVolume7sdCard_E>
    3954:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <_ZN8SdVolume7sdCard_E+0x1>
    3958:	0e 94 dd 12 	call	0x25ba	; 0x25ba <_ZN7Sd2Card9readBlockEmPh>
    395c:	88 23       	and	r24, r24
    395e:	71 f0       	breq	.+28     	; 0x397c <_ZN8SdVolume13cacheRawBlockEmh+0x68>
      return false;
    }
    cacheBlockNumber_ = blockNumber;
    3960:	c0 92 09 01 	sts	0x0109, r12	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    3964:	d0 92 0a 01 	sts	0x010A, r13	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3968:	e0 92 0b 01 	sts	0x010B, r14	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    396c:	f0 92 0c 01 	sts	0x010C, r15	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  }
  cacheDirty_ |= action;
    3970:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <_ZN8SdVolume11cacheDirty_E>
    3974:	c8 2b       	or	r28, r24
    3976:	c0 93 b9 02 	sts	0x02B9, r28	; 0x8002b9 <_ZN8SdVolume11cacheDirty_E>
  return true;
    397a:	81 e0       	ldi	r24, 0x01	; 1
}
    397c:	cf 91       	pop	r28
    397e:	ff 90       	pop	r15
    3980:	ef 90       	pop	r14
    3982:	df 90       	pop	r13
    3984:	cf 90       	pop	r12
    3986:	08 95       	ret

00003988 <_ZN8SdVolume14cacheZeroBlockEm>:
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    3988:	cf 92       	push	r12
    398a:	df 92       	push	r13
    398c:	ef 92       	push	r14
    398e:	ff 92       	push	r15
    3990:	6b 01       	movw	r12, r22
    3992:	7c 01       	movw	r14, r24
  if (!cacheFlush()) {
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	0e 94 5f 1c 	call	0x38be	; 0x38be <_ZN8SdVolume10cacheFlushEh>
    399a:	88 23       	and	r24, r24
    399c:	d1 f0       	breq	.+52     	; 0x39d2 <_ZN8SdVolume14cacheZeroBlockEm+0x4a>
    399e:	80 e0       	ldi	r24, 0x00	; 0
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    return false;
  }

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    39a2:	81 15       	cp	r24, r1
    39a4:	22 e0       	ldi	r18, 0x02	; 2
    39a6:	92 07       	cpc	r25, r18
    39a8:	30 f4       	brcc	.+12     	; 0x39b6 <_ZN8SdVolume14cacheZeroBlockEm+0x2e>
    cacheBuffer_.data[i] = 0;
    39aa:	fc 01       	movw	r30, r24
    39ac:	e4 54       	subi	r30, 0x44	; 68
    39ae:	fd 4f       	sbci	r31, 0xFD	; 253
    39b0:	10 82       	st	Z, r1
  if (!cacheFlush()) {
    return false;
  }

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    39b2:	01 96       	adiw	r24, 0x01	; 1
    39b4:	f6 cf       	rjmp	.-20     	; 0x39a2 <_ZN8SdVolume14cacheZeroBlockEm+0x1a>
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    39b6:	c0 92 09 01 	sts	0x0109, r12	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    39ba:	d0 92 0a 01 	sts	0x010A, r13	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    39be:	e0 92 0b 01 	sts	0x010B, r14	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    39c2:	f0 92 0c 01 	sts	0x010C, r15	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    39c6:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <_ZN8SdVolume11cacheDirty_E>
    39ca:	81 60       	ori	r24, 0x01	; 1
    39cc:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <_ZN8SdVolume11cacheDirty_E>
  cacheSetDirty();
  return true;
    39d0:	81 e0       	ldi	r24, 0x01	; 1
}
    39d2:	ff 90       	pop	r15
    39d4:	ef 90       	pop	r14
    39d6:	df 90       	pop	r13
    39d8:	cf 90       	pop	r12
    39da:	08 95       	ret

000039dc <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    39dc:	8f 92       	push	r8
    39de:	9f 92       	push	r9
    39e0:	af 92       	push	r10
    39e2:	bf 92       	push	r11
    39e4:	cf 92       	push	r12
    39e6:	df 92       	push	r13
    39e8:	ef 92       	push	r14
    39ea:	ff 92       	push	r15
    39ec:	0f 93       	push	r16
    39ee:	1f 93       	push	r17
    39f0:	cf 93       	push	r28
    39f2:	df 93       	push	r29
    39f4:	fc 01       	movw	r30, r24
    39f6:	e9 01       	movw	r28, r18
  if (cluster > (clusterCount_ + 1)) {
    39f8:	01 85       	ldd	r16, Z+9	; 0x09
    39fa:	12 85       	ldd	r17, Z+10	; 0x0a
    39fc:	23 85       	ldd	r18, Z+11	; 0x0b
    39fe:	34 85       	ldd	r19, Z+12	; 0x0c
    3a00:	0f 5f       	subi	r16, 0xFF	; 255
    3a02:	1f 4f       	sbci	r17, 0xFF	; 255
    3a04:	2f 4f       	sbci	r18, 0xFF	; 255
    3a06:	3f 4f       	sbci	r19, 0xFF	; 255
    3a08:	04 17       	cp	r16, r20
    3a0a:	15 07       	cpc	r17, r21
    3a0c:	26 07       	cpc	r18, r22
    3a0e:	37 07       	cpc	r19, r23
    3a10:	08 f4       	brcc	.+2      	; 0x3a14 <_ZNK8SdVolume6fatGetEmPm+0x38>
    3a12:	61 c0       	rjmp	.+194    	; 0x3ad6 <_ZNK8SdVolume6fatGetEmPm+0xfa>
    return false;
  }
  uint32_t lba = fatStartBlock_;
    3a14:	83 89       	ldd	r24, Z+19	; 0x13
    3a16:	94 89       	ldd	r25, Z+20	; 0x14
    3a18:	a5 89       	ldd	r26, Z+21	; 0x15
    3a1a:	b6 89       	ldd	r27, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3a1c:	27 89       	ldd	r18, Z+23	; 0x17
    3a1e:	20 31       	cpi	r18, 0x10	; 16
    3a20:	29 f4       	brne	.+10     	; 0x3a2c <_ZNK8SdVolume6fatGetEmPm+0x50>
    3a22:	85 2e       	mov	r8, r21
    3a24:	96 2e       	mov	r9, r22
    3a26:	a7 2e       	mov	r10, r23
    3a28:	bb 24       	eor	r11, r11
    3a2a:	0a c0       	rjmp	.+20     	; 0x3a40 <_ZNK8SdVolume6fatGetEmPm+0x64>
    3a2c:	4a 01       	movw	r8, r20
    3a2e:	5b 01       	movw	r10, r22
    3a30:	68 94       	set
    3a32:	16 f8       	bld	r1, 6
    3a34:	b6 94       	lsr	r11
    3a36:	a7 94       	ror	r10
    3a38:	97 94       	ror	r9
    3a3a:	87 94       	ror	r8
    3a3c:	16 94       	lsr	r1
    3a3e:	d1 f7       	brne	.-12     	; 0x3a34 <_ZNK8SdVolume6fatGetEmPm+0x58>
    3a40:	6a 01       	movw	r12, r20
    3a42:	7b 01       	movw	r14, r22
    3a44:	8f 01       	movw	r16, r30
    3a46:	bc 01       	movw	r22, r24
    3a48:	cd 01       	movw	r24, r26
    3a4a:	68 0d       	add	r22, r8
    3a4c:	79 1d       	adc	r23, r9
    3a4e:	8a 1d       	adc	r24, r10
    3a50:	9b 1d       	adc	r25, r11
  if (lba != cacheBlockNumber_) {
    3a52:	80 90 09 01 	lds	r8, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    3a56:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3a5a:	a0 90 0b 01 	lds	r10, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3a5e:	b0 90 0c 01 	lds	r11, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3a62:	68 15       	cp	r22, r8
    3a64:	79 05       	cpc	r23, r9
    3a66:	8a 05       	cpc	r24, r10
    3a68:	9b 05       	cpc	r25, r11
    3a6a:	29 f0       	breq	.+10     	; 0x3a76 <_ZNK8SdVolume6fatGetEmPm+0x9a>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) {
    3a6c:	40 e0       	ldi	r20, 0x00	; 0
    3a6e:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN8SdVolume13cacheRawBlockEmh>
    3a72:	88 23       	and	r24, r24
    3a74:	89 f1       	breq	.+98     	; 0x3ad8 <_ZNK8SdVolume6fatGetEmPm+0xfc>
      return false;
    }
  }
  if (fatType_ == 16) {
    3a76:	f8 01       	movw	r30, r16
    3a78:	87 89       	ldd	r24, Z+23	; 0x17
    3a7a:	80 31       	cpi	r24, 0x10	; 16
    3a7c:	a1 f4       	brne	.+40     	; 0x3aa6 <_ZNK8SdVolume6fatGetEmPm+0xca>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    3a7e:	b7 01       	movw	r22, r14
    3a80:	a6 01       	movw	r20, r12
    3a82:	55 27       	eor	r21, r21
    3a84:	66 27       	eor	r22, r22
    3a86:	77 27       	eor	r23, r23
    3a88:	44 0f       	add	r20, r20
    3a8a:	55 1f       	adc	r21, r21
    3a8c:	fa 01       	movw	r30, r20
    3a8e:	e4 54       	subi	r30, 0x44	; 68
    3a90:	fd 4f       	sbci	r31, 0xFD	; 253
    3a92:	80 81       	ld	r24, Z
    3a94:	91 81       	ldd	r25, Z+1	; 0x01
    3a96:	a0 e0       	ldi	r26, 0x00	; 0
    3a98:	b0 e0       	ldi	r27, 0x00	; 0
    3a9a:	88 83       	st	Y, r24
    3a9c:	99 83       	std	Y+1, r25	; 0x01
    3a9e:	aa 83       	std	Y+2, r26	; 0x02
    3aa0:	bb 83       	std	Y+3, r27	; 0x03
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	19 c0       	rjmp	.+50     	; 0x3ad8 <_ZNK8SdVolume6fatGetEmPm+0xfc>
    }
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    3aa6:	b7 01       	movw	r22, r14
    3aa8:	a6 01       	movw	r20, r12
    3aaa:	4f 77       	andi	r20, 0x7F	; 127
    3aac:	55 27       	eor	r21, r21
    3aae:	66 27       	eor	r22, r22
    3ab0:	77 27       	eor	r23, r23
    3ab2:	44 0f       	add	r20, r20
    3ab4:	55 1f       	adc	r21, r21
    3ab6:	44 0f       	add	r20, r20
    3ab8:	55 1f       	adc	r21, r21
    3aba:	fa 01       	movw	r30, r20
    3abc:	e4 54       	subi	r30, 0x44	; 68
    3abe:	fd 4f       	sbci	r31, 0xFD	; 253
    3ac0:	80 81       	ld	r24, Z
    3ac2:	91 81       	ldd	r25, Z+1	; 0x01
    3ac4:	a2 81       	ldd	r26, Z+2	; 0x02
    3ac6:	b3 81       	ldd	r27, Z+3	; 0x03
    3ac8:	bf 70       	andi	r27, 0x0F	; 15
    3aca:	88 83       	st	Y, r24
    3acc:	99 83       	std	Y+1, r25	; 0x01
    3ace:	aa 83       	std	Y+2, r26	; 0x02
    3ad0:	bb 83       	std	Y+3, r27	; 0x03
  }
  return true;
    3ad2:	81 e0       	ldi	r24, 0x01	; 1
    3ad4:	01 c0       	rjmp	.+2      	; 0x3ad8 <_ZNK8SdVolume6fatGetEmPm+0xfc>
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) {
    return false;
    3ad6:	80 e0       	ldi	r24, 0x00	; 0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    3ad8:	df 91       	pop	r29
    3ada:	cf 91       	pop	r28
    3adc:	1f 91       	pop	r17
    3ade:	0f 91       	pop	r16
    3ae0:	ff 90       	pop	r15
    3ae2:	ef 90       	pop	r14
    3ae4:	df 90       	pop	r13
    3ae6:	cf 90       	pop	r12
    3ae8:	bf 90       	pop	r11
    3aea:	af 90       	pop	r10
    3aec:	9f 90       	pop	r9
    3aee:	8f 90       	pop	r8
    3af0:	08 95       	ret

00003af2 <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    3af2:	8f 92       	push	r8
    3af4:	9f 92       	push	r9
    3af6:	af 92       	push	r10
    3af8:	bf 92       	push	r11
    3afa:	ef 92       	push	r14
    3afc:	ff 92       	push	r15
    3afe:	0f 93       	push	r16
    3b00:	1f 93       	push	r17
    3b02:	cf 93       	push	r28
    3b04:	df 93       	push	r29
    3b06:	00 d0       	rcall	.+0      	; 0x3b08 <_ZNK8SdVolume9chainSizeEmPm+0x16>
    3b08:	00 d0       	rcall	.+0      	; 0x3b0a <_ZNK8SdVolume9chainSizeEmPm+0x18>
    3b0a:	cd b7       	in	r28, 0x3d	; 61
    3b0c:	de b7       	in	r29, 0x3e	; 62
    3b0e:	8c 01       	movw	r16, r24
    3b10:	49 83       	std	Y+1, r20	; 0x01
    3b12:	5a 83       	std	Y+2, r21	; 0x02
    3b14:	6b 83       	std	Y+3, r22	; 0x03
    3b16:	7c 83       	std	Y+4, r23	; 0x04
    3b18:	79 01       	movw	r14, r18
  uint32_t s = 0;
    3b1a:	81 2c       	mov	r8, r1
    3b1c:	91 2c       	mov	r9, r1
    3b1e:	54 01       	movw	r10, r8
  do {
    if (!fatGet(cluster, &cluster)) {
    3b20:	49 81       	ldd	r20, Y+1	; 0x01
    3b22:	5a 81       	ldd	r21, Y+2	; 0x02
    3b24:	6b 81       	ldd	r22, Y+3	; 0x03
    3b26:	7c 81       	ldd	r23, Y+4	; 0x04
    3b28:	9e 01       	movw	r18, r28
    3b2a:	2f 5f       	subi	r18, 0xFF	; 255
    3b2c:	3f 4f       	sbci	r19, 0xFF	; 255
    3b2e:	c8 01       	movw	r24, r16
    3b30:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <_ZNK8SdVolume6fatGetEmPm>
    3b34:	88 23       	and	r24, r24
    3b36:	61 f1       	breq	.+88     	; 0x3b90 <_ZNK8SdVolume9chainSizeEmPm+0x9e>
      return false;
    }
    s += 512UL << clusterSizeShift_;
    3b38:	80 e0       	ldi	r24, 0x00	; 0
    3b3a:	92 e0       	ldi	r25, 0x02	; 2
    3b3c:	a0 e0       	ldi	r26, 0x00	; 0
    3b3e:	b0 e0       	ldi	r27, 0x00	; 0
    3b40:	f8 01       	movw	r30, r16
    3b42:	05 84       	ldd	r0, Z+13	; 0x0d
    3b44:	04 c0       	rjmp	.+8      	; 0x3b4e <_ZNK8SdVolume9chainSizeEmPm+0x5c>
    3b46:	88 0f       	add	r24, r24
    3b48:	99 1f       	adc	r25, r25
    3b4a:	aa 1f       	adc	r26, r26
    3b4c:	bb 1f       	adc	r27, r27
    3b4e:	0a 94       	dec	r0
    3b50:	d2 f7       	brpl	.-12     	; 0x3b46 <_ZNK8SdVolume9chainSizeEmPm+0x54>
    3b52:	88 0e       	add	r8, r24
    3b54:	99 1e       	adc	r9, r25
    3b56:	aa 1e       	adc	r10, r26
    3b58:	bb 1e       	adc	r11, r27
  } while (!isEOC(cluster));
    3b5a:	89 81       	ldd	r24, Y+1	; 0x01
    3b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b5e:	ab 81       	ldd	r26, Y+3	; 0x03
    3b60:	bc 81       	ldd	r27, Y+4	; 0x04
    uint8_t fatPutEOC(uint32_t cluster) {
      return fatPut(cluster, 0x0FFFFFFF);
    }
    uint8_t freeChain(uint32_t cluster);
    uint8_t isEOC(uint32_t cluster) const {
      return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    3b62:	27 89       	ldd	r18, Z+23	; 0x17
    3b64:	20 31       	cpi	r18, 0x10	; 16
    3b66:	29 f4       	brne	.+10     	; 0x3b72 <_ZNK8SdVolume9chainSizeEmPm+0x80>
    3b68:	48 ef       	ldi	r20, 0xF8	; 248
    3b6a:	5f ef       	ldi	r21, 0xFF	; 255
    3b6c:	60 e0       	ldi	r22, 0x00	; 0
    3b6e:	70 e0       	ldi	r23, 0x00	; 0
    3b70:	04 c0       	rjmp	.+8      	; 0x3b7a <_ZNK8SdVolume9chainSizeEmPm+0x88>
    3b72:	48 ef       	ldi	r20, 0xF8	; 248
    3b74:	5f ef       	ldi	r21, 0xFF	; 255
    3b76:	6f ef       	ldi	r22, 0xFF	; 255
    3b78:	7f e0       	ldi	r23, 0x0F	; 15
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    3b7a:	84 17       	cp	r24, r20
    3b7c:	95 07       	cpc	r25, r21
    3b7e:	a6 07       	cpc	r26, r22
    3b80:	b7 07       	cpc	r27, r23
    3b82:	70 f2       	brcs	.-100    	; 0x3b20 <_ZNK8SdVolume9chainSizeEmPm+0x2e>
    if (!fatGet(cluster, &cluster)) {
      return false;
    }
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    3b84:	f7 01       	movw	r30, r14
    3b86:	80 82       	st	Z, r8
    3b88:	91 82       	std	Z+1, r9	; 0x01
    3b8a:	a2 82       	std	Z+2, r10	; 0x02
    3b8c:	b3 82       	std	Z+3, r11	; 0x03
  return true;
    3b8e:	81 e0       	ldi	r24, 0x01	; 1
}
    3b90:	0f 90       	pop	r0
    3b92:	0f 90       	pop	r0
    3b94:	0f 90       	pop	r0
    3b96:	0f 90       	pop	r0
    3b98:	df 91       	pop	r29
    3b9a:	cf 91       	pop	r28
    3b9c:	1f 91       	pop	r17
    3b9e:	0f 91       	pop	r16
    3ba0:	ff 90       	pop	r15
    3ba2:	ef 90       	pop	r14
    3ba4:	bf 90       	pop	r11
    3ba6:	af 90       	pop	r10
    3ba8:	9f 90       	pop	r9
    3baa:	8f 90       	pop	r8
    3bac:	08 95       	ret

00003bae <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    3bae:	4f 92       	push	r4
    3bb0:	5f 92       	push	r5
    3bb2:	6f 92       	push	r6
    3bb4:	7f 92       	push	r7
    3bb6:	8f 92       	push	r8
    3bb8:	9f 92       	push	r9
    3bba:	af 92       	push	r10
    3bbc:	bf 92       	push	r11
    3bbe:	cf 92       	push	r12
    3bc0:	df 92       	push	r13
    3bc2:	ef 92       	push	r14
    3bc4:	ff 92       	push	r15
    3bc6:	0f 93       	push	r16
    3bc8:	1f 93       	push	r17
    3bca:	cf 93       	push	r28
    3bcc:	df 93       	push	r29
    3bce:	00 d0       	rcall	.+0      	; 0x3bd0 <_ZN8SdVolume6fatPutEmm+0x22>
    3bd0:	00 d0       	rcall	.+0      	; 0x3bd2 <_ZN8SdVolume6fatPutEmm+0x24>
    3bd2:	00 d0       	rcall	.+0      	; 0x3bd4 <_ZN8SdVolume6fatPutEmm+0x26>
    3bd4:	cd b7       	in	r28, 0x3d	; 61
    3bd6:	de b7       	in	r29, 0x3e	; 62
  // error if reserved cluster
  if (cluster < 2) {
    3bd8:	42 30       	cpi	r20, 0x02	; 2
    3bda:	51 05       	cpc	r21, r1
    3bdc:	61 05       	cpc	r22, r1
    3bde:	71 05       	cpc	r23, r1
    3be0:	08 f4       	brcc	.+2      	; 0x3be4 <_ZN8SdVolume6fatPutEmm+0x36>
    3be2:	94 c0       	rjmp	.+296    	; 0x3d0c <_ZN8SdVolume6fatPutEmm+0x15e>
    return false;
  }

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) {
    3be4:	dc 01       	movw	r26, r24
    3be6:	19 96       	adiw	r26, 0x09	; 9
    3be8:	cd 90       	ld	r12, X+
    3bea:	dd 90       	ld	r13, X+
    3bec:	ed 90       	ld	r14, X+
    3bee:	fc 90       	ld	r15, X
    3bf0:	1c 97       	sbiw	r26, 0x0c	; 12
    3bf2:	bf ef       	ldi	r27, 0xFF	; 255
    3bf4:	cb 1a       	sub	r12, r27
    3bf6:	db 0a       	sbc	r13, r27
    3bf8:	eb 0a       	sbc	r14, r27
    3bfa:	fb 0a       	sbc	r15, r27
    3bfc:	c4 16       	cp	r12, r20
    3bfe:	d5 06       	cpc	r13, r21
    3c00:	e6 06       	cpc	r14, r22
    3c02:	f7 06       	cpc	r15, r23
    3c04:	08 f4       	brcc	.+2      	; 0x3c08 <_ZN8SdVolume6fatPutEmm+0x5a>
    3c06:	84 c0       	rjmp	.+264    	; 0x3d10 <_ZN8SdVolume6fatPutEmm+0x162>
    return false;
  }

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    3c08:	fc 01       	movw	r30, r24
    3c0a:	43 88       	ldd	r4, Z+19	; 0x13
    3c0c:	54 88       	ldd	r5, Z+20	; 0x14
    3c0e:	65 88       	ldd	r6, Z+21	; 0x15
    3c10:	76 88       	ldd	r7, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3c12:	e7 89       	ldd	r30, Z+23	; 0x17
    3c14:	e0 31       	cpi	r30, 0x10	; 16
    3c16:	29 f4       	brne	.+10     	; 0x3c22 <_ZN8SdVolume6fatPutEmm+0x74>
    3c18:	85 2e       	mov	r8, r21
    3c1a:	96 2e       	mov	r9, r22
    3c1c:	a7 2e       	mov	r10, r23
    3c1e:	bb 24       	eor	r11, r11
    3c20:	0a c0       	rjmp	.+20     	; 0x3c36 <_ZN8SdVolume6fatPutEmm+0x88>
    3c22:	4a 01       	movw	r8, r20
    3c24:	5b 01       	movw	r10, r22
    3c26:	68 94       	set
    3c28:	16 f8       	bld	r1, 6
    3c2a:	b6 94       	lsr	r11
    3c2c:	a7 94       	ror	r10
    3c2e:	97 94       	ror	r9
    3c30:	87 94       	ror	r8
    3c32:	16 94       	lsr	r1
    3c34:	d1 f7       	brne	.-12     	; 0x3c2a <_ZN8SdVolume6fatPutEmm+0x7c>
    3c36:	09 83       	std	Y+1, r16	; 0x01
    3c38:	1a 83       	std	Y+2, r17	; 0x02
    3c3a:	2b 83       	std	Y+3, r18	; 0x03
    3c3c:	3c 83       	std	Y+4, r19	; 0x04
    3c3e:	6a 01       	movw	r12, r20
    3c40:	7b 01       	movw	r14, r22
    3c42:	9e 83       	std	Y+6, r25	; 0x06
    3c44:	8d 83       	std	Y+5, r24	; 0x05
    3c46:	48 0c       	add	r4, r8
    3c48:	59 1c       	adc	r5, r9
    3c4a:	6a 1c       	adc	r6, r10
    3c4c:	7b 1c       	adc	r7, r11

  if (lba != cacheBlockNumber_) {
    3c4e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    3c52:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3c56:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3c5a:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3c5e:	48 16       	cp	r4, r24
    3c60:	59 06       	cpc	r5, r25
    3c62:	6a 06       	cpc	r6, r26
    3c64:	7b 06       	cpc	r7, r27
    3c66:	41 f0       	breq	.+16     	; 0x3c78 <_ZN8SdVolume6fatPutEmm+0xca>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) {
    3c68:	40 e0       	ldi	r20, 0x00	; 0
    3c6a:	c3 01       	movw	r24, r6
    3c6c:	b2 01       	movw	r22, r4
    3c6e:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN8SdVolume13cacheRawBlockEmh>
    3c72:	88 23       	and	r24, r24
    3c74:	09 f4       	brne	.+2      	; 0x3c78 <_ZN8SdVolume6fatPutEmm+0xca>
    3c76:	4f c0       	rjmp	.+158    	; 0x3d16 <_ZN8SdVolume6fatPutEmm+0x168>
      return false;
    }
  }
  // store entry
  if (fatType_ == 16) {
    3c78:	ad 81       	ldd	r26, Y+5	; 0x05
    3c7a:	be 81       	ldd	r27, Y+6	; 0x06
    3c7c:	57 96       	adiw	r26, 0x17	; 23
    3c7e:	8c 91       	ld	r24, X
    3c80:	80 31       	cpi	r24, 0x10	; 16
    3c82:	79 f4       	brne	.+30     	; 0x3ca2 <_ZN8SdVolume6fatPutEmm+0xf4>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    3c84:	b7 01       	movw	r22, r14
    3c86:	a6 01       	movw	r20, r12
    3c88:	55 27       	eor	r21, r21
    3c8a:	66 27       	eor	r22, r22
    3c8c:	77 27       	eor	r23, r23
    3c8e:	44 0f       	add	r20, r20
    3c90:	55 1f       	adc	r21, r21
    3c92:	fa 01       	movw	r30, r20
    3c94:	e4 54       	subi	r30, 0x44	; 68
    3c96:	fd 4f       	sbci	r31, 0xFD	; 253
    3c98:	89 81       	ldd	r24, Y+1	; 0x01
    3c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c9c:	91 83       	std	Z+1, r25	; 0x01
    3c9e:	80 83       	st	Z, r24
    3ca0:	15 c0       	rjmp	.+42     	; 0x3ccc <_ZN8SdVolume6fatPutEmm+0x11e>
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    3ca2:	b7 01       	movw	r22, r14
    3ca4:	a6 01       	movw	r20, r12
    3ca6:	4f 77       	andi	r20, 0x7F	; 127
    3ca8:	55 27       	eor	r21, r21
    3caa:	66 27       	eor	r22, r22
    3cac:	77 27       	eor	r23, r23
    3cae:	44 0f       	add	r20, r20
    3cb0:	55 1f       	adc	r21, r21
    3cb2:	44 0f       	add	r20, r20
    3cb4:	55 1f       	adc	r21, r21
    3cb6:	fa 01       	movw	r30, r20
    3cb8:	e4 54       	subi	r30, 0x44	; 68
    3cba:	fd 4f       	sbci	r31, 0xFD	; 253
    3cbc:	89 81       	ldd	r24, Y+1	; 0x01
    3cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    3cc0:	ab 81       	ldd	r26, Y+3	; 0x03
    3cc2:	bc 81       	ldd	r27, Y+4	; 0x04
    3cc4:	80 83       	st	Z, r24
    3cc6:	91 83       	std	Z+1, r25	; 0x01
    3cc8:	a2 83       	std	Z+2, r26	; 0x02
    3cca:	b3 83       	std	Z+3, r27	; 0x03
    }
    static uint8_t cacheFlush(uint8_t blocking = 1);
    static uint8_t cacheMirrorBlockFlush(uint8_t blocking);
    static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
    static void cacheSetDirty(void) {
      cacheDirty_ |= CACHE_FOR_WRITE;
    3ccc:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <_ZN8SdVolume11cacheDirty_E>
    3cd0:	81 60       	ori	r24, 0x01	; 1
    3cd2:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <_ZN8SdVolume11cacheDirty_E>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) {
    3cd6:	ad 81       	ldd	r26, Y+5	; 0x05
    3cd8:	be 81       	ldd	r27, Y+6	; 0x06
    3cda:	52 96       	adiw	r26, 0x12	; 18
    3cdc:	8c 91       	ld	r24, X
    3cde:	52 97       	sbiw	r26, 0x12	; 18
    3ce0:	82 30       	cpi	r24, 0x02	; 2
    3ce2:	c0 f0       	brcs	.+48     	; 0x3d14 <_ZN8SdVolume6fatPutEmm+0x166>
    cacheMirrorBlock_ = lba + blocksPerFat_;
    3ce4:	15 96       	adiw	r26, 0x05	; 5
    3ce6:	8d 91       	ld	r24, X+
    3ce8:	9d 91       	ld	r25, X+
    3cea:	0d 90       	ld	r0, X+
    3cec:	bc 91       	ld	r27, X
    3cee:	a0 2d       	mov	r26, r0
    3cf0:	48 0e       	add	r4, r24
    3cf2:	59 1e       	adc	r5, r25
    3cf4:	6a 1e       	adc	r6, r26
    3cf6:	7b 1e       	adc	r7, r27
    3cf8:	40 92 b5 02 	sts	0x02B5, r4	; 0x8002b5 <_ZN8SdVolume17cacheMirrorBlock_E>
    3cfc:	50 92 b6 02 	sts	0x02B6, r5	; 0x8002b6 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    3d00:	60 92 b7 02 	sts	0x02B7, r6	; 0x8002b7 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    3d04:	70 92 b8 02 	sts	0x02B8, r7	; 0x8002b8 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  }
  return true;
    3d08:	81 e0       	ldi	r24, 0x01	; 1
    3d0a:	05 c0       	rjmp	.+10     	; 0x3d16 <_ZN8SdVolume6fatPutEmm+0x168>
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) {
    return false;
    3d0c:	80 e0       	ldi	r24, 0x00	; 0
    3d0e:	03 c0       	rjmp	.+6      	; 0x3d16 <_ZN8SdVolume6fatPutEmm+0x168>
  }

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) {
    return false;
    3d10:	80 e0       	ldi	r24, 0x00	; 0
    3d12:	01 c0       	rjmp	.+2      	; 0x3d16 <_ZN8SdVolume6fatPutEmm+0x168>

  // mirror second FAT
  if (fatCount_ > 1) {
    cacheMirrorBlock_ = lba + blocksPerFat_;
  }
  return true;
    3d14:	81 e0       	ldi	r24, 0x01	; 1
}
    3d16:	26 96       	adiw	r28, 0x06	; 6
    3d18:	0f b6       	in	r0, 0x3f	; 63
    3d1a:	f8 94       	cli
    3d1c:	de bf       	out	0x3e, r29	; 62
    3d1e:	0f be       	out	0x3f, r0	; 63
    3d20:	cd bf       	out	0x3d, r28	; 61
    3d22:	df 91       	pop	r29
    3d24:	cf 91       	pop	r28
    3d26:	1f 91       	pop	r17
    3d28:	0f 91       	pop	r16
    3d2a:	ff 90       	pop	r15
    3d2c:	ef 90       	pop	r14
    3d2e:	df 90       	pop	r13
    3d30:	cf 90       	pop	r12
    3d32:	bf 90       	pop	r11
    3d34:	af 90       	pop	r10
    3d36:	9f 90       	pop	r9
    3d38:	8f 90       	pop	r8
    3d3a:	7f 90       	pop	r7
    3d3c:	6f 90       	pop	r6
    3d3e:	5f 90       	pop	r5
    3d40:	4f 90       	pop	r4
    3d42:	08 95       	ret

00003d44 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    3d44:	2f 92       	push	r2
    3d46:	3f 92       	push	r3
    3d48:	4f 92       	push	r4
    3d4a:	5f 92       	push	r5
    3d4c:	6f 92       	push	r6
    3d4e:	7f 92       	push	r7
    3d50:	8f 92       	push	r8
    3d52:	9f 92       	push	r9
    3d54:	af 92       	push	r10
    3d56:	bf 92       	push	r11
    3d58:	cf 92       	push	r12
    3d5a:	df 92       	push	r13
    3d5c:	ef 92       	push	r14
    3d5e:	ff 92       	push	r15
    3d60:	0f 93       	push	r16
    3d62:	1f 93       	push	r17
    3d64:	cf 93       	push	r28
    3d66:	df 93       	push	r29
    3d68:	cd b7       	in	r28, 0x3d	; 61
    3d6a:	de b7       	in	r29, 0x3e	; 62
    3d6c:	2f 97       	sbiw	r28, 0x0f	; 15
    3d6e:	0f b6       	in	r0, 0x3f	; 63
    3d70:	f8 94       	cli
    3d72:	de bf       	out	0x3e, r29	; 62
    3d74:	0f be       	out	0x3f, r0	; 63
    3d76:	cd bf       	out	0x3d, r28	; 61
    3d78:	1c 01       	movw	r2, r24
    3d7a:	49 87       	std	Y+9, r20	; 0x09
    3d7c:	5a 87       	std	Y+10, r21	; 0x0a
    3d7e:	6b 87       	std	Y+11, r22	; 0x0b
    3d80:	7c 87       	std	Y+12, r23	; 0x0c
    3d82:	3e 87       	std	Y+14, r19	; 0x0e
    3d84:	2d 87       	std	Y+13, r18	; 0x0d

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    3d86:	d9 01       	movw	r26, r18
    3d88:	4d 90       	ld	r4, X+
    3d8a:	5d 90       	ld	r5, X+
    3d8c:	6d 90       	ld	r6, X+
    3d8e:	7c 90       	ld	r7, X
    3d90:	41 14       	cp	r4, r1
    3d92:	51 04       	cpc	r5, r1
    3d94:	61 04       	cpc	r6, r1
    3d96:	71 04       	cpc	r7, r1
    3d98:	39 f0       	breq	.+14     	; 0x3da8 <_ZN8SdVolume15allocContiguousEmPm+0x64>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    3d9a:	bf ef       	ldi	r27, 0xFF	; 255
    3d9c:	4b 1a       	sub	r4, r27
    3d9e:	5b 0a       	sbc	r5, r27
    3da0:	6b 0a       	sbc	r6, r27
    3da2:	7b 0a       	sbc	r7, r27

    // don't save new start location
    setStart = false;
    3da4:	1f 86       	std	Y+15, r1	; 0x0f
    3da6:	11 c0       	rjmp	.+34     	; 0x3dca <_ZN8SdVolume15allocContiguousEmPm+0x86>
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    3da8:	fc 01       	movw	r30, r24
    3daa:	40 80       	ld	r4, Z
    3dac:	51 80       	ldd	r5, Z+1	; 0x01
    3dae:	62 80       	ldd	r6, Z+2	; 0x02
    3db0:	73 80       	ldd	r7, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    3db2:	81 e0       	ldi	r24, 0x01	; 1
    3db4:	29 85       	ldd	r18, Y+9	; 0x09
    3db6:	3a 85       	ldd	r19, Y+10	; 0x0a
    3db8:	4b 85       	ldd	r20, Y+11	; 0x0b
    3dba:	5c 85       	ldd	r21, Y+12	; 0x0c
    3dbc:	21 30       	cpi	r18, 0x01	; 1
    3dbe:	31 05       	cpc	r19, r1
    3dc0:	41 05       	cpc	r20, r1
    3dc2:	51 05       	cpc	r21, r1
    3dc4:	09 f0       	breq	.+2      	; 0x3dc8 <_ZN8SdVolume15allocContiguousEmPm+0x84>
    3dc6:	80 e0       	ldi	r24, 0x00	; 0
    3dc8:	8f 87       	std	Y+15, r24	; 0x0f
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    3dca:	f1 01       	movw	r30, r2
    3dcc:	81 85       	ldd	r24, Z+9	; 0x09
    3dce:	92 85       	ldd	r25, Z+10	; 0x0a
    3dd0:	a3 85       	ldd	r26, Z+11	; 0x0b
    3dd2:	b4 85       	ldd	r27, Z+12	; 0x0c
    3dd4:	9c 01       	movw	r18, r24
    3dd6:	ad 01       	movw	r20, r26
    3dd8:	2f 5f       	subi	r18, 0xFF	; 255
    3dda:	3f 4f       	sbci	r19, 0xFF	; 255
    3ddc:	4f 4f       	sbci	r20, 0xFF	; 255
    3dde:	5f 4f       	sbci	r21, 0xFF	; 255
    3de0:	2d 83       	std	Y+5, r18	; 0x05
    3de2:	3e 83       	std	Y+6, r19	; 0x06
    3de4:	4f 83       	std	Y+7, r20	; 0x07
    3de6:	58 87       	std	Y+8, r21	; 0x08

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    3de8:	73 01       	movw	r14, r6
    3dea:	62 01       	movw	r12, r4

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    3dec:	81 2c       	mov	r8, r1
    3dee:	91 2c       	mov	r9, r1
    3df0:	54 01       	movw	r10, r8
    // can't find space checked all clusters
    if (n >= clusterCount_) {
    3df2:	f1 01       	movw	r30, r2
    3df4:	81 85       	ldd	r24, Z+9	; 0x09
    3df6:	92 85       	ldd	r25, Z+10	; 0x0a
    3df8:	a3 85       	ldd	r26, Z+11	; 0x0b
    3dfa:	b4 85       	ldd	r27, Z+12	; 0x0c
    3dfc:	88 16       	cp	r8, r24
    3dfe:	99 06       	cpc	r9, r25
    3e00:	aa 06       	cpc	r10, r26
    3e02:	bb 06       	cpc	r11, r27
    3e04:	08 f0       	brcs	.+2      	; 0x3e08 <_ZN8SdVolume15allocContiguousEmPm+0xc4>
    3e06:	4a c0       	rjmp	.+148    	; 0x3e9c <_ZN8SdVolume15allocContiguousEmPm+0x158>
      return false;
    }

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    3e08:	2d 81       	ldd	r18, Y+5	; 0x05
    3e0a:	3e 81       	ldd	r19, Y+6	; 0x06
    3e0c:	4f 81       	ldd	r20, Y+7	; 0x07
    3e0e:	58 85       	ldd	r21, Y+8	; 0x08
    3e10:	2c 15       	cp	r18, r12
    3e12:	3d 05       	cpc	r19, r13
    3e14:	4e 05       	cpc	r20, r14
    3e16:	5f 05       	cpc	r21, r15
    3e18:	50 f4       	brcc	.+20     	; 0x3e2e <_ZN8SdVolume15allocContiguousEmPm+0xea>
      bgnCluster = endCluster = 2;
    3e1a:	c1 2c       	mov	r12, r1
    3e1c:	d1 2c       	mov	r13, r1
    3e1e:	76 01       	movw	r14, r12
    3e20:	68 94       	set
    3e22:	c1 f8       	bld	r12, 1
    3e24:	41 2c       	mov	r4, r1
    3e26:	51 2c       	mov	r5, r1
    3e28:	32 01       	movw	r6, r4
    3e2a:	68 94       	set
    3e2c:	41 f8       	bld	r4, 1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) {
    3e2e:	9e 01       	movw	r18, r28
    3e30:	2f 5f       	subi	r18, 0xFF	; 255
    3e32:	3f 4f       	sbci	r19, 0xFF	; 255
    3e34:	b7 01       	movw	r22, r14
    3e36:	a6 01       	movw	r20, r12
    3e38:	c1 01       	movw	r24, r2
    3e3a:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <_ZNK8SdVolume6fatGetEmPm>
    3e3e:	88 23       	and	r24, r24
    3e40:	69 f1       	breq	.+90     	; 0x3e9c <_ZN8SdVolume15allocContiguousEmPm+0x158>
      return false;
    }

    if (f != 0) {
    3e42:	89 81       	ldd	r24, Y+1	; 0x01
    3e44:	9a 81       	ldd	r25, Y+2	; 0x02
    3e46:	ab 81       	ldd	r26, Y+3	; 0x03
    3e48:	bc 81       	ldd	r27, Y+4	; 0x04
    3e4a:	89 2b       	or	r24, r25
    3e4c:	8a 2b       	or	r24, r26
    3e4e:	8b 2b       	or	r24, r27
    3e50:	41 f0       	breq	.+16     	; 0x3e62 <_ZN8SdVolume15allocContiguousEmPm+0x11e>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    3e52:	26 01       	movw	r4, r12
    3e54:	37 01       	movw	r6, r14
    3e56:	3f ef       	ldi	r19, 0xFF	; 255
    3e58:	43 1a       	sub	r4, r19
    3e5a:	53 0a       	sbc	r5, r19
    3e5c:	63 0a       	sbc	r6, r19
    3e5e:	73 0a       	sbc	r7, r19
    3e60:	12 c0       	rjmp	.+36     	; 0x3e86 <_ZN8SdVolume15allocContiguousEmPm+0x142>
    } else if ((endCluster - bgnCluster + 1) == count) {
    3e62:	d7 01       	movw	r26, r14
    3e64:	c6 01       	movw	r24, r12
    3e66:	84 19       	sub	r24, r4
    3e68:	95 09       	sbc	r25, r5
    3e6a:	a6 09       	sbc	r26, r6
    3e6c:	b7 09       	sbc	r27, r7
    3e6e:	01 96       	adiw	r24, 0x01	; 1
    3e70:	a1 1d       	adc	r26, r1
    3e72:	b1 1d       	adc	r27, r1
    3e74:	29 85       	ldd	r18, Y+9	; 0x09
    3e76:	3a 85       	ldd	r19, Y+10	; 0x0a
    3e78:	4b 85       	ldd	r20, Y+11	; 0x0b
    3e7a:	5c 85       	ldd	r21, Y+12	; 0x0c
    3e7c:	28 17       	cp	r18, r24
    3e7e:	39 07       	cpc	r19, r25
    3e80:	4a 07       	cpc	r20, r26
    3e82:	5b 07       	cpc	r21, r27
    3e84:	69 f0       	breq	.+26     	; 0x3ea0 <_ZN8SdVolume15allocContiguousEmPm+0x15c>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    3e86:	3f ef       	ldi	r19, 0xFF	; 255
    3e88:	83 1a       	sub	r8, r19
    3e8a:	93 0a       	sbc	r9, r19
    3e8c:	a3 0a       	sbc	r10, r19
    3e8e:	b3 0a       	sbc	r11, r19
    3e90:	4f ef       	ldi	r20, 0xFF	; 255
    3e92:	c4 1a       	sub	r12, r20
    3e94:	d4 0a       	sbc	r13, r20
    3e96:	e4 0a       	sbc	r14, r20
    3e98:	f4 0a       	sbc	r15, r20
    3e9a:	ab cf       	rjmp	.-170    	; 0x3df2 <_ZN8SdVolume15allocContiguousEmPm+0xae>
    // can't find space checked all clusters
    if (n >= clusterCount_) {
      return false;
    3e9c:	80 e0       	ldi	r24, 0x00	; 0
    3e9e:	4d c0       	rjmp	.+154    	; 0x3f3a <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
    static uint8_t cacheZeroBlock(uint32_t blockNumber);
    uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
    uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
    uint8_t fatPut(uint32_t cluster, uint32_t value);
    uint8_t fatPutEOC(uint32_t cluster) {
      return fatPut(cluster, 0x0FFFFFFF);
    3ea0:	0f ef       	ldi	r16, 0xFF	; 255
    3ea2:	1f ef       	ldi	r17, 0xFF	; 255
    3ea4:	2f ef       	ldi	r18, 0xFF	; 255
    3ea6:	3f e0       	ldi	r19, 0x0F	; 15
    3ea8:	b7 01       	movw	r22, r14
    3eaa:	a6 01       	movw	r20, r12
    3eac:	c1 01       	movw	r24, r2
    3eae:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) {
    3eb2:	88 23       	and	r24, r24
    3eb4:	09 f4       	brne	.+2      	; 0x3eb8 <_ZN8SdVolume15allocContiguousEmPm+0x174>
    3eb6:	41 c0       	rjmp	.+130    	; 0x3f3a <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
    return false;
  }

  // link clusters
  while (endCluster > bgnCluster) {
    3eb8:	4c 14       	cp	r4, r12
    3eba:	5d 04       	cpc	r5, r13
    3ebc:	6e 04       	cpc	r6, r14
    3ebe:	7f 04       	cpc	r7, r15
    3ec0:	98 f4       	brcc	.+38     	; 0x3ee8 <_ZN8SdVolume15allocContiguousEmPm+0x1a4>
    if (!fatPut(endCluster - 1, endCluster)) {
    3ec2:	46 01       	movw	r8, r12
    3ec4:	57 01       	movw	r10, r14
    3ec6:	51 e0       	ldi	r21, 0x01	; 1
    3ec8:	85 1a       	sub	r8, r21
    3eca:	91 08       	sbc	r9, r1
    3ecc:	a1 08       	sbc	r10, r1
    3ece:	b1 08       	sbc	r11, r1
    3ed0:	97 01       	movw	r18, r14
    3ed2:	86 01       	movw	r16, r12
    3ed4:	b5 01       	movw	r22, r10
    3ed6:	a4 01       	movw	r20, r8
    3ed8:	c1 01       	movw	r24, r2
    3eda:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <_ZN8SdVolume6fatPutEmm>
    3ede:	88 23       	and	r24, r24
    3ee0:	61 f1       	breq	.+88     	; 0x3f3a <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
      return false;
    }
    endCluster--;
    3ee2:	75 01       	movw	r14, r10
    3ee4:	64 01       	movw	r12, r8
    3ee6:	e8 cf       	rjmp	.-48     	; 0x3eb8 <_ZN8SdVolume15allocContiguousEmPm+0x174>
  }
  if (*curCluster != 0) {
    3ee8:	ad 85       	ldd	r26, Y+13	; 0x0d
    3eea:	be 85       	ldd	r27, Y+14	; 0x0e
    3eec:	4d 91       	ld	r20, X+
    3eee:	5d 91       	ld	r21, X+
    3ef0:	6d 91       	ld	r22, X+
    3ef2:	7c 91       	ld	r23, X
    3ef4:	41 15       	cp	r20, r1
    3ef6:	51 05       	cpc	r21, r1
    3ef8:	61 05       	cpc	r22, r1
    3efa:	71 05       	cpc	r23, r1
    3efc:	39 f0       	breq	.+14     	; 0x3f0c <_ZN8SdVolume15allocContiguousEmPm+0x1c8>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) {
    3efe:	93 01       	movw	r18, r6
    3f00:	82 01       	movw	r16, r4
    3f02:	c1 01       	movw	r24, r2
    3f04:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <_ZN8SdVolume6fatPutEmm>
    3f08:	88 23       	and	r24, r24
    3f0a:	b9 f0       	breq	.+46     	; 0x3f3a <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
      return false;
    }
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    3f0c:	ed 85       	ldd	r30, Y+13	; 0x0d
    3f0e:	fe 85       	ldd	r31, Y+14	; 0x0e
    3f10:	40 82       	st	Z, r4
    3f12:	51 82       	std	Z+1, r5	; 0x01
    3f14:	62 82       	std	Z+2, r6	; 0x02
    3f16:	73 82       	std	Z+3, r7	; 0x03

  // remember possible next free cluster
  if (setStart) {
    3f18:	ff 85       	ldd	r31, Y+15	; 0x0f
    3f1a:	ff 23       	and	r31, r31
    3f1c:	69 f0       	breq	.+26     	; 0x3f38 <_ZN8SdVolume15allocContiguousEmPm+0x1f4>
    allocSearchStart_ = bgnCluster + 1;
    3f1e:	2f ef       	ldi	r18, 0xFF	; 255
    3f20:	42 1a       	sub	r4, r18
    3f22:	52 0a       	sbc	r5, r18
    3f24:	62 0a       	sbc	r6, r18
    3f26:	72 0a       	sbc	r7, r18
    3f28:	d1 01       	movw	r26, r2
    3f2a:	4d 92       	st	X+, r4
    3f2c:	5d 92       	st	X+, r5
    3f2e:	6d 92       	st	X+, r6
    3f30:	7c 92       	st	X, r7
    3f32:	13 97       	sbiw	r26, 0x03	; 3
  }

  return true;
    3f34:	81 e0       	ldi	r24, 0x01	; 1
    3f36:	01 c0       	rjmp	.+2      	; 0x3f3a <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
    3f38:	81 e0       	ldi	r24, 0x01	; 1
}
    3f3a:	2f 96       	adiw	r28, 0x0f	; 15
    3f3c:	0f b6       	in	r0, 0x3f	; 63
    3f3e:	f8 94       	cli
    3f40:	de bf       	out	0x3e, r29	; 62
    3f42:	0f be       	out	0x3f, r0	; 63
    3f44:	cd bf       	out	0x3d, r28	; 61
    3f46:	df 91       	pop	r29
    3f48:	cf 91       	pop	r28
    3f4a:	1f 91       	pop	r17
    3f4c:	0f 91       	pop	r16
    3f4e:	ff 90       	pop	r15
    3f50:	ef 90       	pop	r14
    3f52:	df 90       	pop	r13
    3f54:	cf 90       	pop	r12
    3f56:	bf 90       	pop	r11
    3f58:	af 90       	pop	r10
    3f5a:	9f 90       	pop	r9
    3f5c:	8f 90       	pop	r8
    3f5e:	7f 90       	pop	r7
    3f60:	6f 90       	pop	r6
    3f62:	5f 90       	pop	r5
    3f64:	4f 90       	pop	r4
    3f66:	3f 90       	pop	r3
    3f68:	2f 90       	pop	r2
    3f6a:	08 95       	ret

00003f6c <_ZN8SdVolume9freeChainEm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    3f6c:	af 92       	push	r10
    3f6e:	bf 92       	push	r11
    3f70:	cf 92       	push	r12
    3f72:	df 92       	push	r13
    3f74:	ef 92       	push	r14
    3f76:	ff 92       	push	r15
    3f78:	0f 93       	push	r16
    3f7a:	1f 93       	push	r17
    3f7c:	cf 93       	push	r28
    3f7e:	df 93       	push	r29
    3f80:	00 d0       	rcall	.+0      	; 0x3f82 <_ZN8SdVolume9freeChainEm+0x16>
    3f82:	00 d0       	rcall	.+0      	; 0x3f84 <_ZN8SdVolume9freeChainEm+0x18>
    3f84:	cd b7       	in	r28, 0x3d	; 61
    3f86:	de b7       	in	r29, 0x3e	; 62
    3f88:	5c 01       	movw	r10, r24
    3f8a:	6a 01       	movw	r12, r20
    3f8c:	7b 01       	movw	r14, r22
  // clear free cluster location
  allocSearchStart_ = 2;
    3f8e:	82 e0       	ldi	r24, 0x02	; 2
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	a0 e0       	ldi	r26, 0x00	; 0
    3f94:	b0 e0       	ldi	r27, 0x00	; 0
    3f96:	f5 01       	movw	r30, r10
    3f98:	80 83       	st	Z, r24
    3f9a:	91 83       	std	Z+1, r25	; 0x01
    3f9c:	a2 83       	std	Z+2, r26	; 0x02
    3f9e:	b3 83       	std	Z+3, r27	; 0x03

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) {
    3fa0:	9e 01       	movw	r18, r28
    3fa2:	2f 5f       	subi	r18, 0xFF	; 255
    3fa4:	3f 4f       	sbci	r19, 0xFF	; 255
    3fa6:	b7 01       	movw	r22, r14
    3fa8:	a6 01       	movw	r20, r12
    3faa:	c5 01       	movw	r24, r10
    3fac:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <_ZNK8SdVolume6fatGetEmPm>
    3fb0:	88 23       	and	r24, r24
    3fb2:	11 f1       	breq	.+68     	; 0x3ff8 <_ZN8SdVolume9freeChainEm+0x8c>
      return false;
    }

    // free cluster
    if (!fatPut(cluster, 0)) {
    3fb4:	00 e0       	ldi	r16, 0x00	; 0
    3fb6:	10 e0       	ldi	r17, 0x00	; 0
    3fb8:	98 01       	movw	r18, r16
    3fba:	b7 01       	movw	r22, r14
    3fbc:	a6 01       	movw	r20, r12
    3fbe:	c5 01       	movw	r24, r10
    3fc0:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <_ZN8SdVolume6fatPutEmm>
    3fc4:	88 23       	and	r24, r24
    3fc6:	c1 f0       	breq	.+48     	; 0x3ff8 <_ZN8SdVolume9freeChainEm+0x8c>
      return false;
    }

    cluster = next;
    3fc8:	c9 80       	ldd	r12, Y+1	; 0x01
    3fca:	da 80       	ldd	r13, Y+2	; 0x02
    3fcc:	eb 80       	ldd	r14, Y+3	; 0x03
    3fce:	fc 80       	ldd	r15, Y+4	; 0x04
    }
    uint8_t freeChain(uint32_t cluster);
    uint8_t isEOC(uint32_t cluster) const {
      return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    3fd0:	f5 01       	movw	r30, r10
    3fd2:	87 89       	ldd	r24, Z+23	; 0x17
    3fd4:	80 31       	cpi	r24, 0x10	; 16
    3fd6:	29 f4       	brne	.+10     	; 0x3fe2 <_ZN8SdVolume9freeChainEm+0x76>
    3fd8:	88 ef       	ldi	r24, 0xF8	; 248
    3fda:	9f ef       	ldi	r25, 0xFF	; 255
    3fdc:	a0 e0       	ldi	r26, 0x00	; 0
    3fde:	b0 e0       	ldi	r27, 0x00	; 0
    3fe0:	04 c0       	rjmp	.+8      	; 0x3fea <_ZN8SdVolume9freeChainEm+0x7e>
    3fe2:	88 ef       	ldi	r24, 0xF8	; 248
    3fe4:	9f ef       	ldi	r25, 0xFF	; 255
    3fe6:	af ef       	ldi	r26, 0xFF	; 255
    3fe8:	bf e0       	ldi	r27, 0x0F	; 15
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    3fea:	c8 16       	cp	r12, r24
    3fec:	d9 06       	cpc	r13, r25
    3fee:	ea 06       	cpc	r14, r26
    3ff0:	fb 06       	cpc	r15, r27
    3ff2:	b0 f2       	brcs	.-84     	; 0x3fa0 <_ZN8SdVolume9freeChainEm+0x34>
    }

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    3ff4:	81 e0       	ldi	r24, 0x01	; 1
    3ff6:	01 c0       	rjmp	.+2      	; 0x3ffa <_ZN8SdVolume9freeChainEm+0x8e>
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) {
      return false;
    3ff8:	80 e0       	ldi	r24, 0x00	; 0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    3ffa:	0f 90       	pop	r0
    3ffc:	0f 90       	pop	r0
    3ffe:	0f 90       	pop	r0
    4000:	0f 90       	pop	r0
    4002:	df 91       	pop	r29
    4004:	cf 91       	pop	r28
    4006:	1f 91       	pop	r17
    4008:	0f 91       	pop	r16
    400a:	ff 90       	pop	r15
    400c:	ef 90       	pop	r14
    400e:	df 90       	pop	r13
    4010:	cf 90       	pop	r12
    4012:	bf 90       	pop	r11
    4014:	af 90       	pop	r10
    4016:	08 95       	ret

00004018 <_ZN8SdVolume4initEP7Sd2Cardh>:
   \return The value one, true, is returned for success and
   the value zero, false, is returned for failure.  Reasons for
   failure include not finding a valid partition, not finding a valid
   FAT file system in the specified partition or an I/O error.
*/
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    4018:	4f 92       	push	r4
    401a:	5f 92       	push	r5
    401c:	6f 92       	push	r6
    401e:	7f 92       	push	r7
    4020:	8f 92       	push	r8
    4022:	9f 92       	push	r9
    4024:	af 92       	push	r10
    4026:	bf 92       	push	r11
    4028:	cf 92       	push	r12
    402a:	df 92       	push	r13
    402c:	ef 92       	push	r14
    402e:	ff 92       	push	r15
    4030:	0f 93       	push	r16
    4032:	1f 93       	push	r17
    4034:	cf 93       	push	r28
    4036:	df 93       	push	r29
    4038:	8c 01       	movw	r16, r24
    403a:	c4 2f       	mov	r28, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    403c:	70 93 bb 02 	sts	0x02BB, r23	; 0x8002bb <_ZN8SdVolume7sdCard_E+0x1>
    4040:	60 93 ba 02 	sts	0x02BA, r22	; 0x8002ba <_ZN8SdVolume7sdCard_E>
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    4044:	44 23       	and	r20, r20
    4046:	09 f4       	brne	.+2      	; 0x404a <_ZN8SdVolume4initEP7Sd2Cardh+0x32>
    4048:	44 c0       	rjmp	.+136    	; 0x40d2 <_ZN8SdVolume4initEP7Sd2Cardh+0xba>
    if (part > 4) {
    404a:	45 30       	cpi	r20, 0x05	; 5
    404c:	08 f0       	brcs	.+2      	; 0x4050 <_ZN8SdVolume4initEP7Sd2Cardh+0x38>
    404e:	29 c1       	rjmp	.+594    	; 0x42a2 <_ZN8SdVolume4initEP7Sd2Cardh+0x28a>
      return false;
    }
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    4050:	40 e0       	ldi	r20, 0x00	; 0
    4052:	60 e0       	ldi	r22, 0x00	; 0
    4054:	70 e0       	ldi	r23, 0x00	; 0
    4056:	cb 01       	movw	r24, r22
    4058:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN8SdVolume13cacheRawBlockEmh>
    405c:	88 23       	and	r24, r24
    405e:	09 f4       	brne	.+2      	; 0x4062 <_ZN8SdVolume4initEP7Sd2Cardh+0x4a>
    4060:	2b c1       	rjmp	.+598    	; 0x42b8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
      return false;
    }
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    4062:	4c 2f       	mov	r20, r28
    4064:	50 e0       	ldi	r21, 0x00	; 0
    4066:	41 50       	subi	r20, 0x01	; 1
    4068:	51 09       	sbc	r21, r1
    if ((p->boot & 0X7F) != 0  ||
    406a:	fa 01       	movw	r30, r20
    406c:	e2 95       	swap	r30
    406e:	f2 95       	swap	r31
    4070:	f0 7f       	andi	r31, 0xF0	; 240
    4072:	fe 27       	eor	r31, r30
    4074:	e0 7f       	andi	r30, 0xF0	; 240
    4076:	fe 27       	eor	r31, r30
    4078:	e6 58       	subi	r30, 0x86	; 134
    407a:	fb 4f       	sbci	r31, 0xFB	; 251
    407c:	80 81       	ld	r24, Z
    407e:	8f 77       	andi	r24, 0x7F	; 127
    4080:	09 f0       	breq	.+2      	; 0x4084 <_ZN8SdVolume4initEP7Sd2Cardh+0x6c>
    4082:	11 c1       	rjmp	.+546    	; 0x42a6 <_ZN8SdVolume4initEP7Sd2Cardh+0x28e>
        p->totalSectors < 100 ||
    4084:	fa 01       	movw	r30, r20
    4086:	e2 95       	swap	r30
    4088:	f2 95       	swap	r31
    408a:	f0 7f       	andi	r31, 0xF0	; 240
    408c:	fe 27       	eor	r31, r30
    408e:	e0 7f       	andi	r30, 0xF0	; 240
    4090:	fe 27       	eor	r31, r30
    4092:	ea 57       	subi	r30, 0x7A	; 122
    4094:	fb 4f       	sbci	r31, 0xFB	; 251
    4096:	c0 80       	ld	r12, Z
    4098:	d1 80       	ldd	r13, Z+1	; 0x01
    409a:	e2 80       	ldd	r14, Z+2	; 0x02
    409c:	f3 80       	ldd	r15, Z+3	; 0x03
    }
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
      return false;
    }
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0  ||
    409e:	24 e6       	ldi	r18, 0x64	; 100
    40a0:	c2 16       	cp	r12, r18
    40a2:	d1 04       	cpc	r13, r1
    40a4:	e1 04       	cpc	r14, r1
    40a6:	f1 04       	cpc	r15, r1
    40a8:	08 f4       	brcc	.+2      	; 0x40ac <_ZN8SdVolume4initEP7Sd2Cardh+0x94>
    40aa:	06 c1       	rjmp	.+524    	; 0x42b8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
        p->totalSectors < 100 ||
        p->firstSector == 0) {
    40ac:	42 95       	swap	r20
    40ae:	52 95       	swap	r21
    40b0:	50 7f       	andi	r21, 0xF0	; 240
    40b2:	54 27       	eor	r21, r20
    40b4:	40 7f       	andi	r20, 0xF0	; 240
    40b6:	54 27       	eor	r21, r20
    40b8:	fa 01       	movw	r30, r20
    40ba:	ee 57       	subi	r30, 0x7E	; 126
    40bc:	fb 4f       	sbci	r31, 0xFB	; 251
    40be:	c0 80       	ld	r12, Z
    40c0:	d1 80       	ldd	r13, Z+1	; 0x01
    40c2:	e2 80       	ldd	r14, Z+2	; 0x02
    40c4:	f3 80       	ldd	r15, Z+3	; 0x03
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
      return false;
    }
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0  ||
        p->totalSectors < 100 ||
    40c6:	c1 14       	cp	r12, r1
    40c8:	d1 04       	cpc	r13, r1
    40ca:	e1 04       	cpc	r14, r1
    40cc:	f1 04       	cpc	r15, r1
    40ce:	21 f4       	brne	.+8      	; 0x40d8 <_ZN8SdVolume4initEP7Sd2Cardh+0xc0>
    40d0:	f3 c0       	rjmp	.+486    	; 0x42b8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
   the value zero, false, is returned for failure.  Reasons for
   failure include not finding a valid partition, not finding a valid
   FAT file system in the specified partition or an I/O error.
*/
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    40d2:	c1 2c       	mov	r12, r1
    40d4:	d1 2c       	mov	r13, r1
    40d6:	76 01       	movw	r14, r12
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    40d8:	40 e0       	ldi	r20, 0x00	; 0
    40da:	c7 01       	movw	r24, r14
    40dc:	b6 01       	movw	r22, r12
    40de:	0e 94 8a 1c 	call	0x3914	; 0x3914 <_ZN8SdVolume13cacheRawBlockEmh>
    40e2:	88 23       	and	r24, r24
    40e4:	09 f4       	brne	.+2      	; 0x40e8 <_ZN8SdVolume4initEP7Sd2Cardh+0xd0>
    40e6:	e8 c0       	rjmp	.+464    	; 0x42b8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    40e8:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <_ZN8SdVolume12cacheBuffer_E+0xb>
    40ec:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <_ZN8SdVolume12cacheBuffer_E+0xc>
    40f0:	81 15       	cp	r24, r1
    40f2:	92 40       	sbci	r25, 0x02	; 2
    40f4:	09 f0       	breq	.+2      	; 0x40f8 <_ZN8SdVolume4initEP7Sd2Cardh+0xe0>
    40f6:	d9 c0       	rjmp	.+434    	; 0x42aa <_ZN8SdVolume4initEP7Sd2Cardh+0x292>
      bpb->fatCount == 0 ||
    40f8:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <_ZN8SdVolume12cacheBuffer_E+0x10>
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    40fc:	88 23       	and	r24, r24
    40fe:	09 f4       	brne	.+2      	; 0x4102 <_ZN8SdVolume4initEP7Sd2Cardh+0xea>
    4100:	db c0       	rjmp	.+438    	; 0x42b8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
      bpb->fatCount == 0 ||
      bpb->reservedSectorCount == 0 ||
    4102:	20 91 ca 02 	lds	r18, 0x02CA	; 0x8002ca <_ZN8SdVolume12cacheBuffer_E+0xe>
    4106:	30 91 cb 02 	lds	r19, 0x02CB	; 0x8002cb <_ZN8SdVolume12cacheBuffer_E+0xf>
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
      bpb->fatCount == 0 ||
    410a:	23 2b       	or	r18, r19
    410c:	09 f4       	brne	.+2      	; 0x4110 <_ZN8SdVolume4initEP7Sd2Cardh+0xf8>
    410e:	cf c0       	rjmp	.+414    	; 0x42ae <_ZN8SdVolume4initEP7Sd2Cardh+0x296>
      bpb->reservedSectorCount == 0 ||
      bpb->sectorsPerCluster == 0) {
    4110:	60 91 c9 02 	lds	r22, 0x02C9	; 0x8002c9 <_ZN8SdVolume12cacheBuffer_E+0xd>
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
      bpb->fatCount == 0 ||
      bpb->reservedSectorCount == 0 ||
    4114:	66 23       	and	r22, r22
    4116:	09 f4       	brne	.+2      	; 0x411a <_ZN8SdVolume4initEP7Sd2Cardh+0x102>
    4118:	cc c0       	rjmp	.+408    	; 0x42b2 <_ZN8SdVolume4initEP7Sd2Cardh+0x29a>
      bpb->sectorsPerCluster == 0) {
    // not valid FAT volume
    return false;
  }
  fatCount_ = bpb->fatCount;
    411a:	e8 01       	movw	r28, r16
    411c:	8a 8b       	std	Y+18, r24	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    411e:	6c 83       	std	Y+4, r22	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    4120:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    4122:	f8 01       	movw	r30, r16
    4124:	85 85       	ldd	r24, Z+13	; 0x0d
    4126:	e8 2f       	mov	r30, r24
    4128:	21 e0       	ldi	r18, 0x01	; 1
    412a:	30 e0       	ldi	r19, 0x00	; 0
    412c:	08 2e       	mov	r0, r24
    412e:	02 c0       	rjmp	.+4      	; 0x4134 <_ZN8SdVolume4initEP7Sd2Cardh+0x11c>
    4130:	22 0f       	add	r18, r18
    4132:	33 1f       	adc	r19, r19
    4134:	0a 94       	dec	r0
    4136:	e2 f7       	brpl	.-8      	; 0x4130 <_ZN8SdVolume4initEP7Sd2Cardh+0x118>
    4138:	46 2f       	mov	r20, r22
    413a:	50 e0       	ldi	r21, 0x00	; 0
    413c:	42 17       	cp	r20, r18
    413e:	53 07       	cpc	r21, r19
    4140:	41 f0       	breq	.+16     	; 0x4152 <_ZN8SdVolume4initEP7Sd2Cardh+0x13a>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) {
    4142:	91 e0       	ldi	r25, 0x01	; 1
    4144:	98 0f       	add	r25, r24
    4146:	d8 01       	movw	r26, r16
    4148:	1d 96       	adiw	r26, 0x0d	; 13
    414a:	9c 93       	st	X, r25
    414c:	88 30       	cpi	r24, 0x08	; 8
    414e:	48 f3       	brcs	.-46     	; 0x4122 <_ZN8SdVolume4initEP7Sd2Cardh+0x10a>
    4150:	b2 c0       	rjmp	.+356    	; 0x42b6 <_ZN8SdVolume4initEP7Sd2Cardh+0x29e>
      return false;
    }
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    4152:	20 91 d2 02 	lds	r18, 0x02D2	; 0x8002d2 <_ZN8SdVolume12cacheBuffer_E+0x16>
    4156:	30 91 d3 02 	lds	r19, 0x02D3	; 0x8002d3 <_ZN8SdVolume12cacheBuffer_E+0x17>
                  bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    415a:	21 15       	cp	r18, r1
    415c:	31 05       	cpc	r19, r1
    415e:	19 f0       	breq	.+6      	; 0x4166 <_ZN8SdVolume4initEP7Sd2Cardh+0x14e>
    4160:	40 e0       	ldi	r20, 0x00	; 0
    4162:	50 e0       	ldi	r21, 0x00	; 0
    4164:	08 c0       	rjmp	.+16     	; 0x4176 <_ZN8SdVolume4initEP7Sd2Cardh+0x15e>
    4166:	20 91 e0 02 	lds	r18, 0x02E0	; 0x8002e0 <_ZN8SdVolume12cacheBuffer_E+0x24>
    416a:	30 91 e1 02 	lds	r19, 0x02E1	; 0x8002e1 <_ZN8SdVolume12cacheBuffer_E+0x25>
    416e:	40 91 e2 02 	lds	r20, 0x02E2	; 0x8002e2 <_ZN8SdVolume12cacheBuffer_E+0x26>
    4172:	50 91 e3 02 	lds	r21, 0x02E3	; 0x8002e3 <_ZN8SdVolume12cacheBuffer_E+0x27>
    4176:	e8 01       	movw	r28, r16
    4178:	2d 83       	std	Y+5, r18	; 0x05
    417a:	3e 83       	std	Y+6, r19	; 0x06
    417c:	4f 83       	std	Y+7, r20	; 0x07
    417e:	58 87       	std	Y+8, r21	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    4180:	0f 2e       	mov	r0, r31
    4182:	fc eb       	ldi	r31, 0xBC	; 188
    4184:	af 2e       	mov	r10, r31
    4186:	f2 e0       	ldi	r31, 0x02	; 2
    4188:	bf 2e       	mov	r11, r31
    418a:	f0 2d       	mov	r31, r0
    418c:	d5 01       	movw	r26, r10
    418e:	1e 96       	adiw	r26, 0x0e	; 14
    4190:	8d 91       	ld	r24, X+
    4192:	9c 91       	ld	r25, X
    4194:	1f 97       	sbiw	r26, 0x0f	; 15
    4196:	26 01       	movw	r4, r12
    4198:	37 01       	movw	r6, r14
    419a:	48 0e       	add	r4, r24
    419c:	59 1e       	adc	r5, r25
    419e:	61 1c       	adc	r6, r1
    41a0:	71 1c       	adc	r7, r1
    41a2:	4b 8a       	std	Y+19, r4	; 0x13
    41a4:	5c 8a       	std	Y+20, r5	; 0x14
    41a6:	6d 8a       	std	Y+21, r6	; 0x15
    41a8:	7e 8a       	std	Y+22, r7	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    41aa:	51 96       	adiw	r26, 0x11	; 17
    41ac:	8d 90       	ld	r8, X+
    41ae:	9c 90       	ld	r9, X
    41b0:	52 97       	sbiw	r26, 0x12	; 18
    41b2:	99 8e       	std	Y+25, r9	; 0x19
    41b4:	88 8e       	std	Y+24, r8	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    41b6:	50 96       	adiw	r26, 0x10	; 16
    41b8:	8c 91       	ld	r24, X
    41ba:	a8 2f       	mov	r26, r24
    41bc:	b0 e0       	ldi	r27, 0x00	; 0
    41be:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <__muluhisi3>
    41c2:	dc 01       	movw	r26, r24
    41c4:	cb 01       	movw	r24, r22
    41c6:	84 0d       	add	r24, r4
    41c8:	95 1d       	adc	r25, r5
    41ca:	a6 1d       	adc	r26, r6
    41cc:	b7 1d       	adc	r27, r7
    41ce:	8a 8f       	std	Y+26, r24	; 0x1a
    41d0:	9b 8f       	std	Y+27, r25	; 0x1b
    41d2:	ac 8f       	std	Y+28, r26	; 0x1c
    41d4:	bd 8f       	std	Y+29, r27	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511) / 512);
    41d6:	e4 01       	movw	r28, r8
    41d8:	cc 0f       	add	r28, r28
    41da:	dd 1f       	adc	r29, r29
    41dc:	c2 95       	swap	r28
    41de:	d2 95       	swap	r29
    41e0:	d0 7f       	andi	r29, 0xF0	; 240
    41e2:	dc 27       	eor	r29, r28
    41e4:	c0 7f       	andi	r28, 0xF0	; 240
    41e6:	dc 27       	eor	r29, r28
    41e8:	c1 50       	subi	r28, 0x01	; 1
    41ea:	de 4f       	sbci	r29, 0xFE	; 254
    41ec:	cd 2f       	mov	r28, r29
    41ee:	dd 27       	eor	r29, r29
    41f0:	c6 95       	lsr	r28
    41f2:	8c 0f       	add	r24, r28
    41f4:	9d 1f       	adc	r25, r29
    41f6:	a1 1d       	adc	r26, r1
    41f8:	b1 1d       	adc	r27, r1
    41fa:	e8 01       	movw	r28, r16
    41fc:	8e 87       	std	Y+14, r24	; 0x0e
    41fe:	9f 87       	std	Y+15, r25	; 0x0f
    4200:	a8 8b       	std	Y+16, r26	; 0x10
    4202:	b9 8b       	std	Y+17, r27	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    4204:	e5 01       	movw	r28, r10
    4206:	4b 88       	ldd	r4, Y+19	; 0x13
    4208:	5c 88       	ldd	r5, Y+20	; 0x14
                         bpb->totalSectors16 : bpb->totalSectors32;
    420a:	41 14       	cp	r4, r1
    420c:	51 04       	cpc	r5, r1
    420e:	19 f0       	breq	.+6      	; 0x4216 <_ZN8SdVolume4initEP7Sd2Cardh+0x1fe>
    4210:	61 2c       	mov	r6, r1
    4212:	71 2c       	mov	r7, r1
    4214:	08 c0       	rjmp	.+16     	; 0x4226 <_ZN8SdVolume4initEP7Sd2Cardh+0x20e>
    4216:	40 90 dc 02 	lds	r4, 0x02DC	; 0x8002dc <_ZN8SdVolume12cacheBuffer_E+0x20>
    421a:	50 90 dd 02 	lds	r5, 0x02DD	; 0x8002dd <_ZN8SdVolume12cacheBuffer_E+0x21>
    421e:	60 90 de 02 	lds	r6, 0x02DE	; 0x8002de <_ZN8SdVolume12cacheBuffer_E+0x22>
    4222:	70 90 df 02 	lds	r7, 0x02DF	; 0x8002df <_ZN8SdVolume12cacheBuffer_E+0x23>
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
    4226:	c8 1a       	sub	r12, r24
    4228:	d9 0a       	sbc	r13, r25
    422a:	ea 0a       	sbc	r14, r26
    422c:	fb 0a       	sbc	r15, r27
    422e:	c4 0c       	add	r12, r4
    4230:	d5 1c       	adc	r13, r5
    4232:	e6 1c       	adc	r14, r6
    4234:	f7 1c       	adc	r15, r7

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    4236:	04 c0       	rjmp	.+8      	; 0x4240 <_ZN8SdVolume4initEP7Sd2Cardh+0x228>
    4238:	f6 94       	lsr	r15
    423a:	e7 94       	ror	r14
    423c:	d7 94       	ror	r13
    423e:	c7 94       	ror	r12
    4240:	ea 95       	dec	r30
    4242:	d2 f7       	brpl	.-12     	; 0x4238 <_ZN8SdVolume4initEP7Sd2Cardh+0x220>
    4244:	f8 01       	movw	r30, r16
    4246:	c1 86       	std	Z+9, r12	; 0x09
    4248:	d2 86       	std	Z+10, r13	; 0x0a
    424a:	e3 86       	std	Z+11, r14	; 0x0b
    424c:	f4 86       	std	Z+12, r15	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    424e:	f5 ef       	ldi	r31, 0xF5	; 245
    4250:	cf 16       	cp	r12, r31
    4252:	ff e0       	ldi	r31, 0x0F	; 15
    4254:	df 06       	cpc	r13, r31
    4256:	e1 04       	cpc	r14, r1
    4258:	f1 04       	cpc	r15, r1
    425a:	30 f4       	brcc	.+12     	; 0x4268 <_ZN8SdVolume4initEP7Sd2Cardh+0x250>
    fatType_ = 12;
    425c:	8c e0       	ldi	r24, 0x0C	; 12
    425e:	d8 01       	movw	r26, r16
    4260:	57 96       	adiw	r26, 0x17	; 23
    4262:	8c 93       	st	X, r24
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    4264:	81 e0       	ldi	r24, 0x01	; 1
    4266:	28 c0       	rjmp	.+80     	; 0x42b8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  clusterCount_ >>= clusterSizeShift_;

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    4268:	b5 ef       	ldi	r27, 0xF5	; 245
    426a:	cb 16       	cp	r12, r27
    426c:	bf ef       	ldi	r27, 0xFF	; 255
    426e:	db 06       	cpc	r13, r27
    4270:	e1 04       	cpc	r14, r1
    4272:	f1 04       	cpc	r15, r1
    4274:	28 f4       	brcc	.+10     	; 0x4280 <_ZN8SdVolume4initEP7Sd2Cardh+0x268>
    fatType_ = 16;
    4276:	80 e1       	ldi	r24, 0x10	; 16
    4278:	e8 01       	movw	r28, r16
    427a:	8f 8b       	std	Y+23, r24	; 0x17
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    427c:	81 e0       	ldi	r24, 0x01	; 1
    427e:	1c c0       	rjmp	.+56     	; 0x42b8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    4280:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <_ZN8SdVolume12cacheBuffer_E+0x2c>
    4284:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <_ZN8SdVolume12cacheBuffer_E+0x2d>
    4288:	a0 91 ea 02 	lds	r26, 0x02EA	; 0x8002ea <_ZN8SdVolume12cacheBuffer_E+0x2e>
    428c:	b0 91 eb 02 	lds	r27, 0x02EB	; 0x8002eb <_ZN8SdVolume12cacheBuffer_E+0x2f>
    4290:	f8 01       	movw	r30, r16
    4292:	82 8f       	std	Z+26, r24	; 0x1a
    4294:	93 8f       	std	Z+27, r25	; 0x1b
    4296:	a4 8f       	std	Z+28, r26	; 0x1c
    4298:	b5 8f       	std	Z+29, r27	; 0x1d
    fatType_ = 32;
    429a:	80 e2       	ldi	r24, 0x20	; 32
    429c:	87 8b       	std	Z+23, r24	; 0x17
  }
  return true;
    429e:	81 e0       	ldi	r24, 0x01	; 1
    42a0:	0b c0       	rjmp	.+22     	; 0x42b8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  sdCard_ = dev;
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4) {
      return false;
    42a2:	80 e0       	ldi	r24, 0x00	; 0
    42a4:	09 c0       	rjmp	.+18     	; 0x42b8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0  ||
        p->totalSectors < 100 ||
        p->firstSector == 0) {
      // not a valid partition
      return false;
    42a6:	80 e0       	ldi	r24, 0x00	; 0
    42a8:	07 c0       	rjmp	.+14     	; 0x42b8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  if (bpb->bytesPerSector != 512 ||
      bpb->fatCount == 0 ||
      bpb->reservedSectorCount == 0 ||
      bpb->sectorsPerCluster == 0) {
    // not valid FAT volume
    return false;
    42aa:	80 e0       	ldi	r24, 0x00	; 0
    42ac:	05 c0       	rjmp	.+10     	; 0x42b8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    42ae:	80 e0       	ldi	r24, 0x00	; 0
    42b0:	03 c0       	rjmp	.+6      	; 0x42b8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    42b2:	86 2f       	mov	r24, r22
    42b4:	01 c0       	rjmp	.+2      	; 0x42b8 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    // error if not power of 2
    if (clusterSizeShift_++ > 7) {
      return false;
    42b6:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
}
    42b8:	df 91       	pop	r29
    42ba:	cf 91       	pop	r28
    42bc:	1f 91       	pop	r17
    42be:	0f 91       	pop	r16
    42c0:	ff 90       	pop	r15
    42c2:	ef 90       	pop	r14
    42c4:	df 90       	pop	r13
    42c6:	cf 90       	pop	r12
    42c8:	bf 90       	pop	r11
    42ca:	af 90       	pop	r10
    42cc:	9f 90       	pop	r9
    42ce:	8f 90       	pop	r8
    42d0:	7f 90       	pop	r7
    42d2:	6f 90       	pop	r6
    42d4:	5f 90       	pop	r5
    42d6:	4f 90       	pop	r4
    42d8:	08 95       	ret

000042da <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    42da:	cf 93       	push	r28
  uint8_t sreg = SREG;
    42dc:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    42de:	f8 94       	cli
  if (!initialized) {
    42e0:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <_ZN8SPIClass11initializedE>
    42e4:	81 11       	cpse	r24, r1
    42e6:	27 c0       	rjmp	.+78     	; 0x4336 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    42e8:	ec e2       	ldi	r30, 0x2C	; 44
    42ea:	f2 e0       	ldi	r31, 0x02	; 2
    42ec:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    42ee:	e8 e1       	ldi	r30, 0x18	; 24
    42f0:	f2 e0       	ldi	r31, 0x02	; 2
    42f2:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    42f4:	e8 2f       	mov	r30, r24
    42f6:	f0 e0       	ldi	r31, 0x00	; 0
    42f8:	ee 0f       	add	r30, r30
    42fa:	ff 1f       	adc	r31, r31
    42fc:	e0 5c       	subi	r30, 0xC0	; 192
    42fe:	fd 4f       	sbci	r31, 0xFD	; 253
    4300:	a5 91       	lpm	r26, Z+
    4302:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    4304:	ec 91       	ld	r30, X
    4306:	e9 23       	and	r30, r25
    4308:	21 f4       	brne	.+8      	; 0x4312 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    430a:	61 e0       	ldi	r22, 0x01	; 1
    430c:	8a e0       	ldi	r24, 0x0A	; 10
    430e:	0e 94 a2 02 	call	0x544	; 0x544 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    4312:	61 e0       	ldi	r22, 0x01	; 1
    4314:	8a e0       	ldi	r24, 0x0A	; 10
    4316:	0e 94 63 02 	call	0x4c6	; 0x4c6 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    431a:	8c b5       	in	r24, 0x2c	; 44
    431c:	80 61       	ori	r24, 0x10	; 16
    431e:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    4320:	8c b5       	in	r24, 0x2c	; 44
    4322:	80 64       	ori	r24, 0x40	; 64
    4324:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    4326:	61 e0       	ldi	r22, 0x01	; 1
    4328:	8d e0       	ldi	r24, 0x0D	; 13
    432a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <pinMode>
    pinMode(MOSI, OUTPUT);
    432e:	61 e0       	ldi	r22, 0x01	; 1
    4330:	8b e0       	ldi	r24, 0x0B	; 11
    4332:	0e 94 63 02 	call	0x4c6	; 0x4c6 <pinMode>
  }
  initialized++; // reference count
    4336:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <_ZN8SPIClass11initializedE>
    433a:	8f 5f       	subi	r24, 0xFF	; 255
    433c:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <_ZN8SPIClass11initializedE>
  SREG = sreg;
    4340:	cf bf       	out	0x3f, r28	; 63
}
    4342:	cf 91       	pop	r28
    4344:	08 95       	ret

00004346 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    4346:	10 92 33 05 	sts	0x0533, r1	; 0x800533 <twi_state>
    434a:	81 e0       	ldi	r24, 0x01	; 1
    434c:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <twi_sendStop>
    4350:	10 92 30 05 	sts	0x0530, r1	; 0x800530 <twi_inRepStart>
    4354:	61 e0       	ldi	r22, 0x01	; 1
    4356:	82 e1       	ldi	r24, 0x12	; 18
    4358:	0e 94 a2 02 	call	0x544	; 0x544 <digitalWrite>
    435c:	61 e0       	ldi	r22, 0x01	; 1
    435e:	83 e1       	ldi	r24, 0x13	; 19
    4360:	0e 94 a2 02 	call	0x544	; 0x544 <digitalWrite>
    4364:	e9 eb       	ldi	r30, 0xB9	; 185
    4366:	f0 e0       	ldi	r31, 0x00	; 0
    4368:	80 81       	ld	r24, Z
    436a:	8e 7f       	andi	r24, 0xFE	; 254
    436c:	80 83       	st	Z, r24
    436e:	80 81       	ld	r24, Z
    4370:	8d 7f       	andi	r24, 0xFD	; 253
    4372:	80 83       	st	Z, r24
    4374:	88 e4       	ldi	r24, 0x48	; 72
    4376:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    437a:	85 e4       	ldi	r24, 0x45	; 69
    437c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4380:	08 95       	ret

00004382 <twi_disable>:
    4382:	ec eb       	ldi	r30, 0xBC	; 188
    4384:	f0 e0       	ldi	r31, 0x00	; 0
    4386:	80 81       	ld	r24, Z
    4388:	8a 7b       	andi	r24, 0xBA	; 186
    438a:	80 83       	st	Z, r24
    438c:	60 e0       	ldi	r22, 0x00	; 0
    438e:	82 e1       	ldi	r24, 0x12	; 18
    4390:	0e 94 a2 02 	call	0x544	; 0x544 <digitalWrite>
    4394:	60 e0       	ldi	r22, 0x00	; 0
    4396:	83 e1       	ldi	r24, 0x13	; 19
    4398:	0e 94 a2 02 	call	0x544	; 0x544 <digitalWrite>
    439c:	08 95       	ret

0000439e <twi_transmit>:
    439e:	ac 01       	movw	r20, r24
    43a0:	90 91 e2 04 	lds	r25, 0x04E2	; 0x8004e2 <twi_txBufferLength>
    43a4:	26 2f       	mov	r18, r22
    43a6:	30 e0       	ldi	r19, 0x00	; 0
    43a8:	29 0f       	add	r18, r25
    43aa:	31 1d       	adc	r19, r1
    43ac:	21 32       	cpi	r18, 0x21	; 33
    43ae:	31 05       	cpc	r19, r1
    43b0:	f4 f4       	brge	.+60     	; 0x43ee <twi_transmit+0x50>
    43b2:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <twi_state>
    43b6:	84 30       	cpi	r24, 0x04	; 4
    43b8:	e1 f4       	brne	.+56     	; 0x43f2 <twi_transmit+0x54>
    43ba:	90 e0       	ldi	r25, 0x00	; 0
    43bc:	0f c0       	rjmp	.+30     	; 0x43dc <twi_transmit+0x3e>
    43be:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <twi_txBufferLength>
    43c2:	29 2f       	mov	r18, r25
    43c4:	30 e0       	ldi	r19, 0x00	; 0
    43c6:	f9 01       	movw	r30, r18
    43c8:	e8 0f       	add	r30, r24
    43ca:	f1 1d       	adc	r31, r1
    43cc:	da 01       	movw	r26, r20
    43ce:	a2 0f       	add	r26, r18
    43d0:	b3 1f       	adc	r27, r19
    43d2:	8c 91       	ld	r24, X
    43d4:	ec 51       	subi	r30, 0x1C	; 28
    43d6:	fb 4f       	sbci	r31, 0xFB	; 251
    43d8:	80 83       	st	Z, r24
    43da:	9f 5f       	subi	r25, 0xFF	; 255
    43dc:	96 17       	cp	r25, r22
    43de:	78 f3       	brcs	.-34     	; 0x43be <twi_transmit+0x20>
    43e0:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <twi_txBufferLength>
    43e4:	68 0f       	add	r22, r24
    43e6:	60 93 e2 04 	sts	0x04E2, r22	; 0x8004e2 <twi_txBufferLength>
    43ea:	80 e0       	ldi	r24, 0x00	; 0
    43ec:	08 95       	ret
    43ee:	81 e0       	ldi	r24, 0x01	; 1
    43f0:	08 95       	ret
    43f2:	82 e0       	ldi	r24, 0x02	; 2
    43f4:	08 95       	ret

000043f6 <twi_attachSlaveRxEvent>:
    43f6:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <twi_onSlaveReceive+0x1>
    43fa:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <twi_onSlaveReceive>
    43fe:	08 95       	ret

00004400 <twi_attachSlaveTxEvent>:
    4400:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <twi_onSlaveTransmit+0x1>
    4404:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <twi_onSlaveTransmit>
    4408:	08 95       	ret

0000440a <twi_reply>:
    440a:	88 23       	and	r24, r24
    440c:	21 f0       	breq	.+8      	; 0x4416 <twi_reply+0xc>
    440e:	85 ec       	ldi	r24, 0xC5	; 197
    4410:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4414:	08 95       	ret
    4416:	85 e8       	ldi	r24, 0x85	; 133
    4418:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    441c:	08 95       	ret

0000441e <twi_releaseBus>:
    441e:	85 ec       	ldi	r24, 0xC5	; 197
    4420:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4424:	10 92 33 05 	sts	0x0533, r1	; 0x800533 <twi_state>
    4428:	08 95       	ret

0000442a <twi_handleTimeout>:
    442a:	ef 92       	push	r14
    442c:	ff 92       	push	r15
    442e:	0f 93       	push	r16
    4430:	1f 93       	push	r17
    4432:	cf 93       	push	r28
    4434:	df 93       	push	r29
    4436:	91 e0       	ldi	r25, 0x01	; 1
    4438:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <twi_timed_out_flag>
    443c:	88 23       	and	r24, r24
    443e:	71 f0       	breq	.+28     	; 0x445c <twi_handleTimeout+0x32>
    4440:	c8 eb       	ldi	r28, 0xB8	; 184
    4442:	d0 e0       	ldi	r29, 0x00	; 0
    4444:	f8 80       	ld	r15, Y
    4446:	0a eb       	ldi	r16, 0xBA	; 186
    4448:	10 e0       	ldi	r17, 0x00	; 0
    444a:	f8 01       	movw	r30, r16
    444c:	e0 80       	ld	r14, Z
    444e:	0e 94 c1 21 	call	0x4382	; 0x4382 <twi_disable>
    4452:	0e 94 a3 21 	call	0x4346	; 0x4346 <twi_init>
    4456:	f8 01       	movw	r30, r16
    4458:	e0 82       	st	Z, r14
    445a:	f8 82       	st	Y, r15
    445c:	df 91       	pop	r29
    445e:	cf 91       	pop	r28
    4460:	1f 91       	pop	r17
    4462:	0f 91       	pop	r16
    4464:	ff 90       	pop	r15
    4466:	ef 90       	pop	r14
    4468:	08 95       	ret

0000446a <twi_writeTo>:
    446a:	4f 92       	push	r4
    446c:	5f 92       	push	r5
    446e:	6f 92       	push	r6
    4470:	7f 92       	push	r7
    4472:	8f 92       	push	r8
    4474:	9f 92       	push	r9
    4476:	af 92       	push	r10
    4478:	bf 92       	push	r11
    447a:	df 92       	push	r13
    447c:	ef 92       	push	r14
    447e:	ff 92       	push	r15
    4480:	0f 93       	push	r16
    4482:	1f 93       	push	r17
    4484:	cf 93       	push	r28
    4486:	df 93       	push	r29
    4488:	41 32       	cpi	r20, 0x21	; 33
    448a:	08 f0       	brcs	.+2      	; 0x448e <twi_writeTo+0x24>
    448c:	d9 c0       	rjmp	.+434    	; 0x4640 <twi_writeTo+0x1d6>
    448e:	12 2f       	mov	r17, r18
    4490:	d4 2f       	mov	r29, r20
    4492:	7b 01       	movw	r14, r22
    4494:	d8 2e       	mov	r13, r24
    4496:	0e 94 0e 02 	call	0x41c	; 0x41c <micros>
    449a:	4b 01       	movw	r8, r22
    449c:	5c 01       	movw	r10, r24
    449e:	27 c0       	rjmp	.+78     	; 0x44ee <twi_writeTo+0x84>
    44a0:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <twi_timeout_us>
    44a4:	90 91 2d 05 	lds	r25, 0x052D	; 0x80052d <twi_timeout_us+0x1>
    44a8:	a0 91 2e 05 	lds	r26, 0x052E	; 0x80052e <twi_timeout_us+0x2>
    44ac:	b0 91 2f 05 	lds	r27, 0x052F	; 0x80052f <twi_timeout_us+0x3>
    44b0:	89 2b       	or	r24, r25
    44b2:	8a 2b       	or	r24, r26
    44b4:	8b 2b       	or	r24, r27
    44b6:	d9 f0       	breq	.+54     	; 0x44ee <twi_writeTo+0x84>
    44b8:	0e 94 0e 02 	call	0x41c	; 0x41c <micros>
    44bc:	dc 01       	movw	r26, r24
    44be:	cb 01       	movw	r24, r22
    44c0:	88 19       	sub	r24, r8
    44c2:	99 09       	sbc	r25, r9
    44c4:	aa 09       	sbc	r26, r10
    44c6:	bb 09       	sbc	r27, r11
    44c8:	40 90 2c 05 	lds	r4, 0x052C	; 0x80052c <twi_timeout_us>
    44cc:	50 90 2d 05 	lds	r5, 0x052D	; 0x80052d <twi_timeout_us+0x1>
    44d0:	60 90 2e 05 	lds	r6, 0x052E	; 0x80052e <twi_timeout_us+0x2>
    44d4:	70 90 2f 05 	lds	r7, 0x052F	; 0x80052f <twi_timeout_us+0x3>
    44d8:	48 16       	cp	r4, r24
    44da:	59 06       	cpc	r5, r25
    44dc:	6a 06       	cpc	r6, r26
    44de:	7b 06       	cpc	r7, r27
    44e0:	30 f4       	brcc	.+12     	; 0x44ee <twi_writeTo+0x84>
    44e2:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <twi_do_reset_on_timeout>
    44e6:	0e 94 15 22 	call	0x442a	; 0x442a <twi_handleTimeout>
    44ea:	c5 e0       	ldi	r28, 0x05	; 5
    44ec:	ae c0       	rjmp	.+348    	; 0x464a <twi_writeTo+0x1e0>
    44ee:	c0 91 33 05 	lds	r28, 0x0533	; 0x800533 <twi_state>
    44f2:	c1 11       	cpse	r28, r1
    44f4:	d5 cf       	rjmp	.-86     	; 0x44a0 <twi_writeTo+0x36>
    44f6:	82 e0       	ldi	r24, 0x02	; 2
    44f8:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <twi_state>
    44fc:	00 93 31 05 	sts	0x0531, r16	; 0x800531 <twi_sendStop>
    4500:	8f ef       	ldi	r24, 0xFF	; 255
    4502:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <twi_error>
    4506:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <twi_masterBufferIndex>
    450a:	d0 93 04 05 	sts	0x0504, r29	; 0x800504 <twi_masterBufferLength>
    450e:	90 e0       	ldi	r25, 0x00	; 0
    4510:	0a c0       	rjmp	.+20     	; 0x4526 <twi_writeTo+0xbc>
    4512:	e9 2f       	mov	r30, r25
    4514:	f0 e0       	ldi	r31, 0x00	; 0
    4516:	d7 01       	movw	r26, r14
    4518:	ae 0f       	add	r26, r30
    451a:	bf 1f       	adc	r27, r31
    451c:	3c 91       	ld	r19, X
    451e:	ea 5f       	subi	r30, 0xFA	; 250
    4520:	fa 4f       	sbci	r31, 0xFA	; 250
    4522:	30 83       	st	Z, r19
    4524:	9f 5f       	subi	r25, 0xFF	; 255
    4526:	9d 17       	cp	r25, r29
    4528:	a0 f3       	brcs	.-24     	; 0x4512 <twi_writeTo+0xa8>
    452a:	10 92 32 05 	sts	0x0532, r1	; 0x800532 <twi_slarw>
    452e:	8d 2d       	mov	r24, r13
    4530:	90 e0       	ldi	r25, 0x00	; 0
    4532:	88 0f       	add	r24, r24
    4534:	99 1f       	adc	r25, r25
    4536:	d0 90 32 05 	lds	r13, 0x0532	; 0x800532 <twi_slarw>
    453a:	8d 29       	or	r24, r13
    453c:	80 93 32 05 	sts	0x0532, r24	; 0x800532 <twi_slarw>
    4540:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <twi_inRepStart>
    4544:	81 30       	cpi	r24, 0x01	; 1
    4546:	c9 f5       	brne	.+114    	; 0x45ba <twi_writeTo+0x150>
    4548:	10 92 30 05 	sts	0x0530, r1	; 0x800530 <twi_inRepStart>
    454c:	0e 94 0e 02 	call	0x41c	; 0x41c <micros>
    4550:	4b 01       	movw	r8, r22
    4552:	5c 01       	movw	r10, r24
    4554:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <twi_slarw>
    4558:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    455c:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <twi_timeout_us>
    4560:	90 91 2d 05 	lds	r25, 0x052D	; 0x80052d <twi_timeout_us+0x1>
    4564:	a0 91 2e 05 	lds	r26, 0x052E	; 0x80052e <twi_timeout_us+0x2>
    4568:	b0 91 2f 05 	lds	r27, 0x052F	; 0x80052f <twi_timeout_us+0x3>
    456c:	89 2b       	or	r24, r25
    456e:	8a 2b       	or	r24, r26
    4570:	8b 2b       	or	r24, r27
    4572:	d9 f0       	breq	.+54     	; 0x45aa <twi_writeTo+0x140>
    4574:	0e 94 0e 02 	call	0x41c	; 0x41c <micros>
    4578:	dc 01       	movw	r26, r24
    457a:	cb 01       	movw	r24, r22
    457c:	88 19       	sub	r24, r8
    457e:	99 09       	sbc	r25, r9
    4580:	aa 09       	sbc	r26, r10
    4582:	bb 09       	sbc	r27, r11
    4584:	40 90 2c 05 	lds	r4, 0x052C	; 0x80052c <twi_timeout_us>
    4588:	50 90 2d 05 	lds	r5, 0x052D	; 0x80052d <twi_timeout_us+0x1>
    458c:	60 90 2e 05 	lds	r6, 0x052E	; 0x80052e <twi_timeout_us+0x2>
    4590:	70 90 2f 05 	lds	r7, 0x052F	; 0x80052f <twi_timeout_us+0x3>
    4594:	48 16       	cp	r4, r24
    4596:	59 06       	cpc	r5, r25
    4598:	6a 06       	cpc	r6, r26
    459a:	7b 06       	cpc	r7, r27
    459c:	30 f4       	brcc	.+12     	; 0x45aa <twi_writeTo+0x140>
    459e:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <twi_do_reset_on_timeout>
    45a2:	0e 94 15 22 	call	0x442a	; 0x442a <twi_handleTimeout>
    45a6:	c5 e0       	ldi	r28, 0x05	; 5
    45a8:	50 c0       	rjmp	.+160    	; 0x464a <twi_writeTo+0x1e0>
    45aa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    45ae:	83 fd       	sbrc	r24, 3
    45b0:	d1 cf       	rjmp	.-94     	; 0x4554 <twi_writeTo+0xea>
    45b2:	85 ec       	ldi	r24, 0xC5	; 197
    45b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    45b8:	03 c0       	rjmp	.+6      	; 0x45c0 <twi_writeTo+0x156>
    45ba:	85 ee       	ldi	r24, 0xE5	; 229
    45bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    45c0:	0e 94 0e 02 	call	0x41c	; 0x41c <micros>
    45c4:	4b 01       	movw	r8, r22
    45c6:	5c 01       	movw	r10, r24
    45c8:	27 c0       	rjmp	.+78     	; 0x4618 <twi_writeTo+0x1ae>
    45ca:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <twi_timeout_us>
    45ce:	90 91 2d 05 	lds	r25, 0x052D	; 0x80052d <twi_timeout_us+0x1>
    45d2:	a0 91 2e 05 	lds	r26, 0x052E	; 0x80052e <twi_timeout_us+0x2>
    45d6:	b0 91 2f 05 	lds	r27, 0x052F	; 0x80052f <twi_timeout_us+0x3>
    45da:	89 2b       	or	r24, r25
    45dc:	8a 2b       	or	r24, r26
    45de:	8b 2b       	or	r24, r27
    45e0:	d9 f0       	breq	.+54     	; 0x4618 <twi_writeTo+0x1ae>
    45e2:	0e 94 0e 02 	call	0x41c	; 0x41c <micros>
    45e6:	dc 01       	movw	r26, r24
    45e8:	cb 01       	movw	r24, r22
    45ea:	88 19       	sub	r24, r8
    45ec:	99 09       	sbc	r25, r9
    45ee:	aa 09       	sbc	r26, r10
    45f0:	bb 09       	sbc	r27, r11
    45f2:	40 90 2c 05 	lds	r4, 0x052C	; 0x80052c <twi_timeout_us>
    45f6:	50 90 2d 05 	lds	r5, 0x052D	; 0x80052d <twi_timeout_us+0x1>
    45fa:	60 90 2e 05 	lds	r6, 0x052E	; 0x80052e <twi_timeout_us+0x2>
    45fe:	70 90 2f 05 	lds	r7, 0x052F	; 0x80052f <twi_timeout_us+0x3>
    4602:	48 16       	cp	r4, r24
    4604:	59 06       	cpc	r5, r25
    4606:	6a 06       	cpc	r6, r26
    4608:	7b 06       	cpc	r7, r27
    460a:	30 f4       	brcc	.+12     	; 0x4618 <twi_writeTo+0x1ae>
    460c:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <twi_do_reset_on_timeout>
    4610:	0e 94 15 22 	call	0x442a	; 0x442a <twi_handleTimeout>
    4614:	c5 e0       	ldi	r28, 0x05	; 5
    4616:	19 c0       	rjmp	.+50     	; 0x464a <twi_writeTo+0x1e0>
    4618:	11 23       	and	r17, r17
    461a:	21 f0       	breq	.+8      	; 0x4624 <twi_writeTo+0x1ba>
    461c:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <twi_state>
    4620:	82 30       	cpi	r24, 0x02	; 2
    4622:	99 f2       	breq	.-90     	; 0x45ca <twi_writeTo+0x160>
    4624:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <twi_error>
    4628:	8f 3f       	cpi	r24, 0xFF	; 255
    462a:	79 f0       	breq	.+30     	; 0x464a <twi_writeTo+0x1e0>
    462c:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <twi_error>
    4630:	80 32       	cpi	r24, 0x20	; 32
    4632:	41 f0       	breq	.+16     	; 0x4644 <twi_writeTo+0x1da>
    4634:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <twi_error>
    4638:	80 33       	cpi	r24, 0x30	; 48
    463a:	31 f4       	brne	.+12     	; 0x4648 <twi_writeTo+0x1de>
    463c:	c3 e0       	ldi	r28, 0x03	; 3
    463e:	05 c0       	rjmp	.+10     	; 0x464a <twi_writeTo+0x1e0>
    4640:	c1 e0       	ldi	r28, 0x01	; 1
    4642:	03 c0       	rjmp	.+6      	; 0x464a <twi_writeTo+0x1e0>
    4644:	c2 e0       	ldi	r28, 0x02	; 2
    4646:	01 c0       	rjmp	.+2      	; 0x464a <twi_writeTo+0x1e0>
    4648:	c4 e0       	ldi	r28, 0x04	; 4
    464a:	8c 2f       	mov	r24, r28
    464c:	df 91       	pop	r29
    464e:	cf 91       	pop	r28
    4650:	1f 91       	pop	r17
    4652:	0f 91       	pop	r16
    4654:	ff 90       	pop	r15
    4656:	ef 90       	pop	r14
    4658:	df 90       	pop	r13
    465a:	bf 90       	pop	r11
    465c:	af 90       	pop	r10
    465e:	9f 90       	pop	r9
    4660:	8f 90       	pop	r8
    4662:	7f 90       	pop	r7
    4664:	6f 90       	pop	r6
    4666:	5f 90       	pop	r5
    4668:	4f 90       	pop	r4
    466a:	08 95       	ret

0000466c <twi_stop>:
    466c:	85 ed       	ldi	r24, 0xD5	; 213
    466e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4672:	40 91 2c 05 	lds	r20, 0x052C	; 0x80052c <twi_timeout_us>
    4676:	50 91 2d 05 	lds	r21, 0x052D	; 0x80052d <twi_timeout_us+0x1>
    467a:	60 91 2e 05 	lds	r22, 0x052E	; 0x80052e <twi_timeout_us+0x2>
    467e:	70 91 2f 05 	lds	r23, 0x052F	; 0x80052f <twi_timeout_us+0x3>
    4682:	49 5f       	subi	r20, 0xF9	; 249
    4684:	5f 4f       	sbci	r21, 0xFF	; 255
    4686:	6f 4f       	sbci	r22, 0xFF	; 255
    4688:	7f 4f       	sbci	r23, 0xFF	; 255
    468a:	68 94       	set
    468c:	12 f8       	bld	r1, 2
    468e:	76 95       	lsr	r23
    4690:	67 95       	ror	r22
    4692:	57 95       	ror	r21
    4694:	47 95       	ror	r20
    4696:	16 94       	lsr	r1
    4698:	d1 f7       	brne	.-12     	; 0x468e <twi_stop+0x22>
    469a:	1f c0       	rjmp	.+62     	; 0x46da <twi_stop+0x6e>
    469c:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <twi_timeout_us>
    46a0:	90 91 2d 05 	lds	r25, 0x052D	; 0x80052d <twi_timeout_us+0x1>
    46a4:	a0 91 2e 05 	lds	r26, 0x052E	; 0x80052e <twi_timeout_us+0x2>
    46a8:	b0 91 2f 05 	lds	r27, 0x052F	; 0x80052f <twi_timeout_us+0x3>
    46ac:	89 2b       	or	r24, r25
    46ae:	8a 2b       	or	r24, r26
    46b0:	8b 2b       	or	r24, r27
    46b2:	99 f0       	breq	.+38     	; 0x46da <twi_stop+0x6e>
    46b4:	41 15       	cp	r20, r1
    46b6:	51 05       	cpc	r21, r1
    46b8:	61 05       	cpc	r22, r1
    46ba:	71 05       	cpc	r23, r1
    46bc:	49 f0       	breq	.+18     	; 0x46d0 <twi_stop+0x64>
    46be:	85 e3       	ldi	r24, 0x35	; 53
    46c0:	8a 95       	dec	r24
    46c2:	f1 f7       	brne	.-4      	; 0x46c0 <twi_stop+0x54>
    46c4:	00 00       	nop
    46c6:	41 50       	subi	r20, 0x01	; 1
    46c8:	51 09       	sbc	r21, r1
    46ca:	61 09       	sbc	r22, r1
    46cc:	71 09       	sbc	r23, r1
    46ce:	05 c0       	rjmp	.+10     	; 0x46da <twi_stop+0x6e>
    46d0:	80 91 2a 05 	lds	r24, 0x052A	; 0x80052a <twi_do_reset_on_timeout>
    46d4:	0e 94 15 22 	call	0x442a	; 0x442a <twi_handleTimeout>
    46d8:	08 95       	ret
    46da:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    46de:	84 fd       	sbrc	r24, 4
    46e0:	dd cf       	rjmp	.-70     	; 0x469c <twi_stop+0x30>
    46e2:	10 92 33 05 	sts	0x0533, r1	; 0x800533 <twi_state>
    46e6:	08 95       	ret

000046e8 <__vector_24>:

ISR(TWI_vect)
{
    46e8:	1f 92       	push	r1
    46ea:	0f 92       	push	r0
    46ec:	0f b6       	in	r0, 0x3f	; 63
    46ee:	0f 92       	push	r0
    46f0:	11 24       	eor	r1, r1
    46f2:	2f 93       	push	r18
    46f4:	3f 93       	push	r19
    46f6:	4f 93       	push	r20
    46f8:	5f 93       	push	r21
    46fa:	6f 93       	push	r22
    46fc:	7f 93       	push	r23
    46fe:	8f 93       	push	r24
    4700:	9f 93       	push	r25
    4702:	af 93       	push	r26
    4704:	bf 93       	push	r27
    4706:	ef 93       	push	r30
    4708:	ff 93       	push	r31
  switch(TW_STATUS){
    470a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    470e:	e8 2f       	mov	r30, r24
    4710:	e8 7f       	andi	r30, 0xF8	; 248
    4712:	8e 2f       	mov	r24, r30
    4714:	90 e0       	ldi	r25, 0x00	; 0
    4716:	89 3c       	cpi	r24, 0xC9	; 201
    4718:	91 05       	cpc	r25, r1
    471a:	08 f0       	brcs	.+2      	; 0x471e <__vector_24+0x36>
    471c:	f5 c0       	rjmp	.+490    	; 0x4908 <__vector_24+0x220>
    471e:	fc 01       	movw	r30, r24
    4720:	ec 5c       	subi	r30, 0xCC	; 204
    4722:	ff 4f       	sbci	r31, 0xFF	; 255
    4724:	0c 94 c8 27 	jmp	0x4f90	; 0x4f90 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4728:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <twi_slarw>
    472c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      twi_reply(1);
    4730:	81 e0       	ldi	r24, 0x01	; 1
    4732:	0e 94 05 22 	call	0x440a	; 0x440a <twi_reply>
      break;
    4736:	e8 c0       	rjmp	.+464    	; 0x4908 <__vector_24+0x220>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4738:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <twi_masterBufferIndex>
    473c:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <twi_masterBufferLength>
    4740:	98 17       	cp	r25, r24
    4742:	80 f4       	brcc	.+32     	; 0x4764 <__vector_24+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4744:	e0 91 05 05 	lds	r30, 0x0505	; 0x800505 <twi_masterBufferIndex>
    4748:	81 e0       	ldi	r24, 0x01	; 1
    474a:	8e 0f       	add	r24, r30
    474c:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <twi_masterBufferIndex>
    4750:	f0 e0       	ldi	r31, 0x00	; 0
    4752:	ea 5f       	subi	r30, 0xFA	; 250
    4754:	fa 4f       	sbci	r31, 0xFA	; 250
    4756:	80 81       	ld	r24, Z
    4758:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
        twi_reply(1);
    475c:	81 e0       	ldi	r24, 0x01	; 1
    475e:	0e 94 05 22 	call	0x440a	; 0x440a <twi_reply>
    4762:	d2 c0       	rjmp	.+420    	; 0x4908 <__vector_24+0x220>
      }else{
        if (twi_sendStop){
    4764:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <twi_sendStop>
    4768:	88 23       	and	r24, r24
    476a:	19 f0       	breq	.+6      	; 0x4772 <__vector_24+0x8a>
          twi_stop();
    476c:	0e 94 36 23 	call	0x466c	; 0x466c <twi_stop>
    4770:	cb c0       	rjmp	.+406    	; 0x4908 <__vector_24+0x220>
       } else {
         twi_inRepStart = true;	// we're gonna send the START
    4772:	81 e0       	ldi	r24, 0x01	; 1
    4774:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <twi_inRepStart>
         // don't enable the interrupt. We'll generate the start, but we
         // avoid handling the interrupt until we're in the next transaction,
         // at the point where we would normally issue the start.
         TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4778:	84 ea       	ldi	r24, 0xA4	; 164
    477a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
         twi_state = TWI_READY;
    477e:	10 92 33 05 	sts	0x0533, r1	; 0x800533 <twi_state>
    4782:	c2 c0       	rjmp	.+388    	; 0x4908 <__vector_24+0x220>
        }
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    4784:	80 e2       	ldi	r24, 0x20	; 32
    4786:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <twi_error>
      twi_stop();
    478a:	0e 94 36 23 	call	0x466c	; 0x466c <twi_stop>
      break;
    478e:	bc c0       	rjmp	.+376    	; 0x4908 <__vector_24+0x220>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4790:	80 e3       	ldi	r24, 0x30	; 48
    4792:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <twi_error>
      twi_stop();
    4796:	0e 94 36 23 	call	0x466c	; 0x466c <twi_stop>
      break;
    479a:	b6 c0       	rjmp	.+364    	; 0x4908 <__vector_24+0x220>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    479c:	88 e3       	ldi	r24, 0x38	; 56
    479e:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <twi_error>
      twi_releaseBus();
    47a2:	0e 94 0f 22 	call	0x441e	; 0x441e <twi_releaseBus>
      break;
    47a6:	b0 c0       	rjmp	.+352    	; 0x4908 <__vector_24+0x220>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    47a8:	e0 91 05 05 	lds	r30, 0x0505	; 0x800505 <twi_masterBufferIndex>
    47ac:	81 e0       	ldi	r24, 0x01	; 1
    47ae:	8e 0f       	add	r24, r30
    47b0:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <twi_masterBufferIndex>
    47b4:	f0 e0       	ldi	r31, 0x00	; 0
    47b6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    47ba:	ea 5f       	subi	r30, 0xFA	; 250
    47bc:	fa 4f       	sbci	r31, 0xFA	; 250
    47be:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    47c0:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <twi_masterBufferIndex>
    47c4:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <twi_masterBufferLength>
    47c8:	98 17       	cp	r25, r24
    47ca:	20 f4       	brcc	.+8      	; 0x47d4 <__vector_24+0xec>
        twi_reply(1);
    47cc:	81 e0       	ldi	r24, 0x01	; 1
    47ce:	0e 94 05 22 	call	0x440a	; 0x440a <twi_reply>
    47d2:	9a c0       	rjmp	.+308    	; 0x4908 <__vector_24+0x220>
      }else{
        twi_reply(0);
    47d4:	80 e0       	ldi	r24, 0x00	; 0
    47d6:	0e 94 05 22 	call	0x440a	; 0x440a <twi_reply>
    47da:	96 c0       	rjmp	.+300    	; 0x4908 <__vector_24+0x220>
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    47dc:	e0 91 05 05 	lds	r30, 0x0505	; 0x800505 <twi_masterBufferIndex>
    47e0:	81 e0       	ldi	r24, 0x01	; 1
    47e2:	8e 0f       	add	r24, r30
    47e4:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <twi_masterBufferIndex>
    47e8:	f0 e0       	ldi	r31, 0x00	; 0
    47ea:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    47ee:	ea 5f       	subi	r30, 0xFA	; 250
    47f0:	fa 4f       	sbci	r31, 0xFA	; 250
    47f2:	80 83       	st	Z, r24
      if (twi_sendStop){
    47f4:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <twi_sendStop>
    47f8:	88 23       	and	r24, r24
    47fa:	19 f0       	breq	.+6      	; 0x4802 <__vector_24+0x11a>
        twi_stop();
    47fc:	0e 94 36 23 	call	0x466c	; 0x466c <twi_stop>
    4800:	83 c0       	rjmp	.+262    	; 0x4908 <__vector_24+0x220>
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    4802:	81 e0       	ldi	r24, 0x01	; 1
    4804:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4808:	84 ea       	ldi	r24, 0xA4	; 164
    480a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
        twi_state = TWI_READY;
    480e:	10 92 33 05 	sts	0x0533, r1	; 0x800533 <twi_state>
    4812:	7a c0       	rjmp	.+244    	; 0x4908 <__vector_24+0x220>
      }
      break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    4814:	0e 94 36 23 	call	0x466c	; 0x466c <twi_stop>
      break;
    4818:	77 c0       	rjmp	.+238    	; 0x4908 <__vector_24+0x220>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    481a:	83 e0       	ldi	r24, 0x03	; 3
    481c:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4820:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <twi_rxBufferIndex>
      twi_reply(1);
    4824:	81 e0       	ldi	r24, 0x01	; 1
    4826:	0e 94 05 22 	call	0x440a	; 0x440a <twi_reply>
      break;
    482a:	6e c0       	rjmp	.+220    	; 0x4908 <__vector_24+0x220>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    482c:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <twi_rxBufferIndex>
    4830:	80 32       	cpi	r24, 0x20	; 32
    4832:	80 f4       	brcc	.+32     	; 0x4854 <__vector_24+0x16c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    4834:	e0 91 c1 04 	lds	r30, 0x04C1	; 0x8004c1 <twi_rxBufferIndex>
    4838:	81 e0       	ldi	r24, 0x01	; 1
    483a:	8e 0f       	add	r24, r30
    483c:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <twi_rxBufferIndex>
    4840:	f0 e0       	ldi	r31, 0x00	; 0
    4842:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    4846:	ee 53       	subi	r30, 0x3E	; 62
    4848:	fb 4f       	sbci	r31, 0xFB	; 251
    484a:	80 83       	st	Z, r24
        twi_reply(1);
    484c:	81 e0       	ldi	r24, 0x01	; 1
    484e:	0e 94 05 22 	call	0x440a	; 0x440a <twi_reply>
    4852:	5a c0       	rjmp	.+180    	; 0x4908 <__vector_24+0x220>
      }else{
        // otherwise nack
        twi_reply(0);
    4854:	80 e0       	ldi	r24, 0x00	; 0
    4856:	0e 94 05 22 	call	0x440a	; 0x440a <twi_reply>
    485a:	56 c0       	rjmp	.+172    	; 0x4908 <__vector_24+0x220>
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    485c:	0e 94 0f 22 	call	0x441e	; 0x441e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4860:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <twi_rxBufferIndex>
    4864:	80 32       	cpi	r24, 0x20	; 32
    4866:	30 f4       	brcc	.+12     	; 0x4874 <__vector_24+0x18c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4868:	e0 91 c1 04 	lds	r30, 0x04C1	; 0x8004c1 <twi_rxBufferIndex>
    486c:	f0 e0       	ldi	r31, 0x00	; 0
    486e:	ee 53       	subi	r30, 0x3E	; 62
    4870:	fb 4f       	sbci	r31, 0xFB	; 251
    4872:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4874:	60 91 c1 04 	lds	r22, 0x04C1	; 0x8004c1 <twi_rxBufferIndex>
    4878:	70 e0       	ldi	r23, 0x00	; 0
    487a:	e0 91 26 05 	lds	r30, 0x0526	; 0x800526 <twi_onSlaveReceive>
    487e:	f0 91 27 05 	lds	r31, 0x0527	; 0x800527 <twi_onSlaveReceive+0x1>
    4882:	82 ec       	ldi	r24, 0xC2	; 194
    4884:	94 e0       	ldi	r25, 0x04	; 4
    4886:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4888:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <twi_rxBufferIndex>
      break;
    488c:	3d c0       	rjmp	.+122    	; 0x4908 <__vector_24+0x220>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
    488e:	80 e0       	ldi	r24, 0x00	; 0
    4890:	0e 94 05 22 	call	0x440a	; 0x440a <twi_reply>
      break;
    4894:	39 c0       	rjmp	.+114    	; 0x4908 <__vector_24+0x220>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4896:	84 e0       	ldi	r24, 0x04	; 4
    4898:	80 93 33 05 	sts	0x0533, r24	; 0x800533 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    489c:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    48a0:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    48a4:	e0 91 28 05 	lds	r30, 0x0528	; 0x800528 <twi_onSlaveTransmit>
    48a8:	f0 91 29 05 	lds	r31, 0x0529	; 0x800529 <twi_onSlaveTransmit+0x1>
    48ac:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    48ae:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <twi_txBufferLength>
    48b2:	81 11       	cpse	r24, r1
    48b4:	05 c0       	rjmp	.+10     	; 0x48c0 <__vector_24+0x1d8>
        twi_txBufferLength = 1;
    48b6:	81 e0       	ldi	r24, 0x01	; 1
    48b8:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    48bc:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    48c0:	e0 91 e3 04 	lds	r30, 0x04E3	; 0x8004e3 <twi_txBufferIndex>
    48c4:	81 e0       	ldi	r24, 0x01	; 1
    48c6:	8e 0f       	add	r24, r30
    48c8:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <twi_txBufferIndex>
    48cc:	f0 e0       	ldi	r31, 0x00	; 0
    48ce:	ec 51       	subi	r30, 0x1C	; 28
    48d0:	fb 4f       	sbci	r31, 0xFB	; 251
    48d2:	80 81       	ld	r24, Z
    48d4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    48d8:	90 91 e3 04 	lds	r25, 0x04E3	; 0x8004e3 <twi_txBufferIndex>
    48dc:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <twi_txBufferLength>
    48e0:	98 17       	cp	r25, r24
    48e2:	20 f4       	brcc	.+8      	; 0x48ec <__vector_24+0x204>
        twi_reply(1);
    48e4:	81 e0       	ldi	r24, 0x01	; 1
    48e6:	0e 94 05 22 	call	0x440a	; 0x440a <twi_reply>
    48ea:	0e c0       	rjmp	.+28     	; 0x4908 <__vector_24+0x220>
      }else{
        twi_reply(0);
    48ec:	80 e0       	ldi	r24, 0x00	; 0
    48ee:	0e 94 05 22 	call	0x440a	; 0x440a <twi_reply>
    48f2:	0a c0       	rjmp	.+20     	; 0x4908 <__vector_24+0x220>
      }
      break;
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
    48f4:	81 e0       	ldi	r24, 0x01	; 1
    48f6:	0e 94 05 22 	call	0x440a	; 0x440a <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
    48fa:	10 92 33 05 	sts	0x0533, r1	; 0x800533 <twi_state>
      break;
    48fe:	04 c0       	rjmp	.+8      	; 0x4908 <__vector_24+0x220>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4900:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <twi_error>
      twi_stop();
    4904:	0e 94 36 23 	call	0x466c	; 0x466c <twi_stop>
      break;
  }
}
    4908:	ff 91       	pop	r31
    490a:	ef 91       	pop	r30
    490c:	bf 91       	pop	r27
    490e:	af 91       	pop	r26
    4910:	9f 91       	pop	r25
    4912:	8f 91       	pop	r24
    4914:	7f 91       	pop	r23
    4916:	6f 91       	pop	r22
    4918:	5f 91       	pop	r21
    491a:	4f 91       	pop	r20
    491c:	3f 91       	pop	r19
    491e:	2f 91       	pop	r18
    4920:	0f 90       	pop	r0
    4922:	0f be       	out	0x3f, r0	; 63
    4924:	0f 90       	pop	r0
    4926:	1f 90       	pop	r1
    4928:	18 95       	reti

0000492a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    492a:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <_ZN7TwoWire14rxBufferLengthE>
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	20 91 69 05 	lds	r18, 0x0569	; 0x800569 <_ZN7TwoWire13rxBufferIndexE>
    4934:	82 1b       	sub	r24, r18
    4936:	91 09       	sbc	r25, r1
    4938:	08 95       	ret

0000493a <_ZN7TwoWire4readEv>:
    493a:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <_ZN7TwoWire13rxBufferIndexE>
    493e:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <_ZN7TwoWire14rxBufferLengthE>
    4942:	98 17       	cp	r25, r24
    4944:	50 f4       	brcc	.+20     	; 0x495a <_ZN7TwoWire4readEv+0x20>
    4946:	e9 2f       	mov	r30, r25
    4948:	f0 e0       	ldi	r31, 0x00	; 0
    494a:	e6 59       	subi	r30, 0x96	; 150
    494c:	fa 4f       	sbci	r31, 0xFA	; 250
    494e:	20 81       	ld	r18, Z
    4950:	30 e0       	ldi	r19, 0x00	; 0
    4952:	9f 5f       	subi	r25, 0xFF	; 255
    4954:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <_ZN7TwoWire13rxBufferIndexE>
    4958:	02 c0       	rjmp	.+4      	; 0x495e <_ZN7TwoWire4readEv+0x24>
    495a:	2f ef       	ldi	r18, 0xFF	; 255
    495c:	3f ef       	ldi	r19, 0xFF	; 255
    495e:	c9 01       	movw	r24, r18
    4960:	08 95       	ret

00004962 <_ZN7TwoWire4peekEv>:
    4962:	e0 91 69 05 	lds	r30, 0x0569	; 0x800569 <_ZN7TwoWire13rxBufferIndexE>
    4966:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <_ZN7TwoWire14rxBufferLengthE>
    496a:	e8 17       	cp	r30, r24
    496c:	30 f4       	brcc	.+12     	; 0x497a <_ZN7TwoWire4peekEv+0x18>
    496e:	f0 e0       	ldi	r31, 0x00	; 0
    4970:	e6 59       	subi	r30, 0x96	; 150
    4972:	fa 4f       	sbci	r31, 0xFA	; 250
    4974:	80 81       	ld	r24, Z
    4976:	90 e0       	ldi	r25, 0x00	; 0
    4978:	08 95       	ret
    497a:	8f ef       	ldi	r24, 0xFF	; 255
    497c:	9f ef       	ldi	r25, 0xFF	; 255
    497e:	08 95       	ret

00004980 <_ZN7TwoWire5flushEv>:
    4980:	08 95       	ret

00004982 <_ZN7TwoWire16onReceiveServiceEPhi>:
    4982:	cf 93       	push	r28
    4984:	df 93       	push	r29
    4986:	ec 01       	movw	r28, r24
    4988:	e0 91 40 05 	lds	r30, 0x0540	; 0x800540 <_ZN7TwoWire14user_onReceiveE>
    498c:	f0 91 41 05 	lds	r31, 0x0541	; 0x800541 <_ZN7TwoWire14user_onReceiveE+0x1>
    4990:	30 97       	sbiw	r30, 0x00	; 0
    4992:	e1 f0       	breq	.+56     	; 0x49cc <_ZN7TwoWire16onReceiveServiceEPhi+0x4a>
    4994:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <_ZN7TwoWire13rxBufferIndexE>
    4998:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <_ZN7TwoWire14rxBufferLengthE>
    499c:	98 17       	cp	r25, r24
    499e:	b0 f0       	brcs	.+44     	; 0x49cc <_ZN7TwoWire16onReceiveServiceEPhi+0x4a>
    49a0:	90 e0       	ldi	r25, 0x00	; 0
    49a2:	29 2f       	mov	r18, r25
    49a4:	30 e0       	ldi	r19, 0x00	; 0
    49a6:	26 17       	cp	r18, r22
    49a8:	37 07       	cpc	r19, r23
    49aa:	54 f4       	brge	.+20     	; 0x49c0 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    49ac:	de 01       	movw	r26, r28
    49ae:	a9 0f       	add	r26, r25
    49b0:	b1 1d       	adc	r27, r1
    49b2:	4c 91       	ld	r20, X
    49b4:	d9 01       	movw	r26, r18
    49b6:	a6 59       	subi	r26, 0x96	; 150
    49b8:	ba 4f       	sbci	r27, 0xFA	; 250
    49ba:	4c 93       	st	X, r20
    49bc:	9f 5f       	subi	r25, 0xFF	; 255
    49be:	f1 cf       	rjmp	.-30     	; 0x49a2 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    49c0:	cb 01       	movw	r24, r22
    49c2:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <_ZN7TwoWire13rxBufferIndexE>
    49c6:	60 93 68 05 	sts	0x0568, r22	; 0x800568 <_ZN7TwoWire14rxBufferLengthE>
    49ca:	09 95       	icall
    49cc:	df 91       	pop	r29
    49ce:	cf 91       	pop	r28
    49d0:	08 95       	ret

000049d2 <_ZN7TwoWire16onRequestServiceEv>:
    49d2:	e0 91 42 05 	lds	r30, 0x0542	; 0x800542 <_ZN7TwoWire14user_onRequestE>
    49d6:	f0 91 43 05 	lds	r31, 0x0543	; 0x800543 <_ZN7TwoWire14user_onRequestE+0x1>
    49da:	30 97       	sbiw	r30, 0x00	; 0
    49dc:	29 f0       	breq	.+10     	; 0x49e8 <_ZN7TwoWire16onRequestServiceEv+0x16>
    49de:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <_ZN7TwoWire13txBufferIndexE>
    49e2:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <_ZN7TwoWire14txBufferLengthE>
    49e6:	09 95       	icall
    49e8:	08 95       	ret

000049ea <_ZN7TwoWire5writeEPKhj>:
    49ea:	cf 92       	push	r12
    49ec:	df 92       	push	r13
    49ee:	ef 92       	push	r14
    49f0:	ff 92       	push	r15
    49f2:	0f 93       	push	r16
    49f4:	1f 93       	push	r17
    49f6:	cf 93       	push	r28
    49f8:	df 93       	push	r29
    49fa:	8c 01       	movw	r16, r24
    49fc:	6b 01       	movw	r12, r22
    49fe:	7a 01       	movw	r14, r20
    4a00:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <_ZN7TwoWire12transmittingE>
    4a04:	88 23       	and	r24, r24
    4a06:	99 f0       	breq	.+38     	; 0x4a2e <_ZN7TwoWire5writeEPKhj+0x44>
    4a08:	c0 e0       	ldi	r28, 0x00	; 0
    4a0a:	d0 e0       	ldi	r29, 0x00	; 0
    4a0c:	ce 15       	cp	r28, r14
    4a0e:	df 05       	cpc	r29, r15
    4a10:	90 f4       	brcc	.+36     	; 0x4a36 <_ZN7TwoWire5writeEPKhj+0x4c>
    4a12:	d8 01       	movw	r26, r16
    4a14:	ed 91       	ld	r30, X+
    4a16:	fc 91       	ld	r31, X
    4a18:	01 90       	ld	r0, Z+
    4a1a:	f0 81       	ld	r31, Z
    4a1c:	e0 2d       	mov	r30, r0
    4a1e:	d6 01       	movw	r26, r12
    4a20:	ac 0f       	add	r26, r28
    4a22:	bd 1f       	adc	r27, r29
    4a24:	6c 91       	ld	r22, X
    4a26:	c8 01       	movw	r24, r16
    4a28:	09 95       	icall
    4a2a:	21 96       	adiw	r28, 0x01	; 1
    4a2c:	ef cf       	rjmp	.-34     	; 0x4a0c <_ZN7TwoWire5writeEPKhj+0x22>
    4a2e:	64 2f       	mov	r22, r20
    4a30:	c6 01       	movw	r24, r12
    4a32:	0e 94 cf 21 	call	0x439e	; 0x439e <twi_transmit>
    4a36:	c7 01       	movw	r24, r14
    4a38:	df 91       	pop	r29
    4a3a:	cf 91       	pop	r28
    4a3c:	1f 91       	pop	r17
    4a3e:	0f 91       	pop	r16
    4a40:	ff 90       	pop	r15
    4a42:	ef 90       	pop	r14
    4a44:	df 90       	pop	r13
    4a46:	cf 90       	pop	r12
    4a48:	08 95       	ret

00004a4a <_ZN7TwoWire5writeEh>:
    4a4a:	cf 93       	push	r28
    4a4c:	df 93       	push	r29
    4a4e:	1f 92       	push	r1
    4a50:	cd b7       	in	r28, 0x3d	; 61
    4a52:	de b7       	in	r29, 0x3e	; 62
    4a54:	fc 01       	movw	r30, r24
    4a56:	69 83       	std	Y+1, r22	; 0x01
    4a58:	90 91 44 05 	lds	r25, 0x0544	; 0x800544 <_ZN7TwoWire12transmittingE>
    4a5c:	99 23       	and	r25, r25
    4a5e:	d9 f0       	breq	.+54     	; 0x4a96 <_ZN7TwoWire5writeEh+0x4c>
    4a60:	90 91 45 05 	lds	r25, 0x0545	; 0x800545 <_ZN7TwoWire14txBufferLengthE>
    4a64:	90 32       	cpi	r25, 0x20	; 32
    4a66:	38 f0       	brcs	.+14     	; 0x4a76 <_ZN7TwoWire5writeEh+0x2c>
    4a68:	81 e0       	ldi	r24, 0x01	; 1
    4a6a:	90 e0       	ldi	r25, 0x00	; 0
    4a6c:	93 83       	std	Z+3, r25	; 0x03
    4a6e:	82 83       	std	Z+2, r24	; 0x02
    4a70:	80 e0       	ldi	r24, 0x00	; 0
    4a72:	90 e0       	ldi	r25, 0x00	; 0
    4a74:	17 c0       	rjmp	.+46     	; 0x4aa4 <_ZN7TwoWire5writeEh+0x5a>
    4a76:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <_ZN7TwoWire13txBufferIndexE>
    4a7a:	e8 2f       	mov	r30, r24
    4a7c:	f0 e0       	ldi	r31, 0x00	; 0
    4a7e:	e9 5b       	subi	r30, 0xB9	; 185
    4a80:	fa 4f       	sbci	r31, 0xFA	; 250
    4a82:	99 81       	ldd	r25, Y+1	; 0x01
    4a84:	90 83       	st	Z, r25
    4a86:	8f 5f       	subi	r24, 0xFF	; 255
    4a88:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <_ZN7TwoWire13txBufferIndexE>
    4a8c:	80 93 45 05 	sts	0x0545, r24	; 0x800545 <_ZN7TwoWire14txBufferLengthE>
    4a90:	81 e0       	ldi	r24, 0x01	; 1
    4a92:	90 e0       	ldi	r25, 0x00	; 0
    4a94:	07 c0       	rjmp	.+14     	; 0x4aa4 <_ZN7TwoWire5writeEh+0x5a>
    4a96:	61 e0       	ldi	r22, 0x01	; 1
    4a98:	ce 01       	movw	r24, r28
    4a9a:	01 96       	adiw	r24, 0x01	; 1
    4a9c:	0e 94 cf 21 	call	0x439e	; 0x439e <twi_transmit>
    4aa0:	81 e0       	ldi	r24, 0x01	; 1
    4aa2:	90 e0       	ldi	r25, 0x00	; 0
    4aa4:	0f 90       	pop	r0
    4aa6:	df 91       	pop	r29
    4aa8:	cf 91       	pop	r28
    4aaa:	08 95       	ret

00004aac <_ZN7TwoWireC1Ev>:
    4aac:	fc 01       	movw	r30, r24
    4aae:	13 82       	std	Z+3, r1	; 0x03
    4ab0:	12 82       	std	Z+2, r1	; 0x02
    4ab2:	88 ee       	ldi	r24, 0xE8	; 232
    4ab4:	93 e0       	ldi	r25, 0x03	; 3
    4ab6:	a0 e0       	ldi	r26, 0x00	; 0
    4ab8:	b0 e0       	ldi	r27, 0x00	; 0
    4aba:	84 83       	std	Z+4, r24	; 0x04
    4abc:	95 83       	std	Z+5, r25	; 0x05
    4abe:	a6 83       	std	Z+6, r26	; 0x06
    4ac0:	b7 83       	std	Z+7, r27	; 0x07
    4ac2:	8d e2       	ldi	r24, 0x2D	; 45
    4ac4:	92 e0       	ldi	r25, 0x02	; 2
    4ac6:	91 83       	std	Z+1, r25	; 0x01
    4ac8:	80 83       	st	Z, r24
    4aca:	08 95       	ret

00004acc <_Z41__static_initialization_and_destruction_0ii>:
    4acc:	01 97       	sbiw	r24, 0x01	; 1
    4ace:	39 f4       	brne	.+14     	; 0x4ade <_Z41__static_initialization_and_destruction_0ii+0x12>
    4ad0:	6f 3f       	cpi	r22, 0xFF	; 255
    4ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ad4:	21 f4       	brne	.+8      	; 0x4ade <_Z41__static_initialization_and_destruction_0ii+0x12>
    4ad6:	84 e3       	ldi	r24, 0x34	; 52
    4ad8:	95 e0       	ldi	r25, 0x05	; 5
    4ada:	0e 94 56 25 	call	0x4aac	; 0x4aac <_ZN7TwoWireC1Ev>
    4ade:	08 95       	ret

00004ae0 <_ZN7TwoWire5beginEv>:
    4ae0:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <_ZN7TwoWire13rxBufferIndexE>
    4ae4:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <_ZN7TwoWire14rxBufferLengthE>
    4ae8:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <_ZN7TwoWire13txBufferIndexE>
    4aec:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <_ZN7TwoWire14txBufferLengthE>
    4af0:	0e 94 a3 21 	call	0x4346	; 0x4346 <twi_init>
    4af4:	89 ee       	ldi	r24, 0xE9	; 233
    4af6:	94 e2       	ldi	r25, 0x24	; 36
    4af8:	0e 94 00 22 	call	0x4400	; 0x4400 <twi_attachSlaveTxEvent>
    4afc:	81 ec       	ldi	r24, 0xC1	; 193
    4afe:	94 e2       	ldi	r25, 0x24	; 36
    4b00:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <twi_attachSlaveRxEvent>
    4b04:	08 95       	ret

00004b06 <_ZN7TwoWire17beginTransmissionEh>:
    4b06:	81 e0       	ldi	r24, 0x01	; 1
    4b08:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <_ZN7TwoWire12transmittingE>
    4b0c:	60 93 67 05 	sts	0x0567, r22	; 0x800567 <_ZN7TwoWire9txAddressE>
    4b10:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <_ZN7TwoWire13txBufferIndexE>
    4b14:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <_ZN7TwoWire14txBufferLengthE>
    4b18:	08 95       	ret

00004b1a <_ZN7TwoWire15endTransmissionEh>:
    4b1a:	0f 93       	push	r16
    4b1c:	40 91 45 05 	lds	r20, 0x0545	; 0x800545 <_ZN7TwoWire14txBufferLengthE>
    4b20:	06 2f       	mov	r16, r22
    4b22:	21 e0       	ldi	r18, 0x01	; 1
    4b24:	67 e4       	ldi	r22, 0x47	; 71
    4b26:	75 e0       	ldi	r23, 0x05	; 5
    4b28:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <_ZN7TwoWire9txAddressE>
    4b2c:	0e 94 35 22 	call	0x446a	; 0x446a <twi_writeTo>
    4b30:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <_ZN7TwoWire13txBufferIndexE>
    4b34:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <_ZN7TwoWire14txBufferLengthE>
    4b38:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <_ZN7TwoWire12transmittingE>
    4b3c:	0f 91       	pop	r16
    4b3e:	08 95       	ret

00004b40 <_ZN7TwoWire15endTransmissionEv>:
    4b40:	61 e0       	ldi	r22, 0x01	; 1
    4b42:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <_ZN7TwoWire15endTransmissionEh>
    4b46:	08 95       	ret

00004b48 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    4b48:	6f ef       	ldi	r22, 0xFF	; 255
    4b4a:	7f ef       	ldi	r23, 0xFF	; 255
    4b4c:	81 e0       	ldi	r24, 0x01	; 1
    4b4e:	90 e0       	ldi	r25, 0x00	; 0
    4b50:	0e 94 66 25 	call	0x4acc	; 0x4acc <_Z41__static_initialization_and_destruction_0ii>
    4b54:	08 95       	ret

00004b56 <__subsf3>:
    4b56:	50 58       	subi	r21, 0x80	; 128

00004b58 <__addsf3>:
    4b58:	bb 27       	eor	r27, r27
    4b5a:	aa 27       	eor	r26, r26
    4b5c:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <__addsf3x>
    4b60:	0c 94 0d 27 	jmp	0x4e1a	; 0x4e1a <__fp_round>
    4b64:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <__fp_pscA>
    4b68:	38 f0       	brcs	.+14     	; 0x4b78 <__addsf3+0x20>
    4b6a:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <__fp_pscB>
    4b6e:	20 f0       	brcs	.+8      	; 0x4b78 <__addsf3+0x20>
    4b70:	39 f4       	brne	.+14     	; 0x4b80 <__addsf3+0x28>
    4b72:	9f 3f       	cpi	r25, 0xFF	; 255
    4b74:	19 f4       	brne	.+6      	; 0x4b7c <__addsf3+0x24>
    4b76:	26 f4       	brtc	.+8      	; 0x4b80 <__addsf3+0x28>
    4b78:	0c 94 fc 26 	jmp	0x4df8	; 0x4df8 <__fp_nan>
    4b7c:	0e f4       	brtc	.+2      	; 0x4b80 <__addsf3+0x28>
    4b7e:	e0 95       	com	r30
    4b80:	e7 fb       	bst	r30, 7
    4b82:	0c 94 f6 26 	jmp	0x4dec	; 0x4dec <__fp_inf>

00004b86 <__addsf3x>:
    4b86:	e9 2f       	mov	r30, r25
    4b88:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <__fp_split3>
    4b8c:	58 f3       	brcs	.-42     	; 0x4b64 <__addsf3+0xc>
    4b8e:	ba 17       	cp	r27, r26
    4b90:	62 07       	cpc	r22, r18
    4b92:	73 07       	cpc	r23, r19
    4b94:	84 07       	cpc	r24, r20
    4b96:	95 07       	cpc	r25, r21
    4b98:	20 f0       	brcs	.+8      	; 0x4ba2 <__addsf3x+0x1c>
    4b9a:	79 f4       	brne	.+30     	; 0x4bba <__addsf3x+0x34>
    4b9c:	a6 f5       	brtc	.+104    	; 0x4c06 <__addsf3x+0x80>
    4b9e:	0c 94 40 27 	jmp	0x4e80	; 0x4e80 <__fp_zero>
    4ba2:	0e f4       	brtc	.+2      	; 0x4ba6 <__addsf3x+0x20>
    4ba4:	e0 95       	com	r30
    4ba6:	0b 2e       	mov	r0, r27
    4ba8:	ba 2f       	mov	r27, r26
    4baa:	a0 2d       	mov	r26, r0
    4bac:	0b 01       	movw	r0, r22
    4bae:	b9 01       	movw	r22, r18
    4bb0:	90 01       	movw	r18, r0
    4bb2:	0c 01       	movw	r0, r24
    4bb4:	ca 01       	movw	r24, r20
    4bb6:	a0 01       	movw	r20, r0
    4bb8:	11 24       	eor	r1, r1
    4bba:	ff 27       	eor	r31, r31
    4bbc:	59 1b       	sub	r21, r25
    4bbe:	99 f0       	breq	.+38     	; 0x4be6 <__addsf3x+0x60>
    4bc0:	59 3f       	cpi	r21, 0xF9	; 249
    4bc2:	50 f4       	brcc	.+20     	; 0x4bd8 <__addsf3x+0x52>
    4bc4:	50 3e       	cpi	r21, 0xE0	; 224
    4bc6:	68 f1       	brcs	.+90     	; 0x4c22 <__addsf3x+0x9c>
    4bc8:	1a 16       	cp	r1, r26
    4bca:	f0 40       	sbci	r31, 0x00	; 0
    4bcc:	a2 2f       	mov	r26, r18
    4bce:	23 2f       	mov	r18, r19
    4bd0:	34 2f       	mov	r19, r20
    4bd2:	44 27       	eor	r20, r20
    4bd4:	58 5f       	subi	r21, 0xF8	; 248
    4bd6:	f3 cf       	rjmp	.-26     	; 0x4bbe <__addsf3x+0x38>
    4bd8:	46 95       	lsr	r20
    4bda:	37 95       	ror	r19
    4bdc:	27 95       	ror	r18
    4bde:	a7 95       	ror	r26
    4be0:	f0 40       	sbci	r31, 0x00	; 0
    4be2:	53 95       	inc	r21
    4be4:	c9 f7       	brne	.-14     	; 0x4bd8 <__addsf3x+0x52>
    4be6:	7e f4       	brtc	.+30     	; 0x4c06 <__addsf3x+0x80>
    4be8:	1f 16       	cp	r1, r31
    4bea:	ba 0b       	sbc	r27, r26
    4bec:	62 0b       	sbc	r22, r18
    4bee:	73 0b       	sbc	r23, r19
    4bf0:	84 0b       	sbc	r24, r20
    4bf2:	ba f0       	brmi	.+46     	; 0x4c22 <__addsf3x+0x9c>
    4bf4:	91 50       	subi	r25, 0x01	; 1
    4bf6:	a1 f0       	breq	.+40     	; 0x4c20 <__addsf3x+0x9a>
    4bf8:	ff 0f       	add	r31, r31
    4bfa:	bb 1f       	adc	r27, r27
    4bfc:	66 1f       	adc	r22, r22
    4bfe:	77 1f       	adc	r23, r23
    4c00:	88 1f       	adc	r24, r24
    4c02:	c2 f7       	brpl	.-16     	; 0x4bf4 <__addsf3x+0x6e>
    4c04:	0e c0       	rjmp	.+28     	; 0x4c22 <__addsf3x+0x9c>
    4c06:	ba 0f       	add	r27, r26
    4c08:	62 1f       	adc	r22, r18
    4c0a:	73 1f       	adc	r23, r19
    4c0c:	84 1f       	adc	r24, r20
    4c0e:	48 f4       	brcc	.+18     	; 0x4c22 <__addsf3x+0x9c>
    4c10:	87 95       	ror	r24
    4c12:	77 95       	ror	r23
    4c14:	67 95       	ror	r22
    4c16:	b7 95       	ror	r27
    4c18:	f7 95       	ror	r31
    4c1a:	9e 3f       	cpi	r25, 0xFE	; 254
    4c1c:	08 f0       	brcs	.+2      	; 0x4c20 <__addsf3x+0x9a>
    4c1e:	b0 cf       	rjmp	.-160    	; 0x4b80 <__addsf3+0x28>
    4c20:	93 95       	inc	r25
    4c22:	88 0f       	add	r24, r24
    4c24:	08 f0       	brcs	.+2      	; 0x4c28 <__addsf3x+0xa2>
    4c26:	99 27       	eor	r25, r25
    4c28:	ee 0f       	add	r30, r30
    4c2a:	97 95       	ror	r25
    4c2c:	87 95       	ror	r24
    4c2e:	08 95       	ret

00004c30 <__divsf3>:
    4c30:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <__divsf3x>
    4c34:	0c 94 0d 27 	jmp	0x4e1a	; 0x4e1a <__fp_round>
    4c38:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <__fp_pscB>
    4c3c:	58 f0       	brcs	.+22     	; 0x4c54 <__divsf3+0x24>
    4c3e:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <__fp_pscA>
    4c42:	40 f0       	brcs	.+16     	; 0x4c54 <__divsf3+0x24>
    4c44:	29 f4       	brne	.+10     	; 0x4c50 <__divsf3+0x20>
    4c46:	5f 3f       	cpi	r21, 0xFF	; 255
    4c48:	29 f0       	breq	.+10     	; 0x4c54 <__divsf3+0x24>
    4c4a:	0c 94 f6 26 	jmp	0x4dec	; 0x4dec <__fp_inf>
    4c4e:	51 11       	cpse	r21, r1
    4c50:	0c 94 41 27 	jmp	0x4e82	; 0x4e82 <__fp_szero>
    4c54:	0c 94 fc 26 	jmp	0x4df8	; 0x4df8 <__fp_nan>

00004c58 <__divsf3x>:
    4c58:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <__fp_split3>
    4c5c:	68 f3       	brcs	.-38     	; 0x4c38 <__divsf3+0x8>

00004c5e <__divsf3_pse>:
    4c5e:	99 23       	and	r25, r25
    4c60:	b1 f3       	breq	.-20     	; 0x4c4e <__divsf3+0x1e>
    4c62:	55 23       	and	r21, r21
    4c64:	91 f3       	breq	.-28     	; 0x4c4a <__divsf3+0x1a>
    4c66:	95 1b       	sub	r25, r21
    4c68:	55 0b       	sbc	r21, r21
    4c6a:	bb 27       	eor	r27, r27
    4c6c:	aa 27       	eor	r26, r26
    4c6e:	62 17       	cp	r22, r18
    4c70:	73 07       	cpc	r23, r19
    4c72:	84 07       	cpc	r24, r20
    4c74:	38 f0       	brcs	.+14     	; 0x4c84 <__divsf3_pse+0x26>
    4c76:	9f 5f       	subi	r25, 0xFF	; 255
    4c78:	5f 4f       	sbci	r21, 0xFF	; 255
    4c7a:	22 0f       	add	r18, r18
    4c7c:	33 1f       	adc	r19, r19
    4c7e:	44 1f       	adc	r20, r20
    4c80:	aa 1f       	adc	r26, r26
    4c82:	a9 f3       	breq	.-22     	; 0x4c6e <__divsf3_pse+0x10>
    4c84:	35 d0       	rcall	.+106    	; 0x4cf0 <__divsf3_pse+0x92>
    4c86:	0e 2e       	mov	r0, r30
    4c88:	3a f0       	brmi	.+14     	; 0x4c98 <__divsf3_pse+0x3a>
    4c8a:	e0 e8       	ldi	r30, 0x80	; 128
    4c8c:	32 d0       	rcall	.+100    	; 0x4cf2 <__divsf3_pse+0x94>
    4c8e:	91 50       	subi	r25, 0x01	; 1
    4c90:	50 40       	sbci	r21, 0x00	; 0
    4c92:	e6 95       	lsr	r30
    4c94:	00 1c       	adc	r0, r0
    4c96:	ca f7       	brpl	.-14     	; 0x4c8a <__divsf3_pse+0x2c>
    4c98:	2b d0       	rcall	.+86     	; 0x4cf0 <__divsf3_pse+0x92>
    4c9a:	fe 2f       	mov	r31, r30
    4c9c:	29 d0       	rcall	.+82     	; 0x4cf0 <__divsf3_pse+0x92>
    4c9e:	66 0f       	add	r22, r22
    4ca0:	77 1f       	adc	r23, r23
    4ca2:	88 1f       	adc	r24, r24
    4ca4:	bb 1f       	adc	r27, r27
    4ca6:	26 17       	cp	r18, r22
    4ca8:	37 07       	cpc	r19, r23
    4caa:	48 07       	cpc	r20, r24
    4cac:	ab 07       	cpc	r26, r27
    4cae:	b0 e8       	ldi	r27, 0x80	; 128
    4cb0:	09 f0       	breq	.+2      	; 0x4cb4 <__divsf3_pse+0x56>
    4cb2:	bb 0b       	sbc	r27, r27
    4cb4:	80 2d       	mov	r24, r0
    4cb6:	bf 01       	movw	r22, r30
    4cb8:	ff 27       	eor	r31, r31
    4cba:	93 58       	subi	r25, 0x83	; 131
    4cbc:	5f 4f       	sbci	r21, 0xFF	; 255
    4cbe:	3a f0       	brmi	.+14     	; 0x4cce <__divsf3_pse+0x70>
    4cc0:	9e 3f       	cpi	r25, 0xFE	; 254
    4cc2:	51 05       	cpc	r21, r1
    4cc4:	78 f0       	brcs	.+30     	; 0x4ce4 <__divsf3_pse+0x86>
    4cc6:	0c 94 f6 26 	jmp	0x4dec	; 0x4dec <__fp_inf>
    4cca:	0c 94 41 27 	jmp	0x4e82	; 0x4e82 <__fp_szero>
    4cce:	5f 3f       	cpi	r21, 0xFF	; 255
    4cd0:	e4 f3       	brlt	.-8      	; 0x4cca <__divsf3_pse+0x6c>
    4cd2:	98 3e       	cpi	r25, 0xE8	; 232
    4cd4:	d4 f3       	brlt	.-12     	; 0x4cca <__divsf3_pse+0x6c>
    4cd6:	86 95       	lsr	r24
    4cd8:	77 95       	ror	r23
    4cda:	67 95       	ror	r22
    4cdc:	b7 95       	ror	r27
    4cde:	f7 95       	ror	r31
    4ce0:	9f 5f       	subi	r25, 0xFF	; 255
    4ce2:	c9 f7       	brne	.-14     	; 0x4cd6 <__divsf3_pse+0x78>
    4ce4:	88 0f       	add	r24, r24
    4ce6:	91 1d       	adc	r25, r1
    4ce8:	96 95       	lsr	r25
    4cea:	87 95       	ror	r24
    4cec:	97 f9       	bld	r25, 7
    4cee:	08 95       	ret
    4cf0:	e1 e0       	ldi	r30, 0x01	; 1
    4cf2:	66 0f       	add	r22, r22
    4cf4:	77 1f       	adc	r23, r23
    4cf6:	88 1f       	adc	r24, r24
    4cf8:	bb 1f       	adc	r27, r27
    4cfa:	62 17       	cp	r22, r18
    4cfc:	73 07       	cpc	r23, r19
    4cfe:	84 07       	cpc	r24, r20
    4d00:	ba 07       	cpc	r27, r26
    4d02:	20 f0       	brcs	.+8      	; 0x4d0c <__divsf3_pse+0xae>
    4d04:	62 1b       	sub	r22, r18
    4d06:	73 0b       	sbc	r23, r19
    4d08:	84 0b       	sbc	r24, r20
    4d0a:	ba 0b       	sbc	r27, r26
    4d0c:	ee 1f       	adc	r30, r30
    4d0e:	88 f7       	brcc	.-30     	; 0x4cf2 <__divsf3_pse+0x94>
    4d10:	e0 95       	com	r30
    4d12:	08 95       	ret

00004d14 <__fixunssfsi>:
    4d14:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <__fp_splitA>
    4d18:	88 f0       	brcs	.+34     	; 0x4d3c <__fixunssfsi+0x28>
    4d1a:	9f 57       	subi	r25, 0x7F	; 127
    4d1c:	98 f0       	brcs	.+38     	; 0x4d44 <__fixunssfsi+0x30>
    4d1e:	b9 2f       	mov	r27, r25
    4d20:	99 27       	eor	r25, r25
    4d22:	b7 51       	subi	r27, 0x17	; 23
    4d24:	b0 f0       	brcs	.+44     	; 0x4d52 <__fixunssfsi+0x3e>
    4d26:	e1 f0       	breq	.+56     	; 0x4d60 <__fixunssfsi+0x4c>
    4d28:	66 0f       	add	r22, r22
    4d2a:	77 1f       	adc	r23, r23
    4d2c:	88 1f       	adc	r24, r24
    4d2e:	99 1f       	adc	r25, r25
    4d30:	1a f0       	brmi	.+6      	; 0x4d38 <__fixunssfsi+0x24>
    4d32:	ba 95       	dec	r27
    4d34:	c9 f7       	brne	.-14     	; 0x4d28 <__fixunssfsi+0x14>
    4d36:	14 c0       	rjmp	.+40     	; 0x4d60 <__fixunssfsi+0x4c>
    4d38:	b1 30       	cpi	r27, 0x01	; 1
    4d3a:	91 f0       	breq	.+36     	; 0x4d60 <__fixunssfsi+0x4c>
    4d3c:	0e 94 40 27 	call	0x4e80	; 0x4e80 <__fp_zero>
    4d40:	b1 e0       	ldi	r27, 0x01	; 1
    4d42:	08 95       	ret
    4d44:	0c 94 40 27 	jmp	0x4e80	; 0x4e80 <__fp_zero>
    4d48:	67 2f       	mov	r22, r23
    4d4a:	78 2f       	mov	r23, r24
    4d4c:	88 27       	eor	r24, r24
    4d4e:	b8 5f       	subi	r27, 0xF8	; 248
    4d50:	39 f0       	breq	.+14     	; 0x4d60 <__fixunssfsi+0x4c>
    4d52:	b9 3f       	cpi	r27, 0xF9	; 249
    4d54:	cc f3       	brlt	.-14     	; 0x4d48 <__fixunssfsi+0x34>
    4d56:	86 95       	lsr	r24
    4d58:	77 95       	ror	r23
    4d5a:	67 95       	ror	r22
    4d5c:	b3 95       	inc	r27
    4d5e:	d9 f7       	brne	.-10     	; 0x4d56 <__fixunssfsi+0x42>
    4d60:	3e f4       	brtc	.+14     	; 0x4d70 <__fixunssfsi+0x5c>
    4d62:	90 95       	com	r25
    4d64:	80 95       	com	r24
    4d66:	70 95       	com	r23
    4d68:	61 95       	neg	r22
    4d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    4d6c:	8f 4f       	sbci	r24, 0xFF	; 255
    4d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    4d70:	08 95       	ret

00004d72 <__floatunsisf>:
    4d72:	e8 94       	clt
    4d74:	09 c0       	rjmp	.+18     	; 0x4d88 <__floatsisf+0x12>

00004d76 <__floatsisf>:
    4d76:	97 fb       	bst	r25, 7
    4d78:	3e f4       	brtc	.+14     	; 0x4d88 <__floatsisf+0x12>
    4d7a:	90 95       	com	r25
    4d7c:	80 95       	com	r24
    4d7e:	70 95       	com	r23
    4d80:	61 95       	neg	r22
    4d82:	7f 4f       	sbci	r23, 0xFF	; 255
    4d84:	8f 4f       	sbci	r24, 0xFF	; 255
    4d86:	9f 4f       	sbci	r25, 0xFF	; 255
    4d88:	99 23       	and	r25, r25
    4d8a:	a9 f0       	breq	.+42     	; 0x4db6 <__floatsisf+0x40>
    4d8c:	f9 2f       	mov	r31, r25
    4d8e:	96 e9       	ldi	r25, 0x96	; 150
    4d90:	bb 27       	eor	r27, r27
    4d92:	93 95       	inc	r25
    4d94:	f6 95       	lsr	r31
    4d96:	87 95       	ror	r24
    4d98:	77 95       	ror	r23
    4d9a:	67 95       	ror	r22
    4d9c:	b7 95       	ror	r27
    4d9e:	f1 11       	cpse	r31, r1
    4da0:	f8 cf       	rjmp	.-16     	; 0x4d92 <__floatsisf+0x1c>
    4da2:	fa f4       	brpl	.+62     	; 0x4de2 <__floatsisf+0x6c>
    4da4:	bb 0f       	add	r27, r27
    4da6:	11 f4       	brne	.+4      	; 0x4dac <__floatsisf+0x36>
    4da8:	60 ff       	sbrs	r22, 0
    4daa:	1b c0       	rjmp	.+54     	; 0x4de2 <__floatsisf+0x6c>
    4dac:	6f 5f       	subi	r22, 0xFF	; 255
    4dae:	7f 4f       	sbci	r23, 0xFF	; 255
    4db0:	8f 4f       	sbci	r24, 0xFF	; 255
    4db2:	9f 4f       	sbci	r25, 0xFF	; 255
    4db4:	16 c0       	rjmp	.+44     	; 0x4de2 <__floatsisf+0x6c>
    4db6:	88 23       	and	r24, r24
    4db8:	11 f0       	breq	.+4      	; 0x4dbe <__floatsisf+0x48>
    4dba:	96 e9       	ldi	r25, 0x96	; 150
    4dbc:	11 c0       	rjmp	.+34     	; 0x4de0 <__floatsisf+0x6a>
    4dbe:	77 23       	and	r23, r23
    4dc0:	21 f0       	breq	.+8      	; 0x4dca <__floatsisf+0x54>
    4dc2:	9e e8       	ldi	r25, 0x8E	; 142
    4dc4:	87 2f       	mov	r24, r23
    4dc6:	76 2f       	mov	r23, r22
    4dc8:	05 c0       	rjmp	.+10     	; 0x4dd4 <__floatsisf+0x5e>
    4dca:	66 23       	and	r22, r22
    4dcc:	71 f0       	breq	.+28     	; 0x4dea <__floatsisf+0x74>
    4dce:	96 e8       	ldi	r25, 0x86	; 134
    4dd0:	86 2f       	mov	r24, r22
    4dd2:	70 e0       	ldi	r23, 0x00	; 0
    4dd4:	60 e0       	ldi	r22, 0x00	; 0
    4dd6:	2a f0       	brmi	.+10     	; 0x4de2 <__floatsisf+0x6c>
    4dd8:	9a 95       	dec	r25
    4dda:	66 0f       	add	r22, r22
    4ddc:	77 1f       	adc	r23, r23
    4dde:	88 1f       	adc	r24, r24
    4de0:	da f7       	brpl	.-10     	; 0x4dd8 <__floatsisf+0x62>
    4de2:	88 0f       	add	r24, r24
    4de4:	96 95       	lsr	r25
    4de6:	87 95       	ror	r24
    4de8:	97 f9       	bld	r25, 7
    4dea:	08 95       	ret

00004dec <__fp_inf>:
    4dec:	97 f9       	bld	r25, 7
    4dee:	9f 67       	ori	r25, 0x7F	; 127
    4df0:	80 e8       	ldi	r24, 0x80	; 128
    4df2:	70 e0       	ldi	r23, 0x00	; 0
    4df4:	60 e0       	ldi	r22, 0x00	; 0
    4df6:	08 95       	ret

00004df8 <__fp_nan>:
    4df8:	9f ef       	ldi	r25, 0xFF	; 255
    4dfa:	80 ec       	ldi	r24, 0xC0	; 192
    4dfc:	08 95       	ret

00004dfe <__fp_pscA>:
    4dfe:	00 24       	eor	r0, r0
    4e00:	0a 94       	dec	r0
    4e02:	16 16       	cp	r1, r22
    4e04:	17 06       	cpc	r1, r23
    4e06:	18 06       	cpc	r1, r24
    4e08:	09 06       	cpc	r0, r25
    4e0a:	08 95       	ret

00004e0c <__fp_pscB>:
    4e0c:	00 24       	eor	r0, r0
    4e0e:	0a 94       	dec	r0
    4e10:	12 16       	cp	r1, r18
    4e12:	13 06       	cpc	r1, r19
    4e14:	14 06       	cpc	r1, r20
    4e16:	05 06       	cpc	r0, r21
    4e18:	08 95       	ret

00004e1a <__fp_round>:
    4e1a:	09 2e       	mov	r0, r25
    4e1c:	03 94       	inc	r0
    4e1e:	00 0c       	add	r0, r0
    4e20:	11 f4       	brne	.+4      	; 0x4e26 <__fp_round+0xc>
    4e22:	88 23       	and	r24, r24
    4e24:	52 f0       	brmi	.+20     	; 0x4e3a <__fp_round+0x20>
    4e26:	bb 0f       	add	r27, r27
    4e28:	40 f4       	brcc	.+16     	; 0x4e3a <__fp_round+0x20>
    4e2a:	bf 2b       	or	r27, r31
    4e2c:	11 f4       	brne	.+4      	; 0x4e32 <__fp_round+0x18>
    4e2e:	60 ff       	sbrs	r22, 0
    4e30:	04 c0       	rjmp	.+8      	; 0x4e3a <__fp_round+0x20>
    4e32:	6f 5f       	subi	r22, 0xFF	; 255
    4e34:	7f 4f       	sbci	r23, 0xFF	; 255
    4e36:	8f 4f       	sbci	r24, 0xFF	; 255
    4e38:	9f 4f       	sbci	r25, 0xFF	; 255
    4e3a:	08 95       	ret

00004e3c <__fp_split3>:
    4e3c:	57 fd       	sbrc	r21, 7
    4e3e:	90 58       	subi	r25, 0x80	; 128
    4e40:	44 0f       	add	r20, r20
    4e42:	55 1f       	adc	r21, r21
    4e44:	59 f0       	breq	.+22     	; 0x4e5c <__fp_splitA+0x10>
    4e46:	5f 3f       	cpi	r21, 0xFF	; 255
    4e48:	71 f0       	breq	.+28     	; 0x4e66 <__fp_splitA+0x1a>
    4e4a:	47 95       	ror	r20

00004e4c <__fp_splitA>:
    4e4c:	88 0f       	add	r24, r24
    4e4e:	97 fb       	bst	r25, 7
    4e50:	99 1f       	adc	r25, r25
    4e52:	61 f0       	breq	.+24     	; 0x4e6c <__fp_splitA+0x20>
    4e54:	9f 3f       	cpi	r25, 0xFF	; 255
    4e56:	79 f0       	breq	.+30     	; 0x4e76 <__fp_splitA+0x2a>
    4e58:	87 95       	ror	r24
    4e5a:	08 95       	ret
    4e5c:	12 16       	cp	r1, r18
    4e5e:	13 06       	cpc	r1, r19
    4e60:	14 06       	cpc	r1, r20
    4e62:	55 1f       	adc	r21, r21
    4e64:	f2 cf       	rjmp	.-28     	; 0x4e4a <__fp_split3+0xe>
    4e66:	46 95       	lsr	r20
    4e68:	f1 df       	rcall	.-30     	; 0x4e4c <__fp_splitA>
    4e6a:	08 c0       	rjmp	.+16     	; 0x4e7c <__fp_splitA+0x30>
    4e6c:	16 16       	cp	r1, r22
    4e6e:	17 06       	cpc	r1, r23
    4e70:	18 06       	cpc	r1, r24
    4e72:	99 1f       	adc	r25, r25
    4e74:	f1 cf       	rjmp	.-30     	; 0x4e58 <__fp_splitA+0xc>
    4e76:	86 95       	lsr	r24
    4e78:	71 05       	cpc	r23, r1
    4e7a:	61 05       	cpc	r22, r1
    4e7c:	08 94       	sec
    4e7e:	08 95       	ret

00004e80 <__fp_zero>:
    4e80:	e8 94       	clt

00004e82 <__fp_szero>:
    4e82:	bb 27       	eor	r27, r27
    4e84:	66 27       	eor	r22, r22
    4e86:	77 27       	eor	r23, r23
    4e88:	cb 01       	movw	r24, r22
    4e8a:	97 f9       	bld	r25, 7
    4e8c:	08 95       	ret

00004e8e <__mulsf3>:
    4e8e:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <__mulsf3x>
    4e92:	0c 94 0d 27 	jmp	0x4e1a	; 0x4e1a <__fp_round>
    4e96:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <__fp_pscA>
    4e9a:	38 f0       	brcs	.+14     	; 0x4eaa <__mulsf3+0x1c>
    4e9c:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <__fp_pscB>
    4ea0:	20 f0       	brcs	.+8      	; 0x4eaa <__mulsf3+0x1c>
    4ea2:	95 23       	and	r25, r21
    4ea4:	11 f0       	breq	.+4      	; 0x4eaa <__mulsf3+0x1c>
    4ea6:	0c 94 f6 26 	jmp	0x4dec	; 0x4dec <__fp_inf>
    4eaa:	0c 94 fc 26 	jmp	0x4df8	; 0x4df8 <__fp_nan>
    4eae:	11 24       	eor	r1, r1
    4eb0:	0c 94 41 27 	jmp	0x4e82	; 0x4e82 <__fp_szero>

00004eb4 <__mulsf3x>:
    4eb4:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <__fp_split3>
    4eb8:	70 f3       	brcs	.-36     	; 0x4e96 <__mulsf3+0x8>

00004eba <__mulsf3_pse>:
    4eba:	95 9f       	mul	r25, r21
    4ebc:	c1 f3       	breq	.-16     	; 0x4eae <__mulsf3+0x20>
    4ebe:	95 0f       	add	r25, r21
    4ec0:	50 e0       	ldi	r21, 0x00	; 0
    4ec2:	55 1f       	adc	r21, r21
    4ec4:	62 9f       	mul	r22, r18
    4ec6:	f0 01       	movw	r30, r0
    4ec8:	72 9f       	mul	r23, r18
    4eca:	bb 27       	eor	r27, r27
    4ecc:	f0 0d       	add	r31, r0
    4ece:	b1 1d       	adc	r27, r1
    4ed0:	63 9f       	mul	r22, r19
    4ed2:	aa 27       	eor	r26, r26
    4ed4:	f0 0d       	add	r31, r0
    4ed6:	b1 1d       	adc	r27, r1
    4ed8:	aa 1f       	adc	r26, r26
    4eda:	64 9f       	mul	r22, r20
    4edc:	66 27       	eor	r22, r22
    4ede:	b0 0d       	add	r27, r0
    4ee0:	a1 1d       	adc	r26, r1
    4ee2:	66 1f       	adc	r22, r22
    4ee4:	82 9f       	mul	r24, r18
    4ee6:	22 27       	eor	r18, r18
    4ee8:	b0 0d       	add	r27, r0
    4eea:	a1 1d       	adc	r26, r1
    4eec:	62 1f       	adc	r22, r18
    4eee:	73 9f       	mul	r23, r19
    4ef0:	b0 0d       	add	r27, r0
    4ef2:	a1 1d       	adc	r26, r1
    4ef4:	62 1f       	adc	r22, r18
    4ef6:	83 9f       	mul	r24, r19
    4ef8:	a0 0d       	add	r26, r0
    4efa:	61 1d       	adc	r22, r1
    4efc:	22 1f       	adc	r18, r18
    4efe:	74 9f       	mul	r23, r20
    4f00:	33 27       	eor	r19, r19
    4f02:	a0 0d       	add	r26, r0
    4f04:	61 1d       	adc	r22, r1
    4f06:	23 1f       	adc	r18, r19
    4f08:	84 9f       	mul	r24, r20
    4f0a:	60 0d       	add	r22, r0
    4f0c:	21 1d       	adc	r18, r1
    4f0e:	82 2f       	mov	r24, r18
    4f10:	76 2f       	mov	r23, r22
    4f12:	6a 2f       	mov	r22, r26
    4f14:	11 24       	eor	r1, r1
    4f16:	9f 57       	subi	r25, 0x7F	; 127
    4f18:	50 40       	sbci	r21, 0x00	; 0
    4f1a:	9a f0       	brmi	.+38     	; 0x4f42 <__mulsf3_pse+0x88>
    4f1c:	f1 f0       	breq	.+60     	; 0x4f5a <__mulsf3_pse+0xa0>
    4f1e:	88 23       	and	r24, r24
    4f20:	4a f0       	brmi	.+18     	; 0x4f34 <__mulsf3_pse+0x7a>
    4f22:	ee 0f       	add	r30, r30
    4f24:	ff 1f       	adc	r31, r31
    4f26:	bb 1f       	adc	r27, r27
    4f28:	66 1f       	adc	r22, r22
    4f2a:	77 1f       	adc	r23, r23
    4f2c:	88 1f       	adc	r24, r24
    4f2e:	91 50       	subi	r25, 0x01	; 1
    4f30:	50 40       	sbci	r21, 0x00	; 0
    4f32:	a9 f7       	brne	.-22     	; 0x4f1e <__mulsf3_pse+0x64>
    4f34:	9e 3f       	cpi	r25, 0xFE	; 254
    4f36:	51 05       	cpc	r21, r1
    4f38:	80 f0       	brcs	.+32     	; 0x4f5a <__mulsf3_pse+0xa0>
    4f3a:	0c 94 f6 26 	jmp	0x4dec	; 0x4dec <__fp_inf>
    4f3e:	0c 94 41 27 	jmp	0x4e82	; 0x4e82 <__fp_szero>
    4f42:	5f 3f       	cpi	r21, 0xFF	; 255
    4f44:	e4 f3       	brlt	.-8      	; 0x4f3e <__mulsf3_pse+0x84>
    4f46:	98 3e       	cpi	r25, 0xE8	; 232
    4f48:	d4 f3       	brlt	.-12     	; 0x4f3e <__mulsf3_pse+0x84>
    4f4a:	86 95       	lsr	r24
    4f4c:	77 95       	ror	r23
    4f4e:	67 95       	ror	r22
    4f50:	b7 95       	ror	r27
    4f52:	f7 95       	ror	r31
    4f54:	e7 95       	ror	r30
    4f56:	9f 5f       	subi	r25, 0xFF	; 255
    4f58:	c1 f7       	brne	.-16     	; 0x4f4a <__mulsf3_pse+0x90>
    4f5a:	fe 2b       	or	r31, r30
    4f5c:	88 0f       	add	r24, r24
    4f5e:	91 1d       	adc	r25, r1
    4f60:	96 95       	lsr	r25
    4f62:	87 95       	ror	r24
    4f64:	97 f9       	bld	r25, 7
    4f66:	08 95       	ret

00004f68 <__divmodhi4>:
    4f68:	97 fb       	bst	r25, 7
    4f6a:	07 2e       	mov	r0, r23
    4f6c:	16 f4       	brtc	.+4      	; 0x4f72 <__divmodhi4+0xa>
    4f6e:	00 94       	com	r0
    4f70:	07 d0       	rcall	.+14     	; 0x4f80 <__divmodhi4_neg1>
    4f72:	77 fd       	sbrc	r23, 7
    4f74:	09 d0       	rcall	.+18     	; 0x4f88 <__divmodhi4_neg2>
    4f76:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <__udivmodhi4>
    4f7a:	07 fc       	sbrc	r0, 7
    4f7c:	05 d0       	rcall	.+10     	; 0x4f88 <__divmodhi4_neg2>
    4f7e:	3e f4       	brtc	.+14     	; 0x4f8e <__divmodhi4_exit>

00004f80 <__divmodhi4_neg1>:
    4f80:	90 95       	com	r25
    4f82:	81 95       	neg	r24
    4f84:	9f 4f       	sbci	r25, 0xFF	; 255
    4f86:	08 95       	ret

00004f88 <__divmodhi4_neg2>:
    4f88:	70 95       	com	r23
    4f8a:	61 95       	neg	r22
    4f8c:	7f 4f       	sbci	r23, 0xFF	; 255

00004f8e <__divmodhi4_exit>:
    4f8e:	08 95       	ret

00004f90 <__tablejump2__>:
    4f90:	ee 0f       	add	r30, r30
    4f92:	ff 1f       	adc	r31, r31
    4f94:	05 90       	lpm	r0, Z+
    4f96:	f4 91       	lpm	r31, Z
    4f98:	e0 2d       	mov	r30, r0
    4f9a:	09 94       	ijmp

00004f9c <__muluhisi3>:
    4f9c:	0e 94 ed 27 	call	0x4fda	; 0x4fda <__umulhisi3>
    4fa0:	a5 9f       	mul	r26, r21
    4fa2:	90 0d       	add	r25, r0
    4fa4:	b4 9f       	mul	r27, r20
    4fa6:	90 0d       	add	r25, r0
    4fa8:	a4 9f       	mul	r26, r20
    4faa:	80 0d       	add	r24, r0
    4fac:	91 1d       	adc	r25, r1
    4fae:	11 24       	eor	r1, r1
    4fb0:	08 95       	ret

00004fb2 <__udivmodhi4>:
    4fb2:	aa 1b       	sub	r26, r26
    4fb4:	bb 1b       	sub	r27, r27
    4fb6:	51 e1       	ldi	r21, 0x11	; 17
    4fb8:	07 c0       	rjmp	.+14     	; 0x4fc8 <__udivmodhi4_ep>

00004fba <__udivmodhi4_loop>:
    4fba:	aa 1f       	adc	r26, r26
    4fbc:	bb 1f       	adc	r27, r27
    4fbe:	a6 17       	cp	r26, r22
    4fc0:	b7 07       	cpc	r27, r23
    4fc2:	10 f0       	brcs	.+4      	; 0x4fc8 <__udivmodhi4_ep>
    4fc4:	a6 1b       	sub	r26, r22
    4fc6:	b7 0b       	sbc	r27, r23

00004fc8 <__udivmodhi4_ep>:
    4fc8:	88 1f       	adc	r24, r24
    4fca:	99 1f       	adc	r25, r25
    4fcc:	5a 95       	dec	r21
    4fce:	a9 f7       	brne	.-22     	; 0x4fba <__udivmodhi4_loop>
    4fd0:	80 95       	com	r24
    4fd2:	90 95       	com	r25
    4fd4:	bc 01       	movw	r22, r24
    4fd6:	cd 01       	movw	r24, r26
    4fd8:	08 95       	ret

00004fda <__umulhisi3>:
    4fda:	a2 9f       	mul	r26, r18
    4fdc:	b0 01       	movw	r22, r0
    4fde:	b3 9f       	mul	r27, r19
    4fe0:	c0 01       	movw	r24, r0
    4fe2:	a3 9f       	mul	r26, r19
    4fe4:	70 0d       	add	r23, r0
    4fe6:	81 1d       	adc	r24, r1
    4fe8:	11 24       	eor	r1, r1
    4fea:	91 1d       	adc	r25, r1
    4fec:	b2 9f       	mul	r27, r18
    4fee:	70 0d       	add	r23, r0
    4ff0:	81 1d       	adc	r24, r1
    4ff2:	11 24       	eor	r1, r1
    4ff4:	91 1d       	adc	r25, r1
    4ff6:	08 95       	ret

00004ff8 <malloc>:
    4ff8:	0f 93       	push	r16
    4ffa:	1f 93       	push	r17
    4ffc:	cf 93       	push	r28
    4ffe:	df 93       	push	r29
    5000:	82 30       	cpi	r24, 0x02	; 2
    5002:	91 05       	cpc	r25, r1
    5004:	10 f4       	brcc	.+4      	; 0x500a <malloc+0x12>
    5006:	82 e0       	ldi	r24, 0x02	; 2
    5008:	90 e0       	ldi	r25, 0x00	; 0
    500a:	e0 91 8c 05 	lds	r30, 0x058C	; 0x80058c <__flp>
    500e:	f0 91 8d 05 	lds	r31, 0x058D	; 0x80058d <__flp+0x1>
    5012:	20 e0       	ldi	r18, 0x00	; 0
    5014:	30 e0       	ldi	r19, 0x00	; 0
    5016:	a0 e0       	ldi	r26, 0x00	; 0
    5018:	b0 e0       	ldi	r27, 0x00	; 0
    501a:	30 97       	sbiw	r30, 0x00	; 0
    501c:	19 f1       	breq	.+70     	; 0x5064 <malloc+0x6c>
    501e:	40 81       	ld	r20, Z
    5020:	51 81       	ldd	r21, Z+1	; 0x01
    5022:	02 81       	ldd	r16, Z+2	; 0x02
    5024:	13 81       	ldd	r17, Z+3	; 0x03
    5026:	48 17       	cp	r20, r24
    5028:	59 07       	cpc	r21, r25
    502a:	c8 f0       	brcs	.+50     	; 0x505e <malloc+0x66>
    502c:	84 17       	cp	r24, r20
    502e:	95 07       	cpc	r25, r21
    5030:	69 f4       	brne	.+26     	; 0x504c <malloc+0x54>
    5032:	10 97       	sbiw	r26, 0x00	; 0
    5034:	31 f0       	breq	.+12     	; 0x5042 <malloc+0x4a>
    5036:	12 96       	adiw	r26, 0x02	; 2
    5038:	0c 93       	st	X, r16
    503a:	12 97       	sbiw	r26, 0x02	; 2
    503c:	13 96       	adiw	r26, 0x03	; 3
    503e:	1c 93       	st	X, r17
    5040:	27 c0       	rjmp	.+78     	; 0x5090 <malloc+0x98>
    5042:	00 93 8c 05 	sts	0x058C, r16	; 0x80058c <__flp>
    5046:	10 93 8d 05 	sts	0x058D, r17	; 0x80058d <__flp+0x1>
    504a:	22 c0       	rjmp	.+68     	; 0x5090 <malloc+0x98>
    504c:	21 15       	cp	r18, r1
    504e:	31 05       	cpc	r19, r1
    5050:	19 f0       	breq	.+6      	; 0x5058 <malloc+0x60>
    5052:	42 17       	cp	r20, r18
    5054:	53 07       	cpc	r21, r19
    5056:	18 f4       	brcc	.+6      	; 0x505e <malloc+0x66>
    5058:	9a 01       	movw	r18, r20
    505a:	bd 01       	movw	r22, r26
    505c:	ef 01       	movw	r28, r30
    505e:	df 01       	movw	r26, r30
    5060:	f8 01       	movw	r30, r16
    5062:	db cf       	rjmp	.-74     	; 0x501a <malloc+0x22>
    5064:	21 15       	cp	r18, r1
    5066:	31 05       	cpc	r19, r1
    5068:	f9 f0       	breq	.+62     	; 0x50a8 <malloc+0xb0>
    506a:	28 1b       	sub	r18, r24
    506c:	39 0b       	sbc	r19, r25
    506e:	24 30       	cpi	r18, 0x04	; 4
    5070:	31 05       	cpc	r19, r1
    5072:	80 f4       	brcc	.+32     	; 0x5094 <malloc+0x9c>
    5074:	8a 81       	ldd	r24, Y+2	; 0x02
    5076:	9b 81       	ldd	r25, Y+3	; 0x03
    5078:	61 15       	cp	r22, r1
    507a:	71 05       	cpc	r23, r1
    507c:	21 f0       	breq	.+8      	; 0x5086 <malloc+0x8e>
    507e:	fb 01       	movw	r30, r22
    5080:	93 83       	std	Z+3, r25	; 0x03
    5082:	82 83       	std	Z+2, r24	; 0x02
    5084:	04 c0       	rjmp	.+8      	; 0x508e <malloc+0x96>
    5086:	90 93 8d 05 	sts	0x058D, r25	; 0x80058d <__flp+0x1>
    508a:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <__flp>
    508e:	fe 01       	movw	r30, r28
    5090:	32 96       	adiw	r30, 0x02	; 2
    5092:	44 c0       	rjmp	.+136    	; 0x511c <malloc+0x124>
    5094:	fe 01       	movw	r30, r28
    5096:	e2 0f       	add	r30, r18
    5098:	f3 1f       	adc	r31, r19
    509a:	81 93       	st	Z+, r24
    509c:	91 93       	st	Z+, r25
    509e:	22 50       	subi	r18, 0x02	; 2
    50a0:	31 09       	sbc	r19, r1
    50a2:	39 83       	std	Y+1, r19	; 0x01
    50a4:	28 83       	st	Y, r18
    50a6:	3a c0       	rjmp	.+116    	; 0x511c <malloc+0x124>
    50a8:	20 91 8a 05 	lds	r18, 0x058A	; 0x80058a <__brkval>
    50ac:	30 91 8b 05 	lds	r19, 0x058B	; 0x80058b <__brkval+0x1>
    50b0:	23 2b       	or	r18, r19
    50b2:	41 f4       	brne	.+16     	; 0x50c4 <malloc+0xcc>
    50b4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    50b8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    50bc:	30 93 8b 05 	sts	0x058B, r19	; 0x80058b <__brkval+0x1>
    50c0:	20 93 8a 05 	sts	0x058A, r18	; 0x80058a <__brkval>
    50c4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    50c8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    50cc:	21 15       	cp	r18, r1
    50ce:	31 05       	cpc	r19, r1
    50d0:	41 f4       	brne	.+16     	; 0x50e2 <malloc+0xea>
    50d2:	2d b7       	in	r18, 0x3d	; 61
    50d4:	3e b7       	in	r19, 0x3e	; 62
    50d6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    50da:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    50de:	24 1b       	sub	r18, r20
    50e0:	35 0b       	sbc	r19, r21
    50e2:	e0 91 8a 05 	lds	r30, 0x058A	; 0x80058a <__brkval>
    50e6:	f0 91 8b 05 	lds	r31, 0x058B	; 0x80058b <__brkval+0x1>
    50ea:	e2 17       	cp	r30, r18
    50ec:	f3 07       	cpc	r31, r19
    50ee:	a0 f4       	brcc	.+40     	; 0x5118 <malloc+0x120>
    50f0:	2e 1b       	sub	r18, r30
    50f2:	3f 0b       	sbc	r19, r31
    50f4:	28 17       	cp	r18, r24
    50f6:	39 07       	cpc	r19, r25
    50f8:	78 f0       	brcs	.+30     	; 0x5118 <malloc+0x120>
    50fa:	ac 01       	movw	r20, r24
    50fc:	4e 5f       	subi	r20, 0xFE	; 254
    50fe:	5f 4f       	sbci	r21, 0xFF	; 255
    5100:	24 17       	cp	r18, r20
    5102:	35 07       	cpc	r19, r21
    5104:	48 f0       	brcs	.+18     	; 0x5118 <malloc+0x120>
    5106:	4e 0f       	add	r20, r30
    5108:	5f 1f       	adc	r21, r31
    510a:	50 93 8b 05 	sts	0x058B, r21	; 0x80058b <__brkval+0x1>
    510e:	40 93 8a 05 	sts	0x058A, r20	; 0x80058a <__brkval>
    5112:	81 93       	st	Z+, r24
    5114:	91 93       	st	Z+, r25
    5116:	02 c0       	rjmp	.+4      	; 0x511c <malloc+0x124>
    5118:	e0 e0       	ldi	r30, 0x00	; 0
    511a:	f0 e0       	ldi	r31, 0x00	; 0
    511c:	cf 01       	movw	r24, r30
    511e:	df 91       	pop	r29
    5120:	cf 91       	pop	r28
    5122:	1f 91       	pop	r17
    5124:	0f 91       	pop	r16
    5126:	08 95       	ret

00005128 <free>:
    5128:	cf 93       	push	r28
    512a:	df 93       	push	r29
    512c:	00 97       	sbiw	r24, 0x00	; 0
    512e:	09 f4       	brne	.+2      	; 0x5132 <free+0xa>
    5130:	81 c0       	rjmp	.+258    	; 0x5234 <free+0x10c>
    5132:	fc 01       	movw	r30, r24
    5134:	32 97       	sbiw	r30, 0x02	; 2
    5136:	13 82       	std	Z+3, r1	; 0x03
    5138:	12 82       	std	Z+2, r1	; 0x02
    513a:	a0 91 8c 05 	lds	r26, 0x058C	; 0x80058c <__flp>
    513e:	b0 91 8d 05 	lds	r27, 0x058D	; 0x80058d <__flp+0x1>
    5142:	10 97       	sbiw	r26, 0x00	; 0
    5144:	81 f4       	brne	.+32     	; 0x5166 <free+0x3e>
    5146:	20 81       	ld	r18, Z
    5148:	31 81       	ldd	r19, Z+1	; 0x01
    514a:	82 0f       	add	r24, r18
    514c:	93 1f       	adc	r25, r19
    514e:	20 91 8a 05 	lds	r18, 0x058A	; 0x80058a <__brkval>
    5152:	30 91 8b 05 	lds	r19, 0x058B	; 0x80058b <__brkval+0x1>
    5156:	28 17       	cp	r18, r24
    5158:	39 07       	cpc	r19, r25
    515a:	51 f5       	brne	.+84     	; 0x51b0 <free+0x88>
    515c:	f0 93 8b 05 	sts	0x058B, r31	; 0x80058b <__brkval+0x1>
    5160:	e0 93 8a 05 	sts	0x058A, r30	; 0x80058a <__brkval>
    5164:	67 c0       	rjmp	.+206    	; 0x5234 <free+0x10c>
    5166:	ed 01       	movw	r28, r26
    5168:	20 e0       	ldi	r18, 0x00	; 0
    516a:	30 e0       	ldi	r19, 0x00	; 0
    516c:	ce 17       	cp	r28, r30
    516e:	df 07       	cpc	r29, r31
    5170:	40 f4       	brcc	.+16     	; 0x5182 <free+0x5a>
    5172:	4a 81       	ldd	r20, Y+2	; 0x02
    5174:	5b 81       	ldd	r21, Y+3	; 0x03
    5176:	9e 01       	movw	r18, r28
    5178:	41 15       	cp	r20, r1
    517a:	51 05       	cpc	r21, r1
    517c:	f1 f0       	breq	.+60     	; 0x51ba <free+0x92>
    517e:	ea 01       	movw	r28, r20
    5180:	f5 cf       	rjmp	.-22     	; 0x516c <free+0x44>
    5182:	d3 83       	std	Z+3, r29	; 0x03
    5184:	c2 83       	std	Z+2, r28	; 0x02
    5186:	40 81       	ld	r20, Z
    5188:	51 81       	ldd	r21, Z+1	; 0x01
    518a:	84 0f       	add	r24, r20
    518c:	95 1f       	adc	r25, r21
    518e:	c8 17       	cp	r28, r24
    5190:	d9 07       	cpc	r29, r25
    5192:	59 f4       	brne	.+22     	; 0x51aa <free+0x82>
    5194:	88 81       	ld	r24, Y
    5196:	99 81       	ldd	r25, Y+1	; 0x01
    5198:	84 0f       	add	r24, r20
    519a:	95 1f       	adc	r25, r21
    519c:	02 96       	adiw	r24, 0x02	; 2
    519e:	91 83       	std	Z+1, r25	; 0x01
    51a0:	80 83       	st	Z, r24
    51a2:	8a 81       	ldd	r24, Y+2	; 0x02
    51a4:	9b 81       	ldd	r25, Y+3	; 0x03
    51a6:	93 83       	std	Z+3, r25	; 0x03
    51a8:	82 83       	std	Z+2, r24	; 0x02
    51aa:	21 15       	cp	r18, r1
    51ac:	31 05       	cpc	r19, r1
    51ae:	29 f4       	brne	.+10     	; 0x51ba <free+0x92>
    51b0:	f0 93 8d 05 	sts	0x058D, r31	; 0x80058d <__flp+0x1>
    51b4:	e0 93 8c 05 	sts	0x058C, r30	; 0x80058c <__flp>
    51b8:	3d c0       	rjmp	.+122    	; 0x5234 <free+0x10c>
    51ba:	e9 01       	movw	r28, r18
    51bc:	fb 83       	std	Y+3, r31	; 0x03
    51be:	ea 83       	std	Y+2, r30	; 0x02
    51c0:	49 91       	ld	r20, Y+
    51c2:	59 91       	ld	r21, Y+
    51c4:	c4 0f       	add	r28, r20
    51c6:	d5 1f       	adc	r29, r21
    51c8:	ec 17       	cp	r30, r28
    51ca:	fd 07       	cpc	r31, r29
    51cc:	61 f4       	brne	.+24     	; 0x51e6 <free+0xbe>
    51ce:	80 81       	ld	r24, Z
    51d0:	91 81       	ldd	r25, Z+1	; 0x01
    51d2:	84 0f       	add	r24, r20
    51d4:	95 1f       	adc	r25, r21
    51d6:	02 96       	adiw	r24, 0x02	; 2
    51d8:	e9 01       	movw	r28, r18
    51da:	99 83       	std	Y+1, r25	; 0x01
    51dc:	88 83       	st	Y, r24
    51de:	82 81       	ldd	r24, Z+2	; 0x02
    51e0:	93 81       	ldd	r25, Z+3	; 0x03
    51e2:	9b 83       	std	Y+3, r25	; 0x03
    51e4:	8a 83       	std	Y+2, r24	; 0x02
    51e6:	e0 e0       	ldi	r30, 0x00	; 0
    51e8:	f0 e0       	ldi	r31, 0x00	; 0
    51ea:	12 96       	adiw	r26, 0x02	; 2
    51ec:	8d 91       	ld	r24, X+
    51ee:	9c 91       	ld	r25, X
    51f0:	13 97       	sbiw	r26, 0x03	; 3
    51f2:	00 97       	sbiw	r24, 0x00	; 0
    51f4:	19 f0       	breq	.+6      	; 0x51fc <free+0xd4>
    51f6:	fd 01       	movw	r30, r26
    51f8:	dc 01       	movw	r26, r24
    51fa:	f7 cf       	rjmp	.-18     	; 0x51ea <free+0xc2>
    51fc:	8d 91       	ld	r24, X+
    51fe:	9c 91       	ld	r25, X
    5200:	11 97       	sbiw	r26, 0x01	; 1
    5202:	9d 01       	movw	r18, r26
    5204:	2e 5f       	subi	r18, 0xFE	; 254
    5206:	3f 4f       	sbci	r19, 0xFF	; 255
    5208:	82 0f       	add	r24, r18
    520a:	93 1f       	adc	r25, r19
    520c:	20 91 8a 05 	lds	r18, 0x058A	; 0x80058a <__brkval>
    5210:	30 91 8b 05 	lds	r19, 0x058B	; 0x80058b <__brkval+0x1>
    5214:	28 17       	cp	r18, r24
    5216:	39 07       	cpc	r19, r25
    5218:	69 f4       	brne	.+26     	; 0x5234 <free+0x10c>
    521a:	30 97       	sbiw	r30, 0x00	; 0
    521c:	29 f4       	brne	.+10     	; 0x5228 <free+0x100>
    521e:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <__flp+0x1>
    5222:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <__flp>
    5226:	02 c0       	rjmp	.+4      	; 0x522c <free+0x104>
    5228:	13 82       	std	Z+3, r1	; 0x03
    522a:	12 82       	std	Z+2, r1	; 0x02
    522c:	b0 93 8b 05 	sts	0x058B, r27	; 0x80058b <__brkval+0x1>
    5230:	a0 93 8a 05 	sts	0x058A, r26	; 0x80058a <__brkval>
    5234:	df 91       	pop	r29
    5236:	cf 91       	pop	r28
    5238:	08 95       	ret

0000523a <abort>:
    523a:	81 e0       	ldi	r24, 0x01	; 1
    523c:	90 e0       	ldi	r25, 0x00	; 0
    523e:	f8 94       	cli
    5240:	0c 94 49 29 	jmp	0x5292	; 0x5292 <_exit>

00005244 <memcmp>:
    5244:	fb 01       	movw	r30, r22
    5246:	dc 01       	movw	r26, r24
    5248:	04 c0       	rjmp	.+8      	; 0x5252 <memcmp+0xe>
    524a:	8d 91       	ld	r24, X+
    524c:	01 90       	ld	r0, Z+
    524e:	80 19       	sub	r24, r0
    5250:	21 f4       	brne	.+8      	; 0x525a <memcmp+0x16>
    5252:	41 50       	subi	r20, 0x01	; 1
    5254:	50 40       	sbci	r21, 0x00	; 0
    5256:	c8 f7       	brcc	.-14     	; 0x524a <memcmp+0x6>
    5258:	88 1b       	sub	r24, r24
    525a:	99 0b       	sbc	r25, r25
    525c:	08 95       	ret

0000525e <strchr>:
    525e:	fc 01       	movw	r30, r24
    5260:	81 91       	ld	r24, Z+
    5262:	86 17       	cp	r24, r22
    5264:	21 f0       	breq	.+8      	; 0x526e <strchr+0x10>
    5266:	88 23       	and	r24, r24
    5268:	d9 f7       	brne	.-10     	; 0x5260 <strchr+0x2>
    526a:	99 27       	eor	r25, r25
    526c:	08 95       	ret
    526e:	31 97       	sbiw	r30, 0x01	; 1
    5270:	cf 01       	movw	r24, r30
    5272:	08 95       	ret

00005274 <strncpy>:
    5274:	fb 01       	movw	r30, r22
    5276:	dc 01       	movw	r26, r24
    5278:	41 50       	subi	r20, 0x01	; 1
    527a:	50 40       	sbci	r21, 0x00	; 0
    527c:	48 f0       	brcs	.+18     	; 0x5290 <strncpy+0x1c>
    527e:	01 90       	ld	r0, Z+
    5280:	0d 92       	st	X+, r0
    5282:	00 20       	and	r0, r0
    5284:	c9 f7       	brne	.-14     	; 0x5278 <strncpy+0x4>
    5286:	01 c0       	rjmp	.+2      	; 0x528a <strncpy+0x16>
    5288:	1d 92       	st	X+, r1
    528a:	41 50       	subi	r20, 0x01	; 1
    528c:	50 40       	sbci	r21, 0x00	; 0
    528e:	e0 f7       	brcc	.-8      	; 0x5288 <strncpy+0x14>
    5290:	08 95       	ret

00005292 <_exit>:
    5292:	f8 94       	cli

00005294 <__stop_program>:
    5294:	ff cf       	rjmp	.-2      	; 0x5294 <__stop_program>
