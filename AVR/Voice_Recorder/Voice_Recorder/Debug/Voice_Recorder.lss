
Voice_Recorder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000160  00800100  0000566e  00005702  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000566e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000350  00800260  00800260  00005862  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005862  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005894  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008b8  00000000  00000000  000058d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001fb4d  00000000  00000000  0000618c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000040f1  00000000  00000000  00025cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006b3b  00000000  00000000  00029dca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000020b8  00000000  00000000  00030908  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000058fc  00000000  00000000  000329c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d948  00000000  00000000  000382bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009e8  00000000  00000000  00045c04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 01 	jmp	0x262	; 0x262 <__ctors_end>
       4:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
       8:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
       c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      10:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      14:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      18:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      1c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      20:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      24:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      28:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      2c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      30:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      34:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      38:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      3c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      40:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_16>
      44:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      48:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      4c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      50:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      54:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      58:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      5c:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      60:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__vector_24>
      64:	0c 94 59 01 	jmp	0x2b2	; 0x2b2 <__bad_interrupt>
      68:	6c 26       	eor	r6, r28
      6a:	70 26       	eor	r7, r16
      6c:	70 26       	eor	r7, r16
      6e:	70 26       	eor	r7, r16
      70:	70 26       	eor	r7, r16
      72:	70 26       	eor	r7, r16
      74:	70 26       	eor	r7, r16
      76:	70 26       	eor	r7, r16
      78:	80 25       	eor	r24, r0
      7a:	70 26       	eor	r7, r16
      7c:	70 26       	eor	r7, r16
      7e:	70 26       	eor	r7, r16
      80:	70 26       	eor	r7, r16
      82:	70 26       	eor	r7, r16
      84:	70 26       	eor	r7, r16
      86:	70 26       	eor	r7, r16
      88:	80 25       	eor	r24, r0
      8a:	70 26       	eor	r7, r16
      8c:	70 26       	eor	r7, r16
      8e:	70 26       	eor	r7, r16
      90:	70 26       	eor	r7, r16
      92:	70 26       	eor	r7, r16
      94:	70 26       	eor	r7, r16
      96:	70 26       	eor	r7, r16
      98:	88 25       	eor	r24, r8
      9a:	70 26       	eor	r7, r16
      9c:	70 26       	eor	r7, r16
      9e:	70 26       	eor	r7, r16
      a0:	70 26       	eor	r7, r16
      a2:	70 26       	eor	r7, r16
      a4:	70 26       	eor	r7, r16
      a6:	70 26       	eor	r7, r16
      a8:	ae 25       	eor	r26, r14
      aa:	70 26       	eor	r7, r16
      ac:	70 26       	eor	r7, r16
      ae:	70 26       	eor	r7, r16
      b0:	70 26       	eor	r7, r16
      b2:	70 26       	eor	r7, r16
      b4:	70 26       	eor	r7, r16
      b6:	70 26       	eor	r7, r16
      b8:	88 25       	eor	r24, r8
      ba:	70 26       	eor	r7, r16
      bc:	70 26       	eor	r7, r16
      be:	70 26       	eor	r7, r16
      c0:	70 26       	eor	r7, r16
      c2:	70 26       	eor	r7, r16
      c4:	70 26       	eor	r7, r16
      c6:	70 26       	eor	r7, r16
      c8:	b4 25       	eor	r27, r4
      ca:	70 26       	eor	r7, r16
      cc:	70 26       	eor	r7, r16
      ce:	70 26       	eor	r7, r16
      d0:	70 26       	eor	r7, r16
      d2:	70 26       	eor	r7, r16
      d4:	70 26       	eor	r7, r16
      d6:	70 26       	eor	r7, r16
      d8:	ba 25       	eor	r27, r10
      da:	70 26       	eor	r7, r16
      dc:	70 26       	eor	r7, r16
      de:	70 26       	eor	r7, r16
      e0:	70 26       	eor	r7, r16
      e2:	70 26       	eor	r7, r16
      e4:	70 26       	eor	r7, r16
      e6:	70 26       	eor	r7, r16
      e8:	cc 25       	eor	r28, r12
      ea:	70 26       	eor	r7, r16
      ec:	70 26       	eor	r7, r16
      ee:	70 26       	eor	r7, r16
      f0:	70 26       	eor	r7, r16
      f2:	70 26       	eor	r7, r16
      f4:	70 26       	eor	r7, r16
      f6:	70 26       	eor	r7, r16
      f8:	f6 25       	eor	r31, r6
      fa:	70 26       	eor	r7, r16
      fc:	70 26       	eor	r7, r16
      fe:	70 26       	eor	r7, r16
     100:	70 26       	eor	r7, r16
     102:	70 26       	eor	r7, r16
     104:	70 26       	eor	r7, r16
     106:	70 26       	eor	r7, r16
     108:	c0 25       	eor	r28, r0
     10a:	70 26       	eor	r7, r16
     10c:	70 26       	eor	r7, r16
     10e:	70 26       	eor	r7, r16
     110:	70 26       	eor	r7, r16
     112:	70 26       	eor	r7, r16
     114:	70 26       	eor	r7, r16
     116:	70 26       	eor	r7, r16
     118:	da 25       	eor	r29, r10
     11a:	70 26       	eor	r7, r16
     11c:	70 26       	eor	r7, r16
     11e:	70 26       	eor	r7, r16
     120:	70 26       	eor	r7, r16
     122:	70 26       	eor	r7, r16
     124:	70 26       	eor	r7, r16
     126:	70 26       	eor	r7, r16
     128:	f9 25       	eor	r31, r9
     12a:	70 26       	eor	r7, r16
     12c:	70 26       	eor	r7, r16
     12e:	70 26       	eor	r7, r16
     130:	70 26       	eor	r7, r16
     132:	70 26       	eor	r7, r16
     134:	70 26       	eor	r7, r16
     136:	70 26       	eor	r7, r16
     138:	f9 25       	eor	r31, r9
     13a:	70 26       	eor	r7, r16
     13c:	70 26       	eor	r7, r16
     13e:	70 26       	eor	r7, r16
     140:	70 26       	eor	r7, r16
     142:	70 26       	eor	r7, r16
     144:	70 26       	eor	r7, r16
     146:	70 26       	eor	r7, r16
     148:	f9 25       	eor	r31, r9
     14a:	70 26       	eor	r7, r16
     14c:	70 26       	eor	r7, r16
     14e:	70 26       	eor	r7, r16
     150:	70 26       	eor	r7, r16
     152:	70 26       	eor	r7, r16
     154:	70 26       	eor	r7, r16
     156:	70 26       	eor	r7, r16
     158:	f9 25       	eor	r31, r9
     15a:	70 26       	eor	r7, r16
     15c:	70 26       	eor	r7, r16
     15e:	70 26       	eor	r7, r16
     160:	70 26       	eor	r7, r16
     162:	70 26       	eor	r7, r16
     164:	70 26       	eor	r7, r16
     166:	70 26       	eor	r7, r16
     168:	02 26       	eor	r0, r18
     16a:	70 26       	eor	r7, r16
     16c:	70 26       	eor	r7, r16
     16e:	70 26       	eor	r7, r16
     170:	70 26       	eor	r7, r16
     172:	70 26       	eor	r7, r16
     174:	70 26       	eor	r7, r16
     176:	70 26       	eor	r7, r16
     178:	33 26       	eor	r3, r19
     17a:	70 26       	eor	r7, r16
     17c:	70 26       	eor	r7, r16
     17e:	70 26       	eor	r7, r16
     180:	70 26       	eor	r7, r16
     182:	70 26       	eor	r7, r16
     184:	70 26       	eor	r7, r16
     186:	70 26       	eor	r7, r16
     188:	02 26       	eor	r0, r18
     18a:	70 26       	eor	r7, r16
     18c:	70 26       	eor	r7, r16
     18e:	70 26       	eor	r7, r16
     190:	70 26       	eor	r7, r16
     192:	70 26       	eor	r7, r16
     194:	70 26       	eor	r7, r16
     196:	70 26       	eor	r7, r16
     198:	33 26       	eor	r3, r19
     19a:	70 26       	eor	r7, r16
     19c:	70 26       	eor	r7, r16
     19e:	70 26       	eor	r7, r16
     1a0:	70 26       	eor	r7, r16
     1a2:	70 26       	eor	r7, r16
     1a4:	70 26       	eor	r7, r16
     1a6:	70 26       	eor	r7, r16
     1a8:	1a 26       	eor	r1, r26
     1aa:	70 26       	eor	r7, r16
     1ac:	70 26       	eor	r7, r16
     1ae:	70 26       	eor	r7, r16
     1b0:	70 26       	eor	r7, r16
     1b2:	70 26       	eor	r7, r16
     1b4:	70 26       	eor	r7, r16
     1b6:	70 26       	eor	r7, r16
     1b8:	37 26       	eor	r3, r23
     1ba:	70 26       	eor	r7, r16
     1bc:	70 26       	eor	r7, r16
     1be:	70 26       	eor	r7, r16
     1c0:	70 26       	eor	r7, r16
     1c2:	70 26       	eor	r7, r16
     1c4:	70 26       	eor	r7, r16
     1c6:	70 26       	eor	r7, r16
     1c8:	37 26       	eor	r3, r23
     1ca:	70 26       	eor	r7, r16
     1cc:	70 26       	eor	r7, r16
     1ce:	70 26       	eor	r7, r16
     1d0:	70 26       	eor	r7, r16
     1d2:	70 26       	eor	r7, r16
     1d4:	70 26       	eor	r7, r16
     1d6:	70 26       	eor	r7, r16
     1d8:	4c 26       	eor	r4, r28
     1da:	70 26       	eor	r7, r16
     1dc:	70 26       	eor	r7, r16
     1de:	70 26       	eor	r7, r16
     1e0:	70 26       	eor	r7, r16
     1e2:	70 26       	eor	r7, r16
     1e4:	70 26       	eor	r7, r16
     1e6:	70 26       	eor	r7, r16
     1e8:	66 26       	eor	r6, r22
     1ea:	70 26       	eor	r7, r16
     1ec:	70 26       	eor	r7, r16
     1ee:	70 26       	eor	r7, r16
     1f0:	70 26       	eor	r7, r16
     1f2:	70 26       	eor	r7, r16
     1f4:	70 26       	eor	r7, r16
     1f6:	70 26       	eor	r7, r16
     1f8:	66 26       	eor	r6, r22

000001fa <__trampolines_end>:
     1fa:	00 00       	nop
     1fc:	00 08       	sbc	r0, r0
     1fe:	00 02       	muls	r16, r16
     200:	01 00       	.word	0x0001	; ????
     202:	00 03       	mulsu	r16, r16
     204:	04 07       	cpc	r16, r20
	...

0000020e <digital_pin_to_bit_mask_PGM>:
     20e:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     21e:	04 08 10 20                                         ... 

00000222 <digital_pin_to_port_PGM>:
     222:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     232:	03 03 03 03                                         ....

00000236 <port_to_output_PGM>:
     236:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000240 <port_to_mode_PGM>:
     240:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000024a <_ZZN6SdFile10make83NameEPKcPhE3__c>:
     24a:	7c 3c 3e 5e 2b 3d 3f 2f 5b 5d 3b 2c 2a 22 5c 00     |<>^+=?/[];,*"\.

0000025a <__ctors_start>:
     25a:	fa 0c       	add	r15, r10
     25c:	fb 11       	cpse	r31, r11
     25e:	80 15       	cp	r24, r0
     260:	90 27       	eor	r25, r16

00000262 <__ctors_end>:
     262:	11 24       	eor	r1, r1
     264:	1f be       	out	0x3f, r1	; 63
     266:	cf ef       	ldi	r28, 0xFF	; 255
     268:	d8 e0       	ldi	r29, 0x08	; 8
     26a:	de bf       	out	0x3e, r29	; 62
     26c:	cd bf       	out	0x3d, r28	; 61

0000026e <__do_copy_data>:
     26e:	12 e0       	ldi	r17, 0x02	; 2
     270:	a0 e0       	ldi	r26, 0x00	; 0
     272:	b1 e0       	ldi	r27, 0x01	; 1
     274:	ee e6       	ldi	r30, 0x6E	; 110
     276:	f6 e5       	ldi	r31, 0x56	; 86
     278:	02 c0       	rjmp	.+4      	; 0x27e <__do_copy_data+0x10>
     27a:	05 90       	lpm	r0, Z+
     27c:	0d 92       	st	X+, r0
     27e:	a0 36       	cpi	r26, 0x60	; 96
     280:	b1 07       	cpc	r27, r17
     282:	d9 f7       	brne	.-10     	; 0x27a <__do_copy_data+0xc>

00000284 <__do_clear_bss>:
     284:	25 e0       	ldi	r18, 0x05	; 5
     286:	a0 e6       	ldi	r26, 0x60	; 96
     288:	b2 e0       	ldi	r27, 0x02	; 2
     28a:	01 c0       	rjmp	.+2      	; 0x28e <.do_clear_bss_start>

0000028c <.do_clear_bss_loop>:
     28c:	1d 92       	st	X+, r1

0000028e <.do_clear_bss_start>:
     28e:	a0 3b       	cpi	r26, 0xB0	; 176
     290:	b2 07       	cpc	r27, r18
     292:	e1 f7       	brne	.-8      	; 0x28c <.do_clear_bss_loop>

00000294 <__do_global_ctors>:
     294:	11 e0       	ldi	r17, 0x01	; 1
     296:	c1 e3       	ldi	r28, 0x31	; 49
     298:	d1 e0       	ldi	r29, 0x01	; 1
     29a:	04 c0       	rjmp	.+8      	; 0x2a4 <__do_global_ctors+0x10>
     29c:	21 97       	sbiw	r28, 0x01	; 1
     29e:	fe 01       	movw	r30, r28
     2a0:	0e 94 b4 29 	call	0x5368	; 0x5368 <__tablejump2__>
     2a4:	cd 32       	cpi	r28, 0x2D	; 45
     2a6:	d1 07       	cpc	r29, r17
     2a8:	c9 f7       	brne	.-14     	; 0x29c <__do_global_ctors+0x8>
     2aa:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <main>
     2ae:	0c 94 35 2b 	jmp	0x566a	; 0x566a <_exit>

000002b2 <__bad_interrupt>:
     2b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002b6 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
     2b6:	0e 94 09 2b 	call	0x5612	; 0x5612 <abort>

000002ba <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	08 95       	ret

000002c0 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     2c0:	08 95       	ret

000002c2 <_ZN5Print5writeEPKhj>:
}

size_t Print::print(const String &s)
{
  return write(s.c_str(), s.length());
}
     2c2:	cf 92       	push	r12
     2c4:	df 92       	push	r13
     2c6:	ef 92       	push	r14
     2c8:	ff 92       	push	r15
     2ca:	0f 93       	push	r16
     2cc:	1f 93       	push	r17
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	8c 01       	movw	r16, r24
     2d4:	db 01       	movw	r26, r22
     2d6:	c0 e0       	ldi	r28, 0x00	; 0
     2d8:	d0 e0       	ldi	r29, 0x00	; 0
     2da:	7a 01       	movw	r14, r20
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	e8 1a       	sub	r14, r24
     2e0:	f1 08       	sbc	r15, r1
     2e2:	45 2b       	or	r20, r21
     2e4:	a1 f0       	breq	.+40     	; 0x30e <_ZN5Print5writeEPKhj+0x4c>
     2e6:	f8 01       	movw	r30, r16
     2e8:	80 81       	ld	r24, Z
     2ea:	91 81       	ldd	r25, Z+1	; 0x01
     2ec:	fc 01       	movw	r30, r24
     2ee:	20 81       	ld	r18, Z
     2f0:	31 81       	ldd	r19, Z+1	; 0x01
     2f2:	6d 01       	movw	r12, r26
     2f4:	ff ef       	ldi	r31, 0xFF	; 255
     2f6:	cf 1a       	sub	r12, r31
     2f8:	df 0a       	sbc	r13, r31
     2fa:	6c 91       	ld	r22, X
     2fc:	c8 01       	movw	r24, r16
     2fe:	f9 01       	movw	r30, r18
     300:	09 95       	icall
     302:	89 2b       	or	r24, r25
     304:	21 f0       	breq	.+8      	; 0x30e <_ZN5Print5writeEPKhj+0x4c>
     306:	21 96       	adiw	r28, 0x01	; 1
     308:	a7 01       	movw	r20, r14
     30a:	d6 01       	movw	r26, r12
     30c:	e6 cf       	rjmp	.-52     	; 0x2da <_ZN5Print5writeEPKhj+0x18>
     30e:	ce 01       	movw	r24, r28
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	1f 91       	pop	r17
     316:	0f 91       	pop	r16
     318:	ff 90       	pop	r15
     31a:	ef 90       	pop	r14
     31c:	df 90       	pop	r13
     31e:	cf 90       	pop	r12
     320:	08 95       	ret

00000322 <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     322:	61 15       	cp	r22, r1
     324:	71 05       	cpc	r23, r1
     326:	81 f0       	breq	.+32     	; 0x348 <_ZN5Print5printEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
     328:	fb 01       	movw	r30, r22
     32a:	01 90       	ld	r0, Z+
     32c:	00 20       	and	r0, r0
     32e:	e9 f7       	brne	.-6      	; 0x32a <_ZN5Print5printEPKc+0x8>
     330:	31 97       	sbiw	r30, 0x01	; 1
     332:	af 01       	movw	r20, r30
     334:	46 1b       	sub	r20, r22
     336:	57 0b       	sbc	r21, r23
     338:	dc 01       	movw	r26, r24
     33a:	ed 91       	ld	r30, X+
     33c:	fc 91       	ld	r31, X
     33e:	02 80       	ldd	r0, Z+2	; 0x02
     340:	f3 81       	ldd	r31, Z+3	; 0x03
     342:	e0 2d       	mov	r30, r0
     344:	09 95       	icall
     346:	08 95       	ret
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0

size_t Print::print(const char str[])
{
  return write(str);
}
     34c:	08 95       	ret

0000034e <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
     34e:	1f 92       	push	r1
     350:	0f 92       	push	r0
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	0f 92       	push	r0
     356:	11 24       	eor	r1, r1
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
     35c:	2f 93       	push	r18
     35e:	3f 93       	push	r19
     360:	4f 93       	push	r20
     362:	5f 93       	push	r21
     364:	6f 93       	push	r22
     366:	7f 93       	push	r23
     368:	8f 93       	push	r24
     36a:	9f 93       	push	r25
     36c:	af 93       	push	r26
     36e:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     370:	00 91 61 02 	lds	r16, 0x0261	; 0x800261 <timer0_millis>
     374:	10 91 62 02 	lds	r17, 0x0262	; 0x800262 <timer0_millis+0x1>
     378:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <timer0_millis+0x2>
     37c:	30 91 64 02 	lds	r19, 0x0264	; 0x800264 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
     380:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <__data_end>

	m += MILLIS_INC;
     384:	b9 01       	movw	r22, r18
     386:	a8 01       	movw	r20, r16
     388:	4f 5f       	subi	r20, 0xFF	; 255
     38a:	5f 4f       	sbci	r21, 0xFF	; 255
     38c:	6f 4f       	sbci	r22, 0xFF	; 255
     38e:	7f 4f       	sbci	r23, 0xFF	; 255
	f += FRACT_INC;
     390:	83 e0       	ldi	r24, 0x03	; 3
     392:	89 0f       	add	r24, r25
	if (f >= FRACT_MAX) {
     394:	8d 37       	cpi	r24, 0x7D	; 125
     396:	40 f0       	brcs	.+16     	; 0x3a8 <__vector_16+0x5a>
		f -= FRACT_MAX;
     398:	86 e8       	ldi	r24, 0x86	; 134
     39a:	89 0f       	add	r24, r25
		m += 1;
     39c:	b9 01       	movw	r22, r18
     39e:	a8 01       	movw	r20, r16
     3a0:	4e 5f       	subi	r20, 0xFE	; 254
     3a2:	5f 4f       	sbci	r21, 0xFF	; 255
     3a4:	6f 4f       	sbci	r22, 0xFF	; 255
     3a6:	7f 4f       	sbci	r23, 0xFF	; 255
	}

	timer0_fract = f;
     3a8:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <__data_end>
	timer0_millis = m;
     3ac:	40 93 61 02 	sts	0x0261, r20	; 0x800261 <timer0_millis>
     3b0:	50 93 62 02 	sts	0x0262, r21	; 0x800262 <timer0_millis+0x1>
     3b4:	60 93 63 02 	sts	0x0263, r22	; 0x800263 <timer0_millis+0x2>
     3b8:	70 93 64 02 	sts	0x0264, r23	; 0x800264 <timer0_millis+0x3>
	timer0_overflow_count++;
     3bc:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <timer0_overflow_count>
     3c0:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <timer0_overflow_count+0x1>
     3c4:	a0 91 67 02 	lds	r26, 0x0267	; 0x800267 <timer0_overflow_count+0x2>
     3c8:	b0 91 68 02 	lds	r27, 0x0268	; 0x800268 <timer0_overflow_count+0x3>
     3cc:	01 96       	adiw	r24, 0x01	; 1
     3ce:	a1 1d       	adc	r26, r1
     3d0:	b1 1d       	adc	r27, r1
     3d2:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <timer0_overflow_count>
     3d6:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <timer0_overflow_count+0x1>
     3da:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <timer0_overflow_count+0x2>
     3de:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <timer0_overflow_count+0x3>
}
     3e2:	bf 91       	pop	r27
     3e4:	af 91       	pop	r26
     3e6:	9f 91       	pop	r25
     3e8:	8f 91       	pop	r24
     3ea:	7f 91       	pop	r23
     3ec:	6f 91       	pop	r22
     3ee:	5f 91       	pop	r21
     3f0:	4f 91       	pop	r20
     3f2:	3f 91       	pop	r19
     3f4:	2f 91       	pop	r18
     3f6:	1f 91       	pop	r17
     3f8:	0f 91       	pop	r16
     3fa:	0f 90       	pop	r0
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	0f 90       	pop	r0
     400:	1f 90       	pop	r1
     402:	18 95       	reti

00000404 <millis>:
unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     404:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     406:	f8 94       	cli
	m = timer0_millis;
     408:	60 91 61 02 	lds	r22, 0x0261	; 0x800261 <timer0_millis>
     40c:	70 91 62 02 	lds	r23, 0x0262	; 0x800262 <timer0_millis+0x1>
     410:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <timer0_millis+0x2>
     414:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <timer0_millis+0x3>
	SREG = oldSREG;
     418:	2f bf       	out	0x3f, r18	; 63

	return m;
}
     41a:	08 95       	ret

0000041c <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     41c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     41e:	f8 94       	cli
	m = timer0_overflow_count;
     420:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <timer0_overflow_count>
     424:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <timer0_overflow_count+0x1>
     428:	a0 91 67 02 	lds	r26, 0x0267	; 0x800267 <timer0_overflow_count+0x2>
     42c:	b0 91 68 02 	lds	r27, 0x0268	; 0x800268 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     430:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     432:	a8 9b       	sbis	0x15, 0	; 21
     434:	05 c0       	rjmp	.+10     	; 0x440 <micros+0x24>
     436:	2f 3f       	cpi	r18, 0xFF	; 255
     438:	19 f0       	breq	.+6      	; 0x440 <micros+0x24>
		m++;
     43a:	01 96       	adiw	r24, 0x01	; 1
     43c:	a1 1d       	adc	r26, r1
     43e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     440:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     442:	ba 2f       	mov	r27, r26
     444:	a9 2f       	mov	r26, r25
     446:	98 2f       	mov	r25, r24
     448:	88 27       	eor	r24, r24
     44a:	82 0f       	add	r24, r18
     44c:	91 1d       	adc	r25, r1
     44e:	a1 1d       	adc	r26, r1
     450:	b1 1d       	adc	r27, r1
     452:	bc 01       	movw	r22, r24
     454:	cd 01       	movw	r24, r26
     456:	66 0f       	add	r22, r22
     458:	77 1f       	adc	r23, r23
     45a:	88 1f       	adc	r24, r24
     45c:	99 1f       	adc	r25, r25
     45e:	66 0f       	add	r22, r22
     460:	77 1f       	adc	r23, r23
     462:	88 1f       	adc	r24, r24
     464:	99 1f       	adc	r25, r25
     466:	08 95       	ret

00000468 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     468:	83 30       	cpi	r24, 0x03	; 3
     46a:	69 f0       	breq	.+26     	; 0x486 <turnOffPWM+0x1e>
     46c:	28 f4       	brcc	.+10     	; 0x478 <turnOffPWM+0x10>
     46e:	81 30       	cpi	r24, 0x01	; 1
     470:	b1 f0       	breq	.+44     	; 0x49e <turnOffPWM+0x36>
     472:	82 30       	cpi	r24, 0x02	; 2
     474:	c1 f0       	breq	.+48     	; 0x4a6 <turnOffPWM+0x3e>
     476:	08 95       	ret
     478:	87 30       	cpi	r24, 0x07	; 7
     47a:	c9 f0       	breq	.+50     	; 0x4ae <turnOffPWM+0x46>
     47c:	88 30       	cpi	r24, 0x08	; 8
     47e:	e9 f0       	breq	.+58     	; 0x4ba <turnOffPWM+0x52>
     480:	84 30       	cpi	r24, 0x04	; 4
     482:	01 f5       	brne	.+64     	; 0x4c4 <turnOffPWM+0x5c>
     484:	06 c0       	rjmp	.+12     	; 0x492 <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     486:	e0 e8       	ldi	r30, 0x80	; 128
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	8f 77       	andi	r24, 0x7F	; 127
     48e:	80 83       	st	Z, r24
     490:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     492:	e0 e8       	ldi	r30, 0x80	; 128
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 81       	ld	r24, Z
     498:	8f 7d       	andi	r24, 0xDF	; 223
     49a:	80 83       	st	Z, r24
     49c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     49e:	84 b5       	in	r24, 0x24	; 36
     4a0:	8f 77       	andi	r24, 0x7F	; 127
     4a2:	84 bd       	out	0x24, r24	; 36
     4a4:	08 95       	ret
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     4a6:	84 b5       	in	r24, 0x24	; 36
     4a8:	8f 7d       	andi	r24, 0xDF	; 223
     4aa:	84 bd       	out	0x24, r24	; 36
     4ac:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     4ae:	e0 eb       	ldi	r30, 0xB0	; 176
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	80 81       	ld	r24, Z
     4b4:	8f 77       	andi	r24, 0x7F	; 127
     4b6:	80 83       	st	Z, r24
     4b8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     4ba:	e0 eb       	ldi	r30, 0xB0	; 176
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	80 81       	ld	r24, Z
     4c0:	8f 7d       	andi	r24, 0xDF	; 223
     4c2:	80 83       	st	Z, r24
     4c4:	08 95       	ret

000004c6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	fc 01       	movw	r30, r24
     4ce:	e2 5f       	subi	r30, 0xF2	; 242
     4d0:	fd 4f       	sbci	r31, 0xFD	; 253
     4d2:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     4d4:	fc 01       	movw	r30, r24
     4d6:	ee 5d       	subi	r30, 0xDE	; 222
     4d8:	fd 4f       	sbci	r31, 0xFD	; 253
     4da:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     4dc:	88 23       	and	r24, r24
     4de:	79 f1       	breq	.+94     	; 0x53e <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	88 0f       	add	r24, r24
     4e4:	99 1f       	adc	r25, r25
     4e6:	fc 01       	movw	r30, r24
     4e8:	e0 5c       	subi	r30, 0xC0	; 192
     4ea:	fd 4f       	sbci	r31, 0xFD	; 253
     4ec:	a5 91       	lpm	r26, Z+
     4ee:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     4f0:	fc 01       	movw	r30, r24
     4f2:	ea 5c       	subi	r30, 0xCA	; 202
     4f4:	fd 4f       	sbci	r31, 0xFD	; 253
     4f6:	c5 91       	lpm	r28, Z+
     4f8:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     4fa:	61 11       	cpse	r22, r1
     4fc:	0c c0       	rjmp	.+24     	; 0x516 <pinMode+0x50>
		uint8_t oldSREG = SREG;
     4fe:	9f b7       	in	r25, 0x3f	; 63
                cli();
     500:	f8 94       	cli
		*reg &= ~bit;
     502:	8c 91       	ld	r24, X
     504:	e2 2f       	mov	r30, r18
     506:	e0 95       	com	r30
     508:	8e 23       	and	r24, r30
     50a:	8c 93       	st	X, r24
		*out &= ~bit;
     50c:	28 81       	ld	r18, Y
     50e:	e2 23       	and	r30, r18
     510:	e8 83       	st	Y, r30
		SREG = oldSREG;
     512:	9f bf       	out	0x3f, r25	; 63
     514:	14 c0       	rjmp	.+40     	; 0x53e <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
     516:	62 30       	cpi	r22, 0x02	; 2
     518:	61 f4       	brne	.+24     	; 0x532 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
     51a:	9f b7       	in	r25, 0x3f	; 63
                cli();
     51c:	f8 94       	cli
		*reg &= ~bit;
     51e:	8c 91       	ld	r24, X
     520:	32 2f       	mov	r19, r18
     522:	30 95       	com	r19
     524:	83 23       	and	r24, r19
     526:	8c 93       	st	X, r24
		*out |= bit;
     528:	e8 81       	ld	r30, Y
     52a:	e2 2b       	or	r30, r18
     52c:	e8 83       	st	Y, r30
		SREG = oldSREG;
     52e:	9f bf       	out	0x3f, r25	; 63
     530:	06 c0       	rjmp	.+12     	; 0x53e <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
     532:	8f b7       	in	r24, 0x3f	; 63
                cli();
     534:	f8 94       	cli
		*reg |= bit;
     536:	ec 91       	ld	r30, X
     538:	e2 2b       	or	r30, r18
     53a:	ec 93       	st	X, r30
		SREG = oldSREG;
     53c:	8f bf       	out	0x3f, r24	; 63
	}
}
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	08 95       	ret

00000544 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     54a:	28 2f       	mov	r18, r24
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	f9 01       	movw	r30, r18
     550:	e6 50       	subi	r30, 0x06	; 6
     552:	fe 4f       	sbci	r31, 0xFE	; 254
     554:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     556:	f9 01       	movw	r30, r18
     558:	e2 5f       	subi	r30, 0xF2	; 242
     55a:	fd 4f       	sbci	r31, 0xFD	; 253
     55c:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     55e:	f9 01       	movw	r30, r18
     560:	ee 5d       	subi	r30, 0xDE	; 222
     562:	fd 4f       	sbci	r31, 0xFD	; 253
     564:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     566:	cc 23       	and	r28, r28
     568:	d1 f0       	breq	.+52     	; 0x59e <digitalWrite+0x5a>
     56a:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     56c:	81 11       	cpse	r24, r1
     56e:	0e 94 34 02 	call	0x468	; 0x468 <turnOffPWM>

	out = portOutputRegister(port);
     572:	ec 2f       	mov	r30, r28
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	ee 0f       	add	r30, r30
     578:	ff 1f       	adc	r31, r31
     57a:	ea 5c       	subi	r30, 0xCA	; 202
     57c:	fd 4f       	sbci	r31, 0xFD	; 253
     57e:	a5 91       	lpm	r26, Z+
     580:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     582:	8f b7       	in	r24, 0x3f	; 63
	cli();
     584:	f8 94       	cli

	if (val == LOW) {
     586:	d1 11       	cpse	r29, r1
     588:	06 c0       	rjmp	.+12     	; 0x596 <digitalWrite+0x52>
		*out &= ~bit;
     58a:	9c 91       	ld	r25, X
     58c:	e1 2f       	mov	r30, r17
     58e:	e0 95       	com	r30
     590:	e9 23       	and	r30, r25
     592:	ec 93       	st	X, r30
     594:	03 c0       	rjmp	.+6      	; 0x59c <digitalWrite+0x58>
	} else {
		*out |= bit;
     596:	ec 91       	ld	r30, X
     598:	e1 2b       	or	r30, r17
     59a:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
     59c:	8f bf       	out	0x3f, r24	; 63
}
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	1f 91       	pop	r17
     5a4:	08 95       	ret

000005a6 <_ZN9LCDScreenC1Eh>:
	_cols = lcd_cols;
	_rows = lcd_rows;
	_charsize = charsize;
	_backlightval = LCD_BACKLIGHT;
} */
LCDScreen::LCDScreen(uint8_t lcd_addr)
     5a6:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     5a8:	13 82       	std	Z+3, r1	; 0x03
     5aa:	12 82       	std	Z+2, r1	; 0x02
     5ac:	8d e8       	ldi	r24, 0x8D	; 141
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	91 83       	std	Z+1, r25	; 0x01
     5b2:	80 83       	st	Z, r24
{
	_addr = lcd_addr;
     5b4:	64 83       	std	Z+4, r22	; 0x04
     5b6:	08 95       	ret

000005b8 <_ZN9LCDScreen13expanderWriteEh>:
void LCDScreen::write4bits(uint8_t value) {
	expanderWrite(value);
	pulseEnable(value);
}

void LCDScreen::expanderWrite(uint8_t _data){
     5b8:	cf 93       	push	r28
     5ba:	c6 2f       	mov	r28, r22
	Wire.beginTransmission(_addr);
     5bc:	fc 01       	movw	r30, r24
     5be:	64 81       	ldd	r22, Z+4	; 0x04
     5c0:	86 e5       	ldi	r24, 0x56	; 86
     5c2:	95 e0       	ldi	r25, 0x05	; 5
     5c4:	0e 94 6f 27 	call	0x4ede	; 0x4ede <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((int)(_data) | 0x08);
     5c8:	6c 2f       	mov	r22, r28
     5ca:	68 60       	ori	r22, 0x08	; 8
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     5cc:	e0 91 56 05 	lds	r30, 0x0556	; 0x800556 <Wire>
     5d0:	f0 91 57 05 	lds	r31, 0x0557	; 0x800557 <Wire+0x1>
     5d4:	01 90       	ld	r0, Z+
     5d6:	f0 81       	ld	r31, Z
     5d8:	e0 2d       	mov	r30, r0
     5da:	86 e5       	ldi	r24, 0x56	; 86
     5dc:	95 e0       	ldi	r25, 0x05	; 5
     5de:	09 95       	icall
	Wire.endTransmission();
     5e0:	86 e5       	ldi	r24, 0x56	; 86
     5e2:	95 e0       	ldi	r25, 0x05	; 5
     5e4:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <_ZN7TwoWire15endTransmissionEv>
}
     5e8:	cf 91       	pop	r28
     5ea:	08 95       	ret

000005ec <_ZN9LCDScreen11pulseEnableEh>:

void LCDScreen::pulseEnable(uint8_t _data){
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	cf 93       	push	r28
     5f2:	8c 01       	movw	r16, r24
     5f4:	c6 2f       	mov	r28, r22
	expanderWrite(_data | En);	// En high
     5f6:	64 60       	ori	r22, 0x04	; 4
     5f8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN9LCDScreen13expanderWriteEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5fc:	85 e0       	ldi	r24, 0x05	; 5
     5fe:	8a 95       	dec	r24
     600:	f1 f7       	brne	.-4      	; 0x5fe <_ZN9LCDScreen11pulseEnableEh+0x12>
     602:	00 00       	nop
	_delay_us(1);		// enable pulse must be >450ns

	expanderWrite(_data & ~En);	// En low
     604:	6c 2f       	mov	r22, r28
     606:	6b 7f       	andi	r22, 0xFB	; 251
     608:	c8 01       	movw	r24, r16
     60a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN9LCDScreen13expanderWriteEh>
     60e:	87 ec       	ldi	r24, 0xC7	; 199
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	01 97       	sbiw	r24, 0x01	; 1
     614:	f1 f7       	brne	.-4      	; 0x612 <_ZN9LCDScreen11pulseEnableEh+0x26>
     616:	00 c0       	rjmp	.+0      	; 0x618 <_ZN9LCDScreen11pulseEnableEh+0x2c>
     618:	00 00       	nop
	_delay_us(50);		// commands need > 37us to settle
}
     61a:	cf 91       	pop	r28
     61c:	1f 91       	pop	r17
     61e:	0f 91       	pop	r16
     620:	08 95       	ret

00000622 <_ZN9LCDScreen10write4bitsEh>:
	uint8_t lownib=(value<<4)&0xf0;
	write4bits((highnib)|mode);
	write4bits((lownib)|mode);
}

void LCDScreen::write4bits(uint8_t value) {
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	ec 01       	movw	r28, r24
     62a:	16 2f       	mov	r17, r22
	expanderWrite(value);
     62c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN9LCDScreen13expanderWriteEh>
	pulseEnable(value);
     630:	61 2f       	mov	r22, r17
     632:	ce 01       	movw	r24, r28
     634:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN9LCDScreen11pulseEnableEh>
}
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	08 95       	ret

00000640 <_ZN9LCDScreen4sendEhh>:


/************ low level data pushing commands **********/

// write either command or data
void LCDScreen::send(uint8_t value, uint8_t mode) {
     640:	ff 92       	push	r15
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	8c 01       	movw	r16, r24
     64c:	f4 2e       	mov	r15, r20
	uint8_t highnib=value&0xf0;
     64e:	86 2f       	mov	r24, r22
     650:	80 7f       	andi	r24, 0xF0	; 240
	uint8_t lownib=(value<<4)&0xf0;
     652:	90 e1       	ldi	r25, 0x10	; 16
     654:	69 9f       	mul	r22, r25
     656:	e0 01       	movw	r28, r0
     658:	11 24       	eor	r1, r1
	write4bits((highnib)|mode);
     65a:	68 2f       	mov	r22, r24
     65c:	64 2b       	or	r22, r20
     65e:	c8 01       	movw	r24, r16
     660:	0e 94 11 03 	call	0x622	; 0x622 <_ZN9LCDScreen10write4bitsEh>
	write4bits((lownib)|mode);
     664:	6c 2f       	mov	r22, r28
     666:	6f 29       	or	r22, r15
     668:	c8 01       	movw	r24, r16
     66a:	0e 94 11 03 	call	0x622	; 0x622 <_ZN9LCDScreen10write4bitsEh>
}
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	0f 91       	pop	r16
     676:	ff 90       	pop	r15
     678:	08 95       	ret

0000067a <_ZN9LCDScreen5clearEv>:
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	61 e0       	ldi	r22, 0x01	; 1
     67e:	0e 94 20 03 	call	0x640	; 0x640 <_ZN9LCDScreen4sendEhh>
     682:	8f e3       	ldi	r24, 0x3F	; 63
     684:	9f e1       	ldi	r25, 0x1F	; 31
     686:	01 97       	sbiw	r24, 0x01	; 1
     688:	f1 f7       	brne	.-4      	; 0x686 <_ZN9LCDScreen5clearEv+0xc>
     68a:	00 c0       	rjmp	.+0      	; 0x68c <_ZN9LCDScreen5clearEv+0x12>
     68c:	00 00       	nop
     68e:	08 95       	ret

00000690 <_ZN9LCDScreen4homeEv>:
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	62 e0       	ldi	r22, 0x02	; 2
     694:	0e 94 20 03 	call	0x640	; 0x640 <_ZN9LCDScreen4sendEhh>
     698:	8f e3       	ldi	r24, 0x3F	; 63
     69a:	9f e1       	ldi	r25, 0x1F	; 31
     69c:	01 97       	sbiw	r24, 0x01	; 1
     69e:	f1 f7       	brne	.-4      	; 0x69c <_ZN9LCDScreen4homeEv+0xc>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <_ZN9LCDScreen4homeEv+0x12>
     6a2:	00 00       	nop
     6a4:	08 95       	ret

000006a6 <_ZN9LCDScreen9setCursorEhh>:
void LCDScreen::home(){
	command(LCD_RETURNHOME);  // set cursor position to zero
	_delay_us(2000);  // this command takes a long time!
} 

void LCDScreen::setCursor(uint8_t col, uint8_t row){
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	cd b7       	in	r28, 0x3d	; 61
     6ac:	de b7       	in	r29, 0x3e	; 62
     6ae:	28 97       	sbiw	r28, 0x08	; 8
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	f8 94       	cli
     6b4:	de bf       	out	0x3e, r29	; 62
     6b6:	0f be       	out	0x3f, r0	; 63
     6b8:	cd bf       	out	0x3d, r28	; 61
     6ba:	9c 01       	movw	r18, r24
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
     6bc:	98 e0       	ldi	r25, 0x08	; 8
     6be:	ed e0       	ldi	r30, 0x0D	; 13
     6c0:	f1 e0       	ldi	r31, 0x01	; 1
     6c2:	de 01       	movw	r26, r28
     6c4:	11 96       	adiw	r26, 0x01	; 1
     6c6:	01 90       	ld	r0, Z+
     6c8:	0d 92       	st	X+, r0
     6ca:	9a 95       	dec	r25
     6cc:	e1 f7       	brne	.-8      	; 0x6c6 <_ZN9LCDScreen9setCursorEhh+0x20>
	if (row > 2) {
     6ce:	43 30       	cpi	r20, 0x03	; 3
     6d0:	08 f0       	brcs	.+2      	; 0x6d4 <_ZN9LCDScreen9setCursorEhh+0x2e>
		row = 1;    // we count rows starting w/0
     6d2:	41 e0       	ldi	r20, 0x01	; 1
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
     6d4:	e4 2f       	mov	r30, r20
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	ee 0f       	add	r30, r30
     6da:	ff 1f       	adc	r31, r31
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	8c 0f       	add	r24, r28
     6e2:	9d 1f       	adc	r25, r29
     6e4:	e8 0f       	add	r30, r24
     6e6:	f9 1f       	adc	r31, r25
     6e8:	90 81       	ld	r25, Z
     6ea:	69 0f       	add	r22, r25
     6ec:	60 68       	ori	r22, 0x80	; 128
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
     6ee:	40 e0       	ldi	r20, 0x00	; 0
     6f0:	c9 01       	movw	r24, r18
     6f2:	0e 94 20 03 	call	0x640	; 0x640 <_ZN9LCDScreen4sendEhh>
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	if (row > 2) {
		row = 1;    // we count rows starting w/0
	}
	command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
}
     6f6:	28 96       	adiw	r28, 0x08	; 8
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	08 95       	ret

00000708 <_ZN9LCDScreen7displayEv>:


void LCDScreen::display() {
	_displaycontrol |= LCD_DISPLAYON;
     708:	fc 01       	movw	r30, r24
     70a:	66 81       	ldd	r22, Z+6	; 0x06
     70c:	26 2f       	mov	r18, r22
     70e:	24 60       	ori	r18, 0x04	; 4
     710:	26 83       	std	Z+6, r18	; 0x06
	command(LCD_DISPLAYCONTROL | _displaycontrol);
     712:	6c 60       	ori	r22, 0x0C	; 12
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
     714:	40 e0       	ldi	r20, 0x00	; 0
     716:	0e 94 20 03 	call	0x640	; 0x640 <_ZN9LCDScreen4sendEhh>
     71a:	08 95       	ret

0000071c <_ZN9LCDScreen5writeEh>:
}

inline size_t LCDScreen::write(uint8_t value) {
	send(value, Rs);
     71c:	41 e0       	ldi	r20, 0x01	; 1
     71e:	0e 94 20 03 	call	0x640	; 0x640 <_ZN9LCDScreen4sendEhh>
	return 1;
}
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	08 95       	ret

00000728 <_ZN9LCDScreen5beginEv>:
} */
LCDScreen::LCDScreen(uint8_t lcd_addr)
{
	_addr = lcd_addr;
}
void LCDScreen::begin() {
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	ec 01       	movw	r28, r24
	Wire.begin();
     72e:	86 e5       	ldi	r24, 0x56	; 86
     730:	95 e0       	ldi	r25, 0x05	; 5
     732:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <_ZN7TwoWire5beginEv>
	_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
	_displayfunction |= LCD_2LINE;
     736:	88 e0       	ldi	r24, 0x08	; 8
     738:	8d 83       	std	Y+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     73a:	2f ef       	ldi	r18, 0xFF	; 255
     73c:	80 e7       	ldi	r24, 0x70	; 112
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	21 50       	subi	r18, 0x01	; 1
     742:	80 40       	sbci	r24, 0x00	; 0
     744:	90 40       	sbci	r25, 0x00	; 0
     746:	e1 f7       	brne	.-8      	; 0x740 <_ZN9LCDScreen5beginEv+0x18>
     748:	00 c0       	rjmp	.+0      	; 0x74a <_ZN9LCDScreen5beginEv+0x22>
     74a:	00 00       	nop
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	_delay_ms(50);

	// Now we pull both RS and R/W low to begin commands
	expanderWrite(0x08);	// reset expanderand turn backlight off (Bit 8 =1)
     74c:	68 e0       	ldi	r22, 0x08	; 8
     74e:	ce 01       	movw	r24, r28
     750:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN9LCDScreen13expanderWriteEh>
     754:	2f ef       	ldi	r18, 0xFF	; 255
     756:	83 ed       	ldi	r24, 0xD3	; 211
     758:	90 e3       	ldi	r25, 0x30	; 48
     75a:	21 50       	subi	r18, 0x01	; 1
     75c:	80 40       	sbci	r24, 0x00	; 0
     75e:	90 40       	sbci	r25, 0x00	; 0
     760:	e1 f7       	brne	.-8      	; 0x75a <_ZN9LCDScreen5beginEv+0x32>
     762:	00 c0       	rjmp	.+0      	; 0x764 <_ZN9LCDScreen5beginEv+0x3c>
     764:	00 00       	nop
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
	write4bits(0x03 << 4);
     766:	60 e3       	ldi	r22, 0x30	; 48
     768:	ce 01       	movw	r24, r28
     76a:	0e 94 11 03 	call	0x622	; 0x622 <_ZN9LCDScreen10write4bitsEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     76e:	8f e4       	ldi	r24, 0x4F	; 79
     770:	96 e4       	ldi	r25, 0x46	; 70
     772:	01 97       	sbiw	r24, 0x01	; 1
     774:	f1 f7       	brne	.-4      	; 0x772 <_ZN9LCDScreen5beginEv+0x4a>
     776:	00 c0       	rjmp	.+0      	; 0x778 <_ZN9LCDScreen5beginEv+0x50>
     778:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms

	// second try
	write4bits(0x03 << 4);
     77a:	60 e3       	ldi	r22, 0x30	; 48
     77c:	ce 01       	movw	r24, r28
     77e:	0e 94 11 03 	call	0x622	; 0x622 <_ZN9LCDScreen10write4bitsEh>
     782:	8f e4       	ldi	r24, 0x4F	; 79
     784:	96 e4       	ldi	r25, 0x46	; 70
     786:	01 97       	sbiw	r24, 0x01	; 1
     788:	f1 f7       	brne	.-4      	; 0x786 <_ZN9LCDScreen5beginEv+0x5e>
     78a:	00 c0       	rjmp	.+0      	; 0x78c <_ZN9LCDScreen5beginEv+0x64>
     78c:	00 00       	nop
	_delay_us(4500); // wait min 4.1ms

	// third go!
	write4bits(0x03 << 4);
     78e:	60 e3       	ldi	r22, 0x30	; 48
     790:	ce 01       	movw	r24, r28
     792:	0e 94 11 03 	call	0x622	; 0x622 <_ZN9LCDScreen10write4bitsEh>
     796:	87 e5       	ldi	r24, 0x57	; 87
     798:	92 e0       	ldi	r25, 0x02	; 2
     79a:	01 97       	sbiw	r24, 0x01	; 1
     79c:	f1 f7       	brne	.-4      	; 0x79a <_ZN9LCDScreen5beginEv+0x72>
     79e:	00 c0       	rjmp	.+0      	; 0x7a0 <_ZN9LCDScreen5beginEv+0x78>
     7a0:	00 00       	nop
	_delay_us(150);

	// finally, set to 4-bit interface
	write4bits(0x02 << 4);
     7a2:	60 e2       	ldi	r22, 0x20	; 32
     7a4:	ce 01       	movw	r24, r28
     7a6:	0e 94 11 03 	call	0x622	; 0x622 <_ZN9LCDScreen10write4bitsEh>

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);
     7aa:	6d 81       	ldd	r22, Y+5	; 0x05
     7ac:	60 62       	ori	r22, 0x20	; 32
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	ce 01       	movw	r24, r28
     7b2:	0e 94 20 03 	call	0x640	; 0x640 <_ZN9LCDScreen4sendEhh>

	// set # lines, font size, etc.
	command(LCD_FUNCTIONSET | _displayfunction);

	// turn the display on with no cursor or blinking default
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
     7b6:	84 e0       	ldi	r24, 0x04	; 4
     7b8:	8e 83       	std	Y+6, r24	; 0x06
	display();
     7ba:	ce 01       	movw	r24, r28
     7bc:	0e 94 84 03 	call	0x708	; 0x708 <_ZN9LCDScreen7displayEv>

	// clear it off
	clear();
     7c0:	ce 01       	movw	r24, r28
     7c2:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN9LCDScreen5clearEv>

	// Initialize to default text direction (for roman languages)
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     7c6:	82 e0       	ldi	r24, 0x02	; 2
     7c8:	8f 83       	std	Y+7, r24	; 0x07
}

/*********** mid level commands, for sending data/cmds */

inline void LCDScreen::command(uint8_t value) {
	send(value, 0);
     7ca:	40 e0       	ldi	r20, 0x00	; 0
     7cc:	66 e0       	ldi	r22, 0x06	; 6
     7ce:	ce 01       	movw	r24, r28
     7d0:	0e 94 20 03 	call	0x640	; 0x640 <_ZN9LCDScreen4sendEhh>
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;

	// set the entry mode
	command(LCD_ENTRYMODESET | _displaymode);

	home();
     7d4:	ce 01       	movw	r24, r28
     7d6:	0e 94 48 03 	call	0x690	; 0x690 <_ZN9LCDScreen4homeEv>
}
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	08 95       	ret

000007e0 <_Z41__static_initialization_and_destruction_0ii>:
//>--------------------------------< LCD DISPLAY FUNCTIONS >-----------------------------------<
void firstLine(const char *msg) {
  //Prints the string passed in the first line of the LCD display
  lcd.setCursor(0, 0);
  lcd.print(msg);
}
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	41 f4       	brne	.+16     	; 0x7f4 <_Z41__static_initialization_and_destruction_0ii+0x14>
     7e4:	6f 3f       	cpi	r22, 0xFF	; 255
     7e6:	7f 4f       	sbci	r23, 0xFF	; 255
     7e8:	29 f4       	brne	.+10     	; 0x7f4 <_Z41__static_initialization_and_destruction_0ii+0x14>
     7ea:	67 e2       	ldi	r22, 0x27	; 39
     7ec:	89 e6       	ldi	r24, 0x69	; 105
     7ee:	92 e0       	ldi	r25, 0x02	; 2
     7f0:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <_ZN9LCDScreenC1Eh>
     7f4:	08 95       	ret

000007f6 <_Z8keyInputv>:
     7f6:	89 b1       	in	r24, 0x09	; 9
     7f8:	80 95       	com	r24
     7fa:	61 f1       	breq	.+88     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     7fc:	88 30       	cpi	r24, 0x08	; 8
     7fe:	99 f0       	breq	.+38     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     800:	38 f4       	brcc	.+14     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	d1 f0       	breq	.+52     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     806:	84 30       	cpi	r24, 0x04	; 4
     808:	61 f0       	breq	.+24     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     80a:	81 30       	cpi	r24, 0x01	; 1
     80c:	a1 f4       	brne	.+40     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     80e:	07 c0       	rjmp	.+14     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     810:	80 34       	cpi	r24, 0x40	; 64
     812:	69 f0       	breq	.+26     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     814:	80 38       	cpi	r24, 0x80	; 128
     816:	69 f0       	breq	.+26     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     818:	80 32       	cpi	r24, 0x20	; 32
     81a:	69 f4       	brne	.+26     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     81c:	06 c0       	rjmp	.+12     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     81e:	8f e5       	ldi	r24, 0x5F	; 95
     820:	0d c0       	rjmp	.+26     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     822:	83 e7       	ldi	r24, 0x73	; 115
     824:	0b c0       	rjmp	.+22     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     826:	8c e3       	ldi	r24, 0x3C	; 60
     828:	09 c0       	rjmp	.+18     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     82a:	80 e7       	ldi	r24, 0x70	; 112
     82c:	07 c0       	rjmp	.+14     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     82e:	8e e3       	ldi	r24, 0x3E	; 62
     830:	05 c0       	rjmp	.+10     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     832:	84 e6       	ldi	r24, 0x64	; 100
     834:	03 c0       	rjmp	.+6      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	01 c0       	rjmp	.+2      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     83a:	8a e2       	ldi	r24, 0x2A	; 42
     83c:	2f ef       	ldi	r18, 0xFF	; 255
     83e:	35 ea       	ldi	r19, 0xA5	; 165
     840:	9e e0       	ldi	r25, 0x0E	; 14
     842:	21 50       	subi	r18, 0x01	; 1
     844:	30 40       	sbci	r19, 0x00	; 0
     846:	90 40       	sbci	r25, 0x00	; 0
     848:	e1 f7       	brne	.-8      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     84a:	00 c0       	rjmp	.+0      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     84c:	00 00       	nop
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	9b b9       	out	0x0b, r25	; 11
     852:	08 95       	ret
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	08 95       	ret

00000858 <_Z10clrDisplayPKc>:

void clrDisplay(const char *msg) {
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	ec 01       	movw	r28, r24
  //Clears the LCD and displays the msg in first line
  lcd.clear();
     85e:	89 e6       	ldi	r24, 0x69	; 105
     860:	92 e0       	ldi	r25, 0x02	; 2
     862:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN9LCDScreen5clearEv>
  lcd.setCursor(0, 0);
     866:	40 e0       	ldi	r20, 0x00	; 0
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	89 e6       	ldi	r24, 0x69	; 105
     86c:	92 e0       	ldi	r25, 0x02	; 2
     86e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <_ZN9LCDScreen9setCursorEhh>
  lcd.print(msg);
     872:	be 01       	movw	r22, r28
     874:	89 e6       	ldi	r24, 0x69	; 105
     876:	92 e0       	ldi	r25, 0x02	; 2
     878:	0e 94 91 01 	call	0x322	; 0x322 <_ZN5Print5printEPKc>
}
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	08 95       	ret

00000882 <_Z10secondLinePKc>:

void secondLine(const char *msg) {
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	ec 01       	movw	r28, r24
  //Prints the string passed in the second line of the LCD display
  lcd.setCursor(0, 1);
     888:	41 e0       	ldi	r20, 0x01	; 1
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	89 e6       	ldi	r24, 0x69	; 105
     88e:	92 e0       	ldi	r25, 0x02	; 2
     890:	0e 94 53 03 	call	0x6a6	; 0x6a6 <_ZN9LCDScreen9setCursorEhh>
  lcd.print(msg);
     894:	be 01       	movw	r22, r28
     896:	89 e6       	ldi	r24, 0x69	; 105
     898:	92 e0       	ldi	r25, 0x02	; 2
     89a:	0e 94 91 01 	call	0x322	; 0x322 <_ZN5Print5printEPKc>
}
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <_Z12getTrackListv>:
}
//END OF RECORD AND PLAY FUNCTIONS

//>--------------------------------------< FILE HANDLING FUNCTIONS >--------------------------------------<

void getTrackList() {
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     This function checks for files and make a list of available files
     Program only accept 15 tracks
     counts the number of files
  */
  char ASCIIcount = 65;
  files = 0;
     8a8:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <files>
  
  fname_temp[0] = ASCIIcount;
     8ac:	81 e4       	ldi	r24, 0x41	; 65
     8ae:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <fname_temp>
  
  uint8_t arrIndex = 0;
     8b2:	c0 e0       	ldi	r28, 0x00	; 0
  /*
     This function checks for files and make a list of available files
     Program only accept 15 tracks
     counts the number of files
  */
  char ASCIIcount = 65;
     8b4:	d1 e4       	ldi	r29, 0x41	; 65
  
  fname_temp[0] = ASCIIcount;
  
  uint8_t arrIndex = 0;
  while (true) {
    if (arrIndex == maxFiles || ASCIIcount == 91) {
     8b6:	cf 30       	cpi	r28, 0x0F	; 15
     8b8:	d9 f0       	breq	.+54     	; 0x8f0 <_Z12getTrackListv+0x4c>
     8ba:	db 35       	cpi	r29, 0x5B	; 91
     8bc:	c9 f0       	breq	.+50     	; 0x8f0 <_Z12getTrackListv+0x4c>
      break;
    }
    if (SD.exists(fname_temp)) {
     8be:	61 e7       	ldi	r22, 0x71	; 113
     8c0:	72 e0       	ldi	r23, 0x02	; 2
     8c2:	89 e8       	ldi	r24, 0x89	; 137
     8c4:	92 e0       	ldi	r25, 0x02	; 2
     8c6:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN5SDLib7SDClass6existsEPKc>
     8ca:	88 23       	and	r24, r24
     8cc:	69 f0       	breq	.+26     	; 0x8e8 <_Z12getTrackListv+0x44>
      tracks[arrIndex++] = fname_temp[0];
     8ce:	ec 2f       	mov	r30, r28
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <fname_temp>
     8d6:	e6 58       	subi	r30, 0x86	; 134
     8d8:	fd 4f       	sbci	r31, 0xFD	; 253
     8da:	80 83       	st	Z, r24
      files++;
     8dc:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <files>
     8e0:	8f 5f       	subi	r24, 0xFF	; 255
     8e2:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <files>
  while (true) {
    if (arrIndex == maxFiles || ASCIIcount == 91) {
      break;
    }
    if (SD.exists(fname_temp)) {
      tracks[arrIndex++] = fname_temp[0];
     8e6:	cf 5f       	subi	r28, 0xFF	; 255
      files++;
    }
	fname_temp[0] = ++ASCIIcount;
     8e8:	df 5f       	subi	r29, 0xFF	; 255
     8ea:	d0 93 71 02 	sts	0x0271, r29	; 0x800271 <fname_temp>
  files = 0;
  
  fname_temp[0] = ASCIIcount;
  
  uint8_t arrIndex = 0;
  while (true) {
     8ee:	e3 cf       	rjmp	.-58     	; 0x8b6 <_Z12getTrackListv+0x12>
      tracks[arrIndex++] = fname_temp[0];
      files++;
    }
	fname_temp[0] = ++ASCIIcount;
  }
  for (uint8_t i = arrIndex; i < maxFiles; i++) {
     8f0:	cf 30       	cpi	r28, 0x0F	; 15
     8f2:	40 f4       	brcc	.+16     	; 0x904 <__stack+0x5>
    tracks[i] = '_';
     8f4:	ec 2f       	mov	r30, r28
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	e6 58       	subi	r30, 0x86	; 134
     8fa:	fd 4f       	sbci	r31, 0xFD	; 253
     8fc:	8f e5       	ldi	r24, 0x5F	; 95
     8fe:	80 83       	st	Z, r24
      tracks[arrIndex++] = fname_temp[0];
      files++;
    }
	fname_temp[0] = ++ASCIIcount;
  }
  for (uint8_t i = arrIndex; i < maxFiles; i++) {
     900:	cf 5f       	subi	r28, 0xFF	; 255
     902:	f6 cf       	rjmp	.-20     	; 0x8f0 <_Z12getTrackListv+0x4c>
    tracks[i] = '_';
  }
}
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <_Z9nextTrackv>:

void nextTrack() {
  /*
     Checks tracks in order and returns the next track
  */
  fcount++;
     90a:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <fcount>
     90e:	ef 5f       	subi	r30, 0xFF	; 255
     910:	e0 93 78 02 	sts	0x0278, r30	; 0x800278 <fcount>
  if (tracks[fcount] == '_') {
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	e6 58       	subi	r30, 0x86	; 134
     918:	fd 4f       	sbci	r31, 0xFD	; 253
     91a:	80 81       	ld	r24, Z
     91c:	8f 35       	cpi	r24, 0x5F	; 95
     91e:	11 f4       	brne	.+4      	; 0x924 <_Z9nextTrackv+0x1a>
    fcount = 0;
     920:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <fcount>
  }
  fname_temp[0] = tracks[fcount];
     924:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <fcount>
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	e6 58       	subi	r30, 0x86	; 134
     92c:	fd 4f       	sbci	r31, 0xFD	; 253
     92e:	80 81       	ld	r24, Z
     930:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <fname_temp>
     934:	08 95       	ret

00000936 <_Z13previousTrackv>:

void previousTrack() {
  /*
     Checks tracks in order and returns the previous track
  */
  if (fcount == 0) {
     936:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <fcount>
     93a:	81 11       	cpse	r24, r1
     93c:	06 c0       	rjmp	.+12     	; 0x94a <_Z13previousTrackv+0x14>
    fcount = files - 1;
     93e:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <files>
     942:	81 50       	subi	r24, 0x01	; 1
     944:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <fcount>
     948:	03 c0       	rjmp	.+6      	; 0x950 <_Z13previousTrackv+0x1a>
  }
  else
  {
    fcount--;
     94a:	81 50       	subi	r24, 0x01	; 1
     94c:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <fcount>
  }
  fname_temp[0] = tracks[fcount];
     950:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <fcount>
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	e6 58       	subi	r30, 0x86	; 134
     958:	fd 4f       	sbci	r31, 0xFD	; 253
     95a:	80 81       	ld	r24, Z
     95c:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <fname_temp>
     960:	08 95       	ret

00000962 <_Z15checkDuplicatesv>:
}

void checkDuplicates() {
     962:	cf 93       	push	r28

  /*This function checks if the new file to be made is existing,
    if does it generates a new name for the file*/
  char count = 65;

  fname_temp[0] = count;
     964:	81 e4       	ldi	r24, 0x41	; 65
     966:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <fname_temp>

void checkDuplicates() {

  /*This function checks if the new file to be made is existing,
    if does it generates a new name for the file*/
  char count = 65;
     96a:	c1 e4       	ldi	r28, 0x41	; 65

  fname_temp[0] = count;
  while (true) {
    if (SD.exists(fname_temp)) {
     96c:	61 e7       	ldi	r22, 0x71	; 113
     96e:	72 e0       	ldi	r23, 0x02	; 2
     970:	89 e8       	ldi	r24, 0x89	; 137
     972:	92 e0       	ldi	r25, 0x02	; 2
     974:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN5SDLib7SDClass6existsEPKc>
     978:	88 23       	and	r24, r24
     97a:	21 f0       	breq	.+8      	; 0x984 <_Z15checkDuplicatesv+0x22>
	  fname_temp[0] = ++count;
     97c:	cf 5f       	subi	r28, 0xFF	; 255
     97e:	c0 93 71 02 	sts	0x0271, r28	; 0x800271 <fname_temp>
  /*This function checks if the new file to be made is existing,
    if does it generates a new name for the file*/
  char count = 65;

  fname_temp[0] = count;
  while (true) {
     982:	f4 cf       	rjmp	.-24     	; 0x96c <_Z15checkDuplicatesv+0xa>
	  fname_temp[0] = ++count;
    } else {
      break;
    }
  }
}
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <_Z11deleteTrackv>:

void deleteTrack(){
	SD.remove(fname_temp);
     988:	61 e7       	ldi	r22, 0x71	; 113
     98a:	72 e0       	ldi	r23, 0x02	; 2
     98c:	89 e8       	ldi	r24, 0x89	; 137
     98e:	92 e0       	ldi	r25, 0x02	; 2
     990:	0e 94 ef 11 	call	0x23de	; 0x23de <_ZN5SDLib7SDClass6removeEPKc>

	fname_temp[0] = 'S';fname_temp[1] = tracks[fcount];fname_temp[2] = '.';fname_temp[3] = 'W';fname_temp[4] = 'A';fname_temp[5] = 'V';
     994:	e1 e7       	ldi	r30, 0x71	; 113
     996:	f2 e0       	ldi	r31, 0x02	; 2
     998:	83 e5       	ldi	r24, 0x53	; 83
     99a:	80 83       	st	Z, r24
     99c:	a0 91 78 02 	lds	r26, 0x0278	; 0x800278 <fcount>
     9a0:	b0 e0       	ldi	r27, 0x00	; 0
     9a2:	a6 58       	subi	r26, 0x86	; 134
     9a4:	bd 4f       	sbci	r27, 0xFD	; 253
     9a6:	8c 91       	ld	r24, X
     9a8:	81 83       	std	Z+1, r24	; 0x01
     9aa:	8e e2       	ldi	r24, 0x2E	; 46
     9ac:	82 83       	std	Z+2, r24	; 0x02
     9ae:	87 e5       	ldi	r24, 0x57	; 87
     9b0:	83 83       	std	Z+3, r24	; 0x03
     9b2:	81 e4       	ldi	r24, 0x41	; 65
     9b4:	84 83       	std	Z+4, r24	; 0x04
     9b6:	86 e5       	ldi	r24, 0x56	; 86
     9b8:	85 83       	std	Z+5, r24	; 0x05
	if(SD.exists(fname_temp)){SD.remove(fname_temp);}
     9ba:	bf 01       	movw	r22, r30
     9bc:	89 e8       	ldi	r24, 0x89	; 137
     9be:	92 e0       	ldi	r25, 0x02	; 2
     9c0:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN5SDLib7SDClass6existsEPKc>
     9c4:	88 23       	and	r24, r24
     9c6:	31 f0       	breq	.+12     	; 0x9d4 <_Z11deleteTrackv+0x4c>
     9c8:	61 e7       	ldi	r22, 0x71	; 113
     9ca:	72 e0       	ldi	r23, 0x02	; 2
     9cc:	89 e8       	ldi	r24, 0x89	; 137
     9ce:	92 e0       	ldi	r25, 0x02	; 2
     9d0:	0e 94 ef 11 	call	0x23de	; 0x23de <_ZN5SDLib7SDClass6removeEPKc>
	fname_temp[0] = 'H';
     9d4:	88 e4       	ldi	r24, 0x48	; 72
     9d6:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <fname_temp>
	if(SD.exists(fname_temp)){SD.remove(fname_temp);}
     9da:	61 e7       	ldi	r22, 0x71	; 113
     9dc:	72 e0       	ldi	r23, 0x02	; 2
     9de:	89 e8       	ldi	r24, 0x89	; 137
     9e0:	92 e0       	ldi	r25, 0x02	; 2
     9e2:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN5SDLib7SDClass6existsEPKc>
     9e6:	88 23       	and	r24, r24
     9e8:	31 f0       	breq	.+12     	; 0x9f6 <_Z11deleteTrackv+0x6e>
     9ea:	61 e7       	ldi	r22, 0x71	; 113
     9ec:	72 e0       	ldi	r23, 0x02	; 2
     9ee:	89 e8       	ldi	r24, 0x89	; 137
     9f0:	92 e0       	ldi	r25, 0x02	; 2
     9f2:	0e 94 ef 11 	call	0x23de	; 0x23de <_ZN5SDLib7SDClass6removeEPKc>
	fname_temp[0] = 'L';
     9f6:	8c e4       	ldi	r24, 0x4C	; 76
     9f8:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <fname_temp>
	if(SD.exists(fname_temp)){SD.remove(fname_temp);}
     9fc:	61 e7       	ldi	r22, 0x71	; 113
     9fe:	72 e0       	ldi	r23, 0x02	; 2
     a00:	89 e8       	ldi	r24, 0x89	; 137
     a02:	92 e0       	ldi	r25, 0x02	; 2
     a04:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN5SDLib7SDClass6existsEPKc>
     a08:	88 23       	and	r24, r24
     a0a:	31 f0       	breq	.+12     	; 0xa18 <_Z11deleteTrackv+0x90>
     a0c:	61 e7       	ldi	r22, 0x71	; 113
     a0e:	72 e0       	ldi	r23, 0x02	; 2
     a10:	89 e8       	ldi	r24, 0x89	; 137
     a12:	92 e0       	ldi	r25, 0x02	; 2
     a14:	0e 94 ef 11 	call	0x23de	; 0x23de <_ZN5SDLib7SDClass6removeEPKc>
	fname_temp[0] = 'B';
     a18:	82 e4       	ldi	r24, 0x42	; 66
     a1a:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <fname_temp>
	if(SD.exists(fname_temp)){SD.remove(fname_temp);}
     a1e:	61 e7       	ldi	r22, 0x71	; 113
     a20:	72 e0       	ldi	r23, 0x02	; 2
     a22:	89 e8       	ldi	r24, 0x89	; 137
     a24:	92 e0       	ldi	r25, 0x02	; 2
     a26:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN5SDLib7SDClass6existsEPKc>
     a2a:	88 23       	and	r24, r24
     a2c:	31 f0       	breq	.+12     	; 0xa3a <_Z11deleteTrackv+0xb2>
     a2e:	61 e7       	ldi	r22, 0x71	; 113
     a30:	72 e0       	ldi	r23, 0x02	; 2
     a32:	89 e8       	ldi	r24, 0x89	; 137
     a34:	92 e0       	ldi	r25, 0x02	; 2
     a36:	0e 94 ef 11 	call	0x23de	; 0x23de <_ZN5SDLib7SDClass6removeEPKc>
		
	fname_temp[0] = tracks[fcount];fname_temp[1] = '.';fname_temp[2] = 'W';fname_temp[3] = 'A';fname_temp[4] = 'V';fname_temp[5] = NULL;
     a3a:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <fcount>
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	e6 58       	subi	r30, 0x86	; 134
     a42:	fd 4f       	sbci	r31, 0xFD	; 253
     a44:	80 81       	ld	r24, Z
     a46:	e1 e7       	ldi	r30, 0x71	; 113
     a48:	f2 e0       	ldi	r31, 0x02	; 2
     a4a:	80 83       	st	Z, r24
     a4c:	8e e2       	ldi	r24, 0x2E	; 46
     a4e:	81 83       	std	Z+1, r24	; 0x01
     a50:	87 e5       	ldi	r24, 0x57	; 87
     a52:	82 83       	std	Z+2, r24	; 0x02
     a54:	81 e4       	ldi	r24, 0x41	; 65
     a56:	83 83       	std	Z+3, r24	; 0x03
     a58:	86 e5       	ldi	r24, 0x56	; 86
     a5a:	84 83       	std	Z+4, r24	; 0x04
     a5c:	15 82       	std	Z+5, r1	; 0x05
     a5e:	08 95       	ret

00000a60 <_Z12makeWaveFileN5SDLib4FileE>:

//END OF FILE HANDLING FUNCTIONS

//>------------------------------< FUNCTIONS FOR WAVE FILE CREATION >---------------------------------<

void makeWaveFile(File sFile) {
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	cd b7       	in	r28, 0x3d	; 61
     a6a:	de b7       	in	r29, 0x3e	; 62
     a6c:	2a 97       	sbiw	r28, 0x0a	; 10
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	f8 94       	cli
     a72:	de bf       	out	0x3e, r29	; 62
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	cd bf       	out	0x3d, r28	; 61
     a78:	8c 01       	movw	r16, r24
  /*
     This function creates the wave header file required
     All bytes should be in little endian format, except String values
  */

  sFile.write((uint8_t*)"RIFF    WAVEfmt ", 16);//Starting bytes of the wave header file
     a7a:	40 e1       	ldi	r20, 0x10	; 16
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	65 e9       	ldi	r22, 0x95	; 149
     a80:	71 e0       	ldi	r23, 0x01	; 1
     a82:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <_ZN5SDLib4File5writeEPKhj>
  uint8_t chunk[] = {16, 0, 0, 0, 1, 0, 1, 0, lower_Byte(sampleRate), higher_Byte(sampleRate)};
     a86:	8a e0       	ldi	r24, 0x0A	; 10
     a88:	e5 e1       	ldi	r30, 0x15	; 21
     a8a:	f1 e0       	ldi	r31, 0x01	; 1
     a8c:	de 01       	movw	r26, r28
     a8e:	11 96       	adiw	r26, 0x01	; 1
     a90:	01 90       	ld	r0, Z+
     a92:	0d 92       	st	X+, r0
     a94:	8a 95       	dec	r24
     a96:	e1 f7       	brne	.-8      	; 0xa90 <_Z12makeWaveFileN5SDLib4FileE+0x30>
     first 4 bytes: size of  previous data chunck
     next 2 bytes: Audio format (1 - PCM)
     next 2 byte: No of channels (Mono = 1, Stereo = 2) (in our case 1)
     last two are the first two bytes of sample rate
  */
  sFile.write((uint8_t*)chunk, 10);
     a98:	4a e0       	ldi	r20, 0x0A	; 10
     a9a:	50 e0       	ldi	r21, 0x00	; 0
     a9c:	be 01       	movw	r22, r28
     a9e:	6f 5f       	subi	r22, 0xFF	; 255
     aa0:	7f 4f       	sbci	r23, 0xFF	; 255
     aa2:	c8 01       	movw	r24, r16
     aa4:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <_ZN5SDLib4File5writeEPKhj>

  chunk[0] = 0; chunk[1] = 0; //end of sample rate bytes
     aa8:	19 82       	std	Y+1, r1	; 0x01
     aaa:	1a 82       	std	Y+2, r1	; 0x02

  //byteRate = (sampleRate/8)*monoStereo*8;
  chunk[2] = lower_Byte(byteRate); chunk[3] = higher_Byte(byteRate); chunk[4] = 0; chunk[5] = 0; // byteRate
     aac:	80 ed       	ldi	r24, 0xD0	; 208
     aae:	8b 83       	std	Y+3, r24	; 0x03
     ab0:	80 e3       	ldi	r24, 0x30	; 48
     ab2:	8c 83       	std	Y+4, r24	; 0x04
     ab4:	1d 82       	std	Y+5, r1	; 0x05
     ab6:	1e 82       	std	Y+6, r1	; 0x06

  //byte blockAlign = monoStereo * (bps/8);
  //this is always equal to 1 in 8bit PCM mono channel
  chunk[6] = 1; chunk[7] = 0; //BlockAlign
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	8f 83       	std	Y+7, r24	; 0x07
     abc:	18 86       	std	Y+8, r1	; 0x08

  chunk[8] = 8; chunk[9] = 0; //bits per sample
     abe:	88 e0       	ldi	r24, 0x08	; 8
     ac0:	89 87       	std	Y+9, r24	; 0x09
     ac2:	1a 86       	std	Y+10, r1	; 0x0a

  sFile.write((uint8_t*)chunk, 10);
     ac4:	4a e0       	ldi	r20, 0x0A	; 10
     ac6:	50 e0       	ldi	r21, 0x00	; 0
     ac8:	be 01       	movw	r22, r28
     aca:	6f 5f       	subi	r22, 0xFF	; 255
     acc:	7f 4f       	sbci	r23, 0xFF	; 255
     ace:	c8 01       	movw	r24, r16
     ad0:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <_ZN5SDLib4File5writeEPKhj>
  sFile.write((uint8_t*)"data    ", 8);
     ad4:	48 e0       	ldi	r20, 0x08	; 8
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	66 ea       	ldi	r22, 0xA6	; 166
     ada:	71 e0       	ldi	r23, 0x01	; 1
     adc:	c8 01       	movw	r24, r16
     ade:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <_ZN5SDLib4File5writeEPKhj>

}
     ae2:	2a 96       	adiw	r28, 0x0a	; 10
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	f8 94       	cli
     ae8:	de bf       	out	0x3e, r29	; 62
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	cd bf       	out	0x3d, r28	; 61
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	08 95       	ret

00000af8 <_Z12finalizeWaveN5SDLib4FileE>:

void finalizeWave(File sFile) {
     af8:	8f 92       	push	r8
     afa:	9f 92       	push	r9
     afc:	af 92       	push	r10
     afe:	bf 92       	push	r11
     b00:	cf 92       	push	r12
     b02:	df 92       	push	r13
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	00 d0       	rcall	.+0      	; 0xb12 <_Z12finalizeWaveN5SDLib4FileE+0x1a>
     b12:	00 d0       	rcall	.+0      	; 0xb14 <_Z12finalizeWaveN5SDLib4FileE+0x1c>
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62
     b18:	8c 01       	movw	r16, r24
  /*
     This function finalizes the wave file
  */
  unsigned long fSize = sFile.size();
     b1a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <_ZN5SDLib4File4sizeEv>
     b1e:	6b 01       	movw	r12, r22
     b20:	7c 01       	movw	r14, r24

  fSize -= 8;
     b22:	4b 01       	movw	r8, r22
     b24:	5c 01       	movw	r10, r24
     b26:	88 e0       	ldi	r24, 0x08	; 8
     b28:	88 1a       	sub	r8, r24
     b2a:	91 08       	sbc	r9, r1
     b2c:	a1 08       	sbc	r10, r1
     b2e:	b1 08       	sbc	r11, r1
  sFile.seek(4);
     b30:	44 e0       	ldi	r20, 0x04	; 4
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	c8 01       	movw	r24, r16
     b3a:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <_ZN5SDLib4File4seekEm>
  uint8_t chunk2[4] = {lower_Byte(fSize), higher_Byte(fSize), fSize >> 16, fSize >> 24};
     b3e:	89 82       	std	Y+1, r8	; 0x01
     b40:	9a 82       	std	Y+2, r9	; 0x02
     b42:	ab 82       	std	Y+3, r10	; 0x03
     b44:	bc 82       	std	Y+4, r11	; 0x04
  sFile.write(chunk2, 4);//Writing chunksize to 5 - 8 bytes in wave file
     b46:	44 e0       	ldi	r20, 0x04	; 4
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	be 01       	movw	r22, r28
     b4c:	6f 5f       	subi	r22, 0xFF	; 255
     b4e:	7f 4f       	sbci	r23, 0xFF	; 255
     b50:	c8 01       	movw	r24, r16
     b52:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <_ZN5SDLib4File5writeEPKhj>

  sFile.seek(40);
     b56:	48 e2       	ldi	r20, 0x28	; 40
     b58:	50 e0       	ldi	r21, 0x00	; 0
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	70 e0       	ldi	r23, 0x00	; 0
     b5e:	c8 01       	movw	r24, r16
     b60:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <_ZN5SDLib4File4seekEm>
  fSize -= 36 ;
     b64:	d7 01       	movw	r26, r14
     b66:	c6 01       	movw	r24, r12
     b68:	8c 97       	sbiw	r24, 0x2c	; 44
     b6a:	a1 09       	sbc	r26, r1
     b6c:	b1 09       	sbc	r27, r1
  chunk2[0] = lower_Byte(fSize); chunk2[1] = higher_Byte(fSize); chunk2[2] = fSize >> 16; chunk2[3] = fSize >> 24;
     b6e:	89 83       	std	Y+1, r24	; 0x01
     b70:	9a 83       	std	Y+2, r25	; 0x02
     b72:	ab 83       	std	Y+3, r26	; 0x03
     b74:	bc 83       	std	Y+4, r27	; 0x04
  sFile.write((uint8_t*)chunk2, 4);//Writting num of samples to 41-44 bytes in wave file
     b76:	44 e0       	ldi	r20, 0x04	; 4
     b78:	50 e0       	ldi	r21, 0x00	; 0
     b7a:	be 01       	movw	r22, r28
     b7c:	6f 5f       	subi	r22, 0xFF	; 255
     b7e:	7f 4f       	sbci	r23, 0xFF	; 255
     b80:	c8 01       	movw	r24, r16
     b82:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <_ZN5SDLib4File5writeEPKhj>
}
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	bf 90       	pop	r11
     ba0:	af 90       	pop	r10
     ba2:	9f 90       	pop	r9
     ba4:	8f 90       	pop	r8
     ba6:	08 95       	ret

00000ba8 <_Z13sig_freqShiftPc>:
//END OF WAVE FILE CREATE FUNCTIONS


//>--------------------------------------< FREQUENCY SHIFTING >--------------------------------------<
void sig_freqShift(char tempName[]) {
     ba8:	ef 92       	push	r14
     baa:	ff 92       	push	r15
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	ca 56       	subi	r28, 0x6A	; 106
     bba:	d1 09       	sbc	r29, r1
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	de bf       	out	0x3e, r29	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	cd bf       	out	0x3d, r28	; 61
     bc6:	8c 01       	movw	r16, r24
		
		File out = SD.open("temp.bin", FILE_WRITE);
     bc8:	27 e1       	ldi	r18, 0x17	; 23
     bca:	4f ea       	ldi	r20, 0xAF	; 175
     bcc:	51 e0       	ldi	r21, 0x01	; 1
     bce:	69 e8       	ldi	r22, 0x89	; 137
     bd0:	72 e0       	ldi	r23, 0x02	; 2
     bd2:	ce 01       	movw	r24, r28
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	0e 94 cc 10 	call	0x2198	; 0x2198 <_ZN5SDLib7SDClass4openEPKch>
		File target = SD.open(tempName, FILE_READ);
     bda:	21 e0       	ldi	r18, 0x01	; 1
     bdc:	a8 01       	movw	r20, r16
     bde:	69 e8       	ldi	r22, 0x89	; 137
     be0:	72 e0       	ldi	r23, 0x02	; 2
     be2:	ce 01       	movw	r24, r28
     be4:	4c 96       	adiw	r24, 0x1c	; 28
     be6:	0e 94 cc 10 	call	0x2198	; 0x2198 <_ZN5SDLib7SDClass4openEPKch>
		target.seek(44);
     bea:	4c e2       	ldi	r20, 0x2C	; 44
     bec:	50 e0       	ldi	r21, 0x00	; 0
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	ce 01       	movw	r24, r28
     bf4:	4c 96       	adiw	r24, 0x1c	; 28
     bf6:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <_ZN5SDLib4File4seekEm>

		uint8_t buff[bufflen];
		//int16_t cosWave12_5[coslen] = {10, 10, 9, 7, 5, 3, 1, -2, -4, -6, -8, -9, -10, -10, -9, -8, -6, -4, -2, 1, 3, 5, 7, 9, 10};
		int16_t cosWave12_5[coslen] =	{10,8,5,0,-4,-8,-9,-9,-6,-1,3,7,9};
     bfa:	8a e1       	ldi	r24, 0x1A	; 26
     bfc:	ef e1       	ldi	r30, 0x1F	; 31
     bfe:	f1 e0       	ldi	r31, 0x01	; 1
     c00:	de 01       	movw	r26, r28
     c02:	af 5a       	subi	r26, 0xAF	; 175
     c04:	bf 4f       	sbci	r27, 0xFF	; 255
     c06:	01 90       	ld	r0, Z+
     c08:	0d 92       	st	X+, r0
     c0a:	8a 95       	dec	r24
     c0c:	e1 f7       	brne	.-8      	; 0xc06 <_Z13sig_freqShiftPc+0x5e>
		uint8_t count = 0;
		uint8_t buffCount = 0;
     c0e:	e1 2c       	mov	r14, r1
		target.seek(44);

		uint8_t buff[bufflen];
		//int16_t cosWave12_5[coslen] = {10, 10, 9, 7, 5, 3, 1, -2, -4, -6, -8, -9, -10, -10, -9, -8, -6, -4, -2, 1, 3, 5, 7, 9, 10};
		int16_t cosWave12_5[coslen] =	{10,8,5,0,-4,-8,-9,-9,-6,-1,3,7,9};
		uint8_t count = 0;
     c10:	10 e0       	ldi	r17, 0x00	; 0
     c12:	01 c0       	rjmp	.+2      	; 0xc16 <_Z13sig_freqShiftPc+0x6e>
			if (count == coslen )
			{
				count = 0;
			}
			if (buffCount == bufflen) {
				buffCount = 0;
     c14:	e0 2e       	mov	r14, r16
		//int16_t cosWave12_5[coslen] = {10, 10, 9, 7, 5, 3, 1, -2, -4, -6, -8, -9, -10, -10, -9, -8, -6, -4, -2, 1, 3, 5, 7, 9, 10};
		int16_t cosWave12_5[coslen] =	{10,8,5,0,-4,-8,-9,-9,-6,-1,3,7,9};
		uint8_t count = 0;
		uint8_t buffCount = 0;

		while (target.available()) {
     c16:	ce 01       	movw	r24, r28
     c18:	4c 96       	adiw	r24, 0x1c	; 28
     c1a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_ZN5SDLib4File9availableEv>
     c1e:	89 2b       	or	r24, r25
     c20:	e9 f1       	breq	.+122    	; 0xc9c <_Z13sig_freqShiftPc+0xf4>

			buff[buffCount++] = (uint8_t)((int)(target.read() - 127) * cosWave12_5[count++] / 10 + 127);
     c22:	01 e0       	ldi	r16, 0x01	; 1
     c24:	0e 0d       	add	r16, r14
     c26:	f1 2c       	mov	r15, r1
     c28:	ce 01       	movw	r24, r28
     c2a:	4c 96       	adiw	r24, 0x1c	; 28
     c2c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <_ZN5SDLib4File4readEv>
     c30:	bc 01       	movw	r22, r24
     c32:	6f 57       	subi	r22, 0x7F	; 127
     c34:	71 09       	sbc	r23, r1
     c36:	21 e0       	ldi	r18, 0x01	; 1
     c38:	21 0f       	add	r18, r17
     c3a:	e1 2f       	mov	r30, r17
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	ee 0f       	add	r30, r30
     c40:	ff 1f       	adc	r31, r31
     c42:	81 e5       	ldi	r24, 0x51	; 81
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	8c 0f       	add	r24, r28
     c48:	9d 1f       	adc	r25, r29
     c4a:	e8 0f       	add	r30, r24
     c4c:	f9 1f       	adc	r31, r25
     c4e:	40 81       	ld	r20, Z
     c50:	51 81       	ldd	r21, Z+1	; 0x01
     c52:	64 9f       	mul	r22, r20
     c54:	c0 01       	movw	r24, r0
     c56:	65 9f       	mul	r22, r21
     c58:	90 0d       	add	r25, r0
     c5a:	74 9f       	mul	r23, r20
     c5c:	90 0d       	add	r25, r0
     c5e:	11 24       	eor	r1, r1
     c60:	6a e0       	ldi	r22, 0x0A	; 10
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	0e 94 a0 29 	call	0x5340	; 0x5340 <__divmodhi4>
     c68:	e7 e3       	ldi	r30, 0x37	; 55
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	ec 0f       	add	r30, r28
     c6e:	fd 1f       	adc	r31, r29
     c70:	ee 0d       	add	r30, r14
     c72:	ff 1d       	adc	r31, r15
     c74:	61 58       	subi	r22, 0x81	; 129
     c76:	60 83       	st	Z, r22
			if (count == coslen )
     c78:	2d 30       	cpi	r18, 0x0D	; 13
     c7a:	11 f0       	breq	.+4      	; 0xc80 <_Z13sig_freqShiftPc+0xd8>
		uint8_t count = 0;
		uint8_t buffCount = 0;

		while (target.available()) {

			buff[buffCount++] = (uint8_t)((int)(target.read() - 127) * cosWave12_5[count++] / 10 + 127);
     c7c:	12 2f       	mov	r17, r18
     c7e:	01 c0       	rjmp	.+2      	; 0xc82 <_Z13sig_freqShiftPc+0xda>
			if (count == coslen )
			{
				count = 0;
     c80:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (buffCount == bufflen) {
     c82:	0a 31       	cpi	r16, 0x1A	; 26
     c84:	39 f6       	brne	.-114    	; 0xc14 <_Z13sig_freqShiftPc+0x6c>
				buffCount = 0;
				out.write((uint8_t*)buff, bufflen);
     c86:	4a e1       	ldi	r20, 0x1A	; 26
     c88:	50 e0       	ldi	r21, 0x00	; 0
     c8a:	be 01       	movw	r22, r28
     c8c:	69 5c       	subi	r22, 0xC9	; 201
     c8e:	7f 4f       	sbci	r23, 0xFF	; 255
     c90:	ce 01       	movw	r24, r28
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <_ZN5SDLib4File5writeEPKhj>
			if (count == coslen )
			{
				count = 0;
			}
			if (buffCount == bufflen) {
				buffCount = 0;
     c98:	00 e0       	ldi	r16, 0x00	; 0
     c9a:	bc cf       	rjmp	.-136    	; 0xc14 <_Z13sig_freqShiftPc+0x6c>
				out.write((uint8_t*)buff, bufflen);
			}
		}

		out.close();
     c9c:	ce 01       	movw	r24, r28
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <_ZN5SDLib4File5closeEv>
		target.close();
     ca4:	ce 01       	movw	r24, r28
     ca6:	4c 96       	adiw	r24, 0x1c	; 28
     ca8:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <_ZN5SDLib4File5closeEv>

}
     cac:	c6 59       	subi	r28, 0x96	; 150
     cae:	df 4f       	sbci	r29, 0xFF	; 255
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	ff 90       	pop	r15
     cc4:	ef 90       	pop	r14
     cc6:	08 95       	ret

00000cc8 <_Z8convolvePiPchi>:
			convolve(filter,tempName,12,1000);
		}
	}
}

void convolve(int filter[],char tempName[],uint8_t filterlen,int divider) {
     cc8:	2f 92       	push	r2
     cca:	3f 92       	push	r3
     ccc:	5f 92       	push	r5
     cce:	6f 92       	push	r6
     cd0:	7f 92       	push	r7
     cd2:	8f 92       	push	r8
     cd4:	9f 92       	push	r9
     cd6:	af 92       	push	r10
     cd8:	bf 92       	push	r11
     cda:	cf 92       	push	r12
     cdc:	df 92       	push	r13
     cde:	ef 92       	push	r14
     ce0:	ff 92       	push	r15
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	cd 5f       	subi	r28, 0xFD	; 253
     cf0:	d1 09       	sbc	r29, r1
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	de bf       	out	0x3e, r29	; 62
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	cd bf       	out	0x3d, r28	; 61
     cfc:	5c 01       	movw	r10, r24
     cfe:	6b 01       	movw	r12, r22
     d00:	f4 2e       	mov	r15, r20
     d02:	19 01       	movw	r2, r18
	finalizeWave(out);
	out.close();
	target.close();
			
	if(SD.exists("temp.bin")){SD.remove("temp.bin");}	
}
     d04:	2d b7       	in	r18, 0x3d	; 61
     d06:	3e b7       	in	r19, 0x3e	; 62
     d08:	c4 50       	subi	r28, 0x04	; 4
     d0a:	df 4f       	sbci	r29, 0xFF	; 255
     d0c:	39 83       	std	Y+1, r19	; 0x01
     d0e:	28 83       	st	Y, r18
     d10:	cc 5f       	subi	r28, 0xFC	; 252
     d12:	d0 40       	sbci	r29, 0x00	; 0
			Frequency shifting: 2min 45sec
			High pass: 1min 55sec
			Low pass: 1min 53sec
	*/
			
	uint8_t signal_in[filterlen];
     d14:	84 2f       	mov	r24, r20
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	3c 01       	movw	r6, r24
     d1a:	31 e0       	ldi	r19, 0x01	; 1
     d1c:	63 1a       	sub	r6, r19
     d1e:	71 08       	sbc	r7, r1
     d20:	ad b7       	in	r26, 0x3d	; 61
     d22:	be b7       	in	r27, 0x3e	; 62
     d24:	a8 1b       	sub	r26, r24
     d26:	b9 0b       	sbc	r27, r25
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	be bf       	out	0x3e, r27	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	ad bf       	out	0x3d, r26	; 61
     d32:	0d b7       	in	r16, 0x3d	; 61
     d34:	1e b7       	in	r17, 0x3e	; 62
     d36:	0f 5f       	subi	r16, 0xFF	; 255
     d38:	1f 4f       	sbci	r17, 0xFF	; 255
     d3a:	48 01       	movw	r8, r16
	uint8_t temp_buff[temp_buff_size];
	float temp = 0;
	uint8_t temp_count = 0;
	File target;
     d3c:	ce 01       	movw	r24, r28
     d3e:	88 54       	subi	r24, 0x48	; 72
     d40:	9f 4f       	sbci	r25, 0xFF	; 255
     d42:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <_ZN5SDLib4FileC1Ev>
			
	if(fname_temp[0]=='S'){target = SD.open("temp.bin", FILE_READ);}
     d46:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <fname_temp>
     d4a:	83 35       	cpi	r24, 0x53	; 83
     d4c:	09 f0       	breq	.+2      	; 0xd50 <_Z8convolvePiPchi+0x88>
     d4e:	4f c0       	rjmp	.+158    	; 0xdee <_Z8convolvePiPchi+0x126>
     d50:	21 e0       	ldi	r18, 0x01	; 1
     d52:	4f ea       	ldi	r20, 0xAF	; 175
     d54:	51 e0       	ldi	r21, 0x01	; 1
     d56:	69 e8       	ldi	r22, 0x89	; 137
     d58:	72 e0       	ldi	r23, 0x02	; 2
     d5a:	ce 01       	movw	r24, r28
     d5c:	8e 5a       	subi	r24, 0xAE	; 174
     d5e:	9f 4f       	sbci	r25, 0xFF	; 255
     d60:	0e 94 cc 10 	call	0x2198	; 0x2198 <_ZN5SDLib7SDClass4openEPKch>
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
     d64:	66 96       	adiw	r28, 0x16	; 22
     d66:	8e ad       	ldd	r24, Y+62	; 0x3e
     d68:	9f ad       	ldd	r25, Y+63	; 0x3f
     d6a:	66 97       	sbiw	r28, 0x16	; 22
     d6c:	c6 54       	subi	r28, 0x46	; 70
     d6e:	df 4f       	sbci	r29, 0xFF	; 255
     d70:	99 83       	std	Y+1, r25	; 0x01
     d72:	88 83       	st	Y, r24
     d74:	ca 5b       	subi	r28, 0xBA	; 186
     d76:	d0 40       	sbci	r29, 0x00	; 0
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
     d78:	6a 96       	adiw	r28, 0x1a	; 26
     d7a:	8c ad       	ldd	r24, Y+60	; 0x3c
     d7c:	9d ad       	ldd	r25, Y+61	; 0x3d
     d7e:	ae ad       	ldd	r26, Y+62	; 0x3e
     d80:	bf ad       	ldd	r27, Y+63	; 0x3f
     d82:	6a 97       	sbiw	r28, 0x1a	; 26
     d84:	c4 54       	subi	r28, 0x44	; 68
     d86:	df 4f       	sbci	r29, 0xFF	; 255
     d88:	88 83       	st	Y, r24
     d8a:	99 83       	std	Y+1, r25	; 0x01
     d8c:	aa 83       	std	Y+2, r26	; 0x02
     d8e:	bb 83       	std	Y+3, r27	; 0x03
     d90:	cc 5b       	subi	r28, 0xBC	; 188
     d92:	d0 40       	sbci	r29, 0x00	; 0
     d94:	6e 96       	adiw	r28, 0x1e	; 30
     d96:	8c ad       	ldd	r24, Y+60	; 0x3c
     d98:	9d ad       	ldd	r25, Y+61	; 0x3d
     d9a:	ae ad       	ldd	r26, Y+62	; 0x3e
     d9c:	bf ad       	ldd	r27, Y+63	; 0x3f
     d9e:	6e 97       	sbiw	r28, 0x1e	; 30
     da0:	c0 54       	subi	r28, 0x40	; 64
     da2:	df 4f       	sbci	r29, 0xFF	; 255
     da4:	88 83       	st	Y, r24
     da6:	99 83       	std	Y+1, r25	; 0x01
     da8:	aa 83       	std	Y+2, r26	; 0x02
     daa:	bb 83       	std	Y+3, r27	; 0x03
     dac:	c0 5c       	subi	r28, 0xC0	; 192
     dae:	d0 40       	sbci	r29, 0x00	; 0
#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT | O_APPEND)

namespace SDLib {

  class File : public Stream {
     db0:	e2 e5       	ldi	r30, 0x52	; 82
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	ec 0f       	add	r30, r28
     db6:	fd 1f       	adc	r31, r29
     db8:	3c 96       	adiw	r30, 0x0c	; 12
     dba:	8c e0       	ldi	r24, 0x0C	; 12
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	a8 eb       	ldi	r26, 0xB8	; 184
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	ac 0f       	add	r26, r28
     dc4:	bd 1f       	adc	r27, r29
     dc6:	1c 96       	adiw	r26, 0x0c	; 12
     dc8:	8f 3f       	cpi	r24, 0xFF	; 255
     dca:	2f ef       	ldi	r18, 0xFF	; 255
     dcc:	92 07       	cpc	r25, r18
     dce:	21 f0       	breq	.+8      	; 0xdd8 <_Z8convolvePiPchi+0x110>
     dd0:	21 91       	ld	r18, Z+
     dd2:	2d 93       	st	X+, r18
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	f8 cf       	rjmp	.-16     	; 0xdc8 <_Z8convolvePiPchi+0x100>
     dd8:	ad 96       	adiw	r28, 0x2d	; 45
     dda:	8e ad       	ldd	r24, Y+62	; 0x3e
     ddc:	9f ad       	ldd	r25, Y+63	; 0x3f
     dde:	ad 97       	sbiw	r28, 0x2d	; 45
     de0:	cf 52       	subi	r28, 0x2F	; 47
     de2:	df 4f       	sbci	r29, 0xFF	; 255
     de4:	99 83       	std	Y+1, r25	; 0x01
     de6:	88 83       	st	Y, r24
     de8:	c1 5d       	subi	r28, 0xD1	; 209
     dea:	d0 40       	sbci	r29, 0x00	; 0
     dec:	48 c0       	rjmp	.+144    	; 0xe7e <_Z8convolvePiPchi+0x1b6>
	else{target = SD.open(tempName, FILE_READ);}
     dee:	21 e0       	ldi	r18, 0x01	; 1
     df0:	a6 01       	movw	r20, r12
     df2:	69 e8       	ldi	r22, 0x89	; 137
     df4:	72 e0       	ldi	r23, 0x02	; 2
     df6:	ce 01       	movw	r24, r28
     df8:	c7 96       	adiw	r24, 0x37	; 55
     dfa:	0e 94 cc 10 	call	0x2198	; 0x2198 <_ZN5SDLib7SDClass4openEPKch>
     dfe:	89 ad       	ldd	r24, Y+57	; 0x39
     e00:	9a ad       	ldd	r25, Y+58	; 0x3a
     e02:	c6 54       	subi	r28, 0x46	; 70
     e04:	df 4f       	sbci	r29, 0xFF	; 255
     e06:	99 83       	std	Y+1, r25	; 0x01
     e08:	88 83       	st	Y, r24
     e0a:	ca 5b       	subi	r28, 0xBA	; 186
     e0c:	d0 40       	sbci	r29, 0x00	; 0
     e0e:	8b ad       	ldd	r24, Y+59	; 0x3b
     e10:	9c ad       	ldd	r25, Y+60	; 0x3c
     e12:	ad ad       	ldd	r26, Y+61	; 0x3d
     e14:	be ad       	ldd	r27, Y+62	; 0x3e
     e16:	c4 54       	subi	r28, 0x44	; 68
     e18:	df 4f       	sbci	r29, 0xFF	; 255
     e1a:	88 83       	st	Y, r24
     e1c:	99 83       	std	Y+1, r25	; 0x01
     e1e:	aa 83       	std	Y+2, r26	; 0x02
     e20:	bb 83       	std	Y+3, r27	; 0x03
     e22:	cc 5b       	subi	r28, 0xBC	; 188
     e24:	d0 40       	sbci	r29, 0x00	; 0
     e26:	23 96       	adiw	r28, 0x03	; 3
     e28:	8c ad       	ldd	r24, Y+60	; 0x3c
     e2a:	9d ad       	ldd	r25, Y+61	; 0x3d
     e2c:	ae ad       	ldd	r26, Y+62	; 0x3e
     e2e:	bf ad       	ldd	r27, Y+63	; 0x3f
     e30:	23 97       	sbiw	r28, 0x03	; 3
     e32:	c0 54       	subi	r28, 0x40	; 64
     e34:	df 4f       	sbci	r29, 0xFF	; 255
     e36:	88 83       	st	Y, r24
     e38:	99 83       	std	Y+1, r25	; 0x01
     e3a:	aa 83       	std	Y+2, r26	; 0x02
     e3c:	bb 83       	std	Y+3, r27	; 0x03
     e3e:	c0 5c       	subi	r28, 0xC0	; 192
     e40:	d0 40       	sbci	r29, 0x00	; 0
     e42:	a7 e3       	ldi	r26, 0x37	; 55
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	ac 0f       	add	r26, r28
     e48:	bd 1f       	adc	r27, r29
     e4a:	1c 96       	adiw	r26, 0x0c	; 12
     e4c:	8c e0       	ldi	r24, 0x0C	; 12
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	e8 eb       	ldi	r30, 0xB8	; 184
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	ec 0f       	add	r30, r28
     e56:	fd 1f       	adc	r31, r29
     e58:	3c 96       	adiw	r30, 0x0c	; 12
     e5a:	8f 3f       	cpi	r24, 0xFF	; 255
     e5c:	3f ef       	ldi	r19, 0xFF	; 255
     e5e:	93 07       	cpc	r25, r19
     e60:	21 f0       	breq	.+8      	; 0xe6a <_Z8convolvePiPchi+0x1a2>
     e62:	2d 91       	ld	r18, X+
     e64:	21 93       	st	Z+, r18
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	f8 cf       	rjmp	.-16     	; 0xe5a <_Z8convolvePiPchi+0x192>
     e6a:	62 96       	adiw	r28, 0x12	; 18
     e6c:	8e ad       	ldd	r24, Y+62	; 0x3e
     e6e:	9f ad       	ldd	r25, Y+63	; 0x3f
     e70:	62 97       	sbiw	r28, 0x12	; 18
     e72:	cf 52       	subi	r28, 0x2F	; 47
     e74:	df 4f       	sbci	r29, 0xFF	; 255
     e76:	99 83       	std	Y+1, r25	; 0x01
     e78:	88 83       	st	Y, r24
     e7a:	c1 5d       	subi	r28, 0xD1	; 209
     e7c:	d0 40       	sbci	r29, 0x00	; 0
	File out = SD.open(fname_temp, FILE_WRITE);	
     e7e:	27 e1       	ldi	r18, 0x17	; 23
     e80:	41 e7       	ldi	r20, 0x71	; 113
     e82:	52 e0       	ldi	r21, 0x02	; 2
     e84:	69 e8       	ldi	r22, 0x89	; 137
     e86:	72 e0       	ldi	r23, 0x02	; 2
     e88:	ce 01       	movw	r24, r28
     e8a:	8d 52       	subi	r24, 0x2D	; 45
     e8c:	9f 4f       	sbci	r25, 0xFF	; 255
     e8e:	0e 94 cc 10 	call	0x2198	; 0x2198 <_ZN5SDLib7SDClass4openEPKch>
     e92:	cb 52       	subi	r28, 0x2B	; 43
     e94:	df 4f       	sbci	r29, 0xFF	; 255
     e96:	88 81       	ld	r24, Y
     e98:	99 81       	ldd	r25, Y+1	; 0x01
     e9a:	c5 5d       	subi	r28, 0xD5	; 213
     e9c:	d0 40       	sbci	r29, 0x00	; 0
     e9e:	9f 8f       	std	Y+31, r25	; 0x1f
     ea0:	8e 8f       	std	Y+30, r24	; 0x1e
     ea2:	c9 52       	subi	r28, 0x29	; 41
     ea4:	df 4f       	sbci	r29, 0xFF	; 255
     ea6:	88 81       	ld	r24, Y
     ea8:	99 81       	ldd	r25, Y+1	; 0x01
     eaa:	aa 81       	ldd	r26, Y+2	; 0x02
     eac:	bb 81       	ldd	r27, Y+3	; 0x03
     eae:	c7 5d       	subi	r28, 0xD7	; 215
     eb0:	d0 40       	sbci	r29, 0x00	; 0
     eb2:	88 a3       	std	Y+32, r24	; 0x20
     eb4:	99 a3       	std	Y+33, r25	; 0x21
     eb6:	aa a3       	std	Y+34, r26	; 0x22
     eb8:	bb a3       	std	Y+35, r27	; 0x23
     eba:	c5 52       	subi	r28, 0x25	; 37
     ebc:	df 4f       	sbci	r29, 0xFF	; 255
     ebe:	88 81       	ld	r24, Y
     ec0:	99 81       	ldd	r25, Y+1	; 0x01
     ec2:	aa 81       	ldd	r26, Y+2	; 0x02
     ec4:	bb 81       	ldd	r27, Y+3	; 0x03
     ec6:	cb 5d       	subi	r28, 0xDB	; 219
     ec8:	d0 40       	sbci	r29, 0x00	; 0
     eca:	8c a3       	std	Y+36, r24	; 0x24
     ecc:	9d a3       	std	Y+37, r25	; 0x25
     ece:	ae a3       	std	Y+38, r26	; 0x26
     ed0:	bf a3       	std	Y+39, r27	; 0x27
     ed2:	82 e3       	ldi	r24, 0x32	; 50
     ed4:	92 e0       	ldi	r25, 0x02	; 2
     ed6:	9d 8f       	std	Y+29, r25	; 0x1d
     ed8:	8c 8f       	std	Y+28, r24	; 0x1c
     eda:	8d e0       	ldi	r24, 0x0D	; 13
     edc:	e3 ed       	ldi	r30, 0xD3	; 211
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	ec 0f       	add	r30, r28
     ee2:	fd 1f       	adc	r31, r29
     ee4:	3c 96       	adiw	r30, 0x0c	; 12
     ee6:	de 01       	movw	r26, r28
     ee8:	98 96       	adiw	r26, 0x28	; 40
     eea:	01 90       	ld	r0, Z+
     eec:	0d 92       	st	X+, r0
     eee:	8a 95       	dec	r24
     ef0:	e1 f7       	brne	.-8      	; 0xeea <_Z8convolvePiPchi+0x222>
     ef2:	c4 51       	subi	r28, 0x14	; 20
     ef4:	df 4f       	sbci	r29, 0xFF	; 255
     ef6:	88 81       	ld	r24, Y
     ef8:	99 81       	ldd	r25, Y+1	; 0x01
     efa:	cc 5e       	subi	r28, 0xEC	; 236
     efc:	d0 40       	sbci	r29, 0x00	; 0
     efe:	9e ab       	std	Y+54, r25	; 0x36
     f00:	8d ab       	std	Y+53, r24	; 0x35
	makeWaveFile(out);
     f02:	ce 01       	movw	r24, r28
     f04:	4c 96       	adiw	r24, 0x1c	; 28
     f06:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z12makeWaveFileN5SDLib4FileE>
			
	unsigned long fSize = target.size();
     f0a:	ce 01       	movw	r24, r28
     f0c:	88 54       	subi	r24, 0x48	; 72
     f0e:	9f 4f       	sbci	r25, 0xFF	; 255
     f10:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <_ZN5SDLib4File4sizeEv>
     f14:	ca 50       	subi	r28, 0x0A	; 10
     f16:	df 4f       	sbci	r29, 0xFF	; 255
     f18:	68 83       	st	Y, r22
     f1a:	79 83       	std	Y+1, r23	; 0x01
     f1c:	8a 83       	std	Y+2, r24	; 0x02
     f1e:	9b 83       	std	Y+3, r25	; 0x03
     f20:	c6 5f       	subi	r28, 0xF6	; 246
     f22:	d0 40       	sbci	r29, 0x00	; 0

	target.read(signal_in, filterlen);
     f24:	8f 2d       	mov	r24, r15
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	c6 50       	subi	r28, 0x06	; 6
     f2a:	df 4f       	sbci	r29, 0xFF	; 255
     f2c:	99 83       	std	Y+1, r25	; 0x01
     f2e:	88 83       	st	Y, r24
     f30:	ca 5f       	subi	r28, 0xFA	; 250
     f32:	d0 40       	sbci	r29, 0x00	; 0
     f34:	ac 01       	movw	r20, r24
     f36:	b8 01       	movw	r22, r16
     f38:	ce 01       	movw	r24, r28
     f3a:	88 54       	subi	r24, 0x48	; 72
     f3c:	9f 4f       	sbci	r25, 0xFF	; 255
     f3e:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <_ZN5SDLib4File4readEPvj>
	target.read(temp_buff, temp_buff_size);
     f42:	4b e4       	ldi	r20, 0x4B	; 75
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	be 01       	movw	r22, r28
     f48:	63 59       	subi	r22, 0x93	; 147
     f4a:	7f 4f       	sbci	r23, 0xFF	; 255
     f4c:	ce 01       	movw	r24, r28
     f4e:	88 54       	subi	r24, 0x48	; 72
     f50:	9f 4f       	sbci	r25, 0xFF	; 255
     f52:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <_ZN5SDLib4File4readEPvj>
	*/
			
	uint8_t signal_in[filterlen];
	uint8_t temp_buff[temp_buff_size];
	float temp = 0;
	uint8_t temp_count = 0;
     f56:	e1 2c       	mov	r14, r1
     f58:	ce 2c       	mov	r12, r14
	unsigned long fSize = target.size();

	target.read(signal_in, filterlen);
	target.read(temp_buff, temp_buff_size);

	while (fSize) {
     f5a:	ca 50       	subi	r28, 0x0A	; 10
     f5c:	df 4f       	sbci	r29, 0xFF	; 255
     f5e:	88 81       	ld	r24, Y
     f60:	99 81       	ldd	r25, Y+1	; 0x01
     f62:	aa 81       	ldd	r26, Y+2	; 0x02
     f64:	bb 81       	ldd	r27, Y+3	; 0x03
     f66:	c6 5f       	subi	r28, 0xF6	; 246
     f68:	d0 40       	sbci	r29, 0x00	; 0
     f6a:	89 2b       	or	r24, r25
     f6c:	8a 2b       	or	r24, r26
     f6e:	8b 2b       	or	r24, r27
     f70:	09 f4       	brne	.+2      	; 0xf74 <_Z8convolvePiPchi+0x2ac>
     f72:	10 c1       	rjmp	.+544    	; 0x1194 <_Z8convolvePiPchi+0x4cc>

		if (temp_count == temp_buff_size) {
     f74:	9b e4       	ldi	r25, 0x4B	; 75
     f76:	c9 12       	cpse	r12, r25
     f78:	0b c0       	rjmp	.+22     	; 0xf90 <_Z8convolvePiPchi+0x2c8>
			target.read(temp_buff, temp_buff_size);
     f7a:	4b e4       	ldi	r20, 0x4B	; 75
     f7c:	50 e0       	ldi	r21, 0x00	; 0
     f7e:	be 01       	movw	r22, r28
     f80:	63 59       	subi	r22, 0x93	; 147
     f82:	7f 4f       	sbci	r23, 0xFF	; 255
     f84:	ce 01       	movw	r24, r28
     f86:	88 54       	subi	r24, 0x48	; 72
     f88:	9f 4f       	sbci	r25, 0xFF	; 255
     f8a:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <_ZN5SDLib4File4readEPvj>
			temp_count = 0;
     f8e:	c1 2c       	mov	r12, r1
		}
		temp = 127;

		for (uint8_t i = 0; i < filterlen - 1; i++) {
     f90:	d1 2c       	mov	r13, r1

		if (temp_count == temp_buff_size) {
			target.read(temp_buff, temp_buff_size);
			temp_count = 0;
		}
		temp = 127;
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	ae ef       	ldi	r26, 0xFE	; 254
     f98:	b2 e4       	ldi	r27, 0x42	; 66
     f9a:	ce 50       	subi	r28, 0x0E	; 14
     f9c:	df 4f       	sbci	r29, 0xFF	; 255
     f9e:	88 83       	st	Y, r24
     fa0:	99 83       	std	Y+1, r25	; 0x01
     fa2:	aa 83       	std	Y+2, r26	; 0x02
     fa4:	bb 83       	std	Y+3, r27	; 0x03
     fa6:	c2 5f       	subi	r28, 0xF2	; 242
     fa8:	d0 40       	sbci	r29, 0x00	; 0
     faa:	5d 2c       	mov	r5, r13
     fac:	dc 2c       	mov	r13, r12

		for (uint8_t i = 0; i < filterlen - 1; i++) {
     fae:	05 2d       	mov	r16, r5
     fb0:	10 e0       	ldi	r17, 0x00	; 0
     fb2:	06 15       	cp	r16, r6
     fb4:	17 05       	cpc	r17, r7
     fb6:	0c f0       	brlt	.+2      	; 0xfba <_Z8convolvePiPchi+0x2f2>
     fb8:	68 c0       	rjmp	.+208    	; 0x108a <_Z8convolvePiPchi+0x3c2>
			temp += ((float(signal_in[i]) - 127) * filter[i] / divider);
     fba:	74 01       	movw	r14, r8
     fbc:	e0 0e       	add	r14, r16
     fbe:	f1 1e       	adc	r15, r17
     fc0:	d7 01       	movw	r26, r14
     fc2:	6c 91       	ld	r22, X
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	0e 94 a5 28 	call	0x514a	; 0x514a <__floatunsisf>
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	4e ef       	ldi	r20, 0xFE	; 254
     fd4:	52 e4       	ldi	r21, 0x42	; 66
     fd6:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <__subsf3>
     fda:	c2 51       	subi	r28, 0x12	; 18
     fdc:	df 4f       	sbci	r29, 0xFF	; 255
     fde:	68 83       	st	Y, r22
     fe0:	79 83       	std	Y+1, r23	; 0x01
     fe2:	8a 83       	std	Y+2, r24	; 0x02
     fe4:	9b 83       	std	Y+3, r25	; 0x03
     fe6:	ce 5e       	subi	r28, 0xEE	; 238
     fe8:	d0 40       	sbci	r29, 0x00	; 0
     fea:	f8 01       	movw	r30, r16
     fec:	ee 0f       	add	r30, r30
     fee:	ff 1f       	adc	r31, r31
     ff0:	ea 0d       	add	r30, r10
     ff2:	fb 1d       	adc	r31, r11
     ff4:	60 81       	ld	r22, Z
     ff6:	71 81       	ldd	r23, Z+1	; 0x01
     ff8:	07 2e       	mov	r0, r23
     ffa:	00 0c       	add	r0, r0
     ffc:	88 0b       	sbc	r24, r24
     ffe:	99 0b       	sbc	r25, r25
    1000:	0e 94 a7 28 	call	0x514e	; 0x514e <__floatsisf>
    1004:	c2 51       	subi	r28, 0x12	; 18
    1006:	df 4f       	sbci	r29, 0xFF	; 255
    1008:	28 81       	ld	r18, Y
    100a:	39 81       	ldd	r19, Y+1	; 0x01
    100c:	4a 81       	ldd	r20, Y+2	; 0x02
    100e:	5b 81       	ldd	r21, Y+3	; 0x03
    1010:	ce 5e       	subi	r28, 0xEE	; 238
    1012:	d0 40       	sbci	r29, 0x00	; 0
    1014:	0e 94 33 29 	call	0x5266	; 0x5266 <__mulsf3>
    1018:	c2 51       	subi	r28, 0x12	; 18
    101a:	df 4f       	sbci	r29, 0xFF	; 255
    101c:	68 83       	st	Y, r22
    101e:	79 83       	std	Y+1, r23	; 0x01
    1020:	8a 83       	std	Y+2, r24	; 0x02
    1022:	9b 83       	std	Y+3, r25	; 0x03
    1024:	ce 5e       	subi	r28, 0xEE	; 238
    1026:	d0 40       	sbci	r29, 0x00	; 0
    1028:	b1 01       	movw	r22, r2
    102a:	03 2c       	mov	r0, r3
    102c:	00 0c       	add	r0, r0
    102e:	88 0b       	sbc	r24, r24
    1030:	99 0b       	sbc	r25, r25
    1032:	0e 94 a7 28 	call	0x514e	; 0x514e <__floatsisf>
    1036:	9b 01       	movw	r18, r22
    1038:	ac 01       	movw	r20, r24
    103a:	c2 51       	subi	r28, 0x12	; 18
    103c:	df 4f       	sbci	r29, 0xFF	; 255
    103e:	68 81       	ld	r22, Y
    1040:	79 81       	ldd	r23, Y+1	; 0x01
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	9b 81       	ldd	r25, Y+3	; 0x03
    1046:	ce 5e       	subi	r28, 0xEE	; 238
    1048:	d0 40       	sbci	r29, 0x00	; 0
    104a:	0e 94 04 28 	call	0x5008	; 0x5008 <__divsf3>
    104e:	9b 01       	movw	r18, r22
    1050:	ac 01       	movw	r20, r24
    1052:	ce 50       	subi	r28, 0x0E	; 14
    1054:	df 4f       	sbci	r29, 0xFF	; 255
    1056:	68 81       	ld	r22, Y
    1058:	79 81       	ldd	r23, Y+1	; 0x01
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	9b 81       	ldd	r25, Y+3	; 0x03
    105e:	c2 5f       	subi	r28, 0xF2	; 242
    1060:	d0 40       	sbci	r29, 0x00	; 0
    1062:	0e 94 98 27 	call	0x4f30	; 0x4f30 <__addsf3>
    1066:	ce 50       	subi	r28, 0x0E	; 14
    1068:	df 4f       	sbci	r29, 0xFF	; 255
    106a:	68 83       	st	Y, r22
    106c:	79 83       	std	Y+1, r23	; 0x01
    106e:	8a 83       	std	Y+2, r24	; 0x02
    1070:	9b 83       	std	Y+3, r25	; 0x03
    1072:	c2 5f       	subi	r28, 0xF2	; 242
    1074:	d0 40       	sbci	r29, 0x00	; 0
			signal_in[i] = signal_in[i + 1];
    1076:	0f 5f       	subi	r16, 0xFF	; 255
    1078:	1f 4f       	sbci	r17, 0xFF	; 255
    107a:	f4 01       	movw	r30, r8
    107c:	e0 0f       	add	r30, r16
    107e:	f1 1f       	adc	r31, r17
    1080:	80 81       	ld	r24, Z
    1082:	f7 01       	movw	r30, r14
    1084:	80 83       	st	Z, r24
			target.read(temp_buff, temp_buff_size);
			temp_count = 0;
		}
		temp = 127;

		for (uint8_t i = 0; i < filterlen - 1; i++) {
    1086:	53 94       	inc	r5
    1088:	92 cf       	rjmp	.-220    	; 0xfae <_Z8convolvePiPchi+0x2e6>
			temp += ((float(signal_in[i]) - 127) * filter[i] / divider);
			signal_in[i] = signal_in[i + 1];
		}
		temp += ((float(signal_in[filterlen - 1]) - 127) * filter[filterlen - 1] / divider);
    108a:	84 01       	movw	r16, r8
    108c:	06 0d       	add	r16, r6
    108e:	17 1d       	adc	r17, r7
    1090:	d8 01       	movw	r26, r16
    1092:	6c 91       	ld	r22, X
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	0e 94 a5 28 	call	0x514a	; 0x514a <__floatunsisf>
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	4e ef       	ldi	r20, 0xFE	; 254
    10a4:	52 e4       	ldi	r21, 0x42	; 66
    10a6:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <__subsf3>
    10aa:	c2 51       	subi	r28, 0x12	; 18
    10ac:	df 4f       	sbci	r29, 0xFF	; 255
    10ae:	68 83       	st	Y, r22
    10b0:	79 83       	std	Y+1, r23	; 0x01
    10b2:	8a 83       	std	Y+2, r24	; 0x02
    10b4:	9b 83       	std	Y+3, r25	; 0x03
    10b6:	ce 5e       	subi	r28, 0xEE	; 238
    10b8:	d0 40       	sbci	r29, 0x00	; 0
    10ba:	c6 50       	subi	r28, 0x06	; 6
    10bc:	df 4f       	sbci	r29, 0xFF	; 255
    10be:	e8 81       	ld	r30, Y
    10c0:	f9 81       	ldd	r31, Y+1	; 0x01
    10c2:	ca 5f       	subi	r28, 0xFA	; 250
    10c4:	d0 40       	sbci	r29, 0x00	; 0
    10c6:	e1 50       	subi	r30, 0x01	; 1
    10c8:	f0 48       	sbci	r31, 0x80	; 128
    10ca:	ee 0f       	add	r30, r30
    10cc:	ff 1f       	adc	r31, r31
    10ce:	ea 0d       	add	r30, r10
    10d0:	fb 1d       	adc	r31, r11
    10d2:	60 81       	ld	r22, Z
    10d4:	71 81       	ldd	r23, Z+1	; 0x01
    10d6:	07 2e       	mov	r0, r23
    10d8:	00 0c       	add	r0, r0
    10da:	88 0b       	sbc	r24, r24
    10dc:	99 0b       	sbc	r25, r25
    10de:	0e 94 a7 28 	call	0x514e	; 0x514e <__floatsisf>
    10e2:	c2 51       	subi	r28, 0x12	; 18
    10e4:	df 4f       	sbci	r29, 0xFF	; 255
    10e6:	28 81       	ld	r18, Y
    10e8:	39 81       	ldd	r19, Y+1	; 0x01
    10ea:	4a 81       	ldd	r20, Y+2	; 0x02
    10ec:	5b 81       	ldd	r21, Y+3	; 0x03
    10ee:	ce 5e       	subi	r28, 0xEE	; 238
    10f0:	d0 40       	sbci	r29, 0x00	; 0
    10f2:	0e 94 33 29 	call	0x5266	; 0x5266 <__mulsf3>
    10f6:	c2 51       	subi	r28, 0x12	; 18
    10f8:	df 4f       	sbci	r29, 0xFF	; 255
    10fa:	68 83       	st	Y, r22
    10fc:	79 83       	std	Y+1, r23	; 0x01
    10fe:	8a 83       	std	Y+2, r24	; 0x02
    1100:	9b 83       	std	Y+3, r25	; 0x03
    1102:	ce 5e       	subi	r28, 0xEE	; 238
    1104:	d0 40       	sbci	r29, 0x00	; 0
    1106:	b1 01       	movw	r22, r2
    1108:	03 2c       	mov	r0, r3
    110a:	00 0c       	add	r0, r0
    110c:	88 0b       	sbc	r24, r24
    110e:	99 0b       	sbc	r25, r25
    1110:	0e 94 a7 28 	call	0x514e	; 0x514e <__floatsisf>
    1114:	9b 01       	movw	r18, r22
    1116:	ac 01       	movw	r20, r24
    1118:	c2 51       	subi	r28, 0x12	; 18
    111a:	df 4f       	sbci	r29, 0xFF	; 255
    111c:	68 81       	ld	r22, Y
    111e:	79 81       	ldd	r23, Y+1	; 0x01
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	9b 81       	ldd	r25, Y+3	; 0x03
    1124:	ce 5e       	subi	r28, 0xEE	; 238
    1126:	d0 40       	sbci	r29, 0x00	; 0
    1128:	0e 94 04 28 	call	0x5008	; 0x5008 <__divsf3>
    112c:	9b 01       	movw	r18, r22
    112e:	ac 01       	movw	r20, r24
    1130:	ce 50       	subi	r28, 0x0E	; 14
    1132:	df 4f       	sbci	r29, 0xFF	; 255
    1134:	68 81       	ld	r22, Y
    1136:	79 81       	ldd	r23, Y+1	; 0x01
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	9b 81       	ldd	r25, Y+3	; 0x03
    113c:	c2 5f       	subi	r28, 0xF2	; 242
    113e:	d0 40       	sbci	r29, 0x00	; 0
    1140:	0e 94 98 27 	call	0x4f30	; 0x4f30 <__addsf3>
		signal_in[filterlen - 1] = temp_buff[temp_count++];
    1144:	ff 24       	eor	r15, r15
    1146:	f3 94       	inc	r15
    1148:	fd 0c       	add	r15, r13
    114a:	ed e6       	ldi	r30, 0x6D	; 109
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	ec 0f       	add	r30, r28
    1150:	fd 1f       	adc	r31, r29
    1152:	ed 0d       	add	r30, r13
    1154:	f1 1d       	adc	r31, r1
    1156:	20 81       	ld	r18, Z
    1158:	f8 01       	movw	r30, r16
    115a:	20 83       	st	Z, r18

		out.write(uint8_t(temp));
    115c:	0e 94 76 28 	call	0x50ec	; 0x50ec <__fixunssfsi>
    1160:	ce 01       	movw	r24, r28
    1162:	8d 52       	subi	r24, 0x2D	; 45
    1164:	9f 4f       	sbci	r25, 0xFF	; 255
    1166:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <_ZN5SDLib4File5writeEh>

		fSize --;
    116a:	ca 50       	subi	r28, 0x0A	; 10
    116c:	df 4f       	sbci	r29, 0xFF	; 255
    116e:	88 81       	ld	r24, Y
    1170:	99 81       	ldd	r25, Y+1	; 0x01
    1172:	aa 81       	ldd	r26, Y+2	; 0x02
    1174:	bb 81       	ldd	r27, Y+3	; 0x03
    1176:	c6 5f       	subi	r28, 0xF6	; 246
    1178:	d0 40       	sbci	r29, 0x00	; 0
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	a1 09       	sbc	r26, r1
    117e:	b1 09       	sbc	r27, r1
    1180:	ca 50       	subi	r28, 0x0A	; 10
    1182:	df 4f       	sbci	r29, 0xFF	; 255
    1184:	88 83       	st	Y, r24
    1186:	99 83       	std	Y+1, r25	; 0x01
    1188:	aa 83       	std	Y+2, r26	; 0x02
    118a:	bb 83       	std	Y+3, r27	; 0x03
    118c:	c6 5f       	subi	r28, 0xF6	; 246
    118e:	d0 40       	sbci	r29, 0x00	; 0
		for (uint8_t i = 0; i < filterlen - 1; i++) {
			temp += ((float(signal_in[i]) - 127) * filter[i] / divider);
			signal_in[i] = signal_in[i + 1];
		}
		temp += ((float(signal_in[filterlen - 1]) - 127) * filter[filterlen - 1] / divider);
		signal_in[filterlen - 1] = temp_buff[temp_count++];
    1190:	cf 2c       	mov	r12, r15
	unsigned long fSize = target.size();

	target.read(signal_in, filterlen);
	target.read(temp_buff, temp_buff_size);

	while (fSize) {
    1192:	e3 ce       	rjmp	.-570    	; 0xf5a <_Z8convolvePiPchi+0x292>
    1194:	cb 52       	subi	r28, 0x2B	; 43
    1196:	df 4f       	sbci	r29, 0xFF	; 255
    1198:	88 81       	ld	r24, Y
    119a:	99 81       	ldd	r25, Y+1	; 0x01
    119c:	c5 5d       	subi	r28, 0xD5	; 213
    119e:	d0 40       	sbci	r29, 0x00	; 0
    11a0:	9c 83       	std	Y+4, r25	; 0x04
    11a2:	8b 83       	std	Y+3, r24	; 0x03
    11a4:	c9 52       	subi	r28, 0x29	; 41
    11a6:	df 4f       	sbci	r29, 0xFF	; 255
    11a8:	88 81       	ld	r24, Y
    11aa:	99 81       	ldd	r25, Y+1	; 0x01
    11ac:	aa 81       	ldd	r26, Y+2	; 0x02
    11ae:	bb 81       	ldd	r27, Y+3	; 0x03
    11b0:	c7 5d       	subi	r28, 0xD7	; 215
    11b2:	d0 40       	sbci	r29, 0x00	; 0
    11b4:	8d 83       	std	Y+5, r24	; 0x05
    11b6:	9e 83       	std	Y+6, r25	; 0x06
    11b8:	af 83       	std	Y+7, r26	; 0x07
    11ba:	b8 87       	std	Y+8, r27	; 0x08
    11bc:	c5 52       	subi	r28, 0x25	; 37
    11be:	df 4f       	sbci	r29, 0xFF	; 255
    11c0:	88 81       	ld	r24, Y
    11c2:	99 81       	ldd	r25, Y+1	; 0x01
    11c4:	aa 81       	ldd	r26, Y+2	; 0x02
    11c6:	bb 81       	ldd	r27, Y+3	; 0x03
    11c8:	cb 5d       	subi	r28, 0xDB	; 219
    11ca:	d0 40       	sbci	r29, 0x00	; 0
    11cc:	89 87       	std	Y+9, r24	; 0x09
    11ce:	9a 87       	std	Y+10, r25	; 0x0a
    11d0:	ab 87       	std	Y+11, r26	; 0x0b
    11d2:	bc 87       	std	Y+12, r27	; 0x0c
    11d4:	82 e3       	ldi	r24, 0x32	; 50
    11d6:	92 e0       	ldi	r25, 0x02	; 2
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	8d e0       	ldi	r24, 0x0D	; 13
    11de:	e3 ed       	ldi	r30, 0xD3	; 211
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	ec 0f       	add	r30, r28
    11e4:	fd 1f       	adc	r31, r29
    11e6:	3c 96       	adiw	r30, 0x0c	; 12
    11e8:	de 01       	movw	r26, r28
    11ea:	1d 96       	adiw	r26, 0x0d	; 13
    11ec:	01 90       	ld	r0, Z+
    11ee:	0d 92       	st	X+, r0
    11f0:	8a 95       	dec	r24
    11f2:	e1 f7       	brne	.-8      	; 0x11ec <_Z8convolvePiPchi+0x524>
    11f4:	c4 51       	subi	r28, 0x14	; 20
    11f6:	df 4f       	sbci	r29, 0xFF	; 255
    11f8:	88 81       	ld	r24, Y
    11fa:	99 81       	ldd	r25, Y+1	; 0x01
    11fc:	cc 5e       	subi	r28, 0xEC	; 236
    11fe:	d0 40       	sbci	r29, 0x00	; 0
    1200:	9b 8f       	std	Y+27, r25	; 0x1b
    1202:	8a 8f       	std	Y+26, r24	; 0x1a

		out.write(uint8_t(temp));

		fSize --;
	}
	finalizeWave(out);
    1204:	ce 01       	movw	r24, r28
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <_Z12finalizeWaveN5SDLib4FileE>
	out.close();
    120c:	ce 01       	movw	r24, r28
    120e:	8d 52       	subi	r24, 0x2D	; 45
    1210:	9f 4f       	sbci	r25, 0xFF	; 255
    1212:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <_ZN5SDLib4File5closeEv>
	target.close();
    1216:	ce 01       	movw	r24, r28
    1218:	88 54       	subi	r24, 0x48	; 72
    121a:	9f 4f       	sbci	r25, 0xFF	; 255
    121c:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <_ZN5SDLib4File5closeEv>
			
	if(SD.exists("temp.bin")){SD.remove("temp.bin");}	
    1220:	6f ea       	ldi	r22, 0xAF	; 175
    1222:	71 e0       	ldi	r23, 0x01	; 1
    1224:	89 e8       	ldi	r24, 0x89	; 137
    1226:	92 e0       	ldi	r25, 0x02	; 2
    1228:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN5SDLib7SDClass6existsEPKc>
    122c:	88 23       	and	r24, r24
    122e:	31 f0       	breq	.+12     	; 0x123c <_Z8convolvePiPchi+0x574>
    1230:	6f ea       	ldi	r22, 0xAF	; 175
    1232:	71 e0       	ldi	r23, 0x01	; 1
    1234:	89 e8       	ldi	r24, 0x89	; 137
    1236:	92 e0       	ldi	r25, 0x02	; 2
    1238:	0e 94 ef 11 	call	0x23de	; 0x23de <_ZN5SDLib7SDClass6removeEPKc>
}
    123c:	c4 50       	subi	r28, 0x04	; 4
    123e:	df 4f       	sbci	r29, 0xFF	; 255
    1240:	a8 81       	ld	r26, Y
    1242:	b9 81       	ldd	r27, Y+1	; 0x01
    1244:	cc 5f       	subi	r28, 0xFC	; 252
    1246:	d0 40       	sbci	r29, 0x00	; 0
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	be bf       	out	0x3e, r27	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	ad bf       	out	0x3d, r26	; 61
    1252:	c3 50       	subi	r28, 0x03	; 3
    1254:	df 4f       	sbci	r29, 0xFF	; 255
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	df 90       	pop	r13
    126e:	cf 90       	pop	r12
    1270:	bf 90       	pop	r11
    1272:	af 90       	pop	r10
    1274:	9f 90       	pop	r9
    1276:	8f 90       	pop	r8
    1278:	7f 90       	pop	r7
    127a:	6f 90       	pop	r6
    127c:	5f 90       	pop	r5
    127e:	3f 90       	pop	r3
    1280:	2f 90       	pop	r2
    1282:	08 95       	ret

00001284 <_Z10pickFilterc>:
		out.close();
		target.close();

}

void pickFilter(char M){
    1284:	1f 93       	push	r17
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	6e 97       	sbiw	r28, 0x1e	; 30
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	18 2f       	mov	r17, r24
	
	char tempName[6] = {tracks[fcount],'.','W','A','V'};
    129c:	fe 01       	movw	r30, r28
    129e:	31 96       	adiw	r30, 0x01	; 1
    12a0:	86 e0       	ldi	r24, 0x06	; 6
    12a2:	df 01       	movw	r26, r30
    12a4:	1d 92       	st	X+, r1
    12a6:	8a 95       	dec	r24
    12a8:	e9 f7       	brne	.-6      	; 0x12a4 <_Z10pickFilterc+0x20>
    12aa:	3e e2       	ldi	r19, 0x2E	; 46
    12ac:	3a 83       	std	Y+2, r19	; 0x02
    12ae:	27 e5       	ldi	r18, 0x57	; 87
    12b0:	2b 83       	std	Y+3, r18	; 0x03
    12b2:	91 e4       	ldi	r25, 0x41	; 65
    12b4:	9c 83       	std	Y+4, r25	; 0x04
    12b6:	86 e5       	ldi	r24, 0x56	; 86
    12b8:	8d 83       	std	Y+5, r24	; 0x05
    12ba:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <fcount>
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	e6 58       	subi	r30, 0x86	; 134
    12c2:	fd 4f       	sbci	r31, 0xFD	; 253
    12c4:	40 81       	ld	r20, Z
    12c6:	49 83       	std	Y+1, r20	; 0x01
	fname_temp[0] = M;fname_temp[1] = tracks[fcount];fname_temp[2] = '.';fname_temp[3] = 'W';fname_temp[4] = 'A';fname_temp[5] = 'V';
    12c8:	e1 e7       	ldi	r30, 0x71	; 113
    12ca:	f2 e0       	ldi	r31, 0x02	; 2
    12cc:	10 83       	st	Z, r17
    12ce:	41 83       	std	Z+1, r20	; 0x01
    12d0:	32 83       	std	Z+2, r19	; 0x02
    12d2:	23 83       	std	Z+3, r18	; 0x03
    12d4:	94 83       	std	Z+4, r25	; 0x04
    12d6:	85 83       	std	Z+5, r24	; 0x05
	
	if(!SD.exists(fname_temp)){
    12d8:	bf 01       	movw	r22, r30
    12da:	89 e8       	ldi	r24, 0x89	; 137
    12dc:	92 e0       	ldi	r25, 0x02	; 2
    12de:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <_ZN5SDLib7SDClass6existsEPKc>
    12e2:	81 11       	cpse	r24, r1
    12e4:	54 c0       	rjmp	.+168    	; 0x138e <_Z10pickFilterc+0x10a>
		if(M=='S' || M=='H'){
    12e6:	13 35       	cpi	r17, 0x53	; 83
    12e8:	11 f0       	breq	.+4      	; 0x12ee <_Z10pickFilterc+0x6a>
    12ea:	18 34       	cpi	r17, 0x48	; 72
    12ec:	29 f5       	brne	.+74     	; 0x1338 <_Z10pickFilterc+0xb4>

			//int filter[11] ={-18,-47,-83,-121,-148,833,-148,-121,-83,-47,-18};//kaiser 100fc beta1.8
			int filter[11] =	{-18,-46,-83,-120,-148,834,-148,-120,-83,-46,-18};//kaiser 1000fc beta1.84
    12ee:	86 e1       	ldi	r24, 0x16	; 22
    12f0:	e9 e3       	ldi	r30, 0x39	; 57
    12f2:	f1 e0       	ldi	r31, 0x01	; 1
    12f4:	de 01       	movw	r26, r28
    12f6:	17 96       	adiw	r26, 0x07	; 7
    12f8:	01 90       	ld	r0, Z+
    12fa:	0d 92       	st	X+, r0
    12fc:	8a 95       	dec	r24
    12fe:	e1 f7       	brne	.-8      	; 0x12f8 <_Z10pickFilterc+0x74>
			if(M=='S'){
    1300:	13 35       	cpi	r17, 0x53	; 83
    1302:	79 f4       	brne	.+30     	; 0x1322 <_Z10pickFilterc+0x9e>
				sig_freqShift(tempName);
    1304:	ce 01       	movw	r24, r28
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	0e 94 d4 05 	call	0xba8	; 0xba8 <_Z13sig_freqShiftPc>
				convolve(filter,tempName,11,500);
    130c:	24 ef       	ldi	r18, 0xF4	; 244
    130e:	31 e0       	ldi	r19, 0x01	; 1
    1310:	4b e0       	ldi	r20, 0x0B	; 11
    1312:	be 01       	movw	r22, r28
    1314:	6f 5f       	subi	r22, 0xFF	; 255
    1316:	7f 4f       	sbci	r23, 0xFF	; 255
    1318:	ce 01       	movw	r24, r28
    131a:	07 96       	adiw	r24, 0x07	; 7
    131c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_Z8convolvePiPchi>
    1320:	36 c0       	rjmp	.+108    	; 0x138e <_Z10pickFilterc+0x10a>
			}
			else{
				convolve(filter,tempName,11,500);
    1322:	24 ef       	ldi	r18, 0xF4	; 244
    1324:	31 e0       	ldi	r19, 0x01	; 1
    1326:	4b e0       	ldi	r20, 0x0B	; 11
    1328:	be 01       	movw	r22, r28
    132a:	6f 5f       	subi	r22, 0xFF	; 255
    132c:	7f 4f       	sbci	r23, 0xFF	; 255
    132e:	ce 01       	movw	r24, r28
    1330:	07 96       	adiw	r24, 0x07	; 7
    1332:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_Z8convolvePiPchi>
			}
    1336:	2b c0       	rjmp	.+86     	; 0x138e <_Z10pickFilterc+0x10a>
			
		}
		
		else if(M=='B'){
    1338:	12 34       	cpi	r17, 0x42	; 66
    133a:	a1 f4       	brne	.+40     	; 0x1364 <_Z10pickFilterc+0xe0>
			//int filter[26] ={0,0,0,5,19,29,10,-44,-106,-121,-50,77,181,181,77,-50,-121,-106,-44,10,29,19,5,0,0,0};//bandpass Bar-hann 
			//int filter[15] ={14,-10,-71,-127,-107,12,164,233,164,12,-107,-127,-71,-10,14};//kaiser beta3 good
			int filter[11] =	{-69,-128,-109,13,170,242,170,13,-109,-128,-69};//kaiser beta1.9
    133c:	86 e1       	ldi	r24, 0x16	; 22
    133e:	ef e4       	ldi	r30, 0x4F	; 79
    1340:	f1 e0       	ldi	r31, 0x01	; 1
    1342:	de 01       	movw	r26, r28
    1344:	17 96       	adiw	r26, 0x07	; 7
    1346:	01 90       	ld	r0, Z+
    1348:	0d 92       	st	X+, r0
    134a:	8a 95       	dec	r24
    134c:	e1 f7       	brne	.-8      	; 0x1346 <_Z10pickFilterc+0xc2>
			convolve(filter,tempName,11,500);		
    134e:	24 ef       	ldi	r18, 0xF4	; 244
    1350:	31 e0       	ldi	r19, 0x01	; 1
    1352:	4b e0       	ldi	r20, 0x0B	; 11
    1354:	be 01       	movw	r22, r28
    1356:	6f 5f       	subi	r22, 0xFF	; 255
    1358:	7f 4f       	sbci	r23, 0xFF	; 255
    135a:	ce 01       	movw	r24, r28
    135c:	07 96       	adiw	r24, 0x07	; 7
    135e:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_Z8convolvePiPchi>
    1362:	15 c0       	rjmp	.+42     	; 0x138e <_Z10pickFilterc+0x10a>
		}
		else if(M=='L'){
    1364:	1c 34       	cpi	r17, 0x4C	; 76
    1366:	99 f4       	brne	.+38     	; 0x138e <_Z10pickFilterc+0x10a>
			//int filter[14] ={66,68,70,72,73,74,74,74,74,73,72,70,68,66};
			int filter[12] =	{37,57,77,96,111,119,119,111,96,77,57,37};//KAISER BETA=-2
    1368:	88 e1       	ldi	r24, 0x18	; 24
    136a:	e5 e6       	ldi	r30, 0x65	; 101
    136c:	f1 e0       	ldi	r31, 0x01	; 1
    136e:	de 01       	movw	r26, r28
    1370:	17 96       	adiw	r26, 0x07	; 7
    1372:	01 90       	ld	r0, Z+
    1374:	0d 92       	st	X+, r0
    1376:	8a 95       	dec	r24
    1378:	e1 f7       	brne	.-8      	; 0x1372 <_Z10pickFilterc+0xee>
			convolve(filter,tempName,12,1000);
    137a:	28 ee       	ldi	r18, 0xE8	; 232
    137c:	33 e0       	ldi	r19, 0x03	; 3
    137e:	4c e0       	ldi	r20, 0x0C	; 12
    1380:	be 01       	movw	r22, r28
    1382:	6f 5f       	subi	r22, 0xFF	; 255
    1384:	7f 4f       	sbci	r23, 0xFF	; 255
    1386:	ce 01       	movw	r24, r28
    1388:	07 96       	adiw	r24, 0x07	; 7
    138a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_Z8convolvePiPchi>
		}
	}
}
    138e:	6e 96       	adiw	r28, 0x1e	; 30
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	df 91       	pop	r29
    139c:	cf 91       	pop	r28
    139e:	1f 91       	pop	r17
    13a0:	08 95       	ret

000013a2 <_Z12checkChangesv>:
  }
  _delay_ms(1000);
   fname_temp[0] = tracks[fcount];fname_temp[1] = '.';fname_temp[2] = 'W';fname_temp[3] = 'A';fname_temp[4] = 'V';fname_temp[5] = NULL;
}

void checkChanges() {
    13a2:	0f 93       	push	r16
    13a4:	1f 93       	push	r17
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <_Z12checkChangesv+0xa>
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <_Z12checkChangesv+0xc>
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <_Z12checkChangesv+0xe>
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
  /*
     This function checks for frequency change requirements
  */
	clrDisplay("SCL M");
    13b4:	88 eb       	ldi	r24, 0xB8	; 184
    13b6:	91 e0       	ldi	r25, 0x01	; 1
    13b8:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
	

	char fsc =49;//= analog_in(ScalePOT);
	char fshift='X'; //= analog_in(shiftEnhancePOT);
	char row[6] = {' ',fsc,' ',' ',fshift};
    13bc:	fe 01       	movw	r30, r28
    13be:	31 96       	adiw	r30, 0x01	; 1
    13c0:	86 e0       	ldi	r24, 0x06	; 6
    13c2:	df 01       	movw	r26, r30
    13c4:	1d 92       	st	X+, r1
    13c6:	8a 95       	dec	r24
    13c8:	e9 f7       	brne	.-6      	; 0x13c4 <_Z12checkChangesv+0x22>
    13ca:	80 e2       	ldi	r24, 0x20	; 32
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	8b 83       	std	Y+3, r24	; 0x03
    13d0:	8c 83       	std	Y+4, r24	; 0x04
    13d2:	81 e3       	ldi	r24, 0x31	; 49
    13d4:	8a 83       	std	Y+2, r24	; 0x02
    13d6:	88 e5       	ldi	r24, 0x58	; 88
    13d8:	8d 83       	std	Y+5, r24	; 0x05
  */
	clrDisplay("SCL M");
	

	char fsc =49;//= analog_in(ScalePOT);
	char fshift='X'; //= analog_in(shiftEnhancePOT);
    13da:	18 e5       	ldi	r17, 0x58	; 88
     This function checks for frequency change requirements
  */
	clrDisplay("SCL M");
	

	char fsc =49;//= analog_in(ScalePOT);
    13dc:	01 e3       	ldi	r16, 0x31	; 49
	char fshift='X'; //= analog_in(shiftEnhancePOT);
	char row[6] = {' ',fsc,' ',' ',fshift};
	while(true){
		char key_input = keyInput();
    13de:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_Z8keyInputv>
		if (key_input=='p')
    13e2:	80 37       	cpi	r24, 0x70	; 112
    13e4:	31 f4       	brne	.+12     	; 0x13f2 <_Z12checkChangesv+0x50>
		{
			freqScal = uint8_t(fsc) - 48;
    13e6:	00 53       	subi	r16, 0x30	; 48
    13e8:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <freqScal>
		}
		row[1]=fsc;row[4]=fshift;
		secondLine(row);
	}
	
	if(fshift!='X'){
    13ec:	18 35       	cpi	r17, 0x58	; 88
    13ee:	29 f5       	brne	.+74     	; 0x143a <_Z12checkChangesv+0x98>
    13f0:	2b c0       	rjmp	.+86     	; 0x1448 <_Z12checkChangesv+0xa6>
		if (key_input=='p')
		{
			freqScal = uint8_t(fsc) - 48;
			break;
		}
		else if(key_input=='>'){
    13f2:	8e 33       	cpi	r24, 0x3E	; 62
    13f4:	59 f4       	brne	.+22     	; 0x140c <_Z12checkChangesv+0x6a>
			if(fshift=='X'){
    13f6:	18 35       	cpi	r17, 0x58	; 88
    13f8:	81 f0       	breq	.+32     	; 0x141a <_Z12checkChangesv+0x78>
				fshift='H';
			}
			else if(fshift=='H'){
    13fa:	18 34       	cpi	r17, 0x48	; 72
    13fc:	81 f0       	breq	.+32     	; 0x141e <_Z12checkChangesv+0x7c>
				fshift='L';
			}
			else if(fshift=='L'){
    13fe:	1c 34       	cpi	r17, 0x4C	; 76
    1400:	81 f0       	breq	.+32     	; 0x1422 <_Z12checkChangesv+0x80>
				fshift='B';
			}
			else if(fshift=='B'){
    1402:	12 34       	cpi	r17, 0x42	; 66
    1404:	81 f0       	breq	.+32     	; 0x1426 <_Z12checkChangesv+0x84>
				fshift='S';
			}
			else if(fshift=='S'){
    1406:	13 35       	cpi	r17, 0x53	; 83
    1408:	89 f4       	brne	.+34     	; 0x142c <_Z12checkChangesv+0x8a>
    140a:	0f c0       	rjmp	.+30     	; 0x142a <_Z12checkChangesv+0x88>
				fshift='X';
			}
		}
		else if(key_input=='<'){
    140c:	8c 33       	cpi	r24, 0x3C	; 60
    140e:	71 f4       	brne	.+28     	; 0x142c <_Z12checkChangesv+0x8a>
			if(fsc==51){
    1410:	03 33       	cpi	r16, 0x33	; 51
    1412:	09 f4       	brne	.+2      	; 0x1416 <_Z12checkChangesv+0x74>
				fsc=48;
    1414:	00 e3       	ldi	r16, 0x30	; 48
			}
			fsc++;
    1416:	0f 5f       	subi	r16, 0xFF	; 255
    1418:	09 c0       	rjmp	.+18     	; 0x142c <_Z12checkChangesv+0x8a>
			freqScal = uint8_t(fsc) - 48;
			break;
		}
		else if(key_input=='>'){
			if(fshift=='X'){
				fshift='H';
    141a:	18 e4       	ldi	r17, 0x48	; 72
    141c:	07 c0       	rjmp	.+14     	; 0x142c <_Z12checkChangesv+0x8a>
			}
			else if(fshift=='H'){
				fshift='L';
    141e:	1c e4       	ldi	r17, 0x4C	; 76
    1420:	05 c0       	rjmp	.+10     	; 0x142c <_Z12checkChangesv+0x8a>
			}
			else if(fshift=='L'){
				fshift='B';
    1422:	12 e4       	ldi	r17, 0x42	; 66
    1424:	03 c0       	rjmp	.+6      	; 0x142c <_Z12checkChangesv+0x8a>
			}
			else if(fshift=='B'){
				fshift='S';
    1426:	13 e5       	ldi	r17, 0x53	; 83
    1428:	01 c0       	rjmp	.+2      	; 0x142c <_Z12checkChangesv+0x8a>
			}
			else if(fshift=='S'){
				fshift='X';
    142a:	18 e5       	ldi	r17, 0x58	; 88
			if(fsc==51){
				fsc=48;
			}
			fsc++;
		}
		row[1]=fsc;row[4]=fshift;
    142c:	0a 83       	std	Y+2, r16	; 0x02
    142e:	1d 83       	std	Y+5, r17	; 0x05
		secondLine(row);
    1430:	ce 01       	movw	r24, r28
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	0e 94 41 04 	call	0x882	; 0x882 <_Z10secondLinePKc>
	

	char fsc =49;//= analog_in(ScalePOT);
	char fshift='X'; //= analog_in(shiftEnhancePOT);
	char row[6] = {' ',fsc,' ',' ',fshift};
	while(true){
    1438:	d2 cf       	rjmp	.-92     	; 0x13de <_Z12checkChangesv+0x3c>
		row[1]=fsc;row[4]=fshift;
		secondLine(row);
	}
	
	if(fshift!='X'){
		  clrDisplay("Processing");
    143a:	8e eb       	ldi	r24, 0xBE	; 190
    143c:	91 e0       	ldi	r25, 0x01	; 1
    143e:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
		  pickFilter(fshift);
    1442:	81 2f       	mov	r24, r17
    1444:	0e 94 42 09 	call	0x1284	; 0x1284 <_Z10pickFilterc>
	}

}
    1448:	26 96       	adiw	r28, 0x06	; 6
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	1f 91       	pop	r17
    145a:	0f 91       	pop	r16
    145c:	08 95       	ret

0000145e <_Z9playTrackv>:
	  }
	  test_File.close();
}

void playTrack()
{
    145e:	1f 93       	push	r17
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	6b 97       	sbiw	r28, 0x1b	; 27
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	f8 94       	cli
    146e:	de bf       	out	0x3e, r29	; 62
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	cd bf       	out	0x3d, r28	; 61
  /*This function reads data from the specified file and play*/

  checkChanges();//check for frequency change requirements
    1474:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <_Z12checkChangesv>
clrDisplay("Playing");
    1478:	89 ec       	ldi	r24, 0xC9	; 201
    147a:	91 e0       	ldi	r25, 0x01	; 1
    147c:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>

  File test_File = SD.open(fname_temp);
    1480:	21 e0       	ldi	r18, 0x01	; 1
    1482:	41 e7       	ldi	r20, 0x71	; 113
    1484:	52 e0       	ldi	r21, 0x02	; 2
    1486:	69 e8       	ldi	r22, 0x89	; 137
    1488:	72 e0       	ldi	r23, 0x02	; 2
    148a:	ce 01       	movw	r24, r28
    148c:	01 96       	adiw	r24, 0x01	; 1
    148e:	0e 94 cc 10 	call	0x2198	; 0x2198 <_ZN5SDLib7SDClass4openEPKch>

  if (!test_File) {
    1492:	ce 01       	movw	r24, r28
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <_ZN5SDLib4FilecvbEv>
    149a:	81 11       	cpse	r24, r1
    149c:	0e c0       	rjmp	.+28     	; 0x14ba <_Z9playTrackv+0x5c>
    // if the file didn't open, print an error:
    secondLine("Error");
    149e:	81 ed       	ldi	r24, 0xD1	; 209
    14a0:	91 e0       	ldi	r25, 0x01	; 1
    14a2:	0e 94 41 04 	call	0x882	; 0x882 <_Z10secondLinePKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14a6:	2f ef       	ldi	r18, 0xFF	; 255
    14a8:	83 ed       	ldi	r24, 0xD3	; 211
    14aa:	90 e3       	ldi	r25, 0x30	; 48
    14ac:	21 50       	subi	r18, 0x01	; 1
    14ae:	80 40       	sbci	r24, 0x00	; 0
    14b0:	90 40       	sbci	r25, 0x00	; 0
    14b2:	e1 f7       	brne	.-8      	; 0x14ac <_Z9playTrackv+0x4e>
    14b4:	00 c0       	rjmp	.+0      	; 0x14b6 <_Z9playTrackv+0x58>
    14b6:	00 00       	nop
    14b8:	5e c0       	rjmp	.+188    	; 0x1576 <_Z9playTrackv+0x118>
    _delay_ms(1000);
  }
  else {
    test_File.seek(44);
    14ba:	4c e2       	ldi	r20, 0x2C	; 44
    14bc:	50 e0       	ldi	r21, 0x00	; 0
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	ce 01       	movw	r24, r28
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <_ZN5SDLib4File4seekEm>
    
    secondLine(fname_temp);
    14ca:	81 e7       	ldi	r24, 0x71	; 113
    14cc:	92 e0       	ldi	r25, 0x02	; 2
    14ce:	0e 94 41 04 	call	0x882	; 0x882 <_Z10secondLinePKc>

    //Check whether a frequency scale is set
    //>---------------------------< NORMAL OUTPUT >----------------------------------<

    if (freqScal == 0 || freqScal == 1) {
    14d2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <freqScal>
    14d6:	82 30       	cpi	r24, 0x02	; 2
    14d8:	c8 f4       	brcc	.+50     	; 0x150c <_Z9playTrackv+0xae>
      while (test_File.available()) {
    14da:	ce 01       	movw	r24, r28
    14dc:	01 96       	adiw	r24, 0x01	; 1
    14de:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_ZN5SDLib4File9availableEv>
    14e2:	89 2b       	or	r24, r25
    14e4:	e1 f1       	breq	.+120    	; 0x155e <_Z9playTrackv+0x100>

        OCR1A = test_File.read();
    14e6:	ce 01       	movw	r24, r28
    14e8:	01 96       	adiw	r24, 0x01	; 1
    14ea:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <_ZN5SDLib4File4readEv>
    14ee:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    14f2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14f6:	25 ed       	ldi	r18, 0xD5	; 213
    14f8:	2a 95       	dec	r18
    14fa:	f1 f7       	brne	.-4      	; 0x14f8 <_Z9playTrackv+0x9a>
    14fc:	00 00       	nop
        _delay_us(40);  //Use this delay for 12.5KHz play
        //_delay_us(20);    //Use this delay for 16kHz play
        
		//****Comment both of delays for 24kHz play*******
        
        char key = keyInput();
    14fe:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_Z8keyInputv>
        if (key && key == 'p') {
    1502:	80 37       	cpi	r24, 0x70	; 112
    1504:	51 f7       	brne	.-44     	; 0x14da <_Z9playTrackv+0x7c>
    1506:	2b c0       	rjmp	.+86     	; 0x155e <_Z9playTrackv+0x100>
        }

        count++;

        if (count == freqScal + 1) {//resetting the count
          count = 1;
    1508:	11 e0       	ldi	r17, 0x01	; 1
    150a:	01 c0       	rjmp	.+2      	; 0x150e <_Z9playTrackv+0xb0>
    150c:	11 e0       	ldi	r17, 0x01	; 1
    //Output for freaquency scaled track
    //Using down sampling

    else {
      uint8_t count = 1;
      while (test_File.available()) {
    150e:	ce 01       	movw	r24, r28
    1510:	01 96       	adiw	r24, 0x01	; 1
    1512:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <_ZN5SDLib4File9availableEv>
    1516:	89 2b       	or	r24, r25
    1518:	11 f1       	breq	.+68     	; 0x155e <_Z9playTrackv+0x100>

        char key = keyInput();
    151a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_Z8keyInputv>
        if (key && key == 'p') {
    151e:	80 37       	cpi	r24, 0x70	; 112
    1520:	f1 f0       	breq	.+60     	; 0x155e <_Z9playTrackv+0x100>
          break;
        }

        if (count == 1) {
    1522:	11 30       	cpi	r17, 0x01	; 1
    1524:	69 f4       	brne	.+26     	; 0x1540 <_Z9playTrackv+0xe2>
          //Accept the first sample among (# of samples=freqScal)
		  OCR1A = test_File.read();
    1526:	ce 01       	movw	r24, r28
    1528:	01 96       	adiw	r24, 0x01	; 1
    152a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <_ZN5SDLib4File4readEv>
    152e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1532:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1536:	85 ed       	ldi	r24, 0xD5	; 213
    1538:	8a 95       	dec	r24
    153a:	f1 f7       	brne	.-4      	; 0x1538 <_Z9playTrackv+0xda>
    153c:	00 00       	nop
    153e:	04 c0       	rjmp	.+8      	; 0x1548 <_Z9playTrackv+0xea>
          _delay_us(40);  //Use this delay for 12.5KHz play
          //_delay_us(20);    //Use this delay for 16kHz play
          //Comment both of delays for 24kHz play

        } else {
          test_File.read();//This is to neglet samples in between
    1540:	ce 01       	movw	r24, r28
    1542:	01 96       	adiw	r24, 0x01	; 1
    1544:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <_ZN5SDLib4File4readEv>
        }

        count++;
    1548:	1f 5f       	subi	r17, 0xFF	; 255

        if (count == freqScal + 1) {//resetting the count
    154a:	21 2f       	mov	r18, r17
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <freqScal>
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	28 17       	cp	r18, r24
    1558:	39 07       	cpc	r19, r25
    155a:	c9 f6       	brne	.-78     	; 0x150e <_Z9playTrackv+0xb0>
    155c:	d5 cf       	rjmp	.-86     	; 0x1508 <_Z9playTrackv+0xaa>
        }
      }
    }
    // close the file:

	OCR1A = 0;
    155e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1562:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    secondLine("End of play");
    1566:	87 ed       	ldi	r24, 0xD7	; 215
    1568:	91 e0       	ldi	r25, 0x01	; 1
    156a:	0e 94 41 04 	call	0x882	; 0x882 <_Z10secondLinePKc>
    test_File.close();
    156e:	ce 01       	movw	r24, r28
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <_ZN5SDLib4File5closeEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1576:	9f ef       	ldi	r25, 0xFF	; 255
    1578:	23 ed       	ldi	r18, 0xD3	; 211
    157a:	80 e3       	ldi	r24, 0x30	; 48
    157c:	91 50       	subi	r25, 0x01	; 1
    157e:	20 40       	sbci	r18, 0x00	; 0
    1580:	80 40       	sbci	r24, 0x00	; 0
    1582:	e1 f7       	brne	.-8      	; 0x157c <_Z9playTrackv+0x11e>
    1584:	00 c0       	rjmp	.+0      	; 0x1586 <_Z9playTrackv+0x128>
    1586:	00 00       	nop
	    
  }
  _delay_ms(1000);
   fname_temp[0] = tracks[fcount];fname_temp[1] = '.';fname_temp[2] = 'W';fname_temp[3] = 'A';fname_temp[4] = 'V';fname_temp[5] = NULL;
    1588:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <fcount>
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	e6 58       	subi	r30, 0x86	; 134
    1590:	fd 4f       	sbci	r31, 0xFD	; 253
    1592:	80 81       	ld	r24, Z
    1594:	e1 e7       	ldi	r30, 0x71	; 113
    1596:	f2 e0       	ldi	r31, 0x02	; 2
    1598:	80 83       	st	Z, r24
    159a:	8e e2       	ldi	r24, 0x2E	; 46
    159c:	81 83       	std	Z+1, r24	; 0x01
    159e:	87 e5       	ldi	r24, 0x57	; 87
    15a0:	82 83       	std	Z+2, r24	; 0x02
    15a2:	81 e4       	ldi	r24, 0x41	; 65
    15a4:	83 83       	std	Z+3, r24	; 0x03
    15a6:	86 e5       	ldi	r24, 0x56	; 86
    15a8:	84 83       	std	Z+4, r24	; 0x04
    15aa:	15 82       	std	Z+5, r1	; 0x05
}
    15ac:	6b 96       	adiw	r28, 0x1b	; 27
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	f8 94       	cli
    15b2:	de bf       	out	0x3e, r29	; 62
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	cd bf       	out	0x3d, r28	; 61
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	1f 91       	pop	r17
    15be:	08 95       	ret

000015c0 <_Z9analog_ini>:


//>--------------------------------------< IO FUNCTIONS >--------------------------------------<
uint8_t analog_in(int inputPin = 0000){
		
	ADMUX |= inputPin;
    15c0:	ec e7       	ldi	r30, 0x7C	; 124
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	90 81       	ld	r25, Z
    15c6:	89 2b       	or	r24, r25
    15c8:	80 83       	st	Z, r24
	
	ADCSRA = ADCSRA | (1 << ADSC);
    15ca:	ea e7       	ldi	r30, 0x7A	; 122
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	80 64       	ori	r24, 0x40	; 64
    15d2:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC));
    15d4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    15d8:	86 fd       	sbrc	r24, 6
    15da:	fc cf       	rjmp	.-8      	; 0x15d4 <_Z9analog_ini+0x14>
	
	ADMUX &= 0b11110000;
    15dc:	ec e7       	ldi	r30, 0x7C	; 124
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	80 7f       	andi	r24, 0xF0	; 240
    15e4:	80 83       	st	Z, r24
	
	return ADCH;
    15e6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
    15ea:	08 95       	ret

000015ec <_Z6recordv>:

//END OF LCD DISPLAY FUNCTIONS

//>-----------------------------< RECORD AND PLAY FUNCTIONS >----------------------------------<

void record() {
    15ec:	1f 93       	push	r17
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	c1 55       	subi	r28, 0x51	; 81
    15f8:	d1 09       	sbc	r29, r1
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
	 /*Used to record the data got from input into a file*/
	  checkDuplicates();
    1604:	0e 94 b1 04 	call	0x962	; 0x962 <_Z15checkDuplicatesv>
	  File test_File = SD.open(fname_temp, FILE_WRITE);
    1608:	27 e1       	ldi	r18, 0x17	; 23
    160a:	41 e7       	ldi	r20, 0x71	; 113
    160c:	52 e0       	ldi	r21, 0x02	; 2
    160e:	69 e8       	ldi	r22, 0x89	; 137
    1610:	72 e0       	ldi	r23, 0x02	; 2
    1612:	ce 01       	movw	r24, r28
    1614:	c7 96       	adiw	r24, 0x37	; 55
    1616:	0e 94 cc 10 	call	0x2198	; 0x2198 <_ZN5SDLib7SDClass4openEPKch>

	  if (!test_File) {
    161a:	ce 01       	movw	r24, r28
    161c:	c7 96       	adiw	r24, 0x37	; 55
    161e:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <_ZN5SDLib4FilecvbEv>
    1622:	81 11       	cpse	r24, r1
    1624:	05 c0       	rjmp	.+10     	; 0x1630 <_Z6recordv+0x44>
		clrDisplay("Error");
    1626:	81 ed       	ldi	r24, 0xD1	; 209
    1628:	91 e0       	ldi	r25, 0x01	; 1
    162a:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
    162e:	80 c0       	rjmp	.+256    	; 0x1730 <_Z6recordv+0x144>
	  }
	  else {
		clrDisplay("Recording");
    1630:	83 ee       	ldi	r24, 0xE3	; 227
    1632:	91 e0       	ldi	r25, 0x01	; 1
    1634:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
    1638:	89 ad       	ldd	r24, Y+57	; 0x39
    163a:	9a ad       	ldd	r25, Y+58	; 0x3a
    163c:	9f 8f       	std	Y+31, r25	; 0x1f
    163e:	8e 8f       	std	Y+30, r24	; 0x1e
    1640:	8b ad       	ldd	r24, Y+59	; 0x3b
    1642:	9c ad       	ldd	r25, Y+60	; 0x3c
    1644:	ad ad       	ldd	r26, Y+61	; 0x3d
    1646:	be ad       	ldd	r27, Y+62	; 0x3e
    1648:	88 a3       	std	Y+32, r24	; 0x20
    164a:	99 a3       	std	Y+33, r25	; 0x21
    164c:	aa a3       	std	Y+34, r26	; 0x22
    164e:	bb a3       	std	Y+35, r27	; 0x23
    1650:	23 96       	adiw	r28, 0x03	; 3
    1652:	8c ad       	ldd	r24, Y+60	; 0x3c
    1654:	9d ad       	ldd	r25, Y+61	; 0x3d
    1656:	ae ad       	ldd	r26, Y+62	; 0x3e
    1658:	bf ad       	ldd	r27, Y+63	; 0x3f
    165a:	23 97       	sbiw	r28, 0x03	; 3
    165c:	8c a3       	std	Y+36, r24	; 0x24
    165e:	9d a3       	std	Y+37, r25	; 0x25
    1660:	ae a3       	std	Y+38, r26	; 0x26
    1662:	bf a3       	std	Y+39, r27	; 0x27
    1664:	82 e3       	ldi	r24, 0x32	; 50
    1666:	92 e0       	ldi	r25, 0x02	; 2
    1668:	9d 8f       	std	Y+29, r25	; 0x1d
    166a:	8c 8f       	std	Y+28, r24	; 0x1c
    166c:	8d e0       	ldi	r24, 0x0D	; 13
    166e:	fe 01       	movw	r30, r28
    1670:	ed 5b       	subi	r30, 0xBD	; 189
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	de 01       	movw	r26, r28
    1676:	98 96       	adiw	r26, 0x28	; 40
    1678:	01 90       	ld	r0, Z+
    167a:	0d 92       	st	X+, r0
    167c:	8a 95       	dec	r24
    167e:	e1 f7       	brne	.-8      	; 0x1678 <_Z6recordv+0x8c>
    1680:	62 96       	adiw	r28, 0x12	; 18
    1682:	8e ad       	ldd	r24, Y+62	; 0x3e
    1684:	9f ad       	ldd	r25, Y+63	; 0x3f
    1686:	62 97       	sbiw	r28, 0x12	; 18
    1688:	9e ab       	std	Y+54, r25	; 0x36
    168a:	8d ab       	std	Y+53, r24	; 0x35
		makeWaveFile(test_File);
    168c:	ce 01       	movw	r24, r28
    168e:	4c 96       	adiw	r24, 0x1c	; 28
    1690:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z12makeWaveFileN5SDLib4FileE>
		uint8_t pot_Read;

		while (true) {
		
		  pot_Read = analog_in(mic);
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <_Z9analog_ini>
    169c:	18 2f       	mov	r17, r24
		
		  char key = keyInput();
    169e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_Z8keyInputv>

		  if (key && key == 's') {
    16a2:	83 37       	cpi	r24, 0x73	; 115
    16a4:	51 f0       	breq	.+20     	; 0x16ba <_Z6recordv+0xce>
			break;
		  }

		  test_File.write(pot_Read);
    16a6:	61 2f       	mov	r22, r17
    16a8:	ce 01       	movw	r24, r28
    16aa:	c7 96       	adiw	r24, 0x37	; 55
    16ac:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <_ZN5SDLib4File5writeEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16b0:	25 e5       	ldi	r18, 0x55	; 85
    16b2:	2a 95       	dec	r18
    16b4:	f1 f7       	brne	.-4      	; 0x16b2 <_Z6recordv+0xc6>
    16b6:	00 00       	nop
    16b8:	ed cf       	rjmp	.-38     	; 0x1694 <_Z6recordv+0xa8>
    16ba:	89 ad       	ldd	r24, Y+57	; 0x39
    16bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    16be:	9c 83       	std	Y+4, r25	; 0x04
    16c0:	8b 83       	std	Y+3, r24	; 0x03
    16c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    16c4:	9c ad       	ldd	r25, Y+60	; 0x3c
    16c6:	ad ad       	ldd	r26, Y+61	; 0x3d
    16c8:	be ad       	ldd	r27, Y+62	; 0x3e
    16ca:	8d 83       	std	Y+5, r24	; 0x05
    16cc:	9e 83       	std	Y+6, r25	; 0x06
    16ce:	af 83       	std	Y+7, r26	; 0x07
    16d0:	b8 87       	std	Y+8, r27	; 0x08
    16d2:	23 96       	adiw	r28, 0x03	; 3
    16d4:	8c ad       	ldd	r24, Y+60	; 0x3c
    16d6:	9d ad       	ldd	r25, Y+61	; 0x3d
    16d8:	ae ad       	ldd	r26, Y+62	; 0x3e
    16da:	bf ad       	ldd	r27, Y+63	; 0x3f
    16dc:	23 97       	sbiw	r28, 0x03	; 3
    16de:	89 87       	std	Y+9, r24	; 0x09
    16e0:	9a 87       	std	Y+10, r25	; 0x0a
    16e2:	ab 87       	std	Y+11, r26	; 0x0b
    16e4:	bc 87       	std	Y+12, r27	; 0x0c
    16e6:	82 e3       	ldi	r24, 0x32	; 50
    16e8:	92 e0       	ldi	r25, 0x02	; 2
    16ea:	9a 83       	std	Y+2, r25	; 0x02
    16ec:	89 83       	std	Y+1, r24	; 0x01
    16ee:	8d e0       	ldi	r24, 0x0D	; 13
    16f0:	fe 01       	movw	r30, r28
    16f2:	ed 5b       	subi	r30, 0xBD	; 189
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	de 01       	movw	r26, r28
    16f8:	1d 96       	adiw	r26, 0x0d	; 13
    16fa:	01 90       	ld	r0, Z+
    16fc:	0d 92       	st	X+, r0
    16fe:	8a 95       	dec	r24
    1700:	e1 f7       	brne	.-8      	; 0x16fa <_Z6recordv+0x10e>
    1702:	62 96       	adiw	r28, 0x12	; 18
    1704:	8e ad       	ldd	r24, Y+62	; 0x3e
    1706:	9f ad       	ldd	r25, Y+63	; 0x3f
    1708:	62 97       	sbiw	r28, 0x12	; 18
    170a:	9b 8f       	std	Y+27, r25	; 0x1b
    170c:	8a 8f       	std	Y+26, r24	; 0x1a
		  _delay_us(16);

		}
		finalizeWave(test_File);
    170e:	ce 01       	movw	r24, r28
    1710:	01 96       	adiw	r24, 0x01	; 1
    1712:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <_Z12finalizeWaveN5SDLib4FileE>
		clrDisplay("Saved");
    1716:	8d ee       	ldi	r24, 0xED	; 237
    1718:	91 e0       	ldi	r25, 0x01	; 1
    171a:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    171e:	8f ef       	ldi	r24, 0xFF	; 255
    1720:	93 ed       	ldi	r25, 0xD3	; 211
    1722:	20 e3       	ldi	r18, 0x30	; 48
    1724:	81 50       	subi	r24, 0x01	; 1
    1726:	90 40       	sbci	r25, 0x00	; 0
    1728:	20 40       	sbci	r18, 0x00	; 0
    172a:	e1 f7       	brne	.-8      	; 0x1724 <_Z6recordv+0x138>
    172c:	00 c0       	rjmp	.+0      	; 0x172e <_Z6recordv+0x142>
    172e:	00 00       	nop
		_delay_ms(1000);
	  }
	  test_File.close();
    1730:	ce 01       	movw	r24, r28
    1732:	c7 96       	adiw	r24, 0x37	; 55
    1734:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <_ZN5SDLib4File5closeEv>
}
    1738:	cf 5a       	subi	r28, 0xAF	; 175
    173a:	df 4f       	sbci	r29, 0xFF	; 255
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	cd bf       	out	0x3d, r28	; 61
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	1f 91       	pop	r17
    174c:	08 95       	ret

0000174e <_Z17initialize_Thingsv>:

void initialize_Things()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    174e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
	sbi(TCCR0A, WGM01);
    1750:	84 b5       	in	r24, 0x24	; 36
    1752:	82 60       	ori	r24, 0x02	; 2
    1754:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1756:	84 b5       	in	r24, 0x24	; 36
    1758:	81 60       	ori	r24, 0x01	; 1
    175a:	84 bd       	out	0x24, r24	; 36
	
	// set timer 0 prescale factor to 64
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    175c:	85 b5       	in	r24, 0x25	; 37
    175e:	82 60       	ori	r24, 0x02	; 2
    1760:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1762:	85 b5       	in	r24, 0x25	; 37
    1764:	81 60       	ori	r24, 0x01	; 1
    1766:	85 bd       	out	0x25, r24	; 37
	
	// enable timer 0 overflow interrupt
	sbi(TIMSK0, TOIE0);
    1768:	ee e6       	ldi	r30, 0x6E	; 110
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	81 60       	ori	r24, 0x01	; 1
    1770:	80 83       	st	Z, r24
	
	// timers 1 and 2 are used for phase-correct hardware pwm
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle
	TCCR1B = 0;
    1772:	e1 e8       	ldi	r30, 0x81	; 129
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	10 82       	st	Z, r1
	
	//select no-prescaling
	//sbi(TCCR1B, CS11);
	sbi(TCCR1B, CS10);
    1778:	80 81       	ld	r24, Z
    177a:	81 60       	ori	r24, 0x01	; 1
    177c:	80 83       	st	Z, r24
	
	//select the Wave form generation mode as FAST PWM
	//select the non-inverting mode
	sbi(TCCR1A, WGM10);
    177e:	a0 e8       	ldi	r26, 0x80	; 128
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	8c 91       	ld	r24, X
    1784:	81 60       	ori	r24, 0x01	; 1
    1786:	8c 93       	st	X, r24
	sbi(TCCR1A, COM1A1);
    1788:	8c 91       	ld	r24, X
    178a:	80 68       	ori	r24, 0x80	; 128
    178c:	8c 93       	st	X, r24
	sbi(TCCR1B, WGM12);
    178e:	80 81       	ld	r24, Z
    1790:	88 60       	ori	r24, 0x08	; 8
    1792:	80 83       	st	Z, r24
	
	// set timer 2 prescale factor to 64
	sbi(TCCR2B, CS22);
    1794:	e1 eb       	ldi	r30, 0xB1	; 177
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	84 60       	ori	r24, 0x04	; 4
    179c:	80 83       	st	Z, r24
	
	// configure timer 2 for phase correct pwm (8-bit)
	sbi(TCCR2A, WGM20);
    179e:	e0 eb       	ldi	r30, 0xB0	; 176
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	81 60       	ori	r24, 0x01	; 1
    17a6:	80 83       	st	Z, r24
	
	// set a2d prescaler(16) so we are inside the desired 50-200 KHz range.
	sbi(ADCSRA, ADPS2);
    17a8:	ea e7       	ldi	r30, 0x7A	; 122
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	84 60       	ori	r24, 0x04	; 4
    17b0:	80 83       	st	Z, r24
	//sbi(ADCSRA, ADPS1);
	//sbi(ADCSRA, ADPS0);
	
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    17b2:	80 81       	ld	r24, Z
    17b4:	80 68       	ori	r24, 0x80	; 128
    17b6:	80 83       	st	Z, r24
	
	//set the reference voltage as AVCC
	//set the Left adjust result
	//keeping last 3bits as 0, because for the default pin selection as ADC0
	ADMUX = 0b01100000;
    17b8:	80 e6       	ldi	r24, 0x60	; 96
    17ba:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	
	// the bootloader connects pins 0 and 1 to the USART; disconnect them
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
	UCSR0B = 0;
    17be:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    17c2:	08 95       	ret

000017c4 <main>:


int main(void)
{	
	//This function is from arduino...need to edit
	initialize_Things();
    17c4:	0e 94 a7 0b 	call	0x174e	; 0x174e <_Z17initialize_Thingsv>
	//sei();

	fname_temp[1] = '.';fname_temp[2] = 'W';fname_temp[3] = 'A';fname_temp[4] = 'V';
    17c8:	e1 e7       	ldi	r30, 0x71	; 113
    17ca:	f2 e0       	ldi	r31, 0x02	; 2
    17cc:	8e e2       	ldi	r24, 0x2E	; 46
    17ce:	81 83       	std	Z+1, r24	; 0x01
    17d0:	87 e5       	ldi	r24, 0x57	; 87
    17d2:	82 83       	std	Z+2, r24	; 0x02
    17d4:	81 e4       	ldi	r24, 0x41	; 65
    17d6:	83 83       	std	Z+3, r24	; 0x03
    17d8:	86 e5       	ldi	r24, 0x56	; 86
    17da:	84 83       	std	Z+4, r24	; 0x04

	//PORTD FOR KEYS
	DDRD = 0b00000000;
    17dc:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0b11111111;
    17de:	8f ef       	ldi	r24, 0xFF	; 255
    17e0:	8b b9       	out	0x0b, r24	; 11
	
	//CONFIGURING PINS FOR ANALOG INPUT
	DDRC &= 0b11111110;	
    17e2:	87 b1       	in	r24, 0x07	; 7
    17e4:	8e 7f       	andi	r24, 0xFE	; 254
    17e6:	87 b9       	out	0x07, r24	; 7
	//analogRead_config();
	
	//CONFIGURING SPEAKER FOR OUTPUT
	DDRB |= (1<<DDB1);
    17e8:	84 b1       	in	r24, 0x04	; 4
    17ea:	82 60       	ori	r24, 0x02	; 2
    17ec:	84 b9       	out	0x04, r24	; 4
	//analogWrite_config();
	OCR1A = 0;
    17ee:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    17f2:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	//BEGIN THE LCD
	lcd.begin();
    17f6:	89 e6       	ldi	r24, 0x69	; 105
    17f8:	92 e0       	ldi	r25, 0x02	; 2
    17fa:	0e 94 94 03 	call	0x728	; 0x728 <_ZN9LCDScreen5beginEv>
	
	//INITIALIZING THE SD CARD
	if (!SD.begin(sdcard))
    17fe:	6a e0       	ldi	r22, 0x0A	; 10
    1800:	89 e8       	ldi	r24, 0x89	; 137
    1802:	92 e0       	ldi	r25, 0x02	; 2
    1804:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <_ZN5SDLib7SDClass5beginEh>
    1808:	81 11       	cpse	r24, r1
    180a:	05 c0       	rjmp	.+10     	; 0x1816 <main+0x52>
	{
		clrDisplay("Error");
    180c:	81 ed       	ldi	r24, 0xD1	; 209
    180e:	91 e0       	ldi	r25, 0x01	; 1
    1810:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
    1814:	ff cf       	rjmp	.-2      	; 0x1814 <main+0x50>
		while (1);
	}
	
	getTrackList();
    1816:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_Z12getTrackListv>
    181a:	2f ef       	ldi	r18, 0xFF	; 255
    181c:	83 ed       	ldi	r24, 0xD3	; 211
    181e:	90 e3       	ldi	r25, 0x30	; 48
    1820:	21 50       	subi	r18, 0x01	; 1
    1822:	80 40       	sbci	r24, 0x00	; 0
    1824:	90 40       	sbci	r25, 0x00	; 0
    1826:	e1 f7       	brne	.-8      	; 0x1820 <main+0x5c>
    1828:	00 c0       	rjmp	.+0      	; 0x182a <main+0x66>
    182a:	00 00       	nop

    while (1) 
    {
		
		  //>-------------------------------< RECORD MODE (LEVEL 1)>--------------------------------<
		  if (mode == 's' && mode_ == 'j')
    182c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <mode>
    1830:	83 37       	cpi	r24, 0x73	; 115
    1832:	59 f4       	brne	.+22     	; 0x184a <main+0x86>
    1834:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode_>
    1838:	8a 36       	cpi	r24, 0x6A	; 106
    183a:	39 f4       	brne	.+14     	; 0x184a <main+0x86>
		  {
			record();
    183c:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <_Z6recordv>
			getTrackList();
    1840:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_Z12getTrackListv>
			mode = 'i';
    1844:	89 e6       	ldi	r24, 0x69	; 105
    1846:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <mode>
		  }

		  //>--------------------------< ENTERING PLAYER MODE (LEVEL 1)>----------------------------<

		  if (mode == 'p' && mode_ == 'j')
    184a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <mode>
    184e:	80 37       	cpi	r24, 0x70	; 112
    1850:	c1 f5       	brne	.+112    	; 0x18c2 <main+0xfe>
    1852:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode_>
    1856:	8a 36       	cpi	r24, 0x6A	; 106
    1858:	a1 f5       	brne	.+104    	; 0x18c2 <main+0xfe>
		  {
			mode_ = 'k';
    185a:	8b e6       	ldi	r24, 0x6B	; 107
    185c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mode_>
			mode = 'i';
    1860:	89 e6       	ldi	r24, 0x69	; 105
    1862:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <mode>
			  Press 'Play/Stop' when a track is loaded to the player
			  Press 'Play/Stop' to stop playing
			  Press 'next' or 'previous' to toggle between tracks
			  Press 'record/stop' in track loaded mode to exit player mode
			*/
			if (files == 0)
    1866:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <files>
    186a:	81 11       	cpse	r24, r1
    186c:	11 c0       	rjmp	.+34     	; 0x1890 <main+0xcc>
			{
			  mode_ = 'j';
    186e:	8a e6       	ldi	r24, 0x6A	; 106
    1870:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mode_>
			  clrDisplay("No Tracks");
    1874:	83 ef       	ldi	r24, 0xF3	; 243
    1876:	91 e0       	ldi	r25, 0x01	; 1
    1878:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
    187c:	2f ef       	ldi	r18, 0xFF	; 255
    187e:	83 ed       	ldi	r24, 0xD3	; 211
    1880:	90 e3       	ldi	r25, 0x30	; 48
    1882:	21 50       	subi	r18, 0x01	; 1
    1884:	80 40       	sbci	r24, 0x00	; 0
    1886:	90 40       	sbci	r25, 0x00	; 0
    1888:	e1 f7       	brne	.-8      	; 0x1882 <main+0xbe>
    188a:	00 c0       	rjmp	.+0      	; 0x188c <main+0xc8>
    188c:	00 00       	nop
    188e:	19 c0       	rjmp	.+50     	; 0x18c2 <main+0xfe>
			  _delay_ms(1000);
			}
			else
			{
				clrDisplay("Ready to Play");
    1890:	8d ef       	ldi	r24, 0xFD	; 253
    1892:	91 e0       	ldi	r25, 0x01	; 1
    1894:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
    1898:	2f ef       	ldi	r18, 0xFF	; 255
    189a:	83 ed       	ldi	r24, 0xD3	; 211
    189c:	90 e3       	ldi	r25, 0x30	; 48
    189e:	21 50       	subi	r18, 0x01	; 1
    18a0:	80 40       	sbci	r24, 0x00	; 0
    18a2:	90 40       	sbci	r25, 0x00	; 0
    18a4:	e1 f7       	brne	.-8      	; 0x189e <main+0xda>
    18a6:	00 c0       	rjmp	.+0      	; 0x18a8 <main+0xe4>
    18a8:	00 00       	nop
			  
			  _delay_ms(1000);
			  
			  fname_temp[0] = tracks[fcount];
    18aa:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <fcount>
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	e6 58       	subi	r30, 0x86	; 134
    18b2:	fd 4f       	sbci	r31, 0xFD	; 253
    18b4:	80 81       	ld	r24, Z
    18b6:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <fname_temp>
			  secondLine(fname_temp);
    18ba:	81 e7       	ldi	r24, 0x71	; 113
    18bc:	92 e0       	ldi	r25, 0x02	; 2
    18be:	0e 94 41 04 	call	0x882	; 0x882 <_Z10secondLinePKc>
			}
		  }
		  //>--------------------------< PLAYER MODE (LEVEL 2)>------------------------------------<
		  if (mode_ == 'k')
    18c2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode_>
    18c6:	8b 36       	cpi	r24, 0x6B	; 107
    18c8:	09 f0       	breq	.+2      	; 0x18cc <main+0x108>
    18ca:	7f c0       	rjmp	.+254    	; 0x19ca <main+0x206>
		  {
			  while (1)
			  {
				  char key_input = keyInput();
    18cc:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_Z8keyInputv>
				  if (key_input)
    18d0:	88 23       	and	r24, r24
    18d2:	e1 f3       	breq	.-8      	; 0x18cc <main+0x108>
				  {
					  mode = key_input;
    18d4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <mode>
					  break;
				  }
			  }
			if (mode == 'p')
    18d8:	80 37       	cpi	r24, 0x70	; 112
    18da:	39 f4       	brne	.+14     	; 0x18ea <main+0x126>
			{
			  //Play the track
			  playTrack();
    18dc:	0e 94 2f 0a 	call	0x145e	; 0x145e <_Z9playTrackv>
			  
			  clrDisplay("Ready to Play");
    18e0:	8d ef       	ldi	r24, 0xFD	; 253
    18e2:	91 e0       	ldi	r25, 0x01	; 1
    18e4:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
    18e8:	69 c0       	rjmp	.+210    	; 0x19bc <main+0x1f8>

			}
			else if (mode == '>')
    18ea:	8e 33       	cpi	r24, 0x3E	; 62
    18ec:	19 f4       	brne	.+6      	; 0x18f4 <main+0x130>
			{
			  //Load the next track
			  nextTrack();
    18ee:	0e 94 85 04 	call	0x90a	; 0x90a <_Z9nextTrackv>
    18f2:	64 c0       	rjmp	.+200    	; 0x19bc <main+0x1f8>
			}
			else if (mode == '<')
    18f4:	8c 33       	cpi	r24, 0x3C	; 60
    18f6:	19 f4       	brne	.+6      	; 0x18fe <main+0x13a>
			{
			  //load the previous track
			  previousTrack();
    18f8:	0e 94 9b 04 	call	0x936	; 0x936 <_Z13previousTrackv>
    18fc:	5f c0       	rjmp	.+190    	; 0x19bc <main+0x1f8>
			}
			else if (mode == 's')
    18fe:	83 37       	cpi	r24, 0x73	; 115
    1900:	39 f4       	brne	.+14     	; 0x1910 <main+0x14c>
			{
			  //Exit from player mode
			  mode_ = 'j';
    1902:	8a e6       	ldi	r24, 0x6A	; 106
    1904:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mode_>
			  mode = 'i';
    1908:	89 e6       	ldi	r24, 0x69	; 105
    190a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <mode>
    190e:	56 c0       	rjmp	.+172    	; 0x19bc <main+0x1f8>
			}
			else if (mode == 'd')
    1910:	84 36       	cpi	r24, 0x64	; 100
    1912:	09 f0       	breq	.+2      	; 0x1916 <main+0x152>
    1914:	53 c0       	rjmp	.+166    	; 0x19bc <main+0x1f8>
			{
						  //This mode deletes the track loaded in payer
						  clrDisplay("Delete?");
    1916:	8b e0       	ldi	r24, 0x0B	; 11
    1918:	92 e0       	ldi	r25, 0x02	; 2
    191a:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
						  //secondLine("DELETE");
						  while (true)
						  {
							  char key = keyInput();
    191e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_Z8keyInputv>
							  if (key && key == 'd')
    1922:	84 36       	cpi	r24, 0x64	; 100
    1924:	d9 f4       	brne	.+54     	; 0x195c <main+0x198>
							  {
								  //SD.remove(fname_temp);
								  deleteTrack();
    1926:	0e 94 c4 04 	call	0x988	; 0x988 <_Z11deleteTrackv>
								  clrDisplay("Deleted");
    192a:	87 e1       	ldi	r24, 0x17	; 23
    192c:	92 e0       	ldi	r25, 0x02	; 2
    192e:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
								  getTrackList();
    1932:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_Z12getTrackListv>
								  
								  if(fcount == files){
    1936:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <fcount>
    193a:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <files>
    193e:	89 13       	cpse	r24, r25
    1940:	03 c0       	rjmp	.+6      	; 0x1948 <main+0x184>
									  fcount--;
    1942:	81 50       	subi	r24, 0x01	; 1
    1944:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <fcount>
    1948:	2f ef       	ldi	r18, 0xFF	; 255
    194a:	83 ed       	ldi	r24, 0xD3	; 211
    194c:	90 e3       	ldi	r25, 0x30	; 48
    194e:	21 50       	subi	r18, 0x01	; 1
    1950:	80 40       	sbci	r24, 0x00	; 0
    1952:	90 40       	sbci	r25, 0x00	; 0
    1954:	e1 f7       	brne	.-8      	; 0x194e <main+0x18a>
    1956:	00 c0       	rjmp	.+0      	; 0x1958 <main+0x194>
    1958:	00 00       	nop
    195a:	0f c0       	rjmp	.+30     	; 0x197a <main+0x1b6>
								  }
								  
								  _delay_ms(1000);
								  break;
							  }
							  else if (key=='p')
    195c:	80 37       	cpi	r24, 0x70	; 112
    195e:	f9 f6       	brne	.-66     	; 0x191e <main+0x15a>
							  {
								  clrDisplay("Not Deleted");
    1960:	83 e1       	ldi	r24, 0x13	; 19
    1962:	92 e0       	ldi	r25, 0x02	; 2
    1964:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
    1968:	2f ef       	ldi	r18, 0xFF	; 255
    196a:	83 ed       	ldi	r24, 0xD3	; 211
    196c:	90 e3       	ldi	r25, 0x30	; 48
    196e:	21 50       	subi	r18, 0x01	; 1
    1970:	80 40       	sbci	r24, 0x00	; 0
    1972:	90 40       	sbci	r25, 0x00	; 0
    1974:	e1 f7       	brne	.-8      	; 0x196e <main+0x1aa>
    1976:	00 c0       	rjmp	.+0      	; 0x1978 <main+0x1b4>
    1978:	00 00       	nop
								  _delay_ms(1000);
								  break;
							  }
						  }

						  if (files == 0)
    197a:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <files>
    197e:	81 11       	cpse	r24, r1
    1980:	11 c0       	rjmp	.+34     	; 0x19a4 <main+0x1e0>
						  {
							  clrDisplay("No Tracks");
    1982:	83 ef       	ldi	r24, 0xF3	; 243
    1984:	91 e0       	ldi	r25, 0x01	; 1
    1986:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
    198a:	2f ef       	ldi	r18, 0xFF	; 255
    198c:	83 ed       	ldi	r24, 0xD3	; 211
    198e:	90 e3       	ldi	r25, 0x30	; 48
    1990:	21 50       	subi	r18, 0x01	; 1
    1992:	80 40       	sbci	r24, 0x00	; 0
    1994:	90 40       	sbci	r25, 0x00	; 0
    1996:	e1 f7       	brne	.-8      	; 0x1990 <main+0x1cc>
    1998:	00 c0       	rjmp	.+0      	; 0x199a <main+0x1d6>
    199a:	00 00       	nop
							  _delay_ms(1000);
							  mode_ = 'j';
    199c:	8a e6       	ldi	r24, 0x6A	; 106
    199e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <mode_>
    19a2:	0c c0       	rjmp	.+24     	; 0x19bc <main+0x1f8>
						  }
						  else{
							  clrDisplay("Ready to Play");
    19a4:	8d ef       	ldi	r24, 0xFD	; 253
    19a6:	91 e0       	ldi	r25, 0x01	; 1
    19a8:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>

							  fname_temp[0] = tracks[fcount];
    19ac:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <fcount>
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	e6 58       	subi	r30, 0x86	; 134
    19b4:	fd 4f       	sbci	r31, 0xFD	; 253
    19b6:	80 81       	ld	r24, Z
    19b8:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <fname_temp>
						  }
			}
			secondLine(fname_temp);
    19bc:	81 e7       	ldi	r24, 0x71	; 113
    19be:	92 e0       	ldi	r25, 0x02	; 2
    19c0:	0e 94 41 04 	call	0x882	; 0x882 <_Z10secondLinePKc>
			mode = 'i';
    19c4:	89 e6       	ldi	r24, 0x69	; 105
    19c6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <mode>
		  }
		  //>-------------------------< PAUSE MODE (LEVEL 1)>--------------------------------------<
		  if (mode == 'i' && mode_ == 'j')
    19ca:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <mode>
    19ce:	89 36       	cpi	r24, 0x69	; 105
    19d0:	09 f0       	breq	.+2      	; 0x19d4 <main+0x210>
    19d2:	2c cf       	rjmp	.-424    	; 0x182c <main+0x68>
    19d4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode_>
    19d8:	8a 36       	cpi	r24, 0x6A	; 106
    19da:	09 f0       	breq	.+2      	; 0x19de <main+0x21a>
    19dc:	27 cf       	rjmp	.-434    	; 0x182c <main+0x68>
		  {
			clrDisplay("Voice Recorder");
    19de:	8f e1       	ldi	r24, 0x1F	; 31
    19e0:	92 e0       	ldi	r25, 0x02	; 2
    19e2:	0e 94 2c 04 	call	0x858	; 0x858 <_Z10clrDisplayPKc>
			while (1)
			{
				char key_input = keyInput();
    19e6:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_Z8keyInputv>
				if (key_input)
    19ea:	88 23       	and	r24, r24
    19ec:	e1 f3       	breq	.-8      	; 0x19e6 <main+0x222>
				{
					mode = key_input;
    19ee:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <mode>
    19f2:	1c cf       	rjmp	.-456    	; 0x182c <main+0x68>

000019f4 <_GLOBAL__sub_I_mode>:
	
	// the bootloader connects pins 0 and 1 to the USART; disconnect them
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
	UCSR0B = 0;
    19f4:	6f ef       	ldi	r22, 0xFF	; 255
    19f6:	7f ef       	ldi	r23, 0xFF	; 255
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z41__static_initialization_and_destruction_0ii>
    1a00:	08 95       	ret

00001a02 <_ZN5SDLib4File5writeEh>:
}

// a directory is a special type of file
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	1f 92       	push	r1
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	69 83       	std	Y+1, r22	; 0x01
    1a0e:	dc 01       	movw	r26, r24
    1a10:	ed 91       	ld	r30, X+
    1a12:	fc 91       	ld	r31, X
    1a14:	02 80       	ldd	r0, Z+2	; 0x02
    1a16:	f3 81       	ldd	r31, Z+3	; 0x03
    1a18:	e0 2d       	mov	r30, r0
    1a1a:	41 e0       	ldi	r20, 0x01	; 1
    1a1c:	50 e0       	ldi	r21, 0x00	; 0
    1a1e:	be 01       	movw	r22, r28
    1a20:	6f 5f       	subi	r22, 0xFF	; 255
    1a22:	7f 4f       	sbci	r23, 0xFF	; 255
    1a24:	09 95       	icall
    1a26:	0f 90       	pop	r0
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	08 95       	ret

00001a2e <_ZN5SDLib4File17availableForWriteEv>:
    1a2e:	dc 01       	movw	r26, r24
    1a30:	59 96       	adiw	r26, 0x19	; 25
    1a32:	8d 91       	ld	r24, X+
    1a34:	9c 91       	ld	r25, X
    1a36:	5a 97       	sbiw	r26, 0x1a	; 26
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	41 f0       	breq	.+16     	; 0x1a4c <_ZN5SDLib4File17availableForWriteEv+0x1e>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	ed 91       	ld	r30, X+
    1a40:	fc 91       	ld	r31, X
    1a42:	04 80       	ldd	r0, Z+4	; 0x04
    1a44:	f5 81       	ldd	r31, Z+5	; 0x05
    1a46:	e0 2d       	mov	r30, r0
    1a48:	09 95       	icall
    1a4a:	08 95       	ret
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	08 95       	ret

00001a52 <_ZN5SDLib4File5writeEPKhj>:
    1a52:	cf 93       	push	r28
    1a54:	df 93       	push	r29
    1a56:	dc 01       	movw	r26, r24
    1a58:	59 96       	adiw	r26, 0x19	; 25
    1a5a:	ed 91       	ld	r30, X+
    1a5c:	fc 91       	ld	r31, X
    1a5e:	5a 97       	sbiw	r26, 0x1a	; 26
    1a60:	30 97       	sbiw	r30, 0x00	; 0
    1a62:	49 f4       	brne	.+18     	; 0x1a76 <_ZN5SDLib4File5writeEPKhj+0x24>
    1a64:	21 e0       	ldi	r18, 0x01	; 1
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	13 96       	adiw	r26, 0x03	; 3
    1a6a:	3c 93       	st	X, r19
    1a6c:	2e 93       	st	-X, r18
    1a6e:	12 97       	sbiw	r26, 0x02	; 2
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	13 c0       	rjmp	.+38     	; 0x1a9c <_ZN5SDLib4File5writeEPKhj+0x4a>
    1a76:	ec 01       	movw	r28, r24
    1a78:	13 82       	std	Z+3, r1	; 0x03
    1a7a:	12 82       	std	Z+2, r1	; 0x02
    1a7c:	89 8d       	ldd	r24, Y+25	; 0x19
    1a7e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a80:	0e 94 56 1c 	call	0x38ac	; 0x38ac <_ZN6SdFile5writeEPKvj>
    1a84:	e9 8d       	ldd	r30, Y+25	; 0x19
    1a86:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1a88:	22 81       	ldd	r18, Z+2	; 0x02
    1a8a:	33 81       	ldd	r19, Z+3	; 0x03
    1a8c:	23 2b       	or	r18, r19
    1a8e:	31 f0       	breq	.+12     	; 0x1a9c <_ZN5SDLib4File5writeEPKhj+0x4a>
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	9b 83       	std	Y+3, r25	; 0x03
    1a96:	8a 83       	std	Y+2, r24	; 0x02
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	08 95       	ret

00001aa2 <_ZN5SDLib4File4readEv>:
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	1f 92       	push	r1
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
    1aac:	fc 01       	movw	r30, r24
    1aae:	81 8d       	ldd	r24, Z+25	; 0x19
    1ab0:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	79 f0       	breq	.+30     	; 0x1ad4 <_ZN5SDLib4File4readEv+0x32>
    1ab6:	41 e0       	ldi	r20, 0x01	; 1
    1ab8:	50 e0       	ldi	r21, 0x00	; 0
    1aba:	be 01       	movw	r22, r28
    1abc:	6f 5f       	subi	r22, 0xFF	; 255
    1abe:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac0:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <_ZN6SdFile4readEPvj>
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	19 f4       	brne	.+6      	; 0x1ace <_ZN5SDLib4File4readEv+0x2c>
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	05 c0       	rjmp	.+10     	; 0x1ad8 <_ZN5SDLib4File4readEv+0x36>
    1ace:	8f ef       	ldi	r24, 0xFF	; 255
    1ad0:	9f ef       	ldi	r25, 0xFF	; 255
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <_ZN5SDLib4File4readEv+0x36>
    1ad4:	8f ef       	ldi	r24, 0xFF	; 255
    1ad6:	9f ef       	ldi	r25, 0xFF	; 255
    1ad8:	0f 90       	pop	r0
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	08 95       	ret

00001ae0 <_ZN5SDLib4File4peekEv>:
    1ae0:	ef 92       	push	r14
    1ae2:	ff 92       	push	r15
    1ae4:	0f 93       	push	r16
    1ae6:	1f 93       	push	r17
    1ae8:	cf 93       	push	r28
    1aea:	df 93       	push	r29
    1aec:	1f 92       	push	r1
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	fc 01       	movw	r30, r24
    1af4:	81 8d       	ldd	r24, Z+25	; 0x19
    1af6:	92 8d       	ldd	r25, Z+26	; 0x1a
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	19 f1       	breq	.+70     	; 0x1b42 <_ZN5SDLib4File4peekEv+0x62>
    1afc:	8f 01       	movw	r16, r30
    1afe:	41 e0       	ldi	r20, 0x01	; 1
    1b00:	50 e0       	ldi	r21, 0x00	; 0
    1b02:	be 01       	movw	r22, r28
    1b04:	6f 5f       	subi	r22, 0xFF	; 255
    1b06:	7f 4f       	sbci	r23, 0xFF	; 255
    1b08:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <_ZN6SdFile4readEPvj>
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	19 f4       	brne	.+6      	; 0x1b16 <_ZN5SDLib4File4peekEv+0x36>
    1b10:	e9 80       	ldd	r14, Y+1	; 0x01
    1b12:	f1 2c       	mov	r15, r1
    1b14:	03 c0       	rjmp	.+6      	; 0x1b1c <_ZN5SDLib4File4peekEv+0x3c>
    1b16:	ee 24       	eor	r14, r14
    1b18:	ea 94       	dec	r14
    1b1a:	fe 2c       	mov	r15, r14
    1b1c:	8f ef       	ldi	r24, 0xFF	; 255
    1b1e:	e8 16       	cp	r14, r24
    1b20:	f8 06       	cpc	r15, r24
    1b22:	89 f0       	breq	.+34     	; 0x1b46 <_ZN5SDLib4File4peekEv+0x66>
    1b24:	f8 01       	movw	r30, r16
    1b26:	81 8d       	ldd	r24, Z+25	; 0x19
    1b28:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	42 85       	ldd	r20, Z+10	; 0x0a
    1b2e:	53 85       	ldd	r21, Z+11	; 0x0b
    1b30:	64 85       	ldd	r22, Z+12	; 0x0c
    1b32:	75 85       	ldd	r23, Z+13	; 0x0d
    1b34:	41 50       	subi	r20, 0x01	; 1
    1b36:	51 09       	sbc	r21, r1
    1b38:	61 09       	sbc	r22, r1
    1b3a:	71 09       	sbc	r23, r1
    1b3c:	0e 94 79 18 	call	0x30f2	; 0x30f2 <_ZN6SdFile7seekSetEm>
    1b40:	02 c0       	rjmp	.+4      	; 0x1b46 <_ZN5SDLib4File4peekEv+0x66>
    1b42:	e1 2c       	mov	r14, r1
    1b44:	f1 2c       	mov	r15, r1
    1b46:	c7 01       	movw	r24, r14
    1b48:	0f 90       	pop	r0
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	1f 91       	pop	r17
    1b50:	0f 91       	pop	r16
    1b52:	ff 90       	pop	r15
    1b54:	ef 90       	pop	r14
    1b56:	08 95       	ret

00001b58 <_ZN5SDLib4File5flushEv>:
    1b58:	fc 01       	movw	r30, r24
    1b5a:	81 8d       	ldd	r24, Z+25	; 0x19
    1b5c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	19 f0       	breq	.+6      	; 0x1b68 <_ZN5SDLib4File5flushEv+0x10>
    1b62:	61 e0       	ldi	r22, 0x01	; 1
    1b64:	0e 94 1a 19 	call	0x3234	; 0x3234 <_ZN6SdFile4syncEh>
    1b68:	08 95       	ret

00001b6a <_ZN5SDLib4FileC1E6SdFilePKc>:
    1b6a:	ef 92       	push	r14
    1b6c:	ff 92       	push	r15
    1b6e:	0f 93       	push	r16
    1b70:	1f 93       	push	r17
    1b72:	cf 93       	push	r28
    1b74:	df 93       	push	r29
    1b76:	ec 01       	movw	r28, r24
    1b78:	7b 01       	movw	r14, r22
    1b7a:	8a 01       	movw	r16, r20
    1b7c:	1b 82       	std	Y+3, r1	; 0x03
    1b7e:	1a 82       	std	Y+2, r1	; 0x02
    1b80:	88 ee       	ldi	r24, 0xE8	; 232
    1b82:	93 e0       	ldi	r25, 0x03	; 3
    1b84:	a0 e0       	ldi	r26, 0x00	; 0
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	8c 83       	std	Y+4, r24	; 0x04
    1b8a:	9d 83       	std	Y+5, r25	; 0x05
    1b8c:	ae 83       	std	Y+6, r26	; 0x06
    1b8e:	bf 83       	std	Y+7, r27	; 0x07
    1b90:	82 e3       	ldi	r24, 0x32	; 50
    1b92:	92 e0       	ldi	r25, 0x02	; 2
    1b94:	99 83       	std	Y+1, r25	; 0x01
    1b96:	88 83       	st	Y, r24
    1b98:	8d e1       	ldi	r24, 0x1D	; 29
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	0e 94 e8 29 	call	0x53d0	; 0x53d0 <malloc>
    1ba0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ba2:	89 8f       	std	Y+25, r24	; 0x19
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	79 f0       	breq	.+30     	; 0x1bc6 <_ZN5SDLib4FileC1E6SdFilePKc+0x5c>
    1ba8:	2d e1       	ldi	r18, 0x1D	; 29
    1baa:	f7 01       	movw	r30, r14
    1bac:	dc 01       	movw	r26, r24
    1bae:	01 90       	ld	r0, Z+
    1bb0:	0d 92       	st	X+, r0
    1bb2:	2a 95       	dec	r18
    1bb4:	e1 f7       	brne	.-8      	; 0x1bae <_ZN5SDLib4FileC1E6SdFilePKc+0x44>
    1bb6:	4c e0       	ldi	r20, 0x0C	; 12
    1bb8:	50 e0       	ldi	r21, 0x00	; 0
    1bba:	b8 01       	movw	r22, r16
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	0c 96       	adiw	r24, 0x0c	; 12
    1bc0:	0e 94 26 2b 	call	0x564c	; 0x564c <strncpy>
    1bc4:	18 8e       	std	Y+24, r1	; 0x18
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	ff 90       	pop	r15
    1bd0:	ef 90       	pop	r14
    1bd2:	08 95       	ret

00001bd4 <_ZN5SDLib4FileC1Ev>:
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	13 82       	std	Z+3, r1	; 0x03
    1bd8:	12 82       	std	Z+2, r1	; 0x02
    1bda:	88 ee       	ldi	r24, 0xE8	; 232
    1bdc:	93 e0       	ldi	r25, 0x03	; 3
    1bde:	a0 e0       	ldi	r26, 0x00	; 0
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	84 83       	std	Z+4, r24	; 0x04
    1be4:	95 83       	std	Z+5, r25	; 0x05
    1be6:	a6 83       	std	Z+6, r26	; 0x06
    1be8:	b7 83       	std	Z+7, r27	; 0x07
    1bea:	82 e3       	ldi	r24, 0x32	; 50
    1bec:	92 e0       	ldi	r25, 0x02	; 2
    1bee:	91 83       	std	Z+1, r25	; 0x01
    1bf0:	80 83       	st	Z, r24
    1bf2:	12 8e       	std	Z+26, r1	; 0x1a
    1bf4:	11 8e       	std	Z+25, r1	; 0x19
    1bf6:	14 86       	std	Z+12, r1	; 0x0c
    1bf8:	08 95       	ret

00001bfa <_ZN5SDLib4File4readEPvj>:
  return -1;
}

// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
  if (_file) {
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	81 8d       	ldd	r24, Z+25	; 0x19
    1bfe:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	19 f0       	breq	.+6      	; 0x1c0a <_ZN5SDLib4File4readEPvj+0x10>
    return _file->read(buf, nbyte);
    1c04:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <_ZN6SdFile4readEPvj>
    1c08:	08 95       	ret
  }
  return 0;
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
}
    1c0e:	08 95       	ret

00001c10 <_ZN5SDLib4File4seekEm>:
    _file->sync();
  }
}

boolean File::seek(uint32_t pos) {
  if (! _file) {
    1c10:	fc 01       	movw	r30, r24
    1c12:	81 8d       	ldd	r24, Z+25	; 0x19
    1c14:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	39 f0       	breq	.+14     	; 0x1c28 <_ZN5SDLib4File4seekEm+0x18>
    return false;
  }

  return _file->seekSet(pos);
    1c1a:	0e 94 79 18 	call	0x30f2	; 0x30f2 <_ZN6SdFile7seekSetEm>
    1c1e:	91 e0       	ldi	r25, 0x01	; 1
    1c20:	81 11       	cpse	r24, r1
    1c22:	03 c0       	rjmp	.+6      	; 0x1c2a <_ZN5SDLib4File4seekEm+0x1a>
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	01 c0       	rjmp	.+2      	; 0x1c2a <_ZN5SDLib4File4seekEm+0x1a>
  }
}

boolean File::seek(uint32_t pos) {
  if (! _file) {
    return false;
    1c28:	90 e0       	ldi	r25, 0x00	; 0
  }

  return _file->seekSet(pos);
}
    1c2a:	89 2f       	mov	r24, r25
    1c2c:	08 95       	ret

00001c2e <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) {
    1c2e:	dc 01       	movw	r26, r24
    1c30:	59 96       	adiw	r26, 0x19	; 25
    1c32:	ed 91       	ld	r30, X+
    1c34:	fc 91       	ld	r31, X
    1c36:	5a 97       	sbiw	r26, 0x1a	; 26
    1c38:	30 97       	sbiw	r30, 0x00	; 0
    1c3a:	29 f0       	breq	.+10     	; 0x1c46 <_ZN5SDLib4File8positionEv+0x18>
    uint32_t curCluster(void) const {
      return curCluster_;
    }
    /** \return The current position for a file or directory. */
    uint32_t curPosition(void) const {
      return curPosition_;
    1c3c:	62 85       	ldd	r22, Z+10	; 0x0a
    1c3e:	73 85       	ldd	r23, Z+11	; 0x0b
    1c40:	84 85       	ldd	r24, Z+12	; 0x0c
    1c42:	95 85       	ldd	r25, Z+13	; 0x0d
    return -1;
  }
  return _file->curPosition();
    1c44:	08 95       	ret
  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) {
    return -1;
    1c46:	6f ef       	ldi	r22, 0xFF	; 255
    1c48:	7f ef       	ldi	r23, 0xFF	; 255
    1c4a:	cb 01       	movw	r24, r22
  }
  return _file->curPosition();
}
    1c4c:	08 95       	ret

00001c4e <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) {
    1c4e:	dc 01       	movw	r26, r24
    1c50:	59 96       	adiw	r26, 0x19	; 25
    1c52:	ed 91       	ld	r30, X+
    1c54:	fc 91       	ld	r31, X
    1c56:	5a 97       	sbiw	r26, 0x1a	; 26
    1c58:	30 97       	sbiw	r30, 0x00	; 0
    1c5a:	29 f0       	breq	.+10     	; 0x1c66 <_ZN5SDLib4File4sizeEv+0x18>
      return dirIndex_;
    }
    static void dirName(const dir_t& dir, char* name);
    /** \return The total number of bytes in a file or directory. */
    uint32_t fileSize(void) const {
      return fileSize_;
    1c5c:	63 89       	ldd	r22, Z+19	; 0x13
    1c5e:	74 89       	ldd	r23, Z+20	; 0x14
    1c60:	85 89       	ldd	r24, Z+21	; 0x15
    1c62:	96 89       	ldd	r25, Z+22	; 0x16
    return 0;
  }
  return _file->fileSize();
    1c64:	08 95       	ret
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) {
    return 0;
    1c66:	60 e0       	ldi	r22, 0x00	; 0
    1c68:	70 e0       	ldi	r23, 0x00	; 0
    1c6a:	cb 01       	movw	r24, r22
  }
  return _file->fileSize();
}
    1c6c:	08 95       	ret

00001c6e <_ZN5SDLib4File9availableEv>:
    return _file->read(buf, nbyte);
  }
  return 0;
}

int File::available() {
    1c6e:	cf 92       	push	r12
    1c70:	df 92       	push	r13
    1c72:	ef 92       	push	r14
    1c74:	ff 92       	push	r15
    1c76:	cf 93       	push	r28
    1c78:	df 93       	push	r29
  if (! _file) {
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	21 8d       	ldd	r18, Z+25	; 0x19
    1c7e:	32 8d       	ldd	r19, Z+26	; 0x1a
    1c80:	23 2b       	or	r18, r19
    1c82:	d9 f0       	breq	.+54     	; 0x1cba <_ZN5SDLib4File9availableEv+0x4c>
    1c84:	ec 01       	movw	r28, r24
    return 0;
  }

  uint32_t n = size() - position();
    1c86:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <_ZN5SDLib4File4sizeEv>
    1c8a:	6b 01       	movw	r12, r22
    1c8c:	7c 01       	movw	r14, r24
    1c8e:	ce 01       	movw	r24, r28
    1c90:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <_ZN5SDLib4File8positionEv>

  return n > 0X7FFF ? 0X7FFF : n;
    1c94:	a7 01       	movw	r20, r14
    1c96:	96 01       	movw	r18, r12
    1c98:	26 1b       	sub	r18, r22
    1c9a:	37 0b       	sbc	r19, r23
    1c9c:	48 0b       	sbc	r20, r24
    1c9e:	59 0b       	sbc	r21, r25
    1ca0:	da 01       	movw	r26, r20
    1ca2:	c9 01       	movw	r24, r18
    1ca4:	81 15       	cp	r24, r1
    1ca6:	30 e8       	ldi	r19, 0x80	; 128
    1ca8:	93 07       	cpc	r25, r19
    1caa:	a1 05       	cpc	r26, r1
    1cac:	b1 05       	cpc	r27, r1
    1cae:	38 f0       	brcs	.+14     	; 0x1cbe <_ZN5SDLib4File9availableEv+0x50>
    1cb0:	8f ef       	ldi	r24, 0xFF	; 255
    1cb2:	9f e7       	ldi	r25, 0x7F	; 127
    1cb4:	a0 e0       	ldi	r26, 0x00	; 0
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <_ZN5SDLib4File9availableEv+0x50>
  return 0;
}

int File::available() {
  if (! _file) {
    return 0;
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
  }

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
    1cbe:	df 91       	pop	r29
    1cc0:	cf 91       	pop	r28
    1cc2:	ff 90       	pop	r15
    1cc4:	ef 90       	pop	r14
    1cc6:	df 90       	pop	r13
    1cc8:	cf 90       	pop	r12
    1cca:	08 95       	ret

00001ccc <_ZN5SDLib4File5closeEv>:
    return 0;
  }
  return _file->fileSize();
}

void File::close() {
    1ccc:	cf 93       	push	r28
    1cce:	df 93       	push	r29
    1cd0:	fc 01       	movw	r30, r24
  if (_file) {
    1cd2:	81 8d       	ldd	r24, Z+25	; 0x19
    1cd4:	92 8d       	ldd	r25, Z+26	; 0x1a
    1cd6:	00 97       	sbiw	r24, 0x00	; 0
    1cd8:	49 f0       	breq	.+18     	; 0x1cec <_ZN5SDLib4File5closeEv+0x20>
    1cda:	ef 01       	movw	r28, r30
    _file->close();
    1cdc:	0e 94 6d 19 	call	0x32da	; 0x32da <_ZN6SdFile5closeEv>
    free(_file);
    1ce0:	89 8d       	ldd	r24, Y+25	; 0x19
    1ce2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ce4:	0e 94 80 2a 	call	0x5500	; 0x5500 <free>
    _file = 0;
    1ce8:	1a 8e       	std	Y+26, r1	; 0x1a
    1cea:	19 8e       	std	Y+25, r1	; 0x19
      nfilecount--;
      Serial.print("Deleted ");
      Serial.println(nfilecount, DEC);
    */
  }
}
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	08 95       	ret

00001cf2 <_ZN5SDLib4FilecvbEv>:

File::operator bool() {
  if (_file) {
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	59 96       	adiw	r26, 0x19	; 25
    1cf6:	ed 91       	ld	r30, X+
    1cf8:	fc 91       	ld	r31, X
    1cfa:	5a 97       	sbiw	r26, 0x1a	; 26
    1cfc:	30 97       	sbiw	r30, 0x00	; 0
    1cfe:	31 f0       	breq	.+12     	; 0x1d0c <_ZN5SDLib4FilecvbEv+0x1a>
    uint8_t isFile(void) const {
      return type_ == FAT_FILE_TYPE_NORMAL;
    }
    /** \return True if this is a SdFile for an open file/directory else false. */
    uint8_t isOpen(void) const {
      return type_ != FAT_FILE_TYPE_CLOSED;
    1d00:	95 81       	ldd	r25, Z+5	; 0x05
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	91 11       	cpse	r25, r1
    1d06:	03 c0       	rjmp	.+6      	; 0x1d0e <_ZN5SDLib4FilecvbEv+0x1c>
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    return  _file->isOpen();
    1d0a:	08 95       	ret
  }
  return false;
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
}
    1d0e:	08 95       	ret

00001d10 <_Z41__static_initialization_and_destruction_0ii>:

  void File::rewindDirectory(void) {
    if (isDirectory()) {
      _file->rewind();
    }
  }
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	c9 f4       	brne	.+50     	; 0x1d46 <_Z41__static_initialization_and_destruction_0ii+0x36>
    1d14:	6f 3f       	cpi	r22, 0xFF	; 255
    1d16:	7f 4f       	sbci	r23, 0xFF	; 255
    1d18:	b1 f4       	brne	.+44     	; 0x1d46 <_Z41__static_initialization_and_destruction_0ii+0x36>
    1d1a:	e9 e8       	ldi	r30, 0x89	; 137
    1d1c:	f2 e0       	ldi	r31, 0x02	; 2
    1d1e:	15 82       	std	Z+5, r1	; 0x05
    1d20:	16 82       	std	Z+6, r1	; 0x06
    1d22:	11 86       	std	Z+9, r1	; 0x09
    1d24:	13 86       	std	Z+11, r1	; 0x0b
    1d26:	82 e0       	ldi	r24, 0x02	; 2
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	a0 e0       	ldi	r26, 0x00	; 0
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	84 87       	std	Z+12, r24	; 0x0c
    1d30:	95 87       	std	Z+13, r25	; 0x0d
    1d32:	a6 87       	std	Z+14, r26	; 0x0e
    1d34:	b7 87       	std	Z+15, r27	; 0x0f
    1d36:	13 a2       	std	Z+35, r1	; 0x23
    1d38:	15 a6       	std	Z+45, r1	; 0x2d
    1d3a:	14 a6       	std	Z+44, r1	; 0x2c
    1d3c:	86 e4       	ldi	r24, 0x46	; 70
    1d3e:	92 e0       	ldi	r25, 0x02	; 2
    1d40:	93 a7       	std	Z+43, r25	; 0x2b
    1d42:	82 a7       	std	Z+42, r24	; 0x2a
    1d44:	17 a6       	std	Z+47, r1	; 0x2f
    1d46:	08 95       	ret

00001d48 <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv>:
    1d48:	1f 93       	push	r17
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	6d 97       	sbiw	r28, 0x1d	; 29
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	cd bf       	out	0x3d, r28	; 61
    1d5e:	ab 01       	movw	r20, r22
    1d60:	1c 82       	std	Y+4, r1	; 0x04
    1d62:	1b 82       	std	Y+3, r1	; 0x03
    1d64:	26 e4       	ldi	r18, 0x46	; 70
    1d66:	32 e0       	ldi	r19, 0x02	; 2
    1d68:	3a 83       	std	Y+2, r19	; 0x02
    1d6a:	29 83       	std	Y+1, r18	; 0x01
    1d6c:	1e 82       	std	Y+6, r1	; 0x06
    1d6e:	21 e0       	ldi	r18, 0x01	; 1
    1d70:	bc 01       	movw	r22, r24
    1d72:	ce 01       	movw	r24, r28
    1d74:	01 96       	adiw	r24, 0x01	; 1
    1d76:	0e 94 1e 1b 	call	0x363c	; 0x363c <_ZN6SdFile4openEPS_PKch>
    1d7a:	11 e0       	ldi	r17, 0x01	; 1
    1d7c:	81 11       	cpse	r24, r1
    1d7e:	01 c0       	rjmp	.+2      	; 0x1d82 <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv+0x3a>
    1d80:	10 e0       	ldi	r17, 0x00	; 0
    1d82:	88 23       	and	r24, r24
    1d84:	21 f0       	breq	.+8      	; 0x1d8e <_ZN5SDLib19callback_pathExistsER6SdFilePKcbPv+0x46>
    1d86:	ce 01       	movw	r24, r28
    1d88:	01 96       	adiw	r24, 0x01	; 1
    1d8a:	0e 94 6d 19 	call	0x32da	; 0x32da <_ZN6SdFile5closeEv>
    1d8e:	81 2f       	mov	r24, r17
    1d90:	6d 96       	adiw	r28, 0x1d	; 29
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	df 91       	pop	r29
    1d9e:	cf 91       	pop	r28
    1da0:	1f 91       	pop	r17
    1da2:	08 95       	ret

00001da4 <_ZN5SDLib15callback_removeER6SdFilePKcbPv>:
    1da4:	44 23       	and	r20, r20
    1da6:	39 f0       	breq	.+14     	; 0x1db6 <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x12>
    1da8:	0e 94 2f 1c 	call	0x385e	; 0x385e <_ZN6SdFile6removeEPS_PKc>
    1dac:	91 e0       	ldi	r25, 0x01	; 1
    1dae:	81 11       	cpse	r24, r1
    1db0:	03 c0       	rjmp	.+6      	; 0x1db8 <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x14>
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	01 c0       	rjmp	.+2      	; 0x1db8 <_ZN5SDLib15callback_removeER6SdFilePKcbPv+0x14>
    1db6:	91 e0       	ldi	r25, 0x01	; 1
    1db8:	89 2f       	mov	r24, r25
    1dba:	08 95       	ret

00001dbc <_ZN5SDLib20getNextPathComponentEPKcPjPc>:
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	ec 01       	movw	r28, r24
    1dc2:	db 01       	movw	r26, r22
    1dc4:	ed 91       	ld	r30, X+
    1dc6:	fc 91       	ld	r31, X
    1dc8:	dc 01       	movw	r26, r24
    1dca:	ae 0f       	add	r26, r30
    1dcc:	bf 1f       	adc	r27, r31
    1dce:	8c 91       	ld	r24, X
    1dd0:	8f 32       	cpi	r24, 0x2F	; 47
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x1a>
    1dd4:	31 96       	adiw	r30, 0x01	; 1
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	2c 30       	cpi	r18, 0x0C	; 12
    1ddc:	31 05       	cpc	r19, r1
    1dde:	84 f4       	brge	.+32     	; 0x1e00 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x44>
    1de0:	de 01       	movw	r26, r28
    1de2:	ae 0f       	add	r26, r30
    1de4:	bf 1f       	adc	r27, r31
    1de6:	9c 91       	ld	r25, X
    1de8:	9f 32       	cpi	r25, 0x2F	; 47
    1dea:	51 f0       	breq	.+20     	; 0x1e00 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x44>
    1dec:	99 23       	and	r25, r25
    1dee:	41 f0       	breq	.+16     	; 0x1e00 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x44>
    1df0:	da 01       	movw	r26, r20
    1df2:	a2 0f       	add	r26, r18
    1df4:	b3 1f       	adc	r27, r19
    1df6:	31 96       	adiw	r30, 0x01	; 1
    1df8:	9c 93       	st	X, r25
    1dfa:	2f 5f       	subi	r18, 0xFF	; 255
    1dfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfe:	ed cf       	rjmp	.-38     	; 0x1dda <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x1e>
    1e00:	da 01       	movw	r26, r20
    1e02:	a2 0f       	add	r26, r18
    1e04:	b3 1f       	adc	r27, r19
    1e06:	1c 92       	st	X, r1
    1e08:	de 01       	movw	r26, r28
    1e0a:	ae 0f       	add	r26, r30
    1e0c:	bf 1f       	adc	r27, r31
    1e0e:	8c 91       	ld	r24, X
    1e10:	8f 32       	cpi	r24, 0x2F	; 47
    1e12:	09 f4       	brne	.+2      	; 0x1e16 <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x5a>
    1e14:	31 96       	adiw	r30, 0x01	; 1
    1e16:	db 01       	movw	r26, r22
    1e18:	ed 93       	st	X+, r30
    1e1a:	fc 93       	st	X, r31
    1e1c:	ec 0f       	add	r30, r28
    1e1e:	fd 1f       	adc	r31, r29
    1e20:	90 81       	ld	r25, Z
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	91 11       	cpse	r25, r1
    1e26:	01 c0       	rjmp	.+2      	; 0x1e2a <_ZN5SDLib20getNextPathComponentEPKcPjPc+0x6e>
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	df 91       	pop	r29
    1e2c:	cf 91       	pop	r28
    1e2e:	08 95       	ret

00001e30 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>:
    1e30:	5f 92       	push	r5
    1e32:	6f 92       	push	r6
    1e34:	7f 92       	push	r7
    1e36:	8f 92       	push	r8
    1e38:	9f 92       	push	r9
    1e3a:	af 92       	push	r10
    1e3c:	bf 92       	push	r11
    1e3e:	cf 92       	push	r12
    1e40:	df 92       	push	r13
    1e42:	ef 92       	push	r14
    1e44:	ff 92       	push	r15
    1e46:	0f 93       	push	r16
    1e48:	1f 93       	push	r17
    1e4a:	cf 93       	push	r28
    1e4c:	df 93       	push	r29
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	c9 54       	subi	r28, 0x49	; 73
    1e54:	d1 09       	sbc	r29, r1
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	4c 01       	movw	r8, r24
    1e62:	6b 01       	movw	r12, r22
    1e64:	3a 01       	movw	r6, r20
    1e66:	59 01       	movw	r10, r18
    1e68:	1c 82       	std	Y+4, r1	; 0x04
    1e6a:	1b 82       	std	Y+3, r1	; 0x03
    1e6c:	86 e4       	ldi	r24, 0x46	; 70
    1e6e:	92 e0       	ldi	r25, 0x02	; 2
    1e70:	9a 83       	std	Y+2, r25	; 0x02
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	1e 82       	std	Y+6, r1	; 0x06
    1e76:	19 a2       	std	Y+33, r1	; 0x21
    1e78:	18 a2       	std	Y+32, r1	; 0x20
    1e7a:	9f 8f       	std	Y+31, r25	; 0x1f
    1e7c:	8e 8f       	std	Y+30, r24	; 0x1e
    1e7e:	1b a2       	std	Y+35, r1	; 0x23
    1e80:	2a 96       	adiw	r28, 0x0a	; 10
    1e82:	1f ae       	std	Y+63, r1	; 0x3f
    1e84:	1e ae       	std	Y+62, r1	; 0x3e
    1e86:	2a 97       	sbiw	r28, 0x0a	; 10
    1e88:	8b 01       	movw	r16, r22
    1e8a:	ce 01       	movw	r24, r28
    1e8c:	01 96       	adiw	r24, 0x01	; 1
    1e8e:	7c 01       	movw	r14, r24
    1e90:	ae 01       	movw	r20, r28
    1e92:	45 5c       	subi	r20, 0xC5	; 197
    1e94:	5f 4f       	sbci	r21, 0xFF	; 255
    1e96:	be 01       	movw	r22, r28
    1e98:	68 5b       	subi	r22, 0xB8	; 184
    1e9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9c:	c4 01       	movw	r24, r8
    1e9e:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <_ZN5SDLib20getNextPathComponentEPKcPjPc>
    1ea2:	58 2e       	mov	r5, r24
    1ea4:	41 e0       	ldi	r20, 0x01	; 1
    1ea6:	48 27       	eor	r20, r24
    1ea8:	95 01       	movw	r18, r10
    1eaa:	be 01       	movw	r22, r28
    1eac:	65 5c       	subi	r22, 0xC5	; 197
    1eae:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb0:	c8 01       	movw	r24, r16
    1eb2:	f3 01       	movw	r30, r6
    1eb4:	09 95       	icall
    1eb6:	81 11       	cpse	r24, r1
    1eb8:	08 c0       	rjmp	.+16     	; 0x1eca <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x9a>
    1eba:	0c 15       	cp	r16, r12
    1ebc:	1d 05       	cpc	r17, r13
    1ebe:	51 f1       	breq	.+84     	; 0x1f14 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xe4>
    1ec0:	c8 01       	movw	r24, r16
    1ec2:	0e 94 6d 19 	call	0x32da	; 0x32da <_ZN6SdFile5closeEv>
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	2a c0       	rjmp	.+84     	; 0x1f1e <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    1eca:	55 20       	and	r5, r5
    1ecc:	d9 f0       	breq	.+54     	; 0x1f04 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xd4>
    1ece:	21 e0       	ldi	r18, 0x01	; 1
    1ed0:	ae 01       	movw	r20, r28
    1ed2:	45 5c       	subi	r20, 0xC5	; 197
    1ed4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed6:	b8 01       	movw	r22, r16
    1ed8:	c7 01       	movw	r24, r14
    1eda:	0e 94 1e 1b 	call	0x363c	; 0x363c <_ZN6SdFile4openEPS_PKch>
    1ede:	58 2e       	mov	r5, r24
    1ee0:	0c 15       	cp	r16, r12
    1ee2:	1d 05       	cpc	r17, r13
    1ee4:	19 f0       	breq	.+6      	; 0x1eec <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xbc>
    1ee6:	c8 01       	movw	r24, r16
    1ee8:	0e 94 6d 19 	call	0x32da	; 0x32da <_ZN6SdFile5closeEv>
    1eec:	55 20       	and	r5, r5
    1eee:	a1 f0       	breq	.+40     	; 0x1f18 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xe8>
    1ef0:	0c 15       	cp	r16, r12
    1ef2:	1d 05       	cpc	r17, r13
    1ef4:	11 f0       	breq	.+4      	; 0x1efa <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xca>
    1ef6:	c8 01       	movw	r24, r16
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xce>
    1efa:	ce 01       	movw	r24, r28
    1efc:	4e 96       	adiw	r24, 0x1e	; 30
    1efe:	87 01       	movw	r16, r14
    1f00:	7c 01       	movw	r14, r24
    1f02:	c6 cf       	rjmp	.-116    	; 0x1e90 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0x60>
    1f04:	0c 15       	cp	r16, r12
    1f06:	1d 05       	cpc	r17, r13
    1f08:	49 f0       	breq	.+18     	; 0x1f1c <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xec>
    1f0a:	c8 01       	movw	r24, r16
    1f0c:	0e 94 6d 19 	call	0x32da	; 0x32da <_ZN6SdFile5closeEv>
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	05 c0       	rjmp	.+10     	; 0x1f1e <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	03 c0       	rjmp	.+6      	; 0x1f1e <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	01 c0       	rjmp	.+2      	; 0x1f1e <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_+0xee>
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	c7 5b       	subi	r28, 0xB7	; 183
    1f20:	df 4f       	sbci	r29, 0xFF	; 255
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
    1f2c:	df 91       	pop	r29
    1f2e:	cf 91       	pop	r28
    1f30:	1f 91       	pop	r17
    1f32:	0f 91       	pop	r16
    1f34:	ff 90       	pop	r15
    1f36:	ef 90       	pop	r14
    1f38:	df 90       	pop	r13
    1f3a:	cf 90       	pop	r12
    1f3c:	bf 90       	pop	r11
    1f3e:	af 90       	pop	r10
    1f40:	9f 90       	pop	r9
    1f42:	8f 90       	pop	r8
    1f44:	7f 90       	pop	r7
    1f46:	6f 90       	pop	r6
    1f48:	5f 90       	pop	r5
    1f4a:	08 95       	ret

00001f4c <_ZN5SDLib7SDClass5beginEh>:
    1f4c:	0f 93       	push	r16
    1f4e:	1f 93       	push	r17
    1f50:	cf 93       	push	r28
    1f52:	df 93       	push	r29
    1f54:	ec 01       	movw	r28, r24
    1f56:	16 2f       	mov	r17, r22
    1f58:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f5a:	88 23       	and	r24, r24
    1f5c:	21 f0       	breq	.+8      	; 0x1f66 <_ZN5SDLib7SDClass5beginEh+0x1a>
    1f5e:	ce 01       	movw	r24, r28
    1f60:	8a 96       	adiw	r24, 0x2a	; 42
    1f62:	0e 94 6d 19 	call	0x32da	; 0x32da <_ZN6SdFile5closeEv>
    1f66:	41 2f       	mov	r20, r17
    1f68:	61 e0       	ldi	r22, 0x01	; 1
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	0e 94 2f 13 	call	0x265e	; 0x265e <_ZN7Sd2Card4initEhh>
    1f70:	88 23       	and	r24, r24
    1f72:	e1 f0       	breq	.+56     	; 0x1fac <_ZN5SDLib7SDClass5beginEh+0x60>
    1f74:	8e 01       	movw	r16, r28
    1f76:	04 5f       	subi	r16, 0xF4	; 244
    1f78:	1f 4f       	sbci	r17, 0xFF	; 255
    1f7a:	41 e0       	ldi	r20, 0x01	; 1
    1f7c:	be 01       	movw	r22, r28
    1f7e:	c8 01       	movw	r24, r16
    1f80:	0e 94 f8 21 	call	0x43f0	; 0x43f0 <_ZN8SdVolume4initEP7Sd2Cardh>
    1f84:	81 11       	cpse	r24, r1
    1f86:	06 c0       	rjmp	.+12     	; 0x1f94 <_ZN5SDLib7SDClass5beginEh+0x48>
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	be 01       	movw	r22, r28
    1f8c:	c8 01       	movw	r24, r16
    1f8e:	0e 94 f8 21 	call	0x43f0	; 0x43f0 <_ZN8SdVolume4initEP7Sd2Cardh>
    1f92:	01 c0       	rjmp	.+2      	; 0x1f96 <_ZN5SDLib7SDClass5beginEh+0x4a>
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	88 23       	and	r24, r24
    1f98:	59 f0       	breq	.+22     	; 0x1fb0 <_ZN5SDLib7SDClass5beginEh+0x64>
    1f9a:	b8 01       	movw	r22, r16
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	8a 96       	adiw	r24, 0x2a	; 42
    1fa0:	0e 94 82 16 	call	0x2d04	; 0x2d04 <_ZN6SdFile8openRootEP8SdVolume>
    1fa4:	88 23       	and	r24, r24
    1fa6:	31 f0       	breq	.+12     	; 0x1fb4 <_ZN5SDLib7SDClass5beginEh+0x68>
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	05 c0       	rjmp	.+10     	; 0x1fb6 <_ZN5SDLib7SDClass5beginEh+0x6a>
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	03 c0       	rjmp	.+6      	; 0x1fb6 <_ZN5SDLib7SDClass5beginEh+0x6a>
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	01 c0       	rjmp	.+2      	; 0x1fb6 <_ZN5SDLib7SDClass5beginEh+0x6a>
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	df 91       	pop	r29
    1fb8:	cf 91       	pop	r28
    1fba:	1f 91       	pop	r17
    1fbc:	0f 91       	pop	r16
    1fbe:	08 95       	ret

00001fc0 <_ZN5SDLib7SDClass12getParentDirEPKcPi>:
    1fc0:	4f 92       	push	r4
    1fc2:	5f 92       	push	r5
    1fc4:	6f 92       	push	r6
    1fc6:	7f 92       	push	r7
    1fc8:	8f 92       	push	r8
    1fca:	9f 92       	push	r9
    1fcc:	af 92       	push	r10
    1fce:	bf 92       	push	r11
    1fd0:	cf 92       	push	r12
    1fd2:	df 92       	push	r13
    1fd4:	ef 92       	push	r14
    1fd6:	ff 92       	push	r15
    1fd8:	0f 93       	push	r16
    1fda:	1f 93       	push	r17
    1fdc:	cf 93       	push	r28
    1fde:	df 93       	push	r29
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	c7 54       	subi	r28, 0x47	; 71
    1fe6:	d1 09       	sbc	r29, r1
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	f8 94       	cli
    1fec:	de bf       	out	0x3e, r29	; 62
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	cd bf       	out	0x3d, r28	; 61
    1ff2:	4c 01       	movw	r8, r24
    1ff4:	3a 01       	movw	r6, r20
    1ff6:	29 01       	movw	r4, r18
    1ff8:	1c 82       	std	Y+4, r1	; 0x04
    1ffa:	1b 82       	std	Y+3, r1	; 0x03
    1ffc:	86 e4       	ldi	r24, 0x46	; 70
    1ffe:	92 e0       	ldi	r25, 0x02	; 2
    2000:	9a 83       	std	Y+2, r25	; 0x02
    2002:	89 83       	std	Y+1, r24	; 0x01
    2004:	1e 82       	std	Y+6, r1	; 0x06
    2006:	19 a2       	std	Y+33, r1	; 0x21
    2008:	18 a2       	std	Y+32, r1	; 0x20
    200a:	9f 8f       	std	Y+31, r25	; 0x1f
    200c:	8e 8f       	std	Y+30, r24	; 0x1e
    200e:	1b a2       	std	Y+35, r1	; 0x23
    2010:	64 5f       	subi	r22, 0xF4	; 244
    2012:	7f 4f       	sbci	r23, 0xFF	; 255
    2014:	ce 01       	movw	r24, r28
    2016:	01 96       	adiw	r24, 0x01	; 1
    2018:	0e 94 82 16 	call	0x2d04	; 0x2d04 <_ZN6SdFile8openRootEP8SdVolume>
    201c:	73 01       	movw	r14, r6
    201e:	6e 01       	movw	r12, r28
    2020:	8e e1       	ldi	r24, 0x1E	; 30
    2022:	c8 0e       	add	r12, r24
    2024:	d1 1c       	adc	r13, r1
    2026:	fe 01       	movw	r30, r28
    2028:	31 96       	adiw	r30, 0x01	; 1
    202a:	5f 01       	movw	r10, r30
    202c:	6f e2       	ldi	r22, 0x2F	; 47
    202e:	70 e0       	ldi	r23, 0x00	; 0
    2030:	c7 01       	movw	r24, r14
    2032:	0e 94 1b 2b 	call	0x5636	; 0x5636 <strchr>
    2036:	00 97       	sbiw	r24, 0x00	; 0
    2038:	f1 f1       	breq	.+124    	; 0x20b6 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xf6>
    203a:	f7 01       	movw	r30, r14
    203c:	20 81       	ld	r18, Z
    203e:	2f 32       	cpi	r18, 0x2F	; 47
    2040:	21 f4       	brne	.+8      	; 0x204a <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x8a>
    2042:	ff ef       	ldi	r31, 0xFF	; 255
    2044:	ef 1a       	sub	r14, r31
    2046:	ff 0a       	sbc	r15, r31
    2048:	f1 cf       	rjmp	.-30     	; 0x202c <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x6c>
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	a1 f1       	breq	.+104    	; 0x20b6 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xf6>
    204e:	8e 19       	sub	r24, r14
    2050:	8d 30       	cpi	r24, 0x0D	; 13
    2052:	08 f0       	brcs	.+2      	; 0x2056 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x96>
    2054:	8c e0       	ldi	r24, 0x0C	; 12
    2056:	08 2f       	mov	r16, r24
    2058:	10 e0       	ldi	r17, 0x00	; 0
    205a:	a8 01       	movw	r20, r16
    205c:	b7 01       	movw	r22, r14
    205e:	ce 01       	movw	r24, r28
    2060:	cb 96       	adiw	r24, 0x3b	; 59
    2062:	0e 94 26 2b 	call	0x564c	; 0x564c <strncpy>
    2066:	eb e3       	ldi	r30, 0x3B	; 59
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	ec 0f       	add	r30, r28
    206c:	fd 1f       	adc	r31, r29
    206e:	e0 0f       	add	r30, r16
    2070:	f1 1f       	adc	r31, r17
    2072:	10 82       	st	Z, r1
    2074:	c6 01       	movw	r24, r12
    2076:	0e 94 6d 19 	call	0x32da	; 0x32da <_ZN6SdFile5closeEv>
    207a:	21 e0       	ldi	r18, 0x01	; 1
    207c:	ae 01       	movw	r20, r28
    207e:	45 5c       	subi	r20, 0xC5	; 197
    2080:	5f 4f       	sbci	r21, 0xFF	; 255
    2082:	b5 01       	movw	r22, r10
    2084:	c6 01       	movw	r24, r12
    2086:	0e 94 1e 1b 	call	0x363c	; 0x363c <_ZN6SdFile4openEPS_PKch>
    208a:	81 11       	cpse	r24, r1
    208c:	09 c0       	rjmp	.+18     	; 0x20a0 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xe0>
    208e:	f4 01       	movw	r30, r8
    2090:	13 82       	std	Z+3, r1	; 0x03
    2092:	12 82       	std	Z+2, r1	; 0x02
    2094:	86 e4       	ldi	r24, 0x46	; 70
    2096:	92 e0       	ldi	r25, 0x02	; 2
    2098:	91 83       	std	Z+1, r25	; 0x01
    209a:	80 83       	st	Z, r24
    209c:	15 82       	std	Z+5, r1	; 0x05
    209e:	63 c0       	rjmp	.+198    	; 0x2166 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x1a6>
    20a0:	e0 0e       	add	r14, r16
    20a2:	f1 1e       	adc	r15, r17
    20a4:	c5 01       	movw	r24, r10
    20a6:	0e 94 6d 19 	call	0x32da	; 0x32da <_ZN6SdFile5closeEv>
    20aa:	9a 2d       	mov	r25, r10
    20ac:	8b 2d       	mov	r24, r11
    20ae:	56 01       	movw	r10, r12
    20b0:	c9 2e       	mov	r12, r25
    20b2:	d8 2e       	mov	r13, r24
    20b4:	bb cf       	rjmp	.-138    	; 0x202c <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x6c>
    20b6:	e6 18       	sub	r14, r6
    20b8:	f7 08       	sbc	r15, r7
    20ba:	f2 01       	movw	r30, r4
    20bc:	f1 82       	std	Z+1, r15	; 0x01
    20be:	e0 82       	st	Z, r14
    20c0:	81 e8       	ldi	r24, 0x81	; 129
    20c2:	91 e0       	ldi	r25, 0x01	; 1
    20c4:	f4 01       	movw	r30, r8
    20c6:	91 83       	std	Z+1, r25	; 0x01
    20c8:	80 83       	st	Z, r24
    20ca:	f5 01       	movw	r30, r10
    20cc:	82 81       	ldd	r24, Z+2	; 0x02
    20ce:	93 81       	ldd	r25, Z+3	; 0x03
    20d0:	f4 01       	movw	r30, r8
    20d2:	93 83       	std	Z+3, r25	; 0x03
    20d4:	82 83       	std	Z+2, r24	; 0x02
    20d6:	86 e4       	ldi	r24, 0x46	; 70
    20d8:	92 e0       	ldi	r25, 0x02	; 2
    20da:	91 83       	std	Z+1, r25	; 0x01
    20dc:	80 83       	st	Z, r24
    20de:	f5 01       	movw	r30, r10
    20e0:	84 81       	ldd	r24, Z+4	; 0x04
    20e2:	f4 01       	movw	r30, r8
    20e4:	84 83       	std	Z+4, r24	; 0x04
    20e6:	f5 01       	movw	r30, r10
    20e8:	85 81       	ldd	r24, Z+5	; 0x05
    20ea:	f4 01       	movw	r30, r8
    20ec:	85 83       	std	Z+5, r24	; 0x05
    20ee:	f5 01       	movw	r30, r10
    20f0:	86 81       	ldd	r24, Z+6	; 0x06
    20f2:	97 81       	ldd	r25, Z+7	; 0x07
    20f4:	a0 85       	ldd	r26, Z+8	; 0x08
    20f6:	b1 85       	ldd	r27, Z+9	; 0x09
    20f8:	f4 01       	movw	r30, r8
    20fa:	86 83       	std	Z+6, r24	; 0x06
    20fc:	97 83       	std	Z+7, r25	; 0x07
    20fe:	a0 87       	std	Z+8, r26	; 0x08
    2100:	b1 87       	std	Z+9, r27	; 0x09
    2102:	f5 01       	movw	r30, r10
    2104:	82 85       	ldd	r24, Z+10	; 0x0a
    2106:	93 85       	ldd	r25, Z+11	; 0x0b
    2108:	a4 85       	ldd	r26, Z+12	; 0x0c
    210a:	b5 85       	ldd	r27, Z+13	; 0x0d
    210c:	f4 01       	movw	r30, r8
    210e:	82 87       	std	Z+10, r24	; 0x0a
    2110:	93 87       	std	Z+11, r25	; 0x0b
    2112:	a4 87       	std	Z+12, r26	; 0x0c
    2114:	b5 87       	std	Z+13, r27	; 0x0d
    2116:	f5 01       	movw	r30, r10
    2118:	86 85       	ldd	r24, Z+14	; 0x0e
    211a:	97 85       	ldd	r25, Z+15	; 0x0f
    211c:	a0 89       	ldd	r26, Z+16	; 0x10
    211e:	b1 89       	ldd	r27, Z+17	; 0x11
    2120:	f4 01       	movw	r30, r8
    2122:	86 87       	std	Z+14, r24	; 0x0e
    2124:	97 87       	std	Z+15, r25	; 0x0f
    2126:	a0 8b       	std	Z+16, r26	; 0x10
    2128:	b1 8b       	std	Z+17, r27	; 0x11
    212a:	f5 01       	movw	r30, r10
    212c:	82 89       	ldd	r24, Z+18	; 0x12
    212e:	f4 01       	movw	r30, r8
    2130:	82 8b       	std	Z+18, r24	; 0x12
    2132:	f5 01       	movw	r30, r10
    2134:	83 89       	ldd	r24, Z+19	; 0x13
    2136:	94 89       	ldd	r25, Z+20	; 0x14
    2138:	a5 89       	ldd	r26, Z+21	; 0x15
    213a:	b6 89       	ldd	r27, Z+22	; 0x16
    213c:	f4 01       	movw	r30, r8
    213e:	83 8b       	std	Z+19, r24	; 0x13
    2140:	94 8b       	std	Z+20, r25	; 0x14
    2142:	a5 8b       	std	Z+21, r26	; 0x15
    2144:	b6 8b       	std	Z+22, r27	; 0x16
    2146:	f5 01       	movw	r30, r10
    2148:	87 89       	ldd	r24, Z+23	; 0x17
    214a:	90 8d       	ldd	r25, Z+24	; 0x18
    214c:	a1 8d       	ldd	r26, Z+25	; 0x19
    214e:	b2 8d       	ldd	r27, Z+26	; 0x1a
    2150:	f4 01       	movw	r30, r8
    2152:	87 8b       	std	Z+23, r24	; 0x17
    2154:	90 8f       	std	Z+24, r25	; 0x18
    2156:	a1 8f       	std	Z+25, r26	; 0x19
    2158:	b2 8f       	std	Z+26, r27	; 0x1a
    215a:	f5 01       	movw	r30, r10
    215c:	83 8d       	ldd	r24, Z+27	; 0x1b
    215e:	94 8d       	ldd	r25, Z+28	; 0x1c
    2160:	f4 01       	movw	r30, r8
    2162:	94 8f       	std	Z+28, r25	; 0x1c
    2164:	83 8f       	std	Z+27, r24	; 0x1b
    2166:	c4 01       	movw	r24, r8
    2168:	c9 5b       	subi	r28, 0xB9	; 185
    216a:	df 4f       	sbci	r29, 0xFF	; 255
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	cd bf       	out	0x3d, r28	; 61
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
    217a:	1f 91       	pop	r17
    217c:	0f 91       	pop	r16
    217e:	ff 90       	pop	r15
    2180:	ef 90       	pop	r14
    2182:	df 90       	pop	r13
    2184:	cf 90       	pop	r12
    2186:	bf 90       	pop	r11
    2188:	af 90       	pop	r10
    218a:	9f 90       	pop	r9
    218c:	8f 90       	pop	r8
    218e:	7f 90       	pop	r7
    2190:	6f 90       	pop	r6
    2192:	5f 90       	pop	r5
    2194:	4f 90       	pop	r4
    2196:	08 95       	ret

00002198 <_ZN5SDLib7SDClass4openEPKch>:
    2198:	df 92       	push	r13
    219a:	ef 92       	push	r14
    219c:	ff 92       	push	r15
    219e:	0f 93       	push	r16
    21a0:	1f 93       	push	r17
    21a2:	cf 93       	push	r28
    21a4:	df 93       	push	r29
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	c6 57       	subi	r28, 0x76	; 118
    21ac:	d1 09       	sbc	r29, r1
    21ae:	0f b6       	in	r0, 0x3f	; 63
    21b0:	f8 94       	cli
    21b2:	de bf       	out	0x3e, r29	; 62
    21b4:	0f be       	out	0x3f, r0	; 63
    21b6:	cd bf       	out	0x3d, r28	; 61
    21b8:	7c 01       	movw	r14, r24
    21ba:	8a 01       	movw	r16, r20
    21bc:	d2 2e       	mov	r13, r18
    21be:	9e 01       	movw	r18, r28
    21c0:	25 5c       	subi	r18, 0xC5	; 197
    21c2:	3f 4f       	sbci	r19, 0xFF	; 255
    21c4:	ce 01       	movw	r24, r28
    21c6:	cd 96       	adiw	r24, 0x3d	; 61
    21c8:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <_ZN5SDLib7SDClass12getParentDirEPKcPi>
    21cc:	8b ad       	ldd	r24, Y+59	; 0x3b
    21ce:	9c ad       	ldd	r25, Y+60	; 0x3c
    21d0:	08 0f       	add	r16, r24
    21d2:	19 1f       	adc	r17, r25
    21d4:	f8 01       	movw	r30, r16
    21d6:	80 81       	ld	r24, Z
    21d8:	81 11       	cpse	r24, r1
    21da:	57 c0       	rjmp	.+174    	; 0x228a <_ZN5SDLib7SDClass4openEPKch+0xf2>
    21dc:	21 96       	adiw	r28, 0x01	; 1
    21de:	8e ad       	ldd	r24, Y+62	; 0x3e
    21e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    21e2:	21 97       	sbiw	r28, 0x01	; 1
    21e4:	99 a3       	std	Y+33, r25	; 0x21
    21e6:	88 a3       	std	Y+32, r24	; 0x20
    21e8:	86 e4       	ldi	r24, 0x46	; 70
    21ea:	92 e0       	ldi	r25, 0x02	; 2
    21ec:	9f 8f       	std	Y+31, r25	; 0x1f
    21ee:	8e 8f       	std	Y+30, r24	; 0x1e
    21f0:	22 96       	adiw	r28, 0x02	; 2
    21f2:	8f ad       	ldd	r24, Y+63	; 0x3f
    21f4:	22 97       	sbiw	r28, 0x02	; 2
    21f6:	8a a3       	std	Y+34, r24	; 0x22
    21f8:	23 96       	adiw	r28, 0x03	; 3
    21fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    21fc:	23 97       	sbiw	r28, 0x03	; 3
    21fe:	8b a3       	std	Y+35, r24	; 0x23
    2200:	27 96       	adiw	r28, 0x07	; 7
    2202:	8c ad       	ldd	r24, Y+60	; 0x3c
    2204:	9d ad       	ldd	r25, Y+61	; 0x3d
    2206:	ae ad       	ldd	r26, Y+62	; 0x3e
    2208:	bf ad       	ldd	r27, Y+63	; 0x3f
    220a:	27 97       	sbiw	r28, 0x07	; 7
    220c:	8c a3       	std	Y+36, r24	; 0x24
    220e:	9d a3       	std	Y+37, r25	; 0x25
    2210:	ae a3       	std	Y+38, r26	; 0x26
    2212:	bf a3       	std	Y+39, r27	; 0x27
    2214:	2b 96       	adiw	r28, 0x0b	; 11
    2216:	8c ad       	ldd	r24, Y+60	; 0x3c
    2218:	9d ad       	ldd	r25, Y+61	; 0x3d
    221a:	ae ad       	ldd	r26, Y+62	; 0x3e
    221c:	bf ad       	ldd	r27, Y+63	; 0x3f
    221e:	2b 97       	sbiw	r28, 0x0b	; 11
    2220:	88 a7       	std	Y+40, r24	; 0x28
    2222:	99 a7       	std	Y+41, r25	; 0x29
    2224:	aa a7       	std	Y+42, r26	; 0x2a
    2226:	bb a7       	std	Y+43, r27	; 0x2b
    2228:	2f 96       	adiw	r28, 0x0f	; 15
    222a:	8c ad       	ldd	r24, Y+60	; 0x3c
    222c:	9d ad       	ldd	r25, Y+61	; 0x3d
    222e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2230:	bf ad       	ldd	r27, Y+63	; 0x3f
    2232:	2f 97       	sbiw	r28, 0x0f	; 15
    2234:	8c a7       	std	Y+44, r24	; 0x2c
    2236:	9d a7       	std	Y+45, r25	; 0x2d
    2238:	ae a7       	std	Y+46, r26	; 0x2e
    223a:	bf a7       	std	Y+47, r27	; 0x2f
    223c:	60 96       	adiw	r28, 0x10	; 16
    223e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2240:	60 97       	sbiw	r28, 0x10	; 16
    2242:	88 ab       	std	Y+48, r24	; 0x30
    2244:	64 96       	adiw	r28, 0x14	; 20
    2246:	8c ad       	ldd	r24, Y+60	; 0x3c
    2248:	9d ad       	ldd	r25, Y+61	; 0x3d
    224a:	ae ad       	ldd	r26, Y+62	; 0x3e
    224c:	bf ad       	ldd	r27, Y+63	; 0x3f
    224e:	64 97       	sbiw	r28, 0x14	; 20
    2250:	89 ab       	std	Y+49, r24	; 0x31
    2252:	9a ab       	std	Y+50, r25	; 0x32
    2254:	ab ab       	std	Y+51, r26	; 0x33
    2256:	bc ab       	std	Y+52, r27	; 0x34
    2258:	68 96       	adiw	r28, 0x18	; 24
    225a:	8c ad       	ldd	r24, Y+60	; 0x3c
    225c:	9d ad       	ldd	r25, Y+61	; 0x3d
    225e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2260:	bf ad       	ldd	r27, Y+63	; 0x3f
    2262:	68 97       	sbiw	r28, 0x18	; 24
    2264:	8d ab       	std	Y+53, r24	; 0x35
    2266:	9e ab       	std	Y+54, r25	; 0x36
    2268:	af ab       	std	Y+55, r26	; 0x37
    226a:	b8 af       	std	Y+56, r27	; 0x38
    226c:	6a 96       	adiw	r28, 0x1a	; 26
    226e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2270:	9f ad       	ldd	r25, Y+63	; 0x3f
    2272:	6a 97       	sbiw	r28, 0x1a	; 26
    2274:	9a af       	std	Y+58, r25	; 0x3a
    2276:	89 af       	std	Y+57, r24	; 0x39
    2278:	40 e4       	ldi	r20, 0x40	; 64
    227a:	52 e0       	ldi	r21, 0x02	; 2
    227c:	be 01       	movw	r22, r28
    227e:	62 5e       	subi	r22, 0xE2	; 226
    2280:	7f 4f       	sbci	r23, 0xFF	; 255
    2282:	c7 01       	movw	r24, r14
    2284:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <_ZN5SDLib4FileC1E6SdFilePKc>
    2288:	8e c0       	rjmp	.+284    	; 0x23a6 <_ZN5SDLib7SDClass4openEPKch+0x20e>
    228a:	6e 96       	adiw	r28, 0x1e	; 30
    228c:	1f ae       	std	Y+63, r1	; 0x3f
    228e:	1e ae       	std	Y+62, r1	; 0x3e
    2290:	6e 97       	sbiw	r28, 0x1e	; 30
    2292:	86 e4       	ldi	r24, 0x46	; 70
    2294:	92 e0       	ldi	r25, 0x02	; 2
    2296:	6c 96       	adiw	r28, 0x1c	; 28
    2298:	9f af       	std	Y+63, r25	; 0x3f
    229a:	8e af       	std	Y+62, r24	; 0x3e
    229c:	6c 97       	sbiw	r28, 0x1c	; 28
    229e:	a0 96       	adiw	r28, 0x20	; 32
    22a0:	1f ae       	std	Y+63, r1	; 0x3f
    22a2:	a0 97       	sbiw	r28, 0x20	; 32
    22a4:	23 96       	adiw	r28, 0x03	; 3
    22a6:	8f ad       	ldd	r24, Y+63	; 0x3f
    22a8:	23 97       	sbiw	r28, 0x03	; 3
    22aa:	81 11       	cpse	r24, r1
    22ac:	04 c0       	rjmp	.+8      	; 0x22b6 <_ZN5SDLib7SDClass4openEPKch+0x11e>
    22ae:	c7 01       	movw	r24, r14
    22b0:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <_ZN5SDLib4FileC1Ev>
    22b4:	78 c0       	rjmp	.+240    	; 0x23a6 <_ZN5SDLib7SDClass4openEPKch+0x20e>
    22b6:	2d 2d       	mov	r18, r13
    22b8:	a8 01       	movw	r20, r16
    22ba:	be 01       	movw	r22, r28
    22bc:	63 5c       	subi	r22, 0xC3	; 195
    22be:	7f 4f       	sbci	r23, 0xFF	; 255
    22c0:	ce 01       	movw	r24, r28
    22c2:	86 5a       	subi	r24, 0xA6	; 166
    22c4:	9f 4f       	sbci	r25, 0xFF	; 255
    22c6:	0e 94 1e 1b 	call	0x363c	; 0x363c <_ZN6SdFile4openEPS_PKch>
    22ca:	81 11       	cpse	r24, r1
    22cc:	04 c0       	rjmp	.+8      	; 0x22d6 <_ZN5SDLib7SDClass4openEPKch+0x13e>
    22ce:	c7 01       	movw	r24, r14
    22d0:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <_ZN5SDLib4FileC1Ev>
    22d4:	68 c0       	rjmp	.+208    	; 0x23a6 <_ZN5SDLib7SDClass4openEPKch+0x20e>
    22d6:	ce 01       	movw	r24, r28
    22d8:	cd 96       	adiw	r24, 0x3d	; 61
    22da:	0e 94 6d 19 	call	0x32da	; 0x32da <_ZN6SdFile5closeEv>
    22de:	8d 2d       	mov	r24, r13
    22e0:	86 70       	andi	r24, 0x06	; 6
    22e2:	86 30       	cpi	r24, 0x06	; 6
    22e4:	59 f4       	brne	.+22     	; 0x22fc <_ZN5SDLib7SDClass4openEPKch+0x164>
    22e6:	e1 96       	adiw	r28, 0x31	; 49
    22e8:	4c ad       	ldd	r20, Y+60	; 0x3c
    22ea:	5d ad       	ldd	r21, Y+61	; 0x3d
    22ec:	6e ad       	ldd	r22, Y+62	; 0x3e
    22ee:	7f ad       	ldd	r23, Y+63	; 0x3f
    22f0:	e1 97       	sbiw	r28, 0x31	; 49
    22f2:	ce 01       	movw	r24, r28
    22f4:	86 5a       	subi	r24, 0xA6	; 166
    22f6:	9f 4f       	sbci	r25, 0xFF	; 255
    22f8:	0e 94 79 18 	call	0x30f2	; 0x30f2 <_ZN6SdFile7seekSetEm>
    22fc:	6e 96       	adiw	r28, 0x1e	; 30
    22fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    2300:	9f ad       	ldd	r25, Y+63	; 0x3f
    2302:	6e 97       	sbiw	r28, 0x1e	; 30
    2304:	9c 83       	std	Y+4, r25	; 0x04
    2306:	8b 83       	std	Y+3, r24	; 0x03
    2308:	86 e4       	ldi	r24, 0x46	; 70
    230a:	92 e0       	ldi	r25, 0x02	; 2
    230c:	9a 83       	std	Y+2, r25	; 0x02
    230e:	89 83       	std	Y+1, r24	; 0x01
    2310:	6f 96       	adiw	r28, 0x1f	; 31
    2312:	8f ad       	ldd	r24, Y+63	; 0x3f
    2314:	6f 97       	sbiw	r28, 0x1f	; 31
    2316:	8d 83       	std	Y+5, r24	; 0x05
    2318:	a0 96       	adiw	r28, 0x20	; 32
    231a:	8f ad       	ldd	r24, Y+63	; 0x3f
    231c:	a0 97       	sbiw	r28, 0x20	; 32
    231e:	8e 83       	std	Y+6, r24	; 0x06
    2320:	a4 96       	adiw	r28, 0x24	; 36
    2322:	8c ad       	ldd	r24, Y+60	; 0x3c
    2324:	9d ad       	ldd	r25, Y+61	; 0x3d
    2326:	ae ad       	ldd	r26, Y+62	; 0x3e
    2328:	bf ad       	ldd	r27, Y+63	; 0x3f
    232a:	a4 97       	sbiw	r28, 0x24	; 36
    232c:	8f 83       	std	Y+7, r24	; 0x07
    232e:	98 87       	std	Y+8, r25	; 0x08
    2330:	a9 87       	std	Y+9, r26	; 0x09
    2332:	ba 87       	std	Y+10, r27	; 0x0a
    2334:	a8 96       	adiw	r28, 0x28	; 40
    2336:	8c ad       	ldd	r24, Y+60	; 0x3c
    2338:	9d ad       	ldd	r25, Y+61	; 0x3d
    233a:	ae ad       	ldd	r26, Y+62	; 0x3e
    233c:	bf ad       	ldd	r27, Y+63	; 0x3f
    233e:	a8 97       	sbiw	r28, 0x28	; 40
    2340:	8b 87       	std	Y+11, r24	; 0x0b
    2342:	9c 87       	std	Y+12, r25	; 0x0c
    2344:	ad 87       	std	Y+13, r26	; 0x0d
    2346:	be 87       	std	Y+14, r27	; 0x0e
    2348:	ac 96       	adiw	r28, 0x2c	; 44
    234a:	8c ad       	ldd	r24, Y+60	; 0x3c
    234c:	9d ad       	ldd	r25, Y+61	; 0x3d
    234e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2350:	bf ad       	ldd	r27, Y+63	; 0x3f
    2352:	ac 97       	sbiw	r28, 0x2c	; 44
    2354:	8f 87       	std	Y+15, r24	; 0x0f
    2356:	98 8b       	std	Y+16, r25	; 0x10
    2358:	a9 8b       	std	Y+17, r26	; 0x11
    235a:	ba 8b       	std	Y+18, r27	; 0x12
    235c:	ad 96       	adiw	r28, 0x2d	; 45
    235e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2360:	ad 97       	sbiw	r28, 0x2d	; 45
    2362:	8b 8b       	std	Y+19, r24	; 0x13
    2364:	e1 96       	adiw	r28, 0x31	; 49
    2366:	8c ad       	ldd	r24, Y+60	; 0x3c
    2368:	9d ad       	ldd	r25, Y+61	; 0x3d
    236a:	ae ad       	ldd	r26, Y+62	; 0x3e
    236c:	bf ad       	ldd	r27, Y+63	; 0x3f
    236e:	e1 97       	sbiw	r28, 0x31	; 49
    2370:	8c 8b       	std	Y+20, r24	; 0x14
    2372:	9d 8b       	std	Y+21, r25	; 0x15
    2374:	ae 8b       	std	Y+22, r26	; 0x16
    2376:	bf 8b       	std	Y+23, r27	; 0x17
    2378:	e5 96       	adiw	r28, 0x35	; 53
    237a:	8c ad       	ldd	r24, Y+60	; 0x3c
    237c:	9d ad       	ldd	r25, Y+61	; 0x3d
    237e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2380:	bf ad       	ldd	r27, Y+63	; 0x3f
    2382:	e5 97       	sbiw	r28, 0x35	; 53
    2384:	88 8f       	std	Y+24, r24	; 0x18
    2386:	99 8f       	std	Y+25, r25	; 0x19
    2388:	aa 8f       	std	Y+26, r26	; 0x1a
    238a:	bb 8f       	std	Y+27, r27	; 0x1b
    238c:	e7 96       	adiw	r28, 0x37	; 55
    238e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2390:	9f ad       	ldd	r25, Y+63	; 0x3f
    2392:	e7 97       	sbiw	r28, 0x37	; 55
    2394:	9d 8f       	std	Y+29, r25	; 0x1d
    2396:	8c 8f       	std	Y+28, r24	; 0x1c
    2398:	a8 01       	movw	r20, r16
    239a:	be 01       	movw	r22, r28
    239c:	6f 5f       	subi	r22, 0xFF	; 255
    239e:	7f 4f       	sbci	r23, 0xFF	; 255
    23a0:	c7 01       	movw	r24, r14
    23a2:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <_ZN5SDLib4FileC1E6SdFilePKc>
    23a6:	c7 01       	movw	r24, r14
    23a8:	ca 58       	subi	r28, 0x8A	; 138
    23aa:	df 4f       	sbci	r29, 0xFF	; 255
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	cd bf       	out	0x3d, r28	; 61
    23b6:	df 91       	pop	r29
    23b8:	cf 91       	pop	r28
    23ba:	1f 91       	pop	r17
    23bc:	0f 91       	pop	r16
    23be:	ff 90       	pop	r15
    23c0:	ef 90       	pop	r14
    23c2:	df 90       	pop	r13
    23c4:	08 95       	ret

000023c6 <_ZN5SDLib7SDClass6existsEPKc>:
    23c6:	fb 01       	movw	r30, r22
    23c8:	bc 01       	movw	r22, r24
    23ca:	66 5d       	subi	r22, 0xD6	; 214
    23cc:	7f 4f       	sbci	r23, 0xFF	; 255
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	44 ea       	ldi	r20, 0xA4	; 164
    23d4:	5e e0       	ldi	r21, 0x0E	; 14
    23d6:	cf 01       	movw	r24, r30
    23d8:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>
    23dc:	08 95       	ret

000023de <_ZN5SDLib7SDClass6removeEPKc>:
    23de:	fb 01       	movw	r30, r22
    23e0:	bc 01       	movw	r22, r24
    23e2:	66 5d       	subi	r22, 0xD6	; 214
    23e4:	7f 4f       	sbci	r23, 0xFF	; 255
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	42 ed       	ldi	r20, 0xD2	; 210
    23ec:	5e e0       	ldi	r21, 0x0E	; 14
    23ee:	cf 01       	movw	r24, r30
    23f0:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <_ZN5SDLib8walkPathEPKcR6SdFilePFbS3_S1_bPvES4_>
    23f4:	08 95       	ret

000023f6 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:

  SDClass SD;

};
    23f6:	6f ef       	ldi	r22, 0xFF	; 255
    23f8:	7f ef       	ldi	r23, 0xFF	; 255
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <_Z41__static_initialization_and_destruction_0ii>
    2402:	08 95       	ret

00002404 <_ZL7spiSendh>:

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
    2404:	8e bd       	out	0x2e, r24	; 46
    2406:	00 00       	nop
    2408:	0d b4       	in	r0, 0x2d	; 45
    240a:	07 fe       	sbrs	r0, 7
    240c:	fd cf       	rjmp	.-6      	; 0x2408 <_ZL7spiSendh+0x4>
    240e:	8e b5       	in	r24, 0x2e	; 46
    2410:	08 95       	ret

00002412 <_ZL6spiRecv>:
    2412:	8f ef       	ldi	r24, 0xFF	; 255
    2414:	8e bd       	out	0x2e, r24	; 46
    2416:	00 00       	nop
    2418:	0d b4       	in	r0, 0x2d	; 45
    241a:	07 fe       	sbrs	r0, 7
    241c:	fd cf       	rjmp	.-6      	; 0x2418 <_ZL6spiRecv+0x6>
    241e:	8e b5       	in	r24, 0x2e	; 46
    2420:	08 95       	ret

00002422 <_Z41__static_initialization_and_destruction_0ii>:
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	41 f4       	brne	.+16     	; 0x2436 <_Z41__static_initialization_and_destruction_0ii+0x14>
    2426:	6f 3f       	cpi	r22, 0xFF	; 255
    2428:	7f 4f       	sbci	r23, 0xFF	; 255
    242a:	29 f4       	brne	.+10     	; 0x2436 <_Z41__static_initialization_and_destruction_0ii+0x14>
    242c:	e3 ed       	ldi	r30, 0xD3	; 211
    242e:	f2 e0       	ldi	r31, 0x02	; 2
    2430:	80 e5       	ldi	r24, 0x50	; 80
    2432:	80 83       	st	Z, r24
    2434:	11 82       	std	Z+1, r1	; 0x01
    2436:	08 95       	ret

00002438 <_ZN7Sd2Card14chipSelectHighEv>:
    2438:	61 e0       	ldi	r22, 0x01	; 1
    243a:	fc 01       	movw	r30, r24
    243c:	84 81       	ldd	r24, Z+4	; 0x04
    243e:	0e 94 a2 02 	call	0x544	; 0x544 <digitalWrite>
    2442:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <_ZL20chip_select_asserted>
    2446:	88 23       	and	r24, r24
    2448:	a1 f0       	breq	.+40     	; 0x2472 <_ZN7Sd2Card14chipSelectHighEv+0x3a>
    244a:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <_ZL20chip_select_asserted>
    244e:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <_ZN8SPIClass13interruptModeE>
    2452:	88 23       	and	r24, r24
    2454:	71 f0       	breq	.+28     	; 0x2472 <_ZN7Sd2Card14chipSelectHighEv+0x3a>
    2456:	9f b7       	in	r25, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <_ZN8SPIClass13interruptModeE>
    245e:	81 30       	cpi	r24, 0x01	; 1
    2460:	29 f4       	brne	.+10     	; 0x246c <_ZN7Sd2Card14chipSelectHighEv+0x34>
    2462:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <_ZN8SPIClass13interruptSaveE>
    2466:	8d bb       	out	0x1d, r24	; 29
    2468:	9f bf       	out	0x3f, r25	; 63
    246a:	08 95       	ret
    246c:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <_ZN8SPIClass13interruptSaveE>
    2470:	8f bf       	out	0x3f, r24	; 63
    2472:	08 95       	ret

00002474 <_ZN7Sd2Card13chipSelectLowEv>:
    2474:	20 91 d2 02 	lds	r18, 0x02D2	; 0x8002d2 <_ZL20chip_select_asserted>
    2478:	21 11       	cpse	r18, r1
    247a:	20 c0       	rjmp	.+64     	; 0x24bc <_ZN7Sd2Card13chipSelectLowEv+0x48>
    247c:	21 e0       	ldi	r18, 0x01	; 1
    247e:	20 93 d2 02 	sts	0x02D2, r18	; 0x8002d2 <_ZL20chip_select_asserted>
    2482:	30 91 d3 02 	lds	r19, 0x02D3	; 0x8002d3 <_ZL8settings>
    2486:	20 91 d4 02 	lds	r18, 0x02D4	; 0x8002d4 <_ZL8settings+0x1>
    248a:	40 91 e0 04 	lds	r20, 0x04E0	; 0x8004e0 <_ZN8SPIClass13interruptModeE>
    248e:	44 23       	and	r20, r20
    2490:	99 f0       	breq	.+38     	; 0x24b8 <_ZN7Sd2Card13chipSelectLowEv+0x44>
    2492:	4f b7       	in	r20, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	50 91 e0 04 	lds	r21, 0x04E0	; 0x8004e0 <_ZN8SPIClass13interruptModeE>
    249a:	51 30       	cpi	r21, 0x01	; 1
    249c:	59 f4       	brne	.+22     	; 0x24b4 <_ZN7Sd2Card13chipSelectLowEv+0x40>
    249e:	5d b3       	in	r21, 0x1d	; 29
    24a0:	50 93 de 04 	sts	0x04DE, r21	; 0x8004de <_ZN8SPIClass13interruptSaveE>
    24a4:	6d b3       	in	r22, 0x1d	; 29
    24a6:	50 91 df 04 	lds	r21, 0x04DF	; 0x8004df <_ZN8SPIClass13interruptMaskE>
    24aa:	50 95       	com	r21
    24ac:	56 23       	and	r21, r22
    24ae:	5d bb       	out	0x1d, r21	; 29
    24b0:	4f bf       	out	0x3f, r20	; 63
    24b2:	02 c0       	rjmp	.+4      	; 0x24b8 <_ZN7Sd2Card13chipSelectLowEv+0x44>
    24b4:	40 93 de 04 	sts	0x04DE, r20	; 0x8004de <_ZN8SPIClass13interruptSaveE>
    24b8:	3c bd       	out	0x2c, r19	; 44
    24ba:	2d bd       	out	0x2d, r18	; 45
    24bc:	60 e0       	ldi	r22, 0x00	; 0
    24be:	fc 01       	movw	r30, r24
    24c0:	84 81       	ldd	r24, Z+4	; 0x04
    24c2:	0e 94 a2 02 	call	0x544	; 0x544 <digitalWrite>
    24c6:	08 95       	ret

000024c8 <_ZN7Sd2Card7readEndEv>:
    24c8:	cf 93       	push	r28
    24ca:	df 93       	push	r29
    24cc:	ec 01       	movw	r28, r24
    24ce:	8e 81       	ldd	r24, Y+6	; 0x06
    24d0:	88 23       	and	r24, r24
    24d2:	89 f0       	breq	.+34     	; 0x24f6 <_ZN7Sd2Card7readEndEv+0x2e>
    24d4:	8f 81       	ldd	r24, Y+7	; 0x07
    24d6:	98 85       	ldd	r25, Y+8	; 0x08
    24d8:	9c 01       	movw	r18, r24
    24da:	2f 5f       	subi	r18, 0xFF	; 255
    24dc:	3f 4f       	sbci	r19, 0xFF	; 255
    24de:	38 87       	std	Y+8, r19	; 0x08
    24e0:	2f 83       	std	Y+7, r18	; 0x07
    24e2:	82 30       	cpi	r24, 0x02	; 2
    24e4:	92 40       	sbci	r25, 0x02	; 2
    24e6:	18 f4       	brcc	.+6      	; 0x24ee <_ZN7Sd2Card7readEndEv+0x26>
    24e8:	0e 94 09 12 	call	0x2412	; 0x2412 <_ZL6spiRecv>
    24ec:	f3 cf       	rjmp	.-26     	; 0x24d4 <_ZN7Sd2Card7readEndEv+0xc>
    24ee:	ce 01       	movw	r24, r28
    24f0:	0e 94 1c 12 	call	0x2438	; 0x2438 <_ZN7Sd2Card14chipSelectHighEv>
    24f4:	1e 82       	std	Y+6, r1	; 0x06
    24f6:	df 91       	pop	r29
    24f8:	cf 91       	pop	r28
    24fa:	08 95       	ret

000024fc <_ZN7Sd2Card10setSckRateEh>:
    24fc:	67 30       	cpi	r22, 0x07	; 7
    24fe:	28 f0       	brcs	.+10     	; 0x250a <_ZN7Sd2Card10setSckRateEh+0xe>
    2500:	26 e1       	ldi	r18, 0x16	; 22
    2502:	fc 01       	movw	r30, r24
    2504:	25 83       	std	Z+5, r18	; 0x05
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	08 95       	ret
    250a:	62 30       	cpi	r22, 0x02	; 2
    250c:	d1 f0       	breq	.+52     	; 0x2542 <_ZN7Sd2Card10setSckRateEh+0x46>
    250e:	28 f4       	brcc	.+10     	; 0x251a <_ZN7Sd2Card10setSckRateEh+0x1e>
    2510:	66 23       	and	r22, r22
    2512:	49 f0       	breq	.+18     	; 0x2526 <_ZN7Sd2Card10setSckRateEh+0x2a>
    2514:	61 30       	cpi	r22, 0x01	; 1
    2516:	71 f0       	breq	.+28     	; 0x2534 <_ZN7Sd2Card10setSckRateEh+0x38>
    2518:	30 c0       	rjmp	.+96     	; 0x257a <_ZN7Sd2Card10setSckRateEh+0x7e>
    251a:	64 30       	cpi	r22, 0x04	; 4
    251c:	01 f1       	breq	.+64     	; 0x255e <_ZN7Sd2Card10setSckRateEh+0x62>
    251e:	c0 f0       	brcs	.+48     	; 0x2550 <_ZN7Sd2Card10setSckRateEh+0x54>
    2520:	65 30       	cpi	r22, 0x05	; 5
    2522:	21 f1       	breq	.+72     	; 0x256c <_ZN7Sd2Card10setSckRateEh+0x70>
    2524:	2a c0       	rjmp	.+84     	; 0x257a <_ZN7Sd2Card10setSckRateEh+0x7e>
    2526:	80 e5       	ldi	r24, 0x50	; 80
    2528:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <_ZL8settings>
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <_ZL8settings+0x1>
    2532:	08 95       	ret
    2534:	80 e5       	ldi	r24, 0x50	; 80
    2536:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <_ZL8settings>
    253a:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <_ZL8settings+0x1>
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	08 95       	ret
    2542:	81 e5       	ldi	r24, 0x51	; 81
    2544:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <_ZL8settings>
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <_ZL8settings+0x1>
    254e:	08 95       	ret
    2550:	81 e5       	ldi	r24, 0x51	; 81
    2552:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <_ZL8settings>
    2556:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <_ZL8settings+0x1>
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	08 95       	ret
    255e:	82 e5       	ldi	r24, 0x52	; 82
    2560:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <_ZL8settings>
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <_ZL8settings+0x1>
    256a:	08 95       	ret
    256c:	82 e5       	ldi	r24, 0x52	; 82
    256e:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <_ZL8settings>
    2572:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <_ZL8settings+0x1>
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	08 95       	ret
    257a:	83 e5       	ldi	r24, 0x53	; 83
    257c:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <_ZL8settings>
    2580:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <_ZL8settings+0x1>
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	08 95       	ret

00002588 <_ZN7Sd2Card11waitNotBusyEj>:
    2588:	0f 93       	push	r16
    258a:	1f 93       	push	r17
    258c:	cf 93       	push	r28
    258e:	df 93       	push	r29
    2590:	eb 01       	movw	r28, r22
    2592:	0e 94 02 02 	call	0x404	; 0x404 <millis>
    2596:	8b 01       	movw	r16, r22
    2598:	0e 94 09 12 	call	0x2412	; 0x2412 <_ZL6spiRecv>
    259c:	8f 3f       	cpi	r24, 0xFF	; 255
    259e:	49 f0       	breq	.+18     	; 0x25b2 <_ZN7Sd2Card11waitNotBusyEj+0x2a>
    25a0:	0e 94 02 02 	call	0x404	; 0x404 <millis>
    25a4:	60 1b       	sub	r22, r16
    25a6:	71 0b       	sbc	r23, r17
    25a8:	6c 17       	cp	r22, r28
    25aa:	7d 07       	cpc	r23, r29
    25ac:	a8 f3       	brcs	.-22     	; 0x2598 <_ZN7Sd2Card11waitNotBusyEj+0x10>
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	01 c0       	rjmp	.+2      	; 0x25b4 <_ZN7Sd2Card11waitNotBusyEj+0x2c>
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	df 91       	pop	r29
    25b6:	cf 91       	pop	r28
    25b8:	1f 91       	pop	r17
    25ba:	0f 91       	pop	r16
    25bc:	08 95       	ret

000025be <_ZN7Sd2Card11cardCommandEhm>:
    25be:	cf 92       	push	r12
    25c0:	df 92       	push	r13
    25c2:	ef 92       	push	r14
    25c4:	ff 92       	push	r15
    25c6:	0f 93       	push	r16
    25c8:	1f 93       	push	r17
    25ca:	cf 93       	push	r28
    25cc:	df 93       	push	r29
    25ce:	8c 01       	movw	r16, r24
    25d0:	d6 2f       	mov	r29, r22
    25d2:	69 01       	movw	r12, r18
    25d4:	7a 01       	movw	r14, r20
    25d6:	0e 94 64 12 	call	0x24c8	; 0x24c8 <_ZN7Sd2Card7readEndEv>
    25da:	c8 01       	movw	r24, r16
    25dc:	0e 94 3a 12 	call	0x2474	; 0x2474 <_ZN7Sd2Card13chipSelectLowEv>
    25e0:	6c e2       	ldi	r22, 0x2C	; 44
    25e2:	71 e0       	ldi	r23, 0x01	; 1
    25e4:	c8 01       	movw	r24, r16
    25e6:	0e 94 c4 12 	call	0x2588	; 0x2588 <_ZN7Sd2Card11waitNotBusyEj>
    25ea:	8d 2f       	mov	r24, r29
    25ec:	80 64       	ori	r24, 0x40	; 64
    25ee:	0e 94 02 12 	call	0x2404	; 0x2404 <_ZL7spiSendh>
    25f2:	c8 e1       	ldi	r28, 0x18	; 24
    25f4:	cc 23       	and	r28, r28
    25f6:	74 f0       	brlt	.+28     	; 0x2614 <_ZN7Sd2Card11cardCommandEhm+0x56>
    25f8:	d7 01       	movw	r26, r14
    25fa:	c6 01       	movw	r24, r12
    25fc:	0c 2e       	mov	r0, r28
    25fe:	04 c0       	rjmp	.+8      	; 0x2608 <_ZN7Sd2Card11cardCommandEhm+0x4a>
    2600:	b6 95       	lsr	r27
    2602:	a7 95       	ror	r26
    2604:	97 95       	ror	r25
    2606:	87 95       	ror	r24
    2608:	0a 94       	dec	r0
    260a:	d2 f7       	brpl	.-12     	; 0x2600 <_ZN7Sd2Card11cardCommandEhm+0x42>
    260c:	0e 94 02 12 	call	0x2404	; 0x2404 <_ZL7spiSendh>
    2610:	c8 50       	subi	r28, 0x08	; 8
    2612:	f0 cf       	rjmp	.-32     	; 0x25f4 <_ZN7Sd2Card11cardCommandEhm+0x36>
    2614:	dd 23       	and	r29, r29
    2616:	11 f0       	breq	.+4      	; 0x261c <_ZN7Sd2Card11cardCommandEhm+0x5e>
    2618:	8f ef       	ldi	r24, 0xFF	; 255
    261a:	01 c0       	rjmp	.+2      	; 0x261e <_ZN7Sd2Card11cardCommandEhm+0x60>
    261c:	85 e9       	ldi	r24, 0x95	; 149
    261e:	d8 30       	cpi	r29, 0x08	; 8
    2620:	09 f4       	brne	.+2      	; 0x2624 <_ZN7Sd2Card11cardCommandEhm+0x66>
    2622:	87 e8       	ldi	r24, 0x87	; 135
    2624:	0e 94 02 12 	call	0x2404	; 0x2404 <_ZL7spiSendh>
    2628:	c0 e0       	ldi	r28, 0x00	; 0
    262a:	0e 94 09 12 	call	0x2412	; 0x2412 <_ZL6spiRecv>
    262e:	f8 01       	movw	r30, r16
    2630:	82 87       	std	Z+10, r24	; 0x0a
    2632:	88 23       	and	r24, r24
    2634:	24 f4       	brge	.+8      	; 0x263e <_ZN7Sd2Card11cardCommandEhm+0x80>
    2636:	cf 3f       	cpi	r28, 0xFF	; 255
    2638:	21 f4       	brne	.+8      	; 0x2642 <_ZN7Sd2Card11cardCommandEhm+0x84>
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	03 c0       	rjmp	.+6      	; 0x2644 <_ZN7Sd2Card11cardCommandEhm+0x86>
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	01 c0       	rjmp	.+2      	; 0x2644 <_ZN7Sd2Card11cardCommandEhm+0x86>
    2642:	91 e0       	ldi	r25, 0x01	; 1
    2644:	99 23       	and	r25, r25
    2646:	11 f0       	breq	.+4      	; 0x264c <_ZN7Sd2Card11cardCommandEhm+0x8e>
    2648:	cf 5f       	subi	r28, 0xFF	; 255
    264a:	ef cf       	rjmp	.-34     	; 0x262a <_ZN7Sd2Card11cardCommandEhm+0x6c>
    264c:	df 91       	pop	r29
    264e:	cf 91       	pop	r28
    2650:	1f 91       	pop	r17
    2652:	0f 91       	pop	r16
    2654:	ff 90       	pop	r15
    2656:	ef 90       	pop	r14
    2658:	df 90       	pop	r13
    265a:	cf 90       	pop	r12
    265c:	08 95       	ret

0000265e <_ZN7Sd2Card4initEhh>:
    265e:	8f 92       	push	r8
    2660:	9f 92       	push	r9
    2662:	af 92       	push	r10
    2664:	bf 92       	push	r11
    2666:	ef 92       	push	r14
    2668:	ff 92       	push	r15
    266a:	0f 93       	push	r16
    266c:	1f 93       	push	r17
    266e:	cf 93       	push	r28
    2670:	df 93       	push	r29
    2672:	ec 01       	movw	r28, r24
    2674:	e6 2e       	mov	r14, r22
    2676:	1b 86       	std	Y+11, r1	; 0x0b
    2678:	19 86       	std	Y+9, r1	; 0x09
    267a:	1e 82       	std	Y+6, r1	; 0x06
    267c:	1d 82       	std	Y+5, r1	; 0x05
    267e:	4c 83       	std	Y+4, r20	; 0x04
    2680:	0e 94 02 02 	call	0x404	; 0x404 <millis>
    2684:	8b 01       	movw	r16, r22
    2686:	61 e0       	ldi	r22, 0x01	; 1
    2688:	8c 81       	ldd	r24, Y+4	; 0x04
    268a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <pinMode>
    268e:	61 e0       	ldi	r22, 0x01	; 1
    2690:	8c 81       	ldd	r24, Y+4	; 0x04
    2692:	0e 94 a2 02 	call	0x544	; 0x544 <digitalWrite>
    2696:	0e 94 59 23 	call	0x46b2	; 0x46b2 <_ZN8SPIClass5beginEv>
    269a:	82 e5       	ldi	r24, 0x52	; 82
    269c:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <_ZL8settings>
    26a0:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <_ZL8settings+0x1>
    26a4:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <_ZN8SPIClass13interruptModeE>
    26a8:	88 23       	and	r24, r24
    26aa:	99 f0       	breq	.+38     	; 0x26d2 <_ZN7Sd2Card4initEhh+0x74>
    26ac:	8f b7       	in	r24, 0x3f	; 63
    26ae:	f8 94       	cli
    26b0:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <_ZN8SPIClass13interruptModeE>
    26b4:	91 30       	cpi	r25, 0x01	; 1
    26b6:	59 f4       	brne	.+22     	; 0x26ce <_ZN7Sd2Card4initEhh+0x70>
    26b8:	9d b3       	in	r25, 0x1d	; 29
    26ba:	90 93 de 04 	sts	0x04DE, r25	; 0x8004de <_ZN8SPIClass13interruptSaveE>
    26be:	2d b3       	in	r18, 0x1d	; 29
    26c0:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <_ZN8SPIClass13interruptMaskE>
    26c4:	90 95       	com	r25
    26c6:	92 23       	and	r25, r18
    26c8:	9d bb       	out	0x1d, r25	; 29
    26ca:	8f bf       	out	0x3f, r24	; 63
    26cc:	02 c0       	rjmp	.+4      	; 0x26d2 <_ZN7Sd2Card4initEhh+0x74>
    26ce:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <_ZN8SPIClass13interruptSaveE>
    26d2:	82 e5       	ldi	r24, 0x52	; 82
    26d4:	8c bd       	out	0x2c, r24	; 44
    26d6:	1d bc       	out	0x2d, r1	; 45
    26d8:	f1 2c       	mov	r15, r1
    26da:	89 e0       	ldi	r24, 0x09	; 9
    26dc:	8f 15       	cp	r24, r15
    26de:	28 f0       	brcs	.+10     	; 0x26ea <_ZN7Sd2Card4initEhh+0x8c>
    26e0:	8f ef       	ldi	r24, 0xFF	; 255
    26e2:	0e 94 02 12 	call	0x2404	; 0x2404 <_ZL7spiSendh>
    26e6:	f3 94       	inc	r15
    26e8:	f8 cf       	rjmp	.-16     	; 0x26da <_ZN7Sd2Card4initEhh+0x7c>
    26ea:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <_ZN8SPIClass13interruptModeE>
    26ee:	88 23       	and	r24, r24
    26f0:	71 f0       	breq	.+28     	; 0x270e <_ZN7Sd2Card4initEhh+0xb0>
    26f2:	9f b7       	in	r25, 0x3f	; 63
    26f4:	f8 94       	cli
    26f6:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <_ZN8SPIClass13interruptModeE>
    26fa:	81 30       	cpi	r24, 0x01	; 1
    26fc:	29 f4       	brne	.+10     	; 0x2708 <_ZN7Sd2Card4initEhh+0xaa>
    26fe:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <_ZN8SPIClass13interruptSaveE>
    2702:	8d bb       	out	0x1d, r24	; 29
    2704:	9f bf       	out	0x3f, r25	; 63
    2706:	03 c0       	rjmp	.+6      	; 0x270e <_ZN7Sd2Card4initEhh+0xb0>
    2708:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <_ZN8SPIClass13interruptSaveE>
    270c:	8f bf       	out	0x3f, r24	; 63
    270e:	ce 01       	movw	r24, r28
    2710:	0e 94 3a 12 	call	0x2474	; 0x2474 <_ZN7Sd2Card13chipSelectLowEv>
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	a9 01       	movw	r20, r18
    271a:	60 e0       	ldi	r22, 0x00	; 0
    271c:	ce 01       	movw	r24, r28
    271e:	0e 94 df 12 	call	0x25be	; 0x25be <_ZN7Sd2Card11cardCommandEhm>
    2722:	8a 87       	std	Y+10, r24	; 0x0a
    2724:	81 30       	cpi	r24, 0x01	; 1
    2726:	51 f0       	breq	.+20     	; 0x273c <_ZN7Sd2Card4initEhh+0xde>
    2728:	0e 94 02 02 	call	0x404	; 0x404 <millis>
    272c:	60 1b       	sub	r22, r16
    272e:	71 0b       	sbc	r23, r17
    2730:	61 3d       	cpi	r22, 0xD1	; 209
    2732:	77 40       	sbci	r23, 0x07	; 7
    2734:	78 f3       	brcs	.-34     	; 0x2714 <_ZN7Sd2Card4initEhh+0xb6>
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	8d 83       	std	Y+5, r24	; 0x05
    273a:	69 c0       	rjmp	.+210    	; 0x280e <_ZN7Sd2Card4initEhh+0x1b0>
    273c:	2a ea       	ldi	r18, 0xAA	; 170
    273e:	31 e0       	ldi	r19, 0x01	; 1
    2740:	40 e0       	ldi	r20, 0x00	; 0
    2742:	50 e0       	ldi	r21, 0x00	; 0
    2744:	68 e0       	ldi	r22, 0x08	; 8
    2746:	ce 01       	movw	r24, r28
    2748:	0e 94 df 12 	call	0x25be	; 0x25be <_ZN7Sd2Card11cardCommandEhm>
    274c:	82 ff       	sbrs	r24, 2
    274e:	03 c0       	rjmp	.+6      	; 0x2756 <_ZN7Sd2Card4initEhh+0xf8>
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	8b 87       	std	Y+11, r24	; 0x0b
    2754:	11 c0       	rjmp	.+34     	; 0x2778 <_ZN7Sd2Card4initEhh+0x11a>
    2756:	f1 2c       	mov	r15, r1
    2758:	83 e0       	ldi	r24, 0x03	; 3
    275a:	8f 15       	cp	r24, r15
    275c:	28 f0       	brcs	.+10     	; 0x2768 <_ZN7Sd2Card4initEhh+0x10a>
    275e:	0e 94 09 12 	call	0x2412	; 0x2412 <_ZL6spiRecv>
    2762:	8a 87       	std	Y+10, r24	; 0x0a
    2764:	f3 94       	inc	r15
    2766:	f8 cf       	rjmp	.-16     	; 0x2758 <_ZN7Sd2Card4initEhh+0xfa>
    2768:	8a 85       	ldd	r24, Y+10	; 0x0a
    276a:	8a 3a       	cpi	r24, 0xAA	; 170
    276c:	19 f0       	breq	.+6      	; 0x2774 <_ZN7Sd2Card4initEhh+0x116>
    276e:	82 e0       	ldi	r24, 0x02	; 2
    2770:	8d 83       	std	Y+5, r24	; 0x05
    2772:	4d c0       	rjmp	.+154    	; 0x280e <_ZN7Sd2Card4initEhh+0x1b0>
    2774:	82 e0       	ldi	r24, 0x02	; 2
    2776:	8b 87       	std	Y+11, r24	; 0x0b
    2778:	8b 85       	ldd	r24, Y+11	; 0x0b
    277a:	82 30       	cpi	r24, 0x02	; 2
    277c:	31 f4       	brne	.+12     	; 0x278a <_ZN7Sd2Card4initEhh+0x12c>
    277e:	81 2c       	mov	r8, r1
    2780:	91 2c       	mov	r9, r1
    2782:	54 01       	movw	r10, r8
    2784:	68 94       	set
    2786:	b6 f8       	bld	r11, 6
    2788:	03 c0       	rjmp	.+6      	; 0x2790 <_ZN7Sd2Card4initEhh+0x132>
    278a:	81 2c       	mov	r8, r1
    278c:	91 2c       	mov	r9, r1
    278e:	54 01       	movw	r10, r8
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	a9 01       	movw	r20, r18
    2796:	67 e3       	ldi	r22, 0x37	; 55
    2798:	ce 01       	movw	r24, r28
    279a:	0e 94 df 12 	call	0x25be	; 0x25be <_ZN7Sd2Card11cardCommandEhm>
    279e:	a5 01       	movw	r20, r10
    27a0:	94 01       	movw	r18, r8
    27a2:	69 e2       	ldi	r22, 0x29	; 41
    27a4:	ce 01       	movw	r24, r28
    27a6:	0e 94 df 12 	call	0x25be	; 0x25be <_ZN7Sd2Card11cardCommandEhm>
    27aa:	8a 87       	std	Y+10, r24	; 0x0a
    27ac:	88 23       	and	r24, r24
    27ae:	51 f0       	breq	.+20     	; 0x27c4 <_ZN7Sd2Card4initEhh+0x166>
    27b0:	0e 94 02 02 	call	0x404	; 0x404 <millis>
    27b4:	60 1b       	sub	r22, r16
    27b6:	71 0b       	sbc	r23, r17
    27b8:	61 3d       	cpi	r22, 0xD1	; 209
    27ba:	77 40       	sbci	r23, 0x07	; 7
    27bc:	48 f3       	brcs	.-46     	; 0x2790 <_ZN7Sd2Card4initEhh+0x132>
    27be:	88 e0       	ldi	r24, 0x08	; 8
    27c0:	8d 83       	std	Y+5, r24	; 0x05
    27c2:	25 c0       	rjmp	.+74     	; 0x280e <_ZN7Sd2Card4initEhh+0x1b0>
    27c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    27c6:	82 30       	cpi	r24, 0x02	; 2
    27c8:	d1 f4       	brne	.+52     	; 0x27fe <_ZN7Sd2Card4initEhh+0x1a0>
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	a9 01       	movw	r20, r18
    27d0:	6a e3       	ldi	r22, 0x3A	; 58
    27d2:	ce 01       	movw	r24, r28
    27d4:	0e 94 df 12 	call	0x25be	; 0x25be <_ZN7Sd2Card11cardCommandEhm>
    27d8:	88 23       	and	r24, r24
    27da:	19 f0       	breq	.+6      	; 0x27e2 <_ZN7Sd2Card4initEhh+0x184>
    27dc:	86 e0       	ldi	r24, 0x06	; 6
    27de:	8d 83       	std	Y+5, r24	; 0x05
    27e0:	16 c0       	rjmp	.+44     	; 0x280e <_ZN7Sd2Card4initEhh+0x1b0>
    27e2:	0e 94 09 12 	call	0x2412	; 0x2412 <_ZL6spiRecv>
    27e6:	80 7c       	andi	r24, 0xC0	; 192
    27e8:	80 3c       	cpi	r24, 0xC0	; 192
    27ea:	11 f4       	brne	.+4      	; 0x27f0 <_ZN7Sd2Card4initEhh+0x192>
    27ec:	83 e0       	ldi	r24, 0x03	; 3
    27ee:	8b 87       	std	Y+11, r24	; 0x0b
    27f0:	10 e0       	ldi	r17, 0x00	; 0
    27f2:	13 30       	cpi	r17, 0x03	; 3
    27f4:	20 f4       	brcc	.+8      	; 0x27fe <_ZN7Sd2Card4initEhh+0x1a0>
    27f6:	0e 94 09 12 	call	0x2412	; 0x2412 <_ZL6spiRecv>
    27fa:	1f 5f       	subi	r17, 0xFF	; 255
    27fc:	fa cf       	rjmp	.-12     	; 0x27f2 <_ZN7Sd2Card4initEhh+0x194>
    27fe:	ce 01       	movw	r24, r28
    2800:	0e 94 1c 12 	call	0x2438	; 0x2438 <_ZN7Sd2Card14chipSelectHighEv>
    2804:	6e 2d       	mov	r22, r14
    2806:	ce 01       	movw	r24, r28
    2808:	0e 94 7e 12 	call	0x24fc	; 0x24fc <_ZN7Sd2Card10setSckRateEh>
    280c:	04 c0       	rjmp	.+8      	; 0x2816 <_ZN7Sd2Card4initEhh+0x1b8>
    280e:	ce 01       	movw	r24, r28
    2810:	0e 94 1c 12 	call	0x2438	; 0x2438 <_ZN7Sd2Card14chipSelectHighEv>
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	df 91       	pop	r29
    2818:	cf 91       	pop	r28
    281a:	1f 91       	pop	r17
    281c:	0f 91       	pop	r16
    281e:	ff 90       	pop	r15
    2820:	ef 90       	pop	r14
    2822:	bf 90       	pop	r11
    2824:	af 90       	pop	r10
    2826:	9f 90       	pop	r9
    2828:	8f 90       	pop	r8
    282a:	08 95       	ret

0000282c <_ZN7Sd2Card14waitStartBlockEv>:
    282c:	0f 93       	push	r16
    282e:	1f 93       	push	r17
    2830:	cf 93       	push	r28
    2832:	df 93       	push	r29
    2834:	ec 01       	movw	r28, r24
    2836:	0e 94 02 02 	call	0x404	; 0x404 <millis>
    283a:	8b 01       	movw	r16, r22
    283c:	0e 94 09 12 	call	0x2412	; 0x2412 <_ZL6spiRecv>
    2840:	8a 87       	std	Y+10, r24	; 0x0a
    2842:	8f 3f       	cpi	r24, 0xFF	; 255
    2844:	51 f4       	brne	.+20     	; 0x285a <_ZN7Sd2Card14waitStartBlockEv+0x2e>
    2846:	0e 94 02 02 	call	0x404	; 0x404 <millis>
    284a:	60 1b       	sub	r22, r16
    284c:	71 0b       	sbc	r23, r17
    284e:	6d 32       	cpi	r22, 0x2D	; 45
    2850:	71 40       	sbci	r23, 0x01	; 1
    2852:	a0 f3       	brcs	.-24     	; 0x283c <_ZN7Sd2Card14waitStartBlockEv+0x10>
    2854:	8f e0       	ldi	r24, 0x0F	; 15
    2856:	8d 83       	std	Y+5, r24	; 0x05
    2858:	04 c0       	rjmp	.+8      	; 0x2862 <_ZN7Sd2Card14waitStartBlockEv+0x36>
    285a:	8e 3f       	cpi	r24, 0xFE	; 254
    285c:	39 f0       	breq	.+14     	; 0x286c <_ZN7Sd2Card14waitStartBlockEv+0x40>
    285e:	8d e0       	ldi	r24, 0x0D	; 13
    2860:	8d 83       	std	Y+5, r24	; 0x05
    2862:	ce 01       	movw	r24, r28
    2864:	0e 94 1c 12 	call	0x2438	; 0x2438 <_ZN7Sd2Card14chipSelectHighEv>
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	01 c0       	rjmp	.+2      	; 0x286e <_ZN7Sd2Card14waitStartBlockEv+0x42>
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	df 91       	pop	r29
    2870:	cf 91       	pop	r28
    2872:	1f 91       	pop	r17
    2874:	0f 91       	pop	r16
    2876:	08 95       	ret

00002878 <_ZN7Sd2Card8readDataEmjjPh>:
    2878:	af 92       	push	r10
    287a:	bf 92       	push	r11
    287c:	cf 92       	push	r12
    287e:	df 92       	push	r13
    2880:	ef 92       	push	r14
    2882:	ff 92       	push	r15
    2884:	0f 93       	push	r16
    2886:	1f 93       	push	r17
    2888:	cf 93       	push	r28
    288a:	df 93       	push	r29
    288c:	ec 01       	movw	r28, r24
    288e:	69 01       	movw	r12, r18
    2890:	01 15       	cp	r16, r1
    2892:	11 05       	cpc	r17, r1
    2894:	09 f4       	brne	.+2      	; 0x2898 <_ZN7Sd2Card8readDataEmjjPh+0x20>
    2896:	6f c0       	rjmp	.+222    	; 0x2976 <_ZN7Sd2Card8readDataEmjjPh+0xfe>
    2898:	c8 01       	movw	r24, r16
    289a:	82 0f       	add	r24, r18
    289c:	93 1f       	adc	r25, r19
    289e:	81 30       	cpi	r24, 0x01	; 1
    28a0:	92 40       	sbci	r25, 0x02	; 2
    28a2:	08 f0       	brcs	.+2      	; 0x28a6 <_ZN7Sd2Card8readDataEmjjPh+0x2e>
    28a4:	63 c0       	rjmp	.+198    	; 0x296c <_ZN7Sd2Card8readDataEmjjPh+0xf4>
    28a6:	8e 81       	ldd	r24, Y+6	; 0x06
    28a8:	88 23       	and	r24, r24
    28aa:	71 f0       	breq	.+28     	; 0x28c8 <_ZN7Sd2Card8readDataEmjjPh+0x50>
    28ac:	88 81       	ld	r24, Y
    28ae:	99 81       	ldd	r25, Y+1	; 0x01
    28b0:	aa 81       	ldd	r26, Y+2	; 0x02
    28b2:	bb 81       	ldd	r27, Y+3	; 0x03
    28b4:	84 17       	cp	r24, r20
    28b6:	95 07       	cpc	r25, r21
    28b8:	a6 07       	cpc	r26, r22
    28ba:	b7 07       	cpc	r27, r23
    28bc:	29 f4       	brne	.+10     	; 0x28c8 <_ZN7Sd2Card8readDataEmjjPh+0x50>
    28be:	8f 81       	ldd	r24, Y+7	; 0x07
    28c0:	98 85       	ldd	r25, Y+8	; 0x08
    28c2:	c8 16       	cp	r12, r24
    28c4:	d9 06       	cpc	r13, r25
    28c6:	20 f5       	brcc	.+72     	; 0x2910 <_ZN7Sd2Card8readDataEmjjPh+0x98>
    28c8:	48 83       	st	Y, r20
    28ca:	59 83       	std	Y+1, r21	; 0x01
    28cc:	6a 83       	std	Y+2, r22	; 0x02
    28ce:	7b 83       	std	Y+3, r23	; 0x03
    28d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    28d2:	83 30       	cpi	r24, 0x03	; 3
    28d4:	49 f0       	breq	.+18     	; 0x28e8 <_ZN7Sd2Card8readDataEmjjPh+0x70>
    28d6:	03 2e       	mov	r0, r19
    28d8:	39 e0       	ldi	r19, 0x09	; 9
    28da:	44 0f       	add	r20, r20
    28dc:	55 1f       	adc	r21, r21
    28de:	66 1f       	adc	r22, r22
    28e0:	77 1f       	adc	r23, r23
    28e2:	3a 95       	dec	r19
    28e4:	d1 f7       	brne	.-12     	; 0x28da <_ZN7Sd2Card8readDataEmjjPh+0x62>
    28e6:	30 2d       	mov	r19, r0
    28e8:	9a 01       	movw	r18, r20
    28ea:	ab 01       	movw	r20, r22
    28ec:	61 e1       	ldi	r22, 0x11	; 17
    28ee:	ce 01       	movw	r24, r28
    28f0:	0e 94 df 12 	call	0x25be	; 0x25be <_ZN7Sd2Card11cardCommandEhm>
    28f4:	88 23       	and	r24, r24
    28f6:	19 f0       	breq	.+6      	; 0x28fe <_ZN7Sd2Card8readDataEmjjPh+0x86>
    28f8:	83 e0       	ldi	r24, 0x03	; 3
    28fa:	8d 83       	std	Y+5, r24	; 0x05
    28fc:	37 c0       	rjmp	.+110    	; 0x296c <_ZN7Sd2Card8readDataEmjjPh+0xf4>
    28fe:	ce 01       	movw	r24, r28
    2900:	0e 94 16 14 	call	0x282c	; 0x282c <_ZN7Sd2Card14waitStartBlockEv>
    2904:	88 23       	and	r24, r24
    2906:	91 f1       	breq	.+100    	; 0x296c <_ZN7Sd2Card8readDataEmjjPh+0xf4>
    2908:	18 86       	std	Y+8, r1	; 0x08
    290a:	1f 82       	std	Y+7, r1	; 0x07
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	8e 83       	std	Y+6, r24	; 0x06
    2910:	8f 81       	ldd	r24, Y+7	; 0x07
    2912:	98 85       	ldd	r25, Y+8	; 0x08
    2914:	8c 15       	cp	r24, r12
    2916:	9d 05       	cpc	r25, r13
    2918:	40 f4       	brcc	.+16     	; 0x292a <_ZN7Sd2Card8readDataEmjjPh+0xb2>
    291a:	0e 94 09 12 	call	0x2412	; 0x2412 <_ZL6spiRecv>
    291e:	8f 81       	ldd	r24, Y+7	; 0x07
    2920:	98 85       	ldd	r25, Y+8	; 0x08
    2922:	01 96       	adiw	r24, 0x01	; 1
    2924:	98 87       	std	Y+8, r25	; 0x08
    2926:	8f 83       	std	Y+7, r24	; 0x07
    2928:	f3 cf       	rjmp	.-26     	; 0x2910 <_ZN7Sd2Card8readDataEmjjPh+0x98>
    292a:	c1 2c       	mov	r12, r1
    292c:	d1 2c       	mov	r13, r1
    292e:	c0 16       	cp	r12, r16
    2930:	d1 06       	cpc	r13, r17
    2932:	58 f4       	brcc	.+22     	; 0x294a <_ZN7Sd2Card8readDataEmjjPh+0xd2>
    2934:	57 01       	movw	r10, r14
    2936:	ac 0c       	add	r10, r12
    2938:	bd 1c       	adc	r11, r13
    293a:	0e 94 09 12 	call	0x2412	; 0x2412 <_ZL6spiRecv>
    293e:	f5 01       	movw	r30, r10
    2940:	80 83       	st	Z, r24
    2942:	ff ef       	ldi	r31, 0xFF	; 255
    2944:	cf 1a       	sub	r12, r31
    2946:	df 0a       	sbc	r13, r31
    2948:	f2 cf       	rjmp	.-28     	; 0x292e <_ZN7Sd2Card8readDataEmjjPh+0xb6>
    294a:	8f 81       	ldd	r24, Y+7	; 0x07
    294c:	98 85       	ldd	r25, Y+8	; 0x08
    294e:	08 0f       	add	r16, r24
    2950:	19 1f       	adc	r17, r25
    2952:	18 87       	std	Y+8, r17	; 0x08
    2954:	0f 83       	std	Y+7, r16	; 0x07
    2956:	89 85       	ldd	r24, Y+9	; 0x09
    2958:	88 23       	and	r24, r24
    295a:	19 f0       	breq	.+6      	; 0x2962 <_ZN7Sd2Card8readDataEmjjPh+0xea>
    295c:	01 15       	cp	r16, r1
    295e:	12 40       	sbci	r17, 0x02	; 2
    2960:	60 f0       	brcs	.+24     	; 0x297a <_ZN7Sd2Card8readDataEmjjPh+0x102>
    2962:	ce 01       	movw	r24, r28
    2964:	0e 94 64 12 	call	0x24c8	; 0x24c8 <_ZN7Sd2Card7readEndEv>
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	08 c0       	rjmp	.+16     	; 0x297c <_ZN7Sd2Card8readDataEmjjPh+0x104>
    296c:	ce 01       	movw	r24, r28
    296e:	0e 94 1c 12 	call	0x2438	; 0x2438 <_ZN7Sd2Card14chipSelectHighEv>
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	03 c0       	rjmp	.+6      	; 0x297c <_ZN7Sd2Card8readDataEmjjPh+0x104>
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	01 c0       	rjmp	.+2      	; 0x297c <_ZN7Sd2Card8readDataEmjjPh+0x104>
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	df 91       	pop	r29
    297e:	cf 91       	pop	r28
    2980:	1f 91       	pop	r17
    2982:	0f 91       	pop	r16
    2984:	ff 90       	pop	r15
    2986:	ef 90       	pop	r14
    2988:	df 90       	pop	r13
    298a:	cf 90       	pop	r12
    298c:	bf 90       	pop	r11
    298e:	af 90       	pop	r10
    2990:	08 95       	ret

00002992 <_ZN7Sd2Card9readBlockEmPh>:
    2992:	ef 92       	push	r14
    2994:	ff 92       	push	r15
    2996:	0f 93       	push	r16
    2998:	1f 93       	push	r17
    299a:	79 01       	movw	r14, r18
    299c:	00 e0       	ldi	r16, 0x00	; 0
    299e:	12 e0       	ldi	r17, 0x02	; 2
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	0e 94 3c 14 	call	0x2878	; 0x2878 <_ZN7Sd2Card8readDataEmjjPh>
    29a8:	1f 91       	pop	r17
    29aa:	0f 91       	pop	r16
    29ac:	ff 90       	pop	r15
    29ae:	ef 90       	pop	r14
    29b0:	08 95       	ret

000029b2 <_ZN7Sd2Card9writeDataEhPKh>:
    29b2:	ef 92       	push	r14
    29b4:	ff 92       	push	r15
    29b6:	0f 93       	push	r16
    29b8:	1f 93       	push	r17
    29ba:	cf 93       	push	r28
    29bc:	df 93       	push	r29
    29be:	7c 01       	movw	r14, r24
    29c0:	86 2f       	mov	r24, r22
    29c2:	8a 01       	movw	r16, r20
    29c4:	0e 94 02 12 	call	0x2404	; 0x2404 <_ZL7spiSendh>
    29c8:	c0 e0       	ldi	r28, 0x00	; 0
    29ca:	d0 e0       	ldi	r29, 0x00	; 0
    29cc:	c1 15       	cp	r28, r1
    29ce:	82 e0       	ldi	r24, 0x02	; 2
    29d0:	d8 07       	cpc	r29, r24
    29d2:	40 f4       	brcc	.+16     	; 0x29e4 <_ZN7Sd2Card9writeDataEhPKh+0x32>
    29d4:	f8 01       	movw	r30, r16
    29d6:	ec 0f       	add	r30, r28
    29d8:	fd 1f       	adc	r31, r29
    29da:	80 81       	ld	r24, Z
    29dc:	0e 94 02 12 	call	0x2404	; 0x2404 <_ZL7spiSendh>
    29e0:	21 96       	adiw	r28, 0x01	; 1
    29e2:	f4 cf       	rjmp	.-24     	; 0x29cc <_ZN7Sd2Card9writeDataEhPKh+0x1a>
    29e4:	8f ef       	ldi	r24, 0xFF	; 255
    29e6:	0e 94 02 12 	call	0x2404	; 0x2404 <_ZL7spiSendh>
    29ea:	8f ef       	ldi	r24, 0xFF	; 255
    29ec:	0e 94 02 12 	call	0x2404	; 0x2404 <_ZL7spiSendh>
    29f0:	0e 94 09 12 	call	0x2412	; 0x2412 <_ZL6spiRecv>
    29f4:	f7 01       	movw	r30, r14
    29f6:	82 87       	std	Z+10, r24	; 0x0a
    29f8:	8f 71       	andi	r24, 0x1F	; 31
    29fa:	85 30       	cpi	r24, 0x05	; 5
    29fc:	39 f0       	breq	.+14     	; 0x2a0c <_ZN7Sd2Card9writeDataEhPKh+0x5a>
    29fe:	81 e1       	ldi	r24, 0x11	; 17
    2a00:	85 83       	std	Z+5, r24	; 0x05
    2a02:	c7 01       	movw	r24, r14
    2a04:	0e 94 1c 12 	call	0x2438	; 0x2438 <_ZN7Sd2Card14chipSelectHighEv>
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	01 c0       	rjmp	.+2      	; 0x2a0e <_ZN7Sd2Card9writeDataEhPKh+0x5c>
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	df 91       	pop	r29
    2a10:	cf 91       	pop	r28
    2a12:	1f 91       	pop	r17
    2a14:	0f 91       	pop	r16
    2a16:	ff 90       	pop	r15
    2a18:	ef 90       	pop	r14
    2a1a:	08 95       	ret

00002a1c <_ZN7Sd2Card10writeBlockEmPKhh>:
    2a1c:	ef 92       	push	r14
    2a1e:	ff 92       	push	r15
    2a20:	0f 93       	push	r16
    2a22:	cf 93       	push	r28
    2a24:	df 93       	push	r29
    2a26:	ec 01       	movw	r28, r24
    2a28:	79 01       	movw	r14, r18
    2a2a:	41 15       	cp	r20, r1
    2a2c:	51 05       	cpc	r21, r1
    2a2e:	61 05       	cpc	r22, r1
    2a30:	71 05       	cpc	r23, r1
    2a32:	19 f4       	brne	.+6      	; 0x2a3a <_ZN7Sd2Card10writeBlockEmPKhh+0x1e>
    2a34:	82 e1       	ldi	r24, 0x12	; 18
    2a36:	8d 83       	std	Y+5, r24	; 0x05
    2a38:	45 c0       	rjmp	.+138    	; 0x2ac4 <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    2a3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a3c:	83 30       	cpi	r24, 0x03	; 3
    2a3e:	49 f0       	breq	.+18     	; 0x2a52 <_ZN7Sd2Card10writeBlockEmPKhh+0x36>
    2a40:	03 2e       	mov	r0, r19
    2a42:	39 e0       	ldi	r19, 0x09	; 9
    2a44:	44 0f       	add	r20, r20
    2a46:	55 1f       	adc	r21, r21
    2a48:	66 1f       	adc	r22, r22
    2a4a:	77 1f       	adc	r23, r23
    2a4c:	3a 95       	dec	r19
    2a4e:	d1 f7       	brne	.-12     	; 0x2a44 <_ZN7Sd2Card10writeBlockEmPKhh+0x28>
    2a50:	30 2d       	mov	r19, r0
    2a52:	9a 01       	movw	r18, r20
    2a54:	ab 01       	movw	r20, r22
    2a56:	68 e1       	ldi	r22, 0x18	; 24
    2a58:	ce 01       	movw	r24, r28
    2a5a:	0e 94 df 12 	call	0x25be	; 0x25be <_ZN7Sd2Card11cardCommandEhm>
    2a5e:	88 23       	and	r24, r24
    2a60:	19 f0       	breq	.+6      	; 0x2a68 <_ZN7Sd2Card10writeBlockEmPKhh+0x4c>
    2a62:	84 e0       	ldi	r24, 0x04	; 4
    2a64:	8d 83       	std	Y+5, r24	; 0x05
    2a66:	2e c0       	rjmp	.+92     	; 0x2ac4 <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    2a68:	a7 01       	movw	r20, r14
    2a6a:	6e ef       	ldi	r22, 0xFE	; 254
    2a6c:	ce 01       	movw	r24, r28
    2a6e:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <_ZN7Sd2Card9writeDataEhPKh>
    2a72:	88 23       	and	r24, r24
    2a74:	39 f1       	breq	.+78     	; 0x2ac4 <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    2a76:	00 23       	and	r16, r16
    2a78:	01 f1       	breq	.+64     	; 0x2aba <_ZN7Sd2Card10writeBlockEmPKhh+0x9e>
    2a7a:	68 e5       	ldi	r22, 0x58	; 88
    2a7c:	72 e0       	ldi	r23, 0x02	; 2
    2a7e:	ce 01       	movw	r24, r28
    2a80:	0e 94 c4 12 	call	0x2588	; 0x2588 <_ZN7Sd2Card11waitNotBusyEj>
    2a84:	81 11       	cpse	r24, r1
    2a86:	03 c0       	rjmp	.+6      	; 0x2a8e <_ZN7Sd2Card10writeBlockEmPKhh+0x72>
    2a88:	85 e1       	ldi	r24, 0x15	; 21
    2a8a:	8d 83       	std	Y+5, r24	; 0x05
    2a8c:	1b c0       	rjmp	.+54     	; 0x2ac4 <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	a9 01       	movw	r20, r18
    2a94:	6d e0       	ldi	r22, 0x0D	; 13
    2a96:	ce 01       	movw	r24, r28
    2a98:	0e 94 df 12 	call	0x25be	; 0x25be <_ZN7Sd2Card11cardCommandEhm>
    2a9c:	81 11       	cpse	r24, r1
    2a9e:	05 c0       	rjmp	.+10     	; 0x2aaa <_ZN7Sd2Card10writeBlockEmPKhh+0x8e>
    2aa0:	0e 94 09 12 	call	0x2412	; 0x2412 <_ZL6spiRecv>
    2aa4:	81 11       	cpse	r24, r1
    2aa6:	03 c0       	rjmp	.+6      	; 0x2aae <_ZN7Sd2Card10writeBlockEmPKhh+0x92>
    2aa8:	03 c0       	rjmp	.+6      	; 0x2ab0 <_ZN7Sd2Card10writeBlockEmPKhh+0x94>
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	01 c0       	rjmp	.+2      	; 0x2ab0 <_ZN7Sd2Card10writeBlockEmPKhh+0x94>
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	88 23       	and	r24, r24
    2ab2:	19 f0       	breq	.+6      	; 0x2aba <_ZN7Sd2Card10writeBlockEmPKhh+0x9e>
    2ab4:	84 e1       	ldi	r24, 0x14	; 20
    2ab6:	8d 83       	std	Y+5, r24	; 0x05
    2ab8:	05 c0       	rjmp	.+10     	; 0x2ac4 <_ZN7Sd2Card10writeBlockEmPKhh+0xa8>
    2aba:	ce 01       	movw	r24, r28
    2abc:	0e 94 1c 12 	call	0x2438	; 0x2438 <_ZN7Sd2Card14chipSelectHighEv>
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	04 c0       	rjmp	.+8      	; 0x2acc <_ZN7Sd2Card10writeBlockEmPKhh+0xb0>
    2ac4:	ce 01       	movw	r24, r28
    2ac6:	0e 94 1c 12 	call	0x2438	; 0x2438 <_ZN7Sd2Card14chipSelectHighEv>
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	df 91       	pop	r29
    2ace:	cf 91       	pop	r28
    2ad0:	0f 91       	pop	r16
    2ad2:	ff 90       	pop	r15
    2ad4:	ef 90       	pop	r14
    2ad6:	08 95       	ret

00002ad8 <_ZN7Sd2Card6isBusyEv>:
/** Check if the SD card is busy

  \return The value one, true, is returned when is busy and
   the value zero, false, is returned for when is NOT busy.
*/
uint8_t Sd2Card::isBusy(void) {
    2ad8:	1f 93       	push	r17
    2ada:	cf 93       	push	r28
    2adc:	df 93       	push	r29
    2ade:	ec 01       	movw	r28, r24
  chipSelectLow();
    2ae0:	0e 94 3a 12 	call	0x2474	; 0x2474 <_ZN7Sd2Card13chipSelectLowEv>
  byte b = spiRec();
    2ae4:	0e 94 09 12 	call	0x2412	; 0x2412 <_ZL6spiRecv>
    2ae8:	18 2f       	mov	r17, r24
  chipSelectHigh();
    2aea:	ce 01       	movw	r24, r28
    2aec:	0e 94 1c 12 	call	0x2438	; 0x2438 <_ZN7Sd2Card14chipSelectHighEv>

  return (b != 0XFF);
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	1f 3f       	cpi	r17, 0xFF	; 255
    2af4:	09 f4       	brne	.+2      	; 0x2af8 <_ZN7Sd2Card6isBusyEv+0x20>
    2af6:	80 e0       	ldi	r24, 0x00	; 0
}
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	1f 91       	pop	r17
    2afe:	08 95       	ret

00002b00 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    2b00:	6f ef       	ldi	r22, 0xFF	; 255
    2b02:	7f ef       	ldi	r23, 0xFF	; 255
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	0e 94 11 12 	call	0x2422	; 0x2422 <_Z41__static_initialization_and_destruction_0ii>
    2b0c:	08 95       	ret

00002b0e <_ZN6SdFile10addClusterEv>:
  // don't try to delete root
  if (isRoot()) {
    return true;
  }
  return rmDir();
}
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	ec 01       	movw	r28, r24
    2b14:	9c 01       	movw	r18, r24
    2b16:	2a 5f       	subi	r18, 0xFA	; 250
    2b18:	3f 4f       	sbci	r19, 0xFF	; 255
    2b1a:	41 e0       	ldi	r20, 0x01	; 1
    2b1c:	50 e0       	ldi	r21, 0x00	; 0
    2b1e:	60 e0       	ldi	r22, 0x00	; 0
    2b20:	70 e0       	ldi	r23, 0x00	; 0
    2b22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b26:	0e 94 8e 20 	call	0x411c	; 0x411c <_ZN8SdVolume15allocContiguousEmPm>
    2b2a:	88 23       	and	r24, r24
    2b2c:	b9 f0       	breq	.+46     	; 0x2b5c <_ZN6SdFile10addClusterEv+0x4e>
    2b2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b30:	98 8d       	ldd	r25, Y+24	; 0x18
    2b32:	a9 8d       	ldd	r26, Y+25	; 0x19
    2b34:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2b36:	89 2b       	or	r24, r25
    2b38:	8a 2b       	or	r24, r26
    2b3a:	8b 2b       	or	r24, r27
    2b3c:	59 f4       	brne	.+22     	; 0x2b54 <_ZN6SdFile10addClusterEv+0x46>
    2b3e:	8e 81       	ldd	r24, Y+6	; 0x06
    2b40:	9f 81       	ldd	r25, Y+7	; 0x07
    2b42:	a8 85       	ldd	r26, Y+8	; 0x08
    2b44:	b9 85       	ldd	r27, Y+9	; 0x09
    2b46:	8f 8b       	std	Y+23, r24	; 0x17
    2b48:	98 8f       	std	Y+24, r25	; 0x18
    2b4a:	a9 8f       	std	Y+25, r26	; 0x19
    2b4c:	ba 8f       	std	Y+26, r27	; 0x1a
    2b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b50:	80 68       	ori	r24, 0x80	; 128
    2b52:	8c 83       	std	Y+4, r24	; 0x04
    2b54:	8c 81       	ldd	r24, Y+4	; 0x04
    2b56:	80 62       	ori	r24, 0x20	; 32
    2b58:	8c 83       	std	Y+4, r24	; 0x04
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	df 91       	pop	r29
    2b5e:	cf 91       	pop	r28
    2b60:	08 95       	ret

00002b62 <_ZN6SdFile13addDirClusterEv>:
    2b62:	cf 92       	push	r12
    2b64:	df 92       	push	r13
    2b66:	ef 92       	push	r14
    2b68:	ff 92       	push	r15
    2b6a:	0f 93       	push	r16
    2b6c:	1f 93       	push	r17
    2b6e:	cf 93       	push	r28
    2b70:	8c 01       	movw	r16, r24
    2b72:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <_ZN6SdFile10addClusterEv>
    2b76:	88 23       	and	r24, r24
    2b78:	09 f4       	brne	.+2      	; 0x2b7c <_ZN6SdFile13addDirClusterEv+0x1a>
    2b7a:	54 c0       	rjmp	.+168    	; 0x2c24 <_ZN6SdFile13addDirClusterEv+0xc2>
    2b7c:	d8 01       	movw	r26, r16
    2b7e:	16 96       	adiw	r26, 0x06	; 6
    2b80:	cd 90       	ld	r12, X+
    2b82:	dd 90       	ld	r13, X+
    2b84:	ed 90       	ld	r14, X+
    2b86:	fc 90       	ld	r15, X
    2b88:	19 97       	sbiw	r26, 0x09	; 9
    2b8a:	5b 96       	adiw	r26, 0x1b	; 27
    2b8c:	ed 91       	ld	r30, X+
    2b8e:	fc 91       	ld	r31, X
    2b90:	5c 97       	sbiw	r26, 0x1c	; 28
    2b92:	86 85       	ldd	r24, Z+14	; 0x0e
    2b94:	97 85       	ldd	r25, Z+15	; 0x0f
    2b96:	a0 89       	ldd	r26, Z+16	; 0x10
    2b98:	b1 89       	ldd	r27, Z+17	; 0x11
    2b9a:	22 e0       	ldi	r18, 0x02	; 2
    2b9c:	c2 1a       	sub	r12, r18
    2b9e:	d1 08       	sbc	r13, r1
    2ba0:	e1 08       	sbc	r14, r1
    2ba2:	f1 08       	sbc	r15, r1
    2ba4:	05 84       	ldd	r0, Z+13	; 0x0d
    2ba6:	04 c0       	rjmp	.+8      	; 0x2bb0 <_ZN6SdFile13addDirClusterEv+0x4e>
    2ba8:	cc 0c       	add	r12, r12
    2baa:	dd 1c       	adc	r13, r13
    2bac:	ee 1c       	adc	r14, r14
    2bae:	ff 1c       	adc	r15, r15
    2bb0:	0a 94       	dec	r0
    2bb2:	d2 f7       	brpl	.-12     	; 0x2ba8 <_ZN6SdFile13addDirClusterEv+0x46>
    2bb4:	c8 0e       	add	r12, r24
    2bb6:	d9 1e       	adc	r13, r25
    2bb8:	ea 1e       	adc	r14, r26
    2bba:	fb 1e       	adc	r15, r27
    2bbc:	c4 81       	ldd	r28, Z+4	; 0x04
    2bbe:	cc 23       	and	r28, r28
    2bc0:	91 f0       	breq	.+36     	; 0x2be6 <_ZN6SdFile13addDirClusterEv+0x84>
    2bc2:	d7 01       	movw	r26, r14
    2bc4:	c6 01       	movw	r24, r12
    2bc6:	8c 0f       	add	r24, r28
    2bc8:	91 1d       	adc	r25, r1
    2bca:	a1 1d       	adc	r26, r1
    2bcc:	b1 1d       	adc	r27, r1
    2bce:	bc 01       	movw	r22, r24
    2bd0:	cd 01       	movw	r24, r26
    2bd2:	61 50       	subi	r22, 0x01	; 1
    2bd4:	71 09       	sbc	r23, r1
    2bd6:	81 09       	sbc	r24, r1
    2bd8:	91 09       	sbc	r25, r1
    2bda:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <_ZN8SdVolume14cacheZeroBlockEm>
    2bde:	88 23       	and	r24, r24
    2be0:	09 f1       	breq	.+66     	; 0x2c24 <_ZN6SdFile13addDirClusterEv+0xc2>
    2be2:	c1 50       	subi	r28, 0x01	; 1
    2be4:	ec cf       	rjmp	.-40     	; 0x2bbe <_ZN6SdFile13addDirClusterEv+0x5c>
    2be6:	d8 01       	movw	r26, r16
    2be8:	5b 96       	adiw	r26, 0x1b	; 27
    2bea:	ed 91       	ld	r30, X+
    2bec:	fc 91       	ld	r31, X
    2bee:	5c 97       	sbiw	r26, 0x1c	; 28
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	92 e0       	ldi	r25, 0x02	; 2
    2bf4:	a0 e0       	ldi	r26, 0x00	; 0
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	05 84       	ldd	r0, Z+13	; 0x0d
    2bfa:	04 c0       	rjmp	.+8      	; 0x2c04 <_ZN6SdFile13addDirClusterEv+0xa2>
    2bfc:	88 0f       	add	r24, r24
    2bfe:	99 1f       	adc	r25, r25
    2c00:	aa 1f       	adc	r26, r26
    2c02:	bb 1f       	adc	r27, r27
    2c04:	0a 94       	dec	r0
    2c06:	d2 f7       	brpl	.-12     	; 0x2bfc <_ZN6SdFile13addDirClusterEv+0x9a>
    2c08:	f8 01       	movw	r30, r16
    2c0a:	43 89       	ldd	r20, Z+19	; 0x13
    2c0c:	54 89       	ldd	r21, Z+20	; 0x14
    2c0e:	65 89       	ldd	r22, Z+21	; 0x15
    2c10:	76 89       	ldd	r23, Z+22	; 0x16
    2c12:	84 0f       	add	r24, r20
    2c14:	95 1f       	adc	r25, r21
    2c16:	a6 1f       	adc	r26, r22
    2c18:	b7 1f       	adc	r27, r23
    2c1a:	83 8b       	std	Z+19, r24	; 0x13
    2c1c:	94 8b       	std	Z+20, r25	; 0x14
    2c1e:	a5 8b       	std	Z+21, r26	; 0x15
    2c20:	b6 8b       	std	Z+22, r27	; 0x16
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	cf 91       	pop	r28
    2c26:	1f 91       	pop	r17
    2c28:	0f 91       	pop	r16
    2c2a:	ff 90       	pop	r15
    2c2c:	ef 90       	pop	r14
    2c2e:	df 90       	pop	r13
    2c30:	cf 90       	pop	r12
    2c32:	08 95       	ret

00002c34 <_ZN6SdFile13cacheDirEntryEh>:
    2c34:	cf 93       	push	r28
    2c36:	df 93       	push	r29
    2c38:	ec 01       	movw	r28, r24
    2c3a:	46 2f       	mov	r20, r22
    2c3c:	6e 85       	ldd	r22, Y+14	; 0x0e
    2c3e:	7f 85       	ldd	r23, Y+15	; 0x0f
    2c40:	88 89       	ldd	r24, Y+16	; 0x10
    2c42:	99 89       	ldd	r25, Y+17	; 0x11
    2c44:	0e 94 76 1e 	call	0x3cec	; 0x3cec <_ZN8SdVolume13cacheRawBlockEmh>
    2c48:	88 23       	and	r24, r24
    2c4a:	41 f0       	breq	.+16     	; 0x2c5c <_ZN6SdFile13cacheDirEntryEh+0x28>
    2c4c:	8a 89       	ldd	r24, Y+18	; 0x12
    2c4e:	20 e2       	ldi	r18, 0x20	; 32
    2c50:	82 9f       	mul	r24, r18
    2c52:	c0 01       	movw	r24, r0
    2c54:	11 24       	eor	r1, r1
    2c56:	82 52       	subi	r24, 0x22	; 34
    2c58:	9d 4f       	sbci	r25, 0xFD	; 253
    2c5a:	02 c0       	rjmp	.+4      	; 0x2c60 <_ZN6SdFile13cacheDirEntryEh+0x2c>
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	df 91       	pop	r29
    2c62:	cf 91       	pop	r28
    2c64:	08 95       	ret

00002c66 <_ZN6SdFile10make83NameEPKcPh>:
    2c66:	cf 93       	push	r28
    2c68:	df 93       	push	r29
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	9b 30       	cpi	r25, 0x0B	; 11
    2c70:	48 f4       	brcc	.+18     	; 0x2c84 <_ZN6SdFile10make83NameEPKcPh+0x1e>
    2c72:	fb 01       	movw	r30, r22
    2c74:	e9 0f       	add	r30, r25
    2c76:	f1 1d       	adc	r31, r1
    2c78:	20 e2       	ldi	r18, 0x20	; 32
    2c7a:	20 83       	st	Z, r18
    2c7c:	9f 5f       	subi	r25, 0xFF	; 255
    2c7e:	f7 cf       	rjmp	.-18     	; 0x2c6e <_ZN6SdFile10make83NameEPKcPh+0x8>
    2c80:	de 01       	movw	r26, r28
    2c82:	02 c0       	rjmp	.+4      	; 0x2c88 <_ZN6SdFile10make83NameEPKcPh+0x22>
    2c84:	40 e0       	ldi	r20, 0x00	; 0
    2c86:	57 e0       	ldi	r21, 0x07	; 7
    2c88:	ed 01       	movw	r28, r26
    2c8a:	21 96       	adiw	r28, 0x01	; 1
    2c8c:	9c 91       	ld	r25, X
    2c8e:	99 23       	and	r25, r25
    2c90:	31 f1       	breq	.+76     	; 0x2cde <_ZN6SdFile10make83NameEPKcPh+0x78>
    2c92:	9e 32       	cpi	r25, 0x2E	; 46
    2c94:	29 f4       	brne	.+10     	; 0x2ca0 <_ZN6SdFile10make83NameEPKcPh+0x3a>
    2c96:	5a 30       	cpi	r21, 0x0A	; 10
    2c98:	49 f1       	breq	.+82     	; 0x2cec <_ZN6SdFile10make83NameEPKcPh+0x86>
    2c9a:	48 e0       	ldi	r20, 0x08	; 8
    2c9c:	5a e0       	ldi	r21, 0x0A	; 10
    2c9e:	f0 cf       	rjmp	.-32     	; 0x2c80 <_ZN6SdFile10make83NameEPKcPh+0x1a>
    2ca0:	ea e4       	ldi	r30, 0x4A	; 74
    2ca2:	f2 e0       	ldi	r31, 0x02	; 2
    2ca4:	9f 01       	movw	r18, r30
    2ca6:	2f 5f       	subi	r18, 0xFF	; 255
    2ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    2caa:	84 91       	lpm	r24, Z
    2cac:	88 23       	and	r24, r24
    2cae:	21 f0       	breq	.+8      	; 0x2cb8 <_ZN6SdFile10make83NameEPKcPh+0x52>
    2cb0:	f9 01       	movw	r30, r18
    2cb2:	98 13       	cpse	r25, r24
    2cb4:	f7 cf       	rjmp	.-18     	; 0x2ca4 <_ZN6SdFile10make83NameEPKcPh+0x3e>
    2cb6:	1c c0       	rjmp	.+56     	; 0x2cf0 <_ZN6SdFile10make83NameEPKcPh+0x8a>
    2cb8:	54 17       	cp	r21, r20
    2cba:	e0 f0       	brcs	.+56     	; 0x2cf4 <_ZN6SdFile10make83NameEPKcPh+0x8e>
    2cbc:	91 32       	cpi	r25, 0x21	; 33
    2cbe:	e0 f0       	brcs	.+56     	; 0x2cf8 <_ZN6SdFile10make83NameEPKcPh+0x92>
    2cc0:	9f 37       	cpi	r25, 0x7F	; 127
    2cc2:	e0 f4       	brcc	.+56     	; 0x2cfc <_ZN6SdFile10make83NameEPKcPh+0x96>
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	84 0f       	add	r24, r20
    2cc8:	fb 01       	movw	r30, r22
    2cca:	e4 0f       	add	r30, r20
    2ccc:	f1 1d       	adc	r31, r1
    2cce:	2f e9       	ldi	r18, 0x9F	; 159
    2cd0:	29 0f       	add	r18, r25
    2cd2:	2a 31       	cpi	r18, 0x1A	; 26
    2cd4:	08 f4       	brcc	.+2      	; 0x2cd8 <_ZN6SdFile10make83NameEPKcPh+0x72>
    2cd6:	90 52       	subi	r25, 0x20	; 32
    2cd8:	90 83       	st	Z, r25
    2cda:	48 2f       	mov	r20, r24
    2cdc:	d1 cf       	rjmp	.-94     	; 0x2c80 <_ZN6SdFile10make83NameEPKcPh+0x1a>
    2cde:	fb 01       	movw	r30, r22
    2ce0:	90 81       	ld	r25, Z
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	90 32       	cpi	r25, 0x20	; 32
    2ce6:	59 f4       	brne	.+22     	; 0x2cfe <_ZN6SdFile10make83NameEPKcPh+0x98>
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	09 c0       	rjmp	.+18     	; 0x2cfe <_ZN6SdFile10make83NameEPKcPh+0x98>
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	07 c0       	rjmp	.+14     	; 0x2cfe <_ZN6SdFile10make83NameEPKcPh+0x98>
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	05 c0       	rjmp	.+10     	; 0x2cfe <_ZN6SdFile10make83NameEPKcPh+0x98>
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	03 c0       	rjmp	.+6      	; 0x2cfe <_ZN6SdFile10make83NameEPKcPh+0x98>
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	01 c0       	rjmp	.+2      	; 0x2cfe <_ZN6SdFile10make83NameEPKcPh+0x98>
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	df 91       	pop	r29
    2d00:	cf 91       	pop	r28
    2d02:	08 95       	ret

00002d04 <_ZN6SdFile8openRootEP8SdVolume>:
    2d04:	0f 93       	push	r16
    2d06:	1f 93       	push	r17
    2d08:	cf 93       	push	r28
    2d0a:	df 93       	push	r29
    2d0c:	ec 01       	movw	r28, r24
    2d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d10:	81 11       	cpse	r24, r1
    2d12:	4f c0       	rjmp	.+158    	; 0x2db2 <_ZN6SdFile8openRootEP8SdVolume+0xae>
    2d14:	8b 01       	movw	r16, r22
    2d16:	fb 01       	movw	r30, r22
    2d18:	97 89       	ldd	r25, Z+23	; 0x17
    2d1a:	90 31       	cpi	r25, 0x10	; 16
    2d1c:	19 f5       	brne	.+70     	; 0x2d64 <_ZN6SdFile8openRootEP8SdVolume+0x60>
    2d1e:	82 e0       	ldi	r24, 0x02	; 2
    2d20:	8d 83       	std	Y+5, r24	; 0x05
    2d22:	1f 8a       	std	Y+23, r1	; 0x17
    2d24:	18 8e       	std	Y+24, r1	; 0x18
    2d26:	19 8e       	std	Y+25, r1	; 0x19
    2d28:	1a 8e       	std	Y+26, r1	; 0x1a
    2d2a:	80 8d       	ldd	r24, Z+24	; 0x18
    2d2c:	91 8d       	ldd	r25, Z+25	; 0x19
    2d2e:	a0 e0       	ldi	r26, 0x00	; 0
    2d30:	b0 e0       	ldi	r27, 0x00	; 0
    2d32:	88 0f       	add	r24, r24
    2d34:	99 1f       	adc	r25, r25
    2d36:	aa 1f       	adc	r26, r26
    2d38:	bb 1f       	adc	r27, r27
    2d3a:	88 0f       	add	r24, r24
    2d3c:	99 1f       	adc	r25, r25
    2d3e:	aa 1f       	adc	r26, r26
    2d40:	bb 1f       	adc	r27, r27
    2d42:	88 0f       	add	r24, r24
    2d44:	99 1f       	adc	r25, r25
    2d46:	aa 1f       	adc	r26, r26
    2d48:	bb 1f       	adc	r27, r27
    2d4a:	88 0f       	add	r24, r24
    2d4c:	99 1f       	adc	r25, r25
    2d4e:	aa 1f       	adc	r26, r26
    2d50:	bb 1f       	adc	r27, r27
    2d52:	88 0f       	add	r24, r24
    2d54:	99 1f       	adc	r25, r25
    2d56:	aa 1f       	adc	r26, r26
    2d58:	bb 1f       	adc	r27, r27
    2d5a:	8b 8b       	std	Y+19, r24	; 0x13
    2d5c:	9c 8b       	std	Y+20, r25	; 0x14
    2d5e:	ad 8b       	std	Y+21, r26	; 0x15
    2d60:	be 8b       	std	Y+22, r27	; 0x16
    2d62:	15 c0       	rjmp	.+42     	; 0x2d8e <_ZN6SdFile8openRootEP8SdVolume+0x8a>
    2d64:	90 32       	cpi	r25, 0x20	; 32
    2d66:	31 f5       	brne	.+76     	; 0x2db4 <_ZN6SdFile8openRootEP8SdVolume+0xb0>
    2d68:	83 e0       	ldi	r24, 0x03	; 3
    2d6a:	8d 83       	std	Y+5, r24	; 0x05
    2d6c:	fb 01       	movw	r30, r22
    2d6e:	42 8d       	ldd	r20, Z+26	; 0x1a
    2d70:	53 8d       	ldd	r21, Z+27	; 0x1b
    2d72:	64 8d       	ldd	r22, Z+28	; 0x1c
    2d74:	75 8d       	ldd	r23, Z+29	; 0x1d
    2d76:	4f 8b       	std	Y+23, r20	; 0x17
    2d78:	58 8f       	std	Y+24, r21	; 0x18
    2d7a:	69 8f       	std	Y+25, r22	; 0x19
    2d7c:	7a 8f       	std	Y+26, r23	; 0x1a
    2d7e:	9e 01       	movw	r18, r28
    2d80:	2d 5e       	subi	r18, 0xED	; 237
    2d82:	3f 4f       	sbci	r19, 0xFF	; 255
    2d84:	c8 01       	movw	r24, r16
    2d86:	0e 94 65 1f 	call	0x3eca	; 0x3eca <_ZNK8SdVolume9chainSizeEmPm>
    2d8a:	88 23       	and	r24, r24
    2d8c:	99 f0       	breq	.+38     	; 0x2db4 <_ZN6SdFile8openRootEP8SdVolume+0xb0>
    2d8e:	1c 8f       	std	Y+28, r17	; 0x1c
    2d90:	0b 8f       	std	Y+27, r16	; 0x1b
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	8c 83       	std	Y+4, r24	; 0x04
    2d96:	1e 82       	std	Y+6, r1	; 0x06
    2d98:	1f 82       	std	Y+7, r1	; 0x07
    2d9a:	18 86       	std	Y+8, r1	; 0x08
    2d9c:	19 86       	std	Y+9, r1	; 0x09
    2d9e:	1a 86       	std	Y+10, r1	; 0x0a
    2da0:	1b 86       	std	Y+11, r1	; 0x0b
    2da2:	1c 86       	std	Y+12, r1	; 0x0c
    2da4:	1d 86       	std	Y+13, r1	; 0x0d
    2da6:	1e 86       	std	Y+14, r1	; 0x0e
    2da8:	1f 86       	std	Y+15, r1	; 0x0f
    2daa:	18 8a       	std	Y+16, r1	; 0x10
    2dac:	19 8a       	std	Y+17, r1	; 0x11
    2dae:	1a 8a       	std	Y+18, r1	; 0x12
    2db0:	01 c0       	rjmp	.+2      	; 0x2db4 <_ZN6SdFile8openRootEP8SdVolume+0xb0>
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	df 91       	pop	r29
    2db6:	cf 91       	pop	r28
    2db8:	1f 91       	pop	r17
    2dba:	0f 91       	pop	r16
    2dbc:	08 95       	ret

00002dbe <_ZN6SdFile4readEPvj>:
    2dbe:	3f 92       	push	r3
    2dc0:	4f 92       	push	r4
    2dc2:	5f 92       	push	r5
    2dc4:	6f 92       	push	r6
    2dc6:	7f 92       	push	r7
    2dc8:	8f 92       	push	r8
    2dca:	9f 92       	push	r9
    2dcc:	af 92       	push	r10
    2dce:	bf 92       	push	r11
    2dd0:	cf 92       	push	r12
    2dd2:	df 92       	push	r13
    2dd4:	ef 92       	push	r14
    2dd6:	ff 92       	push	r15
    2dd8:	0f 93       	push	r16
    2dda:	1f 93       	push	r17
    2ddc:	cf 93       	push	r28
    2dde:	df 93       	push	r29
    2de0:	00 d0       	rcall	.+0      	; 0x2de2 <_ZN6SdFile4readEPvj+0x24>
    2de2:	00 d0       	rcall	.+0      	; 0x2de4 <_ZN6SdFile4readEPvj+0x26>
    2de4:	cd b7       	in	r28, 0x3d	; 61
    2de6:	de b7       	in	r29, 0x3e	; 62
    2de8:	4c 01       	movw	r8, r24
    2dea:	6b 01       	movw	r12, r22
    2dec:	5a 83       	std	Y+2, r21	; 0x02
    2dee:	49 83       	std	Y+1, r20	; 0x01
    2df0:	fc 01       	movw	r30, r24
    2df2:	85 81       	ldd	r24, Z+5	; 0x05
    2df4:	88 23       	and	r24, r24
    2df6:	31 f0       	breq	.+12     	; 0x2e04 <_ZN6SdFile4readEPvj+0x46>
    2df8:	84 81       	ldd	r24, Z+4	; 0x04
    2dfa:	80 fd       	sbrc	r24, 0
    2dfc:	06 c0       	rjmp	.+12     	; 0x2e0a <_ZN6SdFile4readEPvj+0x4c>
    2dfe:	33 24       	eor	r3, r3
    2e00:	33 94       	inc	r3
    2e02:	04 c0       	rjmp	.+8      	; 0x2e0c <_ZN6SdFile4readEPvj+0x4e>
    2e04:	33 24       	eor	r3, r3
    2e06:	33 94       	inc	r3
    2e08:	01 c0       	rjmp	.+2      	; 0x2e0c <_ZN6SdFile4readEPvj+0x4e>
    2e0a:	31 2c       	mov	r3, r1
    2e0c:	31 10       	cpse	r3, r1
    2e0e:	05 c1       	rjmp	.+522    	; 0x301a <_ZN6SdFile4readEPvj+0x25c>
    2e10:	09 81       	ldd	r16, Y+1	; 0x01
    2e12:	1a 81       	ldd	r17, Y+2	; 0x02
    2e14:	c8 01       	movw	r24, r16
    2e16:	a0 e0       	ldi	r26, 0x00	; 0
    2e18:	b0 e0       	ldi	r27, 0x00	; 0
    2e1a:	f4 01       	movw	r30, r8
    2e1c:	03 89       	ldd	r16, Z+19	; 0x13
    2e1e:	14 89       	ldd	r17, Z+20	; 0x14
    2e20:	25 89       	ldd	r18, Z+21	; 0x15
    2e22:	36 89       	ldd	r19, Z+22	; 0x16
    2e24:	42 85       	ldd	r20, Z+10	; 0x0a
    2e26:	53 85       	ldd	r21, Z+11	; 0x0b
    2e28:	64 85       	ldd	r22, Z+12	; 0x0c
    2e2a:	75 85       	ldd	r23, Z+13	; 0x0d
    2e2c:	28 01       	movw	r4, r16
    2e2e:	39 01       	movw	r6, r18
    2e30:	44 1a       	sub	r4, r20
    2e32:	55 0a       	sbc	r5, r21
    2e34:	66 0a       	sbc	r6, r22
    2e36:	77 0a       	sbc	r7, r23
    2e38:	48 16       	cp	r4, r24
    2e3a:	59 06       	cpc	r5, r25
    2e3c:	6a 06       	cpc	r6, r26
    2e3e:	7b 06       	cpc	r7, r27
    2e40:	28 f4       	brcc	.+10     	; 0x2e4c <_ZN6SdFile4readEPvj+0x8e>
    2e42:	c8 01       	movw	r24, r16
    2e44:	84 1b       	sub	r24, r20
    2e46:	95 0b       	sbc	r25, r21
    2e48:	9a 83       	std	Y+2, r25	; 0x02
    2e4a:	89 83       	std	Y+1, r24	; 0x01
    2e4c:	69 80       	ldd	r6, Y+1	; 0x01
    2e4e:	7a 80       	ldd	r7, Y+2	; 0x02
    2e50:	61 14       	cp	r6, r1
    2e52:	71 04       	cpc	r7, r1
    2e54:	09 f4       	brne	.+2      	; 0x2e58 <_ZN6SdFile4readEPvj+0x9a>
    2e56:	de c0       	rjmp	.+444    	; 0x3014 <_ZN6SdFile4readEPvj+0x256>
    2e58:	f4 01       	movw	r30, r8
    2e5a:	82 85       	ldd	r24, Z+10	; 0x0a
    2e5c:	93 85       	ldd	r25, Z+11	; 0x0b
    2e5e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2e60:	b5 85       	ldd	r27, Z+13	; 0x0d
    2e62:	2c 01       	movw	r4, r24
    2e64:	f1 e0       	ldi	r31, 0x01	; 1
    2e66:	5f 22       	and	r5, r31
    2e68:	f4 01       	movw	r30, r8
    2e6a:	25 81       	ldd	r18, Z+5	; 0x05
    2e6c:	22 30       	cpi	r18, 0x02	; 2
    2e6e:	c9 f4       	brne	.+50     	; 0x2ea2 <_ZN6SdFile4readEPvj+0xe4>
    2e70:	23 8d       	ldd	r18, Z+27	; 0x1b
    2e72:	34 8d       	ldd	r19, Z+28	; 0x1c
    2e74:	f9 01       	movw	r30, r18
    2e76:	42 8d       	ldd	r20, Z+26	; 0x1a
    2e78:	53 8d       	ldd	r21, Z+27	; 0x1b
    2e7a:	64 8d       	ldd	r22, Z+28	; 0x1c
    2e7c:	75 8d       	ldd	r23, Z+29	; 0x1d
    2e7e:	07 2e       	mov	r0, r23
    2e80:	79 e0       	ldi	r23, 0x09	; 9
    2e82:	b6 95       	lsr	r27
    2e84:	a7 95       	ror	r26
    2e86:	97 95       	ror	r25
    2e88:	87 95       	ror	r24
    2e8a:	7a 95       	dec	r23
    2e8c:	d1 f7       	brne	.-12     	; 0x2e82 <_ZN6SdFile4readEPvj+0xc4>
    2e8e:	70 2d       	mov	r23, r0
    2e90:	8a 01       	movw	r16, r20
    2e92:	9b 01       	movw	r18, r22
    2e94:	08 0f       	add	r16, r24
    2e96:	19 1f       	adc	r17, r25
    2e98:	2a 1f       	adc	r18, r26
    2e9a:	3b 1f       	adc	r19, r27
    2e9c:	c9 01       	movw	r24, r18
    2e9e:	b8 01       	movw	r22, r16
    2ea0:	54 c0       	rjmp	.+168    	; 0x2f4a <_ZN6SdFile4readEPvj+0x18c>
    2ea2:	f4 01       	movw	r30, r8
    2ea4:	03 8d       	ldd	r16, Z+27	; 0x1b
    2ea6:	14 8d       	ldd	r17, Z+28	; 0x1c
    2ea8:	f8 01       	movw	r30, r16
    2eaa:	b4 80       	ldd	r11, Z+4	; 0x04
    2eac:	ba 94       	dec	r11
    2eae:	ac 01       	movw	r20, r24
    2eb0:	bd 01       	movw	r22, r26
    2eb2:	03 2e       	mov	r0, r19
    2eb4:	39 e0       	ldi	r19, 0x09	; 9
    2eb6:	76 95       	lsr	r23
    2eb8:	67 95       	ror	r22
    2eba:	57 95       	ror	r21
    2ebc:	47 95       	ror	r20
    2ebe:	3a 95       	dec	r19
    2ec0:	d1 f7       	brne	.-12     	; 0x2eb6 <_ZN6SdFile4readEPvj+0xf8>
    2ec2:	30 2d       	mov	r19, r0
    2ec4:	b4 22       	and	r11, r20
    2ec6:	41 14       	cp	r4, r1
    2ec8:	51 04       	cpc	r5, r1
    2eca:	f1 f4       	brne	.+60     	; 0x2f08 <_ZN6SdFile4readEPvj+0x14a>
    2ecc:	b1 10       	cpse	r11, r1
    2ece:	1c c0       	rjmp	.+56     	; 0x2f08 <_ZN6SdFile4readEPvj+0x14a>
    2ed0:	89 2b       	or	r24, r25
    2ed2:	8a 2b       	or	r24, r26
    2ed4:	8b 2b       	or	r24, r27
    2ed6:	51 f4       	brne	.+20     	; 0x2eec <_ZN6SdFile4readEPvj+0x12e>
    2ed8:	f4 01       	movw	r30, r8
    2eda:	87 89       	ldd	r24, Z+23	; 0x17
    2edc:	90 8d       	ldd	r25, Z+24	; 0x18
    2ede:	a1 8d       	ldd	r26, Z+25	; 0x19
    2ee0:	b2 8d       	ldd	r27, Z+26	; 0x1a
    2ee2:	86 83       	std	Z+6, r24	; 0x06
    2ee4:	97 83       	std	Z+7, r25	; 0x07
    2ee6:	a0 87       	std	Z+8, r26	; 0x08
    2ee8:	b1 87       	std	Z+9, r27	; 0x09
    2eea:	0e c0       	rjmp	.+28     	; 0x2f08 <_ZN6SdFile4readEPvj+0x14a>
    2eec:	f4 01       	movw	r30, r8
    2eee:	46 81       	ldd	r20, Z+6	; 0x06
    2ef0:	57 81       	ldd	r21, Z+7	; 0x07
    2ef2:	60 85       	ldd	r22, Z+8	; 0x08
    2ef4:	71 85       	ldd	r23, Z+9	; 0x09
    2ef6:	94 01       	movw	r18, r8
    2ef8:	2a 5f       	subi	r18, 0xFA	; 250
    2efa:	3f 4f       	sbci	r19, 0xFF	; 255
    2efc:	c8 01       	movw	r24, r16
    2efe:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <_ZNK8SdVolume6fatGetEmPm>
    2f02:	88 23       	and	r24, r24
    2f04:	09 f4       	brne	.+2      	; 0x2f08 <_ZN6SdFile4readEPvj+0x14a>
    2f06:	8c c0       	rjmp	.+280    	; 0x3020 <_ZN6SdFile4readEPvj+0x262>
    2f08:	f4 01       	movw	r30, r8
    2f0a:	86 81       	ldd	r24, Z+6	; 0x06
    2f0c:	97 81       	ldd	r25, Z+7	; 0x07
    2f0e:	a0 85       	ldd	r26, Z+8	; 0x08
    2f10:	b1 85       	ldd	r27, Z+9	; 0x09
    2f12:	23 8d       	ldd	r18, Z+27	; 0x1b
    2f14:	34 8d       	ldd	r19, Z+28	; 0x1c
    2f16:	f9 01       	movw	r30, r18
    2f18:	46 85       	ldd	r20, Z+14	; 0x0e
    2f1a:	57 85       	ldd	r21, Z+15	; 0x0f
    2f1c:	60 89       	ldd	r22, Z+16	; 0x10
    2f1e:	71 89       	ldd	r23, Z+17	; 0x11
    2f20:	02 97       	sbiw	r24, 0x02	; 2
    2f22:	a1 09       	sbc	r26, r1
    2f24:	b1 09       	sbc	r27, r1
    2f26:	05 84       	ldd	r0, Z+13	; 0x0d
    2f28:	04 c0       	rjmp	.+8      	; 0x2f32 <_ZN6SdFile4readEPvj+0x174>
    2f2a:	88 0f       	add	r24, r24
    2f2c:	99 1f       	adc	r25, r25
    2f2e:	aa 1f       	adc	r26, r26
    2f30:	bb 1f       	adc	r27, r27
    2f32:	0a 94       	dec	r0
    2f34:	d2 f7       	brpl	.-12     	; 0x2f2a <_ZN6SdFile4readEPvj+0x16c>
    2f36:	84 0f       	add	r24, r20
    2f38:	95 1f       	adc	r25, r21
    2f3a:	a6 1f       	adc	r26, r22
    2f3c:	b7 1f       	adc	r27, r23
    2f3e:	bc 01       	movw	r22, r24
    2f40:	cd 01       	movw	r24, r26
    2f42:	6b 0d       	add	r22, r11
    2f44:	71 1d       	adc	r23, r1
    2f46:	81 1d       	adc	r24, r1
    2f48:	91 1d       	adc	r25, r1
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	32 e0       	ldi	r19, 0x02	; 2
    2f4e:	59 01       	movw	r10, r18
    2f50:	a4 18       	sub	r10, r4
    2f52:	b5 08       	sbc	r11, r5
    2f54:	a6 14       	cp	r10, r6
    2f56:	b7 04       	cpc	r11, r7
    2f58:	08 f0       	brcs	.+2      	; 0x2f5c <_ZN6SdFile4readEPvj+0x19e>
    2f5a:	53 01       	movw	r10, r6
    2f5c:	f4 01       	movw	r30, r8
    2f5e:	24 81       	ldd	r18, Z+4	; 0x04
    2f60:	26 fd       	sbrc	r18, 6
    2f62:	04 c0       	rjmp	.+8      	; 0x2f6c <_ZN6SdFile4readEPvj+0x1ae>
    2f64:	a1 14       	cp	r10, r1
    2f66:	f2 e0       	ldi	r31, 0x02	; 2
    2f68:	bf 06       	cpc	r11, r31
    2f6a:	79 f4       	brne	.+30     	; 0x2f8a <_ZN6SdFile4readEPvj+0x1cc>
    2f6c:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    2f70:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2f74:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2f78:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2f7c:	60 17       	cp	r22, r16
    2f7e:	71 07       	cpc	r23, r17
    2f80:	82 07       	cpc	r24, r18
    2f82:	93 07       	cpc	r25, r19
    2f84:	21 f4       	brne	.+8      	; 0x2f8e <_ZN6SdFile4readEPvj+0x1d0>
    2f86:	23 2d       	mov	r18, r3
    2f88:	03 c0       	rjmp	.+6      	; 0x2f90 <_ZN6SdFile4readEPvj+0x1d2>
    2f8a:	23 2d       	mov	r18, r3
    2f8c:	01 c0       	rjmp	.+2      	; 0x2f90 <_ZN6SdFile4readEPvj+0x1d2>
    2f8e:	21 e0       	ldi	r18, 0x01	; 1
    2f90:	22 23       	and	r18, r18
    2f92:	81 f0       	breq	.+32     	; 0x2fb4 <_ZN6SdFile4readEPvj+0x1f6>
    2f94:	76 01       	movw	r14, r12
    2f96:	85 01       	movw	r16, r10
    2f98:	92 01       	movw	r18, r4
    2f9a:	ab 01       	movw	r20, r22
    2f9c:	bc 01       	movw	r22, r24
    2f9e:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <_ZN8SdVolume7sdCard_E>
    2fa2:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <_ZN8SdVolume7sdCard_E+0x1>
    2fa6:	0e 94 3c 14 	call	0x2878	; 0x2878 <_ZN7Sd2Card8readDataEmjjPh>
    2faa:	88 23       	and	r24, r24
    2fac:	e1 f1       	breq	.+120    	; 0x3026 <_ZN6SdFile4readEPvj+0x268>
    2fae:	ca 0c       	add	r12, r10
    2fb0:	db 1c       	adc	r13, r11
    2fb2:	20 c0       	rjmp	.+64     	; 0x2ff4 <_ZN6SdFile4readEPvj+0x236>
    2fb4:	40 e0       	ldi	r20, 0x00	; 0
    2fb6:	0e 94 76 1e 	call	0x3cec	; 0x3cec <_ZN8SdVolume13cacheRawBlockEmh>
    2fba:	88 23       	and	r24, r24
    2fbc:	b9 f1       	breq	.+110    	; 0x302c <_ZN6SdFile4readEPvj+0x26e>
    2fbe:	82 01       	movw	r16, r4
    2fc0:	02 52       	subi	r16, 0x22	; 34
    2fc2:	1d 4f       	sbci	r17, 0xFD	; 253
    2fc4:	1c 83       	std	Y+4, r17	; 0x04
    2fc6:	0b 83       	std	Y+3, r16	; 0x03
    2fc8:	98 01       	movw	r18, r16
    2fca:	2a 0d       	add	r18, r10
    2fcc:	3b 1d       	adc	r19, r11
    2fce:	4b 81       	ldd	r20, Y+3	; 0x03
    2fd0:	5c 81       	ldd	r21, Y+4	; 0x04
    2fd2:	42 17       	cp	r20, r18
    2fd4:	53 07       	cpc	r21, r19
    2fd6:	71 f0       	breq	.+28     	; 0x2ff4 <_ZN6SdFile4readEPvj+0x236>
    2fd8:	fa 01       	movw	r30, r20
    2fda:	80 81       	ld	r24, Z
    2fdc:	f6 01       	movw	r30, r12
    2fde:	80 83       	st	Z, r24
    2fe0:	8a 01       	movw	r16, r20
    2fe2:	0f 5f       	subi	r16, 0xFF	; 255
    2fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe6:	1c 83       	std	Y+4, r17	; 0x04
    2fe8:	0b 83       	std	Y+3, r16	; 0x03
    2fea:	a6 01       	movw	r20, r12
    2fec:	4f 5f       	subi	r20, 0xFF	; 255
    2fee:	5f 4f       	sbci	r21, 0xFF	; 255
    2ff0:	6a 01       	movw	r12, r20
    2ff2:	ed cf       	rjmp	.-38     	; 0x2fce <_ZN6SdFile4readEPvj+0x210>
    2ff4:	f4 01       	movw	r30, r8
    2ff6:	82 85       	ldd	r24, Z+10	; 0x0a
    2ff8:	93 85       	ldd	r25, Z+11	; 0x0b
    2ffa:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ffc:	b5 85       	ldd	r27, Z+13	; 0x0d
    2ffe:	8a 0d       	add	r24, r10
    3000:	9b 1d       	adc	r25, r11
    3002:	a1 1d       	adc	r26, r1
    3004:	b1 1d       	adc	r27, r1
    3006:	82 87       	std	Z+10, r24	; 0x0a
    3008:	93 87       	std	Z+11, r25	; 0x0b
    300a:	a4 87       	std	Z+12, r26	; 0x0c
    300c:	b5 87       	std	Z+13, r27	; 0x0d
    300e:	6a 18       	sub	r6, r10
    3010:	7b 08       	sbc	r7, r11
    3012:	1e cf       	rjmp	.-452    	; 0x2e50 <_ZN6SdFile4readEPvj+0x92>
    3014:	89 81       	ldd	r24, Y+1	; 0x01
    3016:	9a 81       	ldd	r25, Y+2	; 0x02
    3018:	0b c0       	rjmp	.+22     	; 0x3030 <_ZN6SdFile4readEPvj+0x272>
    301a:	8f ef       	ldi	r24, 0xFF	; 255
    301c:	9f ef       	ldi	r25, 0xFF	; 255
    301e:	08 c0       	rjmp	.+16     	; 0x3030 <_ZN6SdFile4readEPvj+0x272>
    3020:	8f ef       	ldi	r24, 0xFF	; 255
    3022:	9f ef       	ldi	r25, 0xFF	; 255
    3024:	05 c0       	rjmp	.+10     	; 0x3030 <_ZN6SdFile4readEPvj+0x272>
    3026:	8f ef       	ldi	r24, 0xFF	; 255
    3028:	9f ef       	ldi	r25, 0xFF	; 255
    302a:	02 c0       	rjmp	.+4      	; 0x3030 <_ZN6SdFile4readEPvj+0x272>
    302c:	8f ef       	ldi	r24, 0xFF	; 255
    302e:	9f ef       	ldi	r25, 0xFF	; 255
    3030:	0f 90       	pop	r0
    3032:	0f 90       	pop	r0
    3034:	0f 90       	pop	r0
    3036:	0f 90       	pop	r0
    3038:	df 91       	pop	r29
    303a:	cf 91       	pop	r28
    303c:	1f 91       	pop	r17
    303e:	0f 91       	pop	r16
    3040:	ff 90       	pop	r15
    3042:	ef 90       	pop	r14
    3044:	df 90       	pop	r13
    3046:	cf 90       	pop	r12
    3048:	bf 90       	pop	r11
    304a:	af 90       	pop	r10
    304c:	9f 90       	pop	r9
    304e:	8f 90       	pop	r8
    3050:	7f 90       	pop	r7
    3052:	6f 90       	pop	r6
    3054:	5f 90       	pop	r5
    3056:	4f 90       	pop	r4
    3058:	3f 90       	pop	r3
    305a:	08 95       	ret

0000305c <_ZN6SdFile12readDirCacheEv>:
    305c:	ff 92       	push	r15
    305e:	0f 93       	push	r16
    3060:	1f 93       	push	r17
    3062:	cf 93       	push	r28
    3064:	df 93       	push	r29
    3066:	1f 92       	push	r1
    3068:	cd b7       	in	r28, 0x3d	; 61
    306a:	de b7       	in	r29, 0x3e	; 62
    306c:	fc 01       	movw	r30, r24
    306e:	25 81       	ldd	r18, Z+5	; 0x05
    3070:	22 30       	cpi	r18, 0x02	; 2
    3072:	98 f1       	brcs	.+102    	; 0x30da <_ZN6SdFile12readDirCacheEv+0x7e>
    3074:	8c 01       	movw	r16, r24
    3076:	42 85       	ldd	r20, Z+10	; 0x0a
    3078:	53 85       	ldd	r21, Z+11	; 0x0b
    307a:	64 85       	ldd	r22, Z+12	; 0x0c
    307c:	75 85       	ldd	r23, Z+13	; 0x0d
    307e:	68 94       	set
    3080:	14 f8       	bld	r1, 4
    3082:	76 95       	lsr	r23
    3084:	67 95       	ror	r22
    3086:	57 95       	ror	r21
    3088:	47 95       	ror	r20
    308a:	16 94       	lsr	r1
    308c:	d1 f7       	brne	.-12     	; 0x3082 <_ZN6SdFile12readDirCacheEv+0x26>
    308e:	f4 2f       	mov	r31, r20
    3090:	ff 70       	andi	r31, 0x0F	; 15
    3092:	ff 2e       	mov	r15, r31
    3094:	41 e0       	ldi	r20, 0x01	; 1
    3096:	50 e0       	ldi	r21, 0x00	; 0
    3098:	be 01       	movw	r22, r28
    309a:	6f 5f       	subi	r22, 0xFF	; 255
    309c:	7f 4f       	sbci	r23, 0xFF	; 255
    309e:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <_ZN6SdFile4readEPvj>
    30a2:	01 97       	sbiw	r24, 0x01	; 1
    30a4:	19 f4       	brne	.+6      	; 0x30ac <_ZN6SdFile12readDirCacheEv+0x50>
    30a6:	89 81       	ldd	r24, Y+1	; 0x01
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	02 c0       	rjmp	.+4      	; 0x30b0 <_ZN6SdFile12readDirCacheEv+0x54>
    30ac:	8f ef       	ldi	r24, 0xFF	; 255
    30ae:	9f ef       	ldi	r25, 0xFF	; 255
    30b0:	99 23       	and	r25, r25
    30b2:	b4 f0       	brlt	.+44     	; 0x30e0 <_ZN6SdFile12readDirCacheEv+0x84>
    30b4:	f8 01       	movw	r30, r16
    30b6:	82 85       	ldd	r24, Z+10	; 0x0a
    30b8:	93 85       	ldd	r25, Z+11	; 0x0b
    30ba:	a4 85       	ldd	r26, Z+12	; 0x0c
    30bc:	b5 85       	ldd	r27, Z+13	; 0x0d
    30be:	4f 96       	adiw	r24, 0x1f	; 31
    30c0:	a1 1d       	adc	r26, r1
    30c2:	b1 1d       	adc	r27, r1
    30c4:	82 87       	std	Z+10, r24	; 0x0a
    30c6:	93 87       	std	Z+11, r25	; 0x0b
    30c8:	a4 87       	std	Z+12, r26	; 0x0c
    30ca:	b5 87       	std	Z+13, r27	; 0x0d
    30cc:	f0 e2       	ldi	r31, 0x20	; 32
    30ce:	ff 9e       	mul	r15, r31
    30d0:	c0 01       	movw	r24, r0
    30d2:	11 24       	eor	r1, r1
    30d4:	82 52       	subi	r24, 0x22	; 34
    30d6:	9d 4f       	sbci	r25, 0xFD	; 253
    30d8:	05 c0       	rjmp	.+10     	; 0x30e4 <_ZN6SdFile12readDirCacheEv+0x88>
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	02 c0       	rjmp	.+4      	; 0x30e4 <_ZN6SdFile12readDirCacheEv+0x88>
    30e0:	80 e0       	ldi	r24, 0x00	; 0
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	0f 90       	pop	r0
    30e6:	df 91       	pop	r29
    30e8:	cf 91       	pop	r28
    30ea:	1f 91       	pop	r17
    30ec:	0f 91       	pop	r16
    30ee:	ff 90       	pop	r15
    30f0:	08 95       	ret

000030f2 <_ZN6SdFile7seekSetEm>:
    30f2:	8f 92       	push	r8
    30f4:	9f 92       	push	r9
    30f6:	af 92       	push	r10
    30f8:	bf 92       	push	r11
    30fa:	cf 92       	push	r12
    30fc:	df 92       	push	r13
    30fe:	ef 92       	push	r14
    3100:	ff 92       	push	r15
    3102:	0f 93       	push	r16
    3104:	1f 93       	push	r17
    3106:	cf 93       	push	r28
    3108:	df 93       	push	r29
    310a:	ec 01       	movw	r28, r24
    310c:	8d 81       	ldd	r24, Y+5	; 0x05
    310e:	88 23       	and	r24, r24
    3110:	59 f0       	breq	.+22     	; 0x3128 <_ZN6SdFile7seekSetEm+0x36>
    3112:	0b 89       	ldd	r16, Y+19	; 0x13
    3114:	1c 89       	ldd	r17, Y+20	; 0x14
    3116:	2d 89       	ldd	r18, Y+21	; 0x15
    3118:	3e 89       	ldd	r19, Y+22	; 0x16
    311a:	04 17       	cp	r16, r20
    311c:	15 07       	cpc	r17, r21
    311e:	26 07       	cpc	r18, r22
    3120:	37 07       	cpc	r19, r23
    3122:	20 f4       	brcc	.+8      	; 0x312c <_ZN6SdFile7seekSetEm+0x3a>
    3124:	91 e0       	ldi	r25, 0x01	; 1
    3126:	03 c0       	rjmp	.+6      	; 0x312e <_ZN6SdFile7seekSetEm+0x3c>
    3128:	91 e0       	ldi	r25, 0x01	; 1
    312a:	01 c0       	rjmp	.+2      	; 0x312e <_ZN6SdFile7seekSetEm+0x3c>
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	91 11       	cpse	r25, r1
    3130:	73 c0       	rjmp	.+230    	; 0x3218 <_ZN6SdFile7seekSetEm+0x126>
    3132:	82 30       	cpi	r24, 0x02	; 2
    3134:	31 f4       	brne	.+12     	; 0x3142 <_ZN6SdFile7seekSetEm+0x50>
    3136:	4a 87       	std	Y+10, r20	; 0x0a
    3138:	5b 87       	std	Y+11, r21	; 0x0b
    313a:	6c 87       	std	Y+12, r22	; 0x0c
    313c:	7d 87       	std	Y+13, r23	; 0x0d
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	6c c0       	rjmp	.+216    	; 0x321a <_ZN6SdFile7seekSetEm+0x128>
    3142:	41 15       	cp	r20, r1
    3144:	51 05       	cpc	r21, r1
    3146:	61 05       	cpc	r22, r1
    3148:	71 05       	cpc	r23, r1
    314a:	51 f4       	brne	.+20     	; 0x3160 <_ZN6SdFile7seekSetEm+0x6e>
    314c:	1e 82       	std	Y+6, r1	; 0x06
    314e:	1f 82       	std	Y+7, r1	; 0x07
    3150:	18 86       	std	Y+8, r1	; 0x08
    3152:	19 86       	std	Y+9, r1	; 0x09
    3154:	1a 86       	std	Y+10, r1	; 0x0a
    3156:	1b 86       	std	Y+11, r1	; 0x0b
    3158:	1c 86       	std	Y+12, r1	; 0x0c
    315a:	1d 86       	std	Y+13, r1	; 0x0d
    315c:	81 e0       	ldi	r24, 0x01	; 1
    315e:	5d c0       	rjmp	.+186    	; 0x321a <_ZN6SdFile7seekSetEm+0x128>
    3160:	4a 01       	movw	r8, r20
    3162:	5b 01       	movw	r10, r22
    3164:	0a 85       	ldd	r16, Y+10	; 0x0a
    3166:	1b 85       	ldd	r17, Y+11	; 0x0b
    3168:	2c 85       	ldd	r18, Y+12	; 0x0c
    316a:	3d 85       	ldd	r19, Y+13	; 0x0d
    316c:	68 01       	movw	r12, r16
    316e:	79 01       	movw	r14, r18
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	c8 1a       	sub	r12, r24
    3174:	d1 08       	sbc	r13, r1
    3176:	e1 08       	sbc	r14, r1
    3178:	f1 08       	sbc	r15, r1
    317a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    317c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    317e:	85 85       	ldd	r24, Z+13	; 0x0d
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	09 96       	adiw	r24, 0x09	; 9
    3184:	08 2e       	mov	r0, r24
    3186:	04 c0       	rjmp	.+8      	; 0x3190 <_ZN6SdFile7seekSetEm+0x9e>
    3188:	f6 94       	lsr	r15
    318a:	e7 94       	ror	r14
    318c:	d7 94       	ror	r13
    318e:	c7 94       	ror	r12
    3190:	0a 94       	dec	r0
    3192:	d2 f7       	brpl	.-12     	; 0x3188 <_ZN6SdFile7seekSetEm+0x96>
    3194:	41 50       	subi	r20, 0x01	; 1
    3196:	51 09       	sbc	r21, r1
    3198:	61 09       	sbc	r22, r1
    319a:	71 09       	sbc	r23, r1
    319c:	04 c0       	rjmp	.+8      	; 0x31a6 <_ZN6SdFile7seekSetEm+0xb4>
    319e:	76 95       	lsr	r23
    31a0:	67 95       	ror	r22
    31a2:	57 95       	ror	r21
    31a4:	47 95       	ror	r20
    31a6:	8a 95       	dec	r24
    31a8:	d2 f7       	brpl	.-12     	; 0x319e <_ZN6SdFile7seekSetEm+0xac>
    31aa:	4c 15       	cp	r20, r12
    31ac:	5d 05       	cpc	r21, r13
    31ae:	6e 05       	cpc	r22, r14
    31b0:	7f 05       	cpc	r23, r15
    31b2:	20 f0       	brcs	.+8      	; 0x31bc <_ZN6SdFile7seekSetEm+0xca>
    31b4:	01 2b       	or	r16, r17
    31b6:	02 2b       	or	r16, r18
    31b8:	03 2b       	or	r16, r19
    31ba:	49 f4       	brne	.+18     	; 0x31ce <_ZN6SdFile7seekSetEm+0xdc>
    31bc:	8f 89       	ldd	r24, Y+23	; 0x17
    31be:	98 8d       	ldd	r25, Y+24	; 0x18
    31c0:	a9 8d       	ldd	r26, Y+25	; 0x19
    31c2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    31c4:	8e 83       	std	Y+6, r24	; 0x06
    31c6:	9f 83       	std	Y+7, r25	; 0x07
    31c8:	a8 87       	std	Y+8, r26	; 0x08
    31ca:	b9 87       	std	Y+9, r27	; 0x09
    31cc:	04 c0       	rjmp	.+8      	; 0x31d6 <_ZN6SdFile7seekSetEm+0xe4>
    31ce:	4c 19       	sub	r20, r12
    31d0:	5d 09       	sbc	r21, r13
    31d2:	6e 09       	sbc	r22, r14
    31d4:	7f 09       	sbc	r23, r15
    31d6:	6a 01       	movw	r12, r20
    31d8:	7b 01       	movw	r14, r22
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	c8 1a       	sub	r12, r24
    31de:	d1 08       	sbc	r13, r1
    31e0:	e1 08       	sbc	r14, r1
    31e2:	f1 08       	sbc	r15, r1
    31e4:	45 2b       	or	r20, r21
    31e6:	46 2b       	or	r20, r22
    31e8:	47 2b       	or	r20, r23
    31ea:	81 f0       	breq	.+32     	; 0x320c <_ZN6SdFile7seekSetEm+0x11a>
    31ec:	4e 81       	ldd	r20, Y+6	; 0x06
    31ee:	5f 81       	ldd	r21, Y+7	; 0x07
    31f0:	68 85       	ldd	r22, Y+8	; 0x08
    31f2:	79 85       	ldd	r23, Y+9	; 0x09
    31f4:	9e 01       	movw	r18, r28
    31f6:	2a 5f       	subi	r18, 0xFA	; 250
    31f8:	3f 4f       	sbci	r19, 0xFF	; 255
    31fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31fe:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <_ZNK8SdVolume6fatGetEmPm>
    3202:	b7 01       	movw	r22, r14
    3204:	a6 01       	movw	r20, r12
    3206:	81 11       	cpse	r24, r1
    3208:	e6 cf       	rjmp	.-52     	; 0x31d6 <_ZN6SdFile7seekSetEm+0xe4>
    320a:	07 c0       	rjmp	.+14     	; 0x321a <_ZN6SdFile7seekSetEm+0x128>
    320c:	8a 86       	std	Y+10, r8	; 0x0a
    320e:	9b 86       	std	Y+11, r9	; 0x0b
    3210:	ac 86       	std	Y+12, r10	; 0x0c
    3212:	bd 86       	std	Y+13, r11	; 0x0d
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	01 c0       	rjmp	.+2      	; 0x321a <_ZN6SdFile7seekSetEm+0x128>
    3218:	80 e0       	ldi	r24, 0x00	; 0
    321a:	df 91       	pop	r29
    321c:	cf 91       	pop	r28
    321e:	1f 91       	pop	r17
    3220:	0f 91       	pop	r16
    3222:	ff 90       	pop	r15
    3224:	ef 90       	pop	r14
    3226:	df 90       	pop	r13
    3228:	cf 90       	pop	r12
    322a:	bf 90       	pop	r11
    322c:	af 90       	pop	r10
    322e:	9f 90       	pop	r9
    3230:	8f 90       	pop	r8
    3232:	08 95       	ret

00003234 <_ZN6SdFile4syncEh>:
    3234:	ff 92       	push	r15
    3236:	0f 93       	push	r16
    3238:	1f 93       	push	r17
    323a:	cf 93       	push	r28
    323c:	df 93       	push	r29
    323e:	fc 01       	movw	r30, r24
    3240:	85 81       	ldd	r24, Z+5	; 0x05
    3242:	88 23       	and	r24, r24
    3244:	09 f4       	brne	.+2      	; 0x3248 <_ZN6SdFile4syncEh+0x14>
    3246:	43 c0       	rjmp	.+134    	; 0x32ce <_ZN6SdFile4syncEh+0x9a>
    3248:	f6 2e       	mov	r15, r22
    324a:	ef 01       	movw	r28, r30
    324c:	84 81       	ldd	r24, Z+4	; 0x04
    324e:	88 23       	and	r24, r24
    3250:	a4 f5       	brge	.+104    	; 0x32ba <_ZN6SdFile4syncEh+0x86>
    3252:	61 e0       	ldi	r22, 0x01	; 1
    3254:	cf 01       	movw	r24, r30
    3256:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN6SdFile13cacheDirEntryEh>
    325a:	8c 01       	movw	r16, r24
    325c:	89 2b       	or	r24, r25
    325e:	b1 f1       	breq	.+108    	; 0x32cc <_ZN6SdFile4syncEh+0x98>
    3260:	8d 81       	ldd	r24, Y+5	; 0x05
    3262:	82 30       	cpi	r24, 0x02	; 2
    3264:	48 f4       	brcc	.+18     	; 0x3278 <_ZN6SdFile4syncEh+0x44>
    3266:	8b 89       	ldd	r24, Y+19	; 0x13
    3268:	9c 89       	ldd	r25, Y+20	; 0x14
    326a:	ad 89       	ldd	r26, Y+21	; 0x15
    326c:	be 89       	ldd	r27, Y+22	; 0x16
    326e:	f8 01       	movw	r30, r16
    3270:	84 8f       	std	Z+28, r24	; 0x1c
    3272:	95 8f       	std	Z+29, r25	; 0x1d
    3274:	a6 8f       	std	Z+30, r26	; 0x1e
    3276:	b7 8f       	std	Z+31, r27	; 0x1f
    3278:	8f 89       	ldd	r24, Y+23	; 0x17
    327a:	98 8d       	ldd	r25, Y+24	; 0x18
    327c:	a9 8d       	ldd	r26, Y+25	; 0x19
    327e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3280:	f8 01       	movw	r30, r16
    3282:	93 8f       	std	Z+27, r25	; 0x1b
    3284:	82 8f       	std	Z+26, r24	; 0x1a
    3286:	8f 89       	ldd	r24, Y+23	; 0x17
    3288:	98 8d       	ldd	r25, Y+24	; 0x18
    328a:	a9 8d       	ldd	r26, Y+25	; 0x19
    328c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    328e:	b5 8b       	std	Z+21, r27	; 0x15
    3290:	a4 8b       	std	Z+20, r26	; 0x14
    3292:	e0 91 d5 02 	lds	r30, 0x02D5	; 0x8002d5 <_ZN6SdFile9dateTime_E>
    3296:	f0 91 d6 02 	lds	r31, 0x02D6	; 0x8002d6 <_ZN6SdFile9dateTime_E+0x1>
    329a:	30 97       	sbiw	r30, 0x00	; 0
    329c:	59 f0       	breq	.+22     	; 0x32b4 <_ZN6SdFile4syncEh+0x80>
    329e:	b8 01       	movw	r22, r16
    32a0:	6a 5e       	subi	r22, 0xEA	; 234
    32a2:	7f 4f       	sbci	r23, 0xFF	; 255
    32a4:	c8 01       	movw	r24, r16
    32a6:	48 96       	adiw	r24, 0x18	; 24
    32a8:	09 95       	icall
    32aa:	f8 01       	movw	r30, r16
    32ac:	80 8d       	ldd	r24, Z+24	; 0x18
    32ae:	91 8d       	ldd	r25, Z+25	; 0x19
    32b0:	93 8b       	std	Z+19, r25	; 0x13
    32b2:	82 8b       	std	Z+18, r24	; 0x12
    32b4:	8c 81       	ldd	r24, Y+4	; 0x04
    32b6:	8f 77       	andi	r24, 0x7F	; 127
    32b8:	8c 83       	std	Y+4, r24	; 0x04
    32ba:	f1 10       	cpse	r15, r1
    32bc:	03 c0       	rjmp	.+6      	; 0x32c4 <_ZN6SdFile4syncEh+0x90>
    32be:	8c 81       	ldd	r24, Y+4	; 0x04
    32c0:	8f 7e       	andi	r24, 0xEF	; 239
    32c2:	8c 83       	std	Y+4, r24	; 0x04
    32c4:	8f 2d       	mov	r24, r15
    32c6:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <_ZN8SdVolume10cacheFlushEh>
    32ca:	01 c0       	rjmp	.+2      	; 0x32ce <_ZN6SdFile4syncEh+0x9a>
    32cc:	80 e0       	ldi	r24, 0x00	; 0
    32ce:	df 91       	pop	r29
    32d0:	cf 91       	pop	r28
    32d2:	1f 91       	pop	r17
    32d4:	0f 91       	pop	r16
    32d6:	ff 90       	pop	r15
    32d8:	08 95       	ret

000032da <_ZN6SdFile5closeEv>:
    32da:	cf 93       	push	r28
    32dc:	df 93       	push	r29
    32de:	ec 01       	movw	r28, r24
    32e0:	61 e0       	ldi	r22, 0x01	; 1
    32e2:	0e 94 1a 19 	call	0x3234	; 0x3234 <_ZN6SdFile4syncEh>
    32e6:	88 23       	and	r24, r24
    32e8:	11 f0       	breq	.+4      	; 0x32ee <_ZN6SdFile5closeEv+0x14>
    32ea:	1d 82       	std	Y+5, r1	; 0x05
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	df 91       	pop	r29
    32f0:	cf 91       	pop	r28
    32f2:	08 95       	ret

000032f4 <_ZN6SdFile17availableForWriteEv>:
    32f4:	cf 93       	push	r28
    32f6:	df 93       	push	r29
    32f8:	fc 01       	movw	r30, r24
    32fa:	25 81       	ldd	r18, Z+5	; 0x05
    32fc:	21 30       	cpi	r18, 0x01	; 1
    32fe:	29 f4       	brne	.+10     	; 0x330a <_ZN6SdFile17availableForWriteEv+0x16>
    3300:	24 81       	ldd	r18, Z+4	; 0x04
    3302:	21 fd       	sbrc	r18, 1
    3304:	04 c0       	rjmp	.+8      	; 0x330e <_ZN6SdFile17availableForWriteEv+0x1a>
    3306:	21 e0       	ldi	r18, 0x01	; 1
    3308:	03 c0       	rjmp	.+6      	; 0x3310 <_ZN6SdFile17availableForWriteEv+0x1c>
    330a:	21 e0       	ldi	r18, 0x01	; 1
    330c:	01 c0       	rjmp	.+2      	; 0x3310 <_ZN6SdFile17availableForWriteEv+0x1c>
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	21 11       	cpse	r18, r1
    3312:	4a c0       	rjmp	.+148    	; 0x33a8 <_ZN6SdFile17availableForWriteEv+0xb4>
    3314:	ec 01       	movw	r28, r24
    3316:	8c 81       	ldd	r24, Y+4	; 0x04
    3318:	82 ff       	sbrs	r24, 2
    331a:	12 c0       	rjmp	.+36     	; 0x3340 <_ZN6SdFile17availableForWriteEv+0x4c>
    331c:	8a 85       	ldd	r24, Y+10	; 0x0a
    331e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3320:	ac 85       	ldd	r26, Y+12	; 0x0c
    3322:	bd 85       	ldd	r27, Y+13	; 0x0d
    3324:	4b 89       	ldd	r20, Y+19	; 0x13
    3326:	5c 89       	ldd	r21, Y+20	; 0x14
    3328:	6d 89       	ldd	r22, Y+21	; 0x15
    332a:	7e 89       	ldd	r23, Y+22	; 0x16
    332c:	84 17       	cp	r24, r20
    332e:	95 07       	cpc	r25, r21
    3330:	a6 07       	cpc	r26, r22
    3332:	b7 07       	cpc	r27, r23
    3334:	29 f0       	breq	.+10     	; 0x3340 <_ZN6SdFile17availableForWriteEv+0x4c>
    3336:	ce 01       	movw	r24, r28
    3338:	0e 94 79 18 	call	0x30f2	; 0x30f2 <_ZN6SdFile7seekSetEm>
    333c:	88 23       	and	r24, r24
    333e:	b9 f1       	breq	.+110    	; 0x33ae <_ZN6SdFile17availableForWriteEv+0xba>
    3340:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <_ZN8SdVolume7sdCard_E>
    3344:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <_ZN8SdVolume7sdCard_E+0x1>
    3348:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <_ZN7Sd2Card6isBusyEv>
    334c:	81 11       	cpse	r24, r1
    334e:	32 c0       	rjmp	.+100    	; 0x33b4 <_ZN6SdFile17availableForWriteEv+0xc0>
    3350:	8c 81       	ldd	r24, Y+4	; 0x04
    3352:	85 ff       	sbrs	r24, 5
    3354:	0a c0       	rjmp	.+20     	; 0x336a <_ZN6SdFile17availableForWriteEv+0x76>
    3356:	60 e0       	ldi	r22, 0x00	; 0
    3358:	ce 01       	movw	r24, r28
    335a:	0e 94 1a 19 	call	0x3234	; 0x3234 <_ZN6SdFile4syncEh>
    335e:	8c 81       	ldd	r24, Y+4	; 0x04
    3360:	8f 7d       	andi	r24, 0xDF	; 223
    3362:	8c 83       	std	Y+4, r24	; 0x04
    3364:	80 e0       	ldi	r24, 0x00	; 0
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	27 c0       	rjmp	.+78     	; 0x33b8 <_ZN6SdFile17availableForWriteEv+0xc4>
    336a:	40 91 d7 02 	lds	r20, 0x02D7	; 0x8002d7 <_ZN8SdVolume17cacheMirrorBlock_E>
    336e:	50 91 d8 02 	lds	r21, 0x02D8	; 0x8002d8 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    3372:	60 91 d9 02 	lds	r22, 0x02D9	; 0x8002d9 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    3376:	70 91 da 02 	lds	r23, 0x02DA	; 0x8002da <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    337a:	45 2b       	or	r20, r21
    337c:	46 2b       	or	r20, r22
    337e:	47 2b       	or	r20, r23
    3380:	31 f0       	breq	.+12     	; 0x338e <_ZN6SdFile17availableForWriteEv+0x9a>
    3382:	80 e0       	ldi	r24, 0x00	; 0
    3384:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <_ZN8SdVolume21cacheMirrorBlockFlushEh>
    3388:	80 e0       	ldi	r24, 0x00	; 0
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	15 c0       	rjmp	.+42     	; 0x33b8 <_ZN6SdFile17availableForWriteEv+0xc4>
    338e:	80 61       	ori	r24, 0x10	; 16
    3390:	8c 83       	std	Y+4, r24	; 0x04
    3392:	8a 85       	ldd	r24, Y+10	; 0x0a
    3394:	9b 85       	ldd	r25, Y+11	; 0x0b
    3396:	ac 85       	ldd	r26, Y+12	; 0x0c
    3398:	bd 85       	ldd	r27, Y+13	; 0x0d
    339a:	9c 01       	movw	r18, r24
    339c:	31 70       	andi	r19, 0x01	; 1
    339e:	80 e0       	ldi	r24, 0x00	; 0
    33a0:	92 e0       	ldi	r25, 0x02	; 2
    33a2:	82 1b       	sub	r24, r18
    33a4:	93 0b       	sbc	r25, r19
    33a6:	08 c0       	rjmp	.+16     	; 0x33b8 <_ZN6SdFile17availableForWriteEv+0xc4>
    33a8:	80 e0       	ldi	r24, 0x00	; 0
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	05 c0       	rjmp	.+10     	; 0x33b8 <_ZN6SdFile17availableForWriteEv+0xc4>
    33ae:	80 e0       	ldi	r24, 0x00	; 0
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	02 c0       	rjmp	.+4      	; 0x33b8 <_ZN6SdFile17availableForWriteEv+0xc4>
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	df 91       	pop	r29
    33ba:	cf 91       	pop	r28
    33bc:	08 95       	ret

000033be <_ZN6SdFile8truncateEm>:
    33be:	4f 92       	push	r4
    33c0:	5f 92       	push	r5
    33c2:	6f 92       	push	r6
    33c4:	7f 92       	push	r7
    33c6:	8f 92       	push	r8
    33c8:	9f 92       	push	r9
    33ca:	af 92       	push	r10
    33cc:	bf 92       	push	r11
    33ce:	ef 92       	push	r14
    33d0:	ff 92       	push	r15
    33d2:	0f 93       	push	r16
    33d4:	1f 93       	push	r17
    33d6:	cf 93       	push	r28
    33d8:	df 93       	push	r29
    33da:	00 d0       	rcall	.+0      	; 0x33dc <_ZN6SdFile8truncateEm+0x1e>
    33dc:	00 d0       	rcall	.+0      	; 0x33de <_ZN6SdFile8truncateEm+0x20>
    33de:	cd b7       	in	r28, 0x3d	; 61
    33e0:	de b7       	in	r29, 0x3e	; 62
    33e2:	fc 01       	movw	r30, r24
    33e4:	85 81       	ldd	r24, Z+5	; 0x05
    33e6:	81 30       	cpi	r24, 0x01	; 1
    33e8:	29 f4       	brne	.+10     	; 0x33f4 <_ZN6SdFile8truncateEm+0x36>
    33ea:	84 81       	ldd	r24, Z+4	; 0x04
    33ec:	81 fd       	sbrc	r24, 1
    33ee:	04 c0       	rjmp	.+8      	; 0x33f8 <_ZN6SdFile8truncateEm+0x3a>
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	03 c0       	rjmp	.+6      	; 0x33fa <_ZN6SdFile8truncateEm+0x3c>
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	01 c0       	rjmp	.+2      	; 0x33fa <_ZN6SdFile8truncateEm+0x3c>
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	81 11       	cpse	r24, r1
    33fc:	99 c0       	rjmp	.+306    	; 0x3530 <_ZN6SdFile8truncateEm+0x172>
    33fe:	83 89       	ldd	r24, Z+19	; 0x13
    3400:	94 89       	ldd	r25, Z+20	; 0x14
    3402:	a5 89       	ldd	r26, Z+21	; 0x15
    3404:	b6 89       	ldd	r27, Z+22	; 0x16
    3406:	84 17       	cp	r24, r20
    3408:	95 07       	cpc	r25, r21
    340a:	a6 07       	cpc	r26, r22
    340c:	b7 07       	cpc	r27, r23
    340e:	08 f4       	brcc	.+2      	; 0x3412 <_ZN6SdFile8truncateEm+0x54>
    3410:	91 c0       	rjmp	.+290    	; 0x3534 <_ZN6SdFile8truncateEm+0x176>
    3412:	89 2b       	or	r24, r25
    3414:	8a 2b       	or	r24, r26
    3416:	8b 2b       	or	r24, r27
    3418:	09 f4       	brne	.+2      	; 0x341c <_ZN6SdFile8truncateEm+0x5e>
    341a:	8e c0       	rjmp	.+284    	; 0x3538 <_ZN6SdFile8truncateEm+0x17a>
    341c:	82 84       	ldd	r8, Z+10	; 0x0a
    341e:	93 84       	ldd	r9, Z+11	; 0x0b
    3420:	a4 84       	ldd	r10, Z+12	; 0x0c
    3422:	b5 84       	ldd	r11, Z+13	; 0x0d
    3424:	48 15       	cp	r20, r8
    3426:	59 05       	cpc	r21, r9
    3428:	6a 05       	cpc	r22, r10
    342a:	7b 05       	cpc	r23, r11
    342c:	10 f4       	brcc	.+4      	; 0x3432 <_ZN6SdFile8truncateEm+0x74>
    342e:	4a 01       	movw	r8, r20
    3430:	5b 01       	movw	r10, r22
    3432:	2a 01       	movw	r4, r20
    3434:	3b 01       	movw	r6, r22
    3436:	7f 01       	movw	r14, r30
    3438:	cf 01       	movw	r24, r30
    343a:	0e 94 79 18 	call	0x30f2	; 0x30f2 <_ZN6SdFile7seekSetEm>
    343e:	88 23       	and	r24, r24
    3440:	09 f4       	brne	.+2      	; 0x3444 <_ZN6SdFile8truncateEm+0x86>
    3442:	7b c0       	rjmp	.+246    	; 0x353a <_ZN6SdFile8truncateEm+0x17c>
    3444:	41 14       	cp	r4, r1
    3446:	51 04       	cpc	r5, r1
    3448:	61 04       	cpc	r6, r1
    344a:	71 04       	cpc	r7, r1
    344c:	b1 f4       	brne	.+44     	; 0x347a <_ZN6SdFile8truncateEm+0xbc>
    344e:	d7 01       	movw	r26, r14
    3450:	57 96       	adiw	r26, 0x17	; 23
    3452:	4d 91       	ld	r20, X+
    3454:	5d 91       	ld	r21, X+
    3456:	6d 91       	ld	r22, X+
    3458:	7c 91       	ld	r23, X
    345a:	5a 97       	sbiw	r26, 0x1a	; 26
    345c:	5b 96       	adiw	r26, 0x1b	; 27
    345e:	8d 91       	ld	r24, X+
    3460:	9c 91       	ld	r25, X
    3462:	5c 97       	sbiw	r26, 0x1c	; 28
    3464:	0e 94 a2 21 	call	0x4344	; 0x4344 <_ZN8SdVolume9freeChainEm>
    3468:	88 23       	and	r24, r24
    346a:	09 f4       	brne	.+2      	; 0x346e <_ZN6SdFile8truncateEm+0xb0>
    346c:	66 c0       	rjmp	.+204    	; 0x353a <_ZN6SdFile8truncateEm+0x17c>
    346e:	f7 01       	movw	r30, r14
    3470:	17 8a       	std	Z+23, r1	; 0x17
    3472:	10 8e       	std	Z+24, r1	; 0x18
    3474:	11 8e       	std	Z+25, r1	; 0x19
    3476:	12 8e       	std	Z+26, r1	; 0x1a
    3478:	42 c0       	rjmp	.+132    	; 0x34fe <_ZN6SdFile8truncateEm+0x140>
    347a:	d7 01       	movw	r26, r14
    347c:	16 96       	adiw	r26, 0x06	; 6
    347e:	4d 91       	ld	r20, X+
    3480:	5d 91       	ld	r21, X+
    3482:	6d 91       	ld	r22, X+
    3484:	7c 91       	ld	r23, X
    3486:	19 97       	sbiw	r26, 0x09	; 9
    3488:	9e 01       	movw	r18, r28
    348a:	2f 5f       	subi	r18, 0xFF	; 255
    348c:	3f 4f       	sbci	r19, 0xFF	; 255
    348e:	5b 96       	adiw	r26, 0x1b	; 27
    3490:	8d 91       	ld	r24, X+
    3492:	9c 91       	ld	r25, X
    3494:	5c 97       	sbiw	r26, 0x1c	; 28
    3496:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <_ZNK8SdVolume6fatGetEmPm>
    349a:	88 23       	and	r24, r24
    349c:	71 f1       	breq	.+92     	; 0x34fa <_ZN6SdFile8truncateEm+0x13c>
    349e:	49 81       	ldd	r20, Y+1	; 0x01
    34a0:	5a 81       	ldd	r21, Y+2	; 0x02
    34a2:	6b 81       	ldd	r22, Y+3	; 0x03
    34a4:	7c 81       	ldd	r23, Y+4	; 0x04
    34a6:	d7 01       	movw	r26, r14
    34a8:	5b 96       	adiw	r26, 0x1b	; 27
    34aa:	ed 91       	ld	r30, X+
    34ac:	fc 91       	ld	r31, X
    34ae:	5c 97       	sbiw	r26, 0x1c	; 28
    34b0:	87 89       	ldd	r24, Z+23	; 0x17
    34b2:	80 31       	cpi	r24, 0x10	; 16
    34b4:	29 f4       	brne	.+10     	; 0x34c0 <_ZN6SdFile8truncateEm+0x102>
    34b6:	88 ef       	ldi	r24, 0xF8	; 248
    34b8:	9f ef       	ldi	r25, 0xFF	; 255
    34ba:	a0 e0       	ldi	r26, 0x00	; 0
    34bc:	b0 e0       	ldi	r27, 0x00	; 0
    34be:	04 c0       	rjmp	.+8      	; 0x34c8 <_ZN6SdFile8truncateEm+0x10a>
    34c0:	88 ef       	ldi	r24, 0xF8	; 248
    34c2:	9f ef       	ldi	r25, 0xFF	; 255
    34c4:	af ef       	ldi	r26, 0xFF	; 255
    34c6:	bf e0       	ldi	r27, 0x0F	; 15
    34c8:	48 17       	cp	r20, r24
    34ca:	59 07       	cpc	r21, r25
    34cc:	6a 07       	cpc	r22, r26
    34ce:	7b 07       	cpc	r23, r27
    34d0:	b0 f4       	brcc	.+44     	; 0x34fe <_ZN6SdFile8truncateEm+0x140>
    34d2:	cf 01       	movw	r24, r30
    34d4:	0e 94 a2 21 	call	0x4344	; 0x4344 <_ZN8SdVolume9freeChainEm>
    34d8:	88 23       	and	r24, r24
    34da:	79 f0       	breq	.+30     	; 0x34fa <_ZN6SdFile8truncateEm+0x13c>
    34dc:	f7 01       	movw	r30, r14
    34de:	46 81       	ldd	r20, Z+6	; 0x06
    34e0:	57 81       	ldd	r21, Z+7	; 0x07
    34e2:	60 85       	ldd	r22, Z+8	; 0x08
    34e4:	71 85       	ldd	r23, Z+9	; 0x09
    34e6:	0f ef       	ldi	r16, 0xFF	; 255
    34e8:	1f ef       	ldi	r17, 0xFF	; 255
    34ea:	2f ef       	ldi	r18, 0xFF	; 255
    34ec:	3f e0       	ldi	r19, 0x0F	; 15
    34ee:	83 8d       	ldd	r24, Z+27	; 0x1b
    34f0:	94 8d       	ldd	r25, Z+28	; 0x1c
    34f2:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <_ZN8SdVolume6fatPutEmm>
    34f6:	81 11       	cpse	r24, r1
    34f8:	02 c0       	rjmp	.+4      	; 0x34fe <_ZN6SdFile8truncateEm+0x140>
    34fa:	80 e0       	ldi	r24, 0x00	; 0
    34fc:	1e c0       	rjmp	.+60     	; 0x353a <_ZN6SdFile8truncateEm+0x17c>
    34fe:	d7 01       	movw	r26, r14
    3500:	53 96       	adiw	r26, 0x13	; 19
    3502:	4d 92       	st	X+, r4
    3504:	5d 92       	st	X+, r5
    3506:	6d 92       	st	X+, r6
    3508:	7c 92       	st	X, r7
    350a:	56 97       	sbiw	r26, 0x16	; 22
    350c:	14 96       	adiw	r26, 0x04	; 4
    350e:	8c 91       	ld	r24, X
    3510:	14 97       	sbiw	r26, 0x04	; 4
    3512:	80 68       	ori	r24, 0x80	; 128
    3514:	14 96       	adiw	r26, 0x04	; 4
    3516:	8c 93       	st	X, r24
    3518:	61 e0       	ldi	r22, 0x01	; 1
    351a:	c7 01       	movw	r24, r14
    351c:	0e 94 1a 19 	call	0x3234	; 0x3234 <_ZN6SdFile4syncEh>
    3520:	88 23       	and	r24, r24
    3522:	59 f0       	breq	.+22     	; 0x353a <_ZN6SdFile8truncateEm+0x17c>
    3524:	b5 01       	movw	r22, r10
    3526:	a4 01       	movw	r20, r8
    3528:	c7 01       	movw	r24, r14
    352a:	0e 94 79 18 	call	0x30f2	; 0x30f2 <_ZN6SdFile7seekSetEm>
    352e:	05 c0       	rjmp	.+10     	; 0x353a <_ZN6SdFile8truncateEm+0x17c>
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	03 c0       	rjmp	.+6      	; 0x353a <_ZN6SdFile8truncateEm+0x17c>
    3534:	80 e0       	ldi	r24, 0x00	; 0
    3536:	01 c0       	rjmp	.+2      	; 0x353a <_ZN6SdFile8truncateEm+0x17c>
    3538:	81 e0       	ldi	r24, 0x01	; 1
    353a:	0f 90       	pop	r0
    353c:	0f 90       	pop	r0
    353e:	0f 90       	pop	r0
    3540:	0f 90       	pop	r0
    3542:	df 91       	pop	r29
    3544:	cf 91       	pop	r28
    3546:	1f 91       	pop	r17
    3548:	0f 91       	pop	r16
    354a:	ff 90       	pop	r15
    354c:	ef 90       	pop	r14
    354e:	bf 90       	pop	r11
    3550:	af 90       	pop	r10
    3552:	9f 90       	pop	r9
    3554:	8f 90       	pop	r8
    3556:	7f 90       	pop	r7
    3558:	6f 90       	pop	r6
    355a:	5f 90       	pop	r5
    355c:	4f 90       	pop	r4
    355e:	08 95       	ret

00003560 <_ZN6SdFile15openCachedEntryEhh>:
    3560:	1f 93       	push	r17
    3562:	cf 93       	push	r28
    3564:	df 93       	push	r29
    3566:	ec 01       	movw	r28, r24
    3568:	80 e2       	ldi	r24, 0x20	; 32
    356a:	68 9f       	mul	r22, r24
    356c:	f0 01       	movw	r30, r0
    356e:	11 24       	eor	r1, r1
    3570:	e2 52       	subi	r30, 0x22	; 34
    3572:	fd 4f       	sbci	r31, 0xFD	; 253
    3574:	93 85       	ldd	r25, Z+11	; 0x0b
    3576:	91 71       	andi	r25, 0x11	; 17
    3578:	21 f0       	breq	.+8      	; 0x3582 <_ZN6SdFile15openCachedEntryEhh+0x22>
    357a:	84 2f       	mov	r24, r20
    357c:	82 74       	andi	r24, 0x42	; 66
    357e:	09 f0       	breq	.+2      	; 0x3582 <_ZN6SdFile15openCachedEntryEhh+0x22>
    3580:	54 c0       	rjmp	.+168    	; 0x362a <_ZN6SdFile15openCachedEntryEhh+0xca>
    3582:	14 2f       	mov	r17, r20
    3584:	6a 8b       	std	Y+18, r22	; 0x12
    3586:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    358a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    358e:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3592:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3596:	8e 87       	std	Y+14, r24	; 0x0e
    3598:	9f 87       	std	Y+15, r25	; 0x0f
    359a:	a8 8b       	std	Y+16, r26	; 0x10
    359c:	b9 8b       	std	Y+17, r27	; 0x11
    359e:	84 89       	ldd	r24, Z+20	; 0x14
    35a0:	95 89       	ldd	r25, Z+21	; 0x15
    35a2:	a0 e0       	ldi	r26, 0x00	; 0
    35a4:	b0 e0       	ldi	r27, 0x00	; 0
    35a6:	dc 01       	movw	r26, r24
    35a8:	99 27       	eor	r25, r25
    35aa:	88 27       	eor	r24, r24
    35ac:	8f 8b       	std	Y+23, r24	; 0x17
    35ae:	98 8f       	std	Y+24, r25	; 0x18
    35b0:	a9 8f       	std	Y+25, r26	; 0x19
    35b2:	ba 8f       	std	Y+26, r27	; 0x1a
    35b4:	42 8d       	ldd	r20, Z+26	; 0x1a
    35b6:	53 8d       	ldd	r21, Z+27	; 0x1b
    35b8:	60 e0       	ldi	r22, 0x00	; 0
    35ba:	70 e0       	ldi	r23, 0x00	; 0
    35bc:	48 2b       	or	r20, r24
    35be:	59 2b       	or	r21, r25
    35c0:	6a 2b       	or	r22, r26
    35c2:	7b 2b       	or	r23, r27
    35c4:	4f 8b       	std	Y+23, r20	; 0x17
    35c6:	58 8f       	std	Y+24, r21	; 0x18
    35c8:	69 8f       	std	Y+25, r22	; 0x19
    35ca:	7a 8f       	std	Y+26, r23	; 0x1a
    35cc:	23 85       	ldd	r18, Z+11	; 0x0b
    35ce:	28 71       	andi	r18, 0x18	; 24
    35d0:	59 f4       	brne	.+22     	; 0x35e8 <_ZN6SdFile15openCachedEntryEhh+0x88>
    35d2:	84 8d       	ldd	r24, Z+28	; 0x1c
    35d4:	95 8d       	ldd	r25, Z+29	; 0x1d
    35d6:	a6 8d       	ldd	r26, Z+30	; 0x1e
    35d8:	b7 8d       	ldd	r27, Z+31	; 0x1f
    35da:	8b 8b       	std	Y+19, r24	; 0x13
    35dc:	9c 8b       	std	Y+20, r25	; 0x14
    35de:	ad 8b       	std	Y+21, r26	; 0x15
    35e0:	be 8b       	std	Y+22, r27	; 0x16
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	8d 83       	std	Y+5, r24	; 0x05
    35e6:	0d c0       	rjmp	.+26     	; 0x3602 <_ZN6SdFile15openCachedEntryEhh+0xa2>
    35e8:	20 31       	cpi	r18, 0x10	; 16
    35ea:	09 f5       	brne	.+66     	; 0x362e <_ZN6SdFile15openCachedEntryEhh+0xce>
    35ec:	9e 01       	movw	r18, r28
    35ee:	2d 5e       	subi	r18, 0xED	; 237
    35f0:	3f 4f       	sbci	r19, 0xFF	; 255
    35f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35f6:	0e 94 65 1f 	call	0x3eca	; 0x3eca <_ZNK8SdVolume9chainSizeEmPm>
    35fa:	88 23       	and	r24, r24
    35fc:	d9 f0       	breq	.+54     	; 0x3634 <_ZN6SdFile15openCachedEntryEhh+0xd4>
    35fe:	84 e0       	ldi	r24, 0x04	; 4
    3600:	8d 83       	std	Y+5, r24	; 0x05
    3602:	81 2f       	mov	r24, r17
    3604:	8f 70       	andi	r24, 0x0F	; 15
    3606:	8c 83       	std	Y+4, r24	; 0x04
    3608:	1e 82       	std	Y+6, r1	; 0x06
    360a:	1f 82       	std	Y+7, r1	; 0x07
    360c:	18 86       	std	Y+8, r1	; 0x08
    360e:	19 86       	std	Y+9, r1	; 0x09
    3610:	1a 86       	std	Y+10, r1	; 0x0a
    3612:	1b 86       	std	Y+11, r1	; 0x0b
    3614:	1c 86       	std	Y+12, r1	; 0x0c
    3616:	1d 86       	std	Y+13, r1	; 0x0d
    3618:	16 ff       	sbrs	r17, 6
    361a:	0b c0       	rjmp	.+22     	; 0x3632 <_ZN6SdFile15openCachedEntryEhh+0xd2>
    361c:	40 e0       	ldi	r20, 0x00	; 0
    361e:	50 e0       	ldi	r21, 0x00	; 0
    3620:	ba 01       	movw	r22, r20
    3622:	ce 01       	movw	r24, r28
    3624:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN6SdFile8truncateEm>
    3628:	05 c0       	rjmp	.+10     	; 0x3634 <_ZN6SdFile15openCachedEntryEhh+0xd4>
    362a:	80 e0       	ldi	r24, 0x00	; 0
    362c:	03 c0       	rjmp	.+6      	; 0x3634 <_ZN6SdFile15openCachedEntryEhh+0xd4>
    362e:	80 e0       	ldi	r24, 0x00	; 0
    3630:	01 c0       	rjmp	.+2      	; 0x3634 <_ZN6SdFile15openCachedEntryEhh+0xd4>
    3632:	81 e0       	ldi	r24, 0x01	; 1
    3634:	df 91       	pop	r29
    3636:	cf 91       	pop	r28
    3638:	1f 91       	pop	r17
    363a:	08 95       	ret

0000363c <_ZN6SdFile4openEPS_PKch>:
    363c:	af 92       	push	r10
    363e:	bf 92       	push	r11
    3640:	cf 92       	push	r12
    3642:	df 92       	push	r13
    3644:	ef 92       	push	r14
    3646:	ff 92       	push	r15
    3648:	0f 93       	push	r16
    364a:	1f 93       	push	r17
    364c:	cf 93       	push	r28
    364e:	df 93       	push	r29
    3650:	cd b7       	in	r28, 0x3d	; 61
    3652:	de b7       	in	r29, 0x3e	; 62
    3654:	2b 97       	sbiw	r28, 0x0b	; 11
    3656:	0f b6       	in	r0, 0x3f	; 63
    3658:	f8 94       	cli
    365a:	de bf       	out	0x3e, r29	; 62
    365c:	0f be       	out	0x3f, r0	; 63
    365e:	cd bf       	out	0x3d, r28	; 61
    3660:	fc 01       	movw	r30, r24
    3662:	c5 80       	ldd	r12, Z+5	; 0x05
    3664:	c1 10       	cpse	r12, r1
    3666:	ca c0       	rjmp	.+404    	; 0x37fc <_ZN6SdFile4openEPS_PKch+0x1c0>
    3668:	a2 2e       	mov	r10, r18
    366a:	8b 01       	movw	r16, r22
    366c:	7c 01       	movw	r14, r24
    366e:	be 01       	movw	r22, r28
    3670:	6f 5f       	subi	r22, 0xFF	; 255
    3672:	7f 4f       	sbci	r23, 0xFF	; 255
    3674:	ca 01       	movw	r24, r20
    3676:	0e 94 33 16 	call	0x2c66	; 0x2c66 <_ZN6SdFile10make83NameEPKcPh>
    367a:	88 23       	and	r24, r24
    367c:	09 f4       	brne	.+2      	; 0x3680 <_ZN6SdFile4openEPS_PKch+0x44>
    367e:	c0 c0       	rjmp	.+384    	; 0x3800 <_ZN6SdFile4openEPS_PKch+0x1c4>
    3680:	f8 01       	movw	r30, r16
    3682:	83 8d       	ldd	r24, Z+27	; 0x1b
    3684:	94 8d       	ldd	r25, Z+28	; 0x1c
    3686:	f7 01       	movw	r30, r14
    3688:	94 8f       	std	Z+28, r25	; 0x1c
    368a:	83 8f       	std	Z+27, r24	; 0x1b
    368c:	f8 01       	movw	r30, r16
    368e:	16 82       	std	Z+6, r1	; 0x06
    3690:	17 82       	std	Z+7, r1	; 0x07
    3692:	10 86       	std	Z+8, r1	; 0x08
    3694:	11 86       	std	Z+9, r1	; 0x09
    3696:	12 86       	std	Z+10, r1	; 0x0a
    3698:	13 86       	std	Z+11, r1	; 0x0b
    369a:	14 86       	std	Z+12, r1	; 0x0c
    369c:	15 86       	std	Z+13, r1	; 0x0d
    369e:	b1 2c       	mov	r11, r1
    36a0:	f8 01       	movw	r30, r16
    36a2:	42 85       	ldd	r20, Z+10	; 0x0a
    36a4:	53 85       	ldd	r21, Z+11	; 0x0b
    36a6:	64 85       	ldd	r22, Z+12	; 0x0c
    36a8:	75 85       	ldd	r23, Z+13	; 0x0d
    36aa:	83 89       	ldd	r24, Z+19	; 0x13
    36ac:	94 89       	ldd	r25, Z+20	; 0x14
    36ae:	a5 89       	ldd	r26, Z+21	; 0x15
    36b0:	b6 89       	ldd	r27, Z+22	; 0x16
    36b2:	48 17       	cp	r20, r24
    36b4:	59 07       	cpc	r21, r25
    36b6:	6a 07       	cpc	r22, r26
    36b8:	7b 07       	cpc	r23, r27
    36ba:	08 f0       	brcs	.+2      	; 0x36be <_ZN6SdFile4openEPS_PKch+0x82>
    36bc:	44 c0       	rjmp	.+136    	; 0x3746 <_ZN6SdFile4openEPS_PKch+0x10a>
    36be:	68 94       	set
    36c0:	14 f8       	bld	r1, 4
    36c2:	76 95       	lsr	r23
    36c4:	67 95       	ror	r22
    36c6:	57 95       	ror	r21
    36c8:	47 95       	ror	r20
    36ca:	16 94       	lsr	r1
    36cc:	d1 f7       	brne	.-12     	; 0x36c2 <_ZN6SdFile4openEPS_PKch+0x86>
    36ce:	f4 2f       	mov	r31, r20
    36d0:	ff 70       	andi	r31, 0x0F	; 15
    36d2:	df 2e       	mov	r13, r31
    36d4:	c8 01       	movw	r24, r16
    36d6:	0e 94 2e 18 	call	0x305c	; 0x305c <_ZN6SdFile12readDirCacheEv>
    36da:	00 97       	sbiw	r24, 0x00	; 0
    36dc:	09 f4       	brne	.+2      	; 0x36e0 <_ZN6SdFile4openEPS_PKch+0xa4>
    36de:	91 c0       	rjmp	.+290    	; 0x3802 <_ZN6SdFile4openEPS_PKch+0x1c6>
    36e0:	fc 01       	movw	r30, r24
    36e2:	20 81       	ld	r18, Z
    36e4:	22 23       	and	r18, r18
    36e6:	11 f0       	breq	.+4      	; 0x36ec <_ZN6SdFile4openEPS_PKch+0xb0>
    36e8:	25 3e       	cpi	r18, 0xE5	; 229
    36ea:	b9 f4       	brne	.+46     	; 0x371a <_ZN6SdFile4openEPS_PKch+0xde>
    36ec:	b1 10       	cpse	r11, r1
    36ee:	10 c0       	rjmp	.+32     	; 0x3710 <_ZN6SdFile4openEPS_PKch+0xd4>
    36f0:	f7 01       	movw	r30, r14
    36f2:	d2 8a       	std	Z+18, r13	; 0x12
    36f4:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    36f8:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    36fc:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3700:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3704:	46 87       	std	Z+14, r20	; 0x0e
    3706:	57 87       	std	Z+15, r21	; 0x0f
    3708:	60 8b       	std	Z+16, r22	; 0x10
    370a:	71 8b       	std	Z+17, r23	; 0x11
    370c:	bb 24       	eor	r11, r11
    370e:	b3 94       	inc	r11
    3710:	fc 01       	movw	r30, r24
    3712:	80 81       	ld	r24, Z
    3714:	81 11       	cpse	r24, r1
    3716:	c4 cf       	rjmp	.-120    	; 0x36a0 <_ZN6SdFile4openEPS_PKch+0x64>
    3718:	16 c0       	rjmp	.+44     	; 0x3746 <_ZN6SdFile4openEPS_PKch+0x10a>
    371a:	4b e0       	ldi	r20, 0x0B	; 11
    371c:	50 e0       	ldi	r21, 0x00	; 0
    371e:	bc 01       	movw	r22, r24
    3720:	ce 01       	movw	r24, r28
    3722:	01 96       	adiw	r24, 0x01	; 1
    3724:	0e 94 0e 2b 	call	0x561c	; 0x561c <memcmp>
    3728:	89 2b       	or	r24, r25
    372a:	09 f0       	breq	.+2      	; 0x372e <_ZN6SdFile4openEPS_PKch+0xf2>
    372c:	b9 cf       	rjmp	.-142    	; 0x36a0 <_ZN6SdFile4openEPS_PKch+0x64>
    372e:	8a 2d       	mov	r24, r10
    3730:	80 73       	andi	r24, 0x30	; 48
    3732:	80 33       	cpi	r24, 0x30	; 48
    3734:	09 f4       	brne	.+2      	; 0x3738 <_ZN6SdFile4openEPS_PKch+0xfc>
    3736:	65 c0       	rjmp	.+202    	; 0x3802 <_ZN6SdFile4openEPS_PKch+0x1c6>
    3738:	4a 2d       	mov	r20, r10
    373a:	6d 2d       	mov	r22, r13
    373c:	c7 01       	movw	r24, r14
    373e:	0e 94 b0 1a 	call	0x3560	; 0x3560 <_ZN6SdFile15openCachedEntryEhh>
    3742:	c8 2e       	mov	r12, r24
    3744:	5e c0       	rjmp	.+188    	; 0x3802 <_ZN6SdFile4openEPS_PKch+0x1c6>
    3746:	8a 2d       	mov	r24, r10
    3748:	82 71       	andi	r24, 0x12	; 18
    374a:	82 31       	cpi	r24, 0x12	; 18
    374c:	09 f0       	breq	.+2      	; 0x3750 <_ZN6SdFile4openEPS_PKch+0x114>
    374e:	59 c0       	rjmp	.+178    	; 0x3802 <_ZN6SdFile4openEPS_PKch+0x1c6>
    3750:	bb 20       	and	r11, r11
    3752:	41 f0       	breq	.+16     	; 0x3764 <_ZN6SdFile4openEPS_PKch+0x128>
    3754:	61 e0       	ldi	r22, 0x01	; 1
    3756:	c7 01       	movw	r24, r14
    3758:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN6SdFile13cacheDirEntryEh>
    375c:	8c 01       	movw	r16, r24
    375e:	89 2b       	or	r24, r25
    3760:	89 f4       	brne	.+34     	; 0x3784 <_ZN6SdFile4openEPS_PKch+0x148>
    3762:	4f c0       	rjmp	.+158    	; 0x3802 <_ZN6SdFile4openEPS_PKch+0x1c6>
    3764:	f8 01       	movw	r30, r16
    3766:	85 81       	ldd	r24, Z+5	; 0x05
    3768:	82 30       	cpi	r24, 0x02	; 2
    376a:	09 f4       	brne	.+2      	; 0x376e <_ZN6SdFile4openEPS_PKch+0x132>
    376c:	4a c0       	rjmp	.+148    	; 0x3802 <_ZN6SdFile4openEPS_PKch+0x1c6>
    376e:	c8 01       	movw	r24, r16
    3770:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <_ZN6SdFile13addDirClusterEv>
    3774:	c8 2e       	mov	r12, r24
    3776:	88 23       	and	r24, r24
    3778:	09 f4       	brne	.+2      	; 0x377c <_ZN6SdFile4openEPS_PKch+0x140>
    377a:	43 c0       	rjmp	.+134    	; 0x3802 <_ZN6SdFile4openEPS_PKch+0x1c6>
    377c:	f7 01       	movw	r30, r14
    377e:	12 8a       	std	Z+18, r1	; 0x12
    3780:	0e ed       	ldi	r16, 0xDE	; 222
    3782:	12 e0       	ldi	r17, 0x02	; 2
    3784:	80 e2       	ldi	r24, 0x20	; 32
    3786:	f8 01       	movw	r30, r16
    3788:	11 92       	st	Z+, r1
    378a:	8a 95       	dec	r24
    378c:	e9 f7       	brne	.-6      	; 0x3788 <_ZN6SdFile4openEPS_PKch+0x14c>
    378e:	8b e0       	ldi	r24, 0x0B	; 11
    3790:	fe 01       	movw	r30, r28
    3792:	31 96       	adiw	r30, 0x01	; 1
    3794:	d8 01       	movw	r26, r16
    3796:	01 90       	ld	r0, Z+
    3798:	0d 92       	st	X+, r0
    379a:	8a 95       	dec	r24
    379c:	e1 f7       	brne	.-8      	; 0x3796 <_ZN6SdFile4openEPS_PKch+0x15a>
    379e:	e0 91 d5 02 	lds	r30, 0x02D5	; 0x8002d5 <_ZN6SdFile9dateTime_E>
    37a2:	f0 91 d6 02 	lds	r31, 0x02D6	; 0x8002d6 <_ZN6SdFile9dateTime_E+0x1>
    37a6:	30 97       	sbiw	r30, 0x00	; 0
    37a8:	39 f0       	breq	.+14     	; 0x37b8 <_ZN6SdFile4openEPS_PKch+0x17c>
    37aa:	b8 01       	movw	r22, r16
    37ac:	62 5f       	subi	r22, 0xF2	; 242
    37ae:	7f 4f       	sbci	r23, 0xFF	; 255
    37b0:	c8 01       	movw	r24, r16
    37b2:	40 96       	adiw	r24, 0x10	; 16
    37b4:	09 95       	icall
    37b6:	09 c0       	rjmp	.+18     	; 0x37ca <_ZN6SdFile4openEPS_PKch+0x18e>
    37b8:	81 e2       	ldi	r24, 0x21	; 33
    37ba:	98 e2       	ldi	r25, 0x28	; 40
    37bc:	f8 01       	movw	r30, r16
    37be:	91 8b       	std	Z+17, r25	; 0x11
    37c0:	80 8b       	std	Z+16, r24	; 0x10
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	98 e0       	ldi	r25, 0x08	; 8
    37c6:	97 87       	std	Z+15, r25	; 0x0f
    37c8:	86 87       	std	Z+14, r24	; 0x0e
    37ca:	f8 01       	movw	r30, r16
    37cc:	80 89       	ldd	r24, Z+16	; 0x10
    37ce:	91 89       	ldd	r25, Z+17	; 0x11
    37d0:	93 8b       	std	Z+19, r25	; 0x13
    37d2:	82 8b       	std	Z+18, r24	; 0x12
    37d4:	91 8f       	std	Z+25, r25	; 0x19
    37d6:	80 8f       	std	Z+24, r24	; 0x18
    37d8:	86 85       	ldd	r24, Z+14	; 0x0e
    37da:	97 85       	ldd	r25, Z+15	; 0x0f
    37dc:	97 8b       	std	Z+23, r25	; 0x17
    37de:	86 8b       	std	Z+22, r24	; 0x16
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <_ZN8SdVolume10cacheFlushEh>
    37e6:	c8 2e       	mov	r12, r24
    37e8:	88 23       	and	r24, r24
    37ea:	59 f0       	breq	.+22     	; 0x3802 <_ZN6SdFile4openEPS_PKch+0x1c6>
    37ec:	f7 01       	movw	r30, r14
    37ee:	62 89       	ldd	r22, Z+18	; 0x12
    37f0:	4a 2d       	mov	r20, r10
    37f2:	c7 01       	movw	r24, r14
    37f4:	0e 94 b0 1a 	call	0x3560	; 0x3560 <_ZN6SdFile15openCachedEntryEhh>
    37f8:	c8 2e       	mov	r12, r24
    37fa:	03 c0       	rjmp	.+6      	; 0x3802 <_ZN6SdFile4openEPS_PKch+0x1c6>
    37fc:	c1 2c       	mov	r12, r1
    37fe:	01 c0       	rjmp	.+2      	; 0x3802 <_ZN6SdFile4openEPS_PKch+0x1c6>
    3800:	c8 2e       	mov	r12, r24
    3802:	8c 2d       	mov	r24, r12
    3804:	2b 96       	adiw	r28, 0x0b	; 11
    3806:	0f b6       	in	r0, 0x3f	; 63
    3808:	f8 94       	cli
    380a:	de bf       	out	0x3e, r29	; 62
    380c:	0f be       	out	0x3f, r0	; 63
    380e:	cd bf       	out	0x3d, r28	; 61
    3810:	df 91       	pop	r29
    3812:	cf 91       	pop	r28
    3814:	1f 91       	pop	r17
    3816:	0f 91       	pop	r16
    3818:	ff 90       	pop	r15
    381a:	ef 90       	pop	r14
    381c:	df 90       	pop	r13
    381e:	cf 90       	pop	r12
    3820:	bf 90       	pop	r11
    3822:	af 90       	pop	r10
    3824:	08 95       	ret

00003826 <_ZN6SdFile6removeEv>:
    3826:	cf 93       	push	r28
    3828:	df 93       	push	r29
    382a:	ec 01       	movw	r28, r24
    382c:	40 e0       	ldi	r20, 0x00	; 0
    382e:	50 e0       	ldi	r21, 0x00	; 0
    3830:	ba 01       	movw	r22, r20
    3832:	0e 94 df 19 	call	0x33be	; 0x33be <_ZN6SdFile8truncateEm>
    3836:	88 23       	and	r24, r24
    3838:	79 f0       	breq	.+30     	; 0x3858 <_ZN6SdFile6removeEv+0x32>
    383a:	61 e0       	ldi	r22, 0x01	; 1
    383c:	ce 01       	movw	r24, r28
    383e:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN6SdFile13cacheDirEntryEh>
    3842:	00 97       	sbiw	r24, 0x00	; 0
    3844:	41 f0       	breq	.+16     	; 0x3856 <_ZN6SdFile6removeEv+0x30>
    3846:	25 ee       	ldi	r18, 0xE5	; 229
    3848:	fc 01       	movw	r30, r24
    384a:	20 83       	st	Z, r18
    384c:	1d 82       	std	Y+5, r1	; 0x05
    384e:	81 e0       	ldi	r24, 0x01	; 1
    3850:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <_ZN8SdVolume10cacheFlushEh>
    3854:	01 c0       	rjmp	.+2      	; 0x3858 <_ZN6SdFile6removeEv+0x32>
    3856:	80 e0       	ldi	r24, 0x00	; 0
    3858:	df 91       	pop	r29
    385a:	cf 91       	pop	r28
    385c:	08 95       	ret

0000385e <_ZN6SdFile6removeEPS_PKc>:
    385e:	cf 93       	push	r28
    3860:	df 93       	push	r29
    3862:	cd b7       	in	r28, 0x3d	; 61
    3864:	de b7       	in	r29, 0x3e	; 62
    3866:	6d 97       	sbiw	r28, 0x1d	; 29
    3868:	0f b6       	in	r0, 0x3f	; 63
    386a:	f8 94       	cli
    386c:	de bf       	out	0x3e, r29	; 62
    386e:	0f be       	out	0x3f, r0	; 63
    3870:	cd bf       	out	0x3d, r28	; 61
    3872:	ab 01       	movw	r20, r22
    3874:	1c 82       	std	Y+4, r1	; 0x04
    3876:	1b 82       	std	Y+3, r1	; 0x03
    3878:	26 e4       	ldi	r18, 0x46	; 70
    387a:	32 e0       	ldi	r19, 0x02	; 2
    387c:	3a 83       	std	Y+2, r19	; 0x02
    387e:	29 83       	std	Y+1, r18	; 0x01
    3880:	1e 82       	std	Y+6, r1	; 0x06
    3882:	22 e0       	ldi	r18, 0x02	; 2
    3884:	bc 01       	movw	r22, r24
    3886:	ce 01       	movw	r24, r28
    3888:	01 96       	adiw	r24, 0x01	; 1
    388a:	0e 94 1e 1b 	call	0x363c	; 0x363c <_ZN6SdFile4openEPS_PKch>
    388e:	88 23       	and	r24, r24
    3890:	21 f0       	breq	.+8      	; 0x389a <_ZN6SdFile6removeEPS_PKc+0x3c>
    3892:	ce 01       	movw	r24, r28
    3894:	01 96       	adiw	r24, 0x01	; 1
    3896:	0e 94 13 1c 	call	0x3826	; 0x3826 <_ZN6SdFile6removeEv>
    389a:	6d 96       	adiw	r28, 0x1d	; 29
    389c:	0f b6       	in	r0, 0x3f	; 63
    389e:	f8 94       	cli
    38a0:	de bf       	out	0x3e, r29	; 62
    38a2:	0f be       	out	0x3f, r0	; 63
    38a4:	cd bf       	out	0x3d, r28	; 61
    38a6:	df 91       	pop	r29
    38a8:	cf 91       	pop	r28
    38aa:	08 95       	ret

000038ac <_ZN6SdFile5writeEPKvj>:
   \a nbyte.  If an error occurs, write() returns 0.  Possible errors
   include write() is called before a file has been opened, write is called
   for a read-only file, device is full, a corrupt file system or an I/O error.

*/
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    38ac:	3f 92       	push	r3
    38ae:	4f 92       	push	r4
    38b0:	5f 92       	push	r5
    38b2:	6f 92       	push	r6
    38b4:	7f 92       	push	r7
    38b6:	8f 92       	push	r8
    38b8:	9f 92       	push	r9
    38ba:	af 92       	push	r10
    38bc:	bf 92       	push	r11
    38be:	cf 92       	push	r12
    38c0:	df 92       	push	r13
    38c2:	ef 92       	push	r14
    38c4:	ff 92       	push	r15
    38c6:	0f 93       	push	r16
    38c8:	1f 93       	push	r17
    38ca:	cf 93       	push	r28
    38cc:	df 93       	push	r29
    38ce:	00 d0       	rcall	.+0      	; 0x38d0 <_ZN6SdFile5writeEPKvj+0x24>
    38d0:	00 d0       	rcall	.+0      	; 0x38d2 <_ZN6SdFile5writeEPKvj+0x26>
    38d2:	00 d0       	rcall	.+0      	; 0x38d4 <_ZN6SdFile5writeEPKvj+0x28>
    38d4:	cd b7       	in	r28, 0x3d	; 61
    38d6:	de b7       	in	r29, 0x3e	; 62
    38d8:	6c 01       	movw	r12, r24
    38da:	7b 01       	movw	r14, r22
    38dc:	5e 83       	std	Y+6, r21	; 0x06
    38de:	4d 83       	std	Y+5, r20	; 0x05
  const uint8_t* src = reinterpret_cast<const uint8_t*>(buf);

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;
  // if blocking writes should be used
  uint8_t blocking = (flags_ & F_FILE_NON_BLOCKING_WRITE) == 0x00;
    38e0:	dc 01       	movw	r26, r24
    38e2:	14 96       	adiw	r26, 0x04	; 4
    38e4:	9c 91       	ld	r25, X
    38e6:	14 97       	sbiw	r26, 0x04	; 4
    38e8:	29 2f       	mov	r18, r25
    38ea:	22 95       	swap	r18
    38ec:	2f 70       	andi	r18, 0x0F	; 15
    38ee:	81 e0       	ldi	r24, 0x01	; 1
    38f0:	82 27       	eor	r24, r18
    38f2:	81 70       	andi	r24, 0x01	; 1
    38f4:	38 2e       	mov	r3, r24
    uint8_t isDir(void) const {
      return type_ >= FAT_FILE_TYPE_MIN_DIR;
    }
    /** \return True if this is a SdFile for a file else false. */
    uint8_t isFile(void) const {
      return type_ == FAT_FILE_TYPE_NORMAL;
    38f6:	15 96       	adiw	r26, 0x05	; 5
    38f8:	8c 91       	ld	r24, X

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) {
    38fa:	81 30       	cpi	r24, 0x01	; 1
    38fc:	19 f4       	brne	.+6      	; 0x3904 <_ZN6SdFile5writeEPKvj+0x58>
    38fe:	91 fd       	sbrc	r25, 1
    3900:	03 c0       	rjmp	.+6      	; 0x3908 <_ZN6SdFile5writeEPKvj+0x5c>
    3902:	03 c0       	rjmp	.+6      	; 0x390a <_ZN6SdFile5writeEPKvj+0x5e>
    3904:	81 e0       	ldi	r24, 0x01	; 1
    3906:	01 c0       	rjmp	.+2      	; 0x390a <_ZN6SdFile5writeEPKvj+0x5e>
    3908:	80 e0       	ldi	r24, 0x00	; 0
    390a:	81 11       	cpse	r24, r1
    390c:	66 c1       	rjmp	.+716    	; 0x3bda <_ZN6SdFile5writeEPKvj+0x32e>
    goto writeErrorReturn;
  }

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    390e:	92 fd       	sbrc	r25, 2
    3910:	03 c0       	rjmp	.+6      	; 0x3918 <_ZN6SdFile5writeEPKvj+0x6c>
  uint16_t nToWrite = nbyte;
  // if blocking writes should be used
  uint8_t blocking = (flags_ & F_FILE_NON_BLOCKING_WRITE) == 0x00;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) {
    3912:	8d 80       	ldd	r8, Y+5	; 0x05
    3914:	9e 80       	ldd	r9, Y+6	; 0x06
    3916:	15 c0       	rjmp	.+42     	; 0x3942 <_ZN6SdFile5writeEPKvj+0x96>
    goto writeErrorReturn;
  }

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    3918:	f6 01       	movw	r30, r12
    391a:	82 85       	ldd	r24, Z+10	; 0x0a
    391c:	93 85       	ldd	r25, Z+11	; 0x0b
    391e:	a4 85       	ldd	r26, Z+12	; 0x0c
    3920:	b5 85       	ldd	r27, Z+13	; 0x0d
    3922:	43 89       	ldd	r20, Z+19	; 0x13
    3924:	54 89       	ldd	r21, Z+20	; 0x14
    3926:	65 89       	ldd	r22, Z+21	; 0x15
    3928:	76 89       	ldd	r23, Z+22	; 0x16
    392a:	84 17       	cp	r24, r20
    392c:	95 07       	cpc	r25, r21
    392e:	a6 07       	cpc	r26, r22
    3930:	b7 07       	cpc	r27, r23
    3932:	79 f3       	breq	.-34     	; 0x3912 <_ZN6SdFile5writeEPKvj+0x66>
    /**
        Set the files current position to end of file.  Useful to position
        a file for append. See seekSet().
    */
    uint8_t seekEnd(void) {
      return seekSet(fileSize_);
    3934:	c6 01       	movw	r24, r12
    3936:	0e 94 79 18 	call	0x30f2	; 0x30f2 <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) {
    393a:	88 23       	and	r24, r24
    393c:	09 f4       	brne	.+2      	; 0x3940 <_ZN6SdFile5writeEPKvj+0x94>
    393e:	4d c1       	rjmp	.+666    	; 0x3bda <_ZN6SdFile5writeEPKvj+0x32e>
    3940:	e8 cf       	rjmp	.-48     	; 0x3912 <_ZN6SdFile5writeEPKvj+0x66>
      goto writeErrorReturn;
    }
  }

  while (nToWrite > 0) {
    3942:	81 14       	cp	r8, r1
    3944:	91 04       	cpc	r9, r1
    3946:	09 f4       	brne	.+2      	; 0x394a <_ZN6SdFile5writeEPKvj+0x9e>
    3948:	1b c1       	rjmp	.+566    	; 0x3b80 <_ZN6SdFile5writeEPKvj+0x2d4>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    394a:	d6 01       	movw	r26, r12
    394c:	1a 96       	adiw	r26, 0x0a	; 10
    394e:	0d 91       	ld	r16, X+
    3950:	1d 91       	ld	r17, X+
    3952:	2d 91       	ld	r18, X+
    3954:	3c 91       	ld	r19, X
    3956:	1d 97       	sbiw	r26, 0x0d	; 13
    3958:	5b 96       	adiw	r26, 0x1b	; 27
    395a:	ed 91       	ld	r30, X+
    395c:	fc 91       	ld	r31, X
    395e:	5c 97       	sbiw	r26, 0x1c	; 28
    uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
    uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
    //----------------------------------------------------------------------------
    uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
    uint8_t blockOfCluster(uint32_t position) const {
      return (position >> 9) & (blocksPerCluster_ - 1);
    3960:	d9 01       	movw	r26, r18
    3962:	c8 01       	movw	r24, r16
    3964:	07 2e       	mov	r0, r23
    3966:	79 e0       	ldi	r23, 0x09	; 9
    3968:	b6 95       	lsr	r27
    396a:	a7 95       	ror	r26
    396c:	97 95       	ror	r25
    396e:	87 95       	ror	r24
    3970:	7a 95       	dec	r23
    3972:	d1 f7       	brne	.-12     	; 0x3968 <_ZN6SdFile5writeEPKvj+0xbc>
    3974:	70 2d       	mov	r23, r0
    3976:	74 80       	ldd	r7, Z+4	; 0x04
    3978:	7a 94       	dec	r7
    397a:	78 22       	and	r7, r24
    uint16_t blockOffset = curPosition_ & 0X1FF;
    397c:	11 70       	andi	r17, 0x01	; 1
    if (blockOfCluster == 0 && blockOffset == 0) {
    397e:	71 10       	cpse	r7, r1
    3980:	54 c0       	rjmp	.+168    	; 0x3a2a <_ZN6SdFile5writeEPKvj+0x17e>
    3982:	01 15       	cp	r16, r1
    3984:	11 05       	cpc	r17, r1
    3986:	09 f0       	breq	.+2      	; 0x398a <_ZN6SdFile5writeEPKvj+0xde>
    3988:	50 c0       	rjmp	.+160    	; 0x3a2a <_ZN6SdFile5writeEPKvj+0x17e>
      // start of new cluster
      if (curCluster_ == 0) {
    398a:	d6 01       	movw	r26, r12
    398c:	16 96       	adiw	r26, 0x06	; 6
    398e:	4d 91       	ld	r20, X+
    3990:	5d 91       	ld	r21, X+
    3992:	6d 91       	ld	r22, X+
    3994:	7c 91       	ld	r23, X
    3996:	19 97       	sbiw	r26, 0x09	; 9
    3998:	41 15       	cp	r20, r1
    399a:	51 05       	cpc	r21, r1
    399c:	61 05       	cpc	r22, r1
    399e:	71 05       	cpc	r23, r1
    39a0:	b1 f4       	brne	.+44     	; 0x39ce <_ZN6SdFile5writeEPKvj+0x122>
        if (firstCluster_ == 0) {
    39a2:	57 96       	adiw	r26, 0x17	; 23
    39a4:	8d 91       	ld	r24, X+
    39a6:	9d 91       	ld	r25, X+
    39a8:	0d 90       	ld	r0, X+
    39aa:	bc 91       	ld	r27, X
    39ac:	a0 2d       	mov	r26, r0
    39ae:	00 97       	sbiw	r24, 0x00	; 0
    39b0:	a1 05       	cpc	r26, r1
    39b2:	b1 05       	cpc	r27, r1
    39b4:	31 f4       	brne	.+12     	; 0x39c2 <_ZN6SdFile5writeEPKvj+0x116>
          // allocate first cluster of file
          if (!addCluster()) {
    39b6:	c6 01       	movw	r24, r12
    39b8:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <_ZN6SdFile10addClusterEv>
    39bc:	81 11       	cpse	r24, r1
    39be:	35 c0       	rjmp	.+106    	; 0x3a2a <_ZN6SdFile5writeEPKvj+0x17e>
    39c0:	0c c1       	rjmp	.+536    	; 0x3bda <_ZN6SdFile5writeEPKvj+0x32e>
            goto writeErrorReturn;
          }
        } else {
          curCluster_ = firstCluster_;
    39c2:	f6 01       	movw	r30, r12
    39c4:	86 83       	std	Z+6, r24	; 0x06
    39c6:	97 83       	std	Z+7, r25	; 0x07
    39c8:	a0 87       	std	Z+8, r26	; 0x08
    39ca:	b1 87       	std	Z+9, r27	; 0x09
    39cc:	2e c0       	rjmp	.+92     	; 0x3a2a <_ZN6SdFile5writeEPKvj+0x17e>
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) {
    39ce:	9e 01       	movw	r18, r28
    39d0:	2f 5f       	subi	r18, 0xFF	; 255
    39d2:	3f 4f       	sbci	r19, 0xFF	; 255
    39d4:	cf 01       	movw	r24, r30
    39d6:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <_ZNK8SdVolume6fatGetEmPm>
    39da:	81 11       	cpse	r24, r1
    39dc:	02 c0       	rjmp	.+4      	; 0x39e2 <_ZN6SdFile5writeEPKvj+0x136>
          return false;
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	0b c1       	rjmp	.+534    	; 0x3bf8 <_ZN6SdFile5writeEPKvj+0x34c>
        }
        if (vol_->isEOC(next)) {
    39e2:	89 81       	ldd	r24, Y+1	; 0x01
    39e4:	9a 81       	ldd	r25, Y+2	; 0x02
    39e6:	ab 81       	ldd	r26, Y+3	; 0x03
    39e8:	bc 81       	ldd	r27, Y+4	; 0x04
    39ea:	f6 01       	movw	r30, r12
    39ec:	23 8d       	ldd	r18, Z+27	; 0x1b
    39ee:	34 8d       	ldd	r19, Z+28	; 0x1c
    uint8_t fatPutEOC(uint32_t cluster) {
      return fatPut(cluster, 0x0FFFFFFF);
    }
    uint8_t freeChain(uint32_t cluster);
    uint8_t isEOC(uint32_t cluster) const {
      return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    39f0:	f9 01       	movw	r30, r18
    39f2:	27 89       	ldd	r18, Z+23	; 0x17
    39f4:	20 31       	cpi	r18, 0x10	; 16
    39f6:	29 f4       	brne	.+10     	; 0x3a02 <_ZN6SdFile5writeEPKvj+0x156>
    39f8:	48 ef       	ldi	r20, 0xF8	; 248
    39fa:	5f ef       	ldi	r21, 0xFF	; 255
    39fc:	60 e0       	ldi	r22, 0x00	; 0
    39fe:	70 e0       	ldi	r23, 0x00	; 0
    3a00:	04 c0       	rjmp	.+8      	; 0x3a0a <_ZN6SdFile5writeEPKvj+0x15e>
    3a02:	48 ef       	ldi	r20, 0xF8	; 248
    3a04:	5f ef       	ldi	r21, 0xFF	; 255
    3a06:	6f ef       	ldi	r22, 0xFF	; 255
    3a08:	7f e0       	ldi	r23, 0x0F	; 15
    3a0a:	84 17       	cp	r24, r20
    3a0c:	95 07       	cpc	r25, r21
    3a0e:	a6 07       	cpc	r26, r22
    3a10:	b7 07       	cpc	r27, r23
    3a12:	30 f0       	brcs	.+12     	; 0x3a20 <_ZN6SdFile5writeEPKvj+0x174>
          // add cluster if at end of chain
          if (!addCluster()) {
    3a14:	c6 01       	movw	r24, r12
    3a16:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <_ZN6SdFile10addClusterEv>
    3a1a:	81 11       	cpse	r24, r1
    3a1c:	06 c0       	rjmp	.+12     	; 0x3a2a <_ZN6SdFile5writeEPKvj+0x17e>
    3a1e:	dd c0       	rjmp	.+442    	; 0x3bda <_ZN6SdFile5writeEPKvj+0x32e>
            goto writeErrorReturn;
          }
        } else {
          curCluster_ = next;
    3a20:	f6 01       	movw	r30, r12
    3a22:	86 83       	std	Z+6, r24	; 0x06
    3a24:	97 83       	std	Z+7, r25	; 0x07
    3a26:	a0 87       	std	Z+8, r26	; 0x08
    3a28:	b1 87       	std	Z+9, r27	; 0x09
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    3a2a:	80 e0       	ldi	r24, 0x00	; 0
    3a2c:	92 e0       	ldi	r25, 0x02	; 2
    3a2e:	5c 01       	movw	r10, r24
    3a30:	a0 1a       	sub	r10, r16
    3a32:	b1 0a       	sbc	r11, r17

    // lesser of space and amount to write
    if (n > nToWrite) {
    3a34:	8a 14       	cp	r8, r10
    3a36:	9b 04       	cpc	r9, r11
    3a38:	08 f4       	brcc	.+2      	; 0x3a3c <_ZN6SdFile5writeEPKvj+0x190>
      n = nToWrite;
    3a3a:	54 01       	movw	r10, r8
    }

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    3a3c:	f6 01       	movw	r30, r12
    3a3e:	86 81       	ldd	r24, Z+6	; 0x06
    3a40:	97 81       	ldd	r25, Z+7	; 0x07
    3a42:	a0 85       	ldd	r26, Z+8	; 0x08
    3a44:	b1 85       	ldd	r27, Z+9	; 0x09
    3a46:	23 8d       	ldd	r18, Z+27	; 0x1b
    3a48:	34 8d       	ldd	r19, Z+28	; 0x1c
    uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
    uint8_t blockOfCluster(uint32_t position) const {
      return (position >> 9) & (blocksPerCluster_ - 1);
    }
    uint32_t clusterStartBlock(uint32_t cluster) const {
      return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);
    3a4a:	f9 01       	movw	r30, r18
    3a4c:	46 85       	ldd	r20, Z+14	; 0x0e
    3a4e:	57 85       	ldd	r21, Z+15	; 0x0f
    3a50:	60 89       	ldd	r22, Z+16	; 0x10
    3a52:	71 89       	ldd	r23, Z+17	; 0x11
    3a54:	02 97       	sbiw	r24, 0x02	; 2
    3a56:	a1 09       	sbc	r26, r1
    3a58:	b1 09       	sbc	r27, r1
    3a5a:	05 84       	ldd	r0, Z+13	; 0x0d
    3a5c:	04 c0       	rjmp	.+8      	; 0x3a66 <_ZN6SdFile5writeEPKvj+0x1ba>
    3a5e:	88 0f       	add	r24, r24
    3a60:	99 1f       	adc	r25, r25
    3a62:	aa 1f       	adc	r26, r26
    3a64:	bb 1f       	adc	r27, r27
    3a66:	0a 94       	dec	r0
    3a68:	d2 f7       	brpl	.-12     	; 0x3a5e <_ZN6SdFile5writeEPKvj+0x1b2>
    3a6a:	84 0f       	add	r24, r20
    3a6c:	95 1f       	adc	r25, r21
    3a6e:	a6 1f       	adc	r26, r22
    3a70:	b7 1f       	adc	r27, r23
    3a72:	9c 01       	movw	r18, r24
    3a74:	ad 01       	movw	r20, r26
    3a76:	27 0d       	add	r18, r7
    3a78:	31 1d       	adc	r19, r1
    3a7a:	41 1d       	adc	r20, r1
    3a7c:	51 1d       	adc	r21, r1
    3a7e:	29 01       	movw	r4, r18
    3a80:	3a 01       	movw	r6, r20
    if (n == 512) {
    3a82:	a1 14       	cp	r10, r1
    3a84:	32 e0       	ldi	r19, 0x02	; 2
    3a86:	b3 06       	cpc	r11, r19
    3a88:	41 f5       	brne	.+80     	; 0x3ada <_ZN6SdFile5writeEPKvj+0x22e>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    3a8a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    3a8e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3a92:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3a96:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3a9a:	48 16       	cp	r4, r24
    3a9c:	59 06       	cpc	r5, r25
    3a9e:	6a 06       	cpc	r6, r26
    3aa0:	7b 06       	cpc	r7, r27
    3aa2:	59 f4       	brne	.+22     	; 0x3aba <_ZN6SdFile5writeEPKvj+0x20e>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    3aa4:	8f ef       	ldi	r24, 0xFF	; 255
    3aa6:	9f ef       	ldi	r25, 0xFF	; 255
    3aa8:	dc 01       	movw	r26, r24
    3aaa:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    3aae:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3ab2:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3ab6:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    uint8_t readData(uint32_t block, uint16_t offset,
                     uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
    }
    uint8_t writeBlock(uint32_t block, const uint8_t* dst, uint8_t blocking = 1) {
      return sdCard_->writeBlock(block, dst, blocking);
    3aba:	03 2d       	mov	r16, r3
    3abc:	97 01       	movw	r18, r14
    3abe:	b3 01       	movw	r22, r6
    3ac0:	a2 01       	movw	r20, r4
    3ac2:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <_ZN8SdVolume7sdCard_E>
    3ac6:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <_ZN8SdVolume7sdCard_E+0x1>
    3aca:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <_ZN7Sd2Card10writeBlockEmPKhh>
      }
      if (!vol_->writeBlock(block, src, blocking)) {
    3ace:	88 23       	and	r24, r24
    3ad0:	09 f4       	brne	.+2      	; 0x3ad4 <_ZN6SdFile5writeEPKvj+0x228>
    3ad2:	83 c0       	rjmp	.+262    	; 0x3bda <_ZN6SdFile5writeEPKvj+0x32e>
        goto writeErrorReturn;
      }
      src += 512;
    3ad4:	4e ef       	ldi	r20, 0xFE	; 254
    3ad6:	f4 1a       	sub	r15, r20
    3ad8:	43 c0       	rjmp	.+134    	; 0x3b60 <_ZN6SdFile5writeEPKvj+0x2b4>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    3ada:	01 15       	cp	r16, r1
    3adc:	11 05       	cpc	r17, r1
    3ade:	31 f5       	brne	.+76     	; 0x3b2c <_ZN6SdFile5writeEPKvj+0x280>
    3ae0:	d6 01       	movw	r26, r12
    3ae2:	1a 96       	adiw	r26, 0x0a	; 10
    3ae4:	4d 91       	ld	r20, X+
    3ae6:	5d 91       	ld	r21, X+
    3ae8:	6d 91       	ld	r22, X+
    3aea:	7c 91       	ld	r23, X
    3aec:	1d 97       	sbiw	r26, 0x0d	; 13
    3aee:	53 96       	adiw	r26, 0x13	; 19
    3af0:	8d 91       	ld	r24, X+
    3af2:	9d 91       	ld	r25, X+
    3af4:	0d 90       	ld	r0, X+
    3af6:	bc 91       	ld	r27, X
    3af8:	a0 2d       	mov	r26, r0
    3afa:	48 17       	cp	r20, r24
    3afc:	59 07       	cpc	r21, r25
    3afe:	6a 07       	cpc	r22, r26
    3b00:	7b 07       	cpc	r23, r27
    3b02:	a0 f0       	brcs	.+40     	; 0x3b2c <_ZN6SdFile5writeEPKvj+0x280>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) {
    3b04:	81 e0       	ldi	r24, 0x01	; 1
    3b06:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <_ZN8SdVolume10cacheFlushEh>
    3b0a:	88 23       	and	r24, r24
    3b0c:	09 f4       	brne	.+2      	; 0x3b10 <_ZN6SdFile5writeEPKvj+0x264>
    3b0e:	65 c0       	rjmp	.+202    	; 0x3bda <_ZN6SdFile5writeEPKvj+0x32e>
          goto writeErrorReturn;
        }
        SdVolume::cacheBlockNumber_ = block;
    3b10:	40 92 09 01 	sts	0x0109, r4	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    3b14:	50 92 0a 01 	sts	0x010A, r5	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3b18:	60 92 0b 01 	sts	0x010B, r6	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3b1c:	70 92 0c 01 	sts	0x010C, r7	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    }
    static uint8_t cacheFlush(uint8_t blocking = 1);
    static uint8_t cacheMirrorBlockFlush(uint8_t blocking);
    static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
    static void cacheSetDirty(void) {
      cacheDirty_ |= CACHE_FOR_WRITE;
    3b20:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <_ZN8SdVolume11cacheDirty_E>
    3b24:	81 60       	ori	r24, 0x01	; 1
    3b26:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <_ZN8SdVolume11cacheDirty_E>
    3b2a:	08 c0       	rjmp	.+16     	; 0x3b3c <_ZN6SdFile5writeEPKvj+0x290>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    3b2c:	41 e0       	ldi	r20, 0x01	; 1
    3b2e:	c3 01       	movw	r24, r6
    3b30:	b2 01       	movw	r22, r4
    3b32:	0e 94 76 1e 	call	0x3cec	; 0x3cec <_ZN8SdVolume13cacheRawBlockEmh>
    3b36:	88 23       	and	r24, r24
    3b38:	09 f4       	brne	.+2      	; 0x3b3c <_ZN6SdFile5writeEPKvj+0x290>
    3b3a:	4f c0       	rjmp	.+158    	; 0x3bda <_ZN6SdFile5writeEPKvj+0x32e>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    3b3c:	f8 01       	movw	r30, r16
    3b3e:	e2 52       	subi	r30, 0x22	; 34
    3b40:	fd 4f       	sbci	r31, 0xFD	; 253
      uint8_t* end = dst + n;
    3b42:	9f 01       	movw	r18, r30
    3b44:	2a 0d       	add	r18, r10
    3b46:	3b 1d       	adc	r19, r11
      while (dst != end) {
    3b48:	e2 17       	cp	r30, r18
    3b4a:	f3 07       	cpc	r31, r19
    3b4c:	49 f0       	breq	.+18     	; 0x3b60 <_ZN6SdFile5writeEPKvj+0x2b4>
        *dst++ = *src++;
    3b4e:	d7 01       	movw	r26, r14
    3b50:	8c 91       	ld	r24, X
    3b52:	80 83       	st	Z, r24
    3b54:	31 96       	adiw	r30, 0x01	; 1
    3b56:	a7 01       	movw	r20, r14
    3b58:	4f 5f       	subi	r20, 0xFF	; 255
    3b5a:	5f 4f       	sbci	r21, 0xFF	; 255
    3b5c:	7a 01       	movw	r14, r20
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) {
    3b5e:	f4 cf       	rjmp	.-24     	; 0x3b48 <_ZN6SdFile5writeEPKvj+0x29c>
        *dst++ = *src++;
      }
    }
    nToWrite -= n;
    3b60:	8a 18       	sub	r8, r10
    3b62:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    3b64:	f6 01       	movw	r30, r12
    3b66:	82 85       	ldd	r24, Z+10	; 0x0a
    3b68:	93 85       	ldd	r25, Z+11	; 0x0b
    3b6a:	a4 85       	ldd	r26, Z+12	; 0x0c
    3b6c:	b5 85       	ldd	r27, Z+13	; 0x0d
    3b6e:	8a 0d       	add	r24, r10
    3b70:	9b 1d       	adc	r25, r11
    3b72:	a1 1d       	adc	r26, r1
    3b74:	b1 1d       	adc	r27, r1
    3b76:	82 87       	std	Z+10, r24	; 0x0a
    3b78:	93 87       	std	Z+11, r25	; 0x0b
    3b7a:	a4 87       	std	Z+12, r26	; 0x0c
    3b7c:	b5 87       	std	Z+13, r27	; 0x0d
    if (!seekEnd()) {
      goto writeErrorReturn;
    }
  }

  while (nToWrite > 0) {
    3b7e:	e1 ce       	rjmp	.-574    	; 0x3942 <_ZN6SdFile5writeEPKvj+0x96>
      }
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    3b80:	f6 01       	movw	r30, r12
    3b82:	82 85       	ldd	r24, Z+10	; 0x0a
    3b84:	93 85       	ldd	r25, Z+11	; 0x0b
    3b86:	a4 85       	ldd	r26, Z+12	; 0x0c
    3b88:	b5 85       	ldd	r27, Z+13	; 0x0d
    3b8a:	43 89       	ldd	r20, Z+19	; 0x13
    3b8c:	54 89       	ldd	r21, Z+20	; 0x14
    3b8e:	65 89       	ldd	r22, Z+21	; 0x15
    3b90:	76 89       	ldd	r23, Z+22	; 0x16
    3b92:	48 17       	cp	r20, r24
    3b94:	59 07       	cpc	r21, r25
    3b96:	6a 07       	cpc	r22, r26
    3b98:	7b 07       	cpc	r23, r27
    3b9a:	40 f4       	brcc	.+16     	; 0x3bac <_ZN6SdFile5writeEPKvj+0x300>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    3b9c:	83 8b       	std	Z+19, r24	; 0x13
    3b9e:	94 8b       	std	Z+20, r25	; 0x14
    3ba0:	a5 8b       	std	Z+21, r26	; 0x15
    3ba2:	b6 8b       	std	Z+22, r27	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    3ba4:	84 81       	ldd	r24, Z+4	; 0x04
    3ba6:	80 68       	ori	r24, 0x80	; 128
    3ba8:	84 83       	std	Z+4, r24	; 0x04
    3baa:	0d c0       	rjmp	.+26     	; 0x3bc6 <_ZN6SdFile5writeEPKvj+0x31a>
  } else if (dateTime_ && nbyte) {
    3bac:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <_ZN6SdFile9dateTime_E>
    3bb0:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <_ZN6SdFile9dateTime_E+0x1>
    3bb4:	89 2b       	or	r24, r25
    3bb6:	39 f0       	breq	.+14     	; 0x3bc6 <_ZN6SdFile5writeEPKvj+0x31a>
    3bb8:	2d 81       	ldd	r18, Y+5	; 0x05
    3bba:	3e 81       	ldd	r19, Y+6	; 0x06
    3bbc:	23 2b       	or	r18, r19
    3bbe:	19 f0       	breq	.+6      	; 0x3bc6 <_ZN6SdFile5writeEPKvj+0x31a>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    3bc0:	84 81       	ldd	r24, Z+4	; 0x04
    3bc2:	80 68       	ori	r24, 0x80	; 128
    3bc4:	84 83       	std	Z+4, r24	; 0x04
  }

  if (flags_ & O_SYNC) {
    3bc6:	f6 01       	movw	r30, r12
    3bc8:	84 81       	ldd	r24, Z+4	; 0x04
    3bca:	83 ff       	sbrs	r24, 3
    3bcc:	10 c0       	rjmp	.+32     	; 0x3bee <_ZN6SdFile5writeEPKvj+0x342>
    if (!sync()) {
    3bce:	61 e0       	ldi	r22, 0x01	; 1
    3bd0:	c6 01       	movw	r24, r12
    3bd2:	0e 94 1a 19 	call	0x3234	; 0x3234 <_ZN6SdFile4syncEh>
    3bd6:	81 11       	cpse	r24, r1
    3bd8:	0d c0       	rjmp	.+26     	; 0x3bf4 <_ZN6SdFile5writeEPKvj+0x348>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    3bda:	81 e0       	ldi	r24, 0x01	; 1
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	d6 01       	movw	r26, r12
    3be0:	13 96       	adiw	r26, 0x03	; 3
    3be2:	9c 93       	st	X, r25
    3be4:	8e 93       	st	-X, r24
    3be6:	12 97       	sbiw	r26, 0x02	; 2

writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    3be8:	80 e0       	ldi	r24, 0x00	; 0
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	05 c0       	rjmp	.+10     	; 0x3bf8 <_ZN6SdFile5writeEPKvj+0x34c>
  if (flags_ & O_SYNC) {
    if (!sync()) {
      goto writeErrorReturn;
    }
  }
  return nbyte;
    3bee:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bf2:	02 c0       	rjmp	.+4      	; 0x3bf8 <_ZN6SdFile5writeEPKvj+0x34c>
    3bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf6:	9e 81       	ldd	r25, Y+6	; 0x06
writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    3bf8:	26 96       	adiw	r28, 0x06	; 6
    3bfa:	0f b6       	in	r0, 0x3f	; 63
    3bfc:	f8 94       	cli
    3bfe:	de bf       	out	0x3e, r29	; 62
    3c00:	0f be       	out	0x3f, r0	; 63
    3c02:	cd bf       	out	0x3d, r28	; 61
    3c04:	df 91       	pop	r29
    3c06:	cf 91       	pop	r28
    3c08:	1f 91       	pop	r17
    3c0a:	0f 91       	pop	r16
    3c0c:	ff 90       	pop	r15
    3c0e:	ef 90       	pop	r14
    3c10:	df 90       	pop	r13
    3c12:	cf 90       	pop	r12
    3c14:	bf 90       	pop	r11
    3c16:	af 90       	pop	r10
    3c18:	9f 90       	pop	r9
    3c1a:	8f 90       	pop	r8
    3c1c:	7f 90       	pop	r7
    3c1e:	6f 90       	pop	r6
    3c20:	5f 90       	pop	r5
    3c22:	4f 90       	pop	r4
    3c24:	3f 90       	pop	r3
    3c26:	08 95       	ret

00003c28 <_ZN6SdFile5writeEh>:
/**
   Write a byte to a file. Required by the Arduino Print class.

   Use SdFile::writeError to check for errors.
*/
size_t SdFile::write(uint8_t b) {
    3c28:	cf 93       	push	r28
    3c2a:	df 93       	push	r29
    3c2c:	1f 92       	push	r1
    3c2e:	cd b7       	in	r28, 0x3d	; 61
    3c30:	de b7       	in	r29, 0x3e	; 62
    3c32:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    3c34:	41 e0       	ldi	r20, 0x01	; 1
    3c36:	50 e0       	ldi	r21, 0x00	; 0
    3c38:	be 01       	movw	r22, r28
    3c3a:	6f 5f       	subi	r22, 0xFF	; 255
    3c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c3e:	0e 94 56 1c 	call	0x38ac	; 0x38ac <_ZN6SdFile5writeEPKvj>
}
    3c42:	0f 90       	pop	r0
    3c44:	df 91       	pop	r29
    3c46:	cf 91       	pop	r28
    3c48:	08 95       	ret

00003c4a <_ZN8SdVolume21cacheMirrorBlockFlushEh>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheMirrorBlockFlush(uint8_t blocking) {
    3c4a:	0f 93       	push	r16
  if (cacheMirrorBlock_) {
    3c4c:	40 91 d7 02 	lds	r20, 0x02D7	; 0x8002d7 <_ZN8SdVolume17cacheMirrorBlock_E>
    3c50:	50 91 d8 02 	lds	r21, 0x02D8	; 0x8002d8 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    3c54:	60 91 d9 02 	lds	r22, 0x02D9	; 0x8002d9 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    3c58:	70 91 da 02 	lds	r23, 0x02DA	; 0x8002da <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    3c5c:	41 15       	cp	r20, r1
    3c5e:	51 05       	cpc	r21, r1
    3c60:	61 05       	cpc	r22, r1
    3c62:	71 05       	cpc	r23, r1
    3c64:	a9 f0       	breq	.+42     	; 0x3c90 <_ZN8SdVolume21cacheMirrorBlockFlushEh+0x46>
    3c66:	08 2f       	mov	r16, r24
    if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data, blocking)) {
    3c68:	2e ed       	ldi	r18, 0xDE	; 222
    3c6a:	32 e0       	ldi	r19, 0x02	; 2
    3c6c:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <_ZN8SdVolume7sdCard_E>
    3c70:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <_ZN8SdVolume7sdCard_E+0x1>
    3c74:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <_ZN7Sd2Card10writeBlockEmPKhh>
    3c78:	88 23       	and	r24, r24
    3c7a:	59 f0       	breq	.+22     	; 0x3c92 <_ZN8SdVolume21cacheMirrorBlockFlushEh+0x48>
      return false;
    }
    cacheMirrorBlock_ = 0;
    3c7c:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <_ZN8SdVolume17cacheMirrorBlock_E>
    3c80:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    3c84:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    3c88:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  }
  return true;
    3c8c:	81 e0       	ldi	r24, 0x01	; 1
    3c8e:	01 c0       	rjmp	.+2      	; 0x3c92 <_ZN8SdVolume21cacheMirrorBlockFlushEh+0x48>
    3c90:	81 e0       	ldi	r24, 0x01	; 1
}
    3c92:	0f 91       	pop	r16
    3c94:	08 95       	ret

00003c96 <_ZN8SdVolume10cacheFlushEh>:
  }

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(uint8_t blocking) {
    3c96:	0f 93       	push	r16
    3c98:	cf 93       	push	r28
  if (cacheDirty_) {
    3c9a:	90 91 db 02 	lds	r25, 0x02DB	; 0x8002db <_ZN8SdVolume11cacheDirty_E>
    3c9e:	99 23       	and	r25, r25
    3ca0:	f9 f0       	breq	.+62     	; 0x3ce0 <_ZN8SdVolume10cacheFlushEh+0x4a>
    3ca2:	c8 2f       	mov	r28, r24
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data, blocking)) {
    3ca4:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    3ca8:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3cac:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3cb0:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3cb4:	08 2f       	mov	r16, r24
    3cb6:	2e ed       	ldi	r18, 0xDE	; 222
    3cb8:	32 e0       	ldi	r19, 0x02	; 2
    3cba:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <_ZN8SdVolume7sdCard_E>
    3cbe:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <_ZN8SdVolume7sdCard_E+0x1>
    3cc2:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <_ZN7Sd2Card10writeBlockEmPKhh>
    3cc6:	88 23       	and	r24, r24
    3cc8:	71 f0       	breq	.+28     	; 0x3ce6 <_ZN8SdVolume10cacheFlushEh+0x50>
      return false;
    }

    if (!blocking) {
    3cca:	cc 23       	and	r28, r28
    3ccc:	59 f0       	breq	.+22     	; 0x3ce4 <_ZN8SdVolume10cacheFlushEh+0x4e>
      return true;
    }

    // mirror FAT tables
    if (!cacheMirrorBlockFlush(blocking)) {
    3cce:	8c 2f       	mov	r24, r28
    3cd0:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <_ZN8SdVolume21cacheMirrorBlockFlushEh>
    3cd4:	88 23       	and	r24, r24
    3cd6:	39 f0       	breq	.+14     	; 0x3ce6 <_ZN8SdVolume10cacheFlushEh+0x50>
      return false;
    }
    cacheDirty_ = 0;
    3cd8:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <_ZN8SdVolume11cacheDirty_E>
  }
  return true;
    3cdc:	81 e0       	ldi	r24, 0x01	; 1
    3cde:	03 c0       	rjmp	.+6      	; 0x3ce6 <_ZN8SdVolume10cacheFlushEh+0x50>
    3ce0:	81 e0       	ldi	r24, 0x01	; 1
    3ce2:	01 c0       	rjmp	.+2      	; 0x3ce6 <_ZN8SdVolume10cacheFlushEh+0x50>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data, blocking)) {
      return false;
    }

    if (!blocking) {
      return true;
    3ce4:	81 e0       	ldi	r24, 0x01	; 1
      return false;
    }
    cacheDirty_ = 0;
  }
  return true;
}
    3ce6:	cf 91       	pop	r28
    3ce8:	0f 91       	pop	r16
    3cea:	08 95       	ret

00003cec <_ZN8SdVolume13cacheRawBlockEmh>:
    cacheMirrorBlock_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    3cec:	cf 92       	push	r12
    3cee:	df 92       	push	r13
    3cf0:	ef 92       	push	r14
    3cf2:	ff 92       	push	r15
    3cf4:	cf 93       	push	r28
    3cf6:	6b 01       	movw	r12, r22
    3cf8:	7c 01       	movw	r14, r24
    3cfa:	c4 2f       	mov	r28, r20
  if (cacheBlockNumber_ != blockNumber) {
    3cfc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    3d00:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3d04:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3d08:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3d0c:	8c 15       	cp	r24, r12
    3d0e:	9d 05       	cpc	r25, r13
    3d10:	ae 05       	cpc	r26, r14
    3d12:	bf 05       	cpc	r27, r15
    3d14:	c9 f0       	breq	.+50     	; 0x3d48 <_ZN8SdVolume13cacheRawBlockEmh+0x5c>
    if (!cacheFlush()) {
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <_ZN8SdVolume10cacheFlushEh>
    3d1c:	88 23       	and	r24, r24
    3d1e:	d1 f0       	breq	.+52     	; 0x3d54 <_ZN8SdVolume13cacheRawBlockEmh+0x68>
      return false;
    }
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) {
    3d20:	2e ed       	ldi	r18, 0xDE	; 222
    3d22:	32 e0       	ldi	r19, 0x02	; 2
    3d24:	b7 01       	movw	r22, r14
    3d26:	a6 01       	movw	r20, r12
    3d28:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <_ZN8SdVolume7sdCard_E>
    3d2c:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <_ZN8SdVolume7sdCard_E+0x1>
    3d30:	0e 94 c9 14 	call	0x2992	; 0x2992 <_ZN7Sd2Card9readBlockEmPh>
    3d34:	88 23       	and	r24, r24
    3d36:	71 f0       	breq	.+28     	; 0x3d54 <_ZN8SdVolume13cacheRawBlockEmh+0x68>
      return false;
    }
    cacheBlockNumber_ = blockNumber;
    3d38:	c0 92 09 01 	sts	0x0109, r12	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    3d3c:	d0 92 0a 01 	sts	0x010A, r13	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3d40:	e0 92 0b 01 	sts	0x010B, r14	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3d44:	f0 92 0c 01 	sts	0x010C, r15	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  }
  cacheDirty_ |= action;
    3d48:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <_ZN8SdVolume11cacheDirty_E>
    3d4c:	c8 2b       	or	r28, r24
    3d4e:	c0 93 db 02 	sts	0x02DB, r28	; 0x8002db <_ZN8SdVolume11cacheDirty_E>
  return true;
    3d52:	81 e0       	ldi	r24, 0x01	; 1
}
    3d54:	cf 91       	pop	r28
    3d56:	ff 90       	pop	r15
    3d58:	ef 90       	pop	r14
    3d5a:	df 90       	pop	r13
    3d5c:	cf 90       	pop	r12
    3d5e:	08 95       	ret

00003d60 <_ZN8SdVolume14cacheZeroBlockEm>:
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    3d60:	cf 92       	push	r12
    3d62:	df 92       	push	r13
    3d64:	ef 92       	push	r14
    3d66:	ff 92       	push	r15
    3d68:	6b 01       	movw	r12, r22
    3d6a:	7c 01       	movw	r14, r24
  if (!cacheFlush()) {
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <_ZN8SdVolume10cacheFlushEh>
    3d72:	88 23       	and	r24, r24
    3d74:	d1 f0       	breq	.+52     	; 0x3daa <_ZN8SdVolume14cacheZeroBlockEm+0x4a>
    3d76:	80 e0       	ldi	r24, 0x00	; 0
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    return false;
  }

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    3d7a:	81 15       	cp	r24, r1
    3d7c:	22 e0       	ldi	r18, 0x02	; 2
    3d7e:	92 07       	cpc	r25, r18
    3d80:	30 f4       	brcc	.+12     	; 0x3d8e <_ZN8SdVolume14cacheZeroBlockEm+0x2e>
    cacheBuffer_.data[i] = 0;
    3d82:	fc 01       	movw	r30, r24
    3d84:	e2 52       	subi	r30, 0x22	; 34
    3d86:	fd 4f       	sbci	r31, 0xFD	; 253
    3d88:	10 82       	st	Z, r1
  if (!cacheFlush()) {
    return false;
  }

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    3d8a:	01 96       	adiw	r24, 0x01	; 1
    3d8c:	f6 cf       	rjmp	.-20     	; 0x3d7a <_ZN8SdVolume14cacheZeroBlockEm+0x1a>
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    3d8e:	c0 92 09 01 	sts	0x0109, r12	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    3d92:	d0 92 0a 01 	sts	0x010A, r13	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3d96:	e0 92 0b 01 	sts	0x010B, r14	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3d9a:	f0 92 0c 01 	sts	0x010C, r15	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3d9e:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <_ZN8SdVolume11cacheDirty_E>
    3da2:	81 60       	ori	r24, 0x01	; 1
    3da4:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <_ZN8SdVolume11cacheDirty_E>
  cacheSetDirty();
  return true;
    3da8:	81 e0       	ldi	r24, 0x01	; 1
}
    3daa:	ff 90       	pop	r15
    3dac:	ef 90       	pop	r14
    3dae:	df 90       	pop	r13
    3db0:	cf 90       	pop	r12
    3db2:	08 95       	ret

00003db4 <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    3db4:	8f 92       	push	r8
    3db6:	9f 92       	push	r9
    3db8:	af 92       	push	r10
    3dba:	bf 92       	push	r11
    3dbc:	cf 92       	push	r12
    3dbe:	df 92       	push	r13
    3dc0:	ef 92       	push	r14
    3dc2:	ff 92       	push	r15
    3dc4:	0f 93       	push	r16
    3dc6:	1f 93       	push	r17
    3dc8:	cf 93       	push	r28
    3dca:	df 93       	push	r29
    3dcc:	fc 01       	movw	r30, r24
    3dce:	e9 01       	movw	r28, r18
  if (cluster > (clusterCount_ + 1)) {
    3dd0:	01 85       	ldd	r16, Z+9	; 0x09
    3dd2:	12 85       	ldd	r17, Z+10	; 0x0a
    3dd4:	23 85       	ldd	r18, Z+11	; 0x0b
    3dd6:	34 85       	ldd	r19, Z+12	; 0x0c
    3dd8:	0f 5f       	subi	r16, 0xFF	; 255
    3dda:	1f 4f       	sbci	r17, 0xFF	; 255
    3ddc:	2f 4f       	sbci	r18, 0xFF	; 255
    3dde:	3f 4f       	sbci	r19, 0xFF	; 255
    3de0:	04 17       	cp	r16, r20
    3de2:	15 07       	cpc	r17, r21
    3de4:	26 07       	cpc	r18, r22
    3de6:	37 07       	cpc	r19, r23
    3de8:	08 f4       	brcc	.+2      	; 0x3dec <_ZNK8SdVolume6fatGetEmPm+0x38>
    3dea:	61 c0       	rjmp	.+194    	; 0x3eae <_ZNK8SdVolume6fatGetEmPm+0xfa>
    return false;
  }
  uint32_t lba = fatStartBlock_;
    3dec:	83 89       	ldd	r24, Z+19	; 0x13
    3dee:	94 89       	ldd	r25, Z+20	; 0x14
    3df0:	a5 89       	ldd	r26, Z+21	; 0x15
    3df2:	b6 89       	ldd	r27, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3df4:	27 89       	ldd	r18, Z+23	; 0x17
    3df6:	20 31       	cpi	r18, 0x10	; 16
    3df8:	29 f4       	brne	.+10     	; 0x3e04 <_ZNK8SdVolume6fatGetEmPm+0x50>
    3dfa:	85 2e       	mov	r8, r21
    3dfc:	96 2e       	mov	r9, r22
    3dfe:	a7 2e       	mov	r10, r23
    3e00:	bb 24       	eor	r11, r11
    3e02:	0a c0       	rjmp	.+20     	; 0x3e18 <_ZNK8SdVolume6fatGetEmPm+0x64>
    3e04:	4a 01       	movw	r8, r20
    3e06:	5b 01       	movw	r10, r22
    3e08:	68 94       	set
    3e0a:	16 f8       	bld	r1, 6
    3e0c:	b6 94       	lsr	r11
    3e0e:	a7 94       	ror	r10
    3e10:	97 94       	ror	r9
    3e12:	87 94       	ror	r8
    3e14:	16 94       	lsr	r1
    3e16:	d1 f7       	brne	.-12     	; 0x3e0c <_ZNK8SdVolume6fatGetEmPm+0x58>
    3e18:	6a 01       	movw	r12, r20
    3e1a:	7b 01       	movw	r14, r22
    3e1c:	8f 01       	movw	r16, r30
    3e1e:	bc 01       	movw	r22, r24
    3e20:	cd 01       	movw	r24, r26
    3e22:	68 0d       	add	r22, r8
    3e24:	79 1d       	adc	r23, r9
    3e26:	8a 1d       	adc	r24, r10
    3e28:	9b 1d       	adc	r25, r11
  if (lba != cacheBlockNumber_) {
    3e2a:	80 90 09 01 	lds	r8, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    3e2e:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    3e32:	a0 90 0b 01 	lds	r10, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    3e36:	b0 90 0c 01 	lds	r11, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    3e3a:	68 15       	cp	r22, r8
    3e3c:	79 05       	cpc	r23, r9
    3e3e:	8a 05       	cpc	r24, r10
    3e40:	9b 05       	cpc	r25, r11
    3e42:	29 f0       	breq	.+10     	; 0x3e4e <_ZNK8SdVolume6fatGetEmPm+0x9a>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) {
    3e44:	40 e0       	ldi	r20, 0x00	; 0
    3e46:	0e 94 76 1e 	call	0x3cec	; 0x3cec <_ZN8SdVolume13cacheRawBlockEmh>
    3e4a:	88 23       	and	r24, r24
    3e4c:	89 f1       	breq	.+98     	; 0x3eb0 <_ZNK8SdVolume6fatGetEmPm+0xfc>
      return false;
    }
  }
  if (fatType_ == 16) {
    3e4e:	f8 01       	movw	r30, r16
    3e50:	87 89       	ldd	r24, Z+23	; 0x17
    3e52:	80 31       	cpi	r24, 0x10	; 16
    3e54:	a1 f4       	brne	.+40     	; 0x3e7e <_ZNK8SdVolume6fatGetEmPm+0xca>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    3e56:	b7 01       	movw	r22, r14
    3e58:	a6 01       	movw	r20, r12
    3e5a:	55 27       	eor	r21, r21
    3e5c:	66 27       	eor	r22, r22
    3e5e:	77 27       	eor	r23, r23
    3e60:	44 0f       	add	r20, r20
    3e62:	55 1f       	adc	r21, r21
    3e64:	fa 01       	movw	r30, r20
    3e66:	e2 52       	subi	r30, 0x22	; 34
    3e68:	fd 4f       	sbci	r31, 0xFD	; 253
    3e6a:	80 81       	ld	r24, Z
    3e6c:	91 81       	ldd	r25, Z+1	; 0x01
    3e6e:	a0 e0       	ldi	r26, 0x00	; 0
    3e70:	b0 e0       	ldi	r27, 0x00	; 0
    3e72:	88 83       	st	Y, r24
    3e74:	99 83       	std	Y+1, r25	; 0x01
    3e76:	aa 83       	std	Y+2, r26	; 0x02
    3e78:	bb 83       	std	Y+3, r27	; 0x03
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
    3e7a:	81 e0       	ldi	r24, 0x01	; 1
    3e7c:	19 c0       	rjmp	.+50     	; 0x3eb0 <_ZNK8SdVolume6fatGetEmPm+0xfc>
    }
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    3e7e:	b7 01       	movw	r22, r14
    3e80:	a6 01       	movw	r20, r12
    3e82:	4f 77       	andi	r20, 0x7F	; 127
    3e84:	55 27       	eor	r21, r21
    3e86:	66 27       	eor	r22, r22
    3e88:	77 27       	eor	r23, r23
    3e8a:	44 0f       	add	r20, r20
    3e8c:	55 1f       	adc	r21, r21
    3e8e:	44 0f       	add	r20, r20
    3e90:	55 1f       	adc	r21, r21
    3e92:	fa 01       	movw	r30, r20
    3e94:	e2 52       	subi	r30, 0x22	; 34
    3e96:	fd 4f       	sbci	r31, 0xFD	; 253
    3e98:	80 81       	ld	r24, Z
    3e9a:	91 81       	ldd	r25, Z+1	; 0x01
    3e9c:	a2 81       	ldd	r26, Z+2	; 0x02
    3e9e:	b3 81       	ldd	r27, Z+3	; 0x03
    3ea0:	bf 70       	andi	r27, 0x0F	; 15
    3ea2:	88 83       	st	Y, r24
    3ea4:	99 83       	std	Y+1, r25	; 0x01
    3ea6:	aa 83       	std	Y+2, r26	; 0x02
    3ea8:	bb 83       	std	Y+3, r27	; 0x03
  }
  return true;
    3eaa:	81 e0       	ldi	r24, 0x01	; 1
    3eac:	01 c0       	rjmp	.+2      	; 0x3eb0 <_ZNK8SdVolume6fatGetEmPm+0xfc>
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) {
    return false;
    3eae:	80 e0       	ldi	r24, 0x00	; 0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    3eb0:	df 91       	pop	r29
    3eb2:	cf 91       	pop	r28
    3eb4:	1f 91       	pop	r17
    3eb6:	0f 91       	pop	r16
    3eb8:	ff 90       	pop	r15
    3eba:	ef 90       	pop	r14
    3ebc:	df 90       	pop	r13
    3ebe:	cf 90       	pop	r12
    3ec0:	bf 90       	pop	r11
    3ec2:	af 90       	pop	r10
    3ec4:	9f 90       	pop	r9
    3ec6:	8f 90       	pop	r8
    3ec8:	08 95       	ret

00003eca <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    3eca:	8f 92       	push	r8
    3ecc:	9f 92       	push	r9
    3ece:	af 92       	push	r10
    3ed0:	bf 92       	push	r11
    3ed2:	ef 92       	push	r14
    3ed4:	ff 92       	push	r15
    3ed6:	0f 93       	push	r16
    3ed8:	1f 93       	push	r17
    3eda:	cf 93       	push	r28
    3edc:	df 93       	push	r29
    3ede:	00 d0       	rcall	.+0      	; 0x3ee0 <_ZNK8SdVolume9chainSizeEmPm+0x16>
    3ee0:	00 d0       	rcall	.+0      	; 0x3ee2 <_ZNK8SdVolume9chainSizeEmPm+0x18>
    3ee2:	cd b7       	in	r28, 0x3d	; 61
    3ee4:	de b7       	in	r29, 0x3e	; 62
    3ee6:	8c 01       	movw	r16, r24
    3ee8:	49 83       	std	Y+1, r20	; 0x01
    3eea:	5a 83       	std	Y+2, r21	; 0x02
    3eec:	6b 83       	std	Y+3, r22	; 0x03
    3eee:	7c 83       	std	Y+4, r23	; 0x04
    3ef0:	79 01       	movw	r14, r18
  uint32_t s = 0;
    3ef2:	81 2c       	mov	r8, r1
    3ef4:	91 2c       	mov	r9, r1
    3ef6:	54 01       	movw	r10, r8
  do {
    if (!fatGet(cluster, &cluster)) {
    3ef8:	49 81       	ldd	r20, Y+1	; 0x01
    3efa:	5a 81       	ldd	r21, Y+2	; 0x02
    3efc:	6b 81       	ldd	r22, Y+3	; 0x03
    3efe:	7c 81       	ldd	r23, Y+4	; 0x04
    3f00:	9e 01       	movw	r18, r28
    3f02:	2f 5f       	subi	r18, 0xFF	; 255
    3f04:	3f 4f       	sbci	r19, 0xFF	; 255
    3f06:	c8 01       	movw	r24, r16
    3f08:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <_ZNK8SdVolume6fatGetEmPm>
    3f0c:	88 23       	and	r24, r24
    3f0e:	61 f1       	breq	.+88     	; 0x3f68 <_ZNK8SdVolume9chainSizeEmPm+0x9e>
      return false;
    }
    s += 512UL << clusterSizeShift_;
    3f10:	80 e0       	ldi	r24, 0x00	; 0
    3f12:	92 e0       	ldi	r25, 0x02	; 2
    3f14:	a0 e0       	ldi	r26, 0x00	; 0
    3f16:	b0 e0       	ldi	r27, 0x00	; 0
    3f18:	f8 01       	movw	r30, r16
    3f1a:	05 84       	ldd	r0, Z+13	; 0x0d
    3f1c:	04 c0       	rjmp	.+8      	; 0x3f26 <_ZNK8SdVolume9chainSizeEmPm+0x5c>
    3f1e:	88 0f       	add	r24, r24
    3f20:	99 1f       	adc	r25, r25
    3f22:	aa 1f       	adc	r26, r26
    3f24:	bb 1f       	adc	r27, r27
    3f26:	0a 94       	dec	r0
    3f28:	d2 f7       	brpl	.-12     	; 0x3f1e <_ZNK8SdVolume9chainSizeEmPm+0x54>
    3f2a:	88 0e       	add	r8, r24
    3f2c:	99 1e       	adc	r9, r25
    3f2e:	aa 1e       	adc	r10, r26
    3f30:	bb 1e       	adc	r11, r27
  } while (!isEOC(cluster));
    3f32:	89 81       	ldd	r24, Y+1	; 0x01
    3f34:	9a 81       	ldd	r25, Y+2	; 0x02
    3f36:	ab 81       	ldd	r26, Y+3	; 0x03
    3f38:	bc 81       	ldd	r27, Y+4	; 0x04
    uint8_t fatPutEOC(uint32_t cluster) {
      return fatPut(cluster, 0x0FFFFFFF);
    }
    uint8_t freeChain(uint32_t cluster);
    uint8_t isEOC(uint32_t cluster) const {
      return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    3f3a:	27 89       	ldd	r18, Z+23	; 0x17
    3f3c:	20 31       	cpi	r18, 0x10	; 16
    3f3e:	29 f4       	brne	.+10     	; 0x3f4a <_ZNK8SdVolume9chainSizeEmPm+0x80>
    3f40:	48 ef       	ldi	r20, 0xF8	; 248
    3f42:	5f ef       	ldi	r21, 0xFF	; 255
    3f44:	60 e0       	ldi	r22, 0x00	; 0
    3f46:	70 e0       	ldi	r23, 0x00	; 0
    3f48:	04 c0       	rjmp	.+8      	; 0x3f52 <_ZNK8SdVolume9chainSizeEmPm+0x88>
    3f4a:	48 ef       	ldi	r20, 0xF8	; 248
    3f4c:	5f ef       	ldi	r21, 0xFF	; 255
    3f4e:	6f ef       	ldi	r22, 0xFF	; 255
    3f50:	7f e0       	ldi	r23, 0x0F	; 15
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    3f52:	84 17       	cp	r24, r20
    3f54:	95 07       	cpc	r25, r21
    3f56:	a6 07       	cpc	r26, r22
    3f58:	b7 07       	cpc	r27, r23
    3f5a:	70 f2       	brcs	.-100    	; 0x3ef8 <_ZNK8SdVolume9chainSizeEmPm+0x2e>
    if (!fatGet(cluster, &cluster)) {
      return false;
    }
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    3f5c:	f7 01       	movw	r30, r14
    3f5e:	80 82       	st	Z, r8
    3f60:	91 82       	std	Z+1, r9	; 0x01
    3f62:	a2 82       	std	Z+2, r10	; 0x02
    3f64:	b3 82       	std	Z+3, r11	; 0x03
  return true;
    3f66:	81 e0       	ldi	r24, 0x01	; 1
}
    3f68:	0f 90       	pop	r0
    3f6a:	0f 90       	pop	r0
    3f6c:	0f 90       	pop	r0
    3f6e:	0f 90       	pop	r0
    3f70:	df 91       	pop	r29
    3f72:	cf 91       	pop	r28
    3f74:	1f 91       	pop	r17
    3f76:	0f 91       	pop	r16
    3f78:	ff 90       	pop	r15
    3f7a:	ef 90       	pop	r14
    3f7c:	bf 90       	pop	r11
    3f7e:	af 90       	pop	r10
    3f80:	9f 90       	pop	r9
    3f82:	8f 90       	pop	r8
    3f84:	08 95       	ret

00003f86 <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    3f86:	4f 92       	push	r4
    3f88:	5f 92       	push	r5
    3f8a:	6f 92       	push	r6
    3f8c:	7f 92       	push	r7
    3f8e:	8f 92       	push	r8
    3f90:	9f 92       	push	r9
    3f92:	af 92       	push	r10
    3f94:	bf 92       	push	r11
    3f96:	cf 92       	push	r12
    3f98:	df 92       	push	r13
    3f9a:	ef 92       	push	r14
    3f9c:	ff 92       	push	r15
    3f9e:	0f 93       	push	r16
    3fa0:	1f 93       	push	r17
    3fa2:	cf 93       	push	r28
    3fa4:	df 93       	push	r29
    3fa6:	00 d0       	rcall	.+0      	; 0x3fa8 <_ZN8SdVolume6fatPutEmm+0x22>
    3fa8:	00 d0       	rcall	.+0      	; 0x3faa <_ZN8SdVolume6fatPutEmm+0x24>
    3faa:	00 d0       	rcall	.+0      	; 0x3fac <_ZN8SdVolume6fatPutEmm+0x26>
    3fac:	cd b7       	in	r28, 0x3d	; 61
    3fae:	de b7       	in	r29, 0x3e	; 62
  // error if reserved cluster
  if (cluster < 2) {
    3fb0:	42 30       	cpi	r20, 0x02	; 2
    3fb2:	51 05       	cpc	r21, r1
    3fb4:	61 05       	cpc	r22, r1
    3fb6:	71 05       	cpc	r23, r1
    3fb8:	08 f4       	brcc	.+2      	; 0x3fbc <_ZN8SdVolume6fatPutEmm+0x36>
    3fba:	94 c0       	rjmp	.+296    	; 0x40e4 <_ZN8SdVolume6fatPutEmm+0x15e>
    return false;
  }

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) {
    3fbc:	dc 01       	movw	r26, r24
    3fbe:	19 96       	adiw	r26, 0x09	; 9
    3fc0:	cd 90       	ld	r12, X+
    3fc2:	dd 90       	ld	r13, X+
    3fc4:	ed 90       	ld	r14, X+
    3fc6:	fc 90       	ld	r15, X
    3fc8:	1c 97       	sbiw	r26, 0x0c	; 12
    3fca:	bf ef       	ldi	r27, 0xFF	; 255
    3fcc:	cb 1a       	sub	r12, r27
    3fce:	db 0a       	sbc	r13, r27
    3fd0:	eb 0a       	sbc	r14, r27
    3fd2:	fb 0a       	sbc	r15, r27
    3fd4:	c4 16       	cp	r12, r20
    3fd6:	d5 06       	cpc	r13, r21
    3fd8:	e6 06       	cpc	r14, r22
    3fda:	f7 06       	cpc	r15, r23
    3fdc:	08 f4       	brcc	.+2      	; 0x3fe0 <_ZN8SdVolume6fatPutEmm+0x5a>
    3fde:	84 c0       	rjmp	.+264    	; 0x40e8 <_ZN8SdVolume6fatPutEmm+0x162>
    return false;
  }

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    3fe0:	fc 01       	movw	r30, r24
    3fe2:	43 88       	ldd	r4, Z+19	; 0x13
    3fe4:	54 88       	ldd	r5, Z+20	; 0x14
    3fe6:	65 88       	ldd	r6, Z+21	; 0x15
    3fe8:	76 88       	ldd	r7, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    3fea:	e7 89       	ldd	r30, Z+23	; 0x17
    3fec:	e0 31       	cpi	r30, 0x10	; 16
    3fee:	29 f4       	brne	.+10     	; 0x3ffa <_ZN8SdVolume6fatPutEmm+0x74>
    3ff0:	85 2e       	mov	r8, r21
    3ff2:	96 2e       	mov	r9, r22
    3ff4:	a7 2e       	mov	r10, r23
    3ff6:	bb 24       	eor	r11, r11
    3ff8:	0a c0       	rjmp	.+20     	; 0x400e <_ZN8SdVolume6fatPutEmm+0x88>
    3ffa:	4a 01       	movw	r8, r20
    3ffc:	5b 01       	movw	r10, r22
    3ffe:	68 94       	set
    4000:	16 f8       	bld	r1, 6
    4002:	b6 94       	lsr	r11
    4004:	a7 94       	ror	r10
    4006:	97 94       	ror	r9
    4008:	87 94       	ror	r8
    400a:	16 94       	lsr	r1
    400c:	d1 f7       	brne	.-12     	; 0x4002 <_ZN8SdVolume6fatPutEmm+0x7c>
    400e:	09 83       	std	Y+1, r16	; 0x01
    4010:	1a 83       	std	Y+2, r17	; 0x02
    4012:	2b 83       	std	Y+3, r18	; 0x03
    4014:	3c 83       	std	Y+4, r19	; 0x04
    4016:	6a 01       	movw	r12, r20
    4018:	7b 01       	movw	r14, r22
    401a:	9e 83       	std	Y+6, r25	; 0x06
    401c:	8d 83       	std	Y+5, r24	; 0x05
    401e:	48 0c       	add	r4, r8
    4020:	59 1c       	adc	r5, r9
    4022:	6a 1c       	adc	r6, r10
    4024:	7b 1c       	adc	r7, r11

  if (lba != cacheBlockNumber_) {
    4026:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E>
    402a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    402e:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    4032:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    4036:	48 16       	cp	r4, r24
    4038:	59 06       	cpc	r5, r25
    403a:	6a 06       	cpc	r6, r26
    403c:	7b 06       	cpc	r7, r27
    403e:	41 f0       	breq	.+16     	; 0x4050 <_ZN8SdVolume6fatPutEmm+0xca>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) {
    4040:	40 e0       	ldi	r20, 0x00	; 0
    4042:	c3 01       	movw	r24, r6
    4044:	b2 01       	movw	r22, r4
    4046:	0e 94 76 1e 	call	0x3cec	; 0x3cec <_ZN8SdVolume13cacheRawBlockEmh>
    404a:	88 23       	and	r24, r24
    404c:	09 f4       	brne	.+2      	; 0x4050 <_ZN8SdVolume6fatPutEmm+0xca>
    404e:	4f c0       	rjmp	.+158    	; 0x40ee <_ZN8SdVolume6fatPutEmm+0x168>
      return false;
    }
  }
  // store entry
  if (fatType_ == 16) {
    4050:	ad 81       	ldd	r26, Y+5	; 0x05
    4052:	be 81       	ldd	r27, Y+6	; 0x06
    4054:	57 96       	adiw	r26, 0x17	; 23
    4056:	8c 91       	ld	r24, X
    4058:	80 31       	cpi	r24, 0x10	; 16
    405a:	79 f4       	brne	.+30     	; 0x407a <_ZN8SdVolume6fatPutEmm+0xf4>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    405c:	b7 01       	movw	r22, r14
    405e:	a6 01       	movw	r20, r12
    4060:	55 27       	eor	r21, r21
    4062:	66 27       	eor	r22, r22
    4064:	77 27       	eor	r23, r23
    4066:	44 0f       	add	r20, r20
    4068:	55 1f       	adc	r21, r21
    406a:	fa 01       	movw	r30, r20
    406c:	e2 52       	subi	r30, 0x22	; 34
    406e:	fd 4f       	sbci	r31, 0xFD	; 253
    4070:	89 81       	ldd	r24, Y+1	; 0x01
    4072:	9a 81       	ldd	r25, Y+2	; 0x02
    4074:	91 83       	std	Z+1, r25	; 0x01
    4076:	80 83       	st	Z, r24
    4078:	15 c0       	rjmp	.+42     	; 0x40a4 <_ZN8SdVolume6fatPutEmm+0x11e>
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    407a:	b7 01       	movw	r22, r14
    407c:	a6 01       	movw	r20, r12
    407e:	4f 77       	andi	r20, 0x7F	; 127
    4080:	55 27       	eor	r21, r21
    4082:	66 27       	eor	r22, r22
    4084:	77 27       	eor	r23, r23
    4086:	44 0f       	add	r20, r20
    4088:	55 1f       	adc	r21, r21
    408a:	44 0f       	add	r20, r20
    408c:	55 1f       	adc	r21, r21
    408e:	fa 01       	movw	r30, r20
    4090:	e2 52       	subi	r30, 0x22	; 34
    4092:	fd 4f       	sbci	r31, 0xFD	; 253
    4094:	89 81       	ldd	r24, Y+1	; 0x01
    4096:	9a 81       	ldd	r25, Y+2	; 0x02
    4098:	ab 81       	ldd	r26, Y+3	; 0x03
    409a:	bc 81       	ldd	r27, Y+4	; 0x04
    409c:	80 83       	st	Z, r24
    409e:	91 83       	std	Z+1, r25	; 0x01
    40a0:	a2 83       	std	Z+2, r26	; 0x02
    40a2:	b3 83       	std	Z+3, r27	; 0x03
    }
    static uint8_t cacheFlush(uint8_t blocking = 1);
    static uint8_t cacheMirrorBlockFlush(uint8_t blocking);
    static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
    static void cacheSetDirty(void) {
      cacheDirty_ |= CACHE_FOR_WRITE;
    40a4:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <_ZN8SdVolume11cacheDirty_E>
    40a8:	81 60       	ori	r24, 0x01	; 1
    40aa:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <_ZN8SdVolume11cacheDirty_E>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) {
    40ae:	ad 81       	ldd	r26, Y+5	; 0x05
    40b0:	be 81       	ldd	r27, Y+6	; 0x06
    40b2:	52 96       	adiw	r26, 0x12	; 18
    40b4:	8c 91       	ld	r24, X
    40b6:	52 97       	sbiw	r26, 0x12	; 18
    40b8:	82 30       	cpi	r24, 0x02	; 2
    40ba:	c0 f0       	brcs	.+48     	; 0x40ec <_ZN8SdVolume6fatPutEmm+0x166>
    cacheMirrorBlock_ = lba + blocksPerFat_;
    40bc:	15 96       	adiw	r26, 0x05	; 5
    40be:	8d 91       	ld	r24, X+
    40c0:	9d 91       	ld	r25, X+
    40c2:	0d 90       	ld	r0, X+
    40c4:	bc 91       	ld	r27, X
    40c6:	a0 2d       	mov	r26, r0
    40c8:	48 0e       	add	r4, r24
    40ca:	59 1e       	adc	r5, r25
    40cc:	6a 1e       	adc	r6, r26
    40ce:	7b 1e       	adc	r7, r27
    40d0:	40 92 d7 02 	sts	0x02D7, r4	; 0x8002d7 <_ZN8SdVolume17cacheMirrorBlock_E>
    40d4:	50 92 d8 02 	sts	0x02D8, r5	; 0x8002d8 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    40d8:	60 92 d9 02 	sts	0x02D9, r6	; 0x8002d9 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    40dc:	70 92 da 02 	sts	0x02DA, r7	; 0x8002da <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  }
  return true;
    40e0:	81 e0       	ldi	r24, 0x01	; 1
    40e2:	05 c0       	rjmp	.+10     	; 0x40ee <_ZN8SdVolume6fatPutEmm+0x168>
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) {
    return false;
    40e4:	80 e0       	ldi	r24, 0x00	; 0
    40e6:	03 c0       	rjmp	.+6      	; 0x40ee <_ZN8SdVolume6fatPutEmm+0x168>
  }

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) {
    return false;
    40e8:	80 e0       	ldi	r24, 0x00	; 0
    40ea:	01 c0       	rjmp	.+2      	; 0x40ee <_ZN8SdVolume6fatPutEmm+0x168>

  // mirror second FAT
  if (fatCount_ > 1) {
    cacheMirrorBlock_ = lba + blocksPerFat_;
  }
  return true;
    40ec:	81 e0       	ldi	r24, 0x01	; 1
}
    40ee:	26 96       	adiw	r28, 0x06	; 6
    40f0:	0f b6       	in	r0, 0x3f	; 63
    40f2:	f8 94       	cli
    40f4:	de bf       	out	0x3e, r29	; 62
    40f6:	0f be       	out	0x3f, r0	; 63
    40f8:	cd bf       	out	0x3d, r28	; 61
    40fa:	df 91       	pop	r29
    40fc:	cf 91       	pop	r28
    40fe:	1f 91       	pop	r17
    4100:	0f 91       	pop	r16
    4102:	ff 90       	pop	r15
    4104:	ef 90       	pop	r14
    4106:	df 90       	pop	r13
    4108:	cf 90       	pop	r12
    410a:	bf 90       	pop	r11
    410c:	af 90       	pop	r10
    410e:	9f 90       	pop	r9
    4110:	8f 90       	pop	r8
    4112:	7f 90       	pop	r7
    4114:	6f 90       	pop	r6
    4116:	5f 90       	pop	r5
    4118:	4f 90       	pop	r4
    411a:	08 95       	ret

0000411c <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    411c:	2f 92       	push	r2
    411e:	3f 92       	push	r3
    4120:	4f 92       	push	r4
    4122:	5f 92       	push	r5
    4124:	6f 92       	push	r6
    4126:	7f 92       	push	r7
    4128:	8f 92       	push	r8
    412a:	9f 92       	push	r9
    412c:	af 92       	push	r10
    412e:	bf 92       	push	r11
    4130:	cf 92       	push	r12
    4132:	df 92       	push	r13
    4134:	ef 92       	push	r14
    4136:	ff 92       	push	r15
    4138:	0f 93       	push	r16
    413a:	1f 93       	push	r17
    413c:	cf 93       	push	r28
    413e:	df 93       	push	r29
    4140:	cd b7       	in	r28, 0x3d	; 61
    4142:	de b7       	in	r29, 0x3e	; 62
    4144:	2f 97       	sbiw	r28, 0x0f	; 15
    4146:	0f b6       	in	r0, 0x3f	; 63
    4148:	f8 94       	cli
    414a:	de bf       	out	0x3e, r29	; 62
    414c:	0f be       	out	0x3f, r0	; 63
    414e:	cd bf       	out	0x3d, r28	; 61
    4150:	1c 01       	movw	r2, r24
    4152:	49 87       	std	Y+9, r20	; 0x09
    4154:	5a 87       	std	Y+10, r21	; 0x0a
    4156:	6b 87       	std	Y+11, r22	; 0x0b
    4158:	7c 87       	std	Y+12, r23	; 0x0c
    415a:	3e 87       	std	Y+14, r19	; 0x0e
    415c:	2d 87       	std	Y+13, r18	; 0x0d

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    415e:	d9 01       	movw	r26, r18
    4160:	4d 90       	ld	r4, X+
    4162:	5d 90       	ld	r5, X+
    4164:	6d 90       	ld	r6, X+
    4166:	7c 90       	ld	r7, X
    4168:	41 14       	cp	r4, r1
    416a:	51 04       	cpc	r5, r1
    416c:	61 04       	cpc	r6, r1
    416e:	71 04       	cpc	r7, r1
    4170:	39 f0       	breq	.+14     	; 0x4180 <_ZN8SdVolume15allocContiguousEmPm+0x64>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    4172:	bf ef       	ldi	r27, 0xFF	; 255
    4174:	4b 1a       	sub	r4, r27
    4176:	5b 0a       	sbc	r5, r27
    4178:	6b 0a       	sbc	r6, r27
    417a:	7b 0a       	sbc	r7, r27

    // don't save new start location
    setStart = false;
    417c:	1f 86       	std	Y+15, r1	; 0x0f
    417e:	11 c0       	rjmp	.+34     	; 0x41a2 <_ZN8SdVolume15allocContiguousEmPm+0x86>
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    4180:	fc 01       	movw	r30, r24
    4182:	40 80       	ld	r4, Z
    4184:	51 80       	ldd	r5, Z+1	; 0x01
    4186:	62 80       	ldd	r6, Z+2	; 0x02
    4188:	73 80       	ldd	r7, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    418a:	81 e0       	ldi	r24, 0x01	; 1
    418c:	29 85       	ldd	r18, Y+9	; 0x09
    418e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4190:	4b 85       	ldd	r20, Y+11	; 0x0b
    4192:	5c 85       	ldd	r21, Y+12	; 0x0c
    4194:	21 30       	cpi	r18, 0x01	; 1
    4196:	31 05       	cpc	r19, r1
    4198:	41 05       	cpc	r20, r1
    419a:	51 05       	cpc	r21, r1
    419c:	09 f0       	breq	.+2      	; 0x41a0 <_ZN8SdVolume15allocContiguousEmPm+0x84>
    419e:	80 e0       	ldi	r24, 0x00	; 0
    41a0:	8f 87       	std	Y+15, r24	; 0x0f
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    41a2:	f1 01       	movw	r30, r2
    41a4:	81 85       	ldd	r24, Z+9	; 0x09
    41a6:	92 85       	ldd	r25, Z+10	; 0x0a
    41a8:	a3 85       	ldd	r26, Z+11	; 0x0b
    41aa:	b4 85       	ldd	r27, Z+12	; 0x0c
    41ac:	9c 01       	movw	r18, r24
    41ae:	ad 01       	movw	r20, r26
    41b0:	2f 5f       	subi	r18, 0xFF	; 255
    41b2:	3f 4f       	sbci	r19, 0xFF	; 255
    41b4:	4f 4f       	sbci	r20, 0xFF	; 255
    41b6:	5f 4f       	sbci	r21, 0xFF	; 255
    41b8:	2d 83       	std	Y+5, r18	; 0x05
    41ba:	3e 83       	std	Y+6, r19	; 0x06
    41bc:	4f 83       	std	Y+7, r20	; 0x07
    41be:	58 87       	std	Y+8, r21	; 0x08

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    41c0:	73 01       	movw	r14, r6
    41c2:	62 01       	movw	r12, r4

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    41c4:	81 2c       	mov	r8, r1
    41c6:	91 2c       	mov	r9, r1
    41c8:	54 01       	movw	r10, r8
    // can't find space checked all clusters
    if (n >= clusterCount_) {
    41ca:	f1 01       	movw	r30, r2
    41cc:	81 85       	ldd	r24, Z+9	; 0x09
    41ce:	92 85       	ldd	r25, Z+10	; 0x0a
    41d0:	a3 85       	ldd	r26, Z+11	; 0x0b
    41d2:	b4 85       	ldd	r27, Z+12	; 0x0c
    41d4:	88 16       	cp	r8, r24
    41d6:	99 06       	cpc	r9, r25
    41d8:	aa 06       	cpc	r10, r26
    41da:	bb 06       	cpc	r11, r27
    41dc:	08 f0       	brcs	.+2      	; 0x41e0 <_ZN8SdVolume15allocContiguousEmPm+0xc4>
    41de:	4a c0       	rjmp	.+148    	; 0x4274 <_ZN8SdVolume15allocContiguousEmPm+0x158>
      return false;
    }

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    41e0:	2d 81       	ldd	r18, Y+5	; 0x05
    41e2:	3e 81       	ldd	r19, Y+6	; 0x06
    41e4:	4f 81       	ldd	r20, Y+7	; 0x07
    41e6:	58 85       	ldd	r21, Y+8	; 0x08
    41e8:	2c 15       	cp	r18, r12
    41ea:	3d 05       	cpc	r19, r13
    41ec:	4e 05       	cpc	r20, r14
    41ee:	5f 05       	cpc	r21, r15
    41f0:	50 f4       	brcc	.+20     	; 0x4206 <_ZN8SdVolume15allocContiguousEmPm+0xea>
      bgnCluster = endCluster = 2;
    41f2:	c1 2c       	mov	r12, r1
    41f4:	d1 2c       	mov	r13, r1
    41f6:	76 01       	movw	r14, r12
    41f8:	68 94       	set
    41fa:	c1 f8       	bld	r12, 1
    41fc:	41 2c       	mov	r4, r1
    41fe:	51 2c       	mov	r5, r1
    4200:	32 01       	movw	r6, r4
    4202:	68 94       	set
    4204:	41 f8       	bld	r4, 1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) {
    4206:	9e 01       	movw	r18, r28
    4208:	2f 5f       	subi	r18, 0xFF	; 255
    420a:	3f 4f       	sbci	r19, 0xFF	; 255
    420c:	b7 01       	movw	r22, r14
    420e:	a6 01       	movw	r20, r12
    4210:	c1 01       	movw	r24, r2
    4212:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <_ZNK8SdVolume6fatGetEmPm>
    4216:	88 23       	and	r24, r24
    4218:	69 f1       	breq	.+90     	; 0x4274 <_ZN8SdVolume15allocContiguousEmPm+0x158>
      return false;
    }

    if (f != 0) {
    421a:	89 81       	ldd	r24, Y+1	; 0x01
    421c:	9a 81       	ldd	r25, Y+2	; 0x02
    421e:	ab 81       	ldd	r26, Y+3	; 0x03
    4220:	bc 81       	ldd	r27, Y+4	; 0x04
    4222:	89 2b       	or	r24, r25
    4224:	8a 2b       	or	r24, r26
    4226:	8b 2b       	or	r24, r27
    4228:	41 f0       	breq	.+16     	; 0x423a <_ZN8SdVolume15allocContiguousEmPm+0x11e>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    422a:	26 01       	movw	r4, r12
    422c:	37 01       	movw	r6, r14
    422e:	3f ef       	ldi	r19, 0xFF	; 255
    4230:	43 1a       	sub	r4, r19
    4232:	53 0a       	sbc	r5, r19
    4234:	63 0a       	sbc	r6, r19
    4236:	73 0a       	sbc	r7, r19
    4238:	12 c0       	rjmp	.+36     	; 0x425e <_ZN8SdVolume15allocContiguousEmPm+0x142>
    } else if ((endCluster - bgnCluster + 1) == count) {
    423a:	d7 01       	movw	r26, r14
    423c:	c6 01       	movw	r24, r12
    423e:	84 19       	sub	r24, r4
    4240:	95 09       	sbc	r25, r5
    4242:	a6 09       	sbc	r26, r6
    4244:	b7 09       	sbc	r27, r7
    4246:	01 96       	adiw	r24, 0x01	; 1
    4248:	a1 1d       	adc	r26, r1
    424a:	b1 1d       	adc	r27, r1
    424c:	29 85       	ldd	r18, Y+9	; 0x09
    424e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4250:	4b 85       	ldd	r20, Y+11	; 0x0b
    4252:	5c 85       	ldd	r21, Y+12	; 0x0c
    4254:	28 17       	cp	r18, r24
    4256:	39 07       	cpc	r19, r25
    4258:	4a 07       	cpc	r20, r26
    425a:	5b 07       	cpc	r21, r27
    425c:	69 f0       	breq	.+26     	; 0x4278 <_ZN8SdVolume15allocContiguousEmPm+0x15c>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    425e:	3f ef       	ldi	r19, 0xFF	; 255
    4260:	83 1a       	sub	r8, r19
    4262:	93 0a       	sbc	r9, r19
    4264:	a3 0a       	sbc	r10, r19
    4266:	b3 0a       	sbc	r11, r19
    4268:	4f ef       	ldi	r20, 0xFF	; 255
    426a:	c4 1a       	sub	r12, r20
    426c:	d4 0a       	sbc	r13, r20
    426e:	e4 0a       	sbc	r14, r20
    4270:	f4 0a       	sbc	r15, r20
    4272:	ab cf       	rjmp	.-170    	; 0x41ca <_ZN8SdVolume15allocContiguousEmPm+0xae>
    // can't find space checked all clusters
    if (n >= clusterCount_) {
      return false;
    4274:	80 e0       	ldi	r24, 0x00	; 0
    4276:	4d c0       	rjmp	.+154    	; 0x4312 <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
    static uint8_t cacheZeroBlock(uint32_t blockNumber);
    uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
    uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
    uint8_t fatPut(uint32_t cluster, uint32_t value);
    uint8_t fatPutEOC(uint32_t cluster) {
      return fatPut(cluster, 0x0FFFFFFF);
    4278:	0f ef       	ldi	r16, 0xFF	; 255
    427a:	1f ef       	ldi	r17, 0xFF	; 255
    427c:	2f ef       	ldi	r18, 0xFF	; 255
    427e:	3f e0       	ldi	r19, 0x0F	; 15
    4280:	b7 01       	movw	r22, r14
    4282:	a6 01       	movw	r20, r12
    4284:	c1 01       	movw	r24, r2
    4286:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) {
    428a:	88 23       	and	r24, r24
    428c:	09 f4       	brne	.+2      	; 0x4290 <_ZN8SdVolume15allocContiguousEmPm+0x174>
    428e:	41 c0       	rjmp	.+130    	; 0x4312 <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
    return false;
  }

  // link clusters
  while (endCluster > bgnCluster) {
    4290:	4c 14       	cp	r4, r12
    4292:	5d 04       	cpc	r5, r13
    4294:	6e 04       	cpc	r6, r14
    4296:	7f 04       	cpc	r7, r15
    4298:	98 f4       	brcc	.+38     	; 0x42c0 <_ZN8SdVolume15allocContiguousEmPm+0x1a4>
    if (!fatPut(endCluster - 1, endCluster)) {
    429a:	46 01       	movw	r8, r12
    429c:	57 01       	movw	r10, r14
    429e:	51 e0       	ldi	r21, 0x01	; 1
    42a0:	85 1a       	sub	r8, r21
    42a2:	91 08       	sbc	r9, r1
    42a4:	a1 08       	sbc	r10, r1
    42a6:	b1 08       	sbc	r11, r1
    42a8:	97 01       	movw	r18, r14
    42aa:	86 01       	movw	r16, r12
    42ac:	b5 01       	movw	r22, r10
    42ae:	a4 01       	movw	r20, r8
    42b0:	c1 01       	movw	r24, r2
    42b2:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <_ZN8SdVolume6fatPutEmm>
    42b6:	88 23       	and	r24, r24
    42b8:	61 f1       	breq	.+88     	; 0x4312 <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
      return false;
    }
    endCluster--;
    42ba:	75 01       	movw	r14, r10
    42bc:	64 01       	movw	r12, r8
    42be:	e8 cf       	rjmp	.-48     	; 0x4290 <_ZN8SdVolume15allocContiguousEmPm+0x174>
  }
  if (*curCluster != 0) {
    42c0:	ad 85       	ldd	r26, Y+13	; 0x0d
    42c2:	be 85       	ldd	r27, Y+14	; 0x0e
    42c4:	4d 91       	ld	r20, X+
    42c6:	5d 91       	ld	r21, X+
    42c8:	6d 91       	ld	r22, X+
    42ca:	7c 91       	ld	r23, X
    42cc:	41 15       	cp	r20, r1
    42ce:	51 05       	cpc	r21, r1
    42d0:	61 05       	cpc	r22, r1
    42d2:	71 05       	cpc	r23, r1
    42d4:	39 f0       	breq	.+14     	; 0x42e4 <_ZN8SdVolume15allocContiguousEmPm+0x1c8>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) {
    42d6:	93 01       	movw	r18, r6
    42d8:	82 01       	movw	r16, r4
    42da:	c1 01       	movw	r24, r2
    42dc:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <_ZN8SdVolume6fatPutEmm>
    42e0:	88 23       	and	r24, r24
    42e2:	b9 f0       	breq	.+46     	; 0x4312 <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
      return false;
    }
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    42e4:	ed 85       	ldd	r30, Y+13	; 0x0d
    42e6:	fe 85       	ldd	r31, Y+14	; 0x0e
    42e8:	40 82       	st	Z, r4
    42ea:	51 82       	std	Z+1, r5	; 0x01
    42ec:	62 82       	std	Z+2, r6	; 0x02
    42ee:	73 82       	std	Z+3, r7	; 0x03

  // remember possible next free cluster
  if (setStart) {
    42f0:	ff 85       	ldd	r31, Y+15	; 0x0f
    42f2:	ff 23       	and	r31, r31
    42f4:	69 f0       	breq	.+26     	; 0x4310 <_ZN8SdVolume15allocContiguousEmPm+0x1f4>
    allocSearchStart_ = bgnCluster + 1;
    42f6:	2f ef       	ldi	r18, 0xFF	; 255
    42f8:	42 1a       	sub	r4, r18
    42fa:	52 0a       	sbc	r5, r18
    42fc:	62 0a       	sbc	r6, r18
    42fe:	72 0a       	sbc	r7, r18
    4300:	d1 01       	movw	r26, r2
    4302:	4d 92       	st	X+, r4
    4304:	5d 92       	st	X+, r5
    4306:	6d 92       	st	X+, r6
    4308:	7c 92       	st	X, r7
    430a:	13 97       	sbiw	r26, 0x03	; 3
  }

  return true;
    430c:	81 e0       	ldi	r24, 0x01	; 1
    430e:	01 c0       	rjmp	.+2      	; 0x4312 <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
    4310:	81 e0       	ldi	r24, 0x01	; 1
}
    4312:	2f 96       	adiw	r28, 0x0f	; 15
    4314:	0f b6       	in	r0, 0x3f	; 63
    4316:	f8 94       	cli
    4318:	de bf       	out	0x3e, r29	; 62
    431a:	0f be       	out	0x3f, r0	; 63
    431c:	cd bf       	out	0x3d, r28	; 61
    431e:	df 91       	pop	r29
    4320:	cf 91       	pop	r28
    4322:	1f 91       	pop	r17
    4324:	0f 91       	pop	r16
    4326:	ff 90       	pop	r15
    4328:	ef 90       	pop	r14
    432a:	df 90       	pop	r13
    432c:	cf 90       	pop	r12
    432e:	bf 90       	pop	r11
    4330:	af 90       	pop	r10
    4332:	9f 90       	pop	r9
    4334:	8f 90       	pop	r8
    4336:	7f 90       	pop	r7
    4338:	6f 90       	pop	r6
    433a:	5f 90       	pop	r5
    433c:	4f 90       	pop	r4
    433e:	3f 90       	pop	r3
    4340:	2f 90       	pop	r2
    4342:	08 95       	ret

00004344 <_ZN8SdVolume9freeChainEm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    4344:	af 92       	push	r10
    4346:	bf 92       	push	r11
    4348:	cf 92       	push	r12
    434a:	df 92       	push	r13
    434c:	ef 92       	push	r14
    434e:	ff 92       	push	r15
    4350:	0f 93       	push	r16
    4352:	1f 93       	push	r17
    4354:	cf 93       	push	r28
    4356:	df 93       	push	r29
    4358:	00 d0       	rcall	.+0      	; 0x435a <_ZN8SdVolume9freeChainEm+0x16>
    435a:	00 d0       	rcall	.+0      	; 0x435c <_ZN8SdVolume9freeChainEm+0x18>
    435c:	cd b7       	in	r28, 0x3d	; 61
    435e:	de b7       	in	r29, 0x3e	; 62
    4360:	5c 01       	movw	r10, r24
    4362:	6a 01       	movw	r12, r20
    4364:	7b 01       	movw	r14, r22
  // clear free cluster location
  allocSearchStart_ = 2;
    4366:	82 e0       	ldi	r24, 0x02	; 2
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	a0 e0       	ldi	r26, 0x00	; 0
    436c:	b0 e0       	ldi	r27, 0x00	; 0
    436e:	f5 01       	movw	r30, r10
    4370:	80 83       	st	Z, r24
    4372:	91 83       	std	Z+1, r25	; 0x01
    4374:	a2 83       	std	Z+2, r26	; 0x02
    4376:	b3 83       	std	Z+3, r27	; 0x03

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) {
    4378:	9e 01       	movw	r18, r28
    437a:	2f 5f       	subi	r18, 0xFF	; 255
    437c:	3f 4f       	sbci	r19, 0xFF	; 255
    437e:	b7 01       	movw	r22, r14
    4380:	a6 01       	movw	r20, r12
    4382:	c5 01       	movw	r24, r10
    4384:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <_ZNK8SdVolume6fatGetEmPm>
    4388:	88 23       	and	r24, r24
    438a:	11 f1       	breq	.+68     	; 0x43d0 <_ZN8SdVolume9freeChainEm+0x8c>
      return false;
    }

    // free cluster
    if (!fatPut(cluster, 0)) {
    438c:	00 e0       	ldi	r16, 0x00	; 0
    438e:	10 e0       	ldi	r17, 0x00	; 0
    4390:	98 01       	movw	r18, r16
    4392:	b7 01       	movw	r22, r14
    4394:	a6 01       	movw	r20, r12
    4396:	c5 01       	movw	r24, r10
    4398:	0e 94 c3 1f 	call	0x3f86	; 0x3f86 <_ZN8SdVolume6fatPutEmm>
    439c:	88 23       	and	r24, r24
    439e:	c1 f0       	breq	.+48     	; 0x43d0 <_ZN8SdVolume9freeChainEm+0x8c>
      return false;
    }

    cluster = next;
    43a0:	c9 80       	ldd	r12, Y+1	; 0x01
    43a2:	da 80       	ldd	r13, Y+2	; 0x02
    43a4:	eb 80       	ldd	r14, Y+3	; 0x03
    43a6:	fc 80       	ldd	r15, Y+4	; 0x04
    }
    uint8_t freeChain(uint32_t cluster);
    uint8_t isEOC(uint32_t cluster) const {
      return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    43a8:	f5 01       	movw	r30, r10
    43aa:	87 89       	ldd	r24, Z+23	; 0x17
    43ac:	80 31       	cpi	r24, 0x10	; 16
    43ae:	29 f4       	brne	.+10     	; 0x43ba <_ZN8SdVolume9freeChainEm+0x76>
    43b0:	88 ef       	ldi	r24, 0xF8	; 248
    43b2:	9f ef       	ldi	r25, 0xFF	; 255
    43b4:	a0 e0       	ldi	r26, 0x00	; 0
    43b6:	b0 e0       	ldi	r27, 0x00	; 0
    43b8:	04 c0       	rjmp	.+8      	; 0x43c2 <_ZN8SdVolume9freeChainEm+0x7e>
    43ba:	88 ef       	ldi	r24, 0xF8	; 248
    43bc:	9f ef       	ldi	r25, 0xFF	; 255
    43be:	af ef       	ldi	r26, 0xFF	; 255
    43c0:	bf e0       	ldi	r27, 0x0F	; 15
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    43c2:	c8 16       	cp	r12, r24
    43c4:	d9 06       	cpc	r13, r25
    43c6:	ea 06       	cpc	r14, r26
    43c8:	fb 06       	cpc	r15, r27
    43ca:	b0 f2       	brcs	.-84     	; 0x4378 <_ZN8SdVolume9freeChainEm+0x34>
    }

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    43cc:	81 e0       	ldi	r24, 0x01	; 1
    43ce:	01 c0       	rjmp	.+2      	; 0x43d2 <_ZN8SdVolume9freeChainEm+0x8e>
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) {
      return false;
    43d0:	80 e0       	ldi	r24, 0x00	; 0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    43d2:	0f 90       	pop	r0
    43d4:	0f 90       	pop	r0
    43d6:	0f 90       	pop	r0
    43d8:	0f 90       	pop	r0
    43da:	df 91       	pop	r29
    43dc:	cf 91       	pop	r28
    43de:	1f 91       	pop	r17
    43e0:	0f 91       	pop	r16
    43e2:	ff 90       	pop	r15
    43e4:	ef 90       	pop	r14
    43e6:	df 90       	pop	r13
    43e8:	cf 90       	pop	r12
    43ea:	bf 90       	pop	r11
    43ec:	af 90       	pop	r10
    43ee:	08 95       	ret

000043f0 <_ZN8SdVolume4initEP7Sd2Cardh>:
   \return The value one, true, is returned for success and
   the value zero, false, is returned for failure.  Reasons for
   failure include not finding a valid partition, not finding a valid
   FAT file system in the specified partition or an I/O error.
*/
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    43f0:	4f 92       	push	r4
    43f2:	5f 92       	push	r5
    43f4:	6f 92       	push	r6
    43f6:	7f 92       	push	r7
    43f8:	8f 92       	push	r8
    43fa:	9f 92       	push	r9
    43fc:	af 92       	push	r10
    43fe:	bf 92       	push	r11
    4400:	cf 92       	push	r12
    4402:	df 92       	push	r13
    4404:	ef 92       	push	r14
    4406:	ff 92       	push	r15
    4408:	0f 93       	push	r16
    440a:	1f 93       	push	r17
    440c:	cf 93       	push	r28
    440e:	df 93       	push	r29
    4410:	8c 01       	movw	r16, r24
    4412:	c4 2f       	mov	r28, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    4414:	70 93 dd 02 	sts	0x02DD, r23	; 0x8002dd <_ZN8SdVolume7sdCard_E+0x1>
    4418:	60 93 dc 02 	sts	0x02DC, r22	; 0x8002dc <_ZN8SdVolume7sdCard_E>
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    441c:	44 23       	and	r20, r20
    441e:	09 f4       	brne	.+2      	; 0x4422 <_ZN8SdVolume4initEP7Sd2Cardh+0x32>
    4420:	44 c0       	rjmp	.+136    	; 0x44aa <_ZN8SdVolume4initEP7Sd2Cardh+0xba>
    if (part > 4) {
    4422:	45 30       	cpi	r20, 0x05	; 5
    4424:	08 f0       	brcs	.+2      	; 0x4428 <_ZN8SdVolume4initEP7Sd2Cardh+0x38>
    4426:	29 c1       	rjmp	.+594    	; 0x467a <_ZN8SdVolume4initEP7Sd2Cardh+0x28a>
      return false;
    }
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    4428:	40 e0       	ldi	r20, 0x00	; 0
    442a:	60 e0       	ldi	r22, 0x00	; 0
    442c:	70 e0       	ldi	r23, 0x00	; 0
    442e:	cb 01       	movw	r24, r22
    4430:	0e 94 76 1e 	call	0x3cec	; 0x3cec <_ZN8SdVolume13cacheRawBlockEmh>
    4434:	88 23       	and	r24, r24
    4436:	09 f4       	brne	.+2      	; 0x443a <_ZN8SdVolume4initEP7Sd2Cardh+0x4a>
    4438:	2b c1       	rjmp	.+598    	; 0x4690 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
      return false;
    }
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    443a:	4c 2f       	mov	r20, r28
    443c:	50 e0       	ldi	r21, 0x00	; 0
    443e:	41 50       	subi	r20, 0x01	; 1
    4440:	51 09       	sbc	r21, r1
    if ((p->boot & 0X7F) != 0  ||
    4442:	fa 01       	movw	r30, r20
    4444:	e2 95       	swap	r30
    4446:	f2 95       	swap	r31
    4448:	f0 7f       	andi	r31, 0xF0	; 240
    444a:	fe 27       	eor	r31, r30
    444c:	e0 7f       	andi	r30, 0xF0	; 240
    444e:	fe 27       	eor	r31, r30
    4450:	e4 56       	subi	r30, 0x64	; 100
    4452:	fb 4f       	sbci	r31, 0xFB	; 251
    4454:	80 81       	ld	r24, Z
    4456:	8f 77       	andi	r24, 0x7F	; 127
    4458:	09 f0       	breq	.+2      	; 0x445c <_ZN8SdVolume4initEP7Sd2Cardh+0x6c>
    445a:	11 c1       	rjmp	.+546    	; 0x467e <_ZN8SdVolume4initEP7Sd2Cardh+0x28e>
        p->totalSectors < 100 ||
    445c:	fa 01       	movw	r30, r20
    445e:	e2 95       	swap	r30
    4460:	f2 95       	swap	r31
    4462:	f0 7f       	andi	r31, 0xF0	; 240
    4464:	fe 27       	eor	r31, r30
    4466:	e0 7f       	andi	r30, 0xF0	; 240
    4468:	fe 27       	eor	r31, r30
    446a:	e8 55       	subi	r30, 0x58	; 88
    446c:	fb 4f       	sbci	r31, 0xFB	; 251
    446e:	c0 80       	ld	r12, Z
    4470:	d1 80       	ldd	r13, Z+1	; 0x01
    4472:	e2 80       	ldd	r14, Z+2	; 0x02
    4474:	f3 80       	ldd	r15, Z+3	; 0x03
    }
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
      return false;
    }
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0  ||
    4476:	24 e6       	ldi	r18, 0x64	; 100
    4478:	c2 16       	cp	r12, r18
    447a:	d1 04       	cpc	r13, r1
    447c:	e1 04       	cpc	r14, r1
    447e:	f1 04       	cpc	r15, r1
    4480:	08 f4       	brcc	.+2      	; 0x4484 <_ZN8SdVolume4initEP7Sd2Cardh+0x94>
    4482:	06 c1       	rjmp	.+524    	; 0x4690 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
        p->totalSectors < 100 ||
        p->firstSector == 0) {
    4484:	42 95       	swap	r20
    4486:	52 95       	swap	r21
    4488:	50 7f       	andi	r21, 0xF0	; 240
    448a:	54 27       	eor	r21, r20
    448c:	40 7f       	andi	r20, 0xF0	; 240
    448e:	54 27       	eor	r21, r20
    4490:	fa 01       	movw	r30, r20
    4492:	ec 55       	subi	r30, 0x5C	; 92
    4494:	fb 4f       	sbci	r31, 0xFB	; 251
    4496:	c0 80       	ld	r12, Z
    4498:	d1 80       	ldd	r13, Z+1	; 0x01
    449a:	e2 80       	ldd	r14, Z+2	; 0x02
    449c:	f3 80       	ldd	r15, Z+3	; 0x03
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
      return false;
    }
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0  ||
        p->totalSectors < 100 ||
    449e:	c1 14       	cp	r12, r1
    44a0:	d1 04       	cpc	r13, r1
    44a2:	e1 04       	cpc	r14, r1
    44a4:	f1 04       	cpc	r15, r1
    44a6:	21 f4       	brne	.+8      	; 0x44b0 <_ZN8SdVolume4initEP7Sd2Cardh+0xc0>
    44a8:	f3 c0       	rjmp	.+486    	; 0x4690 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
   the value zero, false, is returned for failure.  Reasons for
   failure include not finding a valid partition, not finding a valid
   FAT file system in the specified partition or an I/O error.
*/
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    44aa:	c1 2c       	mov	r12, r1
    44ac:	d1 2c       	mov	r13, r1
    44ae:	76 01       	movw	r14, r12
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    44b0:	40 e0       	ldi	r20, 0x00	; 0
    44b2:	c7 01       	movw	r24, r14
    44b4:	b6 01       	movw	r22, r12
    44b6:	0e 94 76 1e 	call	0x3cec	; 0x3cec <_ZN8SdVolume13cacheRawBlockEmh>
    44ba:	88 23       	and	r24, r24
    44bc:	09 f4       	brne	.+2      	; 0x44c0 <_ZN8SdVolume4initEP7Sd2Cardh+0xd0>
    44be:	e8 c0       	rjmp	.+464    	; 0x4690 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    44c0:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <_ZN8SdVolume12cacheBuffer_E+0xb>
    44c4:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <_ZN8SdVolume12cacheBuffer_E+0xc>
    44c8:	81 15       	cp	r24, r1
    44ca:	92 40       	sbci	r25, 0x02	; 2
    44cc:	09 f0       	breq	.+2      	; 0x44d0 <_ZN8SdVolume4initEP7Sd2Cardh+0xe0>
    44ce:	d9 c0       	rjmp	.+434    	; 0x4682 <_ZN8SdVolume4initEP7Sd2Cardh+0x292>
      bpb->fatCount == 0 ||
    44d0:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <_ZN8SdVolume12cacheBuffer_E+0x10>
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    44d4:	88 23       	and	r24, r24
    44d6:	09 f4       	brne	.+2      	; 0x44da <_ZN8SdVolume4initEP7Sd2Cardh+0xea>
    44d8:	db c0       	rjmp	.+438    	; 0x4690 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
      bpb->fatCount == 0 ||
      bpb->reservedSectorCount == 0 ||
    44da:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <_ZN8SdVolume12cacheBuffer_E+0xe>
    44de:	30 91 ed 02 	lds	r19, 0x02ED	; 0x8002ed <_ZN8SdVolume12cacheBuffer_E+0xf>
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) {
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
      bpb->fatCount == 0 ||
    44e2:	23 2b       	or	r18, r19
    44e4:	09 f4       	brne	.+2      	; 0x44e8 <_ZN8SdVolume4initEP7Sd2Cardh+0xf8>
    44e6:	cf c0       	rjmp	.+414    	; 0x4686 <_ZN8SdVolume4initEP7Sd2Cardh+0x296>
      bpb->reservedSectorCount == 0 ||
      bpb->sectorsPerCluster == 0) {
    44e8:	60 91 eb 02 	lds	r22, 0x02EB	; 0x8002eb <_ZN8SdVolume12cacheBuffer_E+0xd>
    return false;
  }
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
      bpb->fatCount == 0 ||
      bpb->reservedSectorCount == 0 ||
    44ec:	66 23       	and	r22, r22
    44ee:	09 f4       	brne	.+2      	; 0x44f2 <_ZN8SdVolume4initEP7Sd2Cardh+0x102>
    44f0:	cc c0       	rjmp	.+408    	; 0x468a <_ZN8SdVolume4initEP7Sd2Cardh+0x29a>
      bpb->sectorsPerCluster == 0) {
    // not valid FAT volume
    return false;
  }
  fatCount_ = bpb->fatCount;
    44f2:	e8 01       	movw	r28, r16
    44f4:	8a 8b       	std	Y+18, r24	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    44f6:	6c 83       	std	Y+4, r22	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    44f8:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    44fa:	f8 01       	movw	r30, r16
    44fc:	85 85       	ldd	r24, Z+13	; 0x0d
    44fe:	e8 2f       	mov	r30, r24
    4500:	21 e0       	ldi	r18, 0x01	; 1
    4502:	30 e0       	ldi	r19, 0x00	; 0
    4504:	08 2e       	mov	r0, r24
    4506:	02 c0       	rjmp	.+4      	; 0x450c <_ZN8SdVolume4initEP7Sd2Cardh+0x11c>
    4508:	22 0f       	add	r18, r18
    450a:	33 1f       	adc	r19, r19
    450c:	0a 94       	dec	r0
    450e:	e2 f7       	brpl	.-8      	; 0x4508 <_ZN8SdVolume4initEP7Sd2Cardh+0x118>
    4510:	46 2f       	mov	r20, r22
    4512:	50 e0       	ldi	r21, 0x00	; 0
    4514:	42 17       	cp	r20, r18
    4516:	53 07       	cpc	r21, r19
    4518:	41 f0       	breq	.+16     	; 0x452a <_ZN8SdVolume4initEP7Sd2Cardh+0x13a>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) {
    451a:	91 e0       	ldi	r25, 0x01	; 1
    451c:	98 0f       	add	r25, r24
    451e:	d8 01       	movw	r26, r16
    4520:	1d 96       	adiw	r26, 0x0d	; 13
    4522:	9c 93       	st	X, r25
    4524:	88 30       	cpi	r24, 0x08	; 8
    4526:	48 f3       	brcs	.-46     	; 0x44fa <_ZN8SdVolume4initEP7Sd2Cardh+0x10a>
    4528:	b2 c0       	rjmp	.+356    	; 0x468e <_ZN8SdVolume4initEP7Sd2Cardh+0x29e>
      return false;
    }
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    452a:	20 91 f4 02 	lds	r18, 0x02F4	; 0x8002f4 <_ZN8SdVolume12cacheBuffer_E+0x16>
    452e:	30 91 f5 02 	lds	r19, 0x02F5	; 0x8002f5 <_ZN8SdVolume12cacheBuffer_E+0x17>
                  bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    4532:	21 15       	cp	r18, r1
    4534:	31 05       	cpc	r19, r1
    4536:	19 f0       	breq	.+6      	; 0x453e <_ZN8SdVolume4initEP7Sd2Cardh+0x14e>
    4538:	40 e0       	ldi	r20, 0x00	; 0
    453a:	50 e0       	ldi	r21, 0x00	; 0
    453c:	08 c0       	rjmp	.+16     	; 0x454e <_ZN8SdVolume4initEP7Sd2Cardh+0x15e>
    453e:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <_ZN8SdVolume12cacheBuffer_E+0x24>
    4542:	30 91 03 03 	lds	r19, 0x0303	; 0x800303 <_ZN8SdVolume12cacheBuffer_E+0x25>
    4546:	40 91 04 03 	lds	r20, 0x0304	; 0x800304 <_ZN8SdVolume12cacheBuffer_E+0x26>
    454a:	50 91 05 03 	lds	r21, 0x0305	; 0x800305 <_ZN8SdVolume12cacheBuffer_E+0x27>
    454e:	e8 01       	movw	r28, r16
    4550:	2d 83       	std	Y+5, r18	; 0x05
    4552:	3e 83       	std	Y+6, r19	; 0x06
    4554:	4f 83       	std	Y+7, r20	; 0x07
    4556:	58 87       	std	Y+8, r21	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    4558:	0f 2e       	mov	r0, r31
    455a:	fe ed       	ldi	r31, 0xDE	; 222
    455c:	af 2e       	mov	r10, r31
    455e:	f2 e0       	ldi	r31, 0x02	; 2
    4560:	bf 2e       	mov	r11, r31
    4562:	f0 2d       	mov	r31, r0
    4564:	d5 01       	movw	r26, r10
    4566:	1e 96       	adiw	r26, 0x0e	; 14
    4568:	8d 91       	ld	r24, X+
    456a:	9c 91       	ld	r25, X
    456c:	1f 97       	sbiw	r26, 0x0f	; 15
    456e:	26 01       	movw	r4, r12
    4570:	37 01       	movw	r6, r14
    4572:	48 0e       	add	r4, r24
    4574:	59 1e       	adc	r5, r25
    4576:	61 1c       	adc	r6, r1
    4578:	71 1c       	adc	r7, r1
    457a:	4b 8a       	std	Y+19, r4	; 0x13
    457c:	5c 8a       	std	Y+20, r5	; 0x14
    457e:	6d 8a       	std	Y+21, r6	; 0x15
    4580:	7e 8a       	std	Y+22, r7	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    4582:	51 96       	adiw	r26, 0x11	; 17
    4584:	8d 90       	ld	r8, X+
    4586:	9c 90       	ld	r9, X
    4588:	52 97       	sbiw	r26, 0x12	; 18
    458a:	99 8e       	std	Y+25, r9	; 0x19
    458c:	88 8e       	std	Y+24, r8	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    458e:	50 96       	adiw	r26, 0x10	; 16
    4590:	8c 91       	ld	r24, X
    4592:	a8 2f       	mov	r26, r24
    4594:	b0 e0       	ldi	r27, 0x00	; 0
    4596:	0e 94 ba 29 	call	0x5374	; 0x5374 <__muluhisi3>
    459a:	dc 01       	movw	r26, r24
    459c:	cb 01       	movw	r24, r22
    459e:	84 0d       	add	r24, r4
    45a0:	95 1d       	adc	r25, r5
    45a2:	a6 1d       	adc	r26, r6
    45a4:	b7 1d       	adc	r27, r7
    45a6:	8a 8f       	std	Y+26, r24	; 0x1a
    45a8:	9b 8f       	std	Y+27, r25	; 0x1b
    45aa:	ac 8f       	std	Y+28, r26	; 0x1c
    45ac:	bd 8f       	std	Y+29, r27	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511) / 512);
    45ae:	e4 01       	movw	r28, r8
    45b0:	cc 0f       	add	r28, r28
    45b2:	dd 1f       	adc	r29, r29
    45b4:	c2 95       	swap	r28
    45b6:	d2 95       	swap	r29
    45b8:	d0 7f       	andi	r29, 0xF0	; 240
    45ba:	dc 27       	eor	r29, r28
    45bc:	c0 7f       	andi	r28, 0xF0	; 240
    45be:	dc 27       	eor	r29, r28
    45c0:	c1 50       	subi	r28, 0x01	; 1
    45c2:	de 4f       	sbci	r29, 0xFE	; 254
    45c4:	cd 2f       	mov	r28, r29
    45c6:	dd 27       	eor	r29, r29
    45c8:	c6 95       	lsr	r28
    45ca:	8c 0f       	add	r24, r28
    45cc:	9d 1f       	adc	r25, r29
    45ce:	a1 1d       	adc	r26, r1
    45d0:	b1 1d       	adc	r27, r1
    45d2:	e8 01       	movw	r28, r16
    45d4:	8e 87       	std	Y+14, r24	; 0x0e
    45d6:	9f 87       	std	Y+15, r25	; 0x0f
    45d8:	a8 8b       	std	Y+16, r26	; 0x10
    45da:	b9 8b       	std	Y+17, r27	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    45dc:	e5 01       	movw	r28, r10
    45de:	4b 88       	ldd	r4, Y+19	; 0x13
    45e0:	5c 88       	ldd	r5, Y+20	; 0x14
                         bpb->totalSectors16 : bpb->totalSectors32;
    45e2:	41 14       	cp	r4, r1
    45e4:	51 04       	cpc	r5, r1
    45e6:	19 f0       	breq	.+6      	; 0x45ee <_ZN8SdVolume4initEP7Sd2Cardh+0x1fe>
    45e8:	61 2c       	mov	r6, r1
    45ea:	71 2c       	mov	r7, r1
    45ec:	08 c0       	rjmp	.+16     	; 0x45fe <_ZN8SdVolume4initEP7Sd2Cardh+0x20e>
    45ee:	40 90 fe 02 	lds	r4, 0x02FE	; 0x8002fe <_ZN8SdVolume12cacheBuffer_E+0x20>
    45f2:	50 90 ff 02 	lds	r5, 0x02FF	; 0x8002ff <_ZN8SdVolume12cacheBuffer_E+0x21>
    45f6:	60 90 00 03 	lds	r6, 0x0300	; 0x800300 <_ZN8SdVolume12cacheBuffer_E+0x22>
    45fa:	70 90 01 03 	lds	r7, 0x0301	; 0x800301 <_ZN8SdVolume12cacheBuffer_E+0x23>
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
    45fe:	c8 1a       	sub	r12, r24
    4600:	d9 0a       	sbc	r13, r25
    4602:	ea 0a       	sbc	r14, r26
    4604:	fb 0a       	sbc	r15, r27
    4606:	c4 0c       	add	r12, r4
    4608:	d5 1c       	adc	r13, r5
    460a:	e6 1c       	adc	r14, r6
    460c:	f7 1c       	adc	r15, r7

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    460e:	04 c0       	rjmp	.+8      	; 0x4618 <_ZN8SdVolume4initEP7Sd2Cardh+0x228>
    4610:	f6 94       	lsr	r15
    4612:	e7 94       	ror	r14
    4614:	d7 94       	ror	r13
    4616:	c7 94       	ror	r12
    4618:	ea 95       	dec	r30
    461a:	d2 f7       	brpl	.-12     	; 0x4610 <_ZN8SdVolume4initEP7Sd2Cardh+0x220>
    461c:	f8 01       	movw	r30, r16
    461e:	c1 86       	std	Z+9, r12	; 0x09
    4620:	d2 86       	std	Z+10, r13	; 0x0a
    4622:	e3 86       	std	Z+11, r14	; 0x0b
    4624:	f4 86       	std	Z+12, r15	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    4626:	f5 ef       	ldi	r31, 0xF5	; 245
    4628:	cf 16       	cp	r12, r31
    462a:	ff e0       	ldi	r31, 0x0F	; 15
    462c:	df 06       	cpc	r13, r31
    462e:	e1 04       	cpc	r14, r1
    4630:	f1 04       	cpc	r15, r1
    4632:	30 f4       	brcc	.+12     	; 0x4640 <_ZN8SdVolume4initEP7Sd2Cardh+0x250>
    fatType_ = 12;
    4634:	8c e0       	ldi	r24, 0x0C	; 12
    4636:	d8 01       	movw	r26, r16
    4638:	57 96       	adiw	r26, 0x17	; 23
    463a:	8c 93       	st	X, r24
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    463c:	81 e0       	ldi	r24, 0x01	; 1
    463e:	28 c0       	rjmp	.+80     	; 0x4690 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  clusterCount_ >>= clusterSizeShift_;

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    4640:	b5 ef       	ldi	r27, 0xF5	; 245
    4642:	cb 16       	cp	r12, r27
    4644:	bf ef       	ldi	r27, 0xFF	; 255
    4646:	db 06       	cpc	r13, r27
    4648:	e1 04       	cpc	r14, r1
    464a:	f1 04       	cpc	r15, r1
    464c:	28 f4       	brcc	.+10     	; 0x4658 <_ZN8SdVolume4initEP7Sd2Cardh+0x268>
    fatType_ = 16;
    464e:	80 e1       	ldi	r24, 0x10	; 16
    4650:	e8 01       	movw	r28, r16
    4652:	8f 8b       	std	Y+23, r24	; 0x17
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    4654:	81 e0       	ldi	r24, 0x01	; 1
    4656:	1c c0       	rjmp	.+56     	; 0x4690 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    4658:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <_ZN8SdVolume12cacheBuffer_E+0x2c>
    465c:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <_ZN8SdVolume12cacheBuffer_E+0x2d>
    4660:	a0 91 0c 03 	lds	r26, 0x030C	; 0x80030c <_ZN8SdVolume12cacheBuffer_E+0x2e>
    4664:	b0 91 0d 03 	lds	r27, 0x030D	; 0x80030d <_ZN8SdVolume12cacheBuffer_E+0x2f>
    4668:	f8 01       	movw	r30, r16
    466a:	82 8f       	std	Z+26, r24	; 0x1a
    466c:	93 8f       	std	Z+27, r25	; 0x1b
    466e:	a4 8f       	std	Z+28, r26	; 0x1c
    4670:	b5 8f       	std	Z+29, r27	; 0x1d
    fatType_ = 32;
    4672:	80 e2       	ldi	r24, 0x20	; 32
    4674:	87 8b       	std	Z+23, r24	; 0x17
  }
  return true;
    4676:	81 e0       	ldi	r24, 0x01	; 1
    4678:	0b c0       	rjmp	.+22     	; 0x4690 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  sdCard_ = dev;
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4) {
      return false;
    467a:	80 e0       	ldi	r24, 0x00	; 0
    467c:	09 c0       	rjmp	.+18     	; 0x4690 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    part_t* p = &cacheBuffer_.mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0  ||
        p->totalSectors < 100 ||
        p->firstSector == 0) {
      // not a valid partition
      return false;
    467e:	80 e0       	ldi	r24, 0x00	; 0
    4680:	07 c0       	rjmp	.+14     	; 0x4690 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  if (bpb->bytesPerSector != 512 ||
      bpb->fatCount == 0 ||
      bpb->reservedSectorCount == 0 ||
      bpb->sectorsPerCluster == 0) {
    // not valid FAT volume
    return false;
    4682:	80 e0       	ldi	r24, 0x00	; 0
    4684:	05 c0       	rjmp	.+10     	; 0x4690 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    4686:	80 e0       	ldi	r24, 0x00	; 0
    4688:	03 c0       	rjmp	.+6      	; 0x4690 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
    468a:	86 2f       	mov	r24, r22
    468c:	01 c0       	rjmp	.+2      	; 0x4690 <_ZN8SdVolume4initEP7Sd2Cardh+0x2a0>
  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    // error if not power of 2
    if (clusterSizeShift_++ > 7) {
      return false;
    468e:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
}
    4690:	df 91       	pop	r29
    4692:	cf 91       	pop	r28
    4694:	1f 91       	pop	r17
    4696:	0f 91       	pop	r16
    4698:	ff 90       	pop	r15
    469a:	ef 90       	pop	r14
    469c:	df 90       	pop	r13
    469e:	cf 90       	pop	r12
    46a0:	bf 90       	pop	r11
    46a2:	af 90       	pop	r10
    46a4:	9f 90       	pop	r9
    46a6:	8f 90       	pop	r8
    46a8:	7f 90       	pop	r7
    46aa:	6f 90       	pop	r6
    46ac:	5f 90       	pop	r5
    46ae:	4f 90       	pop	r4
    46b0:	08 95       	ret

000046b2 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    46b2:	cf 93       	push	r28
  uint8_t sreg = SREG;
    46b4:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    46b6:	f8 94       	cli
  if (!initialized) {
    46b8:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <_ZN8SPIClass11initializedE>
    46bc:	81 11       	cpse	r24, r1
    46be:	27 c0       	rjmp	.+78     	; 0x470e <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    46c0:	ec e2       	ldi	r30, 0x2C	; 44
    46c2:	f2 e0       	ldi	r31, 0x02	; 2
    46c4:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    46c6:	e8 e1       	ldi	r30, 0x18	; 24
    46c8:	f2 e0       	ldi	r31, 0x02	; 2
    46ca:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    46cc:	e8 2f       	mov	r30, r24
    46ce:	f0 e0       	ldi	r31, 0x00	; 0
    46d0:	ee 0f       	add	r30, r30
    46d2:	ff 1f       	adc	r31, r31
    46d4:	e0 5c       	subi	r30, 0xC0	; 192
    46d6:	fd 4f       	sbci	r31, 0xFD	; 253
    46d8:	a5 91       	lpm	r26, Z+
    46da:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    46dc:	ec 91       	ld	r30, X
    46de:	e9 23       	and	r30, r25
    46e0:	21 f4       	brne	.+8      	; 0x46ea <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    46e2:	61 e0       	ldi	r22, 0x01	; 1
    46e4:	8a e0       	ldi	r24, 0x0A	; 10
    46e6:	0e 94 a2 02 	call	0x544	; 0x544 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    46ea:	61 e0       	ldi	r22, 0x01	; 1
    46ec:	8a e0       	ldi	r24, 0x0A	; 10
    46ee:	0e 94 63 02 	call	0x4c6	; 0x4c6 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    46f2:	8c b5       	in	r24, 0x2c	; 44
    46f4:	80 61       	ori	r24, 0x10	; 16
    46f6:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    46f8:	8c b5       	in	r24, 0x2c	; 44
    46fa:	80 64       	ori	r24, 0x40	; 64
    46fc:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    46fe:	61 e0       	ldi	r22, 0x01	; 1
    4700:	8d e0       	ldi	r24, 0x0D	; 13
    4702:	0e 94 63 02 	call	0x4c6	; 0x4c6 <pinMode>
    pinMode(MOSI, OUTPUT);
    4706:	61 e0       	ldi	r22, 0x01	; 1
    4708:	8b e0       	ldi	r24, 0x0B	; 11
    470a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <pinMode>
  }
  initialized++; // reference count
    470e:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <_ZN8SPIClass11initializedE>
    4712:	8f 5f       	subi	r24, 0xFF	; 255
    4714:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    4718:	cf bf       	out	0x3f, r28	; 63
}
    471a:	cf 91       	pop	r28
    471c:	08 95       	ret

0000471e <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    471e:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <twi_state>
    4722:	81 e0       	ldi	r24, 0x01	; 1
    4724:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <twi_sendStop>
    4728:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <twi_inRepStart>
    472c:	61 e0       	ldi	r22, 0x01	; 1
    472e:	82 e1       	ldi	r24, 0x12	; 18
    4730:	0e 94 a2 02 	call	0x544	; 0x544 <digitalWrite>
    4734:	61 e0       	ldi	r22, 0x01	; 1
    4736:	83 e1       	ldi	r24, 0x13	; 19
    4738:	0e 94 a2 02 	call	0x544	; 0x544 <digitalWrite>
    473c:	e9 eb       	ldi	r30, 0xB9	; 185
    473e:	f0 e0       	ldi	r31, 0x00	; 0
    4740:	80 81       	ld	r24, Z
    4742:	8e 7f       	andi	r24, 0xFE	; 254
    4744:	80 83       	st	Z, r24
    4746:	80 81       	ld	r24, Z
    4748:	8d 7f       	andi	r24, 0xFD	; 253
    474a:	80 83       	st	Z, r24
    474c:	88 e4       	ldi	r24, 0x48	; 72
    474e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    4752:	85 e4       	ldi	r24, 0x45	; 69
    4754:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4758:	08 95       	ret

0000475a <twi_disable>:
    475a:	ec eb       	ldi	r30, 0xBC	; 188
    475c:	f0 e0       	ldi	r31, 0x00	; 0
    475e:	80 81       	ld	r24, Z
    4760:	8a 7b       	andi	r24, 0xBA	; 186
    4762:	80 83       	st	Z, r24
    4764:	60 e0       	ldi	r22, 0x00	; 0
    4766:	82 e1       	ldi	r24, 0x12	; 18
    4768:	0e 94 a2 02 	call	0x544	; 0x544 <digitalWrite>
    476c:	60 e0       	ldi	r22, 0x00	; 0
    476e:	83 e1       	ldi	r24, 0x13	; 19
    4770:	0e 94 a2 02 	call	0x544	; 0x544 <digitalWrite>
    4774:	08 95       	ret

00004776 <twi_transmit>:
    4776:	ac 01       	movw	r20, r24
    4778:	90 91 04 05 	lds	r25, 0x0504	; 0x800504 <twi_txBufferLength>
    477c:	26 2f       	mov	r18, r22
    477e:	30 e0       	ldi	r19, 0x00	; 0
    4780:	29 0f       	add	r18, r25
    4782:	31 1d       	adc	r19, r1
    4784:	21 32       	cpi	r18, 0x21	; 33
    4786:	31 05       	cpc	r19, r1
    4788:	f4 f4       	brge	.+60     	; 0x47c6 <twi_transmit+0x50>
    478a:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <twi_state>
    478e:	84 30       	cpi	r24, 0x04	; 4
    4790:	e1 f4       	brne	.+56     	; 0x47ca <twi_transmit+0x54>
    4792:	90 e0       	ldi	r25, 0x00	; 0
    4794:	0f c0       	rjmp	.+30     	; 0x47b4 <twi_transmit+0x3e>
    4796:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <twi_txBufferLength>
    479a:	29 2f       	mov	r18, r25
    479c:	30 e0       	ldi	r19, 0x00	; 0
    479e:	f9 01       	movw	r30, r18
    47a0:	e8 0f       	add	r30, r24
    47a2:	f1 1d       	adc	r31, r1
    47a4:	da 01       	movw	r26, r20
    47a6:	a2 0f       	add	r26, r18
    47a8:	b3 1f       	adc	r27, r19
    47aa:	8c 91       	ld	r24, X
    47ac:	ea 5f       	subi	r30, 0xFA	; 250
    47ae:	fa 4f       	sbci	r31, 0xFA	; 250
    47b0:	80 83       	st	Z, r24
    47b2:	9f 5f       	subi	r25, 0xFF	; 255
    47b4:	96 17       	cp	r25, r22
    47b6:	78 f3       	brcs	.-34     	; 0x4796 <twi_transmit+0x20>
    47b8:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <twi_txBufferLength>
    47bc:	68 0f       	add	r22, r24
    47be:	60 93 04 05 	sts	0x0504, r22	; 0x800504 <twi_txBufferLength>
    47c2:	80 e0       	ldi	r24, 0x00	; 0
    47c4:	08 95       	ret
    47c6:	81 e0       	ldi	r24, 0x01	; 1
    47c8:	08 95       	ret
    47ca:	82 e0       	ldi	r24, 0x02	; 2
    47cc:	08 95       	ret

000047ce <twi_attachSlaveRxEvent>:
    47ce:	90 93 49 05 	sts	0x0549, r25	; 0x800549 <twi_onSlaveReceive+0x1>
    47d2:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <twi_onSlaveReceive>
    47d6:	08 95       	ret

000047d8 <twi_attachSlaveTxEvent>:
    47d8:	90 93 4b 05 	sts	0x054B, r25	; 0x80054b <twi_onSlaveTransmit+0x1>
    47dc:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <twi_onSlaveTransmit>
    47e0:	08 95       	ret

000047e2 <twi_reply>:
    47e2:	88 23       	and	r24, r24
    47e4:	21 f0       	breq	.+8      	; 0x47ee <twi_reply+0xc>
    47e6:	85 ec       	ldi	r24, 0xC5	; 197
    47e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    47ec:	08 95       	ret
    47ee:	85 e8       	ldi	r24, 0x85	; 133
    47f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    47f4:	08 95       	ret

000047f6 <twi_releaseBus>:
    47f6:	85 ec       	ldi	r24, 0xC5	; 197
    47f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    47fc:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <twi_state>
    4800:	08 95       	ret

00004802 <twi_handleTimeout>:
    4802:	ef 92       	push	r14
    4804:	ff 92       	push	r15
    4806:	0f 93       	push	r16
    4808:	1f 93       	push	r17
    480a:	cf 93       	push	r28
    480c:	df 93       	push	r29
    480e:	91 e0       	ldi	r25, 0x01	; 1
    4810:	90 93 4d 05 	sts	0x054D, r25	; 0x80054d <twi_timed_out_flag>
    4814:	88 23       	and	r24, r24
    4816:	71 f0       	breq	.+28     	; 0x4834 <twi_handleTimeout+0x32>
    4818:	c8 eb       	ldi	r28, 0xB8	; 184
    481a:	d0 e0       	ldi	r29, 0x00	; 0
    481c:	f8 80       	ld	r15, Y
    481e:	0a eb       	ldi	r16, 0xBA	; 186
    4820:	10 e0       	ldi	r17, 0x00	; 0
    4822:	f8 01       	movw	r30, r16
    4824:	e0 80       	ld	r14, Z
    4826:	0e 94 ad 23 	call	0x475a	; 0x475a <twi_disable>
    482a:	0e 94 8f 23 	call	0x471e	; 0x471e <twi_init>
    482e:	f8 01       	movw	r30, r16
    4830:	e0 82       	st	Z, r14
    4832:	f8 82       	st	Y, r15
    4834:	df 91       	pop	r29
    4836:	cf 91       	pop	r28
    4838:	1f 91       	pop	r17
    483a:	0f 91       	pop	r16
    483c:	ff 90       	pop	r15
    483e:	ef 90       	pop	r14
    4840:	08 95       	ret

00004842 <twi_writeTo>:
    4842:	4f 92       	push	r4
    4844:	5f 92       	push	r5
    4846:	6f 92       	push	r6
    4848:	7f 92       	push	r7
    484a:	8f 92       	push	r8
    484c:	9f 92       	push	r9
    484e:	af 92       	push	r10
    4850:	bf 92       	push	r11
    4852:	df 92       	push	r13
    4854:	ef 92       	push	r14
    4856:	ff 92       	push	r15
    4858:	0f 93       	push	r16
    485a:	1f 93       	push	r17
    485c:	cf 93       	push	r28
    485e:	df 93       	push	r29
    4860:	41 32       	cpi	r20, 0x21	; 33
    4862:	08 f0       	brcs	.+2      	; 0x4866 <twi_writeTo+0x24>
    4864:	d9 c0       	rjmp	.+434    	; 0x4a18 <twi_writeTo+0x1d6>
    4866:	12 2f       	mov	r17, r18
    4868:	d4 2f       	mov	r29, r20
    486a:	7b 01       	movw	r14, r22
    486c:	d8 2e       	mov	r13, r24
    486e:	0e 94 0e 02 	call	0x41c	; 0x41c <micros>
    4872:	4b 01       	movw	r8, r22
    4874:	5c 01       	movw	r10, r24
    4876:	27 c0       	rjmp	.+78     	; 0x48c6 <twi_writeTo+0x84>
    4878:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <twi_timeout_us>
    487c:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <twi_timeout_us+0x1>
    4880:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <twi_timeout_us+0x2>
    4884:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <twi_timeout_us+0x3>
    4888:	89 2b       	or	r24, r25
    488a:	8a 2b       	or	r24, r26
    488c:	8b 2b       	or	r24, r27
    488e:	d9 f0       	breq	.+54     	; 0x48c6 <twi_writeTo+0x84>
    4890:	0e 94 0e 02 	call	0x41c	; 0x41c <micros>
    4894:	dc 01       	movw	r26, r24
    4896:	cb 01       	movw	r24, r22
    4898:	88 19       	sub	r24, r8
    489a:	99 09       	sbc	r25, r9
    489c:	aa 09       	sbc	r26, r10
    489e:	bb 09       	sbc	r27, r11
    48a0:	40 90 4e 05 	lds	r4, 0x054E	; 0x80054e <twi_timeout_us>
    48a4:	50 90 4f 05 	lds	r5, 0x054F	; 0x80054f <twi_timeout_us+0x1>
    48a8:	60 90 50 05 	lds	r6, 0x0550	; 0x800550 <twi_timeout_us+0x2>
    48ac:	70 90 51 05 	lds	r7, 0x0551	; 0x800551 <twi_timeout_us+0x3>
    48b0:	48 16       	cp	r4, r24
    48b2:	59 06       	cpc	r5, r25
    48b4:	6a 06       	cpc	r6, r26
    48b6:	7b 06       	cpc	r7, r27
    48b8:	30 f4       	brcc	.+12     	; 0x48c6 <twi_writeTo+0x84>
    48ba:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <twi_do_reset_on_timeout>
    48be:	0e 94 01 24 	call	0x4802	; 0x4802 <twi_handleTimeout>
    48c2:	c5 e0       	ldi	r28, 0x05	; 5
    48c4:	ae c0       	rjmp	.+348    	; 0x4a22 <twi_writeTo+0x1e0>
    48c6:	c0 91 55 05 	lds	r28, 0x0555	; 0x800555 <twi_state>
    48ca:	c1 11       	cpse	r28, r1
    48cc:	d5 cf       	rjmp	.-86     	; 0x4878 <twi_writeTo+0x36>
    48ce:	82 e0       	ldi	r24, 0x02	; 2
    48d0:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <twi_state>
    48d4:	00 93 53 05 	sts	0x0553, r16	; 0x800553 <twi_sendStop>
    48d8:	8f ef       	ldi	r24, 0xFF	; 255
    48da:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <twi_error>
    48de:	10 92 27 05 	sts	0x0527, r1	; 0x800527 <twi_masterBufferIndex>
    48e2:	d0 93 26 05 	sts	0x0526, r29	; 0x800526 <twi_masterBufferLength>
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	0a c0       	rjmp	.+20     	; 0x48fe <twi_writeTo+0xbc>
    48ea:	e9 2f       	mov	r30, r25
    48ec:	f0 e0       	ldi	r31, 0x00	; 0
    48ee:	d7 01       	movw	r26, r14
    48f0:	ae 0f       	add	r26, r30
    48f2:	bf 1f       	adc	r27, r31
    48f4:	3c 91       	ld	r19, X
    48f6:	e8 5d       	subi	r30, 0xD8	; 216
    48f8:	fa 4f       	sbci	r31, 0xFA	; 250
    48fa:	30 83       	st	Z, r19
    48fc:	9f 5f       	subi	r25, 0xFF	; 255
    48fe:	9d 17       	cp	r25, r29
    4900:	a0 f3       	brcs	.-24     	; 0x48ea <twi_writeTo+0xa8>
    4902:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <twi_slarw>
    4906:	8d 2d       	mov	r24, r13
    4908:	90 e0       	ldi	r25, 0x00	; 0
    490a:	88 0f       	add	r24, r24
    490c:	99 1f       	adc	r25, r25
    490e:	d0 90 54 05 	lds	r13, 0x0554	; 0x800554 <twi_slarw>
    4912:	8d 29       	or	r24, r13
    4914:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <twi_slarw>
    4918:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <twi_inRepStart>
    491c:	81 30       	cpi	r24, 0x01	; 1
    491e:	c9 f5       	brne	.+114    	; 0x4992 <twi_writeTo+0x150>
    4920:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <twi_inRepStart>
    4924:	0e 94 0e 02 	call	0x41c	; 0x41c <micros>
    4928:	4b 01       	movw	r8, r22
    492a:	5c 01       	movw	r10, r24
    492c:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <twi_slarw>
    4930:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    4934:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <twi_timeout_us>
    4938:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <twi_timeout_us+0x1>
    493c:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <twi_timeout_us+0x2>
    4940:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <twi_timeout_us+0x3>
    4944:	89 2b       	or	r24, r25
    4946:	8a 2b       	or	r24, r26
    4948:	8b 2b       	or	r24, r27
    494a:	d9 f0       	breq	.+54     	; 0x4982 <twi_writeTo+0x140>
    494c:	0e 94 0e 02 	call	0x41c	; 0x41c <micros>
    4950:	dc 01       	movw	r26, r24
    4952:	cb 01       	movw	r24, r22
    4954:	88 19       	sub	r24, r8
    4956:	99 09       	sbc	r25, r9
    4958:	aa 09       	sbc	r26, r10
    495a:	bb 09       	sbc	r27, r11
    495c:	40 90 4e 05 	lds	r4, 0x054E	; 0x80054e <twi_timeout_us>
    4960:	50 90 4f 05 	lds	r5, 0x054F	; 0x80054f <twi_timeout_us+0x1>
    4964:	60 90 50 05 	lds	r6, 0x0550	; 0x800550 <twi_timeout_us+0x2>
    4968:	70 90 51 05 	lds	r7, 0x0551	; 0x800551 <twi_timeout_us+0x3>
    496c:	48 16       	cp	r4, r24
    496e:	59 06       	cpc	r5, r25
    4970:	6a 06       	cpc	r6, r26
    4972:	7b 06       	cpc	r7, r27
    4974:	30 f4       	brcc	.+12     	; 0x4982 <twi_writeTo+0x140>
    4976:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <twi_do_reset_on_timeout>
    497a:	0e 94 01 24 	call	0x4802	; 0x4802 <twi_handleTimeout>
    497e:	c5 e0       	ldi	r28, 0x05	; 5
    4980:	50 c0       	rjmp	.+160    	; 0x4a22 <twi_writeTo+0x1e0>
    4982:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4986:	83 fd       	sbrc	r24, 3
    4988:	d1 cf       	rjmp	.-94     	; 0x492c <twi_writeTo+0xea>
    498a:	85 ec       	ldi	r24, 0xC5	; 197
    498c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4990:	03 c0       	rjmp	.+6      	; 0x4998 <twi_writeTo+0x156>
    4992:	85 ee       	ldi	r24, 0xE5	; 229
    4994:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4998:	0e 94 0e 02 	call	0x41c	; 0x41c <micros>
    499c:	4b 01       	movw	r8, r22
    499e:	5c 01       	movw	r10, r24
    49a0:	27 c0       	rjmp	.+78     	; 0x49f0 <twi_writeTo+0x1ae>
    49a2:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <twi_timeout_us>
    49a6:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <twi_timeout_us+0x1>
    49aa:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <twi_timeout_us+0x2>
    49ae:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <twi_timeout_us+0x3>
    49b2:	89 2b       	or	r24, r25
    49b4:	8a 2b       	or	r24, r26
    49b6:	8b 2b       	or	r24, r27
    49b8:	d9 f0       	breq	.+54     	; 0x49f0 <twi_writeTo+0x1ae>
    49ba:	0e 94 0e 02 	call	0x41c	; 0x41c <micros>
    49be:	dc 01       	movw	r26, r24
    49c0:	cb 01       	movw	r24, r22
    49c2:	88 19       	sub	r24, r8
    49c4:	99 09       	sbc	r25, r9
    49c6:	aa 09       	sbc	r26, r10
    49c8:	bb 09       	sbc	r27, r11
    49ca:	40 90 4e 05 	lds	r4, 0x054E	; 0x80054e <twi_timeout_us>
    49ce:	50 90 4f 05 	lds	r5, 0x054F	; 0x80054f <twi_timeout_us+0x1>
    49d2:	60 90 50 05 	lds	r6, 0x0550	; 0x800550 <twi_timeout_us+0x2>
    49d6:	70 90 51 05 	lds	r7, 0x0551	; 0x800551 <twi_timeout_us+0x3>
    49da:	48 16       	cp	r4, r24
    49dc:	59 06       	cpc	r5, r25
    49de:	6a 06       	cpc	r6, r26
    49e0:	7b 06       	cpc	r7, r27
    49e2:	30 f4       	brcc	.+12     	; 0x49f0 <twi_writeTo+0x1ae>
    49e4:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <twi_do_reset_on_timeout>
    49e8:	0e 94 01 24 	call	0x4802	; 0x4802 <twi_handleTimeout>
    49ec:	c5 e0       	ldi	r28, 0x05	; 5
    49ee:	19 c0       	rjmp	.+50     	; 0x4a22 <twi_writeTo+0x1e0>
    49f0:	11 23       	and	r17, r17
    49f2:	21 f0       	breq	.+8      	; 0x49fc <twi_writeTo+0x1ba>
    49f4:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <twi_state>
    49f8:	82 30       	cpi	r24, 0x02	; 2
    49fa:	99 f2       	breq	.-90     	; 0x49a2 <twi_writeTo+0x160>
    49fc:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <twi_error>
    4a00:	8f 3f       	cpi	r24, 0xFF	; 255
    4a02:	79 f0       	breq	.+30     	; 0x4a22 <twi_writeTo+0x1e0>
    4a04:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <twi_error>
    4a08:	80 32       	cpi	r24, 0x20	; 32
    4a0a:	41 f0       	breq	.+16     	; 0x4a1c <twi_writeTo+0x1da>
    4a0c:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <twi_error>
    4a10:	80 33       	cpi	r24, 0x30	; 48
    4a12:	31 f4       	brne	.+12     	; 0x4a20 <twi_writeTo+0x1de>
    4a14:	c3 e0       	ldi	r28, 0x03	; 3
    4a16:	05 c0       	rjmp	.+10     	; 0x4a22 <twi_writeTo+0x1e0>
    4a18:	c1 e0       	ldi	r28, 0x01	; 1
    4a1a:	03 c0       	rjmp	.+6      	; 0x4a22 <twi_writeTo+0x1e0>
    4a1c:	c2 e0       	ldi	r28, 0x02	; 2
    4a1e:	01 c0       	rjmp	.+2      	; 0x4a22 <twi_writeTo+0x1e0>
    4a20:	c4 e0       	ldi	r28, 0x04	; 4
    4a22:	8c 2f       	mov	r24, r28
    4a24:	df 91       	pop	r29
    4a26:	cf 91       	pop	r28
    4a28:	1f 91       	pop	r17
    4a2a:	0f 91       	pop	r16
    4a2c:	ff 90       	pop	r15
    4a2e:	ef 90       	pop	r14
    4a30:	df 90       	pop	r13
    4a32:	bf 90       	pop	r11
    4a34:	af 90       	pop	r10
    4a36:	9f 90       	pop	r9
    4a38:	8f 90       	pop	r8
    4a3a:	7f 90       	pop	r7
    4a3c:	6f 90       	pop	r6
    4a3e:	5f 90       	pop	r5
    4a40:	4f 90       	pop	r4
    4a42:	08 95       	ret

00004a44 <twi_stop>:
    4a44:	85 ed       	ldi	r24, 0xD5	; 213
    4a46:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4a4a:	40 91 4e 05 	lds	r20, 0x054E	; 0x80054e <twi_timeout_us>
    4a4e:	50 91 4f 05 	lds	r21, 0x054F	; 0x80054f <twi_timeout_us+0x1>
    4a52:	60 91 50 05 	lds	r22, 0x0550	; 0x800550 <twi_timeout_us+0x2>
    4a56:	70 91 51 05 	lds	r23, 0x0551	; 0x800551 <twi_timeout_us+0x3>
    4a5a:	49 5f       	subi	r20, 0xF9	; 249
    4a5c:	5f 4f       	sbci	r21, 0xFF	; 255
    4a5e:	6f 4f       	sbci	r22, 0xFF	; 255
    4a60:	7f 4f       	sbci	r23, 0xFF	; 255
    4a62:	68 94       	set
    4a64:	12 f8       	bld	r1, 2
    4a66:	76 95       	lsr	r23
    4a68:	67 95       	ror	r22
    4a6a:	57 95       	ror	r21
    4a6c:	47 95       	ror	r20
    4a6e:	16 94       	lsr	r1
    4a70:	d1 f7       	brne	.-12     	; 0x4a66 <twi_stop+0x22>
    4a72:	1f c0       	rjmp	.+62     	; 0x4ab2 <twi_stop+0x6e>
    4a74:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <twi_timeout_us>
    4a78:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <twi_timeout_us+0x1>
    4a7c:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <twi_timeout_us+0x2>
    4a80:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <twi_timeout_us+0x3>
    4a84:	89 2b       	or	r24, r25
    4a86:	8a 2b       	or	r24, r26
    4a88:	8b 2b       	or	r24, r27
    4a8a:	99 f0       	breq	.+38     	; 0x4ab2 <twi_stop+0x6e>
    4a8c:	41 15       	cp	r20, r1
    4a8e:	51 05       	cpc	r21, r1
    4a90:	61 05       	cpc	r22, r1
    4a92:	71 05       	cpc	r23, r1
    4a94:	49 f0       	breq	.+18     	; 0x4aa8 <twi_stop+0x64>
    4a96:	85 e3       	ldi	r24, 0x35	; 53
    4a98:	8a 95       	dec	r24
    4a9a:	f1 f7       	brne	.-4      	; 0x4a98 <twi_stop+0x54>
    4a9c:	00 00       	nop
    4a9e:	41 50       	subi	r20, 0x01	; 1
    4aa0:	51 09       	sbc	r21, r1
    4aa2:	61 09       	sbc	r22, r1
    4aa4:	71 09       	sbc	r23, r1
    4aa6:	05 c0       	rjmp	.+10     	; 0x4ab2 <twi_stop+0x6e>
    4aa8:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <twi_do_reset_on_timeout>
    4aac:	0e 94 01 24 	call	0x4802	; 0x4802 <twi_handleTimeout>
    4ab0:	08 95       	ret
    4ab2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    4ab6:	84 fd       	sbrc	r24, 4
    4ab8:	dd cf       	rjmp	.-70     	; 0x4a74 <twi_stop+0x30>
    4aba:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <twi_state>
    4abe:	08 95       	ret

00004ac0 <__vector_24>:

ISR(TWI_vect)
{
    4ac0:	1f 92       	push	r1
    4ac2:	0f 92       	push	r0
    4ac4:	0f b6       	in	r0, 0x3f	; 63
    4ac6:	0f 92       	push	r0
    4ac8:	11 24       	eor	r1, r1
    4aca:	2f 93       	push	r18
    4acc:	3f 93       	push	r19
    4ace:	4f 93       	push	r20
    4ad0:	5f 93       	push	r21
    4ad2:	6f 93       	push	r22
    4ad4:	7f 93       	push	r23
    4ad6:	8f 93       	push	r24
    4ad8:	9f 93       	push	r25
    4ada:	af 93       	push	r26
    4adc:	bf 93       	push	r27
    4ade:	ef 93       	push	r30
    4ae0:	ff 93       	push	r31
  switch(TW_STATUS){
    4ae2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    4ae6:	e8 2f       	mov	r30, r24
    4ae8:	e8 7f       	andi	r30, 0xF8	; 248
    4aea:	8e 2f       	mov	r24, r30
    4aec:	90 e0       	ldi	r25, 0x00	; 0
    4aee:	89 3c       	cpi	r24, 0xC9	; 201
    4af0:	91 05       	cpc	r25, r1
    4af2:	08 f0       	brcs	.+2      	; 0x4af6 <__vector_24+0x36>
    4af4:	f5 c0       	rjmp	.+490    	; 0x4ce0 <__vector_24+0x220>
    4af6:	fc 01       	movw	r30, r24
    4af8:	ec 5c       	subi	r30, 0xCC	; 204
    4afa:	ff 4f       	sbci	r31, 0xFF	; 255
    4afc:	0c 94 b4 29 	jmp	0x5368	; 0x5368 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4b00:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <twi_slarw>
    4b04:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      twi_reply(1);
    4b08:	81 e0       	ldi	r24, 0x01	; 1
    4b0a:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <twi_reply>
      break;
    4b0e:	e8 c0       	rjmp	.+464    	; 0x4ce0 <__vector_24+0x220>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4b10:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <twi_masterBufferIndex>
    4b14:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <twi_masterBufferLength>
    4b18:	98 17       	cp	r25, r24
    4b1a:	80 f4       	brcc	.+32     	; 0x4b3c <__vector_24+0x7c>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4b1c:	e0 91 27 05 	lds	r30, 0x0527	; 0x800527 <twi_masterBufferIndex>
    4b20:	81 e0       	ldi	r24, 0x01	; 1
    4b22:	8e 0f       	add	r24, r30
    4b24:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <twi_masterBufferIndex>
    4b28:	f0 e0       	ldi	r31, 0x00	; 0
    4b2a:	e8 5d       	subi	r30, 0xD8	; 216
    4b2c:	fa 4f       	sbci	r31, 0xFA	; 250
    4b2e:	80 81       	ld	r24, Z
    4b30:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
        twi_reply(1);
    4b34:	81 e0       	ldi	r24, 0x01	; 1
    4b36:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <twi_reply>
    4b3a:	d2 c0       	rjmp	.+420    	; 0x4ce0 <__vector_24+0x220>
      }else{
        if (twi_sendStop){
    4b3c:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <twi_sendStop>
    4b40:	88 23       	and	r24, r24
    4b42:	19 f0       	breq	.+6      	; 0x4b4a <__vector_24+0x8a>
          twi_stop();
    4b44:	0e 94 22 25 	call	0x4a44	; 0x4a44 <twi_stop>
    4b48:	cb c0       	rjmp	.+406    	; 0x4ce0 <__vector_24+0x220>
       } else {
         twi_inRepStart = true;	// we're gonna send the START
    4b4a:	81 e0       	ldi	r24, 0x01	; 1
    4b4c:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <twi_inRepStart>
         // don't enable the interrupt. We'll generate the start, but we
         // avoid handling the interrupt until we're in the next transaction,
         // at the point where we would normally issue the start.
         TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4b50:	84 ea       	ldi	r24, 0xA4	; 164
    4b52:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
         twi_state = TWI_READY;
    4b56:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <twi_state>
    4b5a:	c2 c0       	rjmp	.+388    	; 0x4ce0 <__vector_24+0x220>
        }
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    4b5c:	80 e2       	ldi	r24, 0x20	; 32
    4b5e:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <twi_error>
      twi_stop();
    4b62:	0e 94 22 25 	call	0x4a44	; 0x4a44 <twi_stop>
      break;
    4b66:	bc c0       	rjmp	.+376    	; 0x4ce0 <__vector_24+0x220>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4b68:	80 e3       	ldi	r24, 0x30	; 48
    4b6a:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <twi_error>
      twi_stop();
    4b6e:	0e 94 22 25 	call	0x4a44	; 0x4a44 <twi_stop>
      break;
    4b72:	b6 c0       	rjmp	.+364    	; 0x4ce0 <__vector_24+0x220>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    4b74:	88 e3       	ldi	r24, 0x38	; 56
    4b76:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <twi_error>
      twi_releaseBus();
    4b7a:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <twi_releaseBus>
      break;
    4b7e:	b0 c0       	rjmp	.+352    	; 0x4ce0 <__vector_24+0x220>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4b80:	e0 91 27 05 	lds	r30, 0x0527	; 0x800527 <twi_masterBufferIndex>
    4b84:	81 e0       	ldi	r24, 0x01	; 1
    4b86:	8e 0f       	add	r24, r30
    4b88:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <twi_masterBufferIndex>
    4b8c:	f0 e0       	ldi	r31, 0x00	; 0
    4b8e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    4b92:	e8 5d       	subi	r30, 0xD8	; 216
    4b94:	fa 4f       	sbci	r31, 0xFA	; 250
    4b96:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4b98:	90 91 27 05 	lds	r25, 0x0527	; 0x800527 <twi_masterBufferIndex>
    4b9c:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <twi_masterBufferLength>
    4ba0:	98 17       	cp	r25, r24
    4ba2:	20 f4       	brcc	.+8      	; 0x4bac <__vector_24+0xec>
        twi_reply(1);
    4ba4:	81 e0       	ldi	r24, 0x01	; 1
    4ba6:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <twi_reply>
    4baa:	9a c0       	rjmp	.+308    	; 0x4ce0 <__vector_24+0x220>
      }else{
        twi_reply(0);
    4bac:	80 e0       	ldi	r24, 0x00	; 0
    4bae:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <twi_reply>
    4bb2:	96 c0       	rjmp	.+300    	; 0x4ce0 <__vector_24+0x220>
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    4bb4:	e0 91 27 05 	lds	r30, 0x0527	; 0x800527 <twi_masterBufferIndex>
    4bb8:	81 e0       	ldi	r24, 0x01	; 1
    4bba:	8e 0f       	add	r24, r30
    4bbc:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <twi_masterBufferIndex>
    4bc0:	f0 e0       	ldi	r31, 0x00	; 0
    4bc2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    4bc6:	e8 5d       	subi	r30, 0xD8	; 216
    4bc8:	fa 4f       	sbci	r31, 0xFA	; 250
    4bca:	80 83       	st	Z, r24
      if (twi_sendStop){
    4bcc:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <twi_sendStop>
    4bd0:	88 23       	and	r24, r24
    4bd2:	19 f0       	breq	.+6      	; 0x4bda <__vector_24+0x11a>
        twi_stop();
    4bd4:	0e 94 22 25 	call	0x4a44	; 0x4a44 <twi_stop>
    4bd8:	83 c0       	rjmp	.+262    	; 0x4ce0 <__vector_24+0x220>
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    4bda:	81 e0       	ldi	r24, 0x01	; 1
    4bdc:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    4be0:	84 ea       	ldi	r24, 0xA4	; 164
    4be2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
        twi_state = TWI_READY;
    4be6:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <twi_state>
    4bea:	7a c0       	rjmp	.+244    	; 0x4ce0 <__vector_24+0x220>
      }
      break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    4bec:	0e 94 22 25 	call	0x4a44	; 0x4a44 <twi_stop>
      break;
    4bf0:	77 c0       	rjmp	.+238    	; 0x4ce0 <__vector_24+0x220>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    4bf2:	83 e0       	ldi	r24, 0x03	; 3
    4bf4:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    4bf8:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <twi_rxBufferIndex>
      twi_reply(1);
    4bfc:	81 e0       	ldi	r24, 0x01	; 1
    4bfe:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <twi_reply>
      break;
    4c02:	6e c0       	rjmp	.+220    	; 0x4ce0 <__vector_24+0x220>
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4c04:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <twi_rxBufferIndex>
    4c08:	80 32       	cpi	r24, 0x20	; 32
    4c0a:	80 f4       	brcc	.+32     	; 0x4c2c <__vector_24+0x16c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    4c0c:	e0 91 e3 04 	lds	r30, 0x04E3	; 0x8004e3 <twi_rxBufferIndex>
    4c10:	81 e0       	ldi	r24, 0x01	; 1
    4c12:	8e 0f       	add	r24, r30
    4c14:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <twi_rxBufferIndex>
    4c18:	f0 e0       	ldi	r31, 0x00	; 0
    4c1a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    4c1e:	ec 51       	subi	r30, 0x1C	; 28
    4c20:	fb 4f       	sbci	r31, 0xFB	; 251
    4c22:	80 83       	st	Z, r24
        twi_reply(1);
    4c24:	81 e0       	ldi	r24, 0x01	; 1
    4c26:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <twi_reply>
    4c2a:	5a c0       	rjmp	.+180    	; 0x4ce0 <__vector_24+0x220>
      }else{
        // otherwise nack
        twi_reply(0);
    4c2c:	80 e0       	ldi	r24, 0x00	; 0
    4c2e:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <twi_reply>
    4c32:	56 c0       	rjmp	.+172    	; 0x4ce0 <__vector_24+0x220>
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    4c34:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    4c38:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <twi_rxBufferIndex>
    4c3c:	80 32       	cpi	r24, 0x20	; 32
    4c3e:	30 f4       	brcc	.+12     	; 0x4c4c <__vector_24+0x18c>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4c40:	e0 91 e3 04 	lds	r30, 0x04E3	; 0x8004e3 <twi_rxBufferIndex>
    4c44:	f0 e0       	ldi	r31, 0x00	; 0
    4c46:	ec 51       	subi	r30, 0x1C	; 28
    4c48:	fb 4f       	sbci	r31, 0xFB	; 251
    4c4a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    4c4c:	60 91 e3 04 	lds	r22, 0x04E3	; 0x8004e3 <twi_rxBufferIndex>
    4c50:	70 e0       	ldi	r23, 0x00	; 0
    4c52:	e0 91 48 05 	lds	r30, 0x0548	; 0x800548 <twi_onSlaveReceive>
    4c56:	f0 91 49 05 	lds	r31, 0x0549	; 0x800549 <twi_onSlaveReceive+0x1>
    4c5a:	84 ee       	ldi	r24, 0xE4	; 228
    4c5c:	94 e0       	ldi	r25, 0x04	; 4
    4c5e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4c60:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <twi_rxBufferIndex>
      break;
    4c64:	3d c0       	rjmp	.+122    	; 0x4ce0 <__vector_24+0x220>
    case TW_SR_DATA_NACK:       // data received, returned nack
    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack
      // nack back at master
      twi_reply(0);
    4c66:	80 e0       	ldi	r24, 0x00	; 0
    4c68:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <twi_reply>
      break;
    4c6c:	39 c0       	rjmp	.+114    	; 0x4ce0 <__vector_24+0x220>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4c6e:	84 e0       	ldi	r24, 0x04	; 4
    4c70:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    4c74:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4c78:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4c7c:	e0 91 4a 05 	lds	r30, 0x054A	; 0x80054a <twi_onSlaveTransmit>
    4c80:	f0 91 4b 05 	lds	r31, 0x054B	; 0x80054b <twi_onSlaveTransmit+0x1>
    4c84:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    4c86:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <twi_txBufferLength>
    4c8a:	81 11       	cpse	r24, r1
    4c8c:	05 c0       	rjmp	.+10     	; 0x4c98 <__vector_24+0x1d8>
        twi_txBufferLength = 1;
    4c8e:	81 e0       	ldi	r24, 0x01	; 1
    4c90:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    4c94:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4c98:	e0 91 05 05 	lds	r30, 0x0505	; 0x800505 <twi_txBufferIndex>
    4c9c:	81 e0       	ldi	r24, 0x01	; 1
    4c9e:	8e 0f       	add	r24, r30
    4ca0:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <twi_txBufferIndex>
    4ca4:	f0 e0       	ldi	r31, 0x00	; 0
    4ca6:	ea 5f       	subi	r30, 0xFA	; 250
    4ca8:	fa 4f       	sbci	r31, 0xFA	; 250
    4caa:	80 81       	ld	r24, Z
    4cac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4cb0:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <twi_txBufferIndex>
    4cb4:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <twi_txBufferLength>
    4cb8:	98 17       	cp	r25, r24
    4cba:	20 f4       	brcc	.+8      	; 0x4cc4 <__vector_24+0x204>
        twi_reply(1);
    4cbc:	81 e0       	ldi	r24, 0x01	; 1
    4cbe:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <twi_reply>
    4cc2:	0e c0       	rjmp	.+28     	; 0x4ce0 <__vector_24+0x220>
      }else{
        twi_reply(0);
    4cc4:	80 e0       	ldi	r24, 0x00	; 0
    4cc6:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <twi_reply>
    4cca:	0a c0       	rjmp	.+20     	; 0x4ce0 <__vector_24+0x220>
      }
      break;
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
    4ccc:	81 e0       	ldi	r24, 0x01	; 1
    4cce:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <twi_reply>
      // leave slave receiver state
      twi_state = TWI_READY;
    4cd2:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <twi_state>
      break;
    4cd6:	04 c0       	rjmp	.+8      	; 0x4ce0 <__vector_24+0x220>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    4cd8:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <twi_error>
      twi_stop();
    4cdc:	0e 94 22 25 	call	0x4a44	; 0x4a44 <twi_stop>
      break;
  }
}
    4ce0:	ff 91       	pop	r31
    4ce2:	ef 91       	pop	r30
    4ce4:	bf 91       	pop	r27
    4ce6:	af 91       	pop	r26
    4ce8:	9f 91       	pop	r25
    4cea:	8f 91       	pop	r24
    4cec:	7f 91       	pop	r23
    4cee:	6f 91       	pop	r22
    4cf0:	5f 91       	pop	r21
    4cf2:	4f 91       	pop	r20
    4cf4:	3f 91       	pop	r19
    4cf6:	2f 91       	pop	r18
    4cf8:	0f 90       	pop	r0
    4cfa:	0f be       	out	0x3f, r0	; 63
    4cfc:	0f 90       	pop	r0
    4cfe:	1f 90       	pop	r1
    4d00:	18 95       	reti

00004d02 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    4d02:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <_ZN7TwoWire14rxBufferLengthE>
    4d06:	90 e0       	ldi	r25, 0x00	; 0
    4d08:	20 91 8b 05 	lds	r18, 0x058B	; 0x80058b <_ZN7TwoWire13rxBufferIndexE>
    4d0c:	82 1b       	sub	r24, r18
    4d0e:	91 09       	sbc	r25, r1
    4d10:	08 95       	ret

00004d12 <_ZN7TwoWire4readEv>:
    4d12:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <_ZN7TwoWire13rxBufferIndexE>
    4d16:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <_ZN7TwoWire14rxBufferLengthE>
    4d1a:	98 17       	cp	r25, r24
    4d1c:	50 f4       	brcc	.+20     	; 0x4d32 <_ZN7TwoWire4readEv+0x20>
    4d1e:	e9 2f       	mov	r30, r25
    4d20:	f0 e0       	ldi	r31, 0x00	; 0
    4d22:	e4 57       	subi	r30, 0x74	; 116
    4d24:	fa 4f       	sbci	r31, 0xFA	; 250
    4d26:	20 81       	ld	r18, Z
    4d28:	30 e0       	ldi	r19, 0x00	; 0
    4d2a:	9f 5f       	subi	r25, 0xFF	; 255
    4d2c:	90 93 8b 05 	sts	0x058B, r25	; 0x80058b <_ZN7TwoWire13rxBufferIndexE>
    4d30:	02 c0       	rjmp	.+4      	; 0x4d36 <_ZN7TwoWire4readEv+0x24>
    4d32:	2f ef       	ldi	r18, 0xFF	; 255
    4d34:	3f ef       	ldi	r19, 0xFF	; 255
    4d36:	c9 01       	movw	r24, r18
    4d38:	08 95       	ret

00004d3a <_ZN7TwoWire4peekEv>:
    4d3a:	e0 91 8b 05 	lds	r30, 0x058B	; 0x80058b <_ZN7TwoWire13rxBufferIndexE>
    4d3e:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <_ZN7TwoWire14rxBufferLengthE>
    4d42:	e8 17       	cp	r30, r24
    4d44:	30 f4       	brcc	.+12     	; 0x4d52 <_ZN7TwoWire4peekEv+0x18>
    4d46:	f0 e0       	ldi	r31, 0x00	; 0
    4d48:	e4 57       	subi	r30, 0x74	; 116
    4d4a:	fa 4f       	sbci	r31, 0xFA	; 250
    4d4c:	80 81       	ld	r24, Z
    4d4e:	90 e0       	ldi	r25, 0x00	; 0
    4d50:	08 95       	ret
    4d52:	8f ef       	ldi	r24, 0xFF	; 255
    4d54:	9f ef       	ldi	r25, 0xFF	; 255
    4d56:	08 95       	ret

00004d58 <_ZN7TwoWire5flushEv>:
    4d58:	08 95       	ret

00004d5a <_ZN7TwoWire16onReceiveServiceEPhi>:
    4d5a:	cf 93       	push	r28
    4d5c:	df 93       	push	r29
    4d5e:	ec 01       	movw	r28, r24
    4d60:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <_ZN7TwoWire14user_onReceiveE>
    4d64:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <_ZN7TwoWire14user_onReceiveE+0x1>
    4d68:	30 97       	sbiw	r30, 0x00	; 0
    4d6a:	e1 f0       	breq	.+56     	; 0x4da4 <_ZN7TwoWire16onReceiveServiceEPhi+0x4a>
    4d6c:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <_ZN7TwoWire13rxBufferIndexE>
    4d70:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <_ZN7TwoWire14rxBufferLengthE>
    4d74:	98 17       	cp	r25, r24
    4d76:	b0 f0       	brcs	.+44     	; 0x4da4 <_ZN7TwoWire16onReceiveServiceEPhi+0x4a>
    4d78:	90 e0       	ldi	r25, 0x00	; 0
    4d7a:	29 2f       	mov	r18, r25
    4d7c:	30 e0       	ldi	r19, 0x00	; 0
    4d7e:	26 17       	cp	r18, r22
    4d80:	37 07       	cpc	r19, r23
    4d82:	54 f4       	brge	.+20     	; 0x4d98 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    4d84:	de 01       	movw	r26, r28
    4d86:	a9 0f       	add	r26, r25
    4d88:	b1 1d       	adc	r27, r1
    4d8a:	4c 91       	ld	r20, X
    4d8c:	d9 01       	movw	r26, r18
    4d8e:	a4 57       	subi	r26, 0x74	; 116
    4d90:	ba 4f       	sbci	r27, 0xFA	; 250
    4d92:	4c 93       	st	X, r20
    4d94:	9f 5f       	subi	r25, 0xFF	; 255
    4d96:	f1 cf       	rjmp	.-30     	; 0x4d7a <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    4d98:	cb 01       	movw	r24, r22
    4d9a:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <_ZN7TwoWire13rxBufferIndexE>
    4d9e:	60 93 8a 05 	sts	0x058A, r22	; 0x80058a <_ZN7TwoWire14rxBufferLengthE>
    4da2:	09 95       	icall
    4da4:	df 91       	pop	r29
    4da6:	cf 91       	pop	r28
    4da8:	08 95       	ret

00004daa <_ZN7TwoWire16onRequestServiceEv>:
    4daa:	e0 91 64 05 	lds	r30, 0x0564	; 0x800564 <_ZN7TwoWire14user_onRequestE>
    4dae:	f0 91 65 05 	lds	r31, 0x0565	; 0x800565 <_ZN7TwoWire14user_onRequestE+0x1>
    4db2:	30 97       	sbiw	r30, 0x00	; 0
    4db4:	29 f0       	breq	.+10     	; 0x4dc0 <_ZN7TwoWire16onRequestServiceEv+0x16>
    4db6:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <_ZN7TwoWire13txBufferIndexE>
    4dba:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <_ZN7TwoWire14txBufferLengthE>
    4dbe:	09 95       	icall
    4dc0:	08 95       	ret

00004dc2 <_ZN7TwoWire5writeEPKhj>:
    4dc2:	cf 92       	push	r12
    4dc4:	df 92       	push	r13
    4dc6:	ef 92       	push	r14
    4dc8:	ff 92       	push	r15
    4dca:	0f 93       	push	r16
    4dcc:	1f 93       	push	r17
    4dce:	cf 93       	push	r28
    4dd0:	df 93       	push	r29
    4dd2:	8c 01       	movw	r16, r24
    4dd4:	6b 01       	movw	r12, r22
    4dd6:	7a 01       	movw	r14, r20
    4dd8:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <_ZN7TwoWire12transmittingE>
    4ddc:	88 23       	and	r24, r24
    4dde:	99 f0       	breq	.+38     	; 0x4e06 <_ZN7TwoWire5writeEPKhj+0x44>
    4de0:	c0 e0       	ldi	r28, 0x00	; 0
    4de2:	d0 e0       	ldi	r29, 0x00	; 0
    4de4:	ce 15       	cp	r28, r14
    4de6:	df 05       	cpc	r29, r15
    4de8:	90 f4       	brcc	.+36     	; 0x4e0e <_ZN7TwoWire5writeEPKhj+0x4c>
    4dea:	d8 01       	movw	r26, r16
    4dec:	ed 91       	ld	r30, X+
    4dee:	fc 91       	ld	r31, X
    4df0:	01 90       	ld	r0, Z+
    4df2:	f0 81       	ld	r31, Z
    4df4:	e0 2d       	mov	r30, r0
    4df6:	d6 01       	movw	r26, r12
    4df8:	ac 0f       	add	r26, r28
    4dfa:	bd 1f       	adc	r27, r29
    4dfc:	6c 91       	ld	r22, X
    4dfe:	c8 01       	movw	r24, r16
    4e00:	09 95       	icall
    4e02:	21 96       	adiw	r28, 0x01	; 1
    4e04:	ef cf       	rjmp	.-34     	; 0x4de4 <_ZN7TwoWire5writeEPKhj+0x22>
    4e06:	64 2f       	mov	r22, r20
    4e08:	c6 01       	movw	r24, r12
    4e0a:	0e 94 bb 23 	call	0x4776	; 0x4776 <twi_transmit>
    4e0e:	c7 01       	movw	r24, r14
    4e10:	df 91       	pop	r29
    4e12:	cf 91       	pop	r28
    4e14:	1f 91       	pop	r17
    4e16:	0f 91       	pop	r16
    4e18:	ff 90       	pop	r15
    4e1a:	ef 90       	pop	r14
    4e1c:	df 90       	pop	r13
    4e1e:	cf 90       	pop	r12
    4e20:	08 95       	ret

00004e22 <_ZN7TwoWire5writeEh>:
    4e22:	cf 93       	push	r28
    4e24:	df 93       	push	r29
    4e26:	1f 92       	push	r1
    4e28:	cd b7       	in	r28, 0x3d	; 61
    4e2a:	de b7       	in	r29, 0x3e	; 62
    4e2c:	fc 01       	movw	r30, r24
    4e2e:	69 83       	std	Y+1, r22	; 0x01
    4e30:	90 91 66 05 	lds	r25, 0x0566	; 0x800566 <_ZN7TwoWire12transmittingE>
    4e34:	99 23       	and	r25, r25
    4e36:	d9 f0       	breq	.+54     	; 0x4e6e <_ZN7TwoWire5writeEh+0x4c>
    4e38:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <_ZN7TwoWire14txBufferLengthE>
    4e3c:	90 32       	cpi	r25, 0x20	; 32
    4e3e:	38 f0       	brcs	.+14     	; 0x4e4e <_ZN7TwoWire5writeEh+0x2c>
    4e40:	81 e0       	ldi	r24, 0x01	; 1
    4e42:	90 e0       	ldi	r25, 0x00	; 0
    4e44:	93 83       	std	Z+3, r25	; 0x03
    4e46:	82 83       	std	Z+2, r24	; 0x02
    4e48:	80 e0       	ldi	r24, 0x00	; 0
    4e4a:	90 e0       	ldi	r25, 0x00	; 0
    4e4c:	17 c0       	rjmp	.+46     	; 0x4e7c <_ZN7TwoWire5writeEh+0x5a>
    4e4e:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <_ZN7TwoWire13txBufferIndexE>
    4e52:	e8 2f       	mov	r30, r24
    4e54:	f0 e0       	ldi	r31, 0x00	; 0
    4e56:	e7 59       	subi	r30, 0x97	; 151
    4e58:	fa 4f       	sbci	r31, 0xFA	; 250
    4e5a:	99 81       	ldd	r25, Y+1	; 0x01
    4e5c:	90 83       	st	Z, r25
    4e5e:	8f 5f       	subi	r24, 0xFF	; 255
    4e60:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <_ZN7TwoWire13txBufferIndexE>
    4e64:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <_ZN7TwoWire14txBufferLengthE>
    4e68:	81 e0       	ldi	r24, 0x01	; 1
    4e6a:	90 e0       	ldi	r25, 0x00	; 0
    4e6c:	07 c0       	rjmp	.+14     	; 0x4e7c <_ZN7TwoWire5writeEh+0x5a>
    4e6e:	61 e0       	ldi	r22, 0x01	; 1
    4e70:	ce 01       	movw	r24, r28
    4e72:	01 96       	adiw	r24, 0x01	; 1
    4e74:	0e 94 bb 23 	call	0x4776	; 0x4776 <twi_transmit>
    4e78:	81 e0       	ldi	r24, 0x01	; 1
    4e7a:	90 e0       	ldi	r25, 0x00	; 0
    4e7c:	0f 90       	pop	r0
    4e7e:	df 91       	pop	r29
    4e80:	cf 91       	pop	r28
    4e82:	08 95       	ret

00004e84 <_ZN7TwoWireC1Ev>:
    4e84:	fc 01       	movw	r30, r24
    4e86:	13 82       	std	Z+3, r1	; 0x03
    4e88:	12 82       	std	Z+2, r1	; 0x02
    4e8a:	88 ee       	ldi	r24, 0xE8	; 232
    4e8c:	93 e0       	ldi	r25, 0x03	; 3
    4e8e:	a0 e0       	ldi	r26, 0x00	; 0
    4e90:	b0 e0       	ldi	r27, 0x00	; 0
    4e92:	84 83       	std	Z+4, r24	; 0x04
    4e94:	95 83       	std	Z+5, r25	; 0x05
    4e96:	a6 83       	std	Z+6, r26	; 0x06
    4e98:	b7 83       	std	Z+7, r27	; 0x07
    4e9a:	82 e5       	ldi	r24, 0x52	; 82
    4e9c:	92 e0       	ldi	r25, 0x02	; 2
    4e9e:	91 83       	std	Z+1, r25	; 0x01
    4ea0:	80 83       	st	Z, r24
    4ea2:	08 95       	ret

00004ea4 <_Z41__static_initialization_and_destruction_0ii>:
    4ea4:	01 97       	sbiw	r24, 0x01	; 1
    4ea6:	39 f4       	brne	.+14     	; 0x4eb6 <_Z41__static_initialization_and_destruction_0ii+0x12>
    4ea8:	6f 3f       	cpi	r22, 0xFF	; 255
    4eaa:	7f 4f       	sbci	r23, 0xFF	; 255
    4eac:	21 f4       	brne	.+8      	; 0x4eb6 <_Z41__static_initialization_and_destruction_0ii+0x12>
    4eae:	86 e5       	ldi	r24, 0x56	; 86
    4eb0:	95 e0       	ldi	r25, 0x05	; 5
    4eb2:	0e 94 42 27 	call	0x4e84	; 0x4e84 <_ZN7TwoWireC1Ev>
    4eb6:	08 95       	ret

00004eb8 <_ZN7TwoWire5beginEv>:
    4eb8:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <_ZN7TwoWire13rxBufferIndexE>
    4ebc:	10 92 8a 05 	sts	0x058A, r1	; 0x80058a <_ZN7TwoWire14rxBufferLengthE>
    4ec0:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <_ZN7TwoWire13txBufferIndexE>
    4ec4:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <_ZN7TwoWire14txBufferLengthE>
    4ec8:	0e 94 8f 23 	call	0x471e	; 0x471e <twi_init>
    4ecc:	85 ed       	ldi	r24, 0xD5	; 213
    4ece:	96 e2       	ldi	r25, 0x26	; 38
    4ed0:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <twi_attachSlaveTxEvent>
    4ed4:	8d ea       	ldi	r24, 0xAD	; 173
    4ed6:	96 e2       	ldi	r25, 0x26	; 38
    4ed8:	0e 94 e7 23 	call	0x47ce	; 0x47ce <twi_attachSlaveRxEvent>
    4edc:	08 95       	ret

00004ede <_ZN7TwoWire17beginTransmissionEh>:
    4ede:	81 e0       	ldi	r24, 0x01	; 1
    4ee0:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <_ZN7TwoWire12transmittingE>
    4ee4:	60 93 89 05 	sts	0x0589, r22	; 0x800589 <_ZN7TwoWire9txAddressE>
    4ee8:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <_ZN7TwoWire13txBufferIndexE>
    4eec:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <_ZN7TwoWire14txBufferLengthE>
    4ef0:	08 95       	ret

00004ef2 <_ZN7TwoWire15endTransmissionEh>:
    4ef2:	0f 93       	push	r16
    4ef4:	40 91 67 05 	lds	r20, 0x0567	; 0x800567 <_ZN7TwoWire14txBufferLengthE>
    4ef8:	06 2f       	mov	r16, r22
    4efa:	21 e0       	ldi	r18, 0x01	; 1
    4efc:	69 e6       	ldi	r22, 0x69	; 105
    4efe:	75 e0       	ldi	r23, 0x05	; 5
    4f00:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <_ZN7TwoWire9txAddressE>
    4f04:	0e 94 21 24 	call	0x4842	; 0x4842 <twi_writeTo>
    4f08:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <_ZN7TwoWire13txBufferIndexE>
    4f0c:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <_ZN7TwoWire14txBufferLengthE>
    4f10:	10 92 66 05 	sts	0x0566, r1	; 0x800566 <_ZN7TwoWire12transmittingE>
    4f14:	0f 91       	pop	r16
    4f16:	08 95       	ret

00004f18 <_ZN7TwoWire15endTransmissionEv>:
    4f18:	61 e0       	ldi	r22, 0x01	; 1
    4f1a:	0e 94 79 27 	call	0x4ef2	; 0x4ef2 <_ZN7TwoWire15endTransmissionEh>
    4f1e:	08 95       	ret

00004f20 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    4f20:	6f ef       	ldi	r22, 0xFF	; 255
    4f22:	7f ef       	ldi	r23, 0xFF	; 255
    4f24:	81 e0       	ldi	r24, 0x01	; 1
    4f26:	90 e0       	ldi	r25, 0x00	; 0
    4f28:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <_Z41__static_initialization_and_destruction_0ii>
    4f2c:	08 95       	ret

00004f2e <__subsf3>:
    4f2e:	50 58       	subi	r21, 0x80	; 128

00004f30 <__addsf3>:
    4f30:	bb 27       	eor	r27, r27
    4f32:	aa 27       	eor	r26, r26
    4f34:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <__addsf3x>
    4f38:	0c 94 f9 28 	jmp	0x51f2	; 0x51f2 <__fp_round>
    4f3c:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <__fp_pscA>
    4f40:	38 f0       	brcs	.+14     	; 0x4f50 <__addsf3+0x20>
    4f42:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <__fp_pscB>
    4f46:	20 f0       	brcs	.+8      	; 0x4f50 <__addsf3+0x20>
    4f48:	39 f4       	brne	.+14     	; 0x4f58 <__addsf3+0x28>
    4f4a:	9f 3f       	cpi	r25, 0xFF	; 255
    4f4c:	19 f4       	brne	.+6      	; 0x4f54 <__addsf3+0x24>
    4f4e:	26 f4       	brtc	.+8      	; 0x4f58 <__addsf3+0x28>
    4f50:	0c 94 e8 28 	jmp	0x51d0	; 0x51d0 <__fp_nan>
    4f54:	0e f4       	brtc	.+2      	; 0x4f58 <__addsf3+0x28>
    4f56:	e0 95       	com	r30
    4f58:	e7 fb       	bst	r30, 7
    4f5a:	0c 94 e2 28 	jmp	0x51c4	; 0x51c4 <__fp_inf>

00004f5e <__addsf3x>:
    4f5e:	e9 2f       	mov	r30, r25
    4f60:	0e 94 0a 29 	call	0x5214	; 0x5214 <__fp_split3>
    4f64:	58 f3       	brcs	.-42     	; 0x4f3c <__addsf3+0xc>
    4f66:	ba 17       	cp	r27, r26
    4f68:	62 07       	cpc	r22, r18
    4f6a:	73 07       	cpc	r23, r19
    4f6c:	84 07       	cpc	r24, r20
    4f6e:	95 07       	cpc	r25, r21
    4f70:	20 f0       	brcs	.+8      	; 0x4f7a <__addsf3x+0x1c>
    4f72:	79 f4       	brne	.+30     	; 0x4f92 <__addsf3x+0x34>
    4f74:	a6 f5       	brtc	.+104    	; 0x4fde <__addsf3x+0x80>
    4f76:	0c 94 2c 29 	jmp	0x5258	; 0x5258 <__fp_zero>
    4f7a:	0e f4       	brtc	.+2      	; 0x4f7e <__addsf3x+0x20>
    4f7c:	e0 95       	com	r30
    4f7e:	0b 2e       	mov	r0, r27
    4f80:	ba 2f       	mov	r27, r26
    4f82:	a0 2d       	mov	r26, r0
    4f84:	0b 01       	movw	r0, r22
    4f86:	b9 01       	movw	r22, r18
    4f88:	90 01       	movw	r18, r0
    4f8a:	0c 01       	movw	r0, r24
    4f8c:	ca 01       	movw	r24, r20
    4f8e:	a0 01       	movw	r20, r0
    4f90:	11 24       	eor	r1, r1
    4f92:	ff 27       	eor	r31, r31
    4f94:	59 1b       	sub	r21, r25
    4f96:	99 f0       	breq	.+38     	; 0x4fbe <__addsf3x+0x60>
    4f98:	59 3f       	cpi	r21, 0xF9	; 249
    4f9a:	50 f4       	brcc	.+20     	; 0x4fb0 <__addsf3x+0x52>
    4f9c:	50 3e       	cpi	r21, 0xE0	; 224
    4f9e:	68 f1       	brcs	.+90     	; 0x4ffa <__addsf3x+0x9c>
    4fa0:	1a 16       	cp	r1, r26
    4fa2:	f0 40       	sbci	r31, 0x00	; 0
    4fa4:	a2 2f       	mov	r26, r18
    4fa6:	23 2f       	mov	r18, r19
    4fa8:	34 2f       	mov	r19, r20
    4faa:	44 27       	eor	r20, r20
    4fac:	58 5f       	subi	r21, 0xF8	; 248
    4fae:	f3 cf       	rjmp	.-26     	; 0x4f96 <__addsf3x+0x38>
    4fb0:	46 95       	lsr	r20
    4fb2:	37 95       	ror	r19
    4fb4:	27 95       	ror	r18
    4fb6:	a7 95       	ror	r26
    4fb8:	f0 40       	sbci	r31, 0x00	; 0
    4fba:	53 95       	inc	r21
    4fbc:	c9 f7       	brne	.-14     	; 0x4fb0 <__addsf3x+0x52>
    4fbe:	7e f4       	brtc	.+30     	; 0x4fde <__addsf3x+0x80>
    4fc0:	1f 16       	cp	r1, r31
    4fc2:	ba 0b       	sbc	r27, r26
    4fc4:	62 0b       	sbc	r22, r18
    4fc6:	73 0b       	sbc	r23, r19
    4fc8:	84 0b       	sbc	r24, r20
    4fca:	ba f0       	brmi	.+46     	; 0x4ffa <__addsf3x+0x9c>
    4fcc:	91 50       	subi	r25, 0x01	; 1
    4fce:	a1 f0       	breq	.+40     	; 0x4ff8 <__addsf3x+0x9a>
    4fd0:	ff 0f       	add	r31, r31
    4fd2:	bb 1f       	adc	r27, r27
    4fd4:	66 1f       	adc	r22, r22
    4fd6:	77 1f       	adc	r23, r23
    4fd8:	88 1f       	adc	r24, r24
    4fda:	c2 f7       	brpl	.-16     	; 0x4fcc <__addsf3x+0x6e>
    4fdc:	0e c0       	rjmp	.+28     	; 0x4ffa <__addsf3x+0x9c>
    4fde:	ba 0f       	add	r27, r26
    4fe0:	62 1f       	adc	r22, r18
    4fe2:	73 1f       	adc	r23, r19
    4fe4:	84 1f       	adc	r24, r20
    4fe6:	48 f4       	brcc	.+18     	; 0x4ffa <__addsf3x+0x9c>
    4fe8:	87 95       	ror	r24
    4fea:	77 95       	ror	r23
    4fec:	67 95       	ror	r22
    4fee:	b7 95       	ror	r27
    4ff0:	f7 95       	ror	r31
    4ff2:	9e 3f       	cpi	r25, 0xFE	; 254
    4ff4:	08 f0       	brcs	.+2      	; 0x4ff8 <__addsf3x+0x9a>
    4ff6:	b0 cf       	rjmp	.-160    	; 0x4f58 <__addsf3+0x28>
    4ff8:	93 95       	inc	r25
    4ffa:	88 0f       	add	r24, r24
    4ffc:	08 f0       	brcs	.+2      	; 0x5000 <__addsf3x+0xa2>
    4ffe:	99 27       	eor	r25, r25
    5000:	ee 0f       	add	r30, r30
    5002:	97 95       	ror	r25
    5004:	87 95       	ror	r24
    5006:	08 95       	ret

00005008 <__divsf3>:
    5008:	0e 94 18 28 	call	0x5030	; 0x5030 <__divsf3x>
    500c:	0c 94 f9 28 	jmp	0x51f2	; 0x51f2 <__fp_round>
    5010:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <__fp_pscB>
    5014:	58 f0       	brcs	.+22     	; 0x502c <__divsf3+0x24>
    5016:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <__fp_pscA>
    501a:	40 f0       	brcs	.+16     	; 0x502c <__divsf3+0x24>
    501c:	29 f4       	brne	.+10     	; 0x5028 <__divsf3+0x20>
    501e:	5f 3f       	cpi	r21, 0xFF	; 255
    5020:	29 f0       	breq	.+10     	; 0x502c <__divsf3+0x24>
    5022:	0c 94 e2 28 	jmp	0x51c4	; 0x51c4 <__fp_inf>
    5026:	51 11       	cpse	r21, r1
    5028:	0c 94 2d 29 	jmp	0x525a	; 0x525a <__fp_szero>
    502c:	0c 94 e8 28 	jmp	0x51d0	; 0x51d0 <__fp_nan>

00005030 <__divsf3x>:
    5030:	0e 94 0a 29 	call	0x5214	; 0x5214 <__fp_split3>
    5034:	68 f3       	brcs	.-38     	; 0x5010 <__divsf3+0x8>

00005036 <__divsf3_pse>:
    5036:	99 23       	and	r25, r25
    5038:	b1 f3       	breq	.-20     	; 0x5026 <__divsf3+0x1e>
    503a:	55 23       	and	r21, r21
    503c:	91 f3       	breq	.-28     	; 0x5022 <__divsf3+0x1a>
    503e:	95 1b       	sub	r25, r21
    5040:	55 0b       	sbc	r21, r21
    5042:	bb 27       	eor	r27, r27
    5044:	aa 27       	eor	r26, r26
    5046:	62 17       	cp	r22, r18
    5048:	73 07       	cpc	r23, r19
    504a:	84 07       	cpc	r24, r20
    504c:	38 f0       	brcs	.+14     	; 0x505c <__divsf3_pse+0x26>
    504e:	9f 5f       	subi	r25, 0xFF	; 255
    5050:	5f 4f       	sbci	r21, 0xFF	; 255
    5052:	22 0f       	add	r18, r18
    5054:	33 1f       	adc	r19, r19
    5056:	44 1f       	adc	r20, r20
    5058:	aa 1f       	adc	r26, r26
    505a:	a9 f3       	breq	.-22     	; 0x5046 <__divsf3_pse+0x10>
    505c:	35 d0       	rcall	.+106    	; 0x50c8 <__divsf3_pse+0x92>
    505e:	0e 2e       	mov	r0, r30
    5060:	3a f0       	brmi	.+14     	; 0x5070 <__divsf3_pse+0x3a>
    5062:	e0 e8       	ldi	r30, 0x80	; 128
    5064:	32 d0       	rcall	.+100    	; 0x50ca <__divsf3_pse+0x94>
    5066:	91 50       	subi	r25, 0x01	; 1
    5068:	50 40       	sbci	r21, 0x00	; 0
    506a:	e6 95       	lsr	r30
    506c:	00 1c       	adc	r0, r0
    506e:	ca f7       	brpl	.-14     	; 0x5062 <__divsf3_pse+0x2c>
    5070:	2b d0       	rcall	.+86     	; 0x50c8 <__divsf3_pse+0x92>
    5072:	fe 2f       	mov	r31, r30
    5074:	29 d0       	rcall	.+82     	; 0x50c8 <__divsf3_pse+0x92>
    5076:	66 0f       	add	r22, r22
    5078:	77 1f       	adc	r23, r23
    507a:	88 1f       	adc	r24, r24
    507c:	bb 1f       	adc	r27, r27
    507e:	26 17       	cp	r18, r22
    5080:	37 07       	cpc	r19, r23
    5082:	48 07       	cpc	r20, r24
    5084:	ab 07       	cpc	r26, r27
    5086:	b0 e8       	ldi	r27, 0x80	; 128
    5088:	09 f0       	breq	.+2      	; 0x508c <__divsf3_pse+0x56>
    508a:	bb 0b       	sbc	r27, r27
    508c:	80 2d       	mov	r24, r0
    508e:	bf 01       	movw	r22, r30
    5090:	ff 27       	eor	r31, r31
    5092:	93 58       	subi	r25, 0x83	; 131
    5094:	5f 4f       	sbci	r21, 0xFF	; 255
    5096:	3a f0       	brmi	.+14     	; 0x50a6 <__divsf3_pse+0x70>
    5098:	9e 3f       	cpi	r25, 0xFE	; 254
    509a:	51 05       	cpc	r21, r1
    509c:	78 f0       	brcs	.+30     	; 0x50bc <__divsf3_pse+0x86>
    509e:	0c 94 e2 28 	jmp	0x51c4	; 0x51c4 <__fp_inf>
    50a2:	0c 94 2d 29 	jmp	0x525a	; 0x525a <__fp_szero>
    50a6:	5f 3f       	cpi	r21, 0xFF	; 255
    50a8:	e4 f3       	brlt	.-8      	; 0x50a2 <__divsf3_pse+0x6c>
    50aa:	98 3e       	cpi	r25, 0xE8	; 232
    50ac:	d4 f3       	brlt	.-12     	; 0x50a2 <__divsf3_pse+0x6c>
    50ae:	86 95       	lsr	r24
    50b0:	77 95       	ror	r23
    50b2:	67 95       	ror	r22
    50b4:	b7 95       	ror	r27
    50b6:	f7 95       	ror	r31
    50b8:	9f 5f       	subi	r25, 0xFF	; 255
    50ba:	c9 f7       	brne	.-14     	; 0x50ae <__divsf3_pse+0x78>
    50bc:	88 0f       	add	r24, r24
    50be:	91 1d       	adc	r25, r1
    50c0:	96 95       	lsr	r25
    50c2:	87 95       	ror	r24
    50c4:	97 f9       	bld	r25, 7
    50c6:	08 95       	ret
    50c8:	e1 e0       	ldi	r30, 0x01	; 1
    50ca:	66 0f       	add	r22, r22
    50cc:	77 1f       	adc	r23, r23
    50ce:	88 1f       	adc	r24, r24
    50d0:	bb 1f       	adc	r27, r27
    50d2:	62 17       	cp	r22, r18
    50d4:	73 07       	cpc	r23, r19
    50d6:	84 07       	cpc	r24, r20
    50d8:	ba 07       	cpc	r27, r26
    50da:	20 f0       	brcs	.+8      	; 0x50e4 <__divsf3_pse+0xae>
    50dc:	62 1b       	sub	r22, r18
    50de:	73 0b       	sbc	r23, r19
    50e0:	84 0b       	sbc	r24, r20
    50e2:	ba 0b       	sbc	r27, r26
    50e4:	ee 1f       	adc	r30, r30
    50e6:	88 f7       	brcc	.-30     	; 0x50ca <__divsf3_pse+0x94>
    50e8:	e0 95       	com	r30
    50ea:	08 95       	ret

000050ec <__fixunssfsi>:
    50ec:	0e 94 12 29 	call	0x5224	; 0x5224 <__fp_splitA>
    50f0:	88 f0       	brcs	.+34     	; 0x5114 <__fixunssfsi+0x28>
    50f2:	9f 57       	subi	r25, 0x7F	; 127
    50f4:	98 f0       	brcs	.+38     	; 0x511c <__fixunssfsi+0x30>
    50f6:	b9 2f       	mov	r27, r25
    50f8:	99 27       	eor	r25, r25
    50fa:	b7 51       	subi	r27, 0x17	; 23
    50fc:	b0 f0       	brcs	.+44     	; 0x512a <__fixunssfsi+0x3e>
    50fe:	e1 f0       	breq	.+56     	; 0x5138 <__fixunssfsi+0x4c>
    5100:	66 0f       	add	r22, r22
    5102:	77 1f       	adc	r23, r23
    5104:	88 1f       	adc	r24, r24
    5106:	99 1f       	adc	r25, r25
    5108:	1a f0       	brmi	.+6      	; 0x5110 <__fixunssfsi+0x24>
    510a:	ba 95       	dec	r27
    510c:	c9 f7       	brne	.-14     	; 0x5100 <__fixunssfsi+0x14>
    510e:	14 c0       	rjmp	.+40     	; 0x5138 <__fixunssfsi+0x4c>
    5110:	b1 30       	cpi	r27, 0x01	; 1
    5112:	91 f0       	breq	.+36     	; 0x5138 <__fixunssfsi+0x4c>
    5114:	0e 94 2c 29 	call	0x5258	; 0x5258 <__fp_zero>
    5118:	b1 e0       	ldi	r27, 0x01	; 1
    511a:	08 95       	ret
    511c:	0c 94 2c 29 	jmp	0x5258	; 0x5258 <__fp_zero>
    5120:	67 2f       	mov	r22, r23
    5122:	78 2f       	mov	r23, r24
    5124:	88 27       	eor	r24, r24
    5126:	b8 5f       	subi	r27, 0xF8	; 248
    5128:	39 f0       	breq	.+14     	; 0x5138 <__fixunssfsi+0x4c>
    512a:	b9 3f       	cpi	r27, 0xF9	; 249
    512c:	cc f3       	brlt	.-14     	; 0x5120 <__fixunssfsi+0x34>
    512e:	86 95       	lsr	r24
    5130:	77 95       	ror	r23
    5132:	67 95       	ror	r22
    5134:	b3 95       	inc	r27
    5136:	d9 f7       	brne	.-10     	; 0x512e <__fixunssfsi+0x42>
    5138:	3e f4       	brtc	.+14     	; 0x5148 <__fixunssfsi+0x5c>
    513a:	90 95       	com	r25
    513c:	80 95       	com	r24
    513e:	70 95       	com	r23
    5140:	61 95       	neg	r22
    5142:	7f 4f       	sbci	r23, 0xFF	; 255
    5144:	8f 4f       	sbci	r24, 0xFF	; 255
    5146:	9f 4f       	sbci	r25, 0xFF	; 255
    5148:	08 95       	ret

0000514a <__floatunsisf>:
    514a:	e8 94       	clt
    514c:	09 c0       	rjmp	.+18     	; 0x5160 <__floatsisf+0x12>

0000514e <__floatsisf>:
    514e:	97 fb       	bst	r25, 7
    5150:	3e f4       	brtc	.+14     	; 0x5160 <__floatsisf+0x12>
    5152:	90 95       	com	r25
    5154:	80 95       	com	r24
    5156:	70 95       	com	r23
    5158:	61 95       	neg	r22
    515a:	7f 4f       	sbci	r23, 0xFF	; 255
    515c:	8f 4f       	sbci	r24, 0xFF	; 255
    515e:	9f 4f       	sbci	r25, 0xFF	; 255
    5160:	99 23       	and	r25, r25
    5162:	a9 f0       	breq	.+42     	; 0x518e <__floatsisf+0x40>
    5164:	f9 2f       	mov	r31, r25
    5166:	96 e9       	ldi	r25, 0x96	; 150
    5168:	bb 27       	eor	r27, r27
    516a:	93 95       	inc	r25
    516c:	f6 95       	lsr	r31
    516e:	87 95       	ror	r24
    5170:	77 95       	ror	r23
    5172:	67 95       	ror	r22
    5174:	b7 95       	ror	r27
    5176:	f1 11       	cpse	r31, r1
    5178:	f8 cf       	rjmp	.-16     	; 0x516a <__floatsisf+0x1c>
    517a:	fa f4       	brpl	.+62     	; 0x51ba <__floatsisf+0x6c>
    517c:	bb 0f       	add	r27, r27
    517e:	11 f4       	brne	.+4      	; 0x5184 <__floatsisf+0x36>
    5180:	60 ff       	sbrs	r22, 0
    5182:	1b c0       	rjmp	.+54     	; 0x51ba <__floatsisf+0x6c>
    5184:	6f 5f       	subi	r22, 0xFF	; 255
    5186:	7f 4f       	sbci	r23, 0xFF	; 255
    5188:	8f 4f       	sbci	r24, 0xFF	; 255
    518a:	9f 4f       	sbci	r25, 0xFF	; 255
    518c:	16 c0       	rjmp	.+44     	; 0x51ba <__floatsisf+0x6c>
    518e:	88 23       	and	r24, r24
    5190:	11 f0       	breq	.+4      	; 0x5196 <__floatsisf+0x48>
    5192:	96 e9       	ldi	r25, 0x96	; 150
    5194:	11 c0       	rjmp	.+34     	; 0x51b8 <__floatsisf+0x6a>
    5196:	77 23       	and	r23, r23
    5198:	21 f0       	breq	.+8      	; 0x51a2 <__floatsisf+0x54>
    519a:	9e e8       	ldi	r25, 0x8E	; 142
    519c:	87 2f       	mov	r24, r23
    519e:	76 2f       	mov	r23, r22
    51a0:	05 c0       	rjmp	.+10     	; 0x51ac <__floatsisf+0x5e>
    51a2:	66 23       	and	r22, r22
    51a4:	71 f0       	breq	.+28     	; 0x51c2 <__floatsisf+0x74>
    51a6:	96 e8       	ldi	r25, 0x86	; 134
    51a8:	86 2f       	mov	r24, r22
    51aa:	70 e0       	ldi	r23, 0x00	; 0
    51ac:	60 e0       	ldi	r22, 0x00	; 0
    51ae:	2a f0       	brmi	.+10     	; 0x51ba <__floatsisf+0x6c>
    51b0:	9a 95       	dec	r25
    51b2:	66 0f       	add	r22, r22
    51b4:	77 1f       	adc	r23, r23
    51b6:	88 1f       	adc	r24, r24
    51b8:	da f7       	brpl	.-10     	; 0x51b0 <__floatsisf+0x62>
    51ba:	88 0f       	add	r24, r24
    51bc:	96 95       	lsr	r25
    51be:	87 95       	ror	r24
    51c0:	97 f9       	bld	r25, 7
    51c2:	08 95       	ret

000051c4 <__fp_inf>:
    51c4:	97 f9       	bld	r25, 7
    51c6:	9f 67       	ori	r25, 0x7F	; 127
    51c8:	80 e8       	ldi	r24, 0x80	; 128
    51ca:	70 e0       	ldi	r23, 0x00	; 0
    51cc:	60 e0       	ldi	r22, 0x00	; 0
    51ce:	08 95       	ret

000051d0 <__fp_nan>:
    51d0:	9f ef       	ldi	r25, 0xFF	; 255
    51d2:	80 ec       	ldi	r24, 0xC0	; 192
    51d4:	08 95       	ret

000051d6 <__fp_pscA>:
    51d6:	00 24       	eor	r0, r0
    51d8:	0a 94       	dec	r0
    51da:	16 16       	cp	r1, r22
    51dc:	17 06       	cpc	r1, r23
    51de:	18 06       	cpc	r1, r24
    51e0:	09 06       	cpc	r0, r25
    51e2:	08 95       	ret

000051e4 <__fp_pscB>:
    51e4:	00 24       	eor	r0, r0
    51e6:	0a 94       	dec	r0
    51e8:	12 16       	cp	r1, r18
    51ea:	13 06       	cpc	r1, r19
    51ec:	14 06       	cpc	r1, r20
    51ee:	05 06       	cpc	r0, r21
    51f0:	08 95       	ret

000051f2 <__fp_round>:
    51f2:	09 2e       	mov	r0, r25
    51f4:	03 94       	inc	r0
    51f6:	00 0c       	add	r0, r0
    51f8:	11 f4       	brne	.+4      	; 0x51fe <__fp_round+0xc>
    51fa:	88 23       	and	r24, r24
    51fc:	52 f0       	brmi	.+20     	; 0x5212 <__fp_round+0x20>
    51fe:	bb 0f       	add	r27, r27
    5200:	40 f4       	brcc	.+16     	; 0x5212 <__fp_round+0x20>
    5202:	bf 2b       	or	r27, r31
    5204:	11 f4       	brne	.+4      	; 0x520a <__fp_round+0x18>
    5206:	60 ff       	sbrs	r22, 0
    5208:	04 c0       	rjmp	.+8      	; 0x5212 <__fp_round+0x20>
    520a:	6f 5f       	subi	r22, 0xFF	; 255
    520c:	7f 4f       	sbci	r23, 0xFF	; 255
    520e:	8f 4f       	sbci	r24, 0xFF	; 255
    5210:	9f 4f       	sbci	r25, 0xFF	; 255
    5212:	08 95       	ret

00005214 <__fp_split3>:
    5214:	57 fd       	sbrc	r21, 7
    5216:	90 58       	subi	r25, 0x80	; 128
    5218:	44 0f       	add	r20, r20
    521a:	55 1f       	adc	r21, r21
    521c:	59 f0       	breq	.+22     	; 0x5234 <__fp_splitA+0x10>
    521e:	5f 3f       	cpi	r21, 0xFF	; 255
    5220:	71 f0       	breq	.+28     	; 0x523e <__fp_splitA+0x1a>
    5222:	47 95       	ror	r20

00005224 <__fp_splitA>:
    5224:	88 0f       	add	r24, r24
    5226:	97 fb       	bst	r25, 7
    5228:	99 1f       	adc	r25, r25
    522a:	61 f0       	breq	.+24     	; 0x5244 <__fp_splitA+0x20>
    522c:	9f 3f       	cpi	r25, 0xFF	; 255
    522e:	79 f0       	breq	.+30     	; 0x524e <__fp_splitA+0x2a>
    5230:	87 95       	ror	r24
    5232:	08 95       	ret
    5234:	12 16       	cp	r1, r18
    5236:	13 06       	cpc	r1, r19
    5238:	14 06       	cpc	r1, r20
    523a:	55 1f       	adc	r21, r21
    523c:	f2 cf       	rjmp	.-28     	; 0x5222 <__fp_split3+0xe>
    523e:	46 95       	lsr	r20
    5240:	f1 df       	rcall	.-30     	; 0x5224 <__fp_splitA>
    5242:	08 c0       	rjmp	.+16     	; 0x5254 <__fp_splitA+0x30>
    5244:	16 16       	cp	r1, r22
    5246:	17 06       	cpc	r1, r23
    5248:	18 06       	cpc	r1, r24
    524a:	99 1f       	adc	r25, r25
    524c:	f1 cf       	rjmp	.-30     	; 0x5230 <__fp_splitA+0xc>
    524e:	86 95       	lsr	r24
    5250:	71 05       	cpc	r23, r1
    5252:	61 05       	cpc	r22, r1
    5254:	08 94       	sec
    5256:	08 95       	ret

00005258 <__fp_zero>:
    5258:	e8 94       	clt

0000525a <__fp_szero>:
    525a:	bb 27       	eor	r27, r27
    525c:	66 27       	eor	r22, r22
    525e:	77 27       	eor	r23, r23
    5260:	cb 01       	movw	r24, r22
    5262:	97 f9       	bld	r25, 7
    5264:	08 95       	ret

00005266 <__mulsf3>:
    5266:	0e 94 46 29 	call	0x528c	; 0x528c <__mulsf3x>
    526a:	0c 94 f9 28 	jmp	0x51f2	; 0x51f2 <__fp_round>
    526e:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <__fp_pscA>
    5272:	38 f0       	brcs	.+14     	; 0x5282 <__mulsf3+0x1c>
    5274:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <__fp_pscB>
    5278:	20 f0       	brcs	.+8      	; 0x5282 <__mulsf3+0x1c>
    527a:	95 23       	and	r25, r21
    527c:	11 f0       	breq	.+4      	; 0x5282 <__mulsf3+0x1c>
    527e:	0c 94 e2 28 	jmp	0x51c4	; 0x51c4 <__fp_inf>
    5282:	0c 94 e8 28 	jmp	0x51d0	; 0x51d0 <__fp_nan>
    5286:	11 24       	eor	r1, r1
    5288:	0c 94 2d 29 	jmp	0x525a	; 0x525a <__fp_szero>

0000528c <__mulsf3x>:
    528c:	0e 94 0a 29 	call	0x5214	; 0x5214 <__fp_split3>
    5290:	70 f3       	brcs	.-36     	; 0x526e <__mulsf3+0x8>

00005292 <__mulsf3_pse>:
    5292:	95 9f       	mul	r25, r21
    5294:	c1 f3       	breq	.-16     	; 0x5286 <__mulsf3+0x20>
    5296:	95 0f       	add	r25, r21
    5298:	50 e0       	ldi	r21, 0x00	; 0
    529a:	55 1f       	adc	r21, r21
    529c:	62 9f       	mul	r22, r18
    529e:	f0 01       	movw	r30, r0
    52a0:	72 9f       	mul	r23, r18
    52a2:	bb 27       	eor	r27, r27
    52a4:	f0 0d       	add	r31, r0
    52a6:	b1 1d       	adc	r27, r1
    52a8:	63 9f       	mul	r22, r19
    52aa:	aa 27       	eor	r26, r26
    52ac:	f0 0d       	add	r31, r0
    52ae:	b1 1d       	adc	r27, r1
    52b0:	aa 1f       	adc	r26, r26
    52b2:	64 9f       	mul	r22, r20
    52b4:	66 27       	eor	r22, r22
    52b6:	b0 0d       	add	r27, r0
    52b8:	a1 1d       	adc	r26, r1
    52ba:	66 1f       	adc	r22, r22
    52bc:	82 9f       	mul	r24, r18
    52be:	22 27       	eor	r18, r18
    52c0:	b0 0d       	add	r27, r0
    52c2:	a1 1d       	adc	r26, r1
    52c4:	62 1f       	adc	r22, r18
    52c6:	73 9f       	mul	r23, r19
    52c8:	b0 0d       	add	r27, r0
    52ca:	a1 1d       	adc	r26, r1
    52cc:	62 1f       	adc	r22, r18
    52ce:	83 9f       	mul	r24, r19
    52d0:	a0 0d       	add	r26, r0
    52d2:	61 1d       	adc	r22, r1
    52d4:	22 1f       	adc	r18, r18
    52d6:	74 9f       	mul	r23, r20
    52d8:	33 27       	eor	r19, r19
    52da:	a0 0d       	add	r26, r0
    52dc:	61 1d       	adc	r22, r1
    52de:	23 1f       	adc	r18, r19
    52e0:	84 9f       	mul	r24, r20
    52e2:	60 0d       	add	r22, r0
    52e4:	21 1d       	adc	r18, r1
    52e6:	82 2f       	mov	r24, r18
    52e8:	76 2f       	mov	r23, r22
    52ea:	6a 2f       	mov	r22, r26
    52ec:	11 24       	eor	r1, r1
    52ee:	9f 57       	subi	r25, 0x7F	; 127
    52f0:	50 40       	sbci	r21, 0x00	; 0
    52f2:	9a f0       	brmi	.+38     	; 0x531a <__mulsf3_pse+0x88>
    52f4:	f1 f0       	breq	.+60     	; 0x5332 <__mulsf3_pse+0xa0>
    52f6:	88 23       	and	r24, r24
    52f8:	4a f0       	brmi	.+18     	; 0x530c <__mulsf3_pse+0x7a>
    52fa:	ee 0f       	add	r30, r30
    52fc:	ff 1f       	adc	r31, r31
    52fe:	bb 1f       	adc	r27, r27
    5300:	66 1f       	adc	r22, r22
    5302:	77 1f       	adc	r23, r23
    5304:	88 1f       	adc	r24, r24
    5306:	91 50       	subi	r25, 0x01	; 1
    5308:	50 40       	sbci	r21, 0x00	; 0
    530a:	a9 f7       	brne	.-22     	; 0x52f6 <__mulsf3_pse+0x64>
    530c:	9e 3f       	cpi	r25, 0xFE	; 254
    530e:	51 05       	cpc	r21, r1
    5310:	80 f0       	brcs	.+32     	; 0x5332 <__mulsf3_pse+0xa0>
    5312:	0c 94 e2 28 	jmp	0x51c4	; 0x51c4 <__fp_inf>
    5316:	0c 94 2d 29 	jmp	0x525a	; 0x525a <__fp_szero>
    531a:	5f 3f       	cpi	r21, 0xFF	; 255
    531c:	e4 f3       	brlt	.-8      	; 0x5316 <__mulsf3_pse+0x84>
    531e:	98 3e       	cpi	r25, 0xE8	; 232
    5320:	d4 f3       	brlt	.-12     	; 0x5316 <__mulsf3_pse+0x84>
    5322:	86 95       	lsr	r24
    5324:	77 95       	ror	r23
    5326:	67 95       	ror	r22
    5328:	b7 95       	ror	r27
    532a:	f7 95       	ror	r31
    532c:	e7 95       	ror	r30
    532e:	9f 5f       	subi	r25, 0xFF	; 255
    5330:	c1 f7       	brne	.-16     	; 0x5322 <__mulsf3_pse+0x90>
    5332:	fe 2b       	or	r31, r30
    5334:	88 0f       	add	r24, r24
    5336:	91 1d       	adc	r25, r1
    5338:	96 95       	lsr	r25
    533a:	87 95       	ror	r24
    533c:	97 f9       	bld	r25, 7
    533e:	08 95       	ret

00005340 <__divmodhi4>:
    5340:	97 fb       	bst	r25, 7
    5342:	07 2e       	mov	r0, r23
    5344:	16 f4       	brtc	.+4      	; 0x534a <__divmodhi4+0xa>
    5346:	00 94       	com	r0
    5348:	07 d0       	rcall	.+14     	; 0x5358 <__divmodhi4_neg1>
    534a:	77 fd       	sbrc	r23, 7
    534c:	09 d0       	rcall	.+18     	; 0x5360 <__divmodhi4_neg2>
    534e:	0e 94 c5 29 	call	0x538a	; 0x538a <__udivmodhi4>
    5352:	07 fc       	sbrc	r0, 7
    5354:	05 d0       	rcall	.+10     	; 0x5360 <__divmodhi4_neg2>
    5356:	3e f4       	brtc	.+14     	; 0x5366 <__divmodhi4_exit>

00005358 <__divmodhi4_neg1>:
    5358:	90 95       	com	r25
    535a:	81 95       	neg	r24
    535c:	9f 4f       	sbci	r25, 0xFF	; 255
    535e:	08 95       	ret

00005360 <__divmodhi4_neg2>:
    5360:	70 95       	com	r23
    5362:	61 95       	neg	r22
    5364:	7f 4f       	sbci	r23, 0xFF	; 255

00005366 <__divmodhi4_exit>:
    5366:	08 95       	ret

00005368 <__tablejump2__>:
    5368:	ee 0f       	add	r30, r30
    536a:	ff 1f       	adc	r31, r31
    536c:	05 90       	lpm	r0, Z+
    536e:	f4 91       	lpm	r31, Z
    5370:	e0 2d       	mov	r30, r0
    5372:	09 94       	ijmp

00005374 <__muluhisi3>:
    5374:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <__umulhisi3>
    5378:	a5 9f       	mul	r26, r21
    537a:	90 0d       	add	r25, r0
    537c:	b4 9f       	mul	r27, r20
    537e:	90 0d       	add	r25, r0
    5380:	a4 9f       	mul	r26, r20
    5382:	80 0d       	add	r24, r0
    5384:	91 1d       	adc	r25, r1
    5386:	11 24       	eor	r1, r1
    5388:	08 95       	ret

0000538a <__udivmodhi4>:
    538a:	aa 1b       	sub	r26, r26
    538c:	bb 1b       	sub	r27, r27
    538e:	51 e1       	ldi	r21, 0x11	; 17
    5390:	07 c0       	rjmp	.+14     	; 0x53a0 <__udivmodhi4_ep>

00005392 <__udivmodhi4_loop>:
    5392:	aa 1f       	adc	r26, r26
    5394:	bb 1f       	adc	r27, r27
    5396:	a6 17       	cp	r26, r22
    5398:	b7 07       	cpc	r27, r23
    539a:	10 f0       	brcs	.+4      	; 0x53a0 <__udivmodhi4_ep>
    539c:	a6 1b       	sub	r26, r22
    539e:	b7 0b       	sbc	r27, r23

000053a0 <__udivmodhi4_ep>:
    53a0:	88 1f       	adc	r24, r24
    53a2:	99 1f       	adc	r25, r25
    53a4:	5a 95       	dec	r21
    53a6:	a9 f7       	brne	.-22     	; 0x5392 <__udivmodhi4_loop>
    53a8:	80 95       	com	r24
    53aa:	90 95       	com	r25
    53ac:	bc 01       	movw	r22, r24
    53ae:	cd 01       	movw	r24, r26
    53b0:	08 95       	ret

000053b2 <__umulhisi3>:
    53b2:	a2 9f       	mul	r26, r18
    53b4:	b0 01       	movw	r22, r0
    53b6:	b3 9f       	mul	r27, r19
    53b8:	c0 01       	movw	r24, r0
    53ba:	a3 9f       	mul	r26, r19
    53bc:	70 0d       	add	r23, r0
    53be:	81 1d       	adc	r24, r1
    53c0:	11 24       	eor	r1, r1
    53c2:	91 1d       	adc	r25, r1
    53c4:	b2 9f       	mul	r27, r18
    53c6:	70 0d       	add	r23, r0
    53c8:	81 1d       	adc	r24, r1
    53ca:	11 24       	eor	r1, r1
    53cc:	91 1d       	adc	r25, r1
    53ce:	08 95       	ret

000053d0 <malloc>:
    53d0:	0f 93       	push	r16
    53d2:	1f 93       	push	r17
    53d4:	cf 93       	push	r28
    53d6:	df 93       	push	r29
    53d8:	82 30       	cpi	r24, 0x02	; 2
    53da:	91 05       	cpc	r25, r1
    53dc:	10 f4       	brcc	.+4      	; 0x53e2 <malloc+0x12>
    53de:	82 e0       	ldi	r24, 0x02	; 2
    53e0:	90 e0       	ldi	r25, 0x00	; 0
    53e2:	e0 91 ae 05 	lds	r30, 0x05AE	; 0x8005ae <__flp>
    53e6:	f0 91 af 05 	lds	r31, 0x05AF	; 0x8005af <__flp+0x1>
    53ea:	20 e0       	ldi	r18, 0x00	; 0
    53ec:	30 e0       	ldi	r19, 0x00	; 0
    53ee:	a0 e0       	ldi	r26, 0x00	; 0
    53f0:	b0 e0       	ldi	r27, 0x00	; 0
    53f2:	30 97       	sbiw	r30, 0x00	; 0
    53f4:	19 f1       	breq	.+70     	; 0x543c <malloc+0x6c>
    53f6:	40 81       	ld	r20, Z
    53f8:	51 81       	ldd	r21, Z+1	; 0x01
    53fa:	02 81       	ldd	r16, Z+2	; 0x02
    53fc:	13 81       	ldd	r17, Z+3	; 0x03
    53fe:	48 17       	cp	r20, r24
    5400:	59 07       	cpc	r21, r25
    5402:	c8 f0       	brcs	.+50     	; 0x5436 <malloc+0x66>
    5404:	84 17       	cp	r24, r20
    5406:	95 07       	cpc	r25, r21
    5408:	69 f4       	brne	.+26     	; 0x5424 <malloc+0x54>
    540a:	10 97       	sbiw	r26, 0x00	; 0
    540c:	31 f0       	breq	.+12     	; 0x541a <malloc+0x4a>
    540e:	12 96       	adiw	r26, 0x02	; 2
    5410:	0c 93       	st	X, r16
    5412:	12 97       	sbiw	r26, 0x02	; 2
    5414:	13 96       	adiw	r26, 0x03	; 3
    5416:	1c 93       	st	X, r17
    5418:	27 c0       	rjmp	.+78     	; 0x5468 <malloc+0x98>
    541a:	00 93 ae 05 	sts	0x05AE, r16	; 0x8005ae <__flp>
    541e:	10 93 af 05 	sts	0x05AF, r17	; 0x8005af <__flp+0x1>
    5422:	22 c0       	rjmp	.+68     	; 0x5468 <malloc+0x98>
    5424:	21 15       	cp	r18, r1
    5426:	31 05       	cpc	r19, r1
    5428:	19 f0       	breq	.+6      	; 0x5430 <malloc+0x60>
    542a:	42 17       	cp	r20, r18
    542c:	53 07       	cpc	r21, r19
    542e:	18 f4       	brcc	.+6      	; 0x5436 <malloc+0x66>
    5430:	9a 01       	movw	r18, r20
    5432:	bd 01       	movw	r22, r26
    5434:	ef 01       	movw	r28, r30
    5436:	df 01       	movw	r26, r30
    5438:	f8 01       	movw	r30, r16
    543a:	db cf       	rjmp	.-74     	; 0x53f2 <malloc+0x22>
    543c:	21 15       	cp	r18, r1
    543e:	31 05       	cpc	r19, r1
    5440:	f9 f0       	breq	.+62     	; 0x5480 <malloc+0xb0>
    5442:	28 1b       	sub	r18, r24
    5444:	39 0b       	sbc	r19, r25
    5446:	24 30       	cpi	r18, 0x04	; 4
    5448:	31 05       	cpc	r19, r1
    544a:	80 f4       	brcc	.+32     	; 0x546c <malloc+0x9c>
    544c:	8a 81       	ldd	r24, Y+2	; 0x02
    544e:	9b 81       	ldd	r25, Y+3	; 0x03
    5450:	61 15       	cp	r22, r1
    5452:	71 05       	cpc	r23, r1
    5454:	21 f0       	breq	.+8      	; 0x545e <malloc+0x8e>
    5456:	fb 01       	movw	r30, r22
    5458:	93 83       	std	Z+3, r25	; 0x03
    545a:	82 83       	std	Z+2, r24	; 0x02
    545c:	04 c0       	rjmp	.+8      	; 0x5466 <malloc+0x96>
    545e:	90 93 af 05 	sts	0x05AF, r25	; 0x8005af <__flp+0x1>
    5462:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <__flp>
    5466:	fe 01       	movw	r30, r28
    5468:	32 96       	adiw	r30, 0x02	; 2
    546a:	44 c0       	rjmp	.+136    	; 0x54f4 <malloc+0x124>
    546c:	fe 01       	movw	r30, r28
    546e:	e2 0f       	add	r30, r18
    5470:	f3 1f       	adc	r31, r19
    5472:	81 93       	st	Z+, r24
    5474:	91 93       	st	Z+, r25
    5476:	22 50       	subi	r18, 0x02	; 2
    5478:	31 09       	sbc	r19, r1
    547a:	39 83       	std	Y+1, r19	; 0x01
    547c:	28 83       	st	Y, r18
    547e:	3a c0       	rjmp	.+116    	; 0x54f4 <malloc+0x124>
    5480:	20 91 ac 05 	lds	r18, 0x05AC	; 0x8005ac <__brkval>
    5484:	30 91 ad 05 	lds	r19, 0x05AD	; 0x8005ad <__brkval+0x1>
    5488:	23 2b       	or	r18, r19
    548a:	41 f4       	brne	.+16     	; 0x549c <malloc+0xcc>
    548c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    5490:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    5494:	30 93 ad 05 	sts	0x05AD, r19	; 0x8005ad <__brkval+0x1>
    5498:	20 93 ac 05 	sts	0x05AC, r18	; 0x8005ac <__brkval>
    549c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    54a0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    54a4:	21 15       	cp	r18, r1
    54a6:	31 05       	cpc	r19, r1
    54a8:	41 f4       	brne	.+16     	; 0x54ba <malloc+0xea>
    54aa:	2d b7       	in	r18, 0x3d	; 61
    54ac:	3e b7       	in	r19, 0x3e	; 62
    54ae:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    54b2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    54b6:	24 1b       	sub	r18, r20
    54b8:	35 0b       	sbc	r19, r21
    54ba:	e0 91 ac 05 	lds	r30, 0x05AC	; 0x8005ac <__brkval>
    54be:	f0 91 ad 05 	lds	r31, 0x05AD	; 0x8005ad <__brkval+0x1>
    54c2:	e2 17       	cp	r30, r18
    54c4:	f3 07       	cpc	r31, r19
    54c6:	a0 f4       	brcc	.+40     	; 0x54f0 <malloc+0x120>
    54c8:	2e 1b       	sub	r18, r30
    54ca:	3f 0b       	sbc	r19, r31
    54cc:	28 17       	cp	r18, r24
    54ce:	39 07       	cpc	r19, r25
    54d0:	78 f0       	brcs	.+30     	; 0x54f0 <malloc+0x120>
    54d2:	ac 01       	movw	r20, r24
    54d4:	4e 5f       	subi	r20, 0xFE	; 254
    54d6:	5f 4f       	sbci	r21, 0xFF	; 255
    54d8:	24 17       	cp	r18, r20
    54da:	35 07       	cpc	r19, r21
    54dc:	48 f0       	brcs	.+18     	; 0x54f0 <malloc+0x120>
    54de:	4e 0f       	add	r20, r30
    54e0:	5f 1f       	adc	r21, r31
    54e2:	50 93 ad 05 	sts	0x05AD, r21	; 0x8005ad <__brkval+0x1>
    54e6:	40 93 ac 05 	sts	0x05AC, r20	; 0x8005ac <__brkval>
    54ea:	81 93       	st	Z+, r24
    54ec:	91 93       	st	Z+, r25
    54ee:	02 c0       	rjmp	.+4      	; 0x54f4 <malloc+0x124>
    54f0:	e0 e0       	ldi	r30, 0x00	; 0
    54f2:	f0 e0       	ldi	r31, 0x00	; 0
    54f4:	cf 01       	movw	r24, r30
    54f6:	df 91       	pop	r29
    54f8:	cf 91       	pop	r28
    54fa:	1f 91       	pop	r17
    54fc:	0f 91       	pop	r16
    54fe:	08 95       	ret

00005500 <free>:
    5500:	cf 93       	push	r28
    5502:	df 93       	push	r29
    5504:	00 97       	sbiw	r24, 0x00	; 0
    5506:	09 f4       	brne	.+2      	; 0x550a <free+0xa>
    5508:	81 c0       	rjmp	.+258    	; 0x560c <free+0x10c>
    550a:	fc 01       	movw	r30, r24
    550c:	32 97       	sbiw	r30, 0x02	; 2
    550e:	13 82       	std	Z+3, r1	; 0x03
    5510:	12 82       	std	Z+2, r1	; 0x02
    5512:	a0 91 ae 05 	lds	r26, 0x05AE	; 0x8005ae <__flp>
    5516:	b0 91 af 05 	lds	r27, 0x05AF	; 0x8005af <__flp+0x1>
    551a:	10 97       	sbiw	r26, 0x00	; 0
    551c:	81 f4       	brne	.+32     	; 0x553e <free+0x3e>
    551e:	20 81       	ld	r18, Z
    5520:	31 81       	ldd	r19, Z+1	; 0x01
    5522:	82 0f       	add	r24, r18
    5524:	93 1f       	adc	r25, r19
    5526:	20 91 ac 05 	lds	r18, 0x05AC	; 0x8005ac <__brkval>
    552a:	30 91 ad 05 	lds	r19, 0x05AD	; 0x8005ad <__brkval+0x1>
    552e:	28 17       	cp	r18, r24
    5530:	39 07       	cpc	r19, r25
    5532:	51 f5       	brne	.+84     	; 0x5588 <free+0x88>
    5534:	f0 93 ad 05 	sts	0x05AD, r31	; 0x8005ad <__brkval+0x1>
    5538:	e0 93 ac 05 	sts	0x05AC, r30	; 0x8005ac <__brkval>
    553c:	67 c0       	rjmp	.+206    	; 0x560c <free+0x10c>
    553e:	ed 01       	movw	r28, r26
    5540:	20 e0       	ldi	r18, 0x00	; 0
    5542:	30 e0       	ldi	r19, 0x00	; 0
    5544:	ce 17       	cp	r28, r30
    5546:	df 07       	cpc	r29, r31
    5548:	40 f4       	brcc	.+16     	; 0x555a <free+0x5a>
    554a:	4a 81       	ldd	r20, Y+2	; 0x02
    554c:	5b 81       	ldd	r21, Y+3	; 0x03
    554e:	9e 01       	movw	r18, r28
    5550:	41 15       	cp	r20, r1
    5552:	51 05       	cpc	r21, r1
    5554:	f1 f0       	breq	.+60     	; 0x5592 <free+0x92>
    5556:	ea 01       	movw	r28, r20
    5558:	f5 cf       	rjmp	.-22     	; 0x5544 <free+0x44>
    555a:	d3 83       	std	Z+3, r29	; 0x03
    555c:	c2 83       	std	Z+2, r28	; 0x02
    555e:	40 81       	ld	r20, Z
    5560:	51 81       	ldd	r21, Z+1	; 0x01
    5562:	84 0f       	add	r24, r20
    5564:	95 1f       	adc	r25, r21
    5566:	c8 17       	cp	r28, r24
    5568:	d9 07       	cpc	r29, r25
    556a:	59 f4       	brne	.+22     	; 0x5582 <free+0x82>
    556c:	88 81       	ld	r24, Y
    556e:	99 81       	ldd	r25, Y+1	; 0x01
    5570:	84 0f       	add	r24, r20
    5572:	95 1f       	adc	r25, r21
    5574:	02 96       	adiw	r24, 0x02	; 2
    5576:	91 83       	std	Z+1, r25	; 0x01
    5578:	80 83       	st	Z, r24
    557a:	8a 81       	ldd	r24, Y+2	; 0x02
    557c:	9b 81       	ldd	r25, Y+3	; 0x03
    557e:	93 83       	std	Z+3, r25	; 0x03
    5580:	82 83       	std	Z+2, r24	; 0x02
    5582:	21 15       	cp	r18, r1
    5584:	31 05       	cpc	r19, r1
    5586:	29 f4       	brne	.+10     	; 0x5592 <free+0x92>
    5588:	f0 93 af 05 	sts	0x05AF, r31	; 0x8005af <__flp+0x1>
    558c:	e0 93 ae 05 	sts	0x05AE, r30	; 0x8005ae <__flp>
    5590:	3d c0       	rjmp	.+122    	; 0x560c <free+0x10c>
    5592:	e9 01       	movw	r28, r18
    5594:	fb 83       	std	Y+3, r31	; 0x03
    5596:	ea 83       	std	Y+2, r30	; 0x02
    5598:	49 91       	ld	r20, Y+
    559a:	59 91       	ld	r21, Y+
    559c:	c4 0f       	add	r28, r20
    559e:	d5 1f       	adc	r29, r21
    55a0:	ec 17       	cp	r30, r28
    55a2:	fd 07       	cpc	r31, r29
    55a4:	61 f4       	brne	.+24     	; 0x55be <free+0xbe>
    55a6:	80 81       	ld	r24, Z
    55a8:	91 81       	ldd	r25, Z+1	; 0x01
    55aa:	84 0f       	add	r24, r20
    55ac:	95 1f       	adc	r25, r21
    55ae:	02 96       	adiw	r24, 0x02	; 2
    55b0:	e9 01       	movw	r28, r18
    55b2:	99 83       	std	Y+1, r25	; 0x01
    55b4:	88 83       	st	Y, r24
    55b6:	82 81       	ldd	r24, Z+2	; 0x02
    55b8:	93 81       	ldd	r25, Z+3	; 0x03
    55ba:	9b 83       	std	Y+3, r25	; 0x03
    55bc:	8a 83       	std	Y+2, r24	; 0x02
    55be:	e0 e0       	ldi	r30, 0x00	; 0
    55c0:	f0 e0       	ldi	r31, 0x00	; 0
    55c2:	12 96       	adiw	r26, 0x02	; 2
    55c4:	8d 91       	ld	r24, X+
    55c6:	9c 91       	ld	r25, X
    55c8:	13 97       	sbiw	r26, 0x03	; 3
    55ca:	00 97       	sbiw	r24, 0x00	; 0
    55cc:	19 f0       	breq	.+6      	; 0x55d4 <free+0xd4>
    55ce:	fd 01       	movw	r30, r26
    55d0:	dc 01       	movw	r26, r24
    55d2:	f7 cf       	rjmp	.-18     	; 0x55c2 <free+0xc2>
    55d4:	8d 91       	ld	r24, X+
    55d6:	9c 91       	ld	r25, X
    55d8:	11 97       	sbiw	r26, 0x01	; 1
    55da:	9d 01       	movw	r18, r26
    55dc:	2e 5f       	subi	r18, 0xFE	; 254
    55de:	3f 4f       	sbci	r19, 0xFF	; 255
    55e0:	82 0f       	add	r24, r18
    55e2:	93 1f       	adc	r25, r19
    55e4:	20 91 ac 05 	lds	r18, 0x05AC	; 0x8005ac <__brkval>
    55e8:	30 91 ad 05 	lds	r19, 0x05AD	; 0x8005ad <__brkval+0x1>
    55ec:	28 17       	cp	r18, r24
    55ee:	39 07       	cpc	r19, r25
    55f0:	69 f4       	brne	.+26     	; 0x560c <free+0x10c>
    55f2:	30 97       	sbiw	r30, 0x00	; 0
    55f4:	29 f4       	brne	.+10     	; 0x5600 <free+0x100>
    55f6:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <__flp+0x1>
    55fa:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <__flp>
    55fe:	02 c0       	rjmp	.+4      	; 0x5604 <free+0x104>
    5600:	13 82       	std	Z+3, r1	; 0x03
    5602:	12 82       	std	Z+2, r1	; 0x02
    5604:	b0 93 ad 05 	sts	0x05AD, r27	; 0x8005ad <__brkval+0x1>
    5608:	a0 93 ac 05 	sts	0x05AC, r26	; 0x8005ac <__brkval>
    560c:	df 91       	pop	r29
    560e:	cf 91       	pop	r28
    5610:	08 95       	ret

00005612 <abort>:
    5612:	81 e0       	ldi	r24, 0x01	; 1
    5614:	90 e0       	ldi	r25, 0x00	; 0
    5616:	f8 94       	cli
    5618:	0c 94 35 2b 	jmp	0x566a	; 0x566a <_exit>

0000561c <memcmp>:
    561c:	fb 01       	movw	r30, r22
    561e:	dc 01       	movw	r26, r24
    5620:	04 c0       	rjmp	.+8      	; 0x562a <memcmp+0xe>
    5622:	8d 91       	ld	r24, X+
    5624:	01 90       	ld	r0, Z+
    5626:	80 19       	sub	r24, r0
    5628:	21 f4       	brne	.+8      	; 0x5632 <memcmp+0x16>
    562a:	41 50       	subi	r20, 0x01	; 1
    562c:	50 40       	sbci	r21, 0x00	; 0
    562e:	c8 f7       	brcc	.-14     	; 0x5622 <memcmp+0x6>
    5630:	88 1b       	sub	r24, r24
    5632:	99 0b       	sbc	r25, r25
    5634:	08 95       	ret

00005636 <strchr>:
    5636:	fc 01       	movw	r30, r24
    5638:	81 91       	ld	r24, Z+
    563a:	86 17       	cp	r24, r22
    563c:	21 f0       	breq	.+8      	; 0x5646 <strchr+0x10>
    563e:	88 23       	and	r24, r24
    5640:	d9 f7       	brne	.-10     	; 0x5638 <strchr+0x2>
    5642:	99 27       	eor	r25, r25
    5644:	08 95       	ret
    5646:	31 97       	sbiw	r30, 0x01	; 1
    5648:	cf 01       	movw	r24, r30
    564a:	08 95       	ret

0000564c <strncpy>:
    564c:	fb 01       	movw	r30, r22
    564e:	dc 01       	movw	r26, r24
    5650:	41 50       	subi	r20, 0x01	; 1
    5652:	50 40       	sbci	r21, 0x00	; 0
    5654:	48 f0       	brcs	.+18     	; 0x5668 <strncpy+0x1c>
    5656:	01 90       	ld	r0, Z+
    5658:	0d 92       	st	X+, r0
    565a:	00 20       	and	r0, r0
    565c:	c9 f7       	brne	.-14     	; 0x5650 <strncpy+0x4>
    565e:	01 c0       	rjmp	.+2      	; 0x5662 <strncpy+0x16>
    5660:	1d 92       	st	X+, r1
    5662:	41 50       	subi	r20, 0x01	; 1
    5664:	50 40       	sbci	r21, 0x00	; 0
    5666:	e0 f7       	brcc	.-8      	; 0x5660 <strncpy+0x14>
    5668:	08 95       	ret

0000566a <_exit>:
    566a:	f8 94       	cli

0000566c <__stop_program>:
    566c:	ff cf       	rjmp	.-2      	; 0x566c <__stop_program>
